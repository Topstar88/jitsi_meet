// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// libflac.js - port of libflac to JavaScript using emscripten


(function (root, factory) {

	var lib, env;
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(function () {
				var _lib = factory(root);
				lib = _lib;
				return _lib;
		});
	} else if (typeof module === 'object' && module.exports) {
		// Node. Does not work with strict CommonJS, but
		// only CommonJS-like environments that support module.exports,
		// like Node.

		// use process.env (if available) for reading Flac environment settings:
		env = typeof process !== 'undefined' && process && process.env? process.env : root;
		lib = factory(env);
		module.exports = lib;
	} else {
		// Browser globals
		lib = factory(root);
		root.Flac = lib;
	}

	if(env? !env.FLAC_UMD_MODE : !root.FLAC_UMD_MODE){
		//"classic mode": export to global variable Flac regardless of environment.

		// if in Node environment, use Node's global (if available) as global/root namespace:
		root = env && env !== root && typeof global !== 'undefined' && global? global : root;
		root.Flac = lib;
	}

}(typeof self !== 'undefined' ? self : this, function (global) {
'use strict';

var Module = Module || {};
var _flac_ready = false;
//in case resources are loaded asynchronously (e.g. *.mem file for minified version): setup "ready" handling
Module["onRuntimeInitialized"] = function(){
	_flac_ready = true;
	if(!_exported){
		//if _exported is not yet set, "pause" until initialization has run through
		setTimeout(function(){if(_exported.onready){_exported.onready();}}, 0);
	} else {
		if(_exported.onready){_exported.onready();}
	}
};

if(global && global.FLAC_SCRIPT_LOCATION){

	Module["memoryInitializerPrefixURL"] = global.FLAC_SCRIPT_LOCATION;

	Module["locateFile"] = function(fileName){
		var path = global.FLAC_SCRIPT_LOCATION || '';
		path += path && !/\/$/.test(path)? '/' : '';
		return path + fileName;
	};

	Module["readBinary"] = function(filePath){

		//for Node: use default implementation (copied from generated code):
		if(ENVIRONMENT_IS_NODE){
			var ret = Module['read'](filePath, true);
			if (!ret.buffer) {
				ret = new Uint8Array(ret);
			}
			assert(ret.buffer);
			return ret;
		}

		//otherwise: try "fallback" to AJAX
		return new Promise(function(resolve, reject){
			var xhr = new XMLHttpRequest();
			xhr.responseType = "arraybuffer";
			xhr.addEventListener("load", function(evt){
				resolve(xhr.response);
			});
			xhr.addEventListener("error", function(err){
				reject(err);
			});
			xhr.open("GET", filePath);
			xhr.send();
		});
	};
}



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (ENVIRONMENT_IS_NODE) {


  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    err('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// *** Environment setup code ***

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(5);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 5; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    err('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      // ..., but after that, add smaller increments towards 2GB, which we cannot reach
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      if (TOTAL_MEMORY === OLD_TOTAL_MEMORY) {
        warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + TOTAL_MEMORY);
      }
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    err('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      err('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  if (!Module["usingWasm"]) {
    err('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 6144;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,5,128,0,0,15,128,0,0,10,0,0,0,27,128,0,0,30,0,0,0,20,0,0,0,17,128,0,0,51,128,0,0,54,0,0,0,60,0,0,0,57,128,0,0,40,0,0,0,45,128,0,0,39,128,0,0,34,0,0,0,99,128,0,0,102,0,0,0,108,0,0,0,105,128,0,0,120,0,0,0,125,128,0,0,119,128,0,0,114,0,0,0,80,0,0,0,85,128,0,0,95,128,0,0,90,0,0,0,75,128,0,0,78,0,0,0,68,0,0,0,65,128,0,0,195,128,0,0,198,0,0,0,204,0,0,0,201,128,0,0,216,0,0,0,221,128,0,0,215,128,0,0,210,0,0,0,240,0,0,0,245,128,0,0,255,128,0,0,250,0,0,0,235,128,0,0,238,0,0,0,228,0,0,0,225,128,0,0,160,0,0,0,165,128,0,0,175,128,0,0,170,0,0,0,187,128,0,0,190,0,0,0,180,0,0,0,177,128,0,0,147,128,0,0,150,0,0,0,156,0,0,0,153,128,0,0,136,0,0,0,141,128,0,0,135,128,0,0,130,0,0,0,131,129,0,0,134,1,0,0,140,1,0,0,137,129,0,0,152,1,0,0,157,129,0,0,151,129,0,0,146,1,0,0,176,1,0,0,181,129,0,0,191,129,0,0,186,1,0,0,171,129,0,0,174,1,0,0,164,1,0,0,161,129,0,0,224,1,0,0,229,129,0,0,239,129,0,0,234,1,0,0,251,129,0,0,254,1,0,0,244,1,0,0,241,129,0,0,211,129,0,0,214,1,0,0,220,1,0,0,217,129,0,0,200,1,0,0,205,129,0,0,199,129,0,0,194,1,0,0,64,1,0,0,69,129,0,0,79,129,0,0,74,1,0,0,91,129,0,0,94,1,0,0,84,1,0,0,81,129,0,0,115,129,0,0,118,1,0,0,124,1,0,0,121,129,0,0,104,1,0,0,109,129,0,0,103,129,0,0,98,1,0,0,35,129,0,0,38,1,0,0,44,1,0,0,41,129,0,0,56,1,0,0,61,129,0,0,55,129,0,0,50,1,0,0,16,1,0,0,21,129,0,0,31,129,0,0,26,1,0,0,11,129,0,0,14,1,0,0,4,1,0,0,1,129,0,0,3,131,0,0,6,3,0,0,12,3,0,0,9,131,0,0,24,3,0,0,29,131,0,0,23,131,0,0,18,3,0,0,48,3,0,0,53,131,0,0,63,131,0,0,58,3,0,0,43,131,0,0,46,3,0,0,36,3,0,0,33,131,0,0,96,3,0,0,101,131,0,0,111,131,0,0,106,3,0,0,123,131,0,0,126,3,0,0,116,3,0,0,113,131,0,0,83,131,0,0,86,3,0,0,92,3,0,0,89,131,0,0,72,3,0,0,77,131,0,0,71,131,0,0,66,3,0,0,192,3,0,0,197,131,0,0,207,131,0,0,202,3,0,0,219,131,0,0,222,3,0,0,212,3,0,0,209,131,0,0,243,131,0,0,246,3,0,0,252,3,0,0,249,131,0,0,232,3,0,0,237,131,0,0,231,131,0,0,226,3,0,0,163,131,0,0,166,3,0,0,172,3,0,0,169,131,0,0,184,3,0,0,189,131,0,0,183,131,0,0,178,3,0,0,144,3,0,0,149,131,0,0,159,131,0,0,154,3,0,0,139,131,0,0,142,3,0,0,132,3,0,0,129,131,0,0,128,2,0,0,133,130,0,0,143,130,0,0,138,2,0,0,155,130,0,0,158,2,0,0,148,2,0,0,145,130,0,0,179,130,0,0,182,2,0,0,188,2,0,0,185,130,0,0,168,2,0,0,173,130,0,0,167,130,0,0,162,2,0,0,227,130,0,0,230,2,0,0,236,2,0,0,233,130,0,0,248,2,0,0,253,130,0,0,247,130,0,0,242,2,0,0,208,2,0,0,213,130,0,0,223,130,0,0,218,2,0,0,203,130,0,0,206,2,0,0,196,2,0,0,193,130,0,0,67,130,0,0,70,2,0,0,76,2,0,0,73,130,0,0,88,2,0,0,93,130,0,0,87,130,0,0,82,2,0,0,112,2,0,0,117,130,0,0,127,130,0,0,122,2,0,0,107,130,0,0,110,2,0,0,100,2,0,0,97,130,0,0,32,2,0,0,37,130,0,0,47,130,0,0,42,2,0,0,59,130,0,0,62,2,0,0,52,2,0,0,49,130,0,0,19,130,0,0,22,2,0,0,28,2,0,0,25,130,0,0,8,2,0,0,13,130,0,0,7,130,0,0,2,2,0,0,67,97,76,102,20,0,0,0,36,0,0,0,96,0,0,0,110,0,0,0,0,4,0,0,23,8,0,0,32,0,0,0,7,0,0,0,24,0,0,0,254,63,0,0,14,0,0,0,3,0,0,0,8,0,0,0,15,0,0,0,31,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,16,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,32,13,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,32,13,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,32,13,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,13,0,0,1,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,32,13,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,32,13,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,44,13,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,44,13,0,0,1,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,73,13,0,0,244,5,0,0,9,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,241,15,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,6,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,249,19,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,7,14,9,28,27,18,21,56,63,54,49,36,35,42,45,112,119,126,121,108,107,98,101,72,79,70,65,84,83,90,93,224,231,238,233,252,251,242,245,216,223,214,209,196,195,202,205,144,151,158,153,140,139,130,133,168,175,166,161,180,179,186,189,199,192,201,206,219,220,213,210,255,248,241,246,227,228,237,234,183,176,185,190,171,172,165,162,143,136,129,134,147,148,157,154,39,32,41,46,59,60,53,50,31,24,17,22,3,4,13,10,87,80,89,94,75,76,69,66,111,104,97,102,115,116,125,122,137,142,135,128,149,146,155,156,177,182,191,184,173,170,163,164,249,254,247,240,229,226,235,236,193,198,207,200,221,218,211,212,105,110,103,96,117,114,123,124,81,86,95,88,77,74,67,68,25,30,23,16,5,2,11,12,33,38,47,40,61,58,51,52,78,73,64,71,82,85,92,91,118,113,120,127,106,109,100,99,62,57,48,55,34,37,44,43,6,1,8,15,26,29,20,19,174,169,160,167,178,181,188,187,150,145,152,159,138,141,132,131,222,217,208,215,194,197,204,203,230,225,232,239,250,253,244,243,114,101,102,101,114,101,110,99,101,32,108,105,98,70,76,65,67,32,49,46,51,46,50,32,50,48,49,55,48,49,48,49,0,102,76,97,67,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,111,102,32,97,116,32,108,101,97,115,116,32,50,32,115,101,99,111,110,100,115,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,105,110,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,116,114,97,99,107,32,40,116,104,101,32,108,101,97,100,45,111,117,116,41,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,109,117,115,116,32,104,97,118,101,32,97,32,108,101,97,100,45,111,117,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,49,55,48,32,40,48,120,65,65,41,0,99,117,101,32,115,104,101,101,116,32,109,97,121,32,110,111,116,32,104,97,118,101,32,97,32,116,114,97,99,107,32,110,117,109,98,101,114,32,48,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,49,45,57,57,32,111,114,32,49,55,48,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,108,101,97,100,45,111,117,116,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,111,110,101,32,105,110,100,101,120,32,112,111,105,110,116,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,39,115,32,102,105,114,115,116,32,105,110,100,101,120,32,110,117,109,98,101,114,32,109,117,115,116,32,98,101,32,48,32,111,114,32,49,0,67,68,45,68,65,32,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,111,102,102,115,101,116,32,109,117,115,116,32,98,101,32,101,118,101,110,108,121,32,100,105,118,105,115,105,98,108,101,32,98,121,32,53,56,56,32,115,97,109,112,108,101,115,0,99,117,101,32,115,104,101,101,116,32,116,114,97,99,107,32,105,110,100,101,120,32,110,117,109,98,101,114,115,32,109,117,115,116,32,105,110,99,114,101,97,115,101,32,98,121,32,49,0,77,73,77,69,32,116,121,112,101,32,115,116,114,105,110,103,32,109,117,115,116,32,99,111,110,116,97,105,110,32,111,110,108,121,32,112,114,105,110,116,97,98,108,101,32,65,83,67,73,73,32,99,104,97,114,97,99,116,101,114,115,32,40,48,120,50,48,45,48,120,55,101,41,0,100,101,115,99,114,105,112,116,105,111,110,32,115,116,114,105,110,103,32,109,117,115,116,32,98,101,32,118,97,108,105,100,32,85,84,70,45,56,0,73,68,51,98,97,114,116,108,101,116,116,0,98,97,114,116,108,101,116,116,95,104,97,110,110,0,98,108,97,99,107,109,97,110,0,98,108,97,99,107,109,97,110,95,104,97,114,114,105,115,95,52,116,101,114,109,95,57,50,100,98,0,99,111,110,110,101,115,0,102,108,97,116,116,111,112,0,103,97,117,115,115,40,0,104,97,109,109,105,110,103,0,104,97,110,110,0,107,97,105,115,101,114,95,98,101,115,115,101,108,0,110,117,116,116,97,108,108,0,114,101,99,116,97,110,103,108,101,0,116,114,105,97,110,103,108,101,0,116,117,107,101,121,40,0,112,97,114,116,105,97,108,95,116,117,107,101,121,40,0,112,117,110,99,104,111,117,116,95,116,117,107,101,121,40,0,119,101,108,99,104,0,116,117,107,101,121,40,53,101,45,49,41,0,116,117,107,101,121,40,53,101,45,49,41,59,112,97,114,116,105,97,108,95,116,117,107,101,121,40,50,41,0,116,117,107,101,121,40,53,101,45,49,41,59,112,97,114,116,105,97,108,95,116,117,107,101,121,40,50,41,59,112,117,110,99,104,111,117,116,95,116,117,107,101,121,40,51,41,0,105,109,97,103,101,47,112,110,103,0,45,45,62,0,105,110,102,105,110,105,116,121,0,110,97,110,0], "i8", ALLOC_NONE, GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //err(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

   



  var _llvm_cos_f64=Math_cos;

  var _llvm_ctlz_i32=true;

  var _llvm_exp_f64=Math_exp;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_log_f64=Math_log;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return functionPointers[index](a1);
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return functionPointers[index](a1,a2);
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return functionPointers[index](a1,a2,a3);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return functionPointers[index](a1,a2,a3,a4);
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    return functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viii(index,a1,a2,a3) {
    functionPointers[index](a1,a2,a3);
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiii(index,a1,a2,a3,a4) {
    functionPointers[index](a1,a2,a3,a4);
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    functionPointers[index](a1,a2,a3,a4,a5,a6);
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    functionPointers[index](a1,a2,a3,a4,a5,a6,a7);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "invoke_iiiiiii": invoke_iiiiiii, "jsCall_iiiiiii": jsCall_iiiiiii, "invoke_viii": invoke_viii, "jsCall_viii": jsCall_viii, "invoke_viiii": invoke_viiii, "jsCall_viiii": jsCall_viiii, "invoke_viiiiii": invoke_viiiiii, "jsCall_viiiiii": jsCall_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "jsCall_viiiiiii": jsCall_viiiiiii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_cos_f64": _llvm_cos_f64, "_llvm_exp_f64": _llvm_exp_f64, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_log_f64": _llvm_log_f64, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var jsCall_iiiiiii=env.jsCall_iiiiiii;
  var invoke_viii=env.invoke_viii;
  var jsCall_viii=env.jsCall_viii;
  var invoke_viiii=env.invoke_viiii;
  var jsCall_viiii=env.jsCall_viiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var jsCall_viiiiii=env.jsCall_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var jsCall_viiiiiii=env.jsCall_viiiiiii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_cos_f64=env._llvm_cos_f64;
  var _llvm_exp_f64=env._llvm_exp_f64;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _llvm_log_f64=env._llvm_log_f64;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _FLAC__bitreader_new() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_calloc(1,40)|0); //@line 229 "bitreader.c"
 $0 = $1; //@line 229 "bitreader.c"
 $2 = $0; //@line 240 "bitreader.c"
 STACKTOP = sp;return ($2|0); //@line 240 "bitreader.c"
}
function _FLAC__bitreader_delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 247 "bitreader.c"
 _FLAC__bitreader_free($2); //@line 247 "bitreader.c"
 $3 = $1; //@line 248 "bitreader.c"
 _free($3); //@line 248 "bitreader.c"
 STACKTOP = sp;return; //@line 249 "bitreader.c"
}
function _FLAC__bitreader_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 277 "bitreader.c"
 $3 = HEAP32[$2>>2]|0; //@line 277 "bitreader.c"
 $4 = (0|0)!=($3|0); //@line 277 "bitreader.c"
 if ($4) {
  $5 = $1; //@line 278 "bitreader.c"
  $6 = HEAP32[$5>>2]|0; //@line 278 "bitreader.c"
  _free($6); //@line 278 "bitreader.c"
 }
 $7 = $1; //@line 279 "bitreader.c"
 HEAP32[$7>>2] = 0; //@line 279 "bitreader.c"
 $8 = $1; //@line 280 "bitreader.c"
 $9 = ((($8)) + 4|0); //@line 280 "bitreader.c"
 HEAP32[$9>>2] = 0; //@line 280 "bitreader.c"
 $10 = $1; //@line 281 "bitreader.c"
 $11 = ((($10)) + 12|0); //@line 281 "bitreader.c"
 HEAP32[$11>>2] = 0; //@line 281 "bitreader.c"
 $12 = $1; //@line 281 "bitreader.c"
 $13 = ((($12)) + 8|0); //@line 281 "bitreader.c"
 HEAP32[$13>>2] = 0; //@line 281 "bitreader.c"
 $14 = $1; //@line 282 "bitreader.c"
 $15 = ((($14)) + 20|0); //@line 282 "bitreader.c"
 HEAP32[$15>>2] = 0; //@line 282 "bitreader.c"
 $16 = $1; //@line 282 "bitreader.c"
 $17 = ((($16)) + 16|0); //@line 282 "bitreader.c"
 HEAP32[$17>>2] = 0; //@line 282 "bitreader.c"
 $18 = $1; //@line 283 "bitreader.c"
 $19 = ((($18)) + 32|0); //@line 283 "bitreader.c"
 HEAP32[$19>>2] = 0; //@line 283 "bitreader.c"
 $20 = $1; //@line 284 "bitreader.c"
 $21 = ((($20)) + 36|0); //@line 284 "bitreader.c"
 HEAP32[$21>>2] = 0; //@line 284 "bitreader.c"
 STACKTOP = sp;return; //@line 285 "bitreader.c"
}
function _FLAC__bitreader_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4; //@line 261 "bitreader.c"
 $8 = ((($7)) + 12|0); //@line 261 "bitreader.c"
 HEAP32[$8>>2] = 0; //@line 261 "bitreader.c"
 $9 = $4; //@line 261 "bitreader.c"
 $10 = ((($9)) + 8|0); //@line 261 "bitreader.c"
 HEAP32[$10>>2] = 0; //@line 261 "bitreader.c"
 $11 = $4; //@line 262 "bitreader.c"
 $12 = ((($11)) + 20|0); //@line 262 "bitreader.c"
 HEAP32[$12>>2] = 0; //@line 262 "bitreader.c"
 $13 = $4; //@line 262 "bitreader.c"
 $14 = ((($13)) + 16|0); //@line 262 "bitreader.c"
 HEAP32[$14>>2] = 0; //@line 262 "bitreader.c"
 $15 = $4; //@line 263 "bitreader.c"
 $16 = ((($15)) + 4|0); //@line 263 "bitreader.c"
 HEAP32[$16>>2] = 2048; //@line 263 "bitreader.c"
 $17 = $4; //@line 264 "bitreader.c"
 $18 = ((($17)) + 4|0); //@line 264 "bitreader.c"
 $19 = HEAP32[$18>>2]|0; //@line 264 "bitreader.c"
 $20 = $19<<2; //@line 264 "bitreader.c"
 $21 = (_malloc($20)|0); //@line 264 "bitreader.c"
 $22 = $4; //@line 264 "bitreader.c"
 HEAP32[$22>>2] = $21; //@line 264 "bitreader.c"
 $23 = $4; //@line 265 "bitreader.c"
 $24 = HEAP32[$23>>2]|0; //@line 265 "bitreader.c"
 $25 = ($24|0)==(0|0); //@line 265 "bitreader.c"
 if ($25) {
  $3 = 0; //@line 266 "bitreader.c"
  $32 = $3; //@line 271 "bitreader.c"
  STACKTOP = sp;return ($32|0); //@line 271 "bitreader.c"
 } else {
  $26 = $5; //@line 267 "bitreader.c"
  $27 = $4; //@line 267 "bitreader.c"
  $28 = ((($27)) + 32|0); //@line 267 "bitreader.c"
  HEAP32[$28>>2] = $26; //@line 267 "bitreader.c"
  $29 = $6; //@line 268 "bitreader.c"
  $30 = $4; //@line 268 "bitreader.c"
  $31 = ((($30)) + 36|0); //@line 268 "bitreader.c"
  HEAP32[$31>>2] = $29; //@line 268 "bitreader.c"
  $3 = 1; //@line 270 "bitreader.c"
  $32 = $3; //@line 271 "bitreader.c"
  STACKTOP = sp;return ($32|0); //@line 271 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitreader_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 289 "bitreader.c"
 $3 = ((($2)) + 12|0); //@line 289 "bitreader.c"
 HEAP32[$3>>2] = 0; //@line 289 "bitreader.c"
 $4 = $1; //@line 289 "bitreader.c"
 $5 = ((($4)) + 8|0); //@line 289 "bitreader.c"
 HEAP32[$5>>2] = 0; //@line 289 "bitreader.c"
 $6 = $1; //@line 290 "bitreader.c"
 $7 = ((($6)) + 20|0); //@line 290 "bitreader.c"
 HEAP32[$7>>2] = 0; //@line 290 "bitreader.c"
 $8 = $1; //@line 290 "bitreader.c"
 $9 = ((($8)) + 16|0); //@line 290 "bitreader.c"
 HEAP32[$9>>2] = 0; //@line 290 "bitreader.c"
 STACKTOP = sp;return 1; //@line 291 "bitreader.c"
}
function _FLAC__bitreader_reset_read_crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3; //@line 330 "bitreader.c"
 $5 = $4&65535; //@line 330 "bitreader.c"
 $6 = $2; //@line 330 "bitreader.c"
 $7 = ((($6)) + 24|0); //@line 330 "bitreader.c"
 HEAP32[$7>>2] = $5; //@line 330 "bitreader.c"
 $8 = $2; //@line 331 "bitreader.c"
 $9 = ((($8)) + 20|0); //@line 331 "bitreader.c"
 $10 = HEAP32[$9>>2]|0; //@line 331 "bitreader.c"
 $11 = $2; //@line 331 "bitreader.c"
 $12 = ((($11)) + 28|0); //@line 331 "bitreader.c"
 HEAP32[$12>>2] = $10; //@line 331 "bitreader.c"
 STACKTOP = sp;return; //@line 332 "bitreader.c"
}
function _FLAC__bitreader_get_read_crc16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1; //@line 342 "bitreader.c"
 $4 = ((($3)) + 20|0); //@line 342 "bitreader.c"
 $5 = HEAP32[$4>>2]|0; //@line 342 "bitreader.c"
 $6 = ($5|0)!=(0); //@line 342 "bitreader.c"
 if (!($6)) {
  $47 = $1; //@line 347 "bitreader.c"
  $48 = ((($47)) + 24|0); //@line 347 "bitreader.c"
  $49 = HEAP32[$48>>2]|0; //@line 347 "bitreader.c"
  $50 = $49&65535; //@line 347 "bitreader.c"
  STACKTOP = sp;return ($50|0); //@line 347 "bitreader.c"
 }
 $7 = $1; //@line 343 "bitreader.c"
 $8 = HEAP32[$7>>2]|0; //@line 343 "bitreader.c"
 $9 = $1; //@line 343 "bitreader.c"
 $10 = ((($9)) + 16|0); //@line 343 "bitreader.c"
 $11 = HEAP32[$10>>2]|0; //@line 343 "bitreader.c"
 $12 = (($8) + ($11<<2)|0); //@line 343 "bitreader.c"
 $13 = HEAP32[$12>>2]|0; //@line 343 "bitreader.c"
 $2 = $13; //@line 343 "bitreader.c"
 while(1) {
  $14 = $1; //@line 344 "bitreader.c"
  $15 = ((($14)) + 28|0); //@line 344 "bitreader.c"
  $16 = HEAP32[$15>>2]|0; //@line 344 "bitreader.c"
  $17 = $1; //@line 344 "bitreader.c"
  $18 = ((($17)) + 20|0); //@line 344 "bitreader.c"
  $19 = HEAP32[$18>>2]|0; //@line 344 "bitreader.c"
  $20 = ($16>>>0)<($19>>>0); //@line 344 "bitreader.c"
  if (!($20)) {
   break;
  }
  $21 = $1; //@line 345 "bitreader.c"
  $22 = ((($21)) + 24|0); //@line 345 "bitreader.c"
  $23 = HEAP32[$22>>2]|0; //@line 345 "bitreader.c"
  $24 = $23 << 8; //@line 345 "bitreader.c"
  $25 = $24 & 65535; //@line 345 "bitreader.c"
  $26 = $1; //@line 345 "bitreader.c"
  $27 = ((($26)) + 24|0); //@line 345 "bitreader.c"
  $28 = HEAP32[$27>>2]|0; //@line 345 "bitreader.c"
  $29 = $28 >>> 8; //@line 345 "bitreader.c"
  $30 = $2; //@line 345 "bitreader.c"
  $31 = $1; //@line 345 "bitreader.c"
  $32 = ((($31)) + 28|0); //@line 345 "bitreader.c"
  $33 = HEAP32[$32>>2]|0; //@line 345 "bitreader.c"
  $34 = (24 - ($33))|0; //@line 345 "bitreader.c"
  $35 = $30 >>> $34; //@line 345 "bitreader.c"
  $36 = $35 & 255; //@line 345 "bitreader.c"
  $37 = $29 ^ $36; //@line 345 "bitreader.c"
  $38 = (8 + ($37<<2)|0); //@line 345 "bitreader.c"
  $39 = HEAP32[$38>>2]|0; //@line 345 "bitreader.c"
  $40 = $25 ^ $39; //@line 345 "bitreader.c"
  $41 = $1; //@line 345 "bitreader.c"
  $42 = ((($41)) + 24|0); //@line 345 "bitreader.c"
  HEAP32[$42>>2] = $40; //@line 345 "bitreader.c"
  $43 = $1; //@line 344 "bitreader.c"
  $44 = ((($43)) + 28|0); //@line 344 "bitreader.c"
  $45 = HEAP32[$44>>2]|0; //@line 344 "bitreader.c"
  $46 = (($45) + 8)|0; //@line 344 "bitreader.c"
  HEAP32[$44>>2] = $46; //@line 344 "bitreader.c"
 }
 $47 = $1; //@line 347 "bitreader.c"
 $48 = ((($47)) + 24|0); //@line 347 "bitreader.c"
 $49 = HEAP32[$48>>2]|0; //@line 347 "bitreader.c"
 $50 = $49&65535; //@line 347 "bitreader.c"
 STACKTOP = sp;return ($50|0); //@line 347 "bitreader.c"
}
function _FLAC__bitreader_is_consumed_byte_aligned($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 352 "bitreader.c"
 $3 = ((($2)) + 20|0); //@line 352 "bitreader.c"
 $4 = HEAP32[$3>>2]|0; //@line 352 "bitreader.c"
 $5 = $4 & 7; //@line 352 "bitreader.c"
 $6 = ($5|0)==(0); //@line 352 "bitreader.c"
 $7 = $6&1; //@line 352 "bitreader.c"
 STACKTOP = sp;return ($7|0); //@line 352 "bitreader.c"
}
function _FLAC__bitreader_bits_left_for_byte_alignment($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 357 "bitreader.c"
 $3 = ((($2)) + 20|0); //@line 357 "bitreader.c"
 $4 = HEAP32[$3>>2]|0; //@line 357 "bitreader.c"
 $5 = $4 & 7; //@line 357 "bitreader.c"
 $6 = (8 - ($5))|0; //@line 357 "bitreader.c"
 STACKTOP = sp;return ($6|0); //@line 357 "bitreader.c"
}
function _FLAC__bitreader_get_input_bits_unconsumed($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 362 "bitreader.c"
 $3 = ((($2)) + 8|0); //@line 362 "bitreader.c"
 $4 = HEAP32[$3>>2]|0; //@line 362 "bitreader.c"
 $5 = $1; //@line 362 "bitreader.c"
 $6 = ((($5)) + 16|0); //@line 362 "bitreader.c"
 $7 = HEAP32[$6>>2]|0; //@line 362 "bitreader.c"
 $8 = (($4) - ($7))|0; //@line 362 "bitreader.c"
 $9 = $8<<5; //@line 362 "bitreader.c"
 $10 = $1; //@line 362 "bitreader.c"
 $11 = ((($10)) + 12|0); //@line 362 "bitreader.c"
 $12 = HEAP32[$11>>2]|0; //@line 362 "bitreader.c"
 $13 = $12<<3; //@line 362 "bitreader.c"
 $14 = (($9) + ($13))|0; //@line 362 "bitreader.c"
 $15 = $1; //@line 362 "bitreader.c"
 $16 = ((($15)) + 20|0); //@line 362 "bitreader.c"
 $17 = HEAP32[$16>>2]|0; //@line 362 "bitreader.c"
 $18 = (($14) - ($17))|0; //@line 362 "bitreader.c"
 STACKTOP = sp;return ($18|0); //@line 362 "bitreader.c"
}
function _FLAC__bitreader_read_raw_uint32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6; //@line 377 "bitreader.c"
 $11 = ($10|0)==(0); //@line 377 "bitreader.c"
 if ($11) {
  $12 = $5; //@line 378 "bitreader.c"
  HEAP32[$12>>2] = 0; //@line 378 "bitreader.c"
  $3 = 1; //@line 379 "bitreader.c"
  $165 = $3; //@line 443 "bitreader.c"
  STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
 }
 while(1) {
  $13 = $4; //@line 382 "bitreader.c"
  $14 = ((($13)) + 8|0); //@line 382 "bitreader.c"
  $15 = HEAP32[$14>>2]|0; //@line 382 "bitreader.c"
  $16 = $4; //@line 382 "bitreader.c"
  $17 = ((($16)) + 16|0); //@line 382 "bitreader.c"
  $18 = HEAP32[$17>>2]|0; //@line 382 "bitreader.c"
  $19 = (($15) - ($18))|0; //@line 382 "bitreader.c"
  $20 = $19<<5; //@line 382 "bitreader.c"
  $21 = $4; //@line 382 "bitreader.c"
  $22 = ((($21)) + 12|0); //@line 382 "bitreader.c"
  $23 = HEAP32[$22>>2]|0; //@line 382 "bitreader.c"
  $24 = $23<<3; //@line 382 "bitreader.c"
  $25 = (($20) + ($24))|0; //@line 382 "bitreader.c"
  $26 = $4; //@line 382 "bitreader.c"
  $27 = ((($26)) + 20|0); //@line 382 "bitreader.c"
  $28 = HEAP32[$27>>2]|0; //@line 382 "bitreader.c"
  $29 = (($25) - ($28))|0; //@line 382 "bitreader.c"
  $30 = $6; //@line 382 "bitreader.c"
  $31 = ($29>>>0)<($30>>>0); //@line 382 "bitreader.c"
  $32 = $4;
  if (!($31)) {
   break;
  }
  $33 = (_bitreader_read_from_client_($32)|0); //@line 383 "bitreader.c"
  $34 = ($33|0)!=(0); //@line 383 "bitreader.c"
  if (!($34)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $3 = 0; //@line 384 "bitreader.c"
  $165 = $3; //@line 443 "bitreader.c"
  STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
 }
 $35 = ((($32)) + 16|0); //@line 386 "bitreader.c"
 $36 = HEAP32[$35>>2]|0; //@line 386 "bitreader.c"
 $37 = $4; //@line 386 "bitreader.c"
 $38 = ((($37)) + 8|0); //@line 386 "bitreader.c"
 $39 = HEAP32[$38>>2]|0; //@line 386 "bitreader.c"
 $40 = ($36>>>0)<($39>>>0); //@line 386 "bitreader.c"
 $41 = $4;
 $42 = ((($41)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 $45 = $4;
 if (!($40)) {
  $132 = HEAP32[$45>>2]|0;
  $133 = $4;
  $134 = ((($133)) + 16|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($132) + ($135<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  if ($44) {
   $138 = $4; //@line 433 "bitreader.c"
   $139 = ((($138)) + 20|0); //@line 433 "bitreader.c"
   $140 = HEAP32[$139>>2]|0; //@line 433 "bitreader.c"
   $141 = -1 >>> $140; //@line 433 "bitreader.c"
   $142 = $137 & $141; //@line 433 "bitreader.c"
   $143 = $4; //@line 433 "bitreader.c"
   $144 = ((($143)) + 20|0); //@line 433 "bitreader.c"
   $145 = HEAP32[$144>>2]|0; //@line 433 "bitreader.c"
   $146 = (32 - ($145))|0; //@line 433 "bitreader.c"
   $147 = $6; //@line 433 "bitreader.c"
   $148 = (($146) - ($147))|0; //@line 433 "bitreader.c"
   $149 = $142 >>> $148; //@line 433 "bitreader.c"
   $150 = $5; //@line 433 "bitreader.c"
   HEAP32[$150>>2] = $149; //@line 433 "bitreader.c"
   $151 = $6; //@line 434 "bitreader.c"
   $152 = $4; //@line 434 "bitreader.c"
   $153 = ((($152)) + 20|0); //@line 434 "bitreader.c"
   $154 = HEAP32[$153>>2]|0; //@line 434 "bitreader.c"
   $155 = (($154) + ($151))|0; //@line 434 "bitreader.c"
   HEAP32[$153>>2] = $155; //@line 434 "bitreader.c"
   $3 = 1; //@line 435 "bitreader.c"
   $165 = $3; //@line 443 "bitreader.c"
   STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
  } else {
   $156 = $6; //@line 438 "bitreader.c"
   $157 = (32 - ($156))|0; //@line 438 "bitreader.c"
   $158 = $137 >>> $157; //@line 438 "bitreader.c"
   $159 = $5; //@line 438 "bitreader.c"
   HEAP32[$159>>2] = $158; //@line 438 "bitreader.c"
   $160 = $6; //@line 439 "bitreader.c"
   $161 = $4; //@line 439 "bitreader.c"
   $162 = ((($161)) + 20|0); //@line 439 "bitreader.c"
   $163 = HEAP32[$162>>2]|0; //@line 439 "bitreader.c"
   $164 = (($163) + ($160))|0; //@line 439 "bitreader.c"
   HEAP32[$162>>2] = $164; //@line 439 "bitreader.c"
   $3 = 1; //@line 440 "bitreader.c"
   $165 = $3; //@line 443 "bitreader.c"
   STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
  }
 }
 if (!($44)) {
  $109 = HEAP32[$45>>2]|0; //@line 411 "bitreader.c"
  $110 = $4; //@line 411 "bitreader.c"
  $111 = ((($110)) + 16|0); //@line 411 "bitreader.c"
  $112 = HEAP32[$111>>2]|0; //@line 411 "bitreader.c"
  $113 = (($109) + ($112<<2)|0); //@line 411 "bitreader.c"
  $114 = HEAP32[$113>>2]|0; //@line 411 "bitreader.c"
  $9 = $114; //@line 411 "bitreader.c"
  $115 = $6; //@line 412 "bitreader.c"
  $116 = ($115>>>0)<(32); //@line 412 "bitreader.c"
  $117 = $9;
  if ($116) {
   $118 = $6; //@line 413 "bitreader.c"
   $119 = (32 - ($118))|0; //@line 413 "bitreader.c"
   $120 = $117 >>> $119; //@line 413 "bitreader.c"
   $121 = $5; //@line 413 "bitreader.c"
   HEAP32[$121>>2] = $120; //@line 413 "bitreader.c"
   $122 = $6; //@line 414 "bitreader.c"
   $123 = $4; //@line 414 "bitreader.c"
   $124 = ((($123)) + 20|0); //@line 414 "bitreader.c"
   HEAP32[$124>>2] = $122; //@line 414 "bitreader.c"
   $3 = 1; //@line 415 "bitreader.c"
   $165 = $3; //@line 443 "bitreader.c"
   STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
  } else {
   $125 = $5; //@line 418 "bitreader.c"
   HEAP32[$125>>2] = $117; //@line 418 "bitreader.c"
   $126 = $4; //@line 419 "bitreader.c"
   $127 = $9; //@line 419 "bitreader.c"
   _crc16_update_word_($126,$127); //@line 419 "bitreader.c"
   $128 = $4; //@line 420 "bitreader.c"
   $129 = ((($128)) + 16|0); //@line 420 "bitreader.c"
   $130 = HEAP32[$129>>2]|0; //@line 420 "bitreader.c"
   $131 = (($130) + 1)|0; //@line 420 "bitreader.c"
   HEAP32[$129>>2] = $131; //@line 420 "bitreader.c"
   $3 = 1; //@line 421 "bitreader.c"
   $165 = $3; //@line 443 "bitreader.c"
   STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
  }
 }
 $46 = ((($45)) + 20|0); //@line 390 "bitreader.c"
 $47 = HEAP32[$46>>2]|0; //@line 390 "bitreader.c"
 $48 = (32 - ($47))|0; //@line 390 "bitreader.c"
 $7 = $48; //@line 390 "bitreader.c"
 $49 = $4; //@line 391 "bitreader.c"
 $50 = HEAP32[$49>>2]|0; //@line 391 "bitreader.c"
 $51 = $4; //@line 391 "bitreader.c"
 $52 = ((($51)) + 16|0); //@line 391 "bitreader.c"
 $53 = HEAP32[$52>>2]|0; //@line 391 "bitreader.c"
 $54 = (($50) + ($53<<2)|0); //@line 391 "bitreader.c"
 $55 = HEAP32[$54>>2]|0; //@line 391 "bitreader.c"
 $8 = $55; //@line 391 "bitreader.c"
 $56 = $6; //@line 392 "bitreader.c"
 $57 = $7; //@line 392 "bitreader.c"
 $58 = ($56>>>0)<($57>>>0); //@line 392 "bitreader.c"
 $59 = $8;
 $60 = $4;
 $61 = ((($60)) + 20|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = -1 >>> $62;
 $64 = $59 & $63;
 if ($58) {
  $65 = $7; //@line 393 "bitreader.c"
  $66 = $6; //@line 393 "bitreader.c"
  $67 = (($65) - ($66))|0; //@line 393 "bitreader.c"
  $68 = $64 >>> $67; //@line 393 "bitreader.c"
  $69 = $5; //@line 393 "bitreader.c"
  HEAP32[$69>>2] = $68; //@line 393 "bitreader.c"
  $70 = $6; //@line 394 "bitreader.c"
  $71 = $4; //@line 394 "bitreader.c"
  $72 = ((($71)) + 20|0); //@line 394 "bitreader.c"
  $73 = HEAP32[$72>>2]|0; //@line 394 "bitreader.c"
  $74 = (($73) + ($70))|0; //@line 394 "bitreader.c"
  HEAP32[$72>>2] = $74; //@line 394 "bitreader.c"
  $3 = 1; //@line 395 "bitreader.c"
  $165 = $3; //@line 443 "bitreader.c"
  STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
 }
 $75 = $5; //@line 398 "bitreader.c"
 HEAP32[$75>>2] = $64; //@line 398 "bitreader.c"
 $76 = $7; //@line 399 "bitreader.c"
 $77 = $6; //@line 399 "bitreader.c"
 $78 = (($77) - ($76))|0; //@line 399 "bitreader.c"
 $6 = $78; //@line 399 "bitreader.c"
 $79 = $4; //@line 400 "bitreader.c"
 $80 = $8; //@line 400 "bitreader.c"
 _crc16_update_word_($79,$80); //@line 400 "bitreader.c"
 $81 = $4; //@line 401 "bitreader.c"
 $82 = ((($81)) + 16|0); //@line 401 "bitreader.c"
 $83 = HEAP32[$82>>2]|0; //@line 401 "bitreader.c"
 $84 = (($83) + 1)|0; //@line 401 "bitreader.c"
 HEAP32[$82>>2] = $84; //@line 401 "bitreader.c"
 $85 = $4; //@line 402 "bitreader.c"
 $86 = ((($85)) + 20|0); //@line 402 "bitreader.c"
 HEAP32[$86>>2] = 0; //@line 402 "bitreader.c"
 $87 = $6; //@line 403 "bitreader.c"
 $88 = ($87|0)!=(0); //@line 403 "bitreader.c"
 if ($88) {
  $89 = $6; //@line 404 "bitreader.c"
  $90 = $5; //@line 404 "bitreader.c"
  $91 = HEAP32[$90>>2]|0; //@line 404 "bitreader.c"
  $92 = $91 << $89; //@line 404 "bitreader.c"
  HEAP32[$90>>2] = $92; //@line 404 "bitreader.c"
  $93 = $4; //@line 405 "bitreader.c"
  $94 = HEAP32[$93>>2]|0; //@line 405 "bitreader.c"
  $95 = $4; //@line 405 "bitreader.c"
  $96 = ((($95)) + 16|0); //@line 405 "bitreader.c"
  $97 = HEAP32[$96>>2]|0; //@line 405 "bitreader.c"
  $98 = (($94) + ($97<<2)|0); //@line 405 "bitreader.c"
  $99 = HEAP32[$98>>2]|0; //@line 405 "bitreader.c"
  $100 = $6; //@line 405 "bitreader.c"
  $101 = (32 - ($100))|0; //@line 405 "bitreader.c"
  $102 = $99 >>> $101; //@line 405 "bitreader.c"
  $103 = $5; //@line 405 "bitreader.c"
  $104 = HEAP32[$103>>2]|0; //@line 405 "bitreader.c"
  $105 = $104 | $102; //@line 405 "bitreader.c"
  HEAP32[$103>>2] = $105; //@line 405 "bitreader.c"
  $106 = $6; //@line 406 "bitreader.c"
  $107 = $4; //@line 406 "bitreader.c"
  $108 = ((($107)) + 20|0); //@line 406 "bitreader.c"
  HEAP32[$108>>2] = $106; //@line 406 "bitreader.c"
 }
 $3 = 1; //@line 408 "bitreader.c"
 $165 = $3; //@line 443 "bitreader.c"
 STACKTOP = sp;return ($165|0); //@line 443 "bitreader.c"
}
function _bitreader_read_from_client_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $2 = $0;
 $7 = $2; //@line 153 "bitreader.c"
 $8 = ((($7)) + 16|0); //@line 153 "bitreader.c"
 $9 = HEAP32[$8>>2]|0; //@line 153 "bitreader.c"
 $10 = ($9>>>0)>(0); //@line 153 "bitreader.c"
 if ($10) {
  $11 = $2; //@line 154 "bitreader.c"
  $12 = ((($11)) + 16|0); //@line 154 "bitreader.c"
  $13 = HEAP32[$12>>2]|0; //@line 154 "bitreader.c"
  $3 = $13; //@line 154 "bitreader.c"
  $14 = $2; //@line 155 "bitreader.c"
  $15 = ((($14)) + 8|0); //@line 155 "bitreader.c"
  $16 = HEAP32[$15>>2]|0; //@line 155 "bitreader.c"
  $17 = $2; //@line 155 "bitreader.c"
  $18 = ((($17)) + 12|0); //@line 155 "bitreader.c"
  $19 = HEAP32[$18>>2]|0; //@line 155 "bitreader.c"
  $20 = ($19|0)!=(0); //@line 155 "bitreader.c"
  $21 = $20 ? 1 : 0; //@line 155 "bitreader.c"
  $22 = (($16) + ($21))|0; //@line 155 "bitreader.c"
  $4 = $22; //@line 155 "bitreader.c"
  $23 = $2; //@line 156 "bitreader.c"
  $24 = HEAP32[$23>>2]|0; //@line 156 "bitreader.c"
  $25 = $2; //@line 156 "bitreader.c"
  $26 = HEAP32[$25>>2]|0; //@line 156 "bitreader.c"
  $27 = $3; //@line 156 "bitreader.c"
  $28 = (($26) + ($27<<2)|0); //@line 156 "bitreader.c"
  $29 = $4; //@line 156 "bitreader.c"
  $30 = $3; //@line 156 "bitreader.c"
  $31 = (($29) - ($30))|0; //@line 156 "bitreader.c"
  $32 = $31<<2; //@line 156 "bitreader.c"
  _memmove(($24|0),($28|0),($32|0))|0; //@line 156 "bitreader.c"
  $33 = $3; //@line 158 "bitreader.c"
  $34 = $2; //@line 158 "bitreader.c"
  $35 = ((($34)) + 8|0); //@line 158 "bitreader.c"
  $36 = HEAP32[$35>>2]|0; //@line 158 "bitreader.c"
  $37 = (($36) - ($33))|0; //@line 158 "bitreader.c"
  HEAP32[$35>>2] = $37; //@line 158 "bitreader.c"
  $38 = $2; //@line 159 "bitreader.c"
  $39 = ((($38)) + 16|0); //@line 159 "bitreader.c"
  HEAP32[$39>>2] = 0; //@line 159 "bitreader.c"
 }
 $40 = $2; //@line 165 "bitreader.c"
 $41 = ((($40)) + 4|0); //@line 165 "bitreader.c"
 $42 = HEAP32[$41>>2]|0; //@line 165 "bitreader.c"
 $43 = $2; //@line 165 "bitreader.c"
 $44 = ((($43)) + 8|0); //@line 165 "bitreader.c"
 $45 = HEAP32[$44>>2]|0; //@line 165 "bitreader.c"
 $46 = (($42) - ($45))|0; //@line 165 "bitreader.c"
 $47 = $46<<2; //@line 165 "bitreader.c"
 $48 = $2; //@line 165 "bitreader.c"
 $49 = ((($48)) + 12|0); //@line 165 "bitreader.c"
 $50 = HEAP32[$49>>2]|0; //@line 165 "bitreader.c"
 $51 = (($47) - ($50))|0; //@line 165 "bitreader.c"
 HEAP32[$5>>2] = $51; //@line 165 "bitreader.c"
 $52 = HEAP32[$5>>2]|0; //@line 166 "bitreader.c"
 $53 = ($52|0)==(0); //@line 166 "bitreader.c"
 if ($53) {
  $1 = 0; //@line 167 "bitreader.c"
  $194 = $1; //@line 219 "bitreader.c"
  STACKTOP = sp;return ($194|0); //@line 219 "bitreader.c"
 }
 $54 = $2; //@line 168 "bitreader.c"
 $55 = HEAP32[$54>>2]|0; //@line 168 "bitreader.c"
 $56 = $2; //@line 168 "bitreader.c"
 $57 = ((($56)) + 8|0); //@line 168 "bitreader.c"
 $58 = HEAP32[$57>>2]|0; //@line 168 "bitreader.c"
 $59 = (($55) + ($58<<2)|0); //@line 168 "bitreader.c"
 $60 = $2; //@line 168 "bitreader.c"
 $61 = ((($60)) + 12|0); //@line 168 "bitreader.c"
 $62 = HEAP32[$61>>2]|0; //@line 168 "bitreader.c"
 $63 = (($59) + ($62)|0); //@line 168 "bitreader.c"
 $6 = $63; //@line 168 "bitreader.c"
 $64 = $2; //@line 180 "bitreader.c"
 $65 = ((($64)) + 12|0); //@line 180 "bitreader.c"
 $66 = HEAP32[$65>>2]|0; //@line 180 "bitreader.c"
 $67 = ($66|0)!=(0); //@line 180 "bitreader.c"
 if ($67) {
  $68 = $2; //@line 181 "bitreader.c"
  $69 = HEAP32[$68>>2]|0; //@line 181 "bitreader.c"
  $70 = $2; //@line 181 "bitreader.c"
  $71 = ((($70)) + 8|0); //@line 181 "bitreader.c"
  $72 = HEAP32[$71>>2]|0; //@line 181 "bitreader.c"
  $73 = (($69) + ($72<<2)|0); //@line 181 "bitreader.c"
  $74 = HEAP32[$73>>2]|0; //@line 181 "bitreader.c"
  $75 = $74 >>> 24; //@line 181 "bitreader.c"
  $76 = $75 & 255; //@line 181 "bitreader.c"
  $77 = $2; //@line 181 "bitreader.c"
  $78 = HEAP32[$77>>2]|0; //@line 181 "bitreader.c"
  $79 = $2; //@line 181 "bitreader.c"
  $80 = ((($79)) + 8|0); //@line 181 "bitreader.c"
  $81 = HEAP32[$80>>2]|0; //@line 181 "bitreader.c"
  $82 = (($78) + ($81<<2)|0); //@line 181 "bitreader.c"
  $83 = HEAP32[$82>>2]|0; //@line 181 "bitreader.c"
  $84 = $83 >>> 8; //@line 181 "bitreader.c"
  $85 = $84 & 65280; //@line 181 "bitreader.c"
  $86 = $76 | $85; //@line 181 "bitreader.c"
  $87 = $2; //@line 181 "bitreader.c"
  $88 = HEAP32[$87>>2]|0; //@line 181 "bitreader.c"
  $89 = $2; //@line 181 "bitreader.c"
  $90 = ((($89)) + 8|0); //@line 181 "bitreader.c"
  $91 = HEAP32[$90>>2]|0; //@line 181 "bitreader.c"
  $92 = (($88) + ($91<<2)|0); //@line 181 "bitreader.c"
  $93 = HEAP32[$92>>2]|0; //@line 181 "bitreader.c"
  $94 = $93 & 65280; //@line 181 "bitreader.c"
  $95 = $94 << 8; //@line 181 "bitreader.c"
  $96 = $86 | $95; //@line 181 "bitreader.c"
  $97 = $2; //@line 181 "bitreader.c"
  $98 = HEAP32[$97>>2]|0; //@line 181 "bitreader.c"
  $99 = $2; //@line 181 "bitreader.c"
  $100 = ((($99)) + 8|0); //@line 181 "bitreader.c"
  $101 = HEAP32[$100>>2]|0; //@line 181 "bitreader.c"
  $102 = (($98) + ($101<<2)|0); //@line 181 "bitreader.c"
  $103 = HEAP32[$102>>2]|0; //@line 181 "bitreader.c"
  $104 = $103 & 255; //@line 181 "bitreader.c"
  $105 = $104 << 24; //@line 181 "bitreader.c"
  $106 = $96 | $105; //@line 181 "bitreader.c"
  $107 = $2; //@line 181 "bitreader.c"
  $108 = HEAP32[$107>>2]|0; //@line 181 "bitreader.c"
  $109 = $2; //@line 181 "bitreader.c"
  $110 = ((($109)) + 8|0); //@line 181 "bitreader.c"
  $111 = HEAP32[$110>>2]|0; //@line 181 "bitreader.c"
  $112 = (($108) + ($111<<2)|0); //@line 181 "bitreader.c"
  HEAP32[$112>>2] = $106; //@line 181 "bitreader.c"
 }
 $113 = $2; //@line 192 "bitreader.c"
 $114 = ((($113)) + 32|0); //@line 192 "bitreader.c"
 $115 = HEAP32[$114>>2]|0; //@line 192 "bitreader.c"
 $116 = $6; //@line 192 "bitreader.c"
 $117 = $2; //@line 192 "bitreader.c"
 $118 = ((($117)) + 36|0); //@line 192 "bitreader.c"
 $119 = HEAP32[$118>>2]|0; //@line 192 "bitreader.c"
 $120 = (FUNCTION_TABLE_iiii[$115 & 31]($116,$5,$119)|0); //@line 192 "bitreader.c"
 $121 = ($120|0)!=(0); //@line 192 "bitreader.c"
 if (!($121)) {
  $1 = 0; //@line 193 "bitreader.c"
  $194 = $1; //@line 219 "bitreader.c"
  STACKTOP = sp;return ($194|0); //@line 219 "bitreader.c"
 }
 $122 = $2; //@line 203 "bitreader.c"
 $123 = ((($122)) + 8|0); //@line 203 "bitreader.c"
 $124 = HEAP32[$123>>2]|0; //@line 203 "bitreader.c"
 $125 = $124<<2; //@line 203 "bitreader.c"
 $126 = $2; //@line 203 "bitreader.c"
 $127 = ((($126)) + 12|0); //@line 203 "bitreader.c"
 $128 = HEAP32[$127>>2]|0; //@line 203 "bitreader.c"
 $129 = (($125) + ($128))|0; //@line 203 "bitreader.c"
 $130 = HEAP32[$5>>2]|0; //@line 203 "bitreader.c"
 $131 = (($129) + ($130))|0; //@line 203 "bitreader.c"
 $132 = (($131) + 3)|0; //@line 203 "bitreader.c"
 $133 = (($132>>>0) / 4)&-1; //@line 203 "bitreader.c"
 $4 = $133; //@line 203 "bitreader.c"
 $134 = $2; //@line 204 "bitreader.c"
 $135 = ((($134)) + 8|0); //@line 204 "bitreader.c"
 $136 = HEAP32[$135>>2]|0; //@line 204 "bitreader.c"
 $3 = $136; //@line 204 "bitreader.c"
 while(1) {
  $137 = $3; //@line 204 "bitreader.c"
  $138 = $4; //@line 204 "bitreader.c"
  $139 = ($137>>>0)<($138>>>0); //@line 204 "bitreader.c"
  $140 = $2;
  if (!($139)) {
   break;
  }
  $141 = HEAP32[$140>>2]|0; //@line 205 "bitreader.c"
  $142 = $3; //@line 205 "bitreader.c"
  $143 = (($141) + ($142<<2)|0); //@line 205 "bitreader.c"
  $144 = HEAP32[$143>>2]|0; //@line 205 "bitreader.c"
  $145 = $144 >>> 24; //@line 205 "bitreader.c"
  $146 = $145 & 255; //@line 205 "bitreader.c"
  $147 = $2; //@line 205 "bitreader.c"
  $148 = HEAP32[$147>>2]|0; //@line 205 "bitreader.c"
  $149 = $3; //@line 205 "bitreader.c"
  $150 = (($148) + ($149<<2)|0); //@line 205 "bitreader.c"
  $151 = HEAP32[$150>>2]|0; //@line 205 "bitreader.c"
  $152 = $151 >>> 8; //@line 205 "bitreader.c"
  $153 = $152 & 65280; //@line 205 "bitreader.c"
  $154 = $146 | $153; //@line 205 "bitreader.c"
  $155 = $2; //@line 205 "bitreader.c"
  $156 = HEAP32[$155>>2]|0; //@line 205 "bitreader.c"
  $157 = $3; //@line 205 "bitreader.c"
  $158 = (($156) + ($157<<2)|0); //@line 205 "bitreader.c"
  $159 = HEAP32[$158>>2]|0; //@line 205 "bitreader.c"
  $160 = $159 & 65280; //@line 205 "bitreader.c"
  $161 = $160 << 8; //@line 205 "bitreader.c"
  $162 = $154 | $161; //@line 205 "bitreader.c"
  $163 = $2; //@line 205 "bitreader.c"
  $164 = HEAP32[$163>>2]|0; //@line 205 "bitreader.c"
  $165 = $3; //@line 205 "bitreader.c"
  $166 = (($164) + ($165<<2)|0); //@line 205 "bitreader.c"
  $167 = HEAP32[$166>>2]|0; //@line 205 "bitreader.c"
  $168 = $167 & 255; //@line 205 "bitreader.c"
  $169 = $168 << 24; //@line 205 "bitreader.c"
  $170 = $162 | $169; //@line 205 "bitreader.c"
  $171 = $2; //@line 205 "bitreader.c"
  $172 = HEAP32[$171>>2]|0; //@line 205 "bitreader.c"
  $173 = $3; //@line 205 "bitreader.c"
  $174 = (($172) + ($173<<2)|0); //@line 205 "bitreader.c"
  HEAP32[$174>>2] = $170; //@line 205 "bitreader.c"
  $175 = $3; //@line 204 "bitreader.c"
  $176 = (($175) + 1)|0; //@line 204 "bitreader.c"
  $3 = $176; //@line 204 "bitreader.c"
 }
 $177 = ((($140)) + 8|0); //@line 214 "bitreader.c"
 $178 = HEAP32[$177>>2]|0; //@line 214 "bitreader.c"
 $179 = $178<<2; //@line 214 "bitreader.c"
 $180 = $2; //@line 214 "bitreader.c"
 $181 = ((($180)) + 12|0); //@line 214 "bitreader.c"
 $182 = HEAP32[$181>>2]|0; //@line 214 "bitreader.c"
 $183 = (($179) + ($182))|0; //@line 214 "bitreader.c"
 $184 = HEAP32[$5>>2]|0; //@line 214 "bitreader.c"
 $185 = (($183) + ($184))|0; //@line 214 "bitreader.c"
 $4 = $185; //@line 214 "bitreader.c"
 $186 = $4; //@line 215 "bitreader.c"
 $187 = (($186>>>0) / 4)&-1; //@line 215 "bitreader.c"
 $188 = $2; //@line 215 "bitreader.c"
 $189 = ((($188)) + 8|0); //@line 215 "bitreader.c"
 HEAP32[$189>>2] = $187; //@line 215 "bitreader.c"
 $190 = $4; //@line 216 "bitreader.c"
 $191 = (($190>>>0) % 4)&-1; //@line 216 "bitreader.c"
 $192 = $2; //@line 216 "bitreader.c"
 $193 = ((($192)) + 12|0); //@line 216 "bitreader.c"
 HEAP32[$193>>2] = $191; //@line 216 "bitreader.c"
 $1 = 1; //@line 218 "bitreader.c"
 $194 = $1; //@line 219 "bitreader.c"
 STACKTOP = sp;return ($194|0); //@line 219 "bitreader.c"
}
function _crc16_update_word_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2; //@line 119 "bitreader.c"
 $6 = ((($5)) + 24|0); //@line 119 "bitreader.c"
 $7 = HEAP32[$6>>2]|0; //@line 119 "bitreader.c"
 $4 = $7; //@line 119 "bitreader.c"
 $8 = $2; //@line 121 "bitreader.c"
 $9 = ((($8)) + 28|0); //@line 121 "bitreader.c"
 $10 = HEAP32[$9>>2]|0; //@line 121 "bitreader.c"
 $11 = (($10) - 0)|0; //@line 121 "bitreader.c"
 $12 = $11 >>> 3; //@line 121 "bitreader.c"
 $13 = $11 << 29; //@line 121 "bitreader.c"
 $14 = $12 | $13; //@line 121 "bitreader.c"
 switch ($14|0) {
 case 0:  {
  $15 = $4; //@line 122 "bitreader.c"
  $16 = $15 << 8; //@line 122 "bitreader.c"
  $17 = $16 & 65535; //@line 122 "bitreader.c"
  $18 = $4; //@line 122 "bitreader.c"
  $19 = $18 >>> 8; //@line 122 "bitreader.c"
  $20 = $3; //@line 122 "bitreader.c"
  $21 = $20 >>> 24; //@line 122 "bitreader.c"
  $22 = $19 ^ $21; //@line 122 "bitreader.c"
  $23 = (8 + ($22<<2)|0); //@line 122 "bitreader.c"
  $24 = HEAP32[$23>>2]|0; //@line 122 "bitreader.c"
  $25 = $17 ^ $24; //@line 122 "bitreader.c"
  $4 = $25; //@line 122 "bitreader.c"
  label = 3;
  break;
 }
 case 1:  {
  label = 3;
  break;
 }
 case 2:  {
  label = 4;
  break;
 }
 case 3:  {
  break;
 }
 default: {
  $63 = $2; //@line 143 "bitreader.c"
  $64 = ((($63)) + 28|0); //@line 143 "bitreader.c"
  HEAP32[$64>>2] = 0; //@line 143 "bitreader.c"
  STACKTOP = sp;return; //@line 144 "bitreader.c"
 }
 }
 if ((label|0) == 3) {
  $26 = $4; //@line 123 "bitreader.c"
  $27 = $26 << 8; //@line 123 "bitreader.c"
  $28 = $27 & 65535; //@line 123 "bitreader.c"
  $29 = $4; //@line 123 "bitreader.c"
  $30 = $29 >>> 8; //@line 123 "bitreader.c"
  $31 = $3; //@line 123 "bitreader.c"
  $32 = $31 >>> 16; //@line 123 "bitreader.c"
  $33 = $32 & 255; //@line 123 "bitreader.c"
  $34 = $30 ^ $33; //@line 123 "bitreader.c"
  $35 = (8 + ($34<<2)|0); //@line 123 "bitreader.c"
  $36 = HEAP32[$35>>2]|0; //@line 123 "bitreader.c"
  $37 = $28 ^ $36; //@line 123 "bitreader.c"
  $4 = $37; //@line 123 "bitreader.c"
  label = 4;
 }
 if ((label|0) == 4) {
  $38 = $4; //@line 124 "bitreader.c"
  $39 = $38 << 8; //@line 124 "bitreader.c"
  $40 = $39 & 65535; //@line 124 "bitreader.c"
  $41 = $4; //@line 124 "bitreader.c"
  $42 = $41 >>> 8; //@line 124 "bitreader.c"
  $43 = $3; //@line 124 "bitreader.c"
  $44 = $43 >>> 8; //@line 124 "bitreader.c"
  $45 = $44 & 255; //@line 124 "bitreader.c"
  $46 = $42 ^ $45; //@line 124 "bitreader.c"
  $47 = (8 + ($46<<2)|0); //@line 124 "bitreader.c"
  $48 = HEAP32[$47>>2]|0; //@line 124 "bitreader.c"
  $49 = $40 ^ $48; //@line 124 "bitreader.c"
  $4 = $49; //@line 124 "bitreader.c"
 }
 $50 = $4; //@line 125 "bitreader.c"
 $51 = $50 << 8; //@line 125 "bitreader.c"
 $52 = $51 & 65535; //@line 125 "bitreader.c"
 $53 = $4; //@line 125 "bitreader.c"
 $54 = $53 >>> 8; //@line 125 "bitreader.c"
 $55 = $3; //@line 125 "bitreader.c"
 $56 = $55 & 255; //@line 125 "bitreader.c"
 $57 = $54 ^ $56; //@line 125 "bitreader.c"
 $58 = (8 + ($57<<2)|0); //@line 125 "bitreader.c"
 $59 = HEAP32[$58>>2]|0; //@line 125 "bitreader.c"
 $60 = $52 ^ $59; //@line 125 "bitreader.c"
 $61 = $2; //@line 125 "bitreader.c"
 $62 = ((($61)) + 24|0); //@line 125 "bitreader.c"
 HEAP32[$62>>2] = $60; //@line 125 "bitreader.c"
 $63 = $2; //@line 143 "bitreader.c"
 $64 = ((($63)) + 28|0); //@line 143 "bitreader.c"
 HEAP32[$64>>2] = 0; //@line 143 "bitreader.c"
 STACKTOP = sp;return; //@line 144 "bitreader.c"
}
function _FLAC__bitreader_read_raw_int32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 449 "bitreader.c"
 $10 = $6; //@line 449 "bitreader.c"
 $11 = (_FLAC__bitreader_read_raw_uint32($9,$7,$10)|0); //@line 449 "bitreader.c"
 $12 = ($11|0)!=(0); //@line 449 "bitreader.c"
 if ($12) {
  $13 = $6; //@line 453 "bitreader.c"
  $14 = (($13) - 1)|0; //@line 453 "bitreader.c"
  $15 = 1 << $14; //@line 453 "bitreader.c"
  $8 = $15; //@line 453 "bitreader.c"
  $16 = HEAP32[$7>>2]|0; //@line 454 "bitreader.c"
  $17 = $8; //@line 454 "bitreader.c"
  $18 = $16 ^ $17; //@line 454 "bitreader.c"
  $19 = $8; //@line 454 "bitreader.c"
  $20 = (($18) - ($19))|0; //@line 454 "bitreader.c"
  $21 = $5; //@line 454 "bitreader.c"
  HEAP32[$21>>2] = $20; //@line 454 "bitreader.c"
  $3 = 1; //@line 455 "bitreader.c"
  $22 = $3; //@line 456 "bitreader.c"
  STACKTOP = sp;return ($22|0); //@line 456 "bitreader.c"
 } else {
  $3 = 0; //@line 450 "bitreader.c"
  $22 = $3; //@line 456 "bitreader.c"
  STACKTOP = sp;return ($22|0); //@line 456 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitreader_read_raw_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6; //@line 462 "bitreader.c"
 $10 = ($9>>>0)>(32); //@line 462 "bitreader.c"
 $11 = $4;
 $12 = $6;
 do {
  if ($10) {
   $13 = (($12) - 32)|0; //@line 463 "bitreader.c"
   $14 = (_FLAC__bitreader_read_raw_uint32($11,$7,$13)|0); //@line 463 "bitreader.c"
   $15 = ($14|0)!=(0); //@line 463 "bitreader.c"
   if (!($15)) {
    $3 = 0; //@line 464 "bitreader.c"
    $57 = $3; //@line 477 "bitreader.c"
    STACKTOP = sp;return ($57|0); //@line 477 "bitreader.c"
   }
   $16 = $4; //@line 465 "bitreader.c"
   $17 = (_FLAC__bitreader_read_raw_uint32($16,$8,32)|0); //@line 465 "bitreader.c"
   $18 = ($17|0)!=(0); //@line 465 "bitreader.c"
   if ($18) {
    $19 = HEAP32[$7>>2]|0; //@line 467 "bitreader.c"
    $20 = $5; //@line 467 "bitreader.c"
    $21 = $20; //@line 467 "bitreader.c"
    $22 = $21; //@line 467 "bitreader.c"
    HEAP32[$22>>2] = $19; //@line 467 "bitreader.c"
    $23 = (($21) + 4)|0; //@line 467 "bitreader.c"
    $24 = $23; //@line 467 "bitreader.c"
    HEAP32[$24>>2] = 0; //@line 467 "bitreader.c"
    $25 = $5; //@line 468 "bitreader.c"
    $26 = $25; //@line 468 "bitreader.c"
    $27 = $26; //@line 468 "bitreader.c"
    $28 = HEAP32[$27>>2]|0; //@line 468 "bitreader.c"
    $29 = (($26) + 4)|0; //@line 468 "bitreader.c"
    $30 = $29; //@line 468 "bitreader.c"
    $31 = HEAP32[$30>>2]|0; //@line 468 "bitreader.c"
    $32 = $25; //@line 468 "bitreader.c"
    $33 = $32; //@line 468 "bitreader.c"
    HEAP32[$33>>2] = 0; //@line 468 "bitreader.c"
    $34 = (($32) + 4)|0; //@line 468 "bitreader.c"
    $35 = $34; //@line 468 "bitreader.c"
    HEAP32[$35>>2] = $28; //@line 468 "bitreader.c"
    $36 = HEAP32[$8>>2]|0; //@line 469 "bitreader.c"
    $37 = $5; //@line 469 "bitreader.c"
    $38 = $37; //@line 469 "bitreader.c"
    $39 = $38; //@line 469 "bitreader.c"
    $40 = HEAP32[$39>>2]|0; //@line 469 "bitreader.c"
    $41 = (($38) + 4)|0; //@line 469 "bitreader.c"
    $42 = $41; //@line 469 "bitreader.c"
    $43 = HEAP32[$42>>2]|0; //@line 469 "bitreader.c"
    $44 = $40 | $36; //@line 469 "bitreader.c"
    $45 = $37; //@line 469 "bitreader.c"
    $46 = $45; //@line 469 "bitreader.c"
    HEAP32[$46>>2] = $44; //@line 469 "bitreader.c"
    $47 = (($45) + 4)|0; //@line 469 "bitreader.c"
    $48 = $47; //@line 469 "bitreader.c"
    HEAP32[$48>>2] = $43; //@line 469 "bitreader.c"
    break;
   }
   $3 = 0; //@line 466 "bitreader.c"
   $57 = $3; //@line 477 "bitreader.c"
   STACKTOP = sp;return ($57|0); //@line 477 "bitreader.c"
  } else {
   $49 = (_FLAC__bitreader_read_raw_uint32($11,$8,$12)|0); //@line 472 "bitreader.c"
   $50 = ($49|0)!=(0); //@line 472 "bitreader.c"
   if ($50) {
    $51 = HEAP32[$8>>2]|0; //@line 474 "bitreader.c"
    $52 = $5; //@line 474 "bitreader.c"
    $53 = $52; //@line 474 "bitreader.c"
    $54 = $53; //@line 474 "bitreader.c"
    HEAP32[$54>>2] = $51; //@line 474 "bitreader.c"
    $55 = (($53) + 4)|0; //@line 474 "bitreader.c"
    $56 = $55; //@line 474 "bitreader.c"
    HEAP32[$56>>2] = 0; //@line 474 "bitreader.c"
    break;
   }
   $3 = 0; //@line 473 "bitreader.c"
   $57 = $3; //@line 477 "bitreader.c"
   STACKTOP = sp;return ($57|0); //@line 477 "bitreader.c"
  }
 } while(0);
 $3 = 1; //@line 476 "bitreader.c"
 $57 = $3; //@line 477 "bitreader.c"
 STACKTOP = sp;return ($57|0); //@line 477 "bitreader.c"
}
function _FLAC__bitreader_read_uint32_little_endian($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 HEAP32[$6>>2] = 0; //@line 481 "bitreader.c"
 $7 = $3; //@line 485 "bitreader.c"
 $8 = (_FLAC__bitreader_read_raw_uint32($7,$6,8)|0); //@line 485 "bitreader.c"
 $9 = ($8|0)!=(0); //@line 485 "bitreader.c"
 do {
  if ($9) {
   $10 = $3; //@line 488 "bitreader.c"
   $11 = (_FLAC__bitreader_read_raw_uint32($10,$5,8)|0); //@line 488 "bitreader.c"
   $12 = ($11|0)!=(0); //@line 488 "bitreader.c"
   if (!($12)) {
    $2 = 0; //@line 489 "bitreader.c"
    break;
   }
   $13 = HEAP32[$5>>2]|0; //@line 490 "bitreader.c"
   $14 = $13 << 8; //@line 490 "bitreader.c"
   $15 = HEAP32[$6>>2]|0; //@line 490 "bitreader.c"
   $16 = $15 | $14; //@line 490 "bitreader.c"
   HEAP32[$6>>2] = $16; //@line 490 "bitreader.c"
   $17 = $3; //@line 492 "bitreader.c"
   $18 = (_FLAC__bitreader_read_raw_uint32($17,$5,8)|0); //@line 492 "bitreader.c"
   $19 = ($18|0)!=(0); //@line 492 "bitreader.c"
   if (!($19)) {
    $2 = 0; //@line 493 "bitreader.c"
    break;
   }
   $20 = HEAP32[$5>>2]|0; //@line 494 "bitreader.c"
   $21 = $20 << 16; //@line 494 "bitreader.c"
   $22 = HEAP32[$6>>2]|0; //@line 494 "bitreader.c"
   $23 = $22 | $21; //@line 494 "bitreader.c"
   HEAP32[$6>>2] = $23; //@line 494 "bitreader.c"
   $24 = $3; //@line 496 "bitreader.c"
   $25 = (_FLAC__bitreader_read_raw_uint32($24,$5,8)|0); //@line 496 "bitreader.c"
   $26 = ($25|0)!=(0); //@line 496 "bitreader.c"
   if ($26) {
    $27 = HEAP32[$5>>2]|0; //@line 498 "bitreader.c"
    $28 = $27 << 24; //@line 498 "bitreader.c"
    $29 = HEAP32[$6>>2]|0; //@line 498 "bitreader.c"
    $30 = $29 | $28; //@line 498 "bitreader.c"
    HEAP32[$6>>2] = $30; //@line 498 "bitreader.c"
    $31 = HEAP32[$6>>2]|0; //@line 500 "bitreader.c"
    $32 = $4; //@line 500 "bitreader.c"
    HEAP32[$32>>2] = $31; //@line 500 "bitreader.c"
    $2 = 1; //@line 501 "bitreader.c"
    break;
   } else {
    $2 = 0; //@line 497 "bitreader.c"
    break;
   }
  } else {
   $2 = 0; //@line 486 "bitreader.c"
  }
 } while(0);
 $33 = $2; //@line 502 "bitreader.c"
 STACKTOP = sp;return ($33|0); //@line 502 "bitreader.c"
}
function _FLAC__bitreader_skip_bits_no_crc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $8 = $4; //@line 513 "bitreader.c"
 $9 = ($8>>>0)>(0); //@line 513 "bitreader.c"
 if ($9) {
  $10 = $3; //@line 514 "bitreader.c"
  $11 = ((($10)) + 20|0); //@line 514 "bitreader.c"
  $12 = HEAP32[$11>>2]|0; //@line 514 "bitreader.c"
  $13 = $12 & 7; //@line 514 "bitreader.c"
  $5 = $13; //@line 514 "bitreader.c"
  $14 = $5; //@line 518 "bitreader.c"
  $15 = ($14|0)!=(0); //@line 518 "bitreader.c"
  do {
   if ($15) {
    $16 = $5; //@line 519 "bitreader.c"
    $17 = (8 - ($16))|0; //@line 519 "bitreader.c"
    $18 = $4; //@line 519 "bitreader.c"
    $19 = ($17>>>0)<($18>>>0); //@line 519 "bitreader.c"
    $20 = $5; //@line 519 "bitreader.c"
    $21 = (8 - ($20))|0; //@line 519 "bitreader.c"
    $22 = $4; //@line 519 "bitreader.c"
    $23 = $19 ? $21 : $22; //@line 519 "bitreader.c"
    $6 = $23; //@line 519 "bitreader.c"
    $24 = $3; //@line 520 "bitreader.c"
    $25 = $6; //@line 520 "bitreader.c"
    $26 = (_FLAC__bitreader_read_raw_uint32($24,$7,$25)|0); //@line 520 "bitreader.c"
    $27 = ($26|0)!=(0); //@line 520 "bitreader.c"
    if ($27) {
     $28 = $6; //@line 522 "bitreader.c"
     $29 = $4; //@line 522 "bitreader.c"
     $30 = (($29) - ($28))|0; //@line 522 "bitreader.c"
     $4 = $30; //@line 522 "bitreader.c"
     break;
    }
    $2 = 0; //@line 521 "bitreader.c"
    $47 = $2; //@line 537 "bitreader.c"
    STACKTOP = sp;return ($47|0); //@line 537 "bitreader.c"
   }
  } while(0);
  $31 = $4; //@line 524 "bitreader.c"
  $32 = (($31>>>0) / 8)&-1; //@line 524 "bitreader.c"
  $6 = $32; //@line 524 "bitreader.c"
  $33 = $6; //@line 525 "bitreader.c"
  $34 = ($33>>>0)>(0); //@line 525 "bitreader.c"
  do {
   if ($34) {
    $35 = $3; //@line 526 "bitreader.c"
    $36 = $6; //@line 526 "bitreader.c"
    $37 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($35,$36)|0); //@line 526 "bitreader.c"
    $38 = ($37|0)!=(0); //@line 526 "bitreader.c"
    if ($38) {
     $39 = $4; //@line 528 "bitreader.c"
     $40 = (($39>>>0) % 8)&-1; //@line 528 "bitreader.c"
     $4 = $40; //@line 528 "bitreader.c"
     break;
    }
    $2 = 0; //@line 527 "bitreader.c"
    $47 = $2; //@line 537 "bitreader.c"
    STACKTOP = sp;return ($47|0); //@line 537 "bitreader.c"
   }
  } while(0);
  $41 = $4; //@line 530 "bitreader.c"
  $42 = ($41>>>0)>(0); //@line 530 "bitreader.c"
  if ($42) {
   $43 = $3; //@line 531 "bitreader.c"
   $44 = $4; //@line 531 "bitreader.c"
   $45 = (_FLAC__bitreader_read_raw_uint32($43,$7,$44)|0); //@line 531 "bitreader.c"
   $46 = ($45|0)!=(0); //@line 531 "bitreader.c"
   if (!($46)) {
    $2 = 0; //@line 532 "bitreader.c"
    $47 = $2; //@line 537 "bitreader.c"
    STACKTOP = sp;return ($47|0); //@line 537 "bitreader.c"
   }
  }
 }
 $2 = 1; //@line 536 "bitreader.c"
 $47 = $2; //@line 537 "bitreader.c"
 STACKTOP = sp;return ($47|0); //@line 537 "bitreader.c"
}
function _FLAC__bitreader_skip_byte_block_aligned_no_crc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 while(1) {
  $6 = $4; //@line 548 "bitreader.c"
  $7 = ($6|0)!=(0); //@line 548 "bitreader.c"
  if (!($7)) {
   break;
  }
  $8 = $3; //@line 548 "bitreader.c"
  $9 = ((($8)) + 20|0); //@line 548 "bitreader.c"
  $10 = HEAP32[$9>>2]|0; //@line 548 "bitreader.c"
  $11 = ($10|0)!=(0); //@line 548 "bitreader.c"
  if (!($11)) {
   break;
  }
  $12 = $3; //@line 549 "bitreader.c"
  $13 = (_FLAC__bitreader_read_raw_uint32($12,$5,8)|0); //@line 549 "bitreader.c"
  $14 = ($13|0)!=(0); //@line 549 "bitreader.c"
  if (!($14)) {
   label = 5;
   break;
  }
  $15 = $4; //@line 551 "bitreader.c"
  $16 = (($15) + -1)|0; //@line 551 "bitreader.c"
  $4 = $16; //@line 551 "bitreader.c"
 }
 if ((label|0) == 5) {
  $2 = 0; //@line 550 "bitreader.c"
  $43 = $2; //@line 572 "bitreader.c"
  STACKTOP = sp;return ($43|0); //@line 572 "bitreader.c"
 }
 $17 = $4; //@line 553 "bitreader.c"
 $18 = (0)==($17|0); //@line 553 "bitreader.c"
 if ($18) {
  $2 = 1; //@line 554 "bitreader.c"
  $43 = $2; //@line 572 "bitreader.c"
  STACKTOP = sp;return ($43|0); //@line 572 "bitreader.c"
 }
 while(1) {
  $19 = $4; //@line 556 "bitreader.c"
  $20 = ($19>>>0)>=(4); //@line 556 "bitreader.c"
  if (!($20)) {
   break;
  }
  $21 = $3; //@line 557 "bitreader.c"
  $22 = ((($21)) + 16|0); //@line 557 "bitreader.c"
  $23 = HEAP32[$22>>2]|0; //@line 557 "bitreader.c"
  $24 = $3; //@line 557 "bitreader.c"
  $25 = ((($24)) + 8|0); //@line 557 "bitreader.c"
  $26 = HEAP32[$25>>2]|0; //@line 557 "bitreader.c"
  $27 = ($23>>>0)<($26>>>0); //@line 557 "bitreader.c"
  $28 = $3;
  if ($27) {
   $29 = ((($28)) + 16|0); //@line 558 "bitreader.c"
   $30 = HEAP32[$29>>2]|0; //@line 558 "bitreader.c"
   $31 = (($30) + 1)|0; //@line 558 "bitreader.c"
   HEAP32[$29>>2] = $31; //@line 558 "bitreader.c"
   $32 = $4; //@line 559 "bitreader.c"
   $33 = (($32) - 4)|0; //@line 559 "bitreader.c"
   $4 = $33; //@line 559 "bitreader.c"
  } else {
   $34 = (_bitreader_read_from_client_($28)|0); //@line 561 "bitreader.c"
   $35 = ($34|0)!=(0); //@line 561 "bitreader.c"
   if (!($35)) {
    label = 14;
    break;
   }
  }
 }
 if ((label|0) == 14) {
  $2 = 0; //@line 562 "bitreader.c"
  $43 = $2; //@line 572 "bitreader.c"
  STACKTOP = sp;return ($43|0); //@line 572 "bitreader.c"
 }
 while(1) {
  $36 = $4; //@line 565 "bitreader.c"
  $37 = ($36|0)!=(0); //@line 565 "bitreader.c"
  if (!($37)) {
   label = 21;
   break;
  }
  $38 = $3; //@line 566 "bitreader.c"
  $39 = (_FLAC__bitreader_read_raw_uint32($38,$5,8)|0); //@line 566 "bitreader.c"
  $40 = ($39|0)!=(0); //@line 566 "bitreader.c"
  if (!($40)) {
   label = 19;
   break;
  }
  $41 = $4; //@line 568 "bitreader.c"
  $42 = (($41) + -1)|0; //@line 568 "bitreader.c"
  $4 = $42; //@line 568 "bitreader.c"
 }
 if ((label|0) == 19) {
  $2 = 0; //@line 567 "bitreader.c"
  $43 = $2; //@line 572 "bitreader.c"
  STACKTOP = sp;return ($43|0); //@line 572 "bitreader.c"
 }
 else if ((label|0) == 21) {
  $2 = 1; //@line 571 "bitreader.c"
  $43 = $2; //@line 572 "bitreader.c"
  STACKTOP = sp;return ($43|0); //@line 572 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitreader_read_byte_block_aligned_no_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $9 = $6; //@line 583 "bitreader.c"
  $10 = ($9|0)!=(0); //@line 583 "bitreader.c"
  if (!($10)) {
   break;
  }
  $11 = $4; //@line 583 "bitreader.c"
  $12 = ((($11)) + 20|0); //@line 583 "bitreader.c"
  $13 = HEAP32[$12>>2]|0; //@line 583 "bitreader.c"
  $14 = ($13|0)!=(0); //@line 583 "bitreader.c"
  if (!($14)) {
   break;
  }
  $15 = $4; //@line 584 "bitreader.c"
  $16 = (_FLAC__bitreader_read_raw_uint32($15,$7,8)|0); //@line 584 "bitreader.c"
  $17 = ($16|0)!=(0); //@line 584 "bitreader.c"
  if (!($17)) {
   label = 5;
   break;
  }
  $18 = HEAP32[$7>>2]|0; //@line 586 "bitreader.c"
  $19 = $18&255; //@line 586 "bitreader.c"
  $20 = $5; //@line 586 "bitreader.c"
  $21 = ((($20)) + 1|0); //@line 586 "bitreader.c"
  $5 = $21; //@line 586 "bitreader.c"
  HEAP8[$20>>0] = $19; //@line 586 "bitreader.c"
  $22 = $6; //@line 587 "bitreader.c"
  $23 = (($22) + -1)|0; //@line 587 "bitreader.c"
  $6 = $23; //@line 587 "bitreader.c"
 }
 if ((label|0) == 5) {
  $3 = 0; //@line 585 "bitreader.c"
  $78 = $3; //@line 628 "bitreader.c"
  STACKTOP = sp;return ($78|0); //@line 628 "bitreader.c"
 }
 $24 = $6; //@line 589 "bitreader.c"
 $25 = (0)==($24|0); //@line 589 "bitreader.c"
 if ($25) {
  $3 = 1; //@line 590 "bitreader.c"
  $78 = $3; //@line 628 "bitreader.c"
  STACKTOP = sp;return ($78|0); //@line 628 "bitreader.c"
 }
 while(1) {
  $26 = $6; //@line 592 "bitreader.c"
  $27 = ($26>>>0)>=(4); //@line 592 "bitreader.c"
  if (!($27)) {
   break;
  }
  $28 = $4; //@line 593 "bitreader.c"
  $29 = ((($28)) + 16|0); //@line 593 "bitreader.c"
  $30 = HEAP32[$29>>2]|0; //@line 593 "bitreader.c"
  $31 = $4; //@line 593 "bitreader.c"
  $32 = ((($31)) + 8|0); //@line 593 "bitreader.c"
  $33 = HEAP32[$32>>2]|0; //@line 593 "bitreader.c"
  $34 = ($30>>>0)<($33>>>0); //@line 593 "bitreader.c"
  $35 = $4;
  if ($34) {
   $36 = HEAP32[$35>>2]|0; //@line 594 "bitreader.c"
   $37 = $4; //@line 594 "bitreader.c"
   $38 = ((($37)) + 16|0); //@line 594 "bitreader.c"
   $39 = HEAP32[$38>>2]|0; //@line 594 "bitreader.c"
   $40 = (($39) + 1)|0; //@line 594 "bitreader.c"
   HEAP32[$38>>2] = $40; //@line 594 "bitreader.c"
   $41 = (($36) + ($39<<2)|0); //@line 594 "bitreader.c"
   $42 = HEAP32[$41>>2]|0; //@line 594 "bitreader.c"
   $8 = $42; //@line 594 "bitreader.c"
   $43 = $8; //@line 596 "bitreader.c"
   $44 = $43 >>> 24; //@line 596 "bitreader.c"
   $45 = $44&255; //@line 596 "bitreader.c"
   $46 = $5; //@line 596 "bitreader.c"
   HEAP8[$46>>0] = $45; //@line 596 "bitreader.c"
   $47 = $8; //@line 597 "bitreader.c"
   $48 = $47 >>> 16; //@line 597 "bitreader.c"
   $49 = $48&255; //@line 597 "bitreader.c"
   $50 = $5; //@line 597 "bitreader.c"
   $51 = ((($50)) + 1|0); //@line 597 "bitreader.c"
   HEAP8[$51>>0] = $49; //@line 597 "bitreader.c"
   $52 = $8; //@line 598 "bitreader.c"
   $53 = $52 >>> 8; //@line 598 "bitreader.c"
   $54 = $53&255; //@line 598 "bitreader.c"
   $55 = $5; //@line 598 "bitreader.c"
   $56 = ((($55)) + 2|0); //@line 598 "bitreader.c"
   HEAP8[$56>>0] = $54; //@line 598 "bitreader.c"
   $57 = $8; //@line 599 "bitreader.c"
   $58 = $57&255; //@line 599 "bitreader.c"
   $59 = $5; //@line 599 "bitreader.c"
   $60 = ((($59)) + 3|0); //@line 599 "bitreader.c"
   HEAP8[$60>>0] = $58; //@line 599 "bitreader.c"
   $61 = $5; //@line 613 "bitreader.c"
   $62 = ((($61)) + 4|0); //@line 613 "bitreader.c"
   $5 = $62; //@line 613 "bitreader.c"
   $63 = $6; //@line 614 "bitreader.c"
   $64 = (($63) - 4)|0; //@line 614 "bitreader.c"
   $6 = $64; //@line 614 "bitreader.c"
  } else {
   $65 = (_bitreader_read_from_client_($35)|0); //@line 616 "bitreader.c"
   $66 = ($65|0)!=(0); //@line 616 "bitreader.c"
   if (!($66)) {
    label = 14;
    break;
   }
  }
 }
 if ((label|0) == 14) {
  $3 = 0; //@line 617 "bitreader.c"
  $78 = $3; //@line 628 "bitreader.c"
  STACKTOP = sp;return ($78|0); //@line 628 "bitreader.c"
 }
 while(1) {
  $67 = $6; //@line 620 "bitreader.c"
  $68 = ($67|0)!=(0); //@line 620 "bitreader.c"
  if (!($68)) {
   label = 21;
   break;
  }
  $69 = $4; //@line 621 "bitreader.c"
  $70 = (_FLAC__bitreader_read_raw_uint32($69,$7,8)|0); //@line 621 "bitreader.c"
  $71 = ($70|0)!=(0); //@line 621 "bitreader.c"
  if (!($71)) {
   label = 19;
   break;
  }
  $72 = HEAP32[$7>>2]|0; //@line 623 "bitreader.c"
  $73 = $72&255; //@line 623 "bitreader.c"
  $74 = $5; //@line 623 "bitreader.c"
  $75 = ((($74)) + 1|0); //@line 623 "bitreader.c"
  $5 = $75; //@line 623 "bitreader.c"
  HEAP8[$74>>0] = $73; //@line 623 "bitreader.c"
  $76 = $6; //@line 624 "bitreader.c"
  $77 = (($76) + -1)|0; //@line 624 "bitreader.c"
  $6 = $77; //@line 624 "bitreader.c"
 }
 if ((label|0) == 19) {
  $3 = 0; //@line 622 "bitreader.c"
  $78 = $3; //@line 628 "bitreader.c"
  STACKTOP = sp;return ($78|0); //@line 628 "bitreader.c"
 }
 else if ((label|0) == 21) {
  $3 = 1; //@line 627 "bitreader.c"
  $78 = $3; //@line 628 "bitreader.c"
  STACKTOP = sp;return ($78|0); //@line 628 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitreader_read_unary_unsigned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4; //@line 656 "bitreader.c"
 HEAP32[$9>>2] = 0; //@line 656 "bitreader.c"
 L1: while(1) {
  while(1) {
   $10 = $3; //@line 658 "bitreader.c"
   $11 = ((($10)) + 16|0); //@line 658 "bitreader.c"
   $12 = HEAP32[$11>>2]|0; //@line 658 "bitreader.c"
   $13 = $3; //@line 658 "bitreader.c"
   $14 = ((($13)) + 8|0); //@line 658 "bitreader.c"
   $15 = HEAP32[$14>>2]|0; //@line 658 "bitreader.c"
   $16 = ($12>>>0)<($15>>>0); //@line 658 "bitreader.c"
   $17 = $3;
   if (!($16)) {
    break;
   }
   $18 = HEAP32[$17>>2]|0; //@line 659 "bitreader.c"
   $19 = $3; //@line 659 "bitreader.c"
   $20 = ((($19)) + 16|0); //@line 659 "bitreader.c"
   $21 = HEAP32[$20>>2]|0; //@line 659 "bitreader.c"
   $22 = (($18) + ($21<<2)|0); //@line 659 "bitreader.c"
   $23 = HEAP32[$22>>2]|0; //@line 659 "bitreader.c"
   $24 = $3; //@line 659 "bitreader.c"
   $25 = ((($24)) + 20|0); //@line 659 "bitreader.c"
   $26 = HEAP32[$25>>2]|0; //@line 659 "bitreader.c"
   $27 = $23 << $26; //@line 659 "bitreader.c"
   $6 = $27; //@line 659 "bitreader.c"
   $28 = $6; //@line 660 "bitreader.c"
   $29 = ($28|0)!=(0); //@line 660 "bitreader.c"
   if ($29) {
    label = 5;
    break L1;
   }
   $61 = $3; //@line 673 "bitreader.c"
   $62 = ((($61)) + 20|0); //@line 673 "bitreader.c"
   $63 = HEAP32[$62>>2]|0; //@line 673 "bitreader.c"
   $64 = (32 - ($63))|0; //@line 673 "bitreader.c"
   $65 = $4; //@line 673 "bitreader.c"
   $66 = HEAP32[$65>>2]|0; //@line 673 "bitreader.c"
   $67 = (($66) + ($64))|0; //@line 673 "bitreader.c"
   HEAP32[$65>>2] = $67; //@line 673 "bitreader.c"
   $68 = $3; //@line 674 "bitreader.c"
   $69 = $3; //@line 674 "bitreader.c"
   $70 = HEAP32[$69>>2]|0; //@line 674 "bitreader.c"
   $71 = $3; //@line 674 "bitreader.c"
   $72 = ((($71)) + 16|0); //@line 674 "bitreader.c"
   $73 = HEAP32[$72>>2]|0; //@line 674 "bitreader.c"
   $74 = (($70) + ($73<<2)|0); //@line 674 "bitreader.c"
   $75 = HEAP32[$74>>2]|0; //@line 674 "bitreader.c"
   _crc16_update_word_($68,$75); //@line 674 "bitreader.c"
   $76 = $3; //@line 675 "bitreader.c"
   $77 = ((($76)) + 16|0); //@line 675 "bitreader.c"
   $78 = HEAP32[$77>>2]|0; //@line 675 "bitreader.c"
   $79 = (($78) + 1)|0; //@line 675 "bitreader.c"
   HEAP32[$77>>2] = $79; //@line 675 "bitreader.c"
   $80 = $3; //@line 676 "bitreader.c"
   $81 = ((($80)) + 20|0); //@line 676 "bitreader.c"
   HEAP32[$81>>2] = 0; //@line 676 "bitreader.c"
  }
  $82 = ((($17)) + 12|0); //@line 687 "bitreader.c"
  $83 = HEAP32[$82>>2]|0; //@line 687 "bitreader.c"
  $84 = $83<<3; //@line 687 "bitreader.c"
  $85 = $3; //@line 687 "bitreader.c"
  $86 = ((($85)) + 20|0); //@line 687 "bitreader.c"
  $87 = HEAP32[$86>>2]|0; //@line 687 "bitreader.c"
  $88 = ($84>>>0)>($87>>>0); //@line 687 "bitreader.c"
  if ($88) {
   $89 = $3; //@line 688 "bitreader.c"
   $90 = ((($89)) + 12|0); //@line 688 "bitreader.c"
   $91 = HEAP32[$90>>2]|0; //@line 688 "bitreader.c"
   $92 = $91<<3; //@line 688 "bitreader.c"
   $7 = $92; //@line 688 "bitreader.c"
   $93 = $3; //@line 689 "bitreader.c"
   $94 = HEAP32[$93>>2]|0; //@line 689 "bitreader.c"
   $95 = $3; //@line 689 "bitreader.c"
   $96 = ((($95)) + 16|0); //@line 689 "bitreader.c"
   $97 = HEAP32[$96>>2]|0; //@line 689 "bitreader.c"
   $98 = (($94) + ($97<<2)|0); //@line 689 "bitreader.c"
   $99 = HEAP32[$98>>2]|0; //@line 689 "bitreader.c"
   $100 = $7; //@line 689 "bitreader.c"
   $101 = (32 - ($100))|0; //@line 689 "bitreader.c"
   $102 = -1 << $101; //@line 689 "bitreader.c"
   $103 = $99 & $102; //@line 689 "bitreader.c"
   $104 = $3; //@line 689 "bitreader.c"
   $105 = ((($104)) + 20|0); //@line 689 "bitreader.c"
   $106 = HEAP32[$105>>2]|0; //@line 689 "bitreader.c"
   $107 = $103 << $106; //@line 689 "bitreader.c"
   $8 = $107; //@line 689 "bitreader.c"
   $108 = $8; //@line 690 "bitreader.c"
   $109 = ($108|0)!=(0); //@line 690 "bitreader.c"
   if ($109) {
    label = 11;
    break;
   }
   $123 = $7; //@line 699 "bitreader.c"
   $124 = $3; //@line 699 "bitreader.c"
   $125 = ((($124)) + 20|0); //@line 699 "bitreader.c"
   $126 = HEAP32[$125>>2]|0; //@line 699 "bitreader.c"
   $127 = (($123) - ($126))|0; //@line 699 "bitreader.c"
   $128 = $4; //@line 699 "bitreader.c"
   $129 = HEAP32[$128>>2]|0; //@line 699 "bitreader.c"
   $130 = (($129) + ($127))|0; //@line 699 "bitreader.c"
   HEAP32[$128>>2] = $130; //@line 699 "bitreader.c"
   $131 = $7; //@line 700 "bitreader.c"
   $132 = $3; //@line 700 "bitreader.c"
   $133 = ((($132)) + 20|0); //@line 700 "bitreader.c"
   HEAP32[$133>>2] = $131; //@line 700 "bitreader.c"
  }
  $134 = $3; //@line 705 "bitreader.c"
  $135 = (_bitreader_read_from_client_($134)|0); //@line 705 "bitreader.c"
  $136 = ($135|0)!=(0); //@line 705 "bitreader.c"
  if (!($136)) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 5) {
  $30 = $6; //@line 661 "bitreader.c"
  $31 = (_FLAC__clz_uint32($30)|0); //@line 661 "bitreader.c"
  $5 = $31; //@line 661 "bitreader.c"
  $32 = $5; //@line 662 "bitreader.c"
  $33 = $4; //@line 662 "bitreader.c"
  $34 = HEAP32[$33>>2]|0; //@line 662 "bitreader.c"
  $35 = (($34) + ($32))|0; //@line 662 "bitreader.c"
  HEAP32[$33>>2] = $35; //@line 662 "bitreader.c"
  $36 = $5; //@line 663 "bitreader.c"
  $37 = (($36) + 1)|0; //@line 663 "bitreader.c"
  $5 = $37; //@line 663 "bitreader.c"
  $38 = $5; //@line 664 "bitreader.c"
  $39 = $3; //@line 664 "bitreader.c"
  $40 = ((($39)) + 20|0); //@line 664 "bitreader.c"
  $41 = HEAP32[$40>>2]|0; //@line 664 "bitreader.c"
  $42 = (($41) + ($38))|0; //@line 664 "bitreader.c"
  HEAP32[$40>>2] = $42; //@line 664 "bitreader.c"
  $43 = $3; //@line 665 "bitreader.c"
  $44 = ((($43)) + 20|0); //@line 665 "bitreader.c"
  $45 = HEAP32[$44>>2]|0; //@line 665 "bitreader.c"
  $46 = ($45>>>0)>=(32); //@line 665 "bitreader.c"
  if ($46) {
   $47 = $3; //@line 666 "bitreader.c"
   $48 = $3; //@line 666 "bitreader.c"
   $49 = HEAP32[$48>>2]|0; //@line 666 "bitreader.c"
   $50 = $3; //@line 666 "bitreader.c"
   $51 = ((($50)) + 16|0); //@line 666 "bitreader.c"
   $52 = HEAP32[$51>>2]|0; //@line 666 "bitreader.c"
   $53 = (($49) + ($52<<2)|0); //@line 666 "bitreader.c"
   $54 = HEAP32[$53>>2]|0; //@line 666 "bitreader.c"
   _crc16_update_word_($47,$54); //@line 666 "bitreader.c"
   $55 = $3; //@line 667 "bitreader.c"
   $56 = ((($55)) + 16|0); //@line 667 "bitreader.c"
   $57 = HEAP32[$56>>2]|0; //@line 667 "bitreader.c"
   $58 = (($57) + 1)|0; //@line 667 "bitreader.c"
   HEAP32[$56>>2] = $58; //@line 667 "bitreader.c"
   $59 = $3; //@line 668 "bitreader.c"
   $60 = ((($59)) + 20|0); //@line 668 "bitreader.c"
   HEAP32[$60>>2] = 0; //@line 668 "bitreader.c"
  }
  $2 = 1; //@line 670 "bitreader.c"
  $137 = $2; //@line 708 "bitreader.c"
  STACKTOP = sp;return ($137|0); //@line 708 "bitreader.c"
 }
 else if ((label|0) == 11) {
  $110 = $8; //@line 691 "bitreader.c"
  $111 = (_FLAC__clz_uint32($110)|0); //@line 691 "bitreader.c"
  $5 = $111; //@line 691 "bitreader.c"
  $112 = $5; //@line 692 "bitreader.c"
  $113 = $4; //@line 692 "bitreader.c"
  $114 = HEAP32[$113>>2]|0; //@line 692 "bitreader.c"
  $115 = (($114) + ($112))|0; //@line 692 "bitreader.c"
  HEAP32[$113>>2] = $115; //@line 692 "bitreader.c"
  $116 = $5; //@line 693 "bitreader.c"
  $117 = (($116) + 1)|0; //@line 693 "bitreader.c"
  $5 = $117; //@line 693 "bitreader.c"
  $118 = $5; //@line 694 "bitreader.c"
  $119 = $3; //@line 694 "bitreader.c"
  $120 = ((($119)) + 20|0); //@line 694 "bitreader.c"
  $121 = HEAP32[$120>>2]|0; //@line 694 "bitreader.c"
  $122 = (($121) + ($118))|0; //@line 694 "bitreader.c"
  HEAP32[$120>>2] = $122; //@line 694 "bitreader.c"
  $2 = 1; //@line 696 "bitreader.c"
  $137 = $2; //@line 708 "bitreader.c"
  STACKTOP = sp;return ($137|0); //@line 708 "bitreader.c"
 }
 else if ((label|0) == 14) {
  $2 = 0; //@line 706 "bitreader.c"
  $137 = $2; //@line 708 "bitreader.c"
  STACKTOP = sp;return ($137|0); //@line 708 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__clz_uint32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 82 "./include\private/bitmath.h"
 $3 = (Math_clz32(($2|0))|0); //@line 82 "./include\private/bitmath.h"
 STACKTOP = sp;return ($3|0); //@line 82 "./include\private/bitmath.h"
}
function _FLAC__bitreader_read_rice_signed_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 28|0;
 $12 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $6; //@line 756 "bitreader.c"
 $17 = $19; //@line 756 "bitreader.c"
 $20 = $6; //@line 757 "bitreader.c"
 $21 = $7; //@line 757 "bitreader.c"
 $22 = (($20) + ($21<<2)|0); //@line 757 "bitreader.c"
 $18 = $22; //@line 757 "bitreader.c"
 $23 = $8; //@line 759 "bitreader.c"
 $24 = ($23|0)==(0); //@line 759 "bitreader.c"
 if ($24) {
  while(1) {
   $25 = $17; //@line 760 "bitreader.c"
   $26 = $18; //@line 760 "bitreader.c"
   $27 = ($25>>>0)<($26>>>0); //@line 760 "bitreader.c"
   if (!($27)) {
    label = 7;
    break;
   }
   $28 = $5; //@line 762 "bitreader.c"
   $29 = (_FLAC__bitreader_read_unary_unsigned($28,$12)|0); //@line 762 "bitreader.c"
   $30 = ($29|0)!=(0); //@line 762 "bitreader.c"
   if (!($30)) {
    label = 5;
    break;
   }
   $31 = HEAP32[$12>>2]|0; //@line 765 "bitreader.c"
   $32 = $31 >>> 1; //@line 765 "bitreader.c"
   $33 = HEAP32[$12>>2]|0; //@line 765 "bitreader.c"
   $34 = $33 & 1; //@line 765 "bitreader.c"
   $35 = (0 - ($34))|0; //@line 765 "bitreader.c"
   $36 = $32 ^ $35; //@line 765 "bitreader.c"
   $37 = $17; //@line 765 "bitreader.c"
   $38 = ((($37)) + 4|0); //@line 765 "bitreader.c"
   $17 = $38; //@line 765 "bitreader.c"
   HEAP32[$37>>2] = $36; //@line 765 "bitreader.c"
  }
  if ((label|0) == 5) {
   $4 = 0; //@line 763 "bitreader.c"
   $237 = $4; //@line 876 "bitreader.c"
   STACKTOP = sp;return ($237|0); //@line 876 "bitreader.c"
  }
  else if ((label|0) == 7) {
   $4 = 1; //@line 768 "bitreader.c"
   $237 = $4; //@line 876 "bitreader.c"
   STACKTOP = sp;return ($237|0); //@line 876 "bitreader.c"
  }
 }
 $39 = $5; //@line 773 "bitreader.c"
 $40 = ((($39)) + 16|0); //@line 773 "bitreader.c"
 $41 = HEAP32[$40>>2]|0; //@line 773 "bitreader.c"
 $9 = $41; //@line 773 "bitreader.c"
 $42 = $5; //@line 774 "bitreader.c"
 $43 = ((($42)) + 8|0); //@line 774 "bitreader.c"
 $44 = HEAP32[$43>>2]|0; //@line 774 "bitreader.c"
 $10 = $44; //@line 774 "bitreader.c"
 $45 = $9; //@line 777 "bitreader.c"
 $46 = $10; //@line 777 "bitreader.c"
 $47 = ($45>>>0)>=($46>>>0); //@line 777 "bitreader.c"
 if ($47) {
  $13 = 0; //@line 778 "bitreader.c"
  label = 21;
 } else {
  $48 = $5; //@line 782 "bitreader.c"
  $49 = ((($48)) + 20|0); //@line 782 "bitreader.c"
  $50 = HEAP32[$49>>2]|0; //@line 782 "bitreader.c"
  $51 = (32 - ($50))|0; //@line 782 "bitreader.c"
  $15 = $51; //@line 782 "bitreader.c"
  $52 = $5; //@line 783 "bitreader.c"
  $53 = HEAP32[$52>>2]|0; //@line 783 "bitreader.c"
  $54 = $9; //@line 783 "bitreader.c"
  $55 = (($53) + ($54<<2)|0); //@line 783 "bitreader.c"
  $56 = HEAP32[$55>>2]|0; //@line 783 "bitreader.c"
  $57 = $5; //@line 783 "bitreader.c"
  $58 = ((($57)) + 20|0); //@line 783 "bitreader.c"
  $59 = HEAP32[$58>>2]|0; //@line 783 "bitreader.c"
  $60 = $56 << $59; //@line 783 "bitreader.c"
  $16 = $60; //@line 783 "bitreader.c"
  label = 11;
 }
 L16: while(1) {
  L17: do {
   if ((label|0) == 11) {
    label = 0;
    $61 = $17; //@line 785 "bitreader.c"
    $62 = $18; //@line 785 "bitreader.c"
    $63 = ($61>>>0)<($62>>>0); //@line 785 "bitreader.c"
    if (!($63)) {
     label = 32;
     break L16;
    }
    $64 = $16; //@line 787 "bitreader.c"
    $65 = (_FLAC__clz2_uint32($64)|0); //@line 787 "bitreader.c"
    $14 = $65; //@line 787 "bitreader.c"
    $13 = $65; //@line 787 "bitreader.c"
    $66 = $13; //@line 788 "bitreader.c"
    $67 = ($66|0)==(32); //@line 788 "bitreader.c"
    L21: do {
     if ($67) {
      $68 = $15; //@line 789 "bitreader.c"
      $13 = $68; //@line 789 "bitreader.c"
      while(1) {
       $69 = $5; //@line 792 "bitreader.c"
       $70 = $5; //@line 792 "bitreader.c"
       $71 = HEAP32[$70>>2]|0; //@line 792 "bitreader.c"
       $72 = $9; //@line 792 "bitreader.c"
       $73 = (($72) + 1)|0; //@line 792 "bitreader.c"
       $9 = $73; //@line 792 "bitreader.c"
       $74 = (($71) + ($72<<2)|0); //@line 792 "bitreader.c"
       $75 = HEAP32[$74>>2]|0; //@line 792 "bitreader.c"
       _crc16_update_word_($69,$75); //@line 792 "bitreader.c"
       $76 = $9; //@line 793 "bitreader.c"
       $77 = $10; //@line 793 "bitreader.c"
       $78 = ($76>>>0)>=($77>>>0); //@line 793 "bitreader.c"
       $79 = $5;
       if ($78) {
        break;
       }
       $80 = HEAP32[$79>>2]|0; //@line 795 "bitreader.c"
       $81 = $9; //@line 795 "bitreader.c"
       $82 = (($80) + ($81<<2)|0); //@line 795 "bitreader.c"
       $83 = HEAP32[$82>>2]|0; //@line 795 "bitreader.c"
       $16 = $83; //@line 795 "bitreader.c"
       $84 = $16; //@line 796 "bitreader.c"
       $85 = (_FLAC__clz2_uint32($84)|0); //@line 796 "bitreader.c"
       $14 = $85; //@line 796 "bitreader.c"
       $86 = $14; //@line 797 "bitreader.c"
       $87 = $13; //@line 797 "bitreader.c"
       $88 = (($87) + ($86))|0; //@line 797 "bitreader.c"
       $13 = $88; //@line 797 "bitreader.c"
       $89 = $14; //@line 798 "bitreader.c"
       $90 = ($89|0)==(32); //@line 798 "bitreader.c"
       if (!($90)) {
        break L21;
       }
      }
      $157 = ((($79)) + 20|0); //@line 833 "bitreader.c"
      HEAP32[$157>>2] = 0; //@line 833 "bitreader.c"
      $158 = $9; //@line 834 "bitreader.c"
      $159 = $5; //@line 834 "bitreader.c"
      $160 = ((($159)) + 16|0); //@line 834 "bitreader.c"
      HEAP32[$160>>2] = $158; //@line 834 "bitreader.c"
      label = 23;
      break L17;
     }
    } while(0);
    $91 = $14; //@line 800 "bitreader.c"
    $92 = $16; //@line 800 "bitreader.c"
    $93 = $92 << $91; //@line 800 "bitreader.c"
    $16 = $93; //@line 800 "bitreader.c"
    $94 = $16; //@line 801 "bitreader.c"
    $95 = $94 << 1; //@line 801 "bitreader.c"
    $16 = $95; //@line 801 "bitreader.c"
    $96 = $15; //@line 802 "bitreader.c"
    $97 = $13; //@line 802 "bitreader.c"
    $98 = (($96) - ($97))|0; //@line 802 "bitreader.c"
    $99 = (($98) - 1)|0; //@line 802 "bitreader.c"
    $100 = (($99>>>0) % 32)&-1; //@line 802 "bitreader.c"
    $15 = $100; //@line 802 "bitreader.c"
    $101 = $13; //@line 803 "bitreader.c"
    HEAP32[$12>>2] = $101; //@line 803 "bitreader.c"
    $102 = $16; //@line 806 "bitreader.c"
    $103 = $8; //@line 806 "bitreader.c"
    $104 = (32 - ($103))|0; //@line 806 "bitreader.c"
    $105 = $102 >>> $104; //@line 806 "bitreader.c"
    $13 = $105; //@line 806 "bitreader.c"
    $106 = $8; //@line 807 "bitreader.c"
    $107 = $15; //@line 807 "bitreader.c"
    $108 = ($106>>>0)<=($107>>>0); //@line 807 "bitreader.c"
    do {
     if ($108) {
      $109 = $8; //@line 808 "bitreader.c"
      $110 = $15; //@line 808 "bitreader.c"
      $111 = (($110) - ($109))|0; //@line 808 "bitreader.c"
      $15 = $111; //@line 808 "bitreader.c"
      $112 = $8; //@line 809 "bitreader.c"
      $113 = $16; //@line 809 "bitreader.c"
      $114 = $113 << $112; //@line 809 "bitreader.c"
      $16 = $114; //@line 809 "bitreader.c"
     } else {
      $115 = $5; //@line 812 "bitreader.c"
      $116 = $5; //@line 812 "bitreader.c"
      $117 = HEAP32[$116>>2]|0; //@line 812 "bitreader.c"
      $118 = $9; //@line 812 "bitreader.c"
      $119 = (($118) + 1)|0; //@line 812 "bitreader.c"
      $9 = $119; //@line 812 "bitreader.c"
      $120 = (($117) + ($118<<2)|0); //@line 812 "bitreader.c"
      $121 = HEAP32[$120>>2]|0; //@line 812 "bitreader.c"
      _crc16_update_word_($115,$121); //@line 812 "bitreader.c"
      $122 = $9; //@line 813 "bitreader.c"
      $123 = $10; //@line 813 "bitreader.c"
      $124 = ($122>>>0)>=($123>>>0); //@line 813 "bitreader.c"
      $125 = $5;
      if ($124) {
       $167 = ((($125)) + 20|0); //@line 845 "bitreader.c"
       HEAP32[$167>>2] = 0; //@line 845 "bitreader.c"
       $168 = $9; //@line 846 "bitreader.c"
       $169 = $5; //@line 846 "bitreader.c"
       $170 = ((($169)) + 16|0); //@line 846 "bitreader.c"
       HEAP32[$170>>2] = $168; //@line 846 "bitreader.c"
       break L17;
      } else {
       $126 = HEAP32[$125>>2]|0; //@line 815 "bitreader.c"
       $127 = $9; //@line 815 "bitreader.c"
       $128 = (($126) + ($127<<2)|0); //@line 815 "bitreader.c"
       $129 = HEAP32[$128>>2]|0; //@line 815 "bitreader.c"
       $16 = $129; //@line 815 "bitreader.c"
       $130 = $8; //@line 816 "bitreader.c"
       $131 = (32 - ($130))|0; //@line 816 "bitreader.c"
       $132 = $15; //@line 816 "bitreader.c"
       $133 = (($132) + ($131))|0; //@line 816 "bitreader.c"
       $15 = $133; //@line 816 "bitreader.c"
       $134 = $16; //@line 817 "bitreader.c"
       $135 = $15; //@line 817 "bitreader.c"
       $136 = $134 >>> $135; //@line 817 "bitreader.c"
       $137 = $13; //@line 817 "bitreader.c"
       $138 = $137 | $136; //@line 817 "bitreader.c"
       $13 = $138; //@line 817 "bitreader.c"
       $139 = $15; //@line 818 "bitreader.c"
       $140 = (32 - ($139))|0; //@line 818 "bitreader.c"
       $141 = $16; //@line 818 "bitreader.c"
       $142 = $141 << $140; //@line 818 "bitreader.c"
       $16 = $142; //@line 818 "bitreader.c"
       break;
      }
     }
    } while(0);
    $143 = $13; //@line 820 "bitreader.c"
    HEAP32[$11>>2] = $143; //@line 820 "bitreader.c"
    $144 = HEAP32[$12>>2]|0; //@line 823 "bitreader.c"
    $145 = $8; //@line 823 "bitreader.c"
    $146 = $144 << $145; //@line 823 "bitreader.c"
    $147 = HEAP32[$11>>2]|0; //@line 823 "bitreader.c"
    $148 = $146 | $147; //@line 823 "bitreader.c"
    $13 = $148; //@line 823 "bitreader.c"
    $149 = $13; //@line 824 "bitreader.c"
    $150 = $149 >>> 1; //@line 824 "bitreader.c"
    $151 = $13; //@line 824 "bitreader.c"
    $152 = $151 & 1; //@line 824 "bitreader.c"
    $153 = (0 - ($152))|0; //@line 824 "bitreader.c"
    $154 = $150 ^ $153; //@line 824 "bitreader.c"
    $155 = $17; //@line 824 "bitreader.c"
    $156 = ((($155)) + 4|0); //@line 824 "bitreader.c"
    $17 = $156; //@line 824 "bitreader.c"
    HEAP32[$155>>2] = $154; //@line 824 "bitreader.c"
    label = 11;
    continue L16;
   }
   else if ((label|0) == 21) {
    label = 0;
    label = 23;
   }
  } while(0);
  if ((label|0) == 23) {
   label = 0;
   $161 = $5; //@line 838 "bitreader.c"
   $162 = (_FLAC__bitreader_read_unary_unsigned($161,$12)|0); //@line 838 "bitreader.c"
   $163 = ($162|0)!=(0); //@line 838 "bitreader.c"
   if (!($163)) {
    label = 24;
    break;
   }
   $164 = $13; //@line 840 "bitreader.c"
   $165 = HEAP32[$12>>2]|0; //@line 840 "bitreader.c"
   $166 = (($165) + ($164))|0; //@line 840 "bitreader.c"
   HEAP32[$12>>2] = $166; //@line 840 "bitreader.c"
   $15 = 0; //@line 841 "bitreader.c"
   $13 = 0; //@line 841 "bitreader.c"
  }
  $171 = $5; //@line 850 "bitreader.c"
  $172 = $8; //@line 850 "bitreader.c"
  $173 = $15; //@line 850 "bitreader.c"
  $174 = (($172) - ($173))|0; //@line 850 "bitreader.c"
  $175 = (_FLAC__bitreader_read_raw_uint32($171,$11,$174)|0); //@line 850 "bitreader.c"
  $176 = ($175|0)!=(0); //@line 850 "bitreader.c"
  if (!($176)) {
   label = 28;
   break;
  }
  $177 = $13; //@line 852 "bitreader.c"
  $178 = HEAP32[$11>>2]|0; //@line 852 "bitreader.c"
  $179 = $177 | $178; //@line 852 "bitreader.c"
  HEAP32[$11>>2] = $179; //@line 852 "bitreader.c"
  $180 = HEAP32[$12>>2]|0; //@line 855 "bitreader.c"
  $181 = $8; //@line 855 "bitreader.c"
  $182 = $180 << $181; //@line 855 "bitreader.c"
  $183 = HEAP32[$11>>2]|0; //@line 855 "bitreader.c"
  $184 = $182 | $183; //@line 855 "bitreader.c"
  $13 = $184; //@line 855 "bitreader.c"
  $185 = $13; //@line 856 "bitreader.c"
  $186 = $185 >>> 1; //@line 856 "bitreader.c"
  $187 = $13; //@line 856 "bitreader.c"
  $188 = $187 & 1; //@line 856 "bitreader.c"
  $189 = (0 - ($188))|0; //@line 856 "bitreader.c"
  $190 = $186 ^ $189; //@line 856 "bitreader.c"
  $191 = $17; //@line 856 "bitreader.c"
  $192 = ((($191)) + 4|0); //@line 856 "bitreader.c"
  $17 = $192; //@line 856 "bitreader.c"
  HEAP32[$191>>2] = $190; //@line 856 "bitreader.c"
  $13 = 0; //@line 857 "bitreader.c"
  $193 = $5; //@line 859 "bitreader.c"
  $194 = ((($193)) + 16|0); //@line 859 "bitreader.c"
  $195 = HEAP32[$194>>2]|0; //@line 859 "bitreader.c"
  $9 = $195; //@line 859 "bitreader.c"
  $196 = $5; //@line 860 "bitreader.c"
  $197 = ((($196)) + 8|0); //@line 860 "bitreader.c"
  $198 = HEAP32[$197>>2]|0; //@line 860 "bitreader.c"
  $10 = $198; //@line 860 "bitreader.c"
  $199 = $5; //@line 861 "bitreader.c"
  $200 = ((($199)) + 20|0); //@line 861 "bitreader.c"
  $201 = HEAP32[$200>>2]|0; //@line 861 "bitreader.c"
  $202 = (32 - ($201))|0; //@line 861 "bitreader.c"
  $15 = $202; //@line 861 "bitreader.c"
  $203 = $5; //@line 862 "bitreader.c"
  $204 = HEAP32[$203>>2]|0; //@line 862 "bitreader.c"
  $205 = $9; //@line 862 "bitreader.c"
  $206 = (($204) + ($205<<2)|0); //@line 862 "bitreader.c"
  $207 = HEAP32[$206>>2]|0; //@line 862 "bitreader.c"
  $208 = $5; //@line 862 "bitreader.c"
  $209 = ((($208)) + 20|0); //@line 862 "bitreader.c"
  $210 = HEAP32[$209>>2]|0; //@line 862 "bitreader.c"
  $211 = $207 << $210; //@line 862 "bitreader.c"
  $16 = $211; //@line 862 "bitreader.c"
  $212 = $9; //@line 863 "bitreader.c"
  $213 = $10; //@line 863 "bitreader.c"
  $214 = ($212>>>0)>=($213>>>0); //@line 863 "bitreader.c"
  if ($214) {
   $215 = $17; //@line 863 "bitreader.c"
   $216 = $18; //@line 863 "bitreader.c"
   $217 = ($215>>>0)<($216>>>0); //@line 863 "bitreader.c"
   if ($217) {
    label = 21;
    continue;
   }
  }
  label = 11;
 }
 if ((label|0) == 24) {
  $4 = 0; //@line 839 "bitreader.c"
  $237 = $4; //@line 876 "bitreader.c"
  STACKTOP = sp;return ($237|0); //@line 876 "bitreader.c"
 }
 else if ((label|0) == 28) {
  $4 = 0; //@line 851 "bitreader.c"
  $237 = $4; //@line 876 "bitreader.c"
  STACKTOP = sp;return ($237|0); //@line 876 "bitreader.c"
 }
 else if ((label|0) == 32) {
  $218 = $15; //@line 866 "bitreader.c"
  $219 = ($218|0)==(0); //@line 866 "bitreader.c"
  if ($219) {
   $220 = $9; //@line 866 "bitreader.c"
   $221 = $10; //@line 866 "bitreader.c"
   $222 = ($220>>>0)<($221>>>0); //@line 866 "bitreader.c"
   if ($222) {
    $223 = $5; //@line 868 "bitreader.c"
    $224 = $5; //@line 868 "bitreader.c"
    $225 = HEAP32[$224>>2]|0; //@line 868 "bitreader.c"
    $226 = $9; //@line 868 "bitreader.c"
    $227 = (($226) + 1)|0; //@line 868 "bitreader.c"
    $9 = $227; //@line 868 "bitreader.c"
    $228 = (($225) + ($226<<2)|0); //@line 868 "bitreader.c"
    $229 = HEAP32[$228>>2]|0; //@line 868 "bitreader.c"
    _crc16_update_word_($223,$229); //@line 868 "bitreader.c"
    $15 = 32; //@line 869 "bitreader.c"
   }
  }
  $230 = $15; //@line 872 "bitreader.c"
  $231 = (32 - ($230))|0; //@line 872 "bitreader.c"
  $232 = $5; //@line 872 "bitreader.c"
  $233 = ((($232)) + 20|0); //@line 872 "bitreader.c"
  HEAP32[$233>>2] = $231; //@line 872 "bitreader.c"
  $234 = $9; //@line 873 "bitreader.c"
  $235 = $5; //@line 873 "bitreader.c"
  $236 = ((($235)) + 16|0); //@line 873 "bitreader.c"
  HEAP32[$236>>2] = $234; //@line 873 "bitreader.c"
  $4 = 1; //@line 875 "bitreader.c"
  $237 = $4; //@line 876 "bitreader.c"
  STACKTOP = sp;return ($237|0); //@line 876 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__clz2_uint32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 121 "./include\private/bitmath.h"
 $4 = ($3|0)!=(0); //@line 121 "./include\private/bitmath.h"
 if ($4) {
  $5 = $2; //@line 123 "./include\private/bitmath.h"
  $6 = (_FLAC__clz_uint32($5)|0); //@line 123 "./include\private/bitmath.h"
  $1 = $6; //@line 123 "./include\private/bitmath.h"
 } else {
  $1 = 32; //@line 122 "./include\private/bitmath.h"
 }
 $7 = $1; //@line 124 "./include\private/bitmath.h"
 STACKTOP = sp;return ($7|0); //@line 124 "./include\private/bitmath.h"
}
function _FLAC__bitreader_read_utf8_uint32($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0; //@line 965 "bitreader.c"
 $12 = $5; //@line 969 "bitreader.c"
 $13 = (_FLAC__bitreader_read_raw_uint32($12,$10,8)|0); //@line 969 "bitreader.c"
 $14 = ($13|0)!=(0); //@line 969 "bitreader.c"
 if (!($14)) {
  $4 = 0; //@line 970 "bitreader.c"
  $99 = $4; //@line 1015 "bitreader.c"
  STACKTOP = sp;return ($99|0); //@line 1015 "bitreader.c"
 }
 $15 = $7; //@line 971 "bitreader.c"
 $16 = ($15|0)!=(0|0); //@line 971 "bitreader.c"
 if ($16) {
  $17 = HEAP32[$10>>2]|0; //@line 972 "bitreader.c"
  $18 = $17&255; //@line 972 "bitreader.c"
  $19 = $7; //@line 972 "bitreader.c"
  $20 = $8; //@line 972 "bitreader.c"
  $21 = HEAP32[$20>>2]|0; //@line 972 "bitreader.c"
  $22 = (($21) + 1)|0; //@line 972 "bitreader.c"
  HEAP32[$20>>2] = $22; //@line 972 "bitreader.c"
  $23 = (($19) + ($21)|0); //@line 972 "bitreader.c"
  HEAP8[$23>>0] = $18; //@line 972 "bitreader.c"
 }
 $24 = HEAP32[$10>>2]|0; //@line 973 "bitreader.c"
 $25 = $24 & 128; //@line 973 "bitreader.c"
 $26 = ($25|0)!=(0); //@line 973 "bitreader.c"
 $27 = HEAP32[$10>>2]|0;
 do {
  if ($26) {
   $28 = $27 & 192; //@line 977 "bitreader.c"
   $29 = ($28|0)!=(0); //@line 977 "bitreader.c"
   if ($29) {
    $30 = HEAP32[$10>>2]|0; //@line 977 "bitreader.c"
    $31 = $30 & 32; //@line 977 "bitreader.c"
    $32 = ($31|0)!=(0); //@line 977 "bitreader.c"
    if (!($32)) {
     $33 = HEAP32[$10>>2]|0; //@line 978 "bitreader.c"
     $34 = $33 & 31; //@line 978 "bitreader.c"
     $9 = $34; //@line 978 "bitreader.c"
     $11 = 1; //@line 979 "bitreader.c"
     break;
    }
   }
   $35 = HEAP32[$10>>2]|0; //@line 981 "bitreader.c"
   $36 = $35 & 224; //@line 981 "bitreader.c"
   $37 = ($36|0)!=(0); //@line 981 "bitreader.c"
   if ($37) {
    $38 = HEAP32[$10>>2]|0; //@line 981 "bitreader.c"
    $39 = $38 & 16; //@line 981 "bitreader.c"
    $40 = ($39|0)!=(0); //@line 981 "bitreader.c"
    if (!($40)) {
     $41 = HEAP32[$10>>2]|0; //@line 982 "bitreader.c"
     $42 = $41 & 15; //@line 982 "bitreader.c"
     $9 = $42; //@line 982 "bitreader.c"
     $11 = 2; //@line 983 "bitreader.c"
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0; //@line 985 "bitreader.c"
   $44 = $43 & 240; //@line 985 "bitreader.c"
   $45 = ($44|0)!=(0); //@line 985 "bitreader.c"
   if ($45) {
    $46 = HEAP32[$10>>2]|0; //@line 985 "bitreader.c"
    $47 = $46 & 8; //@line 985 "bitreader.c"
    $48 = ($47|0)!=(0); //@line 985 "bitreader.c"
    if (!($48)) {
     $49 = HEAP32[$10>>2]|0; //@line 986 "bitreader.c"
     $50 = $49 & 7; //@line 986 "bitreader.c"
     $9 = $50; //@line 986 "bitreader.c"
     $11 = 3; //@line 987 "bitreader.c"
     break;
    }
   }
   $51 = HEAP32[$10>>2]|0; //@line 989 "bitreader.c"
   $52 = $51 & 248; //@line 989 "bitreader.c"
   $53 = ($52|0)!=(0); //@line 989 "bitreader.c"
   if ($53) {
    $54 = HEAP32[$10>>2]|0; //@line 989 "bitreader.c"
    $55 = $54 & 4; //@line 989 "bitreader.c"
    $56 = ($55|0)!=(0); //@line 989 "bitreader.c"
    if (!($56)) {
     $57 = HEAP32[$10>>2]|0; //@line 990 "bitreader.c"
     $58 = $57 & 3; //@line 990 "bitreader.c"
     $9 = $58; //@line 990 "bitreader.c"
     $11 = 4; //@line 991 "bitreader.c"
     break;
    }
   }
   $59 = HEAP32[$10>>2]|0; //@line 993 "bitreader.c"
   $60 = $59 & 252; //@line 993 "bitreader.c"
   $61 = ($60|0)!=(0); //@line 993 "bitreader.c"
   if ($61) {
    $62 = HEAP32[$10>>2]|0; //@line 993 "bitreader.c"
    $63 = $62 & 2; //@line 993 "bitreader.c"
    $64 = ($63|0)!=(0); //@line 993 "bitreader.c"
    if (!($64)) {
     $65 = HEAP32[$10>>2]|0; //@line 994 "bitreader.c"
     $66 = $65 & 1; //@line 994 "bitreader.c"
     $9 = $66; //@line 994 "bitreader.c"
     $11 = 5; //@line 995 "bitreader.c"
     break;
    }
   }
   $67 = $6; //@line 998 "bitreader.c"
   HEAP32[$67>>2] = -1; //@line 998 "bitreader.c"
   $4 = 1; //@line 999 "bitreader.c"
   $99 = $4; //@line 1015 "bitreader.c"
   STACKTOP = sp;return ($99|0); //@line 1015 "bitreader.c"
  } else {
   $9 = $27; //@line 974 "bitreader.c"
   $11 = 0; //@line 975 "bitreader.c"
  }
 } while(0);
 while(1) {
  $68 = $11; //@line 1001 "bitreader.c"
  $69 = ($68|0)!=(0); //@line 1001 "bitreader.c"
  if (!($69)) {
   label = 33;
   break;
  }
  $70 = $5; //@line 1002 "bitreader.c"
  $71 = (_FLAC__bitreader_read_raw_uint32($70,$10,8)|0); //@line 1002 "bitreader.c"
  $72 = ($71|0)!=(0); //@line 1002 "bitreader.c"
  if (!($72)) {
   label = 26;
   break;
  }
  $73 = $7; //@line 1004 "bitreader.c"
  $74 = ($73|0)!=(0|0); //@line 1004 "bitreader.c"
  if ($74) {
   $75 = HEAP32[$10>>2]|0; //@line 1005 "bitreader.c"
   $76 = $75&255; //@line 1005 "bitreader.c"
   $77 = $7; //@line 1005 "bitreader.c"
   $78 = $8; //@line 1005 "bitreader.c"
   $79 = HEAP32[$78>>2]|0; //@line 1005 "bitreader.c"
   $80 = (($79) + 1)|0; //@line 1005 "bitreader.c"
   HEAP32[$78>>2] = $80; //@line 1005 "bitreader.c"
   $81 = (($77) + ($79)|0); //@line 1005 "bitreader.c"
   HEAP8[$81>>0] = $76; //@line 1005 "bitreader.c"
  }
  $82 = HEAP32[$10>>2]|0; //@line 1006 "bitreader.c"
  $83 = $82 & 128; //@line 1006 "bitreader.c"
  $84 = ($83|0)!=(0); //@line 1006 "bitreader.c"
  if (!($84)) {
   label = 31;
   break;
  }
  $85 = HEAP32[$10>>2]|0; //@line 1006 "bitreader.c"
  $86 = $85 & 64; //@line 1006 "bitreader.c"
  $87 = ($86|0)!=(0); //@line 1006 "bitreader.c"
  if ($87) {
   label = 31;
   break;
  }
  $89 = $9; //@line 1010 "bitreader.c"
  $90 = $89 << 6; //@line 1010 "bitreader.c"
  $9 = $90; //@line 1010 "bitreader.c"
  $91 = HEAP32[$10>>2]|0; //@line 1011 "bitreader.c"
  $92 = $91 & 63; //@line 1011 "bitreader.c"
  $93 = $9; //@line 1011 "bitreader.c"
  $94 = $93 | $92; //@line 1011 "bitreader.c"
  $9 = $94; //@line 1011 "bitreader.c"
  $95 = $11; //@line 1001 "bitreader.c"
  $96 = (($95) + -1)|0; //@line 1001 "bitreader.c"
  $11 = $96; //@line 1001 "bitreader.c"
 }
 if ((label|0) == 26) {
  $4 = 0; //@line 1003 "bitreader.c"
  $99 = $4; //@line 1015 "bitreader.c"
  STACKTOP = sp;return ($99|0); //@line 1015 "bitreader.c"
 }
 else if ((label|0) == 31) {
  $88 = $6; //@line 1007 "bitreader.c"
  HEAP32[$88>>2] = -1; //@line 1007 "bitreader.c"
  $4 = 1; //@line 1008 "bitreader.c"
  $99 = $4; //@line 1015 "bitreader.c"
  STACKTOP = sp;return ($99|0); //@line 1015 "bitreader.c"
 }
 else if ((label|0) == 33) {
  $97 = $9; //@line 1013 "bitreader.c"
  $98 = $6; //@line 1013 "bitreader.c"
  HEAP32[$98>>2] = $97; //@line 1013 "bitreader.c"
  $4 = 1; //@line 1014 "bitreader.c"
  $99 = $4; //@line 1015 "bitreader.c"
  STACKTOP = sp;return ($99|0); //@line 1015 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitreader_read_utf8_uint64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $10 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $9; //@line 1020 "bitreader.c"
 $13 = $12; //@line 1020 "bitreader.c"
 HEAP32[$13>>2] = 0; //@line 1020 "bitreader.c"
 $14 = (($12) + 4)|0; //@line 1020 "bitreader.c"
 $15 = $14; //@line 1020 "bitreader.c"
 HEAP32[$15>>2] = 0; //@line 1020 "bitreader.c"
 $16 = $5; //@line 1024 "bitreader.c"
 $17 = (_FLAC__bitreader_read_raw_uint32($16,$10,8)|0); //@line 1024 "bitreader.c"
 $18 = ($17|0)!=(0); //@line 1024 "bitreader.c"
 if (!($18)) {
  $4 = 0; //@line 1025 "bitreader.c"
  $173 = $4; //@line 1074 "bitreader.c"
  STACKTOP = sp;return ($173|0); //@line 1074 "bitreader.c"
 }
 $19 = $7; //@line 1026 "bitreader.c"
 $20 = ($19|0)!=(0|0); //@line 1026 "bitreader.c"
 if ($20) {
  $21 = HEAP32[$10>>2]|0; //@line 1027 "bitreader.c"
  $22 = $21&255; //@line 1027 "bitreader.c"
  $23 = $7; //@line 1027 "bitreader.c"
  $24 = $8; //@line 1027 "bitreader.c"
  $25 = HEAP32[$24>>2]|0; //@line 1027 "bitreader.c"
  $26 = (($25) + 1)|0; //@line 1027 "bitreader.c"
  HEAP32[$24>>2] = $26; //@line 1027 "bitreader.c"
  $27 = (($23) + ($25)|0); //@line 1027 "bitreader.c"
  HEAP8[$27>>0] = $22; //@line 1027 "bitreader.c"
 }
 $28 = HEAP32[$10>>2]|0; //@line 1028 "bitreader.c"
 $29 = $28 & 128; //@line 1028 "bitreader.c"
 $30 = ($29|0)!=(0); //@line 1028 "bitreader.c"
 $31 = HEAP32[$10>>2]|0;
 do {
  if ($30) {
   $36 = $31 & 192; //@line 1032 "bitreader.c"
   $37 = ($36|0)!=(0); //@line 1032 "bitreader.c"
   if ($37) {
    $38 = HEAP32[$10>>2]|0; //@line 1032 "bitreader.c"
    $39 = $38 & 32; //@line 1032 "bitreader.c"
    $40 = ($39|0)!=(0); //@line 1032 "bitreader.c"
    if (!($40)) {
     $41 = HEAP32[$10>>2]|0; //@line 1033 "bitreader.c"
     $42 = $41 & 31; //@line 1033 "bitreader.c"
     $43 = $9; //@line 1033 "bitreader.c"
     $44 = $43; //@line 1033 "bitreader.c"
     HEAP32[$44>>2] = $42; //@line 1033 "bitreader.c"
     $45 = (($43) + 4)|0; //@line 1033 "bitreader.c"
     $46 = $45; //@line 1033 "bitreader.c"
     HEAP32[$46>>2] = 0; //@line 1033 "bitreader.c"
     $11 = 1; //@line 1034 "bitreader.c"
     break;
    }
   }
   $47 = HEAP32[$10>>2]|0; //@line 1036 "bitreader.c"
   $48 = $47 & 224; //@line 1036 "bitreader.c"
   $49 = ($48|0)!=(0); //@line 1036 "bitreader.c"
   if ($49) {
    $50 = HEAP32[$10>>2]|0; //@line 1036 "bitreader.c"
    $51 = $50 & 16; //@line 1036 "bitreader.c"
    $52 = ($51|0)!=(0); //@line 1036 "bitreader.c"
    if (!($52)) {
     $53 = HEAP32[$10>>2]|0; //@line 1037 "bitreader.c"
     $54 = $53 & 15; //@line 1037 "bitreader.c"
     $55 = $9; //@line 1037 "bitreader.c"
     $56 = $55; //@line 1037 "bitreader.c"
     HEAP32[$56>>2] = $54; //@line 1037 "bitreader.c"
     $57 = (($55) + 4)|0; //@line 1037 "bitreader.c"
     $58 = $57; //@line 1037 "bitreader.c"
     HEAP32[$58>>2] = 0; //@line 1037 "bitreader.c"
     $11 = 2; //@line 1038 "bitreader.c"
     break;
    }
   }
   $59 = HEAP32[$10>>2]|0; //@line 1040 "bitreader.c"
   $60 = $59 & 240; //@line 1040 "bitreader.c"
   $61 = ($60|0)!=(0); //@line 1040 "bitreader.c"
   if ($61) {
    $62 = HEAP32[$10>>2]|0; //@line 1040 "bitreader.c"
    $63 = $62 & 8; //@line 1040 "bitreader.c"
    $64 = ($63|0)!=(0); //@line 1040 "bitreader.c"
    if (!($64)) {
     $65 = HEAP32[$10>>2]|0; //@line 1041 "bitreader.c"
     $66 = $65 & 7; //@line 1041 "bitreader.c"
     $67 = $9; //@line 1041 "bitreader.c"
     $68 = $67; //@line 1041 "bitreader.c"
     HEAP32[$68>>2] = $66; //@line 1041 "bitreader.c"
     $69 = (($67) + 4)|0; //@line 1041 "bitreader.c"
     $70 = $69; //@line 1041 "bitreader.c"
     HEAP32[$70>>2] = 0; //@line 1041 "bitreader.c"
     $11 = 3; //@line 1042 "bitreader.c"
     break;
    }
   }
   $71 = HEAP32[$10>>2]|0; //@line 1044 "bitreader.c"
   $72 = $71 & 248; //@line 1044 "bitreader.c"
   $73 = ($72|0)!=(0); //@line 1044 "bitreader.c"
   if ($73) {
    $74 = HEAP32[$10>>2]|0; //@line 1044 "bitreader.c"
    $75 = $74 & 4; //@line 1044 "bitreader.c"
    $76 = ($75|0)!=(0); //@line 1044 "bitreader.c"
    if (!($76)) {
     $77 = HEAP32[$10>>2]|0; //@line 1045 "bitreader.c"
     $78 = $77 & 3; //@line 1045 "bitreader.c"
     $79 = $9; //@line 1045 "bitreader.c"
     $80 = $79; //@line 1045 "bitreader.c"
     HEAP32[$80>>2] = $78; //@line 1045 "bitreader.c"
     $81 = (($79) + 4)|0; //@line 1045 "bitreader.c"
     $82 = $81; //@line 1045 "bitreader.c"
     HEAP32[$82>>2] = 0; //@line 1045 "bitreader.c"
     $11 = 4; //@line 1046 "bitreader.c"
     break;
    }
   }
   $83 = HEAP32[$10>>2]|0; //@line 1048 "bitreader.c"
   $84 = $83 & 252; //@line 1048 "bitreader.c"
   $85 = ($84|0)!=(0); //@line 1048 "bitreader.c"
   if ($85) {
    $86 = HEAP32[$10>>2]|0; //@line 1048 "bitreader.c"
    $87 = $86 & 2; //@line 1048 "bitreader.c"
    $88 = ($87|0)!=(0); //@line 1048 "bitreader.c"
    if (!($88)) {
     $89 = HEAP32[$10>>2]|0; //@line 1049 "bitreader.c"
     $90 = $89 & 1; //@line 1049 "bitreader.c"
     $91 = $9; //@line 1049 "bitreader.c"
     $92 = $91; //@line 1049 "bitreader.c"
     HEAP32[$92>>2] = $90; //@line 1049 "bitreader.c"
     $93 = (($91) + 4)|0; //@line 1049 "bitreader.c"
     $94 = $93; //@line 1049 "bitreader.c"
     HEAP32[$94>>2] = 0; //@line 1049 "bitreader.c"
     $11 = 5; //@line 1050 "bitreader.c"
     break;
    }
   }
   $95 = HEAP32[$10>>2]|0; //@line 1052 "bitreader.c"
   $96 = $95 & 254; //@line 1052 "bitreader.c"
   $97 = ($96|0)!=(0); //@line 1052 "bitreader.c"
   if ($97) {
    $98 = HEAP32[$10>>2]|0; //@line 1052 "bitreader.c"
    $99 = $98 & 1; //@line 1052 "bitreader.c"
    $100 = ($99|0)!=(0); //@line 1052 "bitreader.c"
    if (!($100)) {
     $101 = $9; //@line 1053 "bitreader.c"
     $102 = $101; //@line 1053 "bitreader.c"
     HEAP32[$102>>2] = 0; //@line 1053 "bitreader.c"
     $103 = (($101) + 4)|0; //@line 1053 "bitreader.c"
     $104 = $103; //@line 1053 "bitreader.c"
     HEAP32[$104>>2] = 0; //@line 1053 "bitreader.c"
     $11 = 6; //@line 1054 "bitreader.c"
     break;
    }
   }
   $105 = $6; //@line 1057 "bitreader.c"
   $106 = $105; //@line 1057 "bitreader.c"
   $107 = $106; //@line 1057 "bitreader.c"
   HEAP32[$107>>2] = -1; //@line 1057 "bitreader.c"
   $108 = (($106) + 4)|0; //@line 1057 "bitreader.c"
   $109 = $108; //@line 1057 "bitreader.c"
   HEAP32[$109>>2] = -1; //@line 1057 "bitreader.c"
   $4 = 1; //@line 1058 "bitreader.c"
   $173 = $4; //@line 1074 "bitreader.c"
   STACKTOP = sp;return ($173|0); //@line 1074 "bitreader.c"
  } else {
   $32 = $9; //@line 1029 "bitreader.c"
   $33 = $32; //@line 1029 "bitreader.c"
   HEAP32[$33>>2] = $31; //@line 1029 "bitreader.c"
   $34 = (($32) + 4)|0; //@line 1029 "bitreader.c"
   $35 = $34; //@line 1029 "bitreader.c"
   HEAP32[$35>>2] = 0; //@line 1029 "bitreader.c"
   $11 = 0; //@line 1030 "bitreader.c"
  }
 } while(0);
 while(1) {
  $110 = $11; //@line 1060 "bitreader.c"
  $111 = ($110|0)!=(0); //@line 1060 "bitreader.c"
  if (!($111)) {
   label = 36;
   break;
  }
  $112 = $5; //@line 1061 "bitreader.c"
  $113 = (_FLAC__bitreader_read_raw_uint32($112,$10,8)|0); //@line 1061 "bitreader.c"
  $114 = ($113|0)!=(0); //@line 1061 "bitreader.c"
  if (!($114)) {
   label = 29;
   break;
  }
  $115 = $7; //@line 1063 "bitreader.c"
  $116 = ($115|0)!=(0|0); //@line 1063 "bitreader.c"
  if ($116) {
   $117 = HEAP32[$10>>2]|0; //@line 1064 "bitreader.c"
   $118 = $117&255; //@line 1064 "bitreader.c"
   $119 = $7; //@line 1064 "bitreader.c"
   $120 = $8; //@line 1064 "bitreader.c"
   $121 = HEAP32[$120>>2]|0; //@line 1064 "bitreader.c"
   $122 = (($121) + 1)|0; //@line 1064 "bitreader.c"
   HEAP32[$120>>2] = $122; //@line 1064 "bitreader.c"
   $123 = (($119) + ($121)|0); //@line 1064 "bitreader.c"
   HEAP8[$123>>0] = $118; //@line 1064 "bitreader.c"
  }
  $124 = HEAP32[$10>>2]|0; //@line 1065 "bitreader.c"
  $125 = $124 & 128; //@line 1065 "bitreader.c"
  $126 = ($125|0)!=(0); //@line 1065 "bitreader.c"
  if (!($126)) {
   label = 34;
   break;
  }
  $127 = HEAP32[$10>>2]|0; //@line 1065 "bitreader.c"
  $128 = $127 & 64; //@line 1065 "bitreader.c"
  $129 = ($128|0)!=(0); //@line 1065 "bitreader.c"
  if ($129) {
   label = 34;
   break;
  }
  $135 = $9; //@line 1069 "bitreader.c"
  $136 = $135; //@line 1069 "bitreader.c"
  $137 = HEAP32[$136>>2]|0; //@line 1069 "bitreader.c"
  $138 = (($135) + 4)|0; //@line 1069 "bitreader.c"
  $139 = $138; //@line 1069 "bitreader.c"
  $140 = HEAP32[$139>>2]|0; //@line 1069 "bitreader.c"
  $141 = (_bitshift64Shl(($137|0),($140|0),6)|0); //@line 1069 "bitreader.c"
  $142 = tempRet0; //@line 1069 "bitreader.c"
  $143 = $9; //@line 1069 "bitreader.c"
  $144 = $143; //@line 1069 "bitreader.c"
  HEAP32[$144>>2] = $141; //@line 1069 "bitreader.c"
  $145 = (($143) + 4)|0; //@line 1069 "bitreader.c"
  $146 = $145; //@line 1069 "bitreader.c"
  HEAP32[$146>>2] = $142; //@line 1069 "bitreader.c"
  $147 = HEAP32[$10>>2]|0; //@line 1070 "bitreader.c"
  $148 = $147 & 63; //@line 1070 "bitreader.c"
  $149 = $9; //@line 1070 "bitreader.c"
  $150 = $149; //@line 1070 "bitreader.c"
  $151 = HEAP32[$150>>2]|0; //@line 1070 "bitreader.c"
  $152 = (($149) + 4)|0; //@line 1070 "bitreader.c"
  $153 = $152; //@line 1070 "bitreader.c"
  $154 = HEAP32[$153>>2]|0; //@line 1070 "bitreader.c"
  $155 = $151 | $148; //@line 1070 "bitreader.c"
  $156 = $9; //@line 1070 "bitreader.c"
  $157 = $156; //@line 1070 "bitreader.c"
  HEAP32[$157>>2] = $155; //@line 1070 "bitreader.c"
  $158 = (($156) + 4)|0; //@line 1070 "bitreader.c"
  $159 = $158; //@line 1070 "bitreader.c"
  HEAP32[$159>>2] = $154; //@line 1070 "bitreader.c"
  $160 = $11; //@line 1060 "bitreader.c"
  $161 = (($160) + -1)|0; //@line 1060 "bitreader.c"
  $11 = $161; //@line 1060 "bitreader.c"
 }
 if ((label|0) == 29) {
  $4 = 0; //@line 1062 "bitreader.c"
  $173 = $4; //@line 1074 "bitreader.c"
  STACKTOP = sp;return ($173|0); //@line 1074 "bitreader.c"
 }
 else if ((label|0) == 34) {
  $130 = $6; //@line 1066 "bitreader.c"
  $131 = $130; //@line 1066 "bitreader.c"
  $132 = $131; //@line 1066 "bitreader.c"
  HEAP32[$132>>2] = -1; //@line 1066 "bitreader.c"
  $133 = (($131) + 4)|0; //@line 1066 "bitreader.c"
  $134 = $133; //@line 1066 "bitreader.c"
  HEAP32[$134>>2] = -1; //@line 1066 "bitreader.c"
  $4 = 1; //@line 1067 "bitreader.c"
  $173 = $4; //@line 1074 "bitreader.c"
  STACKTOP = sp;return ($173|0); //@line 1074 "bitreader.c"
 }
 else if ((label|0) == 36) {
  $162 = $9; //@line 1072 "bitreader.c"
  $163 = $162; //@line 1072 "bitreader.c"
  $164 = HEAP32[$163>>2]|0; //@line 1072 "bitreader.c"
  $165 = (($162) + 4)|0; //@line 1072 "bitreader.c"
  $166 = $165; //@line 1072 "bitreader.c"
  $167 = HEAP32[$166>>2]|0; //@line 1072 "bitreader.c"
  $168 = $6; //@line 1072 "bitreader.c"
  $169 = $168; //@line 1072 "bitreader.c"
  $170 = $169; //@line 1072 "bitreader.c"
  HEAP32[$170>>2] = $164; //@line 1072 "bitreader.c"
  $171 = (($169) + 4)|0; //@line 1072 "bitreader.c"
  $172 = $171; //@line 1072 "bitreader.c"
  HEAP32[$172>>2] = $167; //@line 1072 "bitreader.c"
  $4 = 1; //@line 1073 "bitreader.c"
  $173 = $4; //@line 1074 "bitreader.c"
  STACKTOP = sp;return ($173|0); //@line 1074 "bitreader.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_new() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_calloc(1,20)|0); //@line 144 "bitwriter.c"
 $0 = $1; //@line 144 "bitwriter.c"
 $2 = $0; //@line 146 "bitwriter.c"
 STACKTOP = sp;return ($2|0); //@line 146 "bitwriter.c"
}
function _FLAC__bitwriter_delete($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 153 "bitwriter.c"
 _FLAC__bitwriter_free($2); //@line 153 "bitwriter.c"
 $3 = $1; //@line 154 "bitwriter.c"
 _free($3); //@line 154 "bitwriter.c"
 STACKTOP = sp;return; //@line 155 "bitwriter.c"
}
function _FLAC__bitwriter_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 180 "bitwriter.c"
 $3 = HEAP32[$2>>2]|0; //@line 180 "bitwriter.c"
 $4 = (0|0)!=($3|0); //@line 180 "bitwriter.c"
 if ($4) {
  $5 = $1; //@line 181 "bitwriter.c"
  $6 = HEAP32[$5>>2]|0; //@line 181 "bitwriter.c"
  _free($6); //@line 181 "bitwriter.c"
 }
 $7 = $1; //@line 182 "bitwriter.c"
 HEAP32[$7>>2] = 0; //@line 182 "bitwriter.c"
 $8 = $1; //@line 183 "bitwriter.c"
 $9 = ((($8)) + 8|0); //@line 183 "bitwriter.c"
 HEAP32[$9>>2] = 0; //@line 183 "bitwriter.c"
 $10 = $1; //@line 184 "bitwriter.c"
 $11 = ((($10)) + 16|0); //@line 184 "bitwriter.c"
 HEAP32[$11>>2] = 0; //@line 184 "bitwriter.c"
 $12 = $1; //@line 184 "bitwriter.c"
 $13 = ((($12)) + 12|0); //@line 184 "bitwriter.c"
 HEAP32[$13>>2] = 0; //@line 184 "bitwriter.c"
 STACKTOP = sp;return; //@line 185 "bitwriter.c"
}
function _FLAC__bitwriter_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 167 "bitwriter.c"
 $4 = ((($3)) + 16|0); //@line 167 "bitwriter.c"
 HEAP32[$4>>2] = 0; //@line 167 "bitwriter.c"
 $5 = $2; //@line 167 "bitwriter.c"
 $6 = ((($5)) + 12|0); //@line 167 "bitwriter.c"
 HEAP32[$6>>2] = 0; //@line 167 "bitwriter.c"
 $7 = $2; //@line 168 "bitwriter.c"
 $8 = ((($7)) + 8|0); //@line 168 "bitwriter.c"
 HEAP32[$8>>2] = 8192; //@line 168 "bitwriter.c"
 $9 = $2; //@line 169 "bitwriter.c"
 $10 = ((($9)) + 8|0); //@line 169 "bitwriter.c"
 $11 = HEAP32[$10>>2]|0; //@line 169 "bitwriter.c"
 $12 = $11<<2; //@line 169 "bitwriter.c"
 $13 = (_malloc($12)|0); //@line 169 "bitwriter.c"
 $14 = $2; //@line 169 "bitwriter.c"
 HEAP32[$14>>2] = $13; //@line 169 "bitwriter.c"
 $15 = $2; //@line 170 "bitwriter.c"
 $16 = HEAP32[$15>>2]|0; //@line 170 "bitwriter.c"
 $17 = ($16|0)==(0|0); //@line 170 "bitwriter.c"
 if ($17) {
  $1 = 0; //@line 171 "bitwriter.c"
  $18 = $1; //@line 174 "bitwriter.c"
  STACKTOP = sp;return ($18|0); //@line 174 "bitwriter.c"
 } else {
  $1 = 1; //@line 173 "bitwriter.c"
  $18 = $1; //@line 174 "bitwriter.c"
  STACKTOP = sp;return ($18|0); //@line 174 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_clear($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 189 "bitwriter.c"
 $3 = ((($2)) + 16|0); //@line 189 "bitwriter.c"
 HEAP32[$3>>2] = 0; //@line 189 "bitwriter.c"
 $4 = $1; //@line 189 "bitwriter.c"
 $5 = ((($4)) + 12|0); //@line 189 "bitwriter.c"
 HEAP32[$5>>2] = 0; //@line 189 "bitwriter.c"
 STACKTOP = sp;return; //@line 190 "bitwriter.c"
}
function _FLAC__bitwriter_get_write_crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3; //@line 223 "bitwriter.c"
 $8 = (_FLAC__bitwriter_get_buffer($7,$5,$6)|0); //@line 223 "bitwriter.c"
 $9 = ($8|0)!=(0); //@line 223 "bitwriter.c"
 if ($9) {
  $10 = HEAP32[$5>>2]|0; //@line 226 "bitwriter.c"
  $11 = HEAP32[$6>>2]|0; //@line 226 "bitwriter.c"
  $12 = (_FLAC__crc16($10,$11)|0); //@line 226 "bitwriter.c"
  $13 = $12&65535; //@line 226 "bitwriter.c"
  $14 = $4; //@line 226 "bitwriter.c"
  HEAP16[$14>>1] = $13; //@line 226 "bitwriter.c"
  $15 = $3; //@line 227 "bitwriter.c"
  _FLAC__bitwriter_release_buffer($15); //@line 227 "bitwriter.c"
  $2 = 1; //@line 228 "bitwriter.c"
  $16 = $2; //@line 229 "bitwriter.c"
  STACKTOP = sp;return ($16|0); //@line 229 "bitwriter.c"
 } else {
  $2 = 0; //@line 224 "bitwriter.c"
  $16 = $2; //@line 229 "bitwriter.c"
  STACKTOP = sp;return ($16|0); //@line 229 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_get_buffer($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4; //@line 260 "bitwriter.c"
 $8 = ((($7)) + 16|0); //@line 260 "bitwriter.c"
 $9 = HEAP32[$8>>2]|0; //@line 260 "bitwriter.c"
 $10 = $9 & 7; //@line 260 "bitwriter.c"
 $11 = ($10|0)!=(0); //@line 260 "bitwriter.c"
 if ($11) {
  $3 = 0; //@line 261 "bitwriter.c"
  $88 = $3; //@line 274 "bitwriter.c"
  STACKTOP = sp;return ($88|0); //@line 274 "bitwriter.c"
 }
 $12 = $4; //@line 263 "bitwriter.c"
 $13 = ((($12)) + 16|0); //@line 263 "bitwriter.c"
 $14 = HEAP32[$13>>2]|0; //@line 263 "bitwriter.c"
 $15 = ($14|0)!=(0); //@line 263 "bitwriter.c"
 if ($15) {
  $16 = $4; //@line 265 "bitwriter.c"
  $17 = ((($16)) + 12|0); //@line 265 "bitwriter.c"
  $18 = HEAP32[$17>>2]|0; //@line 265 "bitwriter.c"
  $19 = $4; //@line 265 "bitwriter.c"
  $20 = ((($19)) + 8|0); //@line 265 "bitwriter.c"
  $21 = HEAP32[$20>>2]|0; //@line 265 "bitwriter.c"
  $22 = ($18|0)==($21|0); //@line 265 "bitwriter.c"
  if ($22) {
   $23 = $4; //@line 265 "bitwriter.c"
   $24 = (_bitwriter_grow_($23,32)|0); //@line 265 "bitwriter.c"
   $25 = ($24|0)!=(0); //@line 265 "bitwriter.c"
   if (!($25)) {
    $3 = 0; //@line 266 "bitwriter.c"
    $88 = $3; //@line 274 "bitwriter.c"
    STACKTOP = sp;return ($88|0); //@line 274 "bitwriter.c"
   }
  }
  $26 = $4; //@line 268 "bitwriter.c"
  $27 = ((($26)) + 4|0); //@line 268 "bitwriter.c"
  $28 = HEAP32[$27>>2]|0; //@line 268 "bitwriter.c"
  $29 = $4; //@line 268 "bitwriter.c"
  $30 = ((($29)) + 16|0); //@line 268 "bitwriter.c"
  $31 = HEAP32[$30>>2]|0; //@line 268 "bitwriter.c"
  $32 = (32 - ($31))|0; //@line 268 "bitwriter.c"
  $33 = $28 << $32; //@line 268 "bitwriter.c"
  $34 = $33 >>> 24; //@line 268 "bitwriter.c"
  $35 = $34 & 255; //@line 268 "bitwriter.c"
  $36 = $4; //@line 268 "bitwriter.c"
  $37 = ((($36)) + 4|0); //@line 268 "bitwriter.c"
  $38 = HEAP32[$37>>2]|0; //@line 268 "bitwriter.c"
  $39 = $4; //@line 268 "bitwriter.c"
  $40 = ((($39)) + 16|0); //@line 268 "bitwriter.c"
  $41 = HEAP32[$40>>2]|0; //@line 268 "bitwriter.c"
  $42 = (32 - ($41))|0; //@line 268 "bitwriter.c"
  $43 = $38 << $42; //@line 268 "bitwriter.c"
  $44 = $43 >>> 8; //@line 268 "bitwriter.c"
  $45 = $44 & 65280; //@line 268 "bitwriter.c"
  $46 = $35 | $45; //@line 268 "bitwriter.c"
  $47 = $4; //@line 268 "bitwriter.c"
  $48 = ((($47)) + 4|0); //@line 268 "bitwriter.c"
  $49 = HEAP32[$48>>2]|0; //@line 268 "bitwriter.c"
  $50 = $4; //@line 268 "bitwriter.c"
  $51 = ((($50)) + 16|0); //@line 268 "bitwriter.c"
  $52 = HEAP32[$51>>2]|0; //@line 268 "bitwriter.c"
  $53 = (32 - ($52))|0; //@line 268 "bitwriter.c"
  $54 = $49 << $53; //@line 268 "bitwriter.c"
  $55 = $54 & 65280; //@line 268 "bitwriter.c"
  $56 = $55 << 8; //@line 268 "bitwriter.c"
  $57 = $46 | $56; //@line 268 "bitwriter.c"
  $58 = $4; //@line 268 "bitwriter.c"
  $59 = ((($58)) + 4|0); //@line 268 "bitwriter.c"
  $60 = HEAP32[$59>>2]|0; //@line 268 "bitwriter.c"
  $61 = $4; //@line 268 "bitwriter.c"
  $62 = ((($61)) + 16|0); //@line 268 "bitwriter.c"
  $63 = HEAP32[$62>>2]|0; //@line 268 "bitwriter.c"
  $64 = (32 - ($63))|0; //@line 268 "bitwriter.c"
  $65 = $60 << $64; //@line 268 "bitwriter.c"
  $66 = $65 & 255; //@line 268 "bitwriter.c"
  $67 = $66 << 24; //@line 268 "bitwriter.c"
  $68 = $57 | $67; //@line 268 "bitwriter.c"
  $69 = $4; //@line 268 "bitwriter.c"
  $70 = HEAP32[$69>>2]|0; //@line 268 "bitwriter.c"
  $71 = $4; //@line 268 "bitwriter.c"
  $72 = ((($71)) + 12|0); //@line 268 "bitwriter.c"
  $73 = HEAP32[$72>>2]|0; //@line 268 "bitwriter.c"
  $74 = (($70) + ($73<<2)|0); //@line 268 "bitwriter.c"
  HEAP32[$74>>2] = $68; //@line 268 "bitwriter.c"
 }
 $75 = $4; //@line 271 "bitwriter.c"
 $76 = HEAP32[$75>>2]|0; //@line 271 "bitwriter.c"
 $77 = $5; //@line 271 "bitwriter.c"
 HEAP32[$77>>2] = $76; //@line 271 "bitwriter.c"
 $78 = $4; //@line 272 "bitwriter.c"
 $79 = ((($78)) + 12|0); //@line 272 "bitwriter.c"
 $80 = HEAP32[$79>>2]|0; //@line 272 "bitwriter.c"
 $81 = $80<<2; //@line 272 "bitwriter.c"
 $82 = $4; //@line 272 "bitwriter.c"
 $83 = ((($82)) + 16|0); //@line 272 "bitwriter.c"
 $84 = HEAP32[$83>>2]|0; //@line 272 "bitwriter.c"
 $85 = $84 >>> 3; //@line 272 "bitwriter.c"
 $86 = (($81) + ($85))|0; //@line 272 "bitwriter.c"
 $87 = $6; //@line 272 "bitwriter.c"
 HEAP32[$87>>2] = $86; //@line 272 "bitwriter.c"
 $3 = 1; //@line 273 "bitwriter.c"
 $88 = $3; //@line 274 "bitwriter.c"
 STACKTOP = sp;return ($88|0); //@line 274 "bitwriter.c"
}
function _FLAC__bitwriter_release_buffer($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 282 "bitwriter.c"
}
function _bitwriter_grow_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3; //@line 111 "bitwriter.c"
 $8 = ((($7)) + 12|0); //@line 111 "bitwriter.c"
 $9 = HEAP32[$8>>2]|0; //@line 111 "bitwriter.c"
 $10 = $3; //@line 111 "bitwriter.c"
 $11 = ((($10)) + 16|0); //@line 111 "bitwriter.c"
 $12 = HEAP32[$11>>2]|0; //@line 111 "bitwriter.c"
 $13 = $4; //@line 111 "bitwriter.c"
 $14 = (($12) + ($13))|0; //@line 111 "bitwriter.c"
 $15 = (($14) + 32)|0; //@line 111 "bitwriter.c"
 $16 = (($15) - 1)|0; //@line 111 "bitwriter.c"
 $17 = (($16>>>0) / 32)&-1; //@line 111 "bitwriter.c"
 $18 = (($9) + ($17))|0; //@line 111 "bitwriter.c"
 $5 = $18; //@line 111 "bitwriter.c"
 $19 = $3; //@line 116 "bitwriter.c"
 $20 = ((($19)) + 8|0); //@line 116 "bitwriter.c"
 $21 = HEAP32[$20>>2]|0; //@line 116 "bitwriter.c"
 $22 = $5; //@line 116 "bitwriter.c"
 $23 = ($21>>>0)>=($22>>>0); //@line 116 "bitwriter.c"
 if ($23) {
  $2 = 1; //@line 117 "bitwriter.c"
  $51 = $2; //@line 133 "bitwriter.c"
  STACKTOP = sp;return ($51|0); //@line 133 "bitwriter.c"
 }
 $24 = $5; //@line 120 "bitwriter.c"
 $25 = $3; //@line 120 "bitwriter.c"
 $26 = ((($25)) + 8|0); //@line 120 "bitwriter.c"
 $27 = HEAP32[$26>>2]|0; //@line 120 "bitwriter.c"
 $28 = (($24) - ($27))|0; //@line 120 "bitwriter.c"
 $29 = (($28>>>0) % 1024)&-1; //@line 120 "bitwriter.c"
 $30 = ($29|0)!=(0); //@line 120 "bitwriter.c"
 if ($30) {
  $31 = $5; //@line 121 "bitwriter.c"
  $32 = $3; //@line 121 "bitwriter.c"
  $33 = ((($32)) + 8|0); //@line 121 "bitwriter.c"
  $34 = HEAP32[$33>>2]|0; //@line 121 "bitwriter.c"
  $35 = (($31) - ($34))|0; //@line 121 "bitwriter.c"
  $36 = (($35>>>0) % 1024)&-1; //@line 121 "bitwriter.c"
  $37 = (1024 - ($36))|0; //@line 121 "bitwriter.c"
  $38 = $5; //@line 121 "bitwriter.c"
  $39 = (($38) + ($37))|0; //@line 121 "bitwriter.c"
  $5 = $39; //@line 121 "bitwriter.c"
 }
 $40 = $3; //@line 127 "bitwriter.c"
 $41 = HEAP32[$40>>2]|0; //@line 127 "bitwriter.c"
 $42 = $5; //@line 127 "bitwriter.c"
 $43 = (_safe_realloc_mul_2op_($41,4,$42)|0); //@line 127 "bitwriter.c"
 $6 = $43; //@line 127 "bitwriter.c"
 $44 = $6; //@line 128 "bitwriter.c"
 $45 = ($44|0)==(0|0); //@line 128 "bitwriter.c"
 if ($45) {
  $2 = 0; //@line 129 "bitwriter.c"
  $51 = $2; //@line 133 "bitwriter.c"
  STACKTOP = sp;return ($51|0); //@line 133 "bitwriter.c"
 } else {
  $46 = $6; //@line 130 "bitwriter.c"
  $47 = $3; //@line 130 "bitwriter.c"
  HEAP32[$47>>2] = $46; //@line 130 "bitwriter.c"
  $48 = $5; //@line 131 "bitwriter.c"
  $49 = $3; //@line 131 "bitwriter.c"
  $50 = ((($49)) + 8|0); //@line 131 "bitwriter.c"
  HEAP32[$50>>2] = $48; //@line 131 "bitwriter.c"
  $2 = 1; //@line 132 "bitwriter.c"
  $51 = $2; //@line 133 "bitwriter.c"
  STACKTOP = sp;return ($51|0); //@line 133 "bitwriter.c"
 }
 return (0)|0;
}
function _safe_realloc_mul_2op_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5; //@line 201 "../../include\share/alloc.h"
 $8 = ($7|0)!=(0); //@line 201 "../../include\share/alloc.h"
 $9 = $6; //@line 201 "../../include\share/alloc.h"
 $10 = ($9|0)!=(0); //@line 201 "../../include\share/alloc.h"
 $or$cond = $8 & $10; //@line 201 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $11 = $4; //@line 202 "../../include\share/alloc.h"
  $12 = (_realloc($11,0)|0); //@line 202 "../../include\share/alloc.h"
  $3 = $12; //@line 202 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 }
 $13 = $5; //@line 203 "../../include\share/alloc.h"
 $14 = $6; //@line 203 "../../include\share/alloc.h"
 $15 = (4294967295 / ($14>>>0))&-1; //@line 203 "../../include\share/alloc.h"
 $16 = ($13>>>0)>($15>>>0); //@line 203 "../../include\share/alloc.h"
 if ($16) {
  $3 = 0; //@line 204 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 } else {
  $17 = $4; //@line 205 "../../include\share/alloc.h"
  $18 = $5; //@line 205 "../../include\share/alloc.h"
  $19 = $6; //@line 205 "../../include\share/alloc.h"
  $20 = Math_imul($18, $19)|0; //@line 205 "../../include\share/alloc.h"
  $21 = (_safe_realloc_($17,$20)|0); //@line 205 "../../include\share/alloc.h"
  $3 = $21; //@line 205 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 }
 return (0)|0;
}
function _safe_realloc_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2; //@line 158 "../../include\share/alloc.h"
 $4 = $6; //@line 158 "../../include\share/alloc.h"
 $7 = $2; //@line 159 "../../include\share/alloc.h"
 $8 = $3; //@line 159 "../../include\share/alloc.h"
 $9 = (_realloc($7,$8)|0); //@line 159 "../../include\share/alloc.h"
 $5 = $9; //@line 159 "../../include\share/alloc.h"
 $10 = $3; //@line 160 "../../include\share/alloc.h"
 $11 = ($10>>>0)>(0); //@line 160 "../../include\share/alloc.h"
 $12 = $5; //@line 160 "../../include\share/alloc.h"
 $13 = ($12|0)==(0|0); //@line 160 "../../include\share/alloc.h"
 $or$cond = $11 & $13; //@line 160 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $15 = $5; //@line 162 "../../include\share/alloc.h"
  STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
 }
 $14 = $4; //@line 161 "../../include\share/alloc.h"
 _free($14); //@line 161 "../../include\share/alloc.h"
 $15 = $5; //@line 162 "../../include\share/alloc.h"
 STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
}
function _FLAC__bitwriter_get_write_crc8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 4|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3; //@line 238 "bitwriter.c"
 $8 = (_FLAC__bitwriter_get_buffer($7,$5,$6)|0); //@line 238 "bitwriter.c"
 $9 = ($8|0)!=(0); //@line 238 "bitwriter.c"
 if ($9) {
  $10 = HEAP32[$5>>2]|0; //@line 241 "bitwriter.c"
  $11 = HEAP32[$6>>2]|0; //@line 241 "bitwriter.c"
  $12 = (_FLAC__crc8($10,$11)|0); //@line 241 "bitwriter.c"
  $13 = $4; //@line 241 "bitwriter.c"
  HEAP8[$13>>0] = $12; //@line 241 "bitwriter.c"
  $14 = $3; //@line 242 "bitwriter.c"
  _FLAC__bitwriter_release_buffer($14); //@line 242 "bitwriter.c"
  $2 = 1; //@line 243 "bitwriter.c"
  $15 = $2; //@line 244 "bitwriter.c"
  STACKTOP = sp;return ($15|0); //@line 244 "bitwriter.c"
 } else {
  $2 = 0; //@line 239 "bitwriter.c"
  $15 = $2; //@line 244 "bitwriter.c"
  STACKTOP = sp;return ($15|0); //@line 244 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_zeroes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4; //@line 291 "bitwriter.c"
 $7 = ($6|0)==(0); //@line 291 "bitwriter.c"
 if ($7) {
  $2 = 1; //@line 292 "bitwriter.c"
  $104 = $2; //@line 320 "bitwriter.c"
  STACKTOP = sp;return ($104|0); //@line 320 "bitwriter.c"
 }
 $8 = $3; //@line 294 "bitwriter.c"
 $9 = ((($8)) + 8|0); //@line 294 "bitwriter.c"
 $10 = HEAP32[$9>>2]|0; //@line 294 "bitwriter.c"
 $11 = $3; //@line 294 "bitwriter.c"
 $12 = ((($11)) + 12|0); //@line 294 "bitwriter.c"
 $13 = HEAP32[$12>>2]|0; //@line 294 "bitwriter.c"
 $14 = $4; //@line 294 "bitwriter.c"
 $15 = (($13) + ($14))|0; //@line 294 "bitwriter.c"
 $16 = ($10>>>0)<=($15>>>0); //@line 294 "bitwriter.c"
 if ($16) {
  $17 = $3; //@line 294 "bitwriter.c"
  $18 = $4; //@line 294 "bitwriter.c"
  $19 = (_bitwriter_grow_($17,$18)|0); //@line 294 "bitwriter.c"
  $20 = ($19|0)!=(0); //@line 294 "bitwriter.c"
  if (!($20)) {
   $2 = 0; //@line 295 "bitwriter.c"
   $104 = $2; //@line 320 "bitwriter.c"
   STACKTOP = sp;return ($104|0); //@line 320 "bitwriter.c"
  }
 }
 $21 = $3; //@line 297 "bitwriter.c"
 $22 = ((($21)) + 16|0); //@line 297 "bitwriter.c"
 $23 = HEAP32[$22>>2]|0; //@line 297 "bitwriter.c"
 $24 = ($23|0)!=(0); //@line 297 "bitwriter.c"
 do {
  if ($24) {
   $25 = $3; //@line 298 "bitwriter.c"
   $26 = ((($25)) + 16|0); //@line 298 "bitwriter.c"
   $27 = HEAP32[$26>>2]|0; //@line 298 "bitwriter.c"
   $28 = (32 - ($27))|0; //@line 298 "bitwriter.c"
   $29 = $4; //@line 298 "bitwriter.c"
   $30 = ($28>>>0)<($29>>>0); //@line 298 "bitwriter.c"
   if ($30) {
    $31 = $3; //@line 298 "bitwriter.c"
    $32 = ((($31)) + 16|0); //@line 298 "bitwriter.c"
    $33 = HEAP32[$32>>2]|0; //@line 298 "bitwriter.c"
    $34 = (32 - ($33))|0; //@line 298 "bitwriter.c"
    $36 = $34;
   } else {
    $35 = $4; //@line 298 "bitwriter.c"
    $36 = $35;
   }
   $5 = $36; //@line 298 "bitwriter.c"
   $37 = $5; //@line 299 "bitwriter.c"
   $38 = $3; //@line 299 "bitwriter.c"
   $39 = ((($38)) + 4|0); //@line 299 "bitwriter.c"
   $40 = HEAP32[$39>>2]|0; //@line 299 "bitwriter.c"
   $41 = $40 << $37; //@line 299 "bitwriter.c"
   HEAP32[$39>>2] = $41; //@line 299 "bitwriter.c"
   $42 = $5; //@line 300 "bitwriter.c"
   $43 = $4; //@line 300 "bitwriter.c"
   $44 = (($43) - ($42))|0; //@line 300 "bitwriter.c"
   $4 = $44; //@line 300 "bitwriter.c"
   $45 = $5; //@line 301 "bitwriter.c"
   $46 = $3; //@line 301 "bitwriter.c"
   $47 = ((($46)) + 16|0); //@line 301 "bitwriter.c"
   $48 = HEAP32[$47>>2]|0; //@line 301 "bitwriter.c"
   $49 = (($48) + ($45))|0; //@line 301 "bitwriter.c"
   HEAP32[$47>>2] = $49; //@line 301 "bitwriter.c"
   $50 = $3; //@line 302 "bitwriter.c"
   $51 = ((($50)) + 16|0); //@line 302 "bitwriter.c"
   $52 = HEAP32[$51>>2]|0; //@line 302 "bitwriter.c"
   $53 = ($52|0)==(32); //@line 302 "bitwriter.c"
   if ($53) {
    $54 = $3; //@line 303 "bitwriter.c"
    $55 = ((($54)) + 4|0); //@line 303 "bitwriter.c"
    $56 = HEAP32[$55>>2]|0; //@line 303 "bitwriter.c"
    $57 = $56 >>> 24; //@line 303 "bitwriter.c"
    $58 = $57 & 255; //@line 303 "bitwriter.c"
    $59 = $3; //@line 303 "bitwriter.c"
    $60 = ((($59)) + 4|0); //@line 303 "bitwriter.c"
    $61 = HEAP32[$60>>2]|0; //@line 303 "bitwriter.c"
    $62 = $61 >>> 8; //@line 303 "bitwriter.c"
    $63 = $62 & 65280; //@line 303 "bitwriter.c"
    $64 = $58 | $63; //@line 303 "bitwriter.c"
    $65 = $3; //@line 303 "bitwriter.c"
    $66 = ((($65)) + 4|0); //@line 303 "bitwriter.c"
    $67 = HEAP32[$66>>2]|0; //@line 303 "bitwriter.c"
    $68 = $67 & 65280; //@line 303 "bitwriter.c"
    $69 = $68 << 8; //@line 303 "bitwriter.c"
    $70 = $64 | $69; //@line 303 "bitwriter.c"
    $71 = $3; //@line 303 "bitwriter.c"
    $72 = ((($71)) + 4|0); //@line 303 "bitwriter.c"
    $73 = HEAP32[$72>>2]|0; //@line 303 "bitwriter.c"
    $74 = $73 & 255; //@line 303 "bitwriter.c"
    $75 = $74 << 24; //@line 303 "bitwriter.c"
    $76 = $70 | $75; //@line 303 "bitwriter.c"
    $77 = $3; //@line 303 "bitwriter.c"
    $78 = HEAP32[$77>>2]|0; //@line 303 "bitwriter.c"
    $79 = $3; //@line 303 "bitwriter.c"
    $80 = ((($79)) + 12|0); //@line 303 "bitwriter.c"
    $81 = HEAP32[$80>>2]|0; //@line 303 "bitwriter.c"
    $82 = (($81) + 1)|0; //@line 303 "bitwriter.c"
    HEAP32[$80>>2] = $82; //@line 303 "bitwriter.c"
    $83 = (($78) + ($81<<2)|0); //@line 303 "bitwriter.c"
    HEAP32[$83>>2] = $76; //@line 303 "bitwriter.c"
    $84 = $3; //@line 304 "bitwriter.c"
    $85 = ((($84)) + 16|0); //@line 304 "bitwriter.c"
    HEAP32[$85>>2] = 0; //@line 304 "bitwriter.c"
    break;
   }
   $2 = 1; //@line 307 "bitwriter.c"
   $104 = $2; //@line 320 "bitwriter.c"
   STACKTOP = sp;return ($104|0); //@line 320 "bitwriter.c"
  }
 } while(0);
 while(1) {
  $86 = $4; //@line 310 "bitwriter.c"
  $87 = ($86>>>0)>=(32); //@line 310 "bitwriter.c"
  if (!($87)) {
   break;
  }
  $88 = $3; //@line 311 "bitwriter.c"
  $89 = HEAP32[$88>>2]|0; //@line 311 "bitwriter.c"
  $90 = $3; //@line 311 "bitwriter.c"
  $91 = ((($90)) + 12|0); //@line 311 "bitwriter.c"
  $92 = HEAP32[$91>>2]|0; //@line 311 "bitwriter.c"
  $93 = (($92) + 1)|0; //@line 311 "bitwriter.c"
  HEAP32[$91>>2] = $93; //@line 311 "bitwriter.c"
  $94 = (($89) + ($92<<2)|0); //@line 311 "bitwriter.c"
  HEAP32[$94>>2] = 0; //@line 311 "bitwriter.c"
  $95 = $4; //@line 312 "bitwriter.c"
  $96 = (($95) - 32)|0; //@line 312 "bitwriter.c"
  $4 = $96; //@line 312 "bitwriter.c"
 }
 $97 = $4; //@line 315 "bitwriter.c"
 $98 = ($97>>>0)>(0); //@line 315 "bitwriter.c"
 if ($98) {
  $99 = $3; //@line 316 "bitwriter.c"
  $100 = ((($99)) + 4|0); //@line 316 "bitwriter.c"
  HEAP32[$100>>2] = 0; //@line 316 "bitwriter.c"
  $101 = $4; //@line 317 "bitwriter.c"
  $102 = $3; //@line 317 "bitwriter.c"
  $103 = ((($102)) + 16|0); //@line 317 "bitwriter.c"
  HEAP32[$103>>2] = $101; //@line 317 "bitwriter.c"
 }
 $2 = 1; //@line 319 "bitwriter.c"
 $104 = $2; //@line 320 "bitwriter.c"
 STACKTOP = sp;return ($104|0); //@line 320 "bitwriter.c"
}
function _FLAC__bitwriter_write_raw_uint32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6; //@line 366 "bitwriter.c"
 $8 = ($7>>>0)<(32); //@line 366 "bitwriter.c"
 if ($8) {
  $9 = $5; //@line 366 "bitwriter.c"
  $10 = $6; //@line 366 "bitwriter.c"
  $11 = $9 >>> $10; //@line 366 "bitwriter.c"
  $12 = ($11|0)!=(0); //@line 366 "bitwriter.c"
  if ($12) {
   $3 = 0; //@line 367 "bitwriter.c"
   $17 = $3; //@line 370 "bitwriter.c"
   STACKTOP = sp;return ($17|0); //@line 370 "bitwriter.c"
  }
 }
 $13 = $4; //@line 369 "bitwriter.c"
 $14 = $5; //@line 369 "bitwriter.c"
 $15 = $6; //@line 369 "bitwriter.c"
 $16 = (_FLAC__bitwriter_write_raw_uint32_nocheck($13,$14,$15)|0); //@line 369 "bitwriter.c"
 $3 = $16; //@line 369 "bitwriter.c"
 $17 = $3; //@line 370 "bitwriter.c"
 STACKTOP = sp;return ($17|0); //@line 370 "bitwriter.c"
}
function _FLAC__bitwriter_write_raw_uint32_nocheck($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4; //@line 329 "bitwriter.c"
 $9 = ($8|0)==(0|0); //@line 329 "bitwriter.c"
 if (!($9)) {
  $10 = $4; //@line 329 "bitwriter.c"
  $11 = HEAP32[$10>>2]|0; //@line 329 "bitwriter.c"
  $12 = ($11|0)==(0|0); //@line 329 "bitwriter.c"
  if (!($12)) {
   $13 = $6; //@line 332 "bitwriter.c"
   $14 = ($13>>>0)>(32); //@line 332 "bitwriter.c"
   if ($14) {
    $3 = 0; //@line 333 "bitwriter.c"
    $127 = $3; //@line 361 "bitwriter.c"
    STACKTOP = sp;return ($127|0); //@line 361 "bitwriter.c"
   }
   $15 = $6; //@line 335 "bitwriter.c"
   $16 = ($15|0)==(0); //@line 335 "bitwriter.c"
   if ($16) {
    $3 = 1; //@line 336 "bitwriter.c"
    $127 = $3; //@line 361 "bitwriter.c"
    STACKTOP = sp;return ($127|0); //@line 361 "bitwriter.c"
   }
   $17 = $4; //@line 341 "bitwriter.c"
   $18 = ((($17)) + 8|0); //@line 341 "bitwriter.c"
   $19 = HEAP32[$18>>2]|0; //@line 341 "bitwriter.c"
   $20 = $4; //@line 341 "bitwriter.c"
   $21 = ((($20)) + 12|0); //@line 341 "bitwriter.c"
   $22 = HEAP32[$21>>2]|0; //@line 341 "bitwriter.c"
   $23 = $6; //@line 341 "bitwriter.c"
   $24 = (($22) + ($23))|0; //@line 341 "bitwriter.c"
   $25 = ($19>>>0)<=($24>>>0); //@line 341 "bitwriter.c"
   if ($25) {
    $26 = $4; //@line 341 "bitwriter.c"
    $27 = $6; //@line 341 "bitwriter.c"
    $28 = (_bitwriter_grow_($26,$27)|0); //@line 341 "bitwriter.c"
    $29 = ($28|0)!=(0); //@line 341 "bitwriter.c"
    if (!($29)) {
     $3 = 0; //@line 342 "bitwriter.c"
     $127 = $3; //@line 361 "bitwriter.c"
     STACKTOP = sp;return ($127|0); //@line 361 "bitwriter.c"
    }
   }
   $30 = $4; //@line 344 "bitwriter.c"
   $31 = ((($30)) + 16|0); //@line 344 "bitwriter.c"
   $32 = HEAP32[$31>>2]|0; //@line 344 "bitwriter.c"
   $33 = (32 - ($32))|0; //@line 344 "bitwriter.c"
   $7 = $33; //@line 344 "bitwriter.c"
   $34 = $6; //@line 345 "bitwriter.c"
   $35 = $7; //@line 345 "bitwriter.c"
   $36 = ($34>>>0)<($35>>>0); //@line 345 "bitwriter.c"
   do {
    if ($36) {
     $37 = $6; //@line 346 "bitwriter.c"
     $38 = $4; //@line 346 "bitwriter.c"
     $39 = ((($38)) + 4|0); //@line 346 "bitwriter.c"
     $40 = HEAP32[$39>>2]|0; //@line 346 "bitwriter.c"
     $41 = $40 << $37; //@line 346 "bitwriter.c"
     HEAP32[$39>>2] = $41; //@line 346 "bitwriter.c"
     $42 = $5; //@line 347 "bitwriter.c"
     $43 = $4; //@line 347 "bitwriter.c"
     $44 = ((($43)) + 4|0); //@line 347 "bitwriter.c"
     $45 = HEAP32[$44>>2]|0; //@line 347 "bitwriter.c"
     $46 = $45 | $42; //@line 347 "bitwriter.c"
     HEAP32[$44>>2] = $46; //@line 347 "bitwriter.c"
     $47 = $6; //@line 348 "bitwriter.c"
     $48 = $4; //@line 348 "bitwriter.c"
     $49 = ((($48)) + 16|0); //@line 348 "bitwriter.c"
     $50 = HEAP32[$49>>2]|0; //@line 348 "bitwriter.c"
     $51 = (($50) + ($47))|0; //@line 348 "bitwriter.c"
     HEAP32[$49>>2] = $51; //@line 348 "bitwriter.c"
    } else {
     $52 = $4; //@line 350 "bitwriter.c"
     $53 = ((($52)) + 16|0); //@line 350 "bitwriter.c"
     $54 = HEAP32[$53>>2]|0; //@line 350 "bitwriter.c"
     $55 = ($54|0)!=(0); //@line 350 "bitwriter.c"
     if ($55) {
      $56 = $7; //@line 351 "bitwriter.c"
      $57 = $4; //@line 351 "bitwriter.c"
      $58 = ((($57)) + 4|0); //@line 351 "bitwriter.c"
      $59 = HEAP32[$58>>2]|0; //@line 351 "bitwriter.c"
      $60 = $59 << $56; //@line 351 "bitwriter.c"
      HEAP32[$58>>2] = $60; //@line 351 "bitwriter.c"
      $61 = $5; //@line 352 "bitwriter.c"
      $62 = $6; //@line 352 "bitwriter.c"
      $63 = $7; //@line 352 "bitwriter.c"
      $64 = (($62) - ($63))|0; //@line 352 "bitwriter.c"
      $65 = $4; //@line 352 "bitwriter.c"
      $66 = ((($65)) + 16|0); //@line 352 "bitwriter.c"
      HEAP32[$66>>2] = $64; //@line 352 "bitwriter.c"
      $67 = $61 >>> $64; //@line 352 "bitwriter.c"
      $68 = $4; //@line 352 "bitwriter.c"
      $69 = ((($68)) + 4|0); //@line 352 "bitwriter.c"
      $70 = HEAP32[$69>>2]|0; //@line 352 "bitwriter.c"
      $71 = $70 | $67; //@line 352 "bitwriter.c"
      HEAP32[$69>>2] = $71; //@line 352 "bitwriter.c"
      $72 = $4; //@line 353 "bitwriter.c"
      $73 = ((($72)) + 4|0); //@line 353 "bitwriter.c"
      $74 = HEAP32[$73>>2]|0; //@line 353 "bitwriter.c"
      $75 = $74 >>> 24; //@line 353 "bitwriter.c"
      $76 = $75 & 255; //@line 353 "bitwriter.c"
      $77 = $4; //@line 353 "bitwriter.c"
      $78 = ((($77)) + 4|0); //@line 353 "bitwriter.c"
      $79 = HEAP32[$78>>2]|0; //@line 353 "bitwriter.c"
      $80 = $79 >>> 8; //@line 353 "bitwriter.c"
      $81 = $80 & 65280; //@line 353 "bitwriter.c"
      $82 = $76 | $81; //@line 353 "bitwriter.c"
      $83 = $4; //@line 353 "bitwriter.c"
      $84 = ((($83)) + 4|0); //@line 353 "bitwriter.c"
      $85 = HEAP32[$84>>2]|0; //@line 353 "bitwriter.c"
      $86 = $85 & 65280; //@line 353 "bitwriter.c"
      $87 = $86 << 8; //@line 353 "bitwriter.c"
      $88 = $82 | $87; //@line 353 "bitwriter.c"
      $89 = $4; //@line 353 "bitwriter.c"
      $90 = ((($89)) + 4|0); //@line 353 "bitwriter.c"
      $91 = HEAP32[$90>>2]|0; //@line 353 "bitwriter.c"
      $92 = $91 & 255; //@line 353 "bitwriter.c"
      $93 = $92 << 24; //@line 353 "bitwriter.c"
      $94 = $88 | $93; //@line 353 "bitwriter.c"
      $95 = $4; //@line 353 "bitwriter.c"
      $96 = HEAP32[$95>>2]|0; //@line 353 "bitwriter.c"
      $97 = $4; //@line 353 "bitwriter.c"
      $98 = ((($97)) + 12|0); //@line 353 "bitwriter.c"
      $99 = HEAP32[$98>>2]|0; //@line 353 "bitwriter.c"
      $100 = (($99) + 1)|0; //@line 353 "bitwriter.c"
      HEAP32[$98>>2] = $100; //@line 353 "bitwriter.c"
      $101 = (($96) + ($99<<2)|0); //@line 353 "bitwriter.c"
      HEAP32[$101>>2] = $94; //@line 353 "bitwriter.c"
      $102 = $5; //@line 354 "bitwriter.c"
      $103 = $4; //@line 354 "bitwriter.c"
      $104 = ((($103)) + 4|0); //@line 354 "bitwriter.c"
      HEAP32[$104>>2] = $102; //@line 354 "bitwriter.c"
      break;
     } else {
      $105 = $5; //@line 357 "bitwriter.c"
      $106 = $105 >>> 24; //@line 357 "bitwriter.c"
      $107 = $106 & 255; //@line 357 "bitwriter.c"
      $108 = $5; //@line 357 "bitwriter.c"
      $109 = $108 >>> 8; //@line 357 "bitwriter.c"
      $110 = $109 & 65280; //@line 357 "bitwriter.c"
      $111 = $107 | $110; //@line 357 "bitwriter.c"
      $112 = $5; //@line 357 "bitwriter.c"
      $113 = $112 & 65280; //@line 357 "bitwriter.c"
      $114 = $113 << 8; //@line 357 "bitwriter.c"
      $115 = $111 | $114; //@line 357 "bitwriter.c"
      $116 = $5; //@line 357 "bitwriter.c"
      $117 = $116 & 255; //@line 357 "bitwriter.c"
      $118 = $117 << 24; //@line 357 "bitwriter.c"
      $119 = $115 | $118; //@line 357 "bitwriter.c"
      $120 = $4; //@line 357 "bitwriter.c"
      $121 = HEAP32[$120>>2]|0; //@line 357 "bitwriter.c"
      $122 = $4; //@line 357 "bitwriter.c"
      $123 = ((($122)) + 12|0); //@line 357 "bitwriter.c"
      $124 = HEAP32[$123>>2]|0; //@line 357 "bitwriter.c"
      $125 = (($124) + 1)|0; //@line 357 "bitwriter.c"
      HEAP32[$123>>2] = $125; //@line 357 "bitwriter.c"
      $126 = (($121) + ($124<<2)|0); //@line 357 "bitwriter.c"
      HEAP32[$126>>2] = $119; //@line 357 "bitwriter.c"
      break;
     }
    }
   } while(0);
   $3 = 1; //@line 360 "bitwriter.c"
   $127 = $3; //@line 361 "bitwriter.c"
   STACKTOP = sp;return ($127|0); //@line 361 "bitwriter.c"
  }
 }
 $3 = 0; //@line 330 "bitwriter.c"
 $127 = $3; //@line 361 "bitwriter.c"
 STACKTOP = sp;return ($127|0); //@line 361 "bitwriter.c"
}
function _FLAC__bitwriter_write_raw_int32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5; //@line 375 "bitwriter.c"
 $7 = ($6>>>0)<(32); //@line 375 "bitwriter.c"
 if ($7) {
  $8 = $5; //@line 376 "bitwriter.c"
  $9 = -1 << $8; //@line 376 "bitwriter.c"
  $10 = $9 ^ -1; //@line 376 "bitwriter.c"
  $11 = $4; //@line 376 "bitwriter.c"
  $12 = $11 & $10; //@line 376 "bitwriter.c"
  $4 = $12; //@line 376 "bitwriter.c"
 }
 $13 = $3; //@line 378 "bitwriter.c"
 $14 = $4; //@line 378 "bitwriter.c"
 $15 = $5; //@line 378 "bitwriter.c"
 $16 = (_FLAC__bitwriter_write_raw_uint32_nocheck($13,$14,$15)|0); //@line 378 "bitwriter.c"
 STACKTOP = sp;return ($16|0); //@line 378 "bitwriter.c"
}
function _FLAC__bitwriter_write_raw_uint64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $5 = $0;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $7 = $3;
 $12 = $7; //@line 384 "bitwriter.c"
 $13 = ($12>>>0)>(32); //@line 384 "bitwriter.c"
 $14 = $5;
 $15 = $6;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 if (!($13)) {
  $36 = $7; //@line 390 "bitwriter.c"
  $37 = (_FLAC__bitwriter_write_raw_uint32($14,$17,$36)|0); //@line 390 "bitwriter.c"
  $4 = $37; //@line 390 "bitwriter.c"
  $38 = $4; //@line 391 "bitwriter.c"
  STACKTOP = sp;return ($38|0); //@line 391 "bitwriter.c"
 }
 $21 = $7; //@line 386 "bitwriter.c"
 $22 = (($21) - 32)|0; //@line 386 "bitwriter.c"
 $23 = (_FLAC__bitwriter_write_raw_uint32($14,$20,$22)|0); //@line 386 "bitwriter.c"
 $24 = ($23|0)!=(0); //@line 386 "bitwriter.c"
 if ($24) {
  $25 = $5; //@line 387 "bitwriter.c"
  $26 = $6; //@line 387 "bitwriter.c"
  $27 = $26; //@line 387 "bitwriter.c"
  $28 = HEAP32[$27>>2]|0; //@line 387 "bitwriter.c"
  $29 = (($26) + 4)|0; //@line 387 "bitwriter.c"
  $30 = $29; //@line 387 "bitwriter.c"
  $31 = HEAP32[$30>>2]|0; //@line 387 "bitwriter.c"
  $32 = (_FLAC__bitwriter_write_raw_uint32_nocheck($25,$28,32)|0); //@line 387 "bitwriter.c"
  $33 = ($32|0)!=(0); //@line 386 "bitwriter.c"
  $35 = $33;
 } else {
  $35 = 0;
 }
 $34 = $35&1; //@line 386 "bitwriter.c"
 $4 = $34; //@line 385 "bitwriter.c"
 $38 = $4; //@line 391 "bitwriter.c"
 STACKTOP = sp;return ($38|0); //@line 391 "bitwriter.c"
}
function _FLAC__bitwriter_write_raw_uint32_little_endian($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 397 "bitwriter.c"
 $6 = $4; //@line 397 "bitwriter.c"
 $7 = $6 & 255; //@line 397 "bitwriter.c"
 $8 = (_FLAC__bitwriter_write_raw_uint32_nocheck($5,$7,8)|0); //@line 397 "bitwriter.c"
 $9 = ($8|0)!=(0); //@line 397 "bitwriter.c"
 do {
  if ($9) {
   $10 = $3; //@line 399 "bitwriter.c"
   $11 = $4; //@line 399 "bitwriter.c"
   $12 = $11 >>> 8; //@line 399 "bitwriter.c"
   $13 = $12 & 255; //@line 399 "bitwriter.c"
   $14 = (_FLAC__bitwriter_write_raw_uint32_nocheck($10,$13,8)|0); //@line 399 "bitwriter.c"
   $15 = ($14|0)!=(0); //@line 399 "bitwriter.c"
   if (!($15)) {
    $2 = 0; //@line 400 "bitwriter.c"
    break;
   }
   $16 = $3; //@line 401 "bitwriter.c"
   $17 = $4; //@line 401 "bitwriter.c"
   $18 = $17 >>> 16; //@line 401 "bitwriter.c"
   $19 = $18 & 255; //@line 401 "bitwriter.c"
   $20 = (_FLAC__bitwriter_write_raw_uint32_nocheck($16,$19,8)|0); //@line 401 "bitwriter.c"
   $21 = ($20|0)!=(0); //@line 401 "bitwriter.c"
   if (!($21)) {
    $2 = 0; //@line 402 "bitwriter.c"
    break;
   }
   $22 = $3; //@line 403 "bitwriter.c"
   $23 = $4; //@line 403 "bitwriter.c"
   $24 = $23 >>> 24; //@line 403 "bitwriter.c"
   $25 = (_FLAC__bitwriter_write_raw_uint32_nocheck($22,$24,8)|0); //@line 403 "bitwriter.c"
   $26 = ($25|0)!=(0); //@line 403 "bitwriter.c"
   if ($26) {
    $2 = 1; //@line 406 "bitwriter.c"
    break;
   } else {
    $2 = 0; //@line 404 "bitwriter.c"
    break;
   }
  } else {
   $2 = 0; //@line 398 "bitwriter.c"
  }
 } while(0);
 $27 = $2; //@line 407 "bitwriter.c"
 STACKTOP = sp;return ($27|0); //@line 407 "bitwriter.c"
}
function _FLAC__bitwriter_write_byte_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0; //@line 414 "bitwriter.c"
 while(1) {
  $8 = $7; //@line 414 "bitwriter.c"
  $9 = $6; //@line 414 "bitwriter.c"
  $10 = ($8>>>0)<($9>>>0); //@line 414 "bitwriter.c"
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $4; //@line 415 "bitwriter.c"
  $12 = $5; //@line 415 "bitwriter.c"
  $13 = $7; //@line 415 "bitwriter.c"
  $14 = (($12) + ($13)|0); //@line 415 "bitwriter.c"
  $15 = HEAP8[$14>>0]|0; //@line 415 "bitwriter.c"
  $16 = $15&255; //@line 415 "bitwriter.c"
  $17 = (_FLAC__bitwriter_write_raw_uint32_nocheck($11,$16,8)|0); //@line 415 "bitwriter.c"
  $18 = ($17|0)!=(0); //@line 415 "bitwriter.c"
  if (!($18)) {
   label = 4;
   break;
  }
  $19 = $7; //@line 414 "bitwriter.c"
  $20 = (($19) + 1)|0; //@line 414 "bitwriter.c"
  $7 = $20; //@line 414 "bitwriter.c"
 }
 if ((label|0) == 4) {
  $3 = 0; //@line 416 "bitwriter.c"
  $21 = $3; //@line 420 "bitwriter.c"
  STACKTOP = sp;return ($21|0); //@line 420 "bitwriter.c"
 }
 else if ((label|0) == 6) {
  $3 = 1; //@line 419 "bitwriter.c"
  $21 = $3; //@line 420 "bitwriter.c"
  STACKTOP = sp;return ($21|0); //@line 420 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_unary_unsigned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4; //@line 424 "bitwriter.c"
 $6 = ($5>>>0)<(32); //@line 424 "bitwriter.c"
 $7 = $3;
 $8 = $4;
 if ($6) {
  $9 = (($8) + 1)|0; //@line 425 "bitwriter.c"
  $4 = $9; //@line 425 "bitwriter.c"
  $10 = (_FLAC__bitwriter_write_raw_uint32_nocheck($7,1,$9)|0); //@line 425 "bitwriter.c"
  $2 = $10; //@line 425 "bitwriter.c"
  $18 = $2; //@line 430 "bitwriter.c"
  STACKTOP = sp;return ($18|0); //@line 430 "bitwriter.c"
 }
 $11 = (_FLAC__bitwriter_write_zeroes($7,$8)|0); //@line 428 "bitwriter.c"
 $12 = ($11|0)!=(0); //@line 428 "bitwriter.c"
 if ($12) {
  $13 = $3; //@line 429 "bitwriter.c"
  $14 = (_FLAC__bitwriter_write_raw_uint32_nocheck($13,1,1)|0); //@line 429 "bitwriter.c"
  $15 = ($14|0)!=(0); //@line 428 "bitwriter.c"
  $17 = $15;
 } else {
  $17 = 0;
 }
 $16 = $17&1; //@line 428 "bitwriter.c"
 $2 = $16; //@line 427 "bitwriter.c"
 $18 = $2; //@line 430 "bitwriter.c"
 STACKTOP = sp;return ($18|0); //@line 430 "bitwriter.c"
}
function _FLAC__bitwriter_write_rice_signed_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $8; //@line 540 "bitwriter.c"
 $17 = -1 << $16; //@line 540 "bitwriter.c"
 $9 = $17; //@line 540 "bitwriter.c"
 $18 = $8; //@line 541 "bitwriter.c"
 $19 = (31 - ($18))|0; //@line 541 "bitwriter.c"
 $20 = -1 >>> $19; //@line 541 "bitwriter.c"
 $10 = $20; //@line 541 "bitwriter.c"
 $21 = $8; //@line 544 "bitwriter.c"
 $22 = (1 + ($21))|0; //@line 544 "bitwriter.c"
 $13 = $22; //@line 544 "bitwriter.c"
 L1: while(1) {
  $23 = $7; //@line 553 "bitwriter.c"
  $24 = ($23|0)!=(0); //@line 553 "bitwriter.c"
  if (!($24)) {
   label = 23;
   break;
  }
  $25 = $6; //@line 555 "bitwriter.c"
  $26 = HEAP32[$25>>2]|0; //@line 555 "bitwriter.c"
  $11 = $26; //@line 555 "bitwriter.c"
  $27 = $11; //@line 556 "bitwriter.c"
  $28 = $27 << 1; //@line 556 "bitwriter.c"
  $11 = $28; //@line 556 "bitwriter.c"
  $29 = $6; //@line 557 "bitwriter.c"
  $30 = HEAP32[$29>>2]|0; //@line 557 "bitwriter.c"
  $31 = $30 >> 31; //@line 557 "bitwriter.c"
  $32 = $11; //@line 557 "bitwriter.c"
  $33 = $32 ^ $31; //@line 557 "bitwriter.c"
  $11 = $33; //@line 557 "bitwriter.c"
  $34 = $11; //@line 559 "bitwriter.c"
  $35 = $8; //@line 559 "bitwriter.c"
  $36 = $34 >>> $35; //@line 559 "bitwriter.c"
  $14 = $36; //@line 559 "bitwriter.c"
  $37 = $13; //@line 560 "bitwriter.c"
  $38 = $14; //@line 560 "bitwriter.c"
  $39 = (($37) + ($38))|0; //@line 560 "bitwriter.c"
  $15 = $39; //@line 560 "bitwriter.c"
  $40 = $5; //@line 562 "bitwriter.c"
  $41 = ((($40)) + 16|0); //@line 562 "bitwriter.c"
  $42 = HEAP32[$41>>2]|0; //@line 562 "bitwriter.c"
  $43 = ($42|0)!=(0); //@line 562 "bitwriter.c"
  if ($43) {
   $44 = $5; //@line 562 "bitwriter.c"
   $45 = ((($44)) + 16|0); //@line 562 "bitwriter.c"
   $46 = HEAP32[$45>>2]|0; //@line 562 "bitwriter.c"
   $47 = $15; //@line 562 "bitwriter.c"
   $48 = (($46) + ($47))|0; //@line 562 "bitwriter.c"
   $49 = ($48>>>0)<(32); //@line 562 "bitwriter.c"
   if ($49) {
    $50 = $15; //@line 564 "bitwriter.c"
    $51 = $5; //@line 564 "bitwriter.c"
    $52 = ((($51)) + 16|0); //@line 564 "bitwriter.c"
    $53 = HEAP32[$52>>2]|0; //@line 564 "bitwriter.c"
    $54 = (($53) + ($50))|0; //@line 564 "bitwriter.c"
    HEAP32[$52>>2] = $54; //@line 564 "bitwriter.c"
    $55 = $9; //@line 565 "bitwriter.c"
    $56 = $11; //@line 565 "bitwriter.c"
    $57 = $56 | $55; //@line 565 "bitwriter.c"
    $11 = $57; //@line 565 "bitwriter.c"
    $58 = $10; //@line 566 "bitwriter.c"
    $59 = $11; //@line 566 "bitwriter.c"
    $60 = $59 & $58; //@line 566 "bitwriter.c"
    $11 = $60; //@line 566 "bitwriter.c"
    $61 = $15; //@line 567 "bitwriter.c"
    $62 = $5; //@line 567 "bitwriter.c"
    $63 = ((($62)) + 4|0); //@line 567 "bitwriter.c"
    $64 = HEAP32[$63>>2]|0; //@line 567 "bitwriter.c"
    $65 = $64 << $61; //@line 567 "bitwriter.c"
    HEAP32[$63>>2] = $65; //@line 567 "bitwriter.c"
    $66 = $11; //@line 568 "bitwriter.c"
    $67 = $5; //@line 568 "bitwriter.c"
    $68 = ((($67)) + 4|0); //@line 568 "bitwriter.c"
    $69 = HEAP32[$68>>2]|0; //@line 568 "bitwriter.c"
    $70 = $69 | $66; //@line 568 "bitwriter.c"
    HEAP32[$68>>2] = $70; //@line 568 "bitwriter.c"
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $71 = $5; //@line 573 "bitwriter.c"
    $72 = ((($71)) + 8|0); //@line 573 "bitwriter.c"
    $73 = HEAP32[$72>>2]|0; //@line 573 "bitwriter.c"
    $74 = $5; //@line 573 "bitwriter.c"
    $75 = ((($74)) + 12|0); //@line 573 "bitwriter.c"
    $76 = HEAP32[$75>>2]|0; //@line 573 "bitwriter.c"
    $77 = $5; //@line 573 "bitwriter.c"
    $78 = ((($77)) + 16|0); //@line 573 "bitwriter.c"
    $79 = HEAP32[$78>>2]|0; //@line 573 "bitwriter.c"
    $80 = (($76) + ($79))|0; //@line 573 "bitwriter.c"
    $81 = $14; //@line 573 "bitwriter.c"
    $82 = (($80) + ($81))|0; //@line 573 "bitwriter.c"
    $83 = (($82) + 1)|0; //@line 573 "bitwriter.c"
    $84 = ($73>>>0)<=($83>>>0); //@line 573 "bitwriter.c"
    if ($84) {
     $85 = $5; //@line 573 "bitwriter.c"
     $86 = $15; //@line 573 "bitwriter.c"
     $87 = (_bitwriter_grow_($85,$86)|0); //@line 573 "bitwriter.c"
     $88 = ($87|0)!=(0); //@line 573 "bitwriter.c"
     if (!($88)) {
      label = 8;
      break L1;
     }
    }
    $89 = $14; //@line 576 "bitwriter.c"
    $90 = ($89|0)!=(0); //@line 576 "bitwriter.c"
    L12: do {
     if ($90) {
      $91 = $5; //@line 578 "bitwriter.c"
      $92 = ((($91)) + 16|0); //@line 578 "bitwriter.c"
      $93 = HEAP32[$92>>2]|0; //@line 578 "bitwriter.c"
      $94 = ($93|0)!=(0); //@line 578 "bitwriter.c"
      do {
       if ($94) {
        $95 = $5; //@line 579 "bitwriter.c"
        $96 = ((($95)) + 16|0); //@line 579 "bitwriter.c"
        $97 = HEAP32[$96>>2]|0; //@line 579 "bitwriter.c"
        $98 = (32 - ($97))|0; //@line 579 "bitwriter.c"
        $12 = $98; //@line 579 "bitwriter.c"
        $99 = $14; //@line 580 "bitwriter.c"
        $100 = $12; //@line 580 "bitwriter.c"
        $101 = ($99>>>0)<($100>>>0); //@line 580 "bitwriter.c"
        if ($101) {
         $102 = $14; //@line 581 "bitwriter.c"
         $103 = $5; //@line 581 "bitwriter.c"
         $104 = ((($103)) + 4|0); //@line 581 "bitwriter.c"
         $105 = HEAP32[$104>>2]|0; //@line 581 "bitwriter.c"
         $106 = $105 << $102; //@line 581 "bitwriter.c"
         HEAP32[$104>>2] = $106; //@line 581 "bitwriter.c"
         $107 = $14; //@line 582 "bitwriter.c"
         $108 = $5; //@line 582 "bitwriter.c"
         $109 = ((($108)) + 16|0); //@line 582 "bitwriter.c"
         $110 = HEAP32[$109>>2]|0; //@line 582 "bitwriter.c"
         $111 = (($110) + ($107))|0; //@line 582 "bitwriter.c"
         HEAP32[$109>>2] = $111; //@line 582 "bitwriter.c"
         break L12;
        } else {
         $112 = $12; //@line 586 "bitwriter.c"
         $113 = $5; //@line 586 "bitwriter.c"
         $114 = ((($113)) + 4|0); //@line 586 "bitwriter.c"
         $115 = HEAP32[$114>>2]|0; //@line 586 "bitwriter.c"
         $116 = $115 << $112; //@line 586 "bitwriter.c"
         HEAP32[$114>>2] = $116; //@line 586 "bitwriter.c"
         $117 = $12; //@line 587 "bitwriter.c"
         $118 = $14; //@line 587 "bitwriter.c"
         $119 = (($118) - ($117))|0; //@line 587 "bitwriter.c"
         $14 = $119; //@line 587 "bitwriter.c"
         $120 = $5; //@line 588 "bitwriter.c"
         $121 = ((($120)) + 4|0); //@line 588 "bitwriter.c"
         $122 = HEAP32[$121>>2]|0; //@line 588 "bitwriter.c"
         $123 = $122 >>> 24; //@line 588 "bitwriter.c"
         $124 = $123 & 255; //@line 588 "bitwriter.c"
         $125 = $5; //@line 588 "bitwriter.c"
         $126 = ((($125)) + 4|0); //@line 588 "bitwriter.c"
         $127 = HEAP32[$126>>2]|0; //@line 588 "bitwriter.c"
         $128 = $127 >>> 8; //@line 588 "bitwriter.c"
         $129 = $128 & 65280; //@line 588 "bitwriter.c"
         $130 = $124 | $129; //@line 588 "bitwriter.c"
         $131 = $5; //@line 588 "bitwriter.c"
         $132 = ((($131)) + 4|0); //@line 588 "bitwriter.c"
         $133 = HEAP32[$132>>2]|0; //@line 588 "bitwriter.c"
         $134 = $133 & 65280; //@line 588 "bitwriter.c"
         $135 = $134 << 8; //@line 588 "bitwriter.c"
         $136 = $130 | $135; //@line 588 "bitwriter.c"
         $137 = $5; //@line 588 "bitwriter.c"
         $138 = ((($137)) + 4|0); //@line 588 "bitwriter.c"
         $139 = HEAP32[$138>>2]|0; //@line 588 "bitwriter.c"
         $140 = $139 & 255; //@line 588 "bitwriter.c"
         $141 = $140 << 24; //@line 588 "bitwriter.c"
         $142 = $136 | $141; //@line 588 "bitwriter.c"
         $143 = $5; //@line 588 "bitwriter.c"
         $144 = HEAP32[$143>>2]|0; //@line 588 "bitwriter.c"
         $145 = $5; //@line 588 "bitwriter.c"
         $146 = ((($145)) + 12|0); //@line 588 "bitwriter.c"
         $147 = HEAP32[$146>>2]|0; //@line 588 "bitwriter.c"
         $148 = (($147) + 1)|0; //@line 588 "bitwriter.c"
         HEAP32[$146>>2] = $148; //@line 588 "bitwriter.c"
         $149 = (($144) + ($147<<2)|0); //@line 588 "bitwriter.c"
         HEAP32[$149>>2] = $142; //@line 588 "bitwriter.c"
         $150 = $5; //@line 589 "bitwriter.c"
         $151 = ((($150)) + 16|0); //@line 589 "bitwriter.c"
         HEAP32[$151>>2] = 0; //@line 589 "bitwriter.c"
         break;
        }
       }
      } while(0);
      while(1) {
       $152 = $14; //@line 593 "bitwriter.c"
       $153 = ($152>>>0)>=(32); //@line 593 "bitwriter.c"
       if (!($153)) {
        break;
       }
       $154 = $5; //@line 594 "bitwriter.c"
       $155 = HEAP32[$154>>2]|0; //@line 594 "bitwriter.c"
       $156 = $5; //@line 594 "bitwriter.c"
       $157 = ((($156)) + 12|0); //@line 594 "bitwriter.c"
       $158 = HEAP32[$157>>2]|0; //@line 594 "bitwriter.c"
       $159 = (($158) + 1)|0; //@line 594 "bitwriter.c"
       HEAP32[$157>>2] = $159; //@line 594 "bitwriter.c"
       $160 = (($155) + ($158<<2)|0); //@line 594 "bitwriter.c"
       HEAP32[$160>>2] = 0; //@line 594 "bitwriter.c"
       $161 = $14; //@line 595 "bitwriter.c"
       $162 = (($161) - 32)|0; //@line 595 "bitwriter.c"
       $14 = $162; //@line 595 "bitwriter.c"
      }
      $163 = $14; //@line 598 "bitwriter.c"
      $164 = ($163>>>0)>(0); //@line 598 "bitwriter.c"
      if ($164) {
       $165 = $5; //@line 599 "bitwriter.c"
       $166 = ((($165)) + 4|0); //@line 599 "bitwriter.c"
       HEAP32[$166>>2] = 0; //@line 599 "bitwriter.c"
       $167 = $14; //@line 600 "bitwriter.c"
       $168 = $5; //@line 600 "bitwriter.c"
       $169 = ((($168)) + 16|0); //@line 600 "bitwriter.c"
       HEAP32[$169>>2] = $167; //@line 600 "bitwriter.c"
      }
     }
    } while(0);
    $170 = $9; //@line 604 "bitwriter.c"
    $171 = $11; //@line 604 "bitwriter.c"
    $172 = $171 | $170; //@line 604 "bitwriter.c"
    $11 = $172; //@line 604 "bitwriter.c"
    $173 = $10; //@line 605 "bitwriter.c"
    $174 = $11; //@line 605 "bitwriter.c"
    $175 = $174 & $173; //@line 605 "bitwriter.c"
    $11 = $175; //@line 605 "bitwriter.c"
    $176 = $5; //@line 607 "bitwriter.c"
    $177 = ((($176)) + 16|0); //@line 607 "bitwriter.c"
    $178 = HEAP32[$177>>2]|0; //@line 607 "bitwriter.c"
    $179 = (32 - ($178))|0; //@line 607 "bitwriter.c"
    $12 = $179; //@line 607 "bitwriter.c"
    $180 = $13; //@line 608 "bitwriter.c"
    $181 = $12; //@line 608 "bitwriter.c"
    $182 = ($180>>>0)<($181>>>0); //@line 608 "bitwriter.c"
    if ($182) {
     $183 = $13; //@line 609 "bitwriter.c"
     $184 = $5; //@line 609 "bitwriter.c"
     $185 = ((($184)) + 4|0); //@line 609 "bitwriter.c"
     $186 = HEAP32[$185>>2]|0; //@line 609 "bitwriter.c"
     $187 = $186 << $183; //@line 609 "bitwriter.c"
     HEAP32[$185>>2] = $187; //@line 609 "bitwriter.c"
     $188 = $11; //@line 610 "bitwriter.c"
     $189 = $5; //@line 610 "bitwriter.c"
     $190 = ((($189)) + 4|0); //@line 610 "bitwriter.c"
     $191 = HEAP32[$190>>2]|0; //@line 610 "bitwriter.c"
     $192 = $191 | $188; //@line 610 "bitwriter.c"
     HEAP32[$190>>2] = $192; //@line 610 "bitwriter.c"
     $193 = $13; //@line 611 "bitwriter.c"
     $194 = $5; //@line 611 "bitwriter.c"
     $195 = ((($194)) + 16|0); //@line 611 "bitwriter.c"
     $196 = HEAP32[$195>>2]|0; //@line 611 "bitwriter.c"
     $197 = (($196) + ($193))|0; //@line 611 "bitwriter.c"
     HEAP32[$195>>2] = $197; //@line 611 "bitwriter.c"
     break;
    } else {
     $198 = $12; //@line 620 "bitwriter.c"
     $199 = $5; //@line 620 "bitwriter.c"
     $200 = ((($199)) + 4|0); //@line 620 "bitwriter.c"
     $201 = HEAP32[$200>>2]|0; //@line 620 "bitwriter.c"
     $202 = $201 << $198; //@line 620 "bitwriter.c"
     HEAP32[$200>>2] = $202; //@line 620 "bitwriter.c"
     $203 = $11; //@line 621 "bitwriter.c"
     $204 = $13; //@line 621 "bitwriter.c"
     $205 = $12; //@line 621 "bitwriter.c"
     $206 = (($204) - ($205))|0; //@line 621 "bitwriter.c"
     $207 = $5; //@line 621 "bitwriter.c"
     $208 = ((($207)) + 16|0); //@line 621 "bitwriter.c"
     HEAP32[$208>>2] = $206; //@line 621 "bitwriter.c"
     $209 = $203 >>> $206; //@line 621 "bitwriter.c"
     $210 = $5; //@line 621 "bitwriter.c"
     $211 = ((($210)) + 4|0); //@line 621 "bitwriter.c"
     $212 = HEAP32[$211>>2]|0; //@line 621 "bitwriter.c"
     $213 = $212 | $209; //@line 621 "bitwriter.c"
     HEAP32[$211>>2] = $213; //@line 621 "bitwriter.c"
     $214 = $5; //@line 622 "bitwriter.c"
     $215 = ((($214)) + 4|0); //@line 622 "bitwriter.c"
     $216 = HEAP32[$215>>2]|0; //@line 622 "bitwriter.c"
     $217 = $216 >>> 24; //@line 622 "bitwriter.c"
     $218 = $217 & 255; //@line 622 "bitwriter.c"
     $219 = $5; //@line 622 "bitwriter.c"
     $220 = ((($219)) + 4|0); //@line 622 "bitwriter.c"
     $221 = HEAP32[$220>>2]|0; //@line 622 "bitwriter.c"
     $222 = $221 >>> 8; //@line 622 "bitwriter.c"
     $223 = $222 & 65280; //@line 622 "bitwriter.c"
     $224 = $218 | $223; //@line 622 "bitwriter.c"
     $225 = $5; //@line 622 "bitwriter.c"
     $226 = ((($225)) + 4|0); //@line 622 "bitwriter.c"
     $227 = HEAP32[$226>>2]|0; //@line 622 "bitwriter.c"
     $228 = $227 & 65280; //@line 622 "bitwriter.c"
     $229 = $228 << 8; //@line 622 "bitwriter.c"
     $230 = $224 | $229; //@line 622 "bitwriter.c"
     $231 = $5; //@line 622 "bitwriter.c"
     $232 = ((($231)) + 4|0); //@line 622 "bitwriter.c"
     $233 = HEAP32[$232>>2]|0; //@line 622 "bitwriter.c"
     $234 = $233 & 255; //@line 622 "bitwriter.c"
     $235 = $234 << 24; //@line 622 "bitwriter.c"
     $236 = $230 | $235; //@line 622 "bitwriter.c"
     $237 = $5; //@line 622 "bitwriter.c"
     $238 = HEAP32[$237>>2]|0; //@line 622 "bitwriter.c"
     $239 = $5; //@line 622 "bitwriter.c"
     $240 = ((($239)) + 12|0); //@line 622 "bitwriter.c"
     $241 = HEAP32[$240>>2]|0; //@line 622 "bitwriter.c"
     $242 = (($241) + 1)|0; //@line 622 "bitwriter.c"
     HEAP32[$240>>2] = $242; //@line 622 "bitwriter.c"
     $243 = (($238) + ($241<<2)|0); //@line 622 "bitwriter.c"
     HEAP32[$243>>2] = $236; //@line 622 "bitwriter.c"
     $244 = $11; //@line 623 "bitwriter.c"
     $245 = $5; //@line 623 "bitwriter.c"
     $246 = ((($245)) + 4|0); //@line 623 "bitwriter.c"
     HEAP32[$246>>2] = $244; //@line 623 "bitwriter.c"
     break;
    }
   }
  } while(0);
  $247 = $6; //@line 626 "bitwriter.c"
  $248 = ((($247)) + 4|0); //@line 626 "bitwriter.c"
  $6 = $248; //@line 626 "bitwriter.c"
  $249 = $7; //@line 627 "bitwriter.c"
  $250 = (($249) + -1)|0; //@line 627 "bitwriter.c"
  $7 = $250; //@line 627 "bitwriter.c"
 }
 if ((label|0) == 8) {
  $4 = 0; //@line 574 "bitwriter.c"
  $251 = $4; //@line 630 "bitwriter.c"
  STACKTOP = sp;return ($251|0); //@line 630 "bitwriter.c"
 }
 else if ((label|0) == 23) {
  $4 = 1; //@line 629 "bitwriter.c"
  $251 = $4; //@line 630 "bitwriter.c"
  STACKTOP = sp;return ($251|0); //@line 630 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__bitwriter_write_utf8_uint32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 1; //@line 758 "bitwriter.c"
 $6 = $4; //@line 763 "bitwriter.c"
 $7 = $6 & -2147483648; //@line 763 "bitwriter.c"
 $8 = ($7|0)!=(0); //@line 763 "bitwriter.c"
 if ($8) {
  $2 = 0; //@line 764 "bitwriter.c"
  $171 = $2; //@line 801 "bitwriter.c"
  STACKTOP = sp;return ($171|0); //@line 801 "bitwriter.c"
 }
 $9 = $4; //@line 766 "bitwriter.c"
 $10 = ($9>>>0)<(128); //@line 766 "bitwriter.c"
 if ($10) {
  $11 = $3; //@line 767 "bitwriter.c"
  $12 = $4; //@line 767 "bitwriter.c"
  $13 = (_FLAC__bitwriter_write_raw_uint32_nocheck($11,$12,8)|0); //@line 767 "bitwriter.c"
  $2 = $13; //@line 767 "bitwriter.c"
  $171 = $2; //@line 801 "bitwriter.c"
  STACKTOP = sp;return ($171|0); //@line 801 "bitwriter.c"
 }
 $14 = $4; //@line 769 "bitwriter.c"
 $15 = ($14>>>0)<(2048); //@line 769 "bitwriter.c"
 do {
  if ($15) {
   $16 = $3; //@line 770 "bitwriter.c"
   $17 = $4; //@line 770 "bitwriter.c"
   $18 = $17 >>> 6; //@line 770 "bitwriter.c"
   $19 = 192 | $18; //@line 770 "bitwriter.c"
   $20 = (_FLAC__bitwriter_write_raw_uint32_nocheck($16,$19,8)|0); //@line 770 "bitwriter.c"
   $21 = $5; //@line 770 "bitwriter.c"
   $22 = $21 & $20; //@line 770 "bitwriter.c"
   $5 = $22; //@line 770 "bitwriter.c"
   $23 = $3; //@line 771 "bitwriter.c"
   $24 = $4; //@line 771 "bitwriter.c"
   $25 = $24 & 63; //@line 771 "bitwriter.c"
   $26 = 128 | $25; //@line 771 "bitwriter.c"
   $27 = (_FLAC__bitwriter_write_raw_uint32_nocheck($23,$26,8)|0); //@line 771 "bitwriter.c"
   $28 = $5; //@line 771 "bitwriter.c"
   $29 = $28 & $27; //@line 771 "bitwriter.c"
   $5 = $29; //@line 771 "bitwriter.c"
  } else {
   $30 = $4; //@line 773 "bitwriter.c"
   $31 = ($30>>>0)<(65536); //@line 773 "bitwriter.c"
   if ($31) {
    $32 = $3; //@line 774 "bitwriter.c"
    $33 = $4; //@line 774 "bitwriter.c"
    $34 = $33 >>> 12; //@line 774 "bitwriter.c"
    $35 = 224 | $34; //@line 774 "bitwriter.c"
    $36 = (_FLAC__bitwriter_write_raw_uint32_nocheck($32,$35,8)|0); //@line 774 "bitwriter.c"
    $37 = $5; //@line 774 "bitwriter.c"
    $38 = $37 & $36; //@line 774 "bitwriter.c"
    $5 = $38; //@line 774 "bitwriter.c"
    $39 = $3; //@line 775 "bitwriter.c"
    $40 = $4; //@line 775 "bitwriter.c"
    $41 = $40 >>> 6; //@line 775 "bitwriter.c"
    $42 = $41 & 63; //@line 775 "bitwriter.c"
    $43 = 128 | $42; //@line 775 "bitwriter.c"
    $44 = (_FLAC__bitwriter_write_raw_uint32_nocheck($39,$43,8)|0); //@line 775 "bitwriter.c"
    $45 = $5; //@line 775 "bitwriter.c"
    $46 = $45 & $44; //@line 775 "bitwriter.c"
    $5 = $46; //@line 775 "bitwriter.c"
    $47 = $3; //@line 776 "bitwriter.c"
    $48 = $4; //@line 776 "bitwriter.c"
    $49 = $48 & 63; //@line 776 "bitwriter.c"
    $50 = 128 | $49; //@line 776 "bitwriter.c"
    $51 = (_FLAC__bitwriter_write_raw_uint32_nocheck($47,$50,8)|0); //@line 776 "bitwriter.c"
    $52 = $5; //@line 776 "bitwriter.c"
    $53 = $52 & $51; //@line 776 "bitwriter.c"
    $5 = $53; //@line 776 "bitwriter.c"
    break;
   }
   $54 = $4; //@line 778 "bitwriter.c"
   $55 = ($54>>>0)<(2097152); //@line 778 "bitwriter.c"
   if ($55) {
    $56 = $3; //@line 779 "bitwriter.c"
    $57 = $4; //@line 779 "bitwriter.c"
    $58 = $57 >>> 18; //@line 779 "bitwriter.c"
    $59 = 240 | $58; //@line 779 "bitwriter.c"
    $60 = (_FLAC__bitwriter_write_raw_uint32_nocheck($56,$59,8)|0); //@line 779 "bitwriter.c"
    $61 = $5; //@line 779 "bitwriter.c"
    $62 = $61 & $60; //@line 779 "bitwriter.c"
    $5 = $62; //@line 779 "bitwriter.c"
    $63 = $3; //@line 780 "bitwriter.c"
    $64 = $4; //@line 780 "bitwriter.c"
    $65 = $64 >>> 12; //@line 780 "bitwriter.c"
    $66 = $65 & 63; //@line 780 "bitwriter.c"
    $67 = 128 | $66; //@line 780 "bitwriter.c"
    $68 = (_FLAC__bitwriter_write_raw_uint32_nocheck($63,$67,8)|0); //@line 780 "bitwriter.c"
    $69 = $5; //@line 780 "bitwriter.c"
    $70 = $69 & $68; //@line 780 "bitwriter.c"
    $5 = $70; //@line 780 "bitwriter.c"
    $71 = $3; //@line 781 "bitwriter.c"
    $72 = $4; //@line 781 "bitwriter.c"
    $73 = $72 >>> 6; //@line 781 "bitwriter.c"
    $74 = $73 & 63; //@line 781 "bitwriter.c"
    $75 = 128 | $74; //@line 781 "bitwriter.c"
    $76 = (_FLAC__bitwriter_write_raw_uint32_nocheck($71,$75,8)|0); //@line 781 "bitwriter.c"
    $77 = $5; //@line 781 "bitwriter.c"
    $78 = $77 & $76; //@line 781 "bitwriter.c"
    $5 = $78; //@line 781 "bitwriter.c"
    $79 = $3; //@line 782 "bitwriter.c"
    $80 = $4; //@line 782 "bitwriter.c"
    $81 = $80 & 63; //@line 782 "bitwriter.c"
    $82 = 128 | $81; //@line 782 "bitwriter.c"
    $83 = (_FLAC__bitwriter_write_raw_uint32_nocheck($79,$82,8)|0); //@line 782 "bitwriter.c"
    $84 = $5; //@line 782 "bitwriter.c"
    $85 = $84 & $83; //@line 782 "bitwriter.c"
    $5 = $85; //@line 782 "bitwriter.c"
    break;
   }
   $86 = $4; //@line 784 "bitwriter.c"
   $87 = ($86>>>0)<(67108864); //@line 784 "bitwriter.c"
   $88 = $3;
   $89 = $4;
   if ($87) {
    $90 = $89 >>> 24; //@line 785 "bitwriter.c"
    $91 = 248 | $90; //@line 785 "bitwriter.c"
    $92 = (_FLAC__bitwriter_write_raw_uint32_nocheck($88,$91,8)|0); //@line 785 "bitwriter.c"
    $93 = $5; //@line 785 "bitwriter.c"
    $94 = $93 & $92; //@line 785 "bitwriter.c"
    $5 = $94; //@line 785 "bitwriter.c"
    $95 = $3; //@line 786 "bitwriter.c"
    $96 = $4; //@line 786 "bitwriter.c"
    $97 = $96 >>> 18; //@line 786 "bitwriter.c"
    $98 = $97 & 63; //@line 786 "bitwriter.c"
    $99 = 128 | $98; //@line 786 "bitwriter.c"
    $100 = (_FLAC__bitwriter_write_raw_uint32_nocheck($95,$99,8)|0); //@line 786 "bitwriter.c"
    $101 = $5; //@line 786 "bitwriter.c"
    $102 = $101 & $100; //@line 786 "bitwriter.c"
    $5 = $102; //@line 786 "bitwriter.c"
    $103 = $3; //@line 787 "bitwriter.c"
    $104 = $4; //@line 787 "bitwriter.c"
    $105 = $104 >>> 12; //@line 787 "bitwriter.c"
    $106 = $105 & 63; //@line 787 "bitwriter.c"
    $107 = 128 | $106; //@line 787 "bitwriter.c"
    $108 = (_FLAC__bitwriter_write_raw_uint32_nocheck($103,$107,8)|0); //@line 787 "bitwriter.c"
    $109 = $5; //@line 787 "bitwriter.c"
    $110 = $109 & $108; //@line 787 "bitwriter.c"
    $5 = $110; //@line 787 "bitwriter.c"
    $111 = $3; //@line 788 "bitwriter.c"
    $112 = $4; //@line 788 "bitwriter.c"
    $113 = $112 >>> 6; //@line 788 "bitwriter.c"
    $114 = $113 & 63; //@line 788 "bitwriter.c"
    $115 = 128 | $114; //@line 788 "bitwriter.c"
    $116 = (_FLAC__bitwriter_write_raw_uint32_nocheck($111,$115,8)|0); //@line 788 "bitwriter.c"
    $117 = $5; //@line 788 "bitwriter.c"
    $118 = $117 & $116; //@line 788 "bitwriter.c"
    $5 = $118; //@line 788 "bitwriter.c"
    $119 = $3; //@line 789 "bitwriter.c"
    $120 = $4; //@line 789 "bitwriter.c"
    $121 = $120 & 63; //@line 789 "bitwriter.c"
    $122 = 128 | $121; //@line 789 "bitwriter.c"
    $123 = (_FLAC__bitwriter_write_raw_uint32_nocheck($119,$122,8)|0); //@line 789 "bitwriter.c"
    $124 = $5; //@line 789 "bitwriter.c"
    $125 = $124 & $123; //@line 789 "bitwriter.c"
    $5 = $125; //@line 789 "bitwriter.c"
    break;
   } else {
    $126 = $89 >>> 30; //@line 792 "bitwriter.c"
    $127 = 252 | $126; //@line 792 "bitwriter.c"
    $128 = (_FLAC__bitwriter_write_raw_uint32_nocheck($88,$127,8)|0); //@line 792 "bitwriter.c"
    $129 = $5; //@line 792 "bitwriter.c"
    $130 = $129 & $128; //@line 792 "bitwriter.c"
    $5 = $130; //@line 792 "bitwriter.c"
    $131 = $3; //@line 793 "bitwriter.c"
    $132 = $4; //@line 793 "bitwriter.c"
    $133 = $132 >>> 24; //@line 793 "bitwriter.c"
    $134 = $133 & 63; //@line 793 "bitwriter.c"
    $135 = 128 | $134; //@line 793 "bitwriter.c"
    $136 = (_FLAC__bitwriter_write_raw_uint32_nocheck($131,$135,8)|0); //@line 793 "bitwriter.c"
    $137 = $5; //@line 793 "bitwriter.c"
    $138 = $137 & $136; //@line 793 "bitwriter.c"
    $5 = $138; //@line 793 "bitwriter.c"
    $139 = $3; //@line 794 "bitwriter.c"
    $140 = $4; //@line 794 "bitwriter.c"
    $141 = $140 >>> 18; //@line 794 "bitwriter.c"
    $142 = $141 & 63; //@line 794 "bitwriter.c"
    $143 = 128 | $142; //@line 794 "bitwriter.c"
    $144 = (_FLAC__bitwriter_write_raw_uint32_nocheck($139,$143,8)|0); //@line 794 "bitwriter.c"
    $145 = $5; //@line 794 "bitwriter.c"
    $146 = $145 & $144; //@line 794 "bitwriter.c"
    $5 = $146; //@line 794 "bitwriter.c"
    $147 = $3; //@line 795 "bitwriter.c"
    $148 = $4; //@line 795 "bitwriter.c"
    $149 = $148 >>> 12; //@line 795 "bitwriter.c"
    $150 = $149 & 63; //@line 795 "bitwriter.c"
    $151 = 128 | $150; //@line 795 "bitwriter.c"
    $152 = (_FLAC__bitwriter_write_raw_uint32_nocheck($147,$151,8)|0); //@line 795 "bitwriter.c"
    $153 = $5; //@line 795 "bitwriter.c"
    $154 = $153 & $152; //@line 795 "bitwriter.c"
    $5 = $154; //@line 795 "bitwriter.c"
    $155 = $3; //@line 796 "bitwriter.c"
    $156 = $4; //@line 796 "bitwriter.c"
    $157 = $156 >>> 6; //@line 796 "bitwriter.c"
    $158 = $157 & 63; //@line 796 "bitwriter.c"
    $159 = 128 | $158; //@line 796 "bitwriter.c"
    $160 = (_FLAC__bitwriter_write_raw_uint32_nocheck($155,$159,8)|0); //@line 796 "bitwriter.c"
    $161 = $5; //@line 796 "bitwriter.c"
    $162 = $161 & $160; //@line 796 "bitwriter.c"
    $5 = $162; //@line 796 "bitwriter.c"
    $163 = $3; //@line 797 "bitwriter.c"
    $164 = $4; //@line 797 "bitwriter.c"
    $165 = $164 & 63; //@line 797 "bitwriter.c"
    $166 = 128 | $165; //@line 797 "bitwriter.c"
    $167 = (_FLAC__bitwriter_write_raw_uint32_nocheck($163,$166,8)|0); //@line 797 "bitwriter.c"
    $168 = $5; //@line 797 "bitwriter.c"
    $169 = $168 & $167; //@line 797 "bitwriter.c"
    $5 = $169; //@line 797 "bitwriter.c"
    break;
   }
  }
 } while(0);
 $170 = $5; //@line 800 "bitwriter.c"
 $2 = $170; //@line 800 "bitwriter.c"
 $171 = $2; //@line 801 "bitwriter.c"
 STACKTOP = sp;return ($171|0); //@line 801 "bitwriter.c"
}
function _FLAC__bitwriter_write_utf8_uint64($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $6 = 1; //@line 805 "bitwriter.c"
 $11 = $5; //@line 810 "bitwriter.c"
 $12 = $11; //@line 810 "bitwriter.c"
 $13 = HEAP32[$12>>2]|0; //@line 810 "bitwriter.c"
 $14 = (($11) + 4)|0; //@line 810 "bitwriter.c"
 $15 = $14; //@line 810 "bitwriter.c"
 $16 = HEAP32[$15>>2]|0; //@line 810 "bitwriter.c"
 $17 = $16 & -16; //@line 810 "bitwriter.c"
 $18 = (0)!=(0); //@line 810 "bitwriter.c"
 $19 = ($17|0)!=(0); //@line 810 "bitwriter.c"
 $20 = $18 | $19; //@line 810 "bitwriter.c"
 if ($20) {
  $3 = 0; //@line 811 "bitwriter.c"
  $446 = $3; //@line 857 "bitwriter.c"
  STACKTOP = sp;return ($446|0); //@line 857 "bitwriter.c"
 }
 $21 = $5; //@line 813 "bitwriter.c"
 $22 = $21; //@line 813 "bitwriter.c"
 $23 = HEAP32[$22>>2]|0; //@line 813 "bitwriter.c"
 $24 = (($21) + 4)|0; //@line 813 "bitwriter.c"
 $25 = $24; //@line 813 "bitwriter.c"
 $26 = HEAP32[$25>>2]|0; //@line 813 "bitwriter.c"
 $27 = ($26>>>0)<(0); //@line 813 "bitwriter.c"
 $28 = ($23>>>0)<(128); //@line 813 "bitwriter.c"
 $29 = ($26|0)==(0); //@line 813 "bitwriter.c"
 $30 = $29 & $28; //@line 813 "bitwriter.c"
 $31 = $27 | $30; //@line 813 "bitwriter.c"
 if ($31) {
  $32 = $4; //@line 814 "bitwriter.c"
  $33 = $5; //@line 814 "bitwriter.c"
  $34 = $33; //@line 814 "bitwriter.c"
  $35 = HEAP32[$34>>2]|0; //@line 814 "bitwriter.c"
  $36 = (($33) + 4)|0; //@line 814 "bitwriter.c"
  $37 = $36; //@line 814 "bitwriter.c"
  $38 = HEAP32[$37>>2]|0; //@line 814 "bitwriter.c"
  $39 = (_FLAC__bitwriter_write_raw_uint32_nocheck($32,$35,8)|0); //@line 814 "bitwriter.c"
  $3 = $39; //@line 814 "bitwriter.c"
  $446 = $3; //@line 857 "bitwriter.c"
  STACKTOP = sp;return ($446|0); //@line 857 "bitwriter.c"
 }
 $40 = $5; //@line 816 "bitwriter.c"
 $41 = $40; //@line 816 "bitwriter.c"
 $42 = HEAP32[$41>>2]|0; //@line 816 "bitwriter.c"
 $43 = (($40) + 4)|0; //@line 816 "bitwriter.c"
 $44 = $43; //@line 816 "bitwriter.c"
 $45 = HEAP32[$44>>2]|0; //@line 816 "bitwriter.c"
 $46 = ($45>>>0)<(0); //@line 816 "bitwriter.c"
 $47 = ($42>>>0)<(2048); //@line 816 "bitwriter.c"
 $48 = ($45|0)==(0); //@line 816 "bitwriter.c"
 $49 = $48 & $47; //@line 816 "bitwriter.c"
 $50 = $46 | $49; //@line 816 "bitwriter.c"
 do {
  if ($50) {
   $51 = $4; //@line 817 "bitwriter.c"
   $52 = $5; //@line 817 "bitwriter.c"
   $53 = $52; //@line 817 "bitwriter.c"
   $54 = HEAP32[$53>>2]|0; //@line 817 "bitwriter.c"
   $55 = (($52) + 4)|0; //@line 817 "bitwriter.c"
   $56 = $55; //@line 817 "bitwriter.c"
   $57 = HEAP32[$56>>2]|0; //@line 817 "bitwriter.c"
   $58 = (_bitshift64Lshr(($54|0),($57|0),6)|0); //@line 817 "bitwriter.c"
   $59 = tempRet0; //@line 817 "bitwriter.c"
   $60 = 192 | $58; //@line 817 "bitwriter.c"
   $61 = (_FLAC__bitwriter_write_raw_uint32_nocheck($51,$60,8)|0); //@line 817 "bitwriter.c"
   $62 = $6; //@line 817 "bitwriter.c"
   $63 = $62 & $61; //@line 817 "bitwriter.c"
   $6 = $63; //@line 817 "bitwriter.c"
   $64 = $4; //@line 818 "bitwriter.c"
   $65 = $5; //@line 818 "bitwriter.c"
   $66 = $65; //@line 818 "bitwriter.c"
   $67 = HEAP32[$66>>2]|0; //@line 818 "bitwriter.c"
   $68 = (($65) + 4)|0; //@line 818 "bitwriter.c"
   $69 = $68; //@line 818 "bitwriter.c"
   $70 = HEAP32[$69>>2]|0; //@line 818 "bitwriter.c"
   $71 = $67 & 63; //@line 818 "bitwriter.c"
   $72 = 128 | $71; //@line 818 "bitwriter.c"
   $73 = (_FLAC__bitwriter_write_raw_uint32_nocheck($64,$72,8)|0); //@line 818 "bitwriter.c"
   $74 = $6; //@line 818 "bitwriter.c"
   $75 = $74 & $73; //@line 818 "bitwriter.c"
   $6 = $75; //@line 818 "bitwriter.c"
  } else {
   $76 = $5; //@line 820 "bitwriter.c"
   $77 = $76; //@line 820 "bitwriter.c"
   $78 = HEAP32[$77>>2]|0; //@line 820 "bitwriter.c"
   $79 = (($76) + 4)|0; //@line 820 "bitwriter.c"
   $80 = $79; //@line 820 "bitwriter.c"
   $81 = HEAP32[$80>>2]|0; //@line 820 "bitwriter.c"
   $82 = ($81>>>0)<(0); //@line 820 "bitwriter.c"
   $83 = ($78>>>0)<(65536); //@line 820 "bitwriter.c"
   $84 = ($81|0)==(0); //@line 820 "bitwriter.c"
   $85 = $84 & $83; //@line 820 "bitwriter.c"
   $86 = $82 | $85; //@line 820 "bitwriter.c"
   if ($86) {
    $87 = $4; //@line 821 "bitwriter.c"
    $88 = $5; //@line 821 "bitwriter.c"
    $89 = $88; //@line 821 "bitwriter.c"
    $90 = HEAP32[$89>>2]|0; //@line 821 "bitwriter.c"
    $91 = (($88) + 4)|0; //@line 821 "bitwriter.c"
    $92 = $91; //@line 821 "bitwriter.c"
    $93 = HEAP32[$92>>2]|0; //@line 821 "bitwriter.c"
    $94 = (_bitshift64Lshr(($90|0),($93|0),12)|0); //@line 821 "bitwriter.c"
    $95 = tempRet0; //@line 821 "bitwriter.c"
    $96 = 224 | $94; //@line 821 "bitwriter.c"
    $97 = (_FLAC__bitwriter_write_raw_uint32_nocheck($87,$96,8)|0); //@line 821 "bitwriter.c"
    $98 = $6; //@line 821 "bitwriter.c"
    $99 = $98 & $97; //@line 821 "bitwriter.c"
    $6 = $99; //@line 821 "bitwriter.c"
    $100 = $4; //@line 822 "bitwriter.c"
    $101 = $5; //@line 822 "bitwriter.c"
    $102 = $101; //@line 822 "bitwriter.c"
    $103 = HEAP32[$102>>2]|0; //@line 822 "bitwriter.c"
    $104 = (($101) + 4)|0; //@line 822 "bitwriter.c"
    $105 = $104; //@line 822 "bitwriter.c"
    $106 = HEAP32[$105>>2]|0; //@line 822 "bitwriter.c"
    $107 = (_bitshift64Lshr(($103|0),($106|0),6)|0); //@line 822 "bitwriter.c"
    $108 = tempRet0; //@line 822 "bitwriter.c"
    $109 = $107 & 63; //@line 822 "bitwriter.c"
    $110 = 128 | $109; //@line 822 "bitwriter.c"
    $111 = (_FLAC__bitwriter_write_raw_uint32_nocheck($100,$110,8)|0); //@line 822 "bitwriter.c"
    $112 = $6; //@line 822 "bitwriter.c"
    $113 = $112 & $111; //@line 822 "bitwriter.c"
    $6 = $113; //@line 822 "bitwriter.c"
    $114 = $4; //@line 823 "bitwriter.c"
    $115 = $5; //@line 823 "bitwriter.c"
    $116 = $115; //@line 823 "bitwriter.c"
    $117 = HEAP32[$116>>2]|0; //@line 823 "bitwriter.c"
    $118 = (($115) + 4)|0; //@line 823 "bitwriter.c"
    $119 = $118; //@line 823 "bitwriter.c"
    $120 = HEAP32[$119>>2]|0; //@line 823 "bitwriter.c"
    $121 = $117 & 63; //@line 823 "bitwriter.c"
    $122 = 128 | $121; //@line 823 "bitwriter.c"
    $123 = (_FLAC__bitwriter_write_raw_uint32_nocheck($114,$122,8)|0); //@line 823 "bitwriter.c"
    $124 = $6; //@line 823 "bitwriter.c"
    $125 = $124 & $123; //@line 823 "bitwriter.c"
    $6 = $125; //@line 823 "bitwriter.c"
    break;
   }
   $126 = $5; //@line 825 "bitwriter.c"
   $127 = $126; //@line 825 "bitwriter.c"
   $128 = HEAP32[$127>>2]|0; //@line 825 "bitwriter.c"
   $129 = (($126) + 4)|0; //@line 825 "bitwriter.c"
   $130 = $129; //@line 825 "bitwriter.c"
   $131 = HEAP32[$130>>2]|0; //@line 825 "bitwriter.c"
   $132 = ($131>>>0)<(0); //@line 825 "bitwriter.c"
   $133 = ($128>>>0)<(2097152); //@line 825 "bitwriter.c"
   $134 = ($131|0)==(0); //@line 825 "bitwriter.c"
   $135 = $134 & $133; //@line 825 "bitwriter.c"
   $136 = $132 | $135; //@line 825 "bitwriter.c"
   if ($136) {
    $137 = $4; //@line 826 "bitwriter.c"
    $138 = $5; //@line 826 "bitwriter.c"
    $139 = $138; //@line 826 "bitwriter.c"
    $140 = HEAP32[$139>>2]|0; //@line 826 "bitwriter.c"
    $141 = (($138) + 4)|0; //@line 826 "bitwriter.c"
    $142 = $141; //@line 826 "bitwriter.c"
    $143 = HEAP32[$142>>2]|0; //@line 826 "bitwriter.c"
    $144 = (_bitshift64Lshr(($140|0),($143|0),18)|0); //@line 826 "bitwriter.c"
    $145 = tempRet0; //@line 826 "bitwriter.c"
    $146 = 240 | $144; //@line 826 "bitwriter.c"
    $147 = (_FLAC__bitwriter_write_raw_uint32_nocheck($137,$146,8)|0); //@line 826 "bitwriter.c"
    $148 = $6; //@line 826 "bitwriter.c"
    $149 = $148 & $147; //@line 826 "bitwriter.c"
    $6 = $149; //@line 826 "bitwriter.c"
    $150 = $4; //@line 827 "bitwriter.c"
    $151 = $5; //@line 827 "bitwriter.c"
    $152 = $151; //@line 827 "bitwriter.c"
    $153 = HEAP32[$152>>2]|0; //@line 827 "bitwriter.c"
    $154 = (($151) + 4)|0; //@line 827 "bitwriter.c"
    $155 = $154; //@line 827 "bitwriter.c"
    $156 = HEAP32[$155>>2]|0; //@line 827 "bitwriter.c"
    $157 = (_bitshift64Lshr(($153|0),($156|0),12)|0); //@line 827 "bitwriter.c"
    $158 = tempRet0; //@line 827 "bitwriter.c"
    $159 = $157 & 63; //@line 827 "bitwriter.c"
    $160 = 128 | $159; //@line 827 "bitwriter.c"
    $161 = (_FLAC__bitwriter_write_raw_uint32_nocheck($150,$160,8)|0); //@line 827 "bitwriter.c"
    $162 = $6; //@line 827 "bitwriter.c"
    $163 = $162 & $161; //@line 827 "bitwriter.c"
    $6 = $163; //@line 827 "bitwriter.c"
    $164 = $4; //@line 828 "bitwriter.c"
    $165 = $5; //@line 828 "bitwriter.c"
    $166 = $165; //@line 828 "bitwriter.c"
    $167 = HEAP32[$166>>2]|0; //@line 828 "bitwriter.c"
    $168 = (($165) + 4)|0; //@line 828 "bitwriter.c"
    $169 = $168; //@line 828 "bitwriter.c"
    $170 = HEAP32[$169>>2]|0; //@line 828 "bitwriter.c"
    $171 = (_bitshift64Lshr(($167|0),($170|0),6)|0); //@line 828 "bitwriter.c"
    $172 = tempRet0; //@line 828 "bitwriter.c"
    $173 = $171 & 63; //@line 828 "bitwriter.c"
    $174 = 128 | $173; //@line 828 "bitwriter.c"
    $175 = (_FLAC__bitwriter_write_raw_uint32_nocheck($164,$174,8)|0); //@line 828 "bitwriter.c"
    $176 = $6; //@line 828 "bitwriter.c"
    $177 = $176 & $175; //@line 828 "bitwriter.c"
    $6 = $177; //@line 828 "bitwriter.c"
    $178 = $4; //@line 829 "bitwriter.c"
    $179 = $5; //@line 829 "bitwriter.c"
    $180 = $179; //@line 829 "bitwriter.c"
    $181 = HEAP32[$180>>2]|0; //@line 829 "bitwriter.c"
    $182 = (($179) + 4)|0; //@line 829 "bitwriter.c"
    $183 = $182; //@line 829 "bitwriter.c"
    $184 = HEAP32[$183>>2]|0; //@line 829 "bitwriter.c"
    $185 = $181 & 63; //@line 829 "bitwriter.c"
    $186 = 128 | $185; //@line 829 "bitwriter.c"
    $187 = (_FLAC__bitwriter_write_raw_uint32_nocheck($178,$186,8)|0); //@line 829 "bitwriter.c"
    $188 = $6; //@line 829 "bitwriter.c"
    $189 = $188 & $187; //@line 829 "bitwriter.c"
    $6 = $189; //@line 829 "bitwriter.c"
    break;
   }
   $190 = $5; //@line 831 "bitwriter.c"
   $191 = $190; //@line 831 "bitwriter.c"
   $192 = HEAP32[$191>>2]|0; //@line 831 "bitwriter.c"
   $193 = (($190) + 4)|0; //@line 831 "bitwriter.c"
   $194 = $193; //@line 831 "bitwriter.c"
   $195 = HEAP32[$194>>2]|0; //@line 831 "bitwriter.c"
   $196 = ($195>>>0)<(0); //@line 831 "bitwriter.c"
   $197 = ($192>>>0)<(67108864); //@line 831 "bitwriter.c"
   $198 = ($195|0)==(0); //@line 831 "bitwriter.c"
   $199 = $198 & $197; //@line 831 "bitwriter.c"
   $200 = $196 | $199; //@line 831 "bitwriter.c"
   if ($200) {
    $201 = $4; //@line 832 "bitwriter.c"
    $202 = $5; //@line 832 "bitwriter.c"
    $203 = $202; //@line 832 "bitwriter.c"
    $204 = HEAP32[$203>>2]|0; //@line 832 "bitwriter.c"
    $205 = (($202) + 4)|0; //@line 832 "bitwriter.c"
    $206 = $205; //@line 832 "bitwriter.c"
    $207 = HEAP32[$206>>2]|0; //@line 832 "bitwriter.c"
    $208 = (_bitshift64Lshr(($204|0),($207|0),24)|0); //@line 832 "bitwriter.c"
    $209 = tempRet0; //@line 832 "bitwriter.c"
    $210 = 248 | $208; //@line 832 "bitwriter.c"
    $211 = (_FLAC__bitwriter_write_raw_uint32_nocheck($201,$210,8)|0); //@line 832 "bitwriter.c"
    $212 = $6; //@line 832 "bitwriter.c"
    $213 = $212 & $211; //@line 832 "bitwriter.c"
    $6 = $213; //@line 832 "bitwriter.c"
    $214 = $4; //@line 833 "bitwriter.c"
    $215 = $5; //@line 833 "bitwriter.c"
    $216 = $215; //@line 833 "bitwriter.c"
    $217 = HEAP32[$216>>2]|0; //@line 833 "bitwriter.c"
    $218 = (($215) + 4)|0; //@line 833 "bitwriter.c"
    $219 = $218; //@line 833 "bitwriter.c"
    $220 = HEAP32[$219>>2]|0; //@line 833 "bitwriter.c"
    $221 = (_bitshift64Lshr(($217|0),($220|0),18)|0); //@line 833 "bitwriter.c"
    $222 = tempRet0; //@line 833 "bitwriter.c"
    $223 = $221 & 63; //@line 833 "bitwriter.c"
    $224 = 128 | $223; //@line 833 "bitwriter.c"
    $225 = (_FLAC__bitwriter_write_raw_uint32_nocheck($214,$224,8)|0); //@line 833 "bitwriter.c"
    $226 = $6; //@line 833 "bitwriter.c"
    $227 = $226 & $225; //@line 833 "bitwriter.c"
    $6 = $227; //@line 833 "bitwriter.c"
    $228 = $4; //@line 834 "bitwriter.c"
    $229 = $5; //@line 834 "bitwriter.c"
    $230 = $229; //@line 834 "bitwriter.c"
    $231 = HEAP32[$230>>2]|0; //@line 834 "bitwriter.c"
    $232 = (($229) + 4)|0; //@line 834 "bitwriter.c"
    $233 = $232; //@line 834 "bitwriter.c"
    $234 = HEAP32[$233>>2]|0; //@line 834 "bitwriter.c"
    $235 = (_bitshift64Lshr(($231|0),($234|0),12)|0); //@line 834 "bitwriter.c"
    $236 = tempRet0; //@line 834 "bitwriter.c"
    $237 = $235 & 63; //@line 834 "bitwriter.c"
    $238 = 128 | $237; //@line 834 "bitwriter.c"
    $239 = (_FLAC__bitwriter_write_raw_uint32_nocheck($228,$238,8)|0); //@line 834 "bitwriter.c"
    $240 = $6; //@line 834 "bitwriter.c"
    $241 = $240 & $239; //@line 834 "bitwriter.c"
    $6 = $241; //@line 834 "bitwriter.c"
    $242 = $4; //@line 835 "bitwriter.c"
    $243 = $5; //@line 835 "bitwriter.c"
    $244 = $243; //@line 835 "bitwriter.c"
    $245 = HEAP32[$244>>2]|0; //@line 835 "bitwriter.c"
    $246 = (($243) + 4)|0; //@line 835 "bitwriter.c"
    $247 = $246; //@line 835 "bitwriter.c"
    $248 = HEAP32[$247>>2]|0; //@line 835 "bitwriter.c"
    $249 = (_bitshift64Lshr(($245|0),($248|0),6)|0); //@line 835 "bitwriter.c"
    $250 = tempRet0; //@line 835 "bitwriter.c"
    $251 = $249 & 63; //@line 835 "bitwriter.c"
    $252 = 128 | $251; //@line 835 "bitwriter.c"
    $253 = (_FLAC__bitwriter_write_raw_uint32_nocheck($242,$252,8)|0); //@line 835 "bitwriter.c"
    $254 = $6; //@line 835 "bitwriter.c"
    $255 = $254 & $253; //@line 835 "bitwriter.c"
    $6 = $255; //@line 835 "bitwriter.c"
    $256 = $4; //@line 836 "bitwriter.c"
    $257 = $5; //@line 836 "bitwriter.c"
    $258 = $257; //@line 836 "bitwriter.c"
    $259 = HEAP32[$258>>2]|0; //@line 836 "bitwriter.c"
    $260 = (($257) + 4)|0; //@line 836 "bitwriter.c"
    $261 = $260; //@line 836 "bitwriter.c"
    $262 = HEAP32[$261>>2]|0; //@line 836 "bitwriter.c"
    $263 = $259 & 63; //@line 836 "bitwriter.c"
    $264 = 128 | $263; //@line 836 "bitwriter.c"
    $265 = (_FLAC__bitwriter_write_raw_uint32_nocheck($256,$264,8)|0); //@line 836 "bitwriter.c"
    $266 = $6; //@line 836 "bitwriter.c"
    $267 = $266 & $265; //@line 836 "bitwriter.c"
    $6 = $267; //@line 836 "bitwriter.c"
    break;
   }
   $268 = $5; //@line 838 "bitwriter.c"
   $269 = $268; //@line 838 "bitwriter.c"
   $270 = HEAP32[$269>>2]|0; //@line 838 "bitwriter.c"
   $271 = (($268) + 4)|0; //@line 838 "bitwriter.c"
   $272 = $271; //@line 838 "bitwriter.c"
   $273 = HEAP32[$272>>2]|0; //@line 838 "bitwriter.c"
   $274 = ($273>>>0)<(0); //@line 838 "bitwriter.c"
   $275 = ($270>>>0)<(2147483648); //@line 838 "bitwriter.c"
   $276 = ($273|0)==(0); //@line 838 "bitwriter.c"
   $277 = $276 & $275; //@line 838 "bitwriter.c"
   $278 = $274 | $277; //@line 838 "bitwriter.c"
   $279 = $4;
   if ($278) {
    $280 = $5; //@line 839 "bitwriter.c"
    $281 = $280; //@line 839 "bitwriter.c"
    $282 = HEAP32[$281>>2]|0; //@line 839 "bitwriter.c"
    $283 = (($280) + 4)|0; //@line 839 "bitwriter.c"
    $284 = $283; //@line 839 "bitwriter.c"
    $285 = HEAP32[$284>>2]|0; //@line 839 "bitwriter.c"
    $286 = (_bitshift64Lshr(($282|0),($285|0),30)|0); //@line 839 "bitwriter.c"
    $287 = tempRet0; //@line 839 "bitwriter.c"
    $288 = 252 | $286; //@line 839 "bitwriter.c"
    $289 = (_FLAC__bitwriter_write_raw_uint32_nocheck($279,$288,8)|0); //@line 839 "bitwriter.c"
    $290 = $6; //@line 839 "bitwriter.c"
    $291 = $290 & $289; //@line 839 "bitwriter.c"
    $6 = $291; //@line 839 "bitwriter.c"
    $292 = $4; //@line 840 "bitwriter.c"
    $293 = $5; //@line 840 "bitwriter.c"
    $294 = $293; //@line 840 "bitwriter.c"
    $295 = HEAP32[$294>>2]|0; //@line 840 "bitwriter.c"
    $296 = (($293) + 4)|0; //@line 840 "bitwriter.c"
    $297 = $296; //@line 840 "bitwriter.c"
    $298 = HEAP32[$297>>2]|0; //@line 840 "bitwriter.c"
    $299 = (_bitshift64Lshr(($295|0),($298|0),24)|0); //@line 840 "bitwriter.c"
    $300 = tempRet0; //@line 840 "bitwriter.c"
    $301 = $299 & 63; //@line 840 "bitwriter.c"
    $302 = 128 | $301; //@line 840 "bitwriter.c"
    $303 = (_FLAC__bitwriter_write_raw_uint32_nocheck($292,$302,8)|0); //@line 840 "bitwriter.c"
    $304 = $6; //@line 840 "bitwriter.c"
    $305 = $304 & $303; //@line 840 "bitwriter.c"
    $6 = $305; //@line 840 "bitwriter.c"
    $306 = $4; //@line 841 "bitwriter.c"
    $307 = $5; //@line 841 "bitwriter.c"
    $308 = $307; //@line 841 "bitwriter.c"
    $309 = HEAP32[$308>>2]|0; //@line 841 "bitwriter.c"
    $310 = (($307) + 4)|0; //@line 841 "bitwriter.c"
    $311 = $310; //@line 841 "bitwriter.c"
    $312 = HEAP32[$311>>2]|0; //@line 841 "bitwriter.c"
    $313 = (_bitshift64Lshr(($309|0),($312|0),18)|0); //@line 841 "bitwriter.c"
    $314 = tempRet0; //@line 841 "bitwriter.c"
    $315 = $313 & 63; //@line 841 "bitwriter.c"
    $316 = 128 | $315; //@line 841 "bitwriter.c"
    $317 = (_FLAC__bitwriter_write_raw_uint32_nocheck($306,$316,8)|0); //@line 841 "bitwriter.c"
    $318 = $6; //@line 841 "bitwriter.c"
    $319 = $318 & $317; //@line 841 "bitwriter.c"
    $6 = $319; //@line 841 "bitwriter.c"
    $320 = $4; //@line 842 "bitwriter.c"
    $321 = $5; //@line 842 "bitwriter.c"
    $322 = $321; //@line 842 "bitwriter.c"
    $323 = HEAP32[$322>>2]|0; //@line 842 "bitwriter.c"
    $324 = (($321) + 4)|0; //@line 842 "bitwriter.c"
    $325 = $324; //@line 842 "bitwriter.c"
    $326 = HEAP32[$325>>2]|0; //@line 842 "bitwriter.c"
    $327 = (_bitshift64Lshr(($323|0),($326|0),12)|0); //@line 842 "bitwriter.c"
    $328 = tempRet0; //@line 842 "bitwriter.c"
    $329 = $327 & 63; //@line 842 "bitwriter.c"
    $330 = 128 | $329; //@line 842 "bitwriter.c"
    $331 = (_FLAC__bitwriter_write_raw_uint32_nocheck($320,$330,8)|0); //@line 842 "bitwriter.c"
    $332 = $6; //@line 842 "bitwriter.c"
    $333 = $332 & $331; //@line 842 "bitwriter.c"
    $6 = $333; //@line 842 "bitwriter.c"
    $334 = $4; //@line 843 "bitwriter.c"
    $335 = $5; //@line 843 "bitwriter.c"
    $336 = $335; //@line 843 "bitwriter.c"
    $337 = HEAP32[$336>>2]|0; //@line 843 "bitwriter.c"
    $338 = (($335) + 4)|0; //@line 843 "bitwriter.c"
    $339 = $338; //@line 843 "bitwriter.c"
    $340 = HEAP32[$339>>2]|0; //@line 843 "bitwriter.c"
    $341 = (_bitshift64Lshr(($337|0),($340|0),6)|0); //@line 843 "bitwriter.c"
    $342 = tempRet0; //@line 843 "bitwriter.c"
    $343 = $341 & 63; //@line 843 "bitwriter.c"
    $344 = 128 | $343; //@line 843 "bitwriter.c"
    $345 = (_FLAC__bitwriter_write_raw_uint32_nocheck($334,$344,8)|0); //@line 843 "bitwriter.c"
    $346 = $6; //@line 843 "bitwriter.c"
    $347 = $346 & $345; //@line 843 "bitwriter.c"
    $6 = $347; //@line 843 "bitwriter.c"
    $348 = $4; //@line 844 "bitwriter.c"
    $349 = $5; //@line 844 "bitwriter.c"
    $350 = $349; //@line 844 "bitwriter.c"
    $351 = HEAP32[$350>>2]|0; //@line 844 "bitwriter.c"
    $352 = (($349) + 4)|0; //@line 844 "bitwriter.c"
    $353 = $352; //@line 844 "bitwriter.c"
    $354 = HEAP32[$353>>2]|0; //@line 844 "bitwriter.c"
    $355 = $351 & 63; //@line 844 "bitwriter.c"
    $356 = 128 | $355; //@line 844 "bitwriter.c"
    $357 = (_FLAC__bitwriter_write_raw_uint32_nocheck($348,$356,8)|0); //@line 844 "bitwriter.c"
    $358 = $6; //@line 844 "bitwriter.c"
    $359 = $358 & $357; //@line 844 "bitwriter.c"
    $6 = $359; //@line 844 "bitwriter.c"
    break;
   } else {
    $360 = (_FLAC__bitwriter_write_raw_uint32_nocheck($279,254,8)|0); //@line 847 "bitwriter.c"
    $361 = $6; //@line 847 "bitwriter.c"
    $362 = $361 & $360; //@line 847 "bitwriter.c"
    $6 = $362; //@line 847 "bitwriter.c"
    $363 = $4; //@line 848 "bitwriter.c"
    $364 = $5; //@line 848 "bitwriter.c"
    $365 = $364; //@line 848 "bitwriter.c"
    $366 = HEAP32[$365>>2]|0; //@line 848 "bitwriter.c"
    $367 = (($364) + 4)|0; //@line 848 "bitwriter.c"
    $368 = $367; //@line 848 "bitwriter.c"
    $369 = HEAP32[$368>>2]|0; //@line 848 "bitwriter.c"
    $370 = (_bitshift64Lshr(($366|0),($369|0),30)|0); //@line 848 "bitwriter.c"
    $371 = tempRet0; //@line 848 "bitwriter.c"
    $372 = $370 & 63; //@line 848 "bitwriter.c"
    $373 = 128 | $372; //@line 848 "bitwriter.c"
    $374 = (_FLAC__bitwriter_write_raw_uint32_nocheck($363,$373,8)|0); //@line 848 "bitwriter.c"
    $375 = $6; //@line 848 "bitwriter.c"
    $376 = $375 & $374; //@line 848 "bitwriter.c"
    $6 = $376; //@line 848 "bitwriter.c"
    $377 = $4; //@line 849 "bitwriter.c"
    $378 = $5; //@line 849 "bitwriter.c"
    $379 = $378; //@line 849 "bitwriter.c"
    $380 = HEAP32[$379>>2]|0; //@line 849 "bitwriter.c"
    $381 = (($378) + 4)|0; //@line 849 "bitwriter.c"
    $382 = $381; //@line 849 "bitwriter.c"
    $383 = HEAP32[$382>>2]|0; //@line 849 "bitwriter.c"
    $384 = (_bitshift64Lshr(($380|0),($383|0),24)|0); //@line 849 "bitwriter.c"
    $385 = tempRet0; //@line 849 "bitwriter.c"
    $386 = $384 & 63; //@line 849 "bitwriter.c"
    $387 = 128 | $386; //@line 849 "bitwriter.c"
    $388 = (_FLAC__bitwriter_write_raw_uint32_nocheck($377,$387,8)|0); //@line 849 "bitwriter.c"
    $389 = $6; //@line 849 "bitwriter.c"
    $390 = $389 & $388; //@line 849 "bitwriter.c"
    $6 = $390; //@line 849 "bitwriter.c"
    $391 = $4; //@line 850 "bitwriter.c"
    $392 = $5; //@line 850 "bitwriter.c"
    $393 = $392; //@line 850 "bitwriter.c"
    $394 = HEAP32[$393>>2]|0; //@line 850 "bitwriter.c"
    $395 = (($392) + 4)|0; //@line 850 "bitwriter.c"
    $396 = $395; //@line 850 "bitwriter.c"
    $397 = HEAP32[$396>>2]|0; //@line 850 "bitwriter.c"
    $398 = (_bitshift64Lshr(($394|0),($397|0),18)|0); //@line 850 "bitwriter.c"
    $399 = tempRet0; //@line 850 "bitwriter.c"
    $400 = $398 & 63; //@line 850 "bitwriter.c"
    $401 = 128 | $400; //@line 850 "bitwriter.c"
    $402 = (_FLAC__bitwriter_write_raw_uint32_nocheck($391,$401,8)|0); //@line 850 "bitwriter.c"
    $403 = $6; //@line 850 "bitwriter.c"
    $404 = $403 & $402; //@line 850 "bitwriter.c"
    $6 = $404; //@line 850 "bitwriter.c"
    $405 = $4; //@line 851 "bitwriter.c"
    $406 = $5; //@line 851 "bitwriter.c"
    $407 = $406; //@line 851 "bitwriter.c"
    $408 = HEAP32[$407>>2]|0; //@line 851 "bitwriter.c"
    $409 = (($406) + 4)|0; //@line 851 "bitwriter.c"
    $410 = $409; //@line 851 "bitwriter.c"
    $411 = HEAP32[$410>>2]|0; //@line 851 "bitwriter.c"
    $412 = (_bitshift64Lshr(($408|0),($411|0),12)|0); //@line 851 "bitwriter.c"
    $413 = tempRet0; //@line 851 "bitwriter.c"
    $414 = $412 & 63; //@line 851 "bitwriter.c"
    $415 = 128 | $414; //@line 851 "bitwriter.c"
    $416 = (_FLAC__bitwriter_write_raw_uint32_nocheck($405,$415,8)|0); //@line 851 "bitwriter.c"
    $417 = $6; //@line 851 "bitwriter.c"
    $418 = $417 & $416; //@line 851 "bitwriter.c"
    $6 = $418; //@line 851 "bitwriter.c"
    $419 = $4; //@line 852 "bitwriter.c"
    $420 = $5; //@line 852 "bitwriter.c"
    $421 = $420; //@line 852 "bitwriter.c"
    $422 = HEAP32[$421>>2]|0; //@line 852 "bitwriter.c"
    $423 = (($420) + 4)|0; //@line 852 "bitwriter.c"
    $424 = $423; //@line 852 "bitwriter.c"
    $425 = HEAP32[$424>>2]|0; //@line 852 "bitwriter.c"
    $426 = (_bitshift64Lshr(($422|0),($425|0),6)|0); //@line 852 "bitwriter.c"
    $427 = tempRet0; //@line 852 "bitwriter.c"
    $428 = $426 & 63; //@line 852 "bitwriter.c"
    $429 = 128 | $428; //@line 852 "bitwriter.c"
    $430 = (_FLAC__bitwriter_write_raw_uint32_nocheck($419,$429,8)|0); //@line 852 "bitwriter.c"
    $431 = $6; //@line 852 "bitwriter.c"
    $432 = $431 & $430; //@line 852 "bitwriter.c"
    $6 = $432; //@line 852 "bitwriter.c"
    $433 = $4; //@line 853 "bitwriter.c"
    $434 = $5; //@line 853 "bitwriter.c"
    $435 = $434; //@line 853 "bitwriter.c"
    $436 = HEAP32[$435>>2]|0; //@line 853 "bitwriter.c"
    $437 = (($434) + 4)|0; //@line 853 "bitwriter.c"
    $438 = $437; //@line 853 "bitwriter.c"
    $439 = HEAP32[$438>>2]|0; //@line 853 "bitwriter.c"
    $440 = $436 & 63; //@line 853 "bitwriter.c"
    $441 = 128 | $440; //@line 853 "bitwriter.c"
    $442 = (_FLAC__bitwriter_write_raw_uint32_nocheck($433,$441,8)|0); //@line 853 "bitwriter.c"
    $443 = $6; //@line 853 "bitwriter.c"
    $444 = $443 & $442; //@line 853 "bitwriter.c"
    $6 = $444; //@line 853 "bitwriter.c"
    break;
   }
  }
 } while(0);
 $445 = $6; //@line 856 "bitwriter.c"
 $3 = $445; //@line 856 "bitwriter.c"
 $446 = $3; //@line 857 "bitwriter.c"
 STACKTOP = sp;return ($446|0); //@line 857 "bitwriter.c"
}
function _FLAC__bitwriter_zero_pad_to_byte_boundary($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 862 "bitwriter.c"
 $4 = ((($3)) + 16|0); //@line 862 "bitwriter.c"
 $5 = HEAP32[$4>>2]|0; //@line 862 "bitwriter.c"
 $6 = $5 & 7; //@line 862 "bitwriter.c"
 $7 = ($6|0)!=(0); //@line 862 "bitwriter.c"
 if ($7) {
  $8 = $2; //@line 863 "bitwriter.c"
  $9 = $2; //@line 863 "bitwriter.c"
  $10 = ((($9)) + 16|0); //@line 863 "bitwriter.c"
  $11 = HEAP32[$10>>2]|0; //@line 863 "bitwriter.c"
  $12 = $11 & 7; //@line 863 "bitwriter.c"
  $13 = (8 - ($12))|0; //@line 863 "bitwriter.c"
  $14 = (_FLAC__bitwriter_write_zeroes($8,$13)|0); //@line 863 "bitwriter.c"
  $1 = $14; //@line 863 "bitwriter.c"
  $15 = $1; //@line 866 "bitwriter.c"
  STACKTOP = sp;return ($15|0); //@line 866 "bitwriter.c"
 } else {
  $1 = 1; //@line 865 "bitwriter.c"
  $15 = $1; //@line 866 "bitwriter.c"
  STACKTOP = sp;return ($15|0); //@line 866 "bitwriter.c"
 }
 return (0)|0;
}
function _FLAC__cpu_info($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 238 "cpu.c"
 dest=$2; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 238 "cpu.c"
 $3 = $1; //@line 245 "cpu.c"
 $4 = ((($3)) + 4|0); //@line 245 "cpu.c"
 HEAP32[$4>>2] = 2; //@line 245 "cpu.c"
 $5 = $1; //@line 246 "cpu.c"
 HEAP32[$5>>2] = 0; //@line 246 "cpu.c"
 $6 = $1; //@line 249 "cpu.c"
 $7 = ((($6)) + 4|0); //@line 249 "cpu.c"
 $8 = HEAP32[$7>>2]|0; //@line 249 "cpu.c"
 switch ($8|0) {
 case 0:  {
  $9 = $1; //@line 251 "cpu.c"
  _ia32_cpu_info($9); //@line 251 "cpu.c"
  STACKTOP = sp;return; //@line 260 "cpu.c"
  break;
 }
 case 1:  {
  $10 = $1; //@line 254 "cpu.c"
  _x86_64_cpu_info($10); //@line 254 "cpu.c"
  STACKTOP = sp;return; //@line 260 "cpu.c"
  break;
 }
 default: {
  $11 = $1; //@line 257 "cpu.c"
  HEAP32[$11>>2] = 0; //@line 257 "cpu.c"
  STACKTOP = sp;return; //@line 260 "cpu.c"
 }
 }
}
function _ia32_cpu_info($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 174 "cpu.c"
}
function _x86_64_cpu_info($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return; //@line 234 "cpu.c"
}
function _FLAC__crc8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0; //@line 127 "crc.c"
 while(1) {
  $5 = $3; //@line 129 "crc.c"
  $6 = (($5) + -1)|0; //@line 129 "crc.c"
  $3 = $6; //@line 129 "crc.c"
  $7 = ($5|0)!=(0); //@line 129 "crc.c"
  $8 = $4;
  if (!($7)) {
   break;
  }
  $9 = $8&255; //@line 130 "crc.c"
  $10 = $2; //@line 130 "crc.c"
  $11 = ((($10)) + 1|0); //@line 130 "crc.c"
  $2 = $11; //@line 130 "crc.c"
  $12 = HEAP8[$10>>0]|0; //@line 130 "crc.c"
  $13 = $12&255; //@line 130 "crc.c"
  $14 = $9 ^ $13; //@line 130 "crc.c"
  $15 = (2064 + ($14)|0); //@line 130 "crc.c"
  $16 = HEAP8[$15>>0]|0; //@line 130 "crc.c"
  $4 = $16; //@line 130 "crc.c"
 }
 STACKTOP = sp;return ($8|0); //@line 132 "crc.c"
}
function _FLAC__crc16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0; //@line 137 "crc.c"
 while(1) {
  $5 = $3; //@line 139 "crc.c"
  $6 = (($5) + -1)|0; //@line 139 "crc.c"
  $3 = $6; //@line 139 "crc.c"
  $7 = ($5|0)!=(0); //@line 139 "crc.c"
  $8 = $4;
  if (!($7)) {
   break;
  }
  $9 = $8 << 8; //@line 140 "crc.c"
  $10 = $4; //@line 140 "crc.c"
  $11 = $10 >>> 8; //@line 140 "crc.c"
  $12 = $2; //@line 140 "crc.c"
  $13 = ((($12)) + 1|0); //@line 140 "crc.c"
  $2 = $13; //@line 140 "crc.c"
  $14 = HEAP8[$12>>0]|0; //@line 140 "crc.c"
  $15 = $14&255; //@line 140 "crc.c"
  $16 = $11 ^ $15; //@line 140 "crc.c"
  $17 = (8 + ($16<<2)|0); //@line 140 "crc.c"
  $18 = HEAP32[$17>>2]|0; //@line 140 "crc.c"
  $19 = $9 ^ $18; //@line 140 "crc.c"
  $20 = $19 & 65535; //@line 140 "crc.c"
  $4 = $20; //@line 140 "crc.c"
 }
 STACKTOP = sp;return ($8|0); //@line 142 "crc.c"
}
function _FLAC__fixed_compute_best_predictor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $3; //@line 222 "fixed.c"
 $20 = ((($19)) + -4|0); //@line 222 "fixed.c"
 $21 = HEAP32[$20>>2]|0; //@line 222 "fixed.c"
 $6 = $21; //@line 222 "fixed.c"
 $22 = $3; //@line 223 "fixed.c"
 $23 = ((($22)) + -4|0); //@line 223 "fixed.c"
 $24 = HEAP32[$23>>2]|0; //@line 223 "fixed.c"
 $25 = $3; //@line 223 "fixed.c"
 $26 = ((($25)) + -8|0); //@line 223 "fixed.c"
 $27 = HEAP32[$26>>2]|0; //@line 223 "fixed.c"
 $28 = (($24) - ($27))|0; //@line 223 "fixed.c"
 $7 = $28; //@line 223 "fixed.c"
 $29 = $7; //@line 224 "fixed.c"
 $30 = $3; //@line 224 "fixed.c"
 $31 = ((($30)) + -8|0); //@line 224 "fixed.c"
 $32 = HEAP32[$31>>2]|0; //@line 224 "fixed.c"
 $33 = $3; //@line 224 "fixed.c"
 $34 = ((($33)) + -12|0); //@line 224 "fixed.c"
 $35 = HEAP32[$34>>2]|0; //@line 224 "fixed.c"
 $36 = (($32) - ($35))|0; //@line 224 "fixed.c"
 $37 = (($29) - ($36))|0; //@line 224 "fixed.c"
 $8 = $37; //@line 224 "fixed.c"
 $38 = $8; //@line 225 "fixed.c"
 $39 = $3; //@line 225 "fixed.c"
 $40 = ((($39)) + -8|0); //@line 225 "fixed.c"
 $41 = HEAP32[$40>>2]|0; //@line 225 "fixed.c"
 $42 = $3; //@line 225 "fixed.c"
 $43 = ((($42)) + -12|0); //@line 225 "fixed.c"
 $44 = HEAP32[$43>>2]|0; //@line 225 "fixed.c"
 $45 = $44<<1; //@line 225 "fixed.c"
 $46 = (($41) - ($45))|0; //@line 225 "fixed.c"
 $47 = $3; //@line 225 "fixed.c"
 $48 = ((($47)) + -16|0); //@line 225 "fixed.c"
 $49 = HEAP32[$48>>2]|0; //@line 225 "fixed.c"
 $50 = (($46) + ($49))|0; //@line 225 "fixed.c"
 $51 = (($38) - ($50))|0; //@line 225 "fixed.c"
 $9 = $51; //@line 225 "fixed.c"
 $12 = 0; //@line 227 "fixed.c"
 $13 = 0; //@line 227 "fixed.c"
 $14 = 0; //@line 227 "fixed.c"
 $15 = 0; //@line 227 "fixed.c"
 $16 = 0; //@line 227 "fixed.c"
 $17 = 0; //@line 230 "fixed.c"
 while(1) {
  $52 = $17; //@line 230 "fixed.c"
  $53 = $4; //@line 230 "fixed.c"
  $54 = ($52>>>0)<($53>>>0); //@line 230 "fixed.c"
  if (!($54)) {
   break;
  }
  $55 = $3; //@line 231 "fixed.c"
  $56 = $17; //@line 231 "fixed.c"
  $57 = (($55) + ($56<<2)|0); //@line 231 "fixed.c"
  $58 = HEAP32[$57>>2]|0; //@line 231 "fixed.c"
  $10 = $58; //@line 231 "fixed.c"
  $59 = $10; //@line 231 "fixed.c"
  $60 = ($59|0)<(0); //@line 231 "fixed.c"
  $61 = $10; //@line 231 "fixed.c"
  $62 = (0 - ($61))|0; //@line 231 "fixed.c"
  $63 = $60 ? $62 : $61; //@line 231 "fixed.c"
  $64 = $12; //@line 231 "fixed.c"
  $65 = (($64) + ($63))|0; //@line 231 "fixed.c"
  $12 = $65; //@line 231 "fixed.c"
  $66 = $10; //@line 231 "fixed.c"
  $11 = $66; //@line 231 "fixed.c"
  $67 = $6; //@line 232 "fixed.c"
  $68 = $10; //@line 232 "fixed.c"
  $69 = (($68) - ($67))|0; //@line 232 "fixed.c"
  $10 = $69; //@line 232 "fixed.c"
  $70 = $10; //@line 232 "fixed.c"
  $71 = ($70|0)<(0); //@line 232 "fixed.c"
  $72 = $10; //@line 232 "fixed.c"
  $73 = (0 - ($72))|0; //@line 232 "fixed.c"
  $74 = $71 ? $73 : $72; //@line 232 "fixed.c"
  $75 = $13; //@line 232 "fixed.c"
  $76 = (($75) + ($74))|0; //@line 232 "fixed.c"
  $13 = $76; //@line 232 "fixed.c"
  $77 = $11; //@line 232 "fixed.c"
  $6 = $77; //@line 232 "fixed.c"
  $78 = $10; //@line 232 "fixed.c"
  $11 = $78; //@line 232 "fixed.c"
  $79 = $7; //@line 233 "fixed.c"
  $80 = $10; //@line 233 "fixed.c"
  $81 = (($80) - ($79))|0; //@line 233 "fixed.c"
  $10 = $81; //@line 233 "fixed.c"
  $82 = $10; //@line 233 "fixed.c"
  $83 = ($82|0)<(0); //@line 233 "fixed.c"
  $84 = $10; //@line 233 "fixed.c"
  $85 = (0 - ($84))|0; //@line 233 "fixed.c"
  $86 = $83 ? $85 : $84; //@line 233 "fixed.c"
  $87 = $14; //@line 233 "fixed.c"
  $88 = (($87) + ($86))|0; //@line 233 "fixed.c"
  $14 = $88; //@line 233 "fixed.c"
  $89 = $11; //@line 233 "fixed.c"
  $7 = $89; //@line 233 "fixed.c"
  $90 = $10; //@line 233 "fixed.c"
  $11 = $90; //@line 233 "fixed.c"
  $91 = $8; //@line 234 "fixed.c"
  $92 = $10; //@line 234 "fixed.c"
  $93 = (($92) - ($91))|0; //@line 234 "fixed.c"
  $10 = $93; //@line 234 "fixed.c"
  $94 = $10; //@line 234 "fixed.c"
  $95 = ($94|0)<(0); //@line 234 "fixed.c"
  $96 = $10; //@line 234 "fixed.c"
  $97 = (0 - ($96))|0; //@line 234 "fixed.c"
  $98 = $95 ? $97 : $96; //@line 234 "fixed.c"
  $99 = $15; //@line 234 "fixed.c"
  $100 = (($99) + ($98))|0; //@line 234 "fixed.c"
  $15 = $100; //@line 234 "fixed.c"
  $101 = $11; //@line 234 "fixed.c"
  $8 = $101; //@line 234 "fixed.c"
  $102 = $10; //@line 234 "fixed.c"
  $11 = $102; //@line 234 "fixed.c"
  $103 = $9; //@line 235 "fixed.c"
  $104 = $10; //@line 235 "fixed.c"
  $105 = (($104) - ($103))|0; //@line 235 "fixed.c"
  $10 = $105; //@line 235 "fixed.c"
  $106 = $10; //@line 235 "fixed.c"
  $107 = ($106|0)<(0); //@line 235 "fixed.c"
  $108 = $10; //@line 235 "fixed.c"
  $109 = (0 - ($108))|0; //@line 235 "fixed.c"
  $110 = $107 ? $109 : $108; //@line 235 "fixed.c"
  $111 = $16; //@line 235 "fixed.c"
  $112 = (($111) + ($110))|0; //@line 235 "fixed.c"
  $16 = $112; //@line 235 "fixed.c"
  $113 = $11; //@line 235 "fixed.c"
  $9 = $113; //@line 235 "fixed.c"
  $114 = $17; //@line 230 "fixed.c"
  $115 = (($114) + 1)|0; //@line 230 "fixed.c"
  $17 = $115; //@line 230 "fixed.c"
 }
 $116 = $12; //@line 238 "fixed.c"
 $117 = $13; //@line 238 "fixed.c"
 $118 = $14; //@line 238 "fixed.c"
 $119 = ($117>>>0)<($118>>>0); //@line 238 "fixed.c"
 $120 = $13; //@line 238 "fixed.c"
 $121 = $14; //@line 238 "fixed.c"
 $122 = $119 ? $120 : $121; //@line 238 "fixed.c"
 $123 = $15; //@line 238 "fixed.c"
 $124 = ($122>>>0)<($123>>>0); //@line 238 "fixed.c"
 if ($124) {
  $125 = $13; //@line 238 "fixed.c"
  $126 = $14; //@line 238 "fixed.c"
  $127 = ($125>>>0)<($126>>>0); //@line 238 "fixed.c"
  $128 = $13; //@line 238 "fixed.c"
  $129 = $14; //@line 238 "fixed.c"
  $130 = $127 ? $128 : $129; //@line 238 "fixed.c"
  $134 = $130;
 } else {
  $131 = $15; //@line 238 "fixed.c"
  $134 = $131;
 }
 $132 = $16; //@line 238 "fixed.c"
 $133 = ($134>>>0)<($132>>>0); //@line 238 "fixed.c"
 do {
  if ($133) {
   $135 = $13; //@line 238 "fixed.c"
   $136 = $14; //@line 238 "fixed.c"
   $137 = ($135>>>0)<($136>>>0); //@line 238 "fixed.c"
   $138 = $13; //@line 238 "fixed.c"
   $139 = $14; //@line 238 "fixed.c"
   $140 = $137 ? $138 : $139; //@line 238 "fixed.c"
   $141 = $15; //@line 238 "fixed.c"
   $142 = ($140>>>0)<($141>>>0); //@line 238 "fixed.c"
   if ($142) {
    $143 = $13; //@line 238 "fixed.c"
    $144 = $14; //@line 238 "fixed.c"
    $145 = ($143>>>0)<($144>>>0); //@line 238 "fixed.c"
    $146 = $13; //@line 238 "fixed.c"
    $147 = $14; //@line 238 "fixed.c"
    $148 = $145 ? $146 : $147; //@line 238 "fixed.c"
    $152 = $148;
    break;
   } else {
    $149 = $15; //@line 238 "fixed.c"
    $152 = $149;
    break;
   }
  } else {
   $150 = $16; //@line 238 "fixed.c"
   $152 = $150;
  }
 } while(0);
 $151 = ($116>>>0)<($152>>>0); //@line 238 "fixed.c"
 do {
  if ($151) {
   $18 = 0; //@line 239 "fixed.c"
  } else {
   $153 = $13; //@line 240 "fixed.c"
   $154 = $14; //@line 240 "fixed.c"
   $155 = $15; //@line 240 "fixed.c"
   $156 = ($154>>>0)<($155>>>0); //@line 240 "fixed.c"
   $157 = $14; //@line 240 "fixed.c"
   $158 = $15; //@line 240 "fixed.c"
   $159 = $156 ? $157 : $158; //@line 240 "fixed.c"
   $160 = $16; //@line 240 "fixed.c"
   $161 = ($159>>>0)<($160>>>0); //@line 240 "fixed.c"
   if ($161) {
    $162 = $14; //@line 240 "fixed.c"
    $163 = $15; //@line 240 "fixed.c"
    $164 = ($162>>>0)<($163>>>0); //@line 240 "fixed.c"
    $165 = $14; //@line 240 "fixed.c"
    $166 = $15; //@line 240 "fixed.c"
    $167 = $164 ? $165 : $166; //@line 240 "fixed.c"
    $170 = $167;
   } else {
    $168 = $16; //@line 240 "fixed.c"
    $170 = $168;
   }
   $169 = ($153>>>0)<($170>>>0); //@line 240 "fixed.c"
   if ($169) {
    $18 = 1; //@line 241 "fixed.c"
    break;
   }
   $171 = $14; //@line 242 "fixed.c"
   $172 = $15; //@line 242 "fixed.c"
   $173 = $16; //@line 242 "fixed.c"
   $174 = ($172>>>0)<($173>>>0); //@line 242 "fixed.c"
   $175 = $15; //@line 242 "fixed.c"
   $176 = $16; //@line 242 "fixed.c"
   $177 = $174 ? $175 : $176; //@line 242 "fixed.c"
   $178 = ($171>>>0)<($177>>>0); //@line 242 "fixed.c"
   if ($178) {
    $18 = 2; //@line 243 "fixed.c"
    break;
   }
   $179 = $15; //@line 244 "fixed.c"
   $180 = $16; //@line 244 "fixed.c"
   $181 = ($179>>>0)<($180>>>0); //@line 244 "fixed.c"
   if ($181) {
    $18 = 3; //@line 245 "fixed.c"
    break;
   } else {
    $18 = 4; //@line 247 "fixed.c"
    break;
   }
  }
 } while(0);
 $182 = $12; //@line 258 "fixed.c"
 $183 = ($182>>>0)>(0); //@line 258 "fixed.c"
 if ($183) {
  $184 = $12; //@line 258 "fixed.c"
  $185 = (+($184>>>0)); //@line 258 "fixed.c"
  $186 = 0.69314718055994529 * $185; //@line 258 "fixed.c"
  $187 = $4; //@line 258 "fixed.c"
  $188 = (+($187>>>0)); //@line 258 "fixed.c"
  $189 = $186 / $188; //@line 258 "fixed.c"
  $190 = (+Math_log((+$189))); //@line 258 "fixed.c"
  $191 = $190 / 0.69314718055994529; //@line 258 "fixed.c"
  $193 = $191;
 } else {
  $193 = 0.0;
 }
 $192 = $193; //@line 258 "fixed.c"
 $194 = $5; //@line 258 "fixed.c"
 HEAPF32[$194>>2] = $192; //@line 258 "fixed.c"
 $195 = $13; //@line 259 "fixed.c"
 $196 = ($195>>>0)>(0); //@line 259 "fixed.c"
 if ($196) {
  $197 = $13; //@line 259 "fixed.c"
  $198 = (+($197>>>0)); //@line 259 "fixed.c"
  $199 = 0.69314718055994529 * $198; //@line 259 "fixed.c"
  $200 = $4; //@line 259 "fixed.c"
  $201 = (+($200>>>0)); //@line 259 "fixed.c"
  $202 = $199 / $201; //@line 259 "fixed.c"
  $203 = (+Math_log((+$202))); //@line 259 "fixed.c"
  $204 = $203 / 0.69314718055994529; //@line 259 "fixed.c"
  $206 = $204;
 } else {
  $206 = 0.0;
 }
 $205 = $206; //@line 259 "fixed.c"
 $207 = $5; //@line 259 "fixed.c"
 $208 = ((($207)) + 4|0); //@line 259 "fixed.c"
 HEAPF32[$208>>2] = $205; //@line 259 "fixed.c"
 $209 = $14; //@line 260 "fixed.c"
 $210 = ($209>>>0)>(0); //@line 260 "fixed.c"
 if ($210) {
  $211 = $14; //@line 260 "fixed.c"
  $212 = (+($211>>>0)); //@line 260 "fixed.c"
  $213 = 0.69314718055994529 * $212; //@line 260 "fixed.c"
  $214 = $4; //@line 260 "fixed.c"
  $215 = (+($214>>>0)); //@line 260 "fixed.c"
  $216 = $213 / $215; //@line 260 "fixed.c"
  $217 = (+Math_log((+$216))); //@line 260 "fixed.c"
  $218 = $217 / 0.69314718055994529; //@line 260 "fixed.c"
  $220 = $218;
 } else {
  $220 = 0.0;
 }
 $219 = $220; //@line 260 "fixed.c"
 $221 = $5; //@line 260 "fixed.c"
 $222 = ((($221)) + 8|0); //@line 260 "fixed.c"
 HEAPF32[$222>>2] = $219; //@line 260 "fixed.c"
 $223 = $15; //@line 261 "fixed.c"
 $224 = ($223>>>0)>(0); //@line 261 "fixed.c"
 if ($224) {
  $225 = $15; //@line 261 "fixed.c"
  $226 = (+($225>>>0)); //@line 261 "fixed.c"
  $227 = 0.69314718055994529 * $226; //@line 261 "fixed.c"
  $228 = $4; //@line 261 "fixed.c"
  $229 = (+($228>>>0)); //@line 261 "fixed.c"
  $230 = $227 / $229; //@line 261 "fixed.c"
  $231 = (+Math_log((+$230))); //@line 261 "fixed.c"
  $232 = $231 / 0.69314718055994529; //@line 261 "fixed.c"
  $234 = $232;
 } else {
  $234 = 0.0;
 }
 $233 = $234; //@line 261 "fixed.c"
 $235 = $5; //@line 261 "fixed.c"
 $236 = ((($235)) + 12|0); //@line 261 "fixed.c"
 HEAPF32[$236>>2] = $233; //@line 261 "fixed.c"
 $237 = $16; //@line 262 "fixed.c"
 $238 = ($237>>>0)>(0); //@line 262 "fixed.c"
 if (!($238)) {
  $248 = 0.0;
  $247 = $248; //@line 262 "fixed.c"
  $249 = $5; //@line 262 "fixed.c"
  $250 = ((($249)) + 16|0); //@line 262 "fixed.c"
  HEAPF32[$250>>2] = $247; //@line 262 "fixed.c"
  $251 = $18; //@line 271 "fixed.c"
  STACKTOP = sp;return ($251|0); //@line 271 "fixed.c"
 }
 $239 = $16; //@line 262 "fixed.c"
 $240 = (+($239>>>0)); //@line 262 "fixed.c"
 $241 = 0.69314718055994529 * $240; //@line 262 "fixed.c"
 $242 = $4; //@line 262 "fixed.c"
 $243 = (+($242>>>0)); //@line 262 "fixed.c"
 $244 = $241 / $243; //@line 262 "fixed.c"
 $245 = (+Math_log((+$244))); //@line 262 "fixed.c"
 $246 = $245 / 0.69314718055994529; //@line 262 "fixed.c"
 $248 = $246;
 $247 = $248; //@line 262 "fixed.c"
 $249 = $5; //@line 262 "fixed.c"
 $250 = ((($249)) + 16|0); //@line 262 "fixed.c"
 HEAPF32[$250>>2] = $247; //@line 262 "fixed.c"
 $251 = $18; //@line 271 "fixed.c"
 STACKTOP = sp;return ($251|0); //@line 271 "fixed.c"
}
function _FLAC__fixed_compute_best_predictor_wide($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0;
 var $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0.0, $572 = 0.0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0.0, $603 = 0.0, $604 = 0.0;
 var $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0.0, $659 = 0.0;
 var $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp + 32|0;
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $3; //@line 280 "fixed.c"
 $20 = ((($19)) + -4|0); //@line 280 "fixed.c"
 $21 = HEAP32[$20>>2]|0; //@line 280 "fixed.c"
 $6 = $21; //@line 280 "fixed.c"
 $22 = $3; //@line 281 "fixed.c"
 $23 = ((($22)) + -4|0); //@line 281 "fixed.c"
 $24 = HEAP32[$23>>2]|0; //@line 281 "fixed.c"
 $25 = $3; //@line 281 "fixed.c"
 $26 = ((($25)) + -8|0); //@line 281 "fixed.c"
 $27 = HEAP32[$26>>2]|0; //@line 281 "fixed.c"
 $28 = (($24) - ($27))|0; //@line 281 "fixed.c"
 $7 = $28; //@line 281 "fixed.c"
 $29 = $7; //@line 282 "fixed.c"
 $30 = $3; //@line 282 "fixed.c"
 $31 = ((($30)) + -8|0); //@line 282 "fixed.c"
 $32 = HEAP32[$31>>2]|0; //@line 282 "fixed.c"
 $33 = $3; //@line 282 "fixed.c"
 $34 = ((($33)) + -12|0); //@line 282 "fixed.c"
 $35 = HEAP32[$34>>2]|0; //@line 282 "fixed.c"
 $36 = (($32) - ($35))|0; //@line 282 "fixed.c"
 $37 = (($29) - ($36))|0; //@line 282 "fixed.c"
 $8 = $37; //@line 282 "fixed.c"
 $38 = $8; //@line 283 "fixed.c"
 $39 = $3; //@line 283 "fixed.c"
 $40 = ((($39)) + -8|0); //@line 283 "fixed.c"
 $41 = HEAP32[$40>>2]|0; //@line 283 "fixed.c"
 $42 = $3; //@line 283 "fixed.c"
 $43 = ((($42)) + -12|0); //@line 283 "fixed.c"
 $44 = HEAP32[$43>>2]|0; //@line 283 "fixed.c"
 $45 = $44<<1; //@line 283 "fixed.c"
 $46 = (($41) - ($45))|0; //@line 283 "fixed.c"
 $47 = $3; //@line 283 "fixed.c"
 $48 = ((($47)) + -16|0); //@line 283 "fixed.c"
 $49 = HEAP32[$48>>2]|0; //@line 283 "fixed.c"
 $50 = (($46) + ($49))|0; //@line 283 "fixed.c"
 $51 = (($38) - ($50))|0; //@line 283 "fixed.c"
 $9 = $51; //@line 283 "fixed.c"
 $52 = $12; //@line 289 "fixed.c"
 $53 = $52; //@line 289 "fixed.c"
 HEAP32[$53>>2] = 0; //@line 289 "fixed.c"
 $54 = (($52) + 4)|0; //@line 289 "fixed.c"
 $55 = $54; //@line 289 "fixed.c"
 HEAP32[$55>>2] = 0; //@line 289 "fixed.c"
 $56 = $13; //@line 289 "fixed.c"
 $57 = $56; //@line 289 "fixed.c"
 HEAP32[$57>>2] = 0; //@line 289 "fixed.c"
 $58 = (($56) + 4)|0; //@line 289 "fixed.c"
 $59 = $58; //@line 289 "fixed.c"
 HEAP32[$59>>2] = 0; //@line 289 "fixed.c"
 $60 = $14; //@line 289 "fixed.c"
 $61 = $60; //@line 289 "fixed.c"
 HEAP32[$61>>2] = 0; //@line 289 "fixed.c"
 $62 = (($60) + 4)|0; //@line 289 "fixed.c"
 $63 = $62; //@line 289 "fixed.c"
 HEAP32[$63>>2] = 0; //@line 289 "fixed.c"
 $64 = $15; //@line 289 "fixed.c"
 $65 = $64; //@line 289 "fixed.c"
 HEAP32[$65>>2] = 0; //@line 289 "fixed.c"
 $66 = (($64) + 4)|0; //@line 289 "fixed.c"
 $67 = $66; //@line 289 "fixed.c"
 HEAP32[$67>>2] = 0; //@line 289 "fixed.c"
 $68 = $16; //@line 289 "fixed.c"
 $69 = $68; //@line 289 "fixed.c"
 HEAP32[$69>>2] = 0; //@line 289 "fixed.c"
 $70 = (($68) + 4)|0; //@line 289 "fixed.c"
 $71 = $70; //@line 289 "fixed.c"
 HEAP32[$71>>2] = 0; //@line 289 "fixed.c"
 $17 = 0; //@line 292 "fixed.c"
 while(1) {
  $72 = $17; //@line 292 "fixed.c"
  $73 = $4; //@line 292 "fixed.c"
  $74 = ($72>>>0)<($73>>>0); //@line 292 "fixed.c"
  if (!($74)) {
   break;
  }
  $75 = $3; //@line 293 "fixed.c"
  $76 = $17; //@line 293 "fixed.c"
  $77 = (($75) + ($76<<2)|0); //@line 293 "fixed.c"
  $78 = HEAP32[$77>>2]|0; //@line 293 "fixed.c"
  $10 = $78; //@line 293 "fixed.c"
  $79 = $10; //@line 293 "fixed.c"
  $80 = ($79|0)<(0); //@line 293 "fixed.c"
  $81 = $10; //@line 293 "fixed.c"
  $82 = (0 - ($81))|0; //@line 293 "fixed.c"
  $83 = $80 ? $82 : $81; //@line 293 "fixed.c"
  $84 = $12; //@line 293 "fixed.c"
  $85 = $84; //@line 293 "fixed.c"
  $86 = HEAP32[$85>>2]|0; //@line 293 "fixed.c"
  $87 = (($84) + 4)|0; //@line 293 "fixed.c"
  $88 = $87; //@line 293 "fixed.c"
  $89 = HEAP32[$88>>2]|0; //@line 293 "fixed.c"
  $90 = (_i64Add(($86|0),($89|0),($83|0),0)|0); //@line 293 "fixed.c"
  $91 = tempRet0; //@line 293 "fixed.c"
  $92 = $12; //@line 293 "fixed.c"
  $93 = $92; //@line 293 "fixed.c"
  HEAP32[$93>>2] = $90; //@line 293 "fixed.c"
  $94 = (($92) + 4)|0; //@line 293 "fixed.c"
  $95 = $94; //@line 293 "fixed.c"
  HEAP32[$95>>2] = $91; //@line 293 "fixed.c"
  $96 = $10; //@line 293 "fixed.c"
  $11 = $96; //@line 293 "fixed.c"
  $97 = $6; //@line 294 "fixed.c"
  $98 = $10; //@line 294 "fixed.c"
  $99 = (($98) - ($97))|0; //@line 294 "fixed.c"
  $10 = $99; //@line 294 "fixed.c"
  $100 = $10; //@line 294 "fixed.c"
  $101 = ($100|0)<(0); //@line 294 "fixed.c"
  $102 = $10; //@line 294 "fixed.c"
  $103 = (0 - ($102))|0; //@line 294 "fixed.c"
  $104 = $101 ? $103 : $102; //@line 294 "fixed.c"
  $105 = $13; //@line 294 "fixed.c"
  $106 = $105; //@line 294 "fixed.c"
  $107 = HEAP32[$106>>2]|0; //@line 294 "fixed.c"
  $108 = (($105) + 4)|0; //@line 294 "fixed.c"
  $109 = $108; //@line 294 "fixed.c"
  $110 = HEAP32[$109>>2]|0; //@line 294 "fixed.c"
  $111 = (_i64Add(($107|0),($110|0),($104|0),0)|0); //@line 294 "fixed.c"
  $112 = tempRet0; //@line 294 "fixed.c"
  $113 = $13; //@line 294 "fixed.c"
  $114 = $113; //@line 294 "fixed.c"
  HEAP32[$114>>2] = $111; //@line 294 "fixed.c"
  $115 = (($113) + 4)|0; //@line 294 "fixed.c"
  $116 = $115; //@line 294 "fixed.c"
  HEAP32[$116>>2] = $112; //@line 294 "fixed.c"
  $117 = $11; //@line 294 "fixed.c"
  $6 = $117; //@line 294 "fixed.c"
  $118 = $10; //@line 294 "fixed.c"
  $11 = $118; //@line 294 "fixed.c"
  $119 = $7; //@line 295 "fixed.c"
  $120 = $10; //@line 295 "fixed.c"
  $121 = (($120) - ($119))|0; //@line 295 "fixed.c"
  $10 = $121; //@line 295 "fixed.c"
  $122 = $10; //@line 295 "fixed.c"
  $123 = ($122|0)<(0); //@line 295 "fixed.c"
  $124 = $10; //@line 295 "fixed.c"
  $125 = (0 - ($124))|0; //@line 295 "fixed.c"
  $126 = $123 ? $125 : $124; //@line 295 "fixed.c"
  $127 = $14; //@line 295 "fixed.c"
  $128 = $127; //@line 295 "fixed.c"
  $129 = HEAP32[$128>>2]|0; //@line 295 "fixed.c"
  $130 = (($127) + 4)|0; //@line 295 "fixed.c"
  $131 = $130; //@line 295 "fixed.c"
  $132 = HEAP32[$131>>2]|0; //@line 295 "fixed.c"
  $133 = (_i64Add(($129|0),($132|0),($126|0),0)|0); //@line 295 "fixed.c"
  $134 = tempRet0; //@line 295 "fixed.c"
  $135 = $14; //@line 295 "fixed.c"
  $136 = $135; //@line 295 "fixed.c"
  HEAP32[$136>>2] = $133; //@line 295 "fixed.c"
  $137 = (($135) + 4)|0; //@line 295 "fixed.c"
  $138 = $137; //@line 295 "fixed.c"
  HEAP32[$138>>2] = $134; //@line 295 "fixed.c"
  $139 = $11; //@line 295 "fixed.c"
  $7 = $139; //@line 295 "fixed.c"
  $140 = $10; //@line 295 "fixed.c"
  $11 = $140; //@line 295 "fixed.c"
  $141 = $8; //@line 296 "fixed.c"
  $142 = $10; //@line 296 "fixed.c"
  $143 = (($142) - ($141))|0; //@line 296 "fixed.c"
  $10 = $143; //@line 296 "fixed.c"
  $144 = $10; //@line 296 "fixed.c"
  $145 = ($144|0)<(0); //@line 296 "fixed.c"
  $146 = $10; //@line 296 "fixed.c"
  $147 = (0 - ($146))|0; //@line 296 "fixed.c"
  $148 = $145 ? $147 : $146; //@line 296 "fixed.c"
  $149 = $15; //@line 296 "fixed.c"
  $150 = $149; //@line 296 "fixed.c"
  $151 = HEAP32[$150>>2]|0; //@line 296 "fixed.c"
  $152 = (($149) + 4)|0; //@line 296 "fixed.c"
  $153 = $152; //@line 296 "fixed.c"
  $154 = HEAP32[$153>>2]|0; //@line 296 "fixed.c"
  $155 = (_i64Add(($151|0),($154|0),($148|0),0)|0); //@line 296 "fixed.c"
  $156 = tempRet0; //@line 296 "fixed.c"
  $157 = $15; //@line 296 "fixed.c"
  $158 = $157; //@line 296 "fixed.c"
  HEAP32[$158>>2] = $155; //@line 296 "fixed.c"
  $159 = (($157) + 4)|0; //@line 296 "fixed.c"
  $160 = $159; //@line 296 "fixed.c"
  HEAP32[$160>>2] = $156; //@line 296 "fixed.c"
  $161 = $11; //@line 296 "fixed.c"
  $8 = $161; //@line 296 "fixed.c"
  $162 = $10; //@line 296 "fixed.c"
  $11 = $162; //@line 296 "fixed.c"
  $163 = $9; //@line 297 "fixed.c"
  $164 = $10; //@line 297 "fixed.c"
  $165 = (($164) - ($163))|0; //@line 297 "fixed.c"
  $10 = $165; //@line 297 "fixed.c"
  $166 = $10; //@line 297 "fixed.c"
  $167 = ($166|0)<(0); //@line 297 "fixed.c"
  $168 = $10; //@line 297 "fixed.c"
  $169 = (0 - ($168))|0; //@line 297 "fixed.c"
  $170 = $167 ? $169 : $168; //@line 297 "fixed.c"
  $171 = $16; //@line 297 "fixed.c"
  $172 = $171; //@line 297 "fixed.c"
  $173 = HEAP32[$172>>2]|0; //@line 297 "fixed.c"
  $174 = (($171) + 4)|0; //@line 297 "fixed.c"
  $175 = $174; //@line 297 "fixed.c"
  $176 = HEAP32[$175>>2]|0; //@line 297 "fixed.c"
  $177 = (_i64Add(($173|0),($176|0),($170|0),0)|0); //@line 297 "fixed.c"
  $178 = tempRet0; //@line 297 "fixed.c"
  $179 = $16; //@line 297 "fixed.c"
  $180 = $179; //@line 297 "fixed.c"
  HEAP32[$180>>2] = $177; //@line 297 "fixed.c"
  $181 = (($179) + 4)|0; //@line 297 "fixed.c"
  $182 = $181; //@line 297 "fixed.c"
  HEAP32[$182>>2] = $178; //@line 297 "fixed.c"
  $183 = $11; //@line 297 "fixed.c"
  $9 = $183; //@line 297 "fixed.c"
  $184 = $17; //@line 292 "fixed.c"
  $185 = (($184) + 1)|0; //@line 292 "fixed.c"
  $17 = $185; //@line 292 "fixed.c"
 }
 $186 = $12; //@line 300 "fixed.c"
 $187 = $186; //@line 300 "fixed.c"
 $188 = HEAP32[$187>>2]|0; //@line 300 "fixed.c"
 $189 = (($186) + 4)|0; //@line 300 "fixed.c"
 $190 = $189; //@line 300 "fixed.c"
 $191 = HEAP32[$190>>2]|0; //@line 300 "fixed.c"
 $192 = $13; //@line 300 "fixed.c"
 $193 = $192; //@line 300 "fixed.c"
 $194 = HEAP32[$193>>2]|0; //@line 300 "fixed.c"
 $195 = (($192) + 4)|0; //@line 300 "fixed.c"
 $196 = $195; //@line 300 "fixed.c"
 $197 = HEAP32[$196>>2]|0; //@line 300 "fixed.c"
 $198 = $14; //@line 300 "fixed.c"
 $199 = $198; //@line 300 "fixed.c"
 $200 = HEAP32[$199>>2]|0; //@line 300 "fixed.c"
 $201 = (($198) + 4)|0; //@line 300 "fixed.c"
 $202 = $201; //@line 300 "fixed.c"
 $203 = HEAP32[$202>>2]|0; //@line 300 "fixed.c"
 $204 = ($197>>>0)<($203>>>0); //@line 300 "fixed.c"
 $205 = ($194>>>0)<($200>>>0); //@line 300 "fixed.c"
 $206 = ($197|0)==($203|0); //@line 300 "fixed.c"
 $207 = $206 & $205; //@line 300 "fixed.c"
 $208 = $204 | $207; //@line 300 "fixed.c"
 $209 = $13; //@line 300 "fixed.c"
 $210 = $209; //@line 300 "fixed.c"
 $211 = HEAP32[$210>>2]|0; //@line 300 "fixed.c"
 $212 = (($209) + 4)|0; //@line 300 "fixed.c"
 $213 = $212; //@line 300 "fixed.c"
 $214 = HEAP32[$213>>2]|0; //@line 300 "fixed.c"
 $215 = $14; //@line 300 "fixed.c"
 $216 = $215; //@line 300 "fixed.c"
 $217 = HEAP32[$216>>2]|0; //@line 300 "fixed.c"
 $218 = (($215) + 4)|0; //@line 300 "fixed.c"
 $219 = $218; //@line 300 "fixed.c"
 $220 = HEAP32[$219>>2]|0; //@line 300 "fixed.c"
 $221 = $208 ? $211 : $217; //@line 300 "fixed.c"
 $222 = $208 ? $214 : $220; //@line 300 "fixed.c"
 $223 = $15; //@line 300 "fixed.c"
 $224 = $223; //@line 300 "fixed.c"
 $225 = HEAP32[$224>>2]|0; //@line 300 "fixed.c"
 $226 = (($223) + 4)|0; //@line 300 "fixed.c"
 $227 = $226; //@line 300 "fixed.c"
 $228 = HEAP32[$227>>2]|0; //@line 300 "fixed.c"
 $229 = ($222>>>0)<($228>>>0); //@line 300 "fixed.c"
 $230 = ($221>>>0)<($225>>>0); //@line 300 "fixed.c"
 $231 = ($222|0)==($228|0); //@line 300 "fixed.c"
 $232 = $231 & $230; //@line 300 "fixed.c"
 $233 = $229 | $232; //@line 300 "fixed.c"
 if ($233) {
  $234 = $13; //@line 300 "fixed.c"
  $235 = $234; //@line 300 "fixed.c"
  $236 = HEAP32[$235>>2]|0; //@line 300 "fixed.c"
  $237 = (($234) + 4)|0; //@line 300 "fixed.c"
  $238 = $237; //@line 300 "fixed.c"
  $239 = HEAP32[$238>>2]|0; //@line 300 "fixed.c"
  $240 = $14; //@line 300 "fixed.c"
  $241 = $240; //@line 300 "fixed.c"
  $242 = HEAP32[$241>>2]|0; //@line 300 "fixed.c"
  $243 = (($240) + 4)|0; //@line 300 "fixed.c"
  $244 = $243; //@line 300 "fixed.c"
  $245 = HEAP32[$244>>2]|0; //@line 300 "fixed.c"
  $246 = ($239>>>0)<($245>>>0); //@line 300 "fixed.c"
  $247 = ($236>>>0)<($242>>>0); //@line 300 "fixed.c"
  $248 = ($239|0)==($245|0); //@line 300 "fixed.c"
  $249 = $248 & $247; //@line 300 "fixed.c"
  $250 = $246 | $249; //@line 300 "fixed.c"
  $251 = $13; //@line 300 "fixed.c"
  $252 = $251; //@line 300 "fixed.c"
  $253 = HEAP32[$252>>2]|0; //@line 300 "fixed.c"
  $254 = (($251) + 4)|0; //@line 300 "fixed.c"
  $255 = $254; //@line 300 "fixed.c"
  $256 = HEAP32[$255>>2]|0; //@line 300 "fixed.c"
  $257 = $14; //@line 300 "fixed.c"
  $258 = $257; //@line 300 "fixed.c"
  $259 = HEAP32[$258>>2]|0; //@line 300 "fixed.c"
  $260 = (($257) + 4)|0; //@line 300 "fixed.c"
  $261 = $260; //@line 300 "fixed.c"
  $262 = HEAP32[$261>>2]|0; //@line 300 "fixed.c"
  $263 = $250 ? $253 : $259; //@line 300 "fixed.c"
  $264 = $250 ? $256 : $262; //@line 300 "fixed.c"
  $278 = $264;$280 = $263;
 } else {
  $265 = $15; //@line 300 "fixed.c"
  $266 = $265; //@line 300 "fixed.c"
  $267 = HEAP32[$266>>2]|0; //@line 300 "fixed.c"
  $268 = (($265) + 4)|0; //@line 300 "fixed.c"
  $269 = $268; //@line 300 "fixed.c"
  $270 = HEAP32[$269>>2]|0; //@line 300 "fixed.c"
  $278 = $270;$280 = $267;
 }
 $271 = $16; //@line 300 "fixed.c"
 $272 = $271; //@line 300 "fixed.c"
 $273 = HEAP32[$272>>2]|0; //@line 300 "fixed.c"
 $274 = (($271) + 4)|0; //@line 300 "fixed.c"
 $275 = $274; //@line 300 "fixed.c"
 $276 = HEAP32[$275>>2]|0; //@line 300 "fixed.c"
 $277 = ($278>>>0)<($276>>>0); //@line 300 "fixed.c"
 $279 = ($280>>>0)<($273>>>0); //@line 300 "fixed.c"
 $281 = ($278|0)==($276|0); //@line 300 "fixed.c"
 $282 = $281 & $279; //@line 300 "fixed.c"
 $283 = $277 | $282; //@line 300 "fixed.c"
 do {
  if ($283) {
   $284 = $13; //@line 300 "fixed.c"
   $285 = $284; //@line 300 "fixed.c"
   $286 = HEAP32[$285>>2]|0; //@line 300 "fixed.c"
   $287 = (($284) + 4)|0; //@line 300 "fixed.c"
   $288 = $287; //@line 300 "fixed.c"
   $289 = HEAP32[$288>>2]|0; //@line 300 "fixed.c"
   $290 = $14; //@line 300 "fixed.c"
   $291 = $290; //@line 300 "fixed.c"
   $292 = HEAP32[$291>>2]|0; //@line 300 "fixed.c"
   $293 = (($290) + 4)|0; //@line 300 "fixed.c"
   $294 = $293; //@line 300 "fixed.c"
   $295 = HEAP32[$294>>2]|0; //@line 300 "fixed.c"
   $296 = ($289>>>0)<($295>>>0); //@line 300 "fixed.c"
   $297 = ($286>>>0)<($292>>>0); //@line 300 "fixed.c"
   $298 = ($289|0)==($295|0); //@line 300 "fixed.c"
   $299 = $298 & $297; //@line 300 "fixed.c"
   $300 = $296 | $299; //@line 300 "fixed.c"
   $301 = $13; //@line 300 "fixed.c"
   $302 = $301; //@line 300 "fixed.c"
   $303 = HEAP32[$302>>2]|0; //@line 300 "fixed.c"
   $304 = (($301) + 4)|0; //@line 300 "fixed.c"
   $305 = $304; //@line 300 "fixed.c"
   $306 = HEAP32[$305>>2]|0; //@line 300 "fixed.c"
   $307 = $14; //@line 300 "fixed.c"
   $308 = $307; //@line 300 "fixed.c"
   $309 = HEAP32[$308>>2]|0; //@line 300 "fixed.c"
   $310 = (($307) + 4)|0; //@line 300 "fixed.c"
   $311 = $310; //@line 300 "fixed.c"
   $312 = HEAP32[$311>>2]|0; //@line 300 "fixed.c"
   $313 = $300 ? $303 : $309; //@line 300 "fixed.c"
   $314 = $300 ? $306 : $312; //@line 300 "fixed.c"
   $315 = $15; //@line 300 "fixed.c"
   $316 = $315; //@line 300 "fixed.c"
   $317 = HEAP32[$316>>2]|0; //@line 300 "fixed.c"
   $318 = (($315) + 4)|0; //@line 300 "fixed.c"
   $319 = $318; //@line 300 "fixed.c"
   $320 = HEAP32[$319>>2]|0; //@line 300 "fixed.c"
   $321 = ($314>>>0)<($320>>>0); //@line 300 "fixed.c"
   $322 = ($313>>>0)<($317>>>0); //@line 300 "fixed.c"
   $323 = ($314|0)==($320|0); //@line 300 "fixed.c"
   $324 = $323 & $322; //@line 300 "fixed.c"
   $325 = $321 | $324; //@line 300 "fixed.c"
   if ($325) {
    $326 = $13; //@line 300 "fixed.c"
    $327 = $326; //@line 300 "fixed.c"
    $328 = HEAP32[$327>>2]|0; //@line 300 "fixed.c"
    $329 = (($326) + 4)|0; //@line 300 "fixed.c"
    $330 = $329; //@line 300 "fixed.c"
    $331 = HEAP32[$330>>2]|0; //@line 300 "fixed.c"
    $332 = $14; //@line 300 "fixed.c"
    $333 = $332; //@line 300 "fixed.c"
    $334 = HEAP32[$333>>2]|0; //@line 300 "fixed.c"
    $335 = (($332) + 4)|0; //@line 300 "fixed.c"
    $336 = $335; //@line 300 "fixed.c"
    $337 = HEAP32[$336>>2]|0; //@line 300 "fixed.c"
    $338 = ($331>>>0)<($337>>>0); //@line 300 "fixed.c"
    $339 = ($328>>>0)<($334>>>0); //@line 300 "fixed.c"
    $340 = ($331|0)==($337|0); //@line 300 "fixed.c"
    $341 = $340 & $339; //@line 300 "fixed.c"
    $342 = $338 | $341; //@line 300 "fixed.c"
    $343 = $13; //@line 300 "fixed.c"
    $344 = $343; //@line 300 "fixed.c"
    $345 = HEAP32[$344>>2]|0; //@line 300 "fixed.c"
    $346 = (($343) + 4)|0; //@line 300 "fixed.c"
    $347 = $346; //@line 300 "fixed.c"
    $348 = HEAP32[$347>>2]|0; //@line 300 "fixed.c"
    $349 = $14; //@line 300 "fixed.c"
    $350 = $349; //@line 300 "fixed.c"
    $351 = HEAP32[$350>>2]|0; //@line 300 "fixed.c"
    $352 = (($349) + 4)|0; //@line 300 "fixed.c"
    $353 = $352; //@line 300 "fixed.c"
    $354 = HEAP32[$353>>2]|0; //@line 300 "fixed.c"
    $355 = $342 ? $345 : $351; //@line 300 "fixed.c"
    $356 = $342 ? $348 : $354; //@line 300 "fixed.c"
    $370 = $356;$372 = $355;
    break;
   } else {
    $357 = $15; //@line 300 "fixed.c"
    $358 = $357; //@line 300 "fixed.c"
    $359 = HEAP32[$358>>2]|0; //@line 300 "fixed.c"
    $360 = (($357) + 4)|0; //@line 300 "fixed.c"
    $361 = $360; //@line 300 "fixed.c"
    $362 = HEAP32[$361>>2]|0; //@line 300 "fixed.c"
    $370 = $362;$372 = $359;
    break;
   }
  } else {
   $363 = $16; //@line 300 "fixed.c"
   $364 = $363; //@line 300 "fixed.c"
   $365 = HEAP32[$364>>2]|0; //@line 300 "fixed.c"
   $366 = (($363) + 4)|0; //@line 300 "fixed.c"
   $367 = $366; //@line 300 "fixed.c"
   $368 = HEAP32[$367>>2]|0; //@line 300 "fixed.c"
   $370 = $368;$372 = $365;
  }
 } while(0);
 $369 = ($191>>>0)<($370>>>0); //@line 300 "fixed.c"
 $371 = ($188>>>0)<($372>>>0); //@line 300 "fixed.c"
 $373 = ($191|0)==($370|0); //@line 300 "fixed.c"
 $374 = $373 & $371; //@line 300 "fixed.c"
 $375 = $369 | $374; //@line 300 "fixed.c"
 do {
  if ($375) {
   $18 = 0; //@line 301 "fixed.c"
  } else {
   $376 = $13; //@line 302 "fixed.c"
   $377 = $376; //@line 302 "fixed.c"
   $378 = HEAP32[$377>>2]|0; //@line 302 "fixed.c"
   $379 = (($376) + 4)|0; //@line 302 "fixed.c"
   $380 = $379; //@line 302 "fixed.c"
   $381 = HEAP32[$380>>2]|0; //@line 302 "fixed.c"
   $382 = $14; //@line 302 "fixed.c"
   $383 = $382; //@line 302 "fixed.c"
   $384 = HEAP32[$383>>2]|0; //@line 302 "fixed.c"
   $385 = (($382) + 4)|0; //@line 302 "fixed.c"
   $386 = $385; //@line 302 "fixed.c"
   $387 = HEAP32[$386>>2]|0; //@line 302 "fixed.c"
   $388 = $15; //@line 302 "fixed.c"
   $389 = $388; //@line 302 "fixed.c"
   $390 = HEAP32[$389>>2]|0; //@line 302 "fixed.c"
   $391 = (($388) + 4)|0; //@line 302 "fixed.c"
   $392 = $391; //@line 302 "fixed.c"
   $393 = HEAP32[$392>>2]|0; //@line 302 "fixed.c"
   $394 = ($387>>>0)<($393>>>0); //@line 302 "fixed.c"
   $395 = ($384>>>0)<($390>>>0); //@line 302 "fixed.c"
   $396 = ($387|0)==($393|0); //@line 302 "fixed.c"
   $397 = $396 & $395; //@line 302 "fixed.c"
   $398 = $394 | $397; //@line 302 "fixed.c"
   $399 = $14; //@line 302 "fixed.c"
   $400 = $399; //@line 302 "fixed.c"
   $401 = HEAP32[$400>>2]|0; //@line 302 "fixed.c"
   $402 = (($399) + 4)|0; //@line 302 "fixed.c"
   $403 = $402; //@line 302 "fixed.c"
   $404 = HEAP32[$403>>2]|0; //@line 302 "fixed.c"
   $405 = $15; //@line 302 "fixed.c"
   $406 = $405; //@line 302 "fixed.c"
   $407 = HEAP32[$406>>2]|0; //@line 302 "fixed.c"
   $408 = (($405) + 4)|0; //@line 302 "fixed.c"
   $409 = $408; //@line 302 "fixed.c"
   $410 = HEAP32[$409>>2]|0; //@line 302 "fixed.c"
   $411 = $398 ? $401 : $407; //@line 302 "fixed.c"
   $412 = $398 ? $404 : $410; //@line 302 "fixed.c"
   $413 = $16; //@line 302 "fixed.c"
   $414 = $413; //@line 302 "fixed.c"
   $415 = HEAP32[$414>>2]|0; //@line 302 "fixed.c"
   $416 = (($413) + 4)|0; //@line 302 "fixed.c"
   $417 = $416; //@line 302 "fixed.c"
   $418 = HEAP32[$417>>2]|0; //@line 302 "fixed.c"
   $419 = ($412>>>0)<($418>>>0); //@line 302 "fixed.c"
   $420 = ($411>>>0)<($415>>>0); //@line 302 "fixed.c"
   $421 = ($412|0)==($418|0); //@line 302 "fixed.c"
   $422 = $421 & $420; //@line 302 "fixed.c"
   $423 = $419 | $422; //@line 302 "fixed.c"
   if ($423) {
    $424 = $14; //@line 302 "fixed.c"
    $425 = $424; //@line 302 "fixed.c"
    $426 = HEAP32[$425>>2]|0; //@line 302 "fixed.c"
    $427 = (($424) + 4)|0; //@line 302 "fixed.c"
    $428 = $427; //@line 302 "fixed.c"
    $429 = HEAP32[$428>>2]|0; //@line 302 "fixed.c"
    $430 = $15; //@line 302 "fixed.c"
    $431 = $430; //@line 302 "fixed.c"
    $432 = HEAP32[$431>>2]|0; //@line 302 "fixed.c"
    $433 = (($430) + 4)|0; //@line 302 "fixed.c"
    $434 = $433; //@line 302 "fixed.c"
    $435 = HEAP32[$434>>2]|0; //@line 302 "fixed.c"
    $436 = ($429>>>0)<($435>>>0); //@line 302 "fixed.c"
    $437 = ($426>>>0)<($432>>>0); //@line 302 "fixed.c"
    $438 = ($429|0)==($435|0); //@line 302 "fixed.c"
    $439 = $438 & $437; //@line 302 "fixed.c"
    $440 = $436 | $439; //@line 302 "fixed.c"
    $441 = $14; //@line 302 "fixed.c"
    $442 = $441; //@line 302 "fixed.c"
    $443 = HEAP32[$442>>2]|0; //@line 302 "fixed.c"
    $444 = (($441) + 4)|0; //@line 302 "fixed.c"
    $445 = $444; //@line 302 "fixed.c"
    $446 = HEAP32[$445>>2]|0; //@line 302 "fixed.c"
    $447 = $15; //@line 302 "fixed.c"
    $448 = $447; //@line 302 "fixed.c"
    $449 = HEAP32[$448>>2]|0; //@line 302 "fixed.c"
    $450 = (($447) + 4)|0; //@line 302 "fixed.c"
    $451 = $450; //@line 302 "fixed.c"
    $452 = HEAP32[$451>>2]|0; //@line 302 "fixed.c"
    $453 = $440 ? $443 : $449; //@line 302 "fixed.c"
    $454 = $440 ? $446 : $452; //@line 302 "fixed.c"
    $462 = $454;$464 = $453;
   } else {
    $455 = $16; //@line 302 "fixed.c"
    $456 = $455; //@line 302 "fixed.c"
    $457 = HEAP32[$456>>2]|0; //@line 302 "fixed.c"
    $458 = (($455) + 4)|0; //@line 302 "fixed.c"
    $459 = $458; //@line 302 "fixed.c"
    $460 = HEAP32[$459>>2]|0; //@line 302 "fixed.c"
    $462 = $460;$464 = $457;
   }
   $461 = ($381>>>0)<($462>>>0); //@line 302 "fixed.c"
   $463 = ($378>>>0)<($464>>>0); //@line 302 "fixed.c"
   $465 = ($381|0)==($462|0); //@line 302 "fixed.c"
   $466 = $465 & $463; //@line 302 "fixed.c"
   $467 = $461 | $466; //@line 302 "fixed.c"
   if ($467) {
    $18 = 1; //@line 303 "fixed.c"
    break;
   }
   $468 = $14; //@line 304 "fixed.c"
   $469 = $468; //@line 304 "fixed.c"
   $470 = HEAP32[$469>>2]|0; //@line 304 "fixed.c"
   $471 = (($468) + 4)|0; //@line 304 "fixed.c"
   $472 = $471; //@line 304 "fixed.c"
   $473 = HEAP32[$472>>2]|0; //@line 304 "fixed.c"
   $474 = $15; //@line 304 "fixed.c"
   $475 = $474; //@line 304 "fixed.c"
   $476 = HEAP32[$475>>2]|0; //@line 304 "fixed.c"
   $477 = (($474) + 4)|0; //@line 304 "fixed.c"
   $478 = $477; //@line 304 "fixed.c"
   $479 = HEAP32[$478>>2]|0; //@line 304 "fixed.c"
   $480 = $16; //@line 304 "fixed.c"
   $481 = $480; //@line 304 "fixed.c"
   $482 = HEAP32[$481>>2]|0; //@line 304 "fixed.c"
   $483 = (($480) + 4)|0; //@line 304 "fixed.c"
   $484 = $483; //@line 304 "fixed.c"
   $485 = HEAP32[$484>>2]|0; //@line 304 "fixed.c"
   $486 = ($479>>>0)<($485>>>0); //@line 304 "fixed.c"
   $487 = ($476>>>0)<($482>>>0); //@line 304 "fixed.c"
   $488 = ($479|0)==($485|0); //@line 304 "fixed.c"
   $489 = $488 & $487; //@line 304 "fixed.c"
   $490 = $486 | $489; //@line 304 "fixed.c"
   $491 = $15; //@line 304 "fixed.c"
   $492 = $491; //@line 304 "fixed.c"
   $493 = HEAP32[$492>>2]|0; //@line 304 "fixed.c"
   $494 = (($491) + 4)|0; //@line 304 "fixed.c"
   $495 = $494; //@line 304 "fixed.c"
   $496 = HEAP32[$495>>2]|0; //@line 304 "fixed.c"
   $497 = $16; //@line 304 "fixed.c"
   $498 = $497; //@line 304 "fixed.c"
   $499 = HEAP32[$498>>2]|0; //@line 304 "fixed.c"
   $500 = (($497) + 4)|0; //@line 304 "fixed.c"
   $501 = $500; //@line 304 "fixed.c"
   $502 = HEAP32[$501>>2]|0; //@line 304 "fixed.c"
   $503 = $490 ? $493 : $499; //@line 304 "fixed.c"
   $504 = $490 ? $496 : $502; //@line 304 "fixed.c"
   $505 = ($473>>>0)<($504>>>0); //@line 304 "fixed.c"
   $506 = ($470>>>0)<($503>>>0); //@line 304 "fixed.c"
   $507 = ($473|0)==($504|0); //@line 304 "fixed.c"
   $508 = $507 & $506; //@line 304 "fixed.c"
   $509 = $505 | $508; //@line 304 "fixed.c"
   if ($509) {
    $18 = 2; //@line 305 "fixed.c"
    break;
   }
   $510 = $15; //@line 306 "fixed.c"
   $511 = $510; //@line 306 "fixed.c"
   $512 = HEAP32[$511>>2]|0; //@line 306 "fixed.c"
   $513 = (($510) + 4)|0; //@line 306 "fixed.c"
   $514 = $513; //@line 306 "fixed.c"
   $515 = HEAP32[$514>>2]|0; //@line 306 "fixed.c"
   $516 = $16; //@line 306 "fixed.c"
   $517 = $516; //@line 306 "fixed.c"
   $518 = HEAP32[$517>>2]|0; //@line 306 "fixed.c"
   $519 = (($516) + 4)|0; //@line 306 "fixed.c"
   $520 = $519; //@line 306 "fixed.c"
   $521 = HEAP32[$520>>2]|0; //@line 306 "fixed.c"
   $522 = ($515>>>0)<($521>>>0); //@line 306 "fixed.c"
   $523 = ($512>>>0)<($518>>>0); //@line 306 "fixed.c"
   $524 = ($515|0)==($521|0); //@line 306 "fixed.c"
   $525 = $524 & $523; //@line 306 "fixed.c"
   $526 = $522 | $525; //@line 306 "fixed.c"
   if ($526) {
    $18 = 3; //@line 307 "fixed.c"
    break;
   } else {
    $18 = 4; //@line 309 "fixed.c"
    break;
   }
  }
 } while(0);
 $527 = $12; //@line 320 "fixed.c"
 $528 = $527; //@line 320 "fixed.c"
 $529 = HEAP32[$528>>2]|0; //@line 320 "fixed.c"
 $530 = (($527) + 4)|0; //@line 320 "fixed.c"
 $531 = $530; //@line 320 "fixed.c"
 $532 = HEAP32[$531>>2]|0; //@line 320 "fixed.c"
 $533 = ($532>>>0)>(0); //@line 320 "fixed.c"
 $534 = ($529>>>0)>(0); //@line 320 "fixed.c"
 $535 = ($532|0)==(0); //@line 320 "fixed.c"
 $536 = $535 & $534; //@line 320 "fixed.c"
 $537 = $533 | $536; //@line 320 "fixed.c"
 if ($537) {
  $538 = $12; //@line 320 "fixed.c"
  $539 = $538; //@line 320 "fixed.c"
  $540 = HEAP32[$539>>2]|0; //@line 320 "fixed.c"
  $541 = (($538) + 4)|0; //@line 320 "fixed.c"
  $542 = $541; //@line 320 "fixed.c"
  $543 = HEAP32[$542>>2]|0; //@line 320 "fixed.c"
  $544 = (+($540>>>0)) + (4294967296.0*(+($543>>>0))); //@line 320 "fixed.c"
  $545 = 0.69314718055994529 * $544; //@line 320 "fixed.c"
  $546 = $4; //@line 320 "fixed.c"
  $547 = (+($546>>>0)); //@line 320 "fixed.c"
  $548 = $545 / $547; //@line 320 "fixed.c"
  $549 = (+Math_log((+$548))); //@line 320 "fixed.c"
  $550 = $549 / 0.69314718055994529; //@line 320 "fixed.c"
  $552 = $550;
 } else {
  $552 = 0.0;
 }
 $551 = $552; //@line 320 "fixed.c"
 $553 = $5; //@line 320 "fixed.c"
 HEAPF32[$553>>2] = $551; //@line 320 "fixed.c"
 $554 = $13; //@line 321 "fixed.c"
 $555 = $554; //@line 321 "fixed.c"
 $556 = HEAP32[$555>>2]|0; //@line 321 "fixed.c"
 $557 = (($554) + 4)|0; //@line 321 "fixed.c"
 $558 = $557; //@line 321 "fixed.c"
 $559 = HEAP32[$558>>2]|0; //@line 321 "fixed.c"
 $560 = ($559>>>0)>(0); //@line 321 "fixed.c"
 $561 = ($556>>>0)>(0); //@line 321 "fixed.c"
 $562 = ($559|0)==(0); //@line 321 "fixed.c"
 $563 = $562 & $561; //@line 321 "fixed.c"
 $564 = $560 | $563; //@line 321 "fixed.c"
 if ($564) {
  $565 = $13; //@line 321 "fixed.c"
  $566 = $565; //@line 321 "fixed.c"
  $567 = HEAP32[$566>>2]|0; //@line 321 "fixed.c"
  $568 = (($565) + 4)|0; //@line 321 "fixed.c"
  $569 = $568; //@line 321 "fixed.c"
  $570 = HEAP32[$569>>2]|0; //@line 321 "fixed.c"
  $571 = (+($567>>>0)) + (4294967296.0*(+($570>>>0))); //@line 321 "fixed.c"
  $572 = 0.69314718055994529 * $571; //@line 321 "fixed.c"
  $573 = $4; //@line 321 "fixed.c"
  $574 = (+($573>>>0)); //@line 321 "fixed.c"
  $575 = $572 / $574; //@line 321 "fixed.c"
  $576 = (+Math_log((+$575))); //@line 321 "fixed.c"
  $577 = $576 / 0.69314718055994529; //@line 321 "fixed.c"
  $579 = $577;
 } else {
  $579 = 0.0;
 }
 $578 = $579; //@line 321 "fixed.c"
 $580 = $5; //@line 321 "fixed.c"
 $581 = ((($580)) + 4|0); //@line 321 "fixed.c"
 HEAPF32[$581>>2] = $578; //@line 321 "fixed.c"
 $582 = $14; //@line 322 "fixed.c"
 $583 = $582; //@line 322 "fixed.c"
 $584 = HEAP32[$583>>2]|0; //@line 322 "fixed.c"
 $585 = (($582) + 4)|0; //@line 322 "fixed.c"
 $586 = $585; //@line 322 "fixed.c"
 $587 = HEAP32[$586>>2]|0; //@line 322 "fixed.c"
 $588 = ($587>>>0)>(0); //@line 322 "fixed.c"
 $589 = ($584>>>0)>(0); //@line 322 "fixed.c"
 $590 = ($587|0)==(0); //@line 322 "fixed.c"
 $591 = $590 & $589; //@line 322 "fixed.c"
 $592 = $588 | $591; //@line 322 "fixed.c"
 if ($592) {
  $593 = $14; //@line 322 "fixed.c"
  $594 = $593; //@line 322 "fixed.c"
  $595 = HEAP32[$594>>2]|0; //@line 322 "fixed.c"
  $596 = (($593) + 4)|0; //@line 322 "fixed.c"
  $597 = $596; //@line 322 "fixed.c"
  $598 = HEAP32[$597>>2]|0; //@line 322 "fixed.c"
  $599 = (+($595>>>0)) + (4294967296.0*(+($598>>>0))); //@line 322 "fixed.c"
  $600 = 0.69314718055994529 * $599; //@line 322 "fixed.c"
  $601 = $4; //@line 322 "fixed.c"
  $602 = (+($601>>>0)); //@line 322 "fixed.c"
  $603 = $600 / $602; //@line 322 "fixed.c"
  $604 = (+Math_log((+$603))); //@line 322 "fixed.c"
  $605 = $604 / 0.69314718055994529; //@line 322 "fixed.c"
  $607 = $605;
 } else {
  $607 = 0.0;
 }
 $606 = $607; //@line 322 "fixed.c"
 $608 = $5; //@line 322 "fixed.c"
 $609 = ((($608)) + 8|0); //@line 322 "fixed.c"
 HEAPF32[$609>>2] = $606; //@line 322 "fixed.c"
 $610 = $15; //@line 323 "fixed.c"
 $611 = $610; //@line 323 "fixed.c"
 $612 = HEAP32[$611>>2]|0; //@line 323 "fixed.c"
 $613 = (($610) + 4)|0; //@line 323 "fixed.c"
 $614 = $613; //@line 323 "fixed.c"
 $615 = HEAP32[$614>>2]|0; //@line 323 "fixed.c"
 $616 = ($615>>>0)>(0); //@line 323 "fixed.c"
 $617 = ($612>>>0)>(0); //@line 323 "fixed.c"
 $618 = ($615|0)==(0); //@line 323 "fixed.c"
 $619 = $618 & $617; //@line 323 "fixed.c"
 $620 = $616 | $619; //@line 323 "fixed.c"
 if ($620) {
  $621 = $15; //@line 323 "fixed.c"
  $622 = $621; //@line 323 "fixed.c"
  $623 = HEAP32[$622>>2]|0; //@line 323 "fixed.c"
  $624 = (($621) + 4)|0; //@line 323 "fixed.c"
  $625 = $624; //@line 323 "fixed.c"
  $626 = HEAP32[$625>>2]|0; //@line 323 "fixed.c"
  $627 = (+($623>>>0)) + (4294967296.0*(+($626>>>0))); //@line 323 "fixed.c"
  $628 = 0.69314718055994529 * $627; //@line 323 "fixed.c"
  $629 = $4; //@line 323 "fixed.c"
  $630 = (+($629>>>0)); //@line 323 "fixed.c"
  $631 = $628 / $630; //@line 323 "fixed.c"
  $632 = (+Math_log((+$631))); //@line 323 "fixed.c"
  $633 = $632 / 0.69314718055994529; //@line 323 "fixed.c"
  $635 = $633;
 } else {
  $635 = 0.0;
 }
 $634 = $635; //@line 323 "fixed.c"
 $636 = $5; //@line 323 "fixed.c"
 $637 = ((($636)) + 12|0); //@line 323 "fixed.c"
 HEAPF32[$637>>2] = $634; //@line 323 "fixed.c"
 $638 = $16; //@line 324 "fixed.c"
 $639 = $638; //@line 324 "fixed.c"
 $640 = HEAP32[$639>>2]|0; //@line 324 "fixed.c"
 $641 = (($638) + 4)|0; //@line 324 "fixed.c"
 $642 = $641; //@line 324 "fixed.c"
 $643 = HEAP32[$642>>2]|0; //@line 324 "fixed.c"
 $644 = ($643>>>0)>(0); //@line 324 "fixed.c"
 $645 = ($640>>>0)>(0); //@line 324 "fixed.c"
 $646 = ($643|0)==(0); //@line 324 "fixed.c"
 $647 = $646 & $645; //@line 324 "fixed.c"
 $648 = $644 | $647; //@line 324 "fixed.c"
 if (!($648)) {
  $663 = 0.0;
  $662 = $663; //@line 324 "fixed.c"
  $664 = $5; //@line 324 "fixed.c"
  $665 = ((($664)) + 16|0); //@line 324 "fixed.c"
  HEAPF32[$665>>2] = $662; //@line 324 "fixed.c"
  $666 = $18; //@line 333 "fixed.c"
  STACKTOP = sp;return ($666|0); //@line 333 "fixed.c"
 }
 $649 = $16; //@line 324 "fixed.c"
 $650 = $649; //@line 324 "fixed.c"
 $651 = HEAP32[$650>>2]|0; //@line 324 "fixed.c"
 $652 = (($649) + 4)|0; //@line 324 "fixed.c"
 $653 = $652; //@line 324 "fixed.c"
 $654 = HEAP32[$653>>2]|0; //@line 324 "fixed.c"
 $655 = (+($651>>>0)) + (4294967296.0*(+($654>>>0))); //@line 324 "fixed.c"
 $656 = 0.69314718055994529 * $655; //@line 324 "fixed.c"
 $657 = $4; //@line 324 "fixed.c"
 $658 = (+($657>>>0)); //@line 324 "fixed.c"
 $659 = $656 / $658; //@line 324 "fixed.c"
 $660 = (+Math_log((+$659))); //@line 324 "fixed.c"
 $661 = $660 / 0.69314718055994529; //@line 324 "fixed.c"
 $663 = $661;
 $662 = $663; //@line 324 "fixed.c"
 $664 = $5; //@line 324 "fixed.c"
 $665 = ((($664)) + 16|0); //@line 324 "fixed.c"
 HEAPF32[$665>>2] = $662; //@line 324 "fixed.c"
 $666 = $18; //@line 333 "fixed.c"
 STACKTOP = sp;return ($666|0); //@line 333 "fixed.c"
}
function _FLAC__fixed_compute_residual($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5; //@line 338 "fixed.c"
 $8 = $10; //@line 338 "fixed.c"
 $11 = $6; //@line 341 "fixed.c"
 switch ($11|0) {
 case 0:  {
  $12 = $7; //@line 344 "fixed.c"
  $13 = $4; //@line 344 "fixed.c"
  $14 = $5; //@line 344 "fixed.c"
  $15 = $14<<2; //@line 344 "fixed.c"
  _memcpy(($12|0),($13|0),($15|0))|0; //@line 344 "fixed.c"
  STACKTOP = sp;return; //@line 365 "fixed.c"
  break;
 }
 case 1:  {
  $9 = 0; //@line 347 "fixed.c"
  while(1) {
   $16 = $9; //@line 347 "fixed.c"
   $17 = $8; //@line 347 "fixed.c"
   $18 = ($16|0)<($17|0); //@line 347 "fixed.c"
   if (!($18)) {
    break;
   }
   $19 = $4; //@line 348 "fixed.c"
   $20 = $9; //@line 348 "fixed.c"
   $21 = (($19) + ($20<<2)|0); //@line 348 "fixed.c"
   $22 = HEAP32[$21>>2]|0; //@line 348 "fixed.c"
   $23 = $4; //@line 348 "fixed.c"
   $24 = $9; //@line 348 "fixed.c"
   $25 = (($24) - 1)|0; //@line 348 "fixed.c"
   $26 = (($23) + ($25<<2)|0); //@line 348 "fixed.c"
   $27 = HEAP32[$26>>2]|0; //@line 348 "fixed.c"
   $28 = (($22) - ($27))|0; //@line 348 "fixed.c"
   $29 = $7; //@line 348 "fixed.c"
   $30 = $9; //@line 348 "fixed.c"
   $31 = (($29) + ($30<<2)|0); //@line 348 "fixed.c"
   HEAP32[$31>>2] = $28; //@line 348 "fixed.c"
   $32 = $9; //@line 347 "fixed.c"
   $33 = (($32) + 1)|0; //@line 347 "fixed.c"
   $9 = $33; //@line 347 "fixed.c"
  }
  STACKTOP = sp;return; //@line 365 "fixed.c"
  break;
 }
 case 2:  {
  $9 = 0; //@line 351 "fixed.c"
  while(1) {
   $34 = $9; //@line 351 "fixed.c"
   $35 = $8; //@line 351 "fixed.c"
   $36 = ($34|0)<($35|0); //@line 351 "fixed.c"
   if (!($36)) {
    break;
   }
   $37 = $4; //@line 352 "fixed.c"
   $38 = $9; //@line 352 "fixed.c"
   $39 = (($37) + ($38<<2)|0); //@line 352 "fixed.c"
   $40 = HEAP32[$39>>2]|0; //@line 352 "fixed.c"
   $41 = $4; //@line 352 "fixed.c"
   $42 = $9; //@line 352 "fixed.c"
   $43 = (($42) - 1)|0; //@line 352 "fixed.c"
   $44 = (($41) + ($43<<2)|0); //@line 352 "fixed.c"
   $45 = HEAP32[$44>>2]|0; //@line 352 "fixed.c"
   $46 = $45<<1; //@line 352 "fixed.c"
   $47 = (($40) - ($46))|0; //@line 352 "fixed.c"
   $48 = $4; //@line 352 "fixed.c"
   $49 = $9; //@line 352 "fixed.c"
   $50 = (($49) - 2)|0; //@line 352 "fixed.c"
   $51 = (($48) + ($50<<2)|0); //@line 352 "fixed.c"
   $52 = HEAP32[$51>>2]|0; //@line 352 "fixed.c"
   $53 = (($47) + ($52))|0; //@line 352 "fixed.c"
   $54 = $7; //@line 352 "fixed.c"
   $55 = $9; //@line 352 "fixed.c"
   $56 = (($54) + ($55<<2)|0); //@line 352 "fixed.c"
   HEAP32[$56>>2] = $53; //@line 352 "fixed.c"
   $57 = $9; //@line 351 "fixed.c"
   $58 = (($57) + 1)|0; //@line 351 "fixed.c"
   $9 = $58; //@line 351 "fixed.c"
  }
  STACKTOP = sp;return; //@line 365 "fixed.c"
  break;
 }
 case 3:  {
  $9 = 0; //@line 355 "fixed.c"
  while(1) {
   $59 = $9; //@line 355 "fixed.c"
   $60 = $8; //@line 355 "fixed.c"
   $61 = ($59|0)<($60|0); //@line 355 "fixed.c"
   if (!($61)) {
    break;
   }
   $62 = $4; //@line 356 "fixed.c"
   $63 = $9; //@line 356 "fixed.c"
   $64 = (($62) + ($63<<2)|0); //@line 356 "fixed.c"
   $65 = HEAP32[$64>>2]|0; //@line 356 "fixed.c"
   $66 = $4; //@line 356 "fixed.c"
   $67 = $9; //@line 356 "fixed.c"
   $68 = (($67) - 1)|0; //@line 356 "fixed.c"
   $69 = (($66) + ($68<<2)|0); //@line 356 "fixed.c"
   $70 = HEAP32[$69>>2]|0; //@line 356 "fixed.c"
   $71 = ($70*3)|0; //@line 356 "fixed.c"
   $72 = (($65) - ($71))|0; //@line 356 "fixed.c"
   $73 = $4; //@line 356 "fixed.c"
   $74 = $9; //@line 356 "fixed.c"
   $75 = (($74) - 2)|0; //@line 356 "fixed.c"
   $76 = (($73) + ($75<<2)|0); //@line 356 "fixed.c"
   $77 = HEAP32[$76>>2]|0; //@line 356 "fixed.c"
   $78 = ($77*3)|0; //@line 356 "fixed.c"
   $79 = (($72) + ($78))|0; //@line 356 "fixed.c"
   $80 = $4; //@line 356 "fixed.c"
   $81 = $9; //@line 356 "fixed.c"
   $82 = (($81) - 3)|0; //@line 356 "fixed.c"
   $83 = (($80) + ($82<<2)|0); //@line 356 "fixed.c"
   $84 = HEAP32[$83>>2]|0; //@line 356 "fixed.c"
   $85 = (($79) - ($84))|0; //@line 356 "fixed.c"
   $86 = $7; //@line 356 "fixed.c"
   $87 = $9; //@line 356 "fixed.c"
   $88 = (($86) + ($87<<2)|0); //@line 356 "fixed.c"
   HEAP32[$88>>2] = $85; //@line 356 "fixed.c"
   $89 = $9; //@line 355 "fixed.c"
   $90 = (($89) + 1)|0; //@line 355 "fixed.c"
   $9 = $90; //@line 355 "fixed.c"
  }
  STACKTOP = sp;return; //@line 365 "fixed.c"
  break;
 }
 case 4:  {
  $9 = 0; //@line 359 "fixed.c"
  while(1) {
   $91 = $9; //@line 359 "fixed.c"
   $92 = $8; //@line 359 "fixed.c"
   $93 = ($91|0)<($92|0); //@line 359 "fixed.c"
   if (!($93)) {
    break;
   }
   $94 = $4; //@line 360 "fixed.c"
   $95 = $9; //@line 360 "fixed.c"
   $96 = (($94) + ($95<<2)|0); //@line 360 "fixed.c"
   $97 = HEAP32[$96>>2]|0; //@line 360 "fixed.c"
   $98 = $4; //@line 360 "fixed.c"
   $99 = $9; //@line 360 "fixed.c"
   $100 = (($99) - 1)|0; //@line 360 "fixed.c"
   $101 = (($98) + ($100<<2)|0); //@line 360 "fixed.c"
   $102 = HEAP32[$101>>2]|0; //@line 360 "fixed.c"
   $103 = $102<<2; //@line 360 "fixed.c"
   $104 = (($97) - ($103))|0; //@line 360 "fixed.c"
   $105 = $4; //@line 360 "fixed.c"
   $106 = $9; //@line 360 "fixed.c"
   $107 = (($106) - 2)|0; //@line 360 "fixed.c"
   $108 = (($105) + ($107<<2)|0); //@line 360 "fixed.c"
   $109 = HEAP32[$108>>2]|0; //@line 360 "fixed.c"
   $110 = ($109*6)|0; //@line 360 "fixed.c"
   $111 = (($104) + ($110))|0; //@line 360 "fixed.c"
   $112 = $4; //@line 360 "fixed.c"
   $113 = $9; //@line 360 "fixed.c"
   $114 = (($113) - 3)|0; //@line 360 "fixed.c"
   $115 = (($112) + ($114<<2)|0); //@line 360 "fixed.c"
   $116 = HEAP32[$115>>2]|0; //@line 360 "fixed.c"
   $117 = $116<<2; //@line 360 "fixed.c"
   $118 = (($111) - ($117))|0; //@line 360 "fixed.c"
   $119 = $4; //@line 360 "fixed.c"
   $120 = $9; //@line 360 "fixed.c"
   $121 = (($120) - 4)|0; //@line 360 "fixed.c"
   $122 = (($119) + ($121<<2)|0); //@line 360 "fixed.c"
   $123 = HEAP32[$122>>2]|0; //@line 360 "fixed.c"
   $124 = (($118) + ($123))|0; //@line 360 "fixed.c"
   $125 = $7; //@line 360 "fixed.c"
   $126 = $9; //@line 360 "fixed.c"
   $127 = (($125) + ($126<<2)|0); //@line 360 "fixed.c"
   HEAP32[$127>>2] = $124; //@line 360 "fixed.c"
   $128 = $9; //@line 359 "fixed.c"
   $129 = (($128) + 1)|0; //@line 359 "fixed.c"
   $9 = $129; //@line 359 "fixed.c"
  }
  STACKTOP = sp;return; //@line 365 "fixed.c"
  break;
 }
 default: {
  STACKTOP = sp;return; //@line 365 "fixed.c"
 }
 }
}
function _FLAC__fixed_restore_signal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $5; //@line 369 "fixed.c"
 $9 = $10; //@line 369 "fixed.c"
 $11 = $6; //@line 371 "fixed.c"
 switch ($11|0) {
 case 0:  {
  $12 = $7; //@line 374 "fixed.c"
  $13 = $4; //@line 374 "fixed.c"
  $14 = $5; //@line 374 "fixed.c"
  $15 = $14<<2; //@line 374 "fixed.c"
  _memcpy(($12|0),($13|0),($15|0))|0; //@line 374 "fixed.c"
  STACKTOP = sp;return; //@line 395 "fixed.c"
  break;
 }
 case 1:  {
  $8 = 0; //@line 377 "fixed.c"
  while(1) {
   $16 = $8; //@line 377 "fixed.c"
   $17 = $9; //@line 377 "fixed.c"
   $18 = ($16|0)<($17|0); //@line 377 "fixed.c"
   if (!($18)) {
    break;
   }
   $19 = $4; //@line 378 "fixed.c"
   $20 = $8; //@line 378 "fixed.c"
   $21 = (($19) + ($20<<2)|0); //@line 378 "fixed.c"
   $22 = HEAP32[$21>>2]|0; //@line 378 "fixed.c"
   $23 = $7; //@line 378 "fixed.c"
   $24 = $8; //@line 378 "fixed.c"
   $25 = (($24) - 1)|0; //@line 378 "fixed.c"
   $26 = (($23) + ($25<<2)|0); //@line 378 "fixed.c"
   $27 = HEAP32[$26>>2]|0; //@line 378 "fixed.c"
   $28 = (($22) + ($27))|0; //@line 378 "fixed.c"
   $29 = $7; //@line 378 "fixed.c"
   $30 = $8; //@line 378 "fixed.c"
   $31 = (($29) + ($30<<2)|0); //@line 378 "fixed.c"
   HEAP32[$31>>2] = $28; //@line 378 "fixed.c"
   $32 = $8; //@line 377 "fixed.c"
   $33 = (($32) + 1)|0; //@line 377 "fixed.c"
   $8 = $33; //@line 377 "fixed.c"
  }
  STACKTOP = sp;return; //@line 395 "fixed.c"
  break;
 }
 case 2:  {
  $8 = 0; //@line 381 "fixed.c"
  while(1) {
   $34 = $8; //@line 381 "fixed.c"
   $35 = $9; //@line 381 "fixed.c"
   $36 = ($34|0)<($35|0); //@line 381 "fixed.c"
   if (!($36)) {
    break;
   }
   $37 = $4; //@line 382 "fixed.c"
   $38 = $8; //@line 382 "fixed.c"
   $39 = (($37) + ($38<<2)|0); //@line 382 "fixed.c"
   $40 = HEAP32[$39>>2]|0; //@line 382 "fixed.c"
   $41 = $7; //@line 382 "fixed.c"
   $42 = $8; //@line 382 "fixed.c"
   $43 = (($42) - 1)|0; //@line 382 "fixed.c"
   $44 = (($41) + ($43<<2)|0); //@line 382 "fixed.c"
   $45 = HEAP32[$44>>2]|0; //@line 382 "fixed.c"
   $46 = $45<<1; //@line 382 "fixed.c"
   $47 = (($40) + ($46))|0; //@line 382 "fixed.c"
   $48 = $7; //@line 382 "fixed.c"
   $49 = $8; //@line 382 "fixed.c"
   $50 = (($49) - 2)|0; //@line 382 "fixed.c"
   $51 = (($48) + ($50<<2)|0); //@line 382 "fixed.c"
   $52 = HEAP32[$51>>2]|0; //@line 382 "fixed.c"
   $53 = (($47) - ($52))|0; //@line 382 "fixed.c"
   $54 = $7; //@line 382 "fixed.c"
   $55 = $8; //@line 382 "fixed.c"
   $56 = (($54) + ($55<<2)|0); //@line 382 "fixed.c"
   HEAP32[$56>>2] = $53; //@line 382 "fixed.c"
   $57 = $8; //@line 381 "fixed.c"
   $58 = (($57) + 1)|0; //@line 381 "fixed.c"
   $8 = $58; //@line 381 "fixed.c"
  }
  STACKTOP = sp;return; //@line 395 "fixed.c"
  break;
 }
 case 3:  {
  $8 = 0; //@line 385 "fixed.c"
  while(1) {
   $59 = $8; //@line 385 "fixed.c"
   $60 = $9; //@line 385 "fixed.c"
   $61 = ($59|0)<($60|0); //@line 385 "fixed.c"
   if (!($61)) {
    break;
   }
   $62 = $4; //@line 386 "fixed.c"
   $63 = $8; //@line 386 "fixed.c"
   $64 = (($62) + ($63<<2)|0); //@line 386 "fixed.c"
   $65 = HEAP32[$64>>2]|0; //@line 386 "fixed.c"
   $66 = $7; //@line 386 "fixed.c"
   $67 = $8; //@line 386 "fixed.c"
   $68 = (($67) - 1)|0; //@line 386 "fixed.c"
   $69 = (($66) + ($68<<2)|0); //@line 386 "fixed.c"
   $70 = HEAP32[$69>>2]|0; //@line 386 "fixed.c"
   $71 = ($70*3)|0; //@line 386 "fixed.c"
   $72 = (($65) + ($71))|0; //@line 386 "fixed.c"
   $73 = $7; //@line 386 "fixed.c"
   $74 = $8; //@line 386 "fixed.c"
   $75 = (($74) - 2)|0; //@line 386 "fixed.c"
   $76 = (($73) + ($75<<2)|0); //@line 386 "fixed.c"
   $77 = HEAP32[$76>>2]|0; //@line 386 "fixed.c"
   $78 = ($77*3)|0; //@line 386 "fixed.c"
   $79 = (($72) - ($78))|0; //@line 386 "fixed.c"
   $80 = $7; //@line 386 "fixed.c"
   $81 = $8; //@line 386 "fixed.c"
   $82 = (($81) - 3)|0; //@line 386 "fixed.c"
   $83 = (($80) + ($82<<2)|0); //@line 386 "fixed.c"
   $84 = HEAP32[$83>>2]|0; //@line 386 "fixed.c"
   $85 = (($79) + ($84))|0; //@line 386 "fixed.c"
   $86 = $7; //@line 386 "fixed.c"
   $87 = $8; //@line 386 "fixed.c"
   $88 = (($86) + ($87<<2)|0); //@line 386 "fixed.c"
   HEAP32[$88>>2] = $85; //@line 386 "fixed.c"
   $89 = $8; //@line 385 "fixed.c"
   $90 = (($89) + 1)|0; //@line 385 "fixed.c"
   $8 = $90; //@line 385 "fixed.c"
  }
  STACKTOP = sp;return; //@line 395 "fixed.c"
  break;
 }
 case 4:  {
  $8 = 0; //@line 389 "fixed.c"
  while(1) {
   $91 = $8; //@line 389 "fixed.c"
   $92 = $9; //@line 389 "fixed.c"
   $93 = ($91|0)<($92|0); //@line 389 "fixed.c"
   if (!($93)) {
    break;
   }
   $94 = $4; //@line 390 "fixed.c"
   $95 = $8; //@line 390 "fixed.c"
   $96 = (($94) + ($95<<2)|0); //@line 390 "fixed.c"
   $97 = HEAP32[$96>>2]|0; //@line 390 "fixed.c"
   $98 = $7; //@line 390 "fixed.c"
   $99 = $8; //@line 390 "fixed.c"
   $100 = (($99) - 1)|0; //@line 390 "fixed.c"
   $101 = (($98) + ($100<<2)|0); //@line 390 "fixed.c"
   $102 = HEAP32[$101>>2]|0; //@line 390 "fixed.c"
   $103 = $102<<2; //@line 390 "fixed.c"
   $104 = (($97) + ($103))|0; //@line 390 "fixed.c"
   $105 = $7; //@line 390 "fixed.c"
   $106 = $8; //@line 390 "fixed.c"
   $107 = (($106) - 2)|0; //@line 390 "fixed.c"
   $108 = (($105) + ($107<<2)|0); //@line 390 "fixed.c"
   $109 = HEAP32[$108>>2]|0; //@line 390 "fixed.c"
   $110 = ($109*6)|0; //@line 390 "fixed.c"
   $111 = (($104) - ($110))|0; //@line 390 "fixed.c"
   $112 = $7; //@line 390 "fixed.c"
   $113 = $8; //@line 390 "fixed.c"
   $114 = (($113) - 3)|0; //@line 390 "fixed.c"
   $115 = (($112) + ($114<<2)|0); //@line 390 "fixed.c"
   $116 = HEAP32[$115>>2]|0; //@line 390 "fixed.c"
   $117 = $116<<2; //@line 390 "fixed.c"
   $118 = (($111) + ($117))|0; //@line 390 "fixed.c"
   $119 = $7; //@line 390 "fixed.c"
   $120 = $8; //@line 390 "fixed.c"
   $121 = (($120) - 4)|0; //@line 390 "fixed.c"
   $122 = (($119) + ($121<<2)|0); //@line 390 "fixed.c"
   $123 = HEAP32[$122>>2]|0; //@line 390 "fixed.c"
   $124 = (($118) - ($123))|0; //@line 390 "fixed.c"
   $125 = $7; //@line 390 "fixed.c"
   $126 = $8; //@line 390 "fixed.c"
   $127 = (($125) + ($126<<2)|0); //@line 390 "fixed.c"
   HEAP32[$127>>2] = $124; //@line 390 "fixed.c"
   $128 = $8; //@line 389 "fixed.c"
   $129 = (($128) + 1)|0; //@line 389 "fixed.c"
   $8 = $129; //@line 389 "fixed.c"
  }
  STACKTOP = sp;return; //@line 395 "fixed.c"
  break;
 }
 default: {
  STACKTOP = sp;return; //@line 395 "fixed.c"
 }
 }
}
function _FLAC__format_sample_rate_is_valid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 204 "format.c"
 $4 = ($3|0)==(0); //@line 204 "format.c"
 $5 = $2; //@line 204 "format.c"
 $6 = ($5>>>0)>(655350); //@line 204 "format.c"
 $or$cond = $4 | $6; //@line 204 "format.c"
 if ($or$cond) {
  $1 = 0; //@line 205 "format.c"
 } else {
  $1 = 1; //@line 208 "format.c"
 }
 $7 = $1; //@line 209 "format.c"
 STACKTOP = sp;return ($7|0); //@line 209 "format.c"
}
function _FLAC__format_blocksize_is_subset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 213 "format.c"
 $6 = ($5>>>0)>(16384); //@line 213 "format.c"
 do {
  if ($6) {
   $2 = 0; //@line 214 "format.c"
  } else {
   $7 = $4; //@line 215 "format.c"
   $8 = ($7>>>0)<=(48000); //@line 215 "format.c"
   $9 = $3; //@line 215 "format.c"
   $10 = ($9>>>0)>(4608); //@line 215 "format.c"
   $or$cond = $8 & $10; //@line 215 "format.c"
   if ($or$cond) {
    $2 = 0; //@line 216 "format.c"
    break;
   } else {
    $2 = 1; //@line 218 "format.c"
    break;
   }
  }
 } while(0);
 $11 = $2; //@line 219 "format.c"
 STACKTOP = sp;return ($11|0); //@line 219 "format.c"
}
function _FLAC__format_sample_rate_is_subset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 224 "format.c"
 $4 = (_FLAC__format_sample_rate_is_valid($3)|0); //@line 224 "format.c"
 $5 = ($4|0)!=(0); //@line 224 "format.c"
 do {
  if ($5) {
   $6 = $2; //@line 226 "format.c"
   $7 = ($6>>>0)>=(65536); //@line 226 "format.c"
   if ($7) {
    $8 = $2; //@line 227 "format.c"
    $9 = (($8>>>0) % 1000)&-1; //@line 227 "format.c"
    $10 = ($9|0)==(0); //@line 227 "format.c"
    if (!($10)) {
     $11 = $2; //@line 227 "format.c"
     $12 = (($11>>>0) % 10)&-1; //@line 227 "format.c"
     $13 = ($12|0)==(0); //@line 227 "format.c"
     if (!($13)) {
      break;
     }
    }
   }
   $1 = 1; //@line 233 "format.c"
   $14 = $1; //@line 234 "format.c"
   STACKTOP = sp;return ($14|0); //@line 234 "format.c"
  }
 } while(0);
 $1 = 0; //@line 230 "format.c"
 $14 = $1; //@line 234 "format.c"
 STACKTOP = sp;return ($14|0); //@line 234 "format.c"
}
function _FLAC__format_seektable_is_legal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $6 = $4; //@line 240 "format.c"
 $7 = $6; //@line 240 "format.c"
 HEAP32[$7>>2] = 0; //@line 240 "format.c"
 $8 = (($6) + 4)|0; //@line 240 "format.c"
 $9 = $8; //@line 240 "format.c"
 HEAP32[$9>>2] = 0; //@line 240 "format.c"
 $5 = 0; //@line 241 "format.c"
 $3 = 0; //@line 245 "format.c"
 while(1) {
  $10 = $3; //@line 245 "format.c"
  $11 = $2; //@line 245 "format.c"
  $12 = HEAP32[$11>>2]|0; //@line 245 "format.c"
  $13 = ($10>>>0)<($12>>>0); //@line 245 "format.c"
  if (!($13)) {
   label = 8;
   break;
  }
  $14 = $5; //@line 246 "format.c"
  $15 = ($14|0)!=(0); //@line 246 "format.c"
  if ($15) {
   $16 = $2; //@line 248 "format.c"
   $17 = ((($16)) + 4|0); //@line 248 "format.c"
   $18 = HEAP32[$17>>2]|0; //@line 248 "format.c"
   $19 = $3; //@line 248 "format.c"
   $20 = (($18) + (($19*24)|0)|0); //@line 248 "format.c"
   $21 = $20; //@line 248 "format.c"
   $22 = $21; //@line 248 "format.c"
   $23 = HEAP32[$22>>2]|0; //@line 248 "format.c"
   $24 = (($21) + 4)|0; //@line 248 "format.c"
   $25 = $24; //@line 248 "format.c"
   $26 = HEAP32[$25>>2]|0; //@line 248 "format.c"
   $27 = ($23|0)!=(-1); //@line 248 "format.c"
   $28 = ($26|0)!=(-1); //@line 248 "format.c"
   $29 = $27 | $28; //@line 248 "format.c"
   if ($29) {
    $30 = $2; //@line 249 "format.c"
    $31 = ((($30)) + 4|0); //@line 249 "format.c"
    $32 = HEAP32[$31>>2]|0; //@line 249 "format.c"
    $33 = $3; //@line 249 "format.c"
    $34 = (($32) + (($33*24)|0)|0); //@line 249 "format.c"
    $35 = $34; //@line 249 "format.c"
    $36 = $35; //@line 249 "format.c"
    $37 = HEAP32[$36>>2]|0; //@line 249 "format.c"
    $38 = (($35) + 4)|0; //@line 249 "format.c"
    $39 = $38; //@line 249 "format.c"
    $40 = HEAP32[$39>>2]|0; //@line 249 "format.c"
    $41 = $4; //@line 249 "format.c"
    $42 = $41; //@line 249 "format.c"
    $43 = HEAP32[$42>>2]|0; //@line 249 "format.c"
    $44 = (($41) + 4)|0; //@line 249 "format.c"
    $45 = $44; //@line 249 "format.c"
    $46 = HEAP32[$45>>2]|0; //@line 249 "format.c"
    $47 = ($40>>>0)<($46>>>0); //@line 249 "format.c"
    $48 = ($37>>>0)<=($43>>>0); //@line 249 "format.c"
    $49 = ($40|0)==($46|0); //@line 249 "format.c"
    $50 = $49 & $48; //@line 249 "format.c"
    $51 = $47 | $50; //@line 249 "format.c"
    if ($51) {
     label = 6;
     break;
    }
   }
  }
  $52 = $2; //@line 253 "format.c"
  $53 = ((($52)) + 4|0); //@line 253 "format.c"
  $54 = HEAP32[$53>>2]|0; //@line 253 "format.c"
  $55 = $3; //@line 253 "format.c"
  $56 = (($54) + (($55*24)|0)|0); //@line 253 "format.c"
  $57 = $56; //@line 253 "format.c"
  $58 = $57; //@line 253 "format.c"
  $59 = HEAP32[$58>>2]|0; //@line 253 "format.c"
  $60 = (($57) + 4)|0; //@line 253 "format.c"
  $61 = $60; //@line 253 "format.c"
  $62 = HEAP32[$61>>2]|0; //@line 253 "format.c"
  $63 = $4; //@line 253 "format.c"
  $64 = $63; //@line 253 "format.c"
  HEAP32[$64>>2] = $59; //@line 253 "format.c"
  $65 = (($63) + 4)|0; //@line 253 "format.c"
  $66 = $65; //@line 253 "format.c"
  HEAP32[$66>>2] = $62; //@line 253 "format.c"
  $5 = 1; //@line 254 "format.c"
  $67 = $3; //@line 245 "format.c"
  $68 = (($67) + 1)|0; //@line 245 "format.c"
  $3 = $68; //@line 245 "format.c"
 }
 if ((label|0) == 6) {
  $1 = 0; //@line 251 "format.c"
  $69 = $1; //@line 258 "format.c"
  STACKTOP = sp;return ($69|0); //@line 258 "format.c"
 }
 else if ((label|0) == 8) {
  $1 = 1; //@line 257 "format.c"
  $69 = $1; //@line 258 "format.c"
  STACKTOP = sp;return ($69|0); //@line 258 "format.c"
 }
 return (0)|0;
}
function _FLAC__format_seektable_sort($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2; //@line 280 "format.c"
 $7 = HEAP32[$6>>2]|0; //@line 280 "format.c"
 $8 = ($7|0)==(0); //@line 280 "format.c"
 if ($8) {
  $1 = 0; //@line 281 "format.c"
  $106 = $1; //@line 306 "format.c"
  STACKTOP = sp;return ($106|0); //@line 306 "format.c"
 }
 $9 = $2; //@line 284 "format.c"
 $10 = ((($9)) + 4|0); //@line 284 "format.c"
 $11 = HEAP32[$10>>2]|0; //@line 284 "format.c"
 $12 = $2; //@line 284 "format.c"
 $13 = HEAP32[$12>>2]|0; //@line 284 "format.c"
 _qsort($11,$13,24,10); //@line 284 "format.c"
 $5 = 1; //@line 287 "format.c"
 $4 = 0; //@line 288 "format.c"
 $3 = 0; //@line 288 "format.c"
 while(1) {
  $14 = $3; //@line 288 "format.c"
  $15 = $2; //@line 288 "format.c"
  $16 = HEAP32[$15>>2]|0; //@line 288 "format.c"
  $17 = ($14>>>0)<($16>>>0); //@line 288 "format.c"
  if (!($17)) {
   break;
  }
  $18 = $2; //@line 289 "format.c"
  $19 = ((($18)) + 4|0); //@line 289 "format.c"
  $20 = HEAP32[$19>>2]|0; //@line 289 "format.c"
  $21 = $3; //@line 289 "format.c"
  $22 = (($20) + (($21*24)|0)|0); //@line 289 "format.c"
  $23 = $22; //@line 289 "format.c"
  $24 = $23; //@line 289 "format.c"
  $25 = HEAP32[$24>>2]|0; //@line 289 "format.c"
  $26 = (($23) + 4)|0; //@line 289 "format.c"
  $27 = $26; //@line 289 "format.c"
  $28 = HEAP32[$27>>2]|0; //@line 289 "format.c"
  $29 = ($25|0)==(-1); //@line 289 "format.c"
  $30 = ($28|0)==(-1); //@line 289 "format.c"
  $31 = $29 & $30; //@line 289 "format.c"
  $32 = $5; //@line 290 "format.c"
  $33 = ($32|0)!=(0); //@line 290 "format.c"
  $or$cond = $31 | $33; //@line 289 "format.c"
  if ($or$cond) {
   label = 7;
  } else {
   $34 = $2; //@line 291 "format.c"
   $35 = ((($34)) + 4|0); //@line 291 "format.c"
   $36 = HEAP32[$35>>2]|0; //@line 291 "format.c"
   $37 = $3; //@line 291 "format.c"
   $38 = (($36) + (($37*24)|0)|0); //@line 291 "format.c"
   $39 = $38; //@line 291 "format.c"
   $40 = $39; //@line 291 "format.c"
   $41 = HEAP32[$40>>2]|0; //@line 291 "format.c"
   $42 = (($39) + 4)|0; //@line 291 "format.c"
   $43 = $42; //@line 291 "format.c"
   $44 = HEAP32[$43>>2]|0; //@line 291 "format.c"
   $45 = $2; //@line 291 "format.c"
   $46 = ((($45)) + 4|0); //@line 291 "format.c"
   $47 = HEAP32[$46>>2]|0; //@line 291 "format.c"
   $48 = $4; //@line 291 "format.c"
   $49 = (($48) - 1)|0; //@line 291 "format.c"
   $50 = (($47) + (($49*24)|0)|0); //@line 291 "format.c"
   $51 = $50; //@line 291 "format.c"
   $52 = $51; //@line 291 "format.c"
   $53 = HEAP32[$52>>2]|0; //@line 291 "format.c"
   $54 = (($51) + 4)|0; //@line 291 "format.c"
   $55 = $54; //@line 291 "format.c"
   $56 = HEAP32[$55>>2]|0; //@line 291 "format.c"
   $57 = ($41|0)==($53|0); //@line 291 "format.c"
   $58 = ($44|0)==($56|0); //@line 291 "format.c"
   $59 = $57 & $58; //@line 291 "format.c"
   if (!($59)) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $5 = 0; //@line 295 "format.c"
   $60 = $2; //@line 296 "format.c"
   $61 = ((($60)) + 4|0); //@line 296 "format.c"
   $62 = HEAP32[$61>>2]|0; //@line 296 "format.c"
   $63 = $4; //@line 296 "format.c"
   $64 = (($63) + 1)|0; //@line 296 "format.c"
   $4 = $64; //@line 296 "format.c"
   $65 = (($62) + (($63*24)|0)|0); //@line 296 "format.c"
   $66 = $2; //@line 296 "format.c"
   $67 = ((($66)) + 4|0); //@line 296 "format.c"
   $68 = HEAP32[$67>>2]|0; //@line 296 "format.c"
   $69 = $3; //@line 296 "format.c"
   $70 = (($68) + (($69*24)|0)|0); //@line 296 "format.c"
   ;HEAP32[$65>>2]=HEAP32[$70>>2]|0;HEAP32[$65+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[$70+12>>2]|0;HEAP32[$65+16>>2]=HEAP32[$70+16>>2]|0;HEAP32[$65+20>>2]=HEAP32[$70+20>>2]|0; //@line 296 "format.c"
  }
  $71 = $3; //@line 288 "format.c"
  $72 = (($71) + 1)|0; //@line 288 "format.c"
  $3 = $72; //@line 288 "format.c"
 }
 $73 = $4; //@line 299 "format.c"
 $3 = $73; //@line 299 "format.c"
 while(1) {
  $74 = $3; //@line 299 "format.c"
  $75 = $2; //@line 299 "format.c"
  $76 = HEAP32[$75>>2]|0; //@line 299 "format.c"
  $77 = ($74>>>0)<($76>>>0); //@line 299 "format.c"
  if (!($77)) {
   break;
  }
  $78 = $2; //@line 300 "format.c"
  $79 = ((($78)) + 4|0); //@line 300 "format.c"
  $80 = HEAP32[$79>>2]|0; //@line 300 "format.c"
  $81 = $3; //@line 300 "format.c"
  $82 = (($80) + (($81*24)|0)|0); //@line 300 "format.c"
  $83 = $82; //@line 300 "format.c"
  $84 = $83; //@line 300 "format.c"
  HEAP32[$84>>2] = -1; //@line 300 "format.c"
  $85 = (($83) + 4)|0; //@line 300 "format.c"
  $86 = $85; //@line 300 "format.c"
  HEAP32[$86>>2] = -1; //@line 300 "format.c"
  $87 = $2; //@line 301 "format.c"
  $88 = ((($87)) + 4|0); //@line 301 "format.c"
  $89 = HEAP32[$88>>2]|0; //@line 301 "format.c"
  $90 = $3; //@line 301 "format.c"
  $91 = (($89) + (($90*24)|0)|0); //@line 301 "format.c"
  $92 = ((($91)) + 8|0); //@line 301 "format.c"
  $93 = $92; //@line 301 "format.c"
  $94 = $93; //@line 301 "format.c"
  HEAP32[$94>>2] = 0; //@line 301 "format.c"
  $95 = (($93) + 4)|0; //@line 301 "format.c"
  $96 = $95; //@line 301 "format.c"
  HEAP32[$96>>2] = 0; //@line 301 "format.c"
  $97 = $2; //@line 302 "format.c"
  $98 = ((($97)) + 4|0); //@line 302 "format.c"
  $99 = HEAP32[$98>>2]|0; //@line 302 "format.c"
  $100 = $3; //@line 302 "format.c"
  $101 = (($99) + (($100*24)|0)|0); //@line 302 "format.c"
  $102 = ((($101)) + 16|0); //@line 302 "format.c"
  HEAP32[$102>>2] = 0; //@line 302 "format.c"
  $103 = $3; //@line 299 "format.c"
  $104 = (($103) + 1)|0; //@line 299 "format.c"
  $3 = $104; //@line 299 "format.c"
 }
 $105 = $4; //@line 305 "format.c"
 $1 = $105; //@line 305 "format.c"
 $106 = $1; //@line 306 "format.c"
 STACKTOP = sp;return ($106|0); //@line 306 "format.c"
}
function _seekpoint_compare_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 264 "format.c"
 $6 = $5; //@line 264 "format.c"
 $7 = $6; //@line 264 "format.c"
 $8 = HEAP32[$7>>2]|0; //@line 264 "format.c"
 $9 = (($6) + 4)|0; //@line 264 "format.c"
 $10 = $9; //@line 264 "format.c"
 $11 = HEAP32[$10>>2]|0; //@line 264 "format.c"
 $12 = $4; //@line 264 "format.c"
 $13 = $12; //@line 264 "format.c"
 $14 = $13; //@line 264 "format.c"
 $15 = HEAP32[$14>>2]|0; //@line 264 "format.c"
 $16 = (($13) + 4)|0; //@line 264 "format.c"
 $17 = $16; //@line 264 "format.c"
 $18 = HEAP32[$17>>2]|0; //@line 264 "format.c"
 $19 = ($8|0)==($15|0); //@line 264 "format.c"
 $20 = ($11|0)==($18|0); //@line 264 "format.c"
 $21 = $19 & $20; //@line 264 "format.c"
 if ($21) {
  $2 = 0; //@line 265 "format.c"
  $41 = $2; //@line 270 "format.c"
  STACKTOP = sp;return ($41|0); //@line 270 "format.c"
 }
 $22 = $3; //@line 266 "format.c"
 $23 = $22; //@line 266 "format.c"
 $24 = $23; //@line 266 "format.c"
 $25 = HEAP32[$24>>2]|0; //@line 266 "format.c"
 $26 = (($23) + 4)|0; //@line 266 "format.c"
 $27 = $26; //@line 266 "format.c"
 $28 = HEAP32[$27>>2]|0; //@line 266 "format.c"
 $29 = $4; //@line 266 "format.c"
 $30 = $29; //@line 266 "format.c"
 $31 = $30; //@line 266 "format.c"
 $32 = HEAP32[$31>>2]|0; //@line 266 "format.c"
 $33 = (($30) + 4)|0; //@line 266 "format.c"
 $34 = $33; //@line 266 "format.c"
 $35 = HEAP32[$34>>2]|0; //@line 266 "format.c"
 $36 = ($28>>>0)<($35>>>0); //@line 266 "format.c"
 $37 = ($25>>>0)<($32>>>0); //@line 266 "format.c"
 $38 = ($28|0)==($35|0); //@line 266 "format.c"
 $39 = $38 & $37; //@line 266 "format.c"
 $40 = $36 | $39; //@line 266 "format.c"
 if ($40) {
  $2 = -1; //@line 267 "format.c"
  $41 = $2; //@line 270 "format.c"
  STACKTOP = sp;return ($41|0); //@line 270 "format.c"
 } else {
  $2 = 1; //@line 269 "format.c"
  $41 = $2; //@line 270 "format.c"
  STACKTOP = sp;return ($41|0); //@line 270 "format.c"
 }
 return (0)|0;
}
function _utf8len_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 317 "format.c"
 $4 = HEAP8[$3>>0]|0; //@line 317 "format.c"
 $5 = $4&255; //@line 317 "format.c"
 $6 = $5 & 128; //@line 317 "format.c"
 $7 = ($6|0)==(0); //@line 317 "format.c"
 if ($7) {
  $1 = 1; //@line 318 "format.c"
  $193 = $1; //@line 353 "format.c"
  STACKTOP = sp;return ($193|0); //@line 353 "format.c"
 }
 $8 = $2; //@line 320 "format.c"
 $9 = HEAP8[$8>>0]|0; //@line 320 "format.c"
 $10 = $9&255; //@line 320 "format.c"
 $11 = $10 & 224; //@line 320 "format.c"
 $12 = ($11|0)==(192); //@line 320 "format.c"
 if ($12) {
  $13 = $2; //@line 320 "format.c"
  $14 = ((($13)) + 1|0); //@line 320 "format.c"
  $15 = HEAP8[$14>>0]|0; //@line 320 "format.c"
  $16 = $15&255; //@line 320 "format.c"
  $17 = $16 & 192; //@line 320 "format.c"
  $18 = ($17|0)==(128); //@line 320 "format.c"
  if ($18) {
   $19 = $2; //@line 321 "format.c"
   $20 = HEAP8[$19>>0]|0; //@line 321 "format.c"
   $21 = $20&255; //@line 321 "format.c"
   $22 = $21 & 254; //@line 321 "format.c"
   $23 = ($22|0)==(192); //@line 321 "format.c"
   if ($23) {
    $1 = 0; //@line 322 "format.c"
    $193 = $1; //@line 353 "format.c"
    STACKTOP = sp;return ($193|0); //@line 353 "format.c"
   } else {
    $1 = 2; //@line 323 "format.c"
    $193 = $1; //@line 353 "format.c"
    STACKTOP = sp;return ($193|0); //@line 353 "format.c"
   }
  }
 }
 $24 = $2; //@line 325 "format.c"
 $25 = HEAP8[$24>>0]|0; //@line 325 "format.c"
 $26 = $25&255; //@line 325 "format.c"
 $27 = $26 & 240; //@line 325 "format.c"
 $28 = ($27|0)==(224); //@line 325 "format.c"
 if ($28) {
  $29 = $2; //@line 325 "format.c"
  $30 = ((($29)) + 1|0); //@line 325 "format.c"
  $31 = HEAP8[$30>>0]|0; //@line 325 "format.c"
  $32 = $31&255; //@line 325 "format.c"
  $33 = $32 & 192; //@line 325 "format.c"
  $34 = ($33|0)==(128); //@line 325 "format.c"
  if ($34) {
   $35 = $2; //@line 325 "format.c"
   $36 = ((($35)) + 2|0); //@line 325 "format.c"
   $37 = HEAP8[$36>>0]|0; //@line 325 "format.c"
   $38 = $37&255; //@line 325 "format.c"
   $39 = $38 & 192; //@line 325 "format.c"
   $40 = ($39|0)==(128); //@line 325 "format.c"
   if ($40) {
    $41 = $2; //@line 326 "format.c"
    $42 = HEAP8[$41>>0]|0; //@line 326 "format.c"
    $43 = $42&255; //@line 326 "format.c"
    $44 = ($43|0)==(224); //@line 326 "format.c"
    if ($44) {
     $45 = $2; //@line 326 "format.c"
     $46 = ((($45)) + 1|0); //@line 326 "format.c"
     $47 = HEAP8[$46>>0]|0; //@line 326 "format.c"
     $48 = $47&255; //@line 326 "format.c"
     $49 = $48 & 224; //@line 326 "format.c"
     $50 = ($49|0)==(128); //@line 326 "format.c"
     if ($50) {
      $1 = 0; //@line 327 "format.c"
      $193 = $1; //@line 353 "format.c"
      STACKTOP = sp;return ($193|0); //@line 353 "format.c"
     }
    }
    $51 = $2; //@line 329 "format.c"
    $52 = HEAP8[$51>>0]|0; //@line 329 "format.c"
    $53 = $52&255; //@line 329 "format.c"
    $54 = ($53|0)==(237); //@line 329 "format.c"
    if ($54) {
     $55 = $2; //@line 329 "format.c"
     $56 = ((($55)) + 1|0); //@line 329 "format.c"
     $57 = HEAP8[$56>>0]|0; //@line 329 "format.c"
     $58 = $57&255; //@line 329 "format.c"
     $59 = $58 & 224; //@line 329 "format.c"
     $60 = ($59|0)==(160); //@line 329 "format.c"
     if ($60) {
      $1 = 0; //@line 330 "format.c"
      $193 = $1; //@line 353 "format.c"
      STACKTOP = sp;return ($193|0); //@line 353 "format.c"
     }
    }
    $61 = $2; //@line 331 "format.c"
    $62 = HEAP8[$61>>0]|0; //@line 331 "format.c"
    $63 = $62&255; //@line 331 "format.c"
    $64 = ($63|0)==(239); //@line 331 "format.c"
    if ($64) {
     $65 = $2; //@line 331 "format.c"
     $66 = ((($65)) + 1|0); //@line 331 "format.c"
     $67 = HEAP8[$66>>0]|0; //@line 331 "format.c"
     $68 = $67&255; //@line 331 "format.c"
     $69 = ($68|0)==(191); //@line 331 "format.c"
     if ($69) {
      $70 = $2; //@line 331 "format.c"
      $71 = ((($70)) + 2|0); //@line 331 "format.c"
      $72 = HEAP8[$71>>0]|0; //@line 331 "format.c"
      $73 = $72&255; //@line 331 "format.c"
      $74 = $73 & 254; //@line 331 "format.c"
      $75 = ($74|0)==(190); //@line 331 "format.c"
      if ($75) {
       $1 = 0; //@line 332 "format.c"
       $193 = $1; //@line 353 "format.c"
       STACKTOP = sp;return ($193|0); //@line 353 "format.c"
      }
     }
    }
    $1 = 3; //@line 333 "format.c"
    $193 = $1; //@line 353 "format.c"
    STACKTOP = sp;return ($193|0); //@line 353 "format.c"
   }
  }
 }
 $76 = $2; //@line 335 "format.c"
 $77 = HEAP8[$76>>0]|0; //@line 335 "format.c"
 $78 = $77&255; //@line 335 "format.c"
 $79 = $78 & 248; //@line 335 "format.c"
 $80 = ($79|0)==(240); //@line 335 "format.c"
 if ($80) {
  $81 = $2; //@line 335 "format.c"
  $82 = ((($81)) + 1|0); //@line 335 "format.c"
  $83 = HEAP8[$82>>0]|0; //@line 335 "format.c"
  $84 = $83&255; //@line 335 "format.c"
  $85 = $84 & 192; //@line 335 "format.c"
  $86 = ($85|0)==(128); //@line 335 "format.c"
  if ($86) {
   $87 = $2; //@line 335 "format.c"
   $88 = ((($87)) + 2|0); //@line 335 "format.c"
   $89 = HEAP8[$88>>0]|0; //@line 335 "format.c"
   $90 = $89&255; //@line 335 "format.c"
   $91 = $90 & 192; //@line 335 "format.c"
   $92 = ($91|0)==(128); //@line 335 "format.c"
   if ($92) {
    $93 = $2; //@line 335 "format.c"
    $94 = ((($93)) + 3|0); //@line 335 "format.c"
    $95 = HEAP8[$94>>0]|0; //@line 335 "format.c"
    $96 = $95&255; //@line 335 "format.c"
    $97 = $96 & 192; //@line 335 "format.c"
    $98 = ($97|0)==(128); //@line 335 "format.c"
    if ($98) {
     $99 = $2; //@line 336 "format.c"
     $100 = HEAP8[$99>>0]|0; //@line 336 "format.c"
     $101 = $100&255; //@line 336 "format.c"
     $102 = ($101|0)==(240); //@line 336 "format.c"
     if ($102) {
      $103 = $2; //@line 336 "format.c"
      $104 = ((($103)) + 1|0); //@line 336 "format.c"
      $105 = HEAP8[$104>>0]|0; //@line 336 "format.c"
      $106 = $105&255; //@line 336 "format.c"
      $107 = $106 & 240; //@line 336 "format.c"
      $108 = ($107|0)==(128); //@line 336 "format.c"
      if ($108) {
       $1 = 0; //@line 337 "format.c"
       $193 = $1; //@line 353 "format.c"
       STACKTOP = sp;return ($193|0); //@line 353 "format.c"
      }
     }
     $1 = 4; //@line 338 "format.c"
     $193 = $1; //@line 353 "format.c"
     STACKTOP = sp;return ($193|0); //@line 353 "format.c"
    }
   }
  }
 }
 $109 = $2; //@line 340 "format.c"
 $110 = HEAP8[$109>>0]|0; //@line 340 "format.c"
 $111 = $110&255; //@line 340 "format.c"
 $112 = $111 & 252; //@line 340 "format.c"
 $113 = ($112|0)==(248); //@line 340 "format.c"
 if ($113) {
  $114 = $2; //@line 340 "format.c"
  $115 = ((($114)) + 1|0); //@line 340 "format.c"
  $116 = HEAP8[$115>>0]|0; //@line 340 "format.c"
  $117 = $116&255; //@line 340 "format.c"
  $118 = $117 & 192; //@line 340 "format.c"
  $119 = ($118|0)==(128); //@line 340 "format.c"
  if ($119) {
   $120 = $2; //@line 340 "format.c"
   $121 = ((($120)) + 2|0); //@line 340 "format.c"
   $122 = HEAP8[$121>>0]|0; //@line 340 "format.c"
   $123 = $122&255; //@line 340 "format.c"
   $124 = $123 & 192; //@line 340 "format.c"
   $125 = ($124|0)==(128); //@line 340 "format.c"
   if ($125) {
    $126 = $2; //@line 340 "format.c"
    $127 = ((($126)) + 3|0); //@line 340 "format.c"
    $128 = HEAP8[$127>>0]|0; //@line 340 "format.c"
    $129 = $128&255; //@line 340 "format.c"
    $130 = $129 & 192; //@line 340 "format.c"
    $131 = ($130|0)==(128); //@line 340 "format.c"
    if ($131) {
     $132 = $2; //@line 340 "format.c"
     $133 = ((($132)) + 4|0); //@line 340 "format.c"
     $134 = HEAP8[$133>>0]|0; //@line 340 "format.c"
     $135 = $134&255; //@line 340 "format.c"
     $136 = $135 & 192; //@line 340 "format.c"
     $137 = ($136|0)==(128); //@line 340 "format.c"
     if ($137) {
      $138 = $2; //@line 341 "format.c"
      $139 = HEAP8[$138>>0]|0; //@line 341 "format.c"
      $140 = $139&255; //@line 341 "format.c"
      $141 = ($140|0)==(248); //@line 341 "format.c"
      if ($141) {
       $142 = $2; //@line 341 "format.c"
       $143 = ((($142)) + 1|0); //@line 341 "format.c"
       $144 = HEAP8[$143>>0]|0; //@line 341 "format.c"
       $145 = $144&255; //@line 341 "format.c"
       $146 = $145 & 248; //@line 341 "format.c"
       $147 = ($146|0)==(128); //@line 341 "format.c"
       if ($147) {
        $1 = 0; //@line 342 "format.c"
        $193 = $1; //@line 353 "format.c"
        STACKTOP = sp;return ($193|0); //@line 353 "format.c"
       }
      }
      $1 = 5; //@line 343 "format.c"
      $193 = $1; //@line 353 "format.c"
      STACKTOP = sp;return ($193|0); //@line 353 "format.c"
     }
    }
   }
  }
 }
 $148 = $2; //@line 345 "format.c"
 $149 = HEAP8[$148>>0]|0; //@line 345 "format.c"
 $150 = $149&255; //@line 345 "format.c"
 $151 = $150 & 254; //@line 345 "format.c"
 $152 = ($151|0)==(252); //@line 345 "format.c"
 if ($152) {
  $153 = $2; //@line 345 "format.c"
  $154 = ((($153)) + 1|0); //@line 345 "format.c"
  $155 = HEAP8[$154>>0]|0; //@line 345 "format.c"
  $156 = $155&255; //@line 345 "format.c"
  $157 = $156 & 192; //@line 345 "format.c"
  $158 = ($157|0)==(128); //@line 345 "format.c"
  if ($158) {
   $159 = $2; //@line 345 "format.c"
   $160 = ((($159)) + 2|0); //@line 345 "format.c"
   $161 = HEAP8[$160>>0]|0; //@line 345 "format.c"
   $162 = $161&255; //@line 345 "format.c"
   $163 = $162 & 192; //@line 345 "format.c"
   $164 = ($163|0)==(128); //@line 345 "format.c"
   if ($164) {
    $165 = $2; //@line 345 "format.c"
    $166 = ((($165)) + 3|0); //@line 345 "format.c"
    $167 = HEAP8[$166>>0]|0; //@line 345 "format.c"
    $168 = $167&255; //@line 345 "format.c"
    $169 = $168 & 192; //@line 345 "format.c"
    $170 = ($169|0)==(128); //@line 345 "format.c"
    if ($170) {
     $171 = $2; //@line 345 "format.c"
     $172 = ((($171)) + 4|0); //@line 345 "format.c"
     $173 = HEAP8[$172>>0]|0; //@line 345 "format.c"
     $174 = $173&255; //@line 345 "format.c"
     $175 = $174 & 192; //@line 345 "format.c"
     $176 = ($175|0)==(128); //@line 345 "format.c"
     if ($176) {
      $177 = $2; //@line 345 "format.c"
      $178 = ((($177)) + 5|0); //@line 345 "format.c"
      $179 = HEAP8[$178>>0]|0; //@line 345 "format.c"
      $180 = $179&255; //@line 345 "format.c"
      $181 = $180 & 192; //@line 345 "format.c"
      $182 = ($181|0)==(128); //@line 345 "format.c"
      if ($182) {
       $183 = $2; //@line 346 "format.c"
       $184 = HEAP8[$183>>0]|0; //@line 346 "format.c"
       $185 = $184&255; //@line 346 "format.c"
       $186 = ($185|0)==(252); //@line 346 "format.c"
       if ($186) {
        $187 = $2; //@line 346 "format.c"
        $188 = ((($187)) + 1|0); //@line 346 "format.c"
        $189 = HEAP8[$188>>0]|0; //@line 346 "format.c"
        $190 = $189&255; //@line 346 "format.c"
        $191 = $190 & 252; //@line 346 "format.c"
        $192 = ($191|0)==(128); //@line 346 "format.c"
        if ($192) {
         $1 = 0; //@line 347 "format.c"
         $193 = $1; //@line 353 "format.c"
         STACKTOP = sp;return ($193|0); //@line 353 "format.c"
        }
       }
       $1 = 6; //@line 348 "format.c"
       $193 = $1; //@line 353 "format.c"
       STACKTOP = sp;return ($193|0); //@line 353 "format.c"
      }
     }
    }
   }
  }
 }
 $1 = 0; //@line 351 "format.c"
 $193 = $1; //@line 353 "format.c"
 STACKTOP = sp;return ($193|0); //@line 353 "format.c"
}
function _FLAC__format_cuesheet_is_legal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5; //@line 418 "format.c"
 $10 = ($9|0)!=(0); //@line 418 "format.c"
 if ($10) {
  $11 = $4; //@line 419 "format.c"
  $12 = ((($11)) + 136|0); //@line 419 "format.c"
  $13 = $12; //@line 419 "format.c"
  $14 = $13; //@line 419 "format.c"
  $15 = HEAP32[$14>>2]|0; //@line 419 "format.c"
  $16 = (($13) + 4)|0; //@line 419 "format.c"
  $17 = $16; //@line 419 "format.c"
  $18 = HEAP32[$17>>2]|0; //@line 419 "format.c"
  $19 = ($18>>>0)<(0); //@line 419 "format.c"
  $20 = ($15>>>0)<(88200); //@line 419 "format.c"
  $21 = ($18|0)==(0); //@line 419 "format.c"
  $22 = $21 & $20; //@line 419 "format.c"
  $23 = $19 | $22; //@line 419 "format.c"
  if ($23) {
   $24 = $6; //@line 420 "format.c"
   $25 = ($24|0)!=(0|0); //@line 420 "format.c"
   if ($25) {
    $26 = $6; //@line 420 "format.c"
    HEAP32[$26>>2] = 2357; //@line 420 "format.c"
   }
   $3 = 0; //@line 421 "format.c"
   $246 = $3; //@line 490 "format.c"
   STACKTOP = sp;return ($246|0); //@line 490 "format.c"
  }
  $27 = $4; //@line 423 "format.c"
  $28 = ((($27)) + 136|0); //@line 423 "format.c"
  $29 = $28; //@line 423 "format.c"
  $30 = $29; //@line 423 "format.c"
  $31 = HEAP32[$30>>2]|0; //@line 423 "format.c"
  $32 = (($29) + 4)|0; //@line 423 "format.c"
  $33 = $32; //@line 423 "format.c"
  $34 = HEAP32[$33>>2]|0; //@line 423 "format.c"
  $35 = (___uremdi3(($31|0),($34|0),588,0)|0); //@line 423 "format.c"
  $36 = tempRet0; //@line 423 "format.c"
  $37 = ($35|0)!=(0); //@line 423 "format.c"
  $38 = ($36|0)!=(0); //@line 423 "format.c"
  $39 = $37 | $38; //@line 423 "format.c"
  if ($39) {
   $40 = $6; //@line 424 "format.c"
   $41 = ($40|0)!=(0|0); //@line 424 "format.c"
   if ($41) {
    $42 = $6; //@line 424 "format.c"
    HEAP32[$42>>2] = 2422; //@line 424 "format.c"
   }
   $3 = 0; //@line 425 "format.c"
   $246 = $3; //@line 490 "format.c"
   STACKTOP = sp;return ($246|0); //@line 490 "format.c"
  }
 }
 $43 = $4; //@line 429 "format.c"
 $44 = ((($43)) + 148|0); //@line 429 "format.c"
 $45 = HEAP32[$44>>2]|0; //@line 429 "format.c"
 $46 = ($45|0)==(0); //@line 429 "format.c"
 if ($46) {
  $47 = $6; //@line 430 "format.c"
  $48 = ($47|0)!=(0|0); //@line 430 "format.c"
  if ($48) {
   $49 = $6; //@line 430 "format.c"
   HEAP32[$49>>2] = 2493; //@line 430 "format.c"
  }
  $3 = 0; //@line 431 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 $50 = $5; //@line 434 "format.c"
 $51 = ($50|0)!=(0); //@line 434 "format.c"
 if ($51) {
  $52 = $4; //@line 434 "format.c"
  $53 = ((($52)) + 152|0); //@line 434 "format.c"
  $54 = HEAP32[$53>>2]|0; //@line 434 "format.c"
  $55 = $4; //@line 434 "format.c"
  $56 = ((($55)) + 148|0); //@line 434 "format.c"
  $57 = HEAP32[$56>>2]|0; //@line 434 "format.c"
  $58 = (($57) - 1)|0; //@line 434 "format.c"
  $59 = (($54) + ($58<<5)|0); //@line 434 "format.c"
  $60 = ((($59)) + 8|0); //@line 434 "format.c"
  $61 = HEAP8[$60>>0]|0; //@line 434 "format.c"
  $62 = $61&255; //@line 434 "format.c"
  $63 = ($62|0)!=(170); //@line 434 "format.c"
  if ($63) {
   $64 = $6; //@line 435 "format.c"
   $65 = ($64|0)!=(0|0); //@line 435 "format.c"
   if ($65) {
    $66 = $6; //@line 435 "format.c"
    HEAP32[$66>>2] = 2547; //@line 435 "format.c"
   }
   $3 = 0; //@line 436 "format.c"
   $246 = $3; //@line 490 "format.c"
   STACKTOP = sp;return ($246|0); //@line 490 "format.c"
  }
 }
 $7 = 0; //@line 439 "format.c"
 L31: while(1) {
  $67 = $7; //@line 439 "format.c"
  $68 = $4; //@line 439 "format.c"
  $69 = ((($68)) + 148|0); //@line 439 "format.c"
  $70 = HEAP32[$69>>2]|0; //@line 439 "format.c"
  $71 = ($67>>>0)<($70>>>0); //@line 439 "format.c"
  if (!($71)) {
   label = 62;
   break;
  }
  $72 = $4; //@line 440 "format.c"
  $73 = ((($72)) + 152|0); //@line 440 "format.c"
  $74 = HEAP32[$73>>2]|0; //@line 440 "format.c"
  $75 = $7; //@line 440 "format.c"
  $76 = (($74) + ($75<<5)|0); //@line 440 "format.c"
  $77 = ((($76)) + 8|0); //@line 440 "format.c"
  $78 = HEAP8[$77>>0]|0; //@line 440 "format.c"
  $79 = $78&255; //@line 440 "format.c"
  $80 = ($79|0)==(0); //@line 440 "format.c"
  if ($80) {
   label = 22;
   break;
  }
  $84 = $5; //@line 445 "format.c"
  $85 = ($84|0)!=(0); //@line 445 "format.c"
  do {
   if ($85) {
    $86 = $4; //@line 446 "format.c"
    $87 = ((($86)) + 152|0); //@line 446 "format.c"
    $88 = HEAP32[$87>>2]|0; //@line 446 "format.c"
    $89 = $7; //@line 446 "format.c"
    $90 = (($88) + ($89<<5)|0); //@line 446 "format.c"
    $91 = ((($90)) + 8|0); //@line 446 "format.c"
    $92 = HEAP8[$91>>0]|0; //@line 446 "format.c"
    $93 = $92&255; //@line 446 "format.c"
    $94 = ($93|0)>=(1); //@line 446 "format.c"
    if ($94) {
     $95 = $4; //@line 446 "format.c"
     $96 = ((($95)) + 152|0); //@line 446 "format.c"
     $97 = HEAP32[$96>>2]|0; //@line 446 "format.c"
     $98 = $7; //@line 446 "format.c"
     $99 = (($97) + ($98<<5)|0); //@line 446 "format.c"
     $100 = ((($99)) + 8|0); //@line 446 "format.c"
     $101 = HEAP8[$100>>0]|0; //@line 446 "format.c"
     $102 = $101&255; //@line 446 "format.c"
     $103 = ($102|0)<=(99); //@line 446 "format.c"
     if ($103) {
      break;
     }
    }
    $104 = $4; //@line 446 "format.c"
    $105 = ((($104)) + 152|0); //@line 446 "format.c"
    $106 = HEAP32[$105>>2]|0; //@line 446 "format.c"
    $107 = $7; //@line 446 "format.c"
    $108 = (($106) + ($107<<5)|0); //@line 446 "format.c"
    $109 = ((($108)) + 8|0); //@line 446 "format.c"
    $110 = HEAP8[$109>>0]|0; //@line 446 "format.c"
    $111 = $110&255; //@line 446 "format.c"
    $112 = ($111|0)==(170); //@line 446 "format.c"
    if (!($112)) {
     label = 29;
     break L31;
    }
   }
  } while(0);
  $116 = $5; //@line 452 "format.c"
  $117 = ($116|0)!=(0); //@line 452 "format.c"
  if ($117) {
   $118 = $4; //@line 452 "format.c"
   $119 = ((($118)) + 152|0); //@line 452 "format.c"
   $120 = HEAP32[$119>>2]|0; //@line 452 "format.c"
   $121 = $7; //@line 452 "format.c"
   $122 = (($120) + ($121<<5)|0); //@line 452 "format.c"
   $123 = $122; //@line 452 "format.c"
   $124 = $123; //@line 452 "format.c"
   $125 = HEAP32[$124>>2]|0; //@line 452 "format.c"
   $126 = (($123) + 4)|0; //@line 452 "format.c"
   $127 = $126; //@line 452 "format.c"
   $128 = HEAP32[$127>>2]|0; //@line 452 "format.c"
   $129 = (___uremdi3(($125|0),($128|0),588,0)|0); //@line 452 "format.c"
   $130 = tempRet0; //@line 452 "format.c"
   $131 = ($129|0)!=(0); //@line 452 "format.c"
   $132 = ($130|0)!=(0); //@line 452 "format.c"
   $133 = $131 | $132; //@line 452 "format.c"
   if ($133) {
    label = 34;
    break;
   }
  }
  $143 = $7; //@line 462 "format.c"
  $144 = $4; //@line 462 "format.c"
  $145 = ((($144)) + 148|0); //@line 462 "format.c"
  $146 = HEAP32[$145>>2]|0; //@line 462 "format.c"
  $147 = (($146) - 1)|0; //@line 462 "format.c"
  $148 = ($143>>>0)<($147>>>0); //@line 462 "format.c"
  if ($148) {
   $149 = $4; //@line 463 "format.c"
   $150 = ((($149)) + 152|0); //@line 463 "format.c"
   $151 = HEAP32[$150>>2]|0; //@line 463 "format.c"
   $152 = $7; //@line 463 "format.c"
   $153 = (($151) + ($152<<5)|0); //@line 463 "format.c"
   $154 = ((($153)) + 23|0); //@line 463 "format.c"
   $155 = HEAP8[$154>>0]|0; //@line 463 "format.c"
   $156 = $155&255; //@line 463 "format.c"
   $157 = ($156|0)==(0); //@line 463 "format.c"
   if ($157) {
    label = 41;
    break;
   }
   $161 = $4; //@line 468 "format.c"
   $162 = ((($161)) + 152|0); //@line 468 "format.c"
   $163 = HEAP32[$162>>2]|0; //@line 468 "format.c"
   $164 = $7; //@line 468 "format.c"
   $165 = (($163) + ($164<<5)|0); //@line 468 "format.c"
   $166 = ((($165)) + 24|0); //@line 468 "format.c"
   $167 = HEAP32[$166>>2]|0; //@line 468 "format.c"
   $168 = ((($167)) + 8|0); //@line 468 "format.c"
   $169 = HEAP8[$168>>0]|0; //@line 468 "format.c"
   $170 = $169&255; //@line 468 "format.c"
   $171 = ($170|0)>(1); //@line 468 "format.c"
   if ($171) {
    label = 45;
    break;
   }
  }
  $8 = 0; //@line 474 "format.c"
  while(1) {
   $175 = $8; //@line 474 "format.c"
   $176 = $4; //@line 474 "format.c"
   $177 = ((($176)) + 152|0); //@line 474 "format.c"
   $178 = HEAP32[$177>>2]|0; //@line 474 "format.c"
   $179 = $7; //@line 474 "format.c"
   $180 = (($178) + ($179<<5)|0); //@line 474 "format.c"
   $181 = ((($180)) + 23|0); //@line 474 "format.c"
   $182 = HEAP8[$181>>0]|0; //@line 474 "format.c"
   $183 = $182&255; //@line 474 "format.c"
   $184 = ($175>>>0)<($183>>>0); //@line 474 "format.c"
   if (!($184)) {
    break;
   }
   $185 = $5; //@line 475 "format.c"
   $186 = ($185|0)!=(0); //@line 475 "format.c"
   if ($186) {
    $187 = $4; //@line 475 "format.c"
    $188 = ((($187)) + 152|0); //@line 475 "format.c"
    $189 = HEAP32[$188>>2]|0; //@line 475 "format.c"
    $190 = $7; //@line 475 "format.c"
    $191 = (($189) + ($190<<5)|0); //@line 475 "format.c"
    $192 = ((($191)) + 24|0); //@line 475 "format.c"
    $193 = HEAP32[$192>>2]|0; //@line 475 "format.c"
    $194 = $8; //@line 475 "format.c"
    $195 = (($193) + ($194<<4)|0); //@line 475 "format.c"
    $196 = $195; //@line 475 "format.c"
    $197 = $196; //@line 475 "format.c"
    $198 = HEAP32[$197>>2]|0; //@line 475 "format.c"
    $199 = (($196) + 4)|0; //@line 475 "format.c"
    $200 = $199; //@line 475 "format.c"
    $201 = HEAP32[$200>>2]|0; //@line 475 "format.c"
    $202 = (___uremdi3(($198|0),($201|0),588,0)|0); //@line 475 "format.c"
    $203 = tempRet0; //@line 475 "format.c"
    $204 = ($202|0)!=(0); //@line 475 "format.c"
    $205 = ($203|0)!=(0); //@line 475 "format.c"
    $206 = $204 | $205; //@line 475 "format.c"
    if ($206) {
     label = 52;
     break L31;
    }
   }
   $210 = $8; //@line 480 "format.c"
   $211 = ($210>>>0)>(0); //@line 480 "format.c"
   if ($211) {
    $212 = $4; //@line 481 "format.c"
    $213 = ((($212)) + 152|0); //@line 481 "format.c"
    $214 = HEAP32[$213>>2]|0; //@line 481 "format.c"
    $215 = $7; //@line 481 "format.c"
    $216 = (($214) + ($215<<5)|0); //@line 481 "format.c"
    $217 = ((($216)) + 24|0); //@line 481 "format.c"
    $218 = HEAP32[$217>>2]|0; //@line 481 "format.c"
    $219 = $8; //@line 481 "format.c"
    $220 = (($218) + ($219<<4)|0); //@line 481 "format.c"
    $221 = ((($220)) + 8|0); //@line 481 "format.c"
    $222 = HEAP8[$221>>0]|0; //@line 481 "format.c"
    $223 = $222&255; //@line 481 "format.c"
    $224 = $4; //@line 481 "format.c"
    $225 = ((($224)) + 152|0); //@line 481 "format.c"
    $226 = HEAP32[$225>>2]|0; //@line 481 "format.c"
    $227 = $7; //@line 481 "format.c"
    $228 = (($226) + ($227<<5)|0); //@line 481 "format.c"
    $229 = ((($228)) + 24|0); //@line 481 "format.c"
    $230 = HEAP32[$229>>2]|0; //@line 481 "format.c"
    $231 = $8; //@line 481 "format.c"
    $232 = (($231) - 1)|0; //@line 481 "format.c"
    $233 = (($230) + ($232<<4)|0); //@line 481 "format.c"
    $234 = ((($233)) + 8|0); //@line 481 "format.c"
    $235 = HEAP8[$234>>0]|0; //@line 481 "format.c"
    $236 = $235&255; //@line 481 "format.c"
    $237 = (($236) + 1)|0; //@line 481 "format.c"
    $238 = ($223|0)!=($237|0); //@line 481 "format.c"
    if ($238) {
     label = 57;
     break L31;
    }
   }
   $242 = $8; //@line 474 "format.c"
   $243 = (($242) + 1)|0; //@line 474 "format.c"
   $8 = $243; //@line 474 "format.c"
  }
  $244 = $7; //@line 439 "format.c"
  $245 = (($244) + 1)|0; //@line 439 "format.c"
  $7 = $245; //@line 439 "format.c"
 }
 if ((label|0) == 22) {
  $81 = $6; //@line 441 "format.c"
  $82 = ($81|0)!=(0|0); //@line 441 "format.c"
  if ($82) {
   $83 = $6; //@line 441 "format.c"
   HEAP32[$83>>2] = 2608; //@line 441 "format.c"
  }
  $3 = 0; //@line 442 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 29) {
  $113 = $6; //@line 447 "format.c"
  $114 = ($113|0)!=(0|0); //@line 447 "format.c"
  if ($114) {
   $115 = $6; //@line 447 "format.c"
   HEAP32[$115>>2] = 2648; //@line 447 "format.c"
  }
  $3 = 0; //@line 448 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 34) {
  $134 = $6; //@line 453 "format.c"
  $135 = ($134|0)!=(0|0); //@line 453 "format.c"
  do {
   if ($135) {
    $136 = $7; //@line 454 "format.c"
    $137 = $4; //@line 454 "format.c"
    $138 = ((($137)) + 148|0); //@line 454 "format.c"
    $139 = HEAP32[$138>>2]|0; //@line 454 "format.c"
    $140 = (($139) - 1)|0; //@line 454 "format.c"
    $141 = ($136|0)==($140|0); //@line 454 "format.c"
    $142 = $6;
    if ($141) {
     HEAP32[$142>>2] = 2697; //@line 455 "format.c"
     break;
    } else {
     HEAP32[$142>>2] = 2769; //@line 457 "format.c"
     break;
    }
   }
  } while(0);
  $3 = 0; //@line 459 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 41) {
  $158 = $6; //@line 464 "format.c"
  $159 = ($158|0)!=(0|0); //@line 464 "format.c"
  if ($159) {
   $160 = $6; //@line 464 "format.c"
   HEAP32[$160>>2] = 2838; //@line 464 "format.c"
  }
  $3 = 0; //@line 465 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 45) {
  $172 = $6; //@line 469 "format.c"
  $173 = ($172|0)!=(0|0); //@line 469 "format.c"
  if ($173) {
   $174 = $6; //@line 469 "format.c"
   HEAP32[$174>>2] = 2889; //@line 469 "format.c"
  }
  $3 = 0; //@line 470 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 52) {
  $207 = $6; //@line 476 "format.c"
  $208 = ($207|0)!=(0|0); //@line 476 "format.c"
  if ($208) {
   $209 = $6; //@line 476 "format.c"
   HEAP32[$209>>2] = 2941; //@line 476 "format.c"
  }
  $3 = 0; //@line 477 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 57) {
  $239 = $6; //@line 482 "format.c"
  $240 = ($239|0)!=(0|0); //@line 482 "format.c"
  if ($240) {
   $241 = $6; //@line 482 "format.c"
   HEAP32[$241>>2] = 3016; //@line 482 "format.c"
  }
  $3 = 0; //@line 483 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 else if ((label|0) == 62) {
  $3 = 1; //@line 489 "format.c"
  $246 = $3; //@line 490 "format.c"
  STACKTOP = sp;return ($246|0); //@line 490 "format.c"
 }
 return (0)|0;
}
function _FLAC__format_picture_is_legal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3; //@line 498 "format.c"
 $9 = ((($8)) + 4|0); //@line 498 "format.c"
 $10 = HEAP32[$9>>2]|0; //@line 498 "format.c"
 $5 = $10; //@line 498 "format.c"
 while(1) {
  $11 = $5; //@line 498 "format.c"
  $12 = HEAP8[$11>>0]|0; //@line 498 "format.c"
  $13 = ($12<<24>>24)!=(0); //@line 498 "format.c"
  if (!($13)) {
   break;
  }
  $14 = $5; //@line 499 "format.c"
  $15 = HEAP8[$14>>0]|0; //@line 499 "format.c"
  $16 = $15 << 24 >> 24; //@line 499 "format.c"
  $17 = ($16|0)<(32); //@line 499 "format.c"
  if ($17) {
   label = 5;
   break;
  }
  $18 = $5; //@line 499 "format.c"
  $19 = HEAP8[$18>>0]|0; //@line 499 "format.c"
  $20 = $19 << 24 >> 24; //@line 499 "format.c"
  $21 = ($20|0)>(126); //@line 499 "format.c"
  if ($21) {
   label = 5;
   break;
  }
  $25 = $5; //@line 498 "format.c"
  $26 = ((($25)) + 1|0); //@line 498 "format.c"
  $5 = $26; //@line 498 "format.c"
 }
 if ((label|0) == 5) {
  $22 = $4; //@line 500 "format.c"
  $23 = ($22|0)!=(0|0); //@line 500 "format.c"
  if ($23) {
   $24 = $4; //@line 500 "format.c"
   HEAP32[$24>>2] = 3065; //@line 500 "format.c"
  }
  $2 = 0; //@line 501 "format.c"
  $43 = $2; //@line 515 "format.c"
  STACKTOP = sp;return ($43|0); //@line 515 "format.c"
 }
 $27 = $3; //@line 505 "format.c"
 $28 = ((($27)) + 8|0); //@line 505 "format.c"
 $29 = HEAP32[$28>>2]|0; //@line 505 "format.c"
 $6 = $29; //@line 505 "format.c"
 while(1) {
  $30 = $6; //@line 505 "format.c"
  $31 = HEAP8[$30>>0]|0; //@line 505 "format.c"
  $32 = ($31<<24>>24)!=(0); //@line 505 "format.c"
  if (!($32)) {
   label = 16;
   break;
  }
  $33 = $6; //@line 506 "format.c"
  $34 = (_utf8len_($33)|0); //@line 506 "format.c"
  $7 = $34; //@line 506 "format.c"
  $35 = $7; //@line 507 "format.c"
  $36 = ($35|0)==(0); //@line 507 "format.c"
  if ($36) {
   break;
  }
  $40 = $7; //@line 511 "format.c"
  $41 = $6; //@line 511 "format.c"
  $42 = (($41) + ($40)|0); //@line 511 "format.c"
  $6 = $42; //@line 511 "format.c"
 }
 if ((label|0) == 16) {
  $2 = 1; //@line 514 "format.c"
  $43 = $2; //@line 515 "format.c"
  STACKTOP = sp;return ($43|0); //@line 515 "format.c"
 }
 $37 = $4; //@line 508 "format.c"
 $38 = ($37|0)!=(0|0); //@line 508 "format.c"
 if ($38) {
  $39 = $4; //@line 508 "format.c"
  HEAP32[$39>>2] = 3139; //@line 508 "format.c"
 }
 $2 = 0; //@line 509 "format.c"
 $43 = $2; //@line 515 "format.c"
 STACKTOP = sp;return ($43|0); //@line 515 "format.c"
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0; //@line 532 "format.c"
 while(1) {
  $3 = $1; //@line 533 "format.c"
  $4 = $3 & 1; //@line 533 "format.c"
  $5 = ($4|0)!=(0); //@line 533 "format.c"
  $6 = $5 ^ 1; //@line 533 "format.c"
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = (($7) + 1)|0; //@line 534 "format.c"
  $2 = $8; //@line 534 "format.c"
  $9 = $1; //@line 535 "format.c"
  $10 = $9 >>> 1; //@line 535 "format.c"
  $1 = $10; //@line 535 "format.c"
 }
 $11 = (15)<($7>>>0); //@line 537 "format.c"
 $12 = $2; //@line 537 "format.c"
 $13 = $11 ? 15 : $12; //@line 537 "format.c"
 STACKTOP = sp;return ($13|0); //@line 537 "format.c"
}
function _FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3; //@line 542 "format.c"
 $6 = $7; //@line 542 "format.c"
 while(1) {
  $8 = $6; //@line 544 "format.c"
  $9 = ($8>>>0)>(0); //@line 544 "format.c"
  if ($9) {
   $10 = $4; //@line 544 "format.c"
   $11 = $6; //@line 544 "format.c"
   $12 = $10 >>> $11; //@line 544 "format.c"
   $13 = $5; //@line 544 "format.c"
   $14 = ($12>>>0)<=($13>>>0); //@line 544 "format.c"
   $17 = $14;
  } else {
   $17 = 0;
  }
  $15 = $6;
  if (!($17)) {
   break;
  }
  $16 = (($15) + -1)|0; //@line 545 "format.c"
  $6 = $16; //@line 545 "format.c"
 }
 STACKTOP = sp;return ($15|0); //@line 552 "format.c"
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 559 "format.c"
 HEAP32[$2>>2] = 0; //@line 559 "format.c"
 $3 = $1; //@line 560 "format.c"
 $4 = ((($3)) + 4|0); //@line 560 "format.c"
 HEAP32[$4>>2] = 0; //@line 560 "format.c"
 $5 = $1; //@line 561 "format.c"
 $6 = ((($5)) + 8|0); //@line 561 "format.c"
 HEAP32[$6>>2] = 0; //@line 561 "format.c"
 STACKTOP = sp;return; //@line 562 "format.c"
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 568 "format.c"
 $3 = HEAP32[$2>>2]|0; //@line 568 "format.c"
 $4 = (0|0)!=($3|0); //@line 568 "format.c"
 if ($4) {
  $5 = $1; //@line 569 "format.c"
  $6 = HEAP32[$5>>2]|0; //@line 569 "format.c"
  _free($6); //@line 569 "format.c"
 }
 $7 = $1; //@line 570 "format.c"
 $8 = ((($7)) + 4|0); //@line 570 "format.c"
 $9 = HEAP32[$8>>2]|0; //@line 570 "format.c"
 $10 = (0|0)!=($9|0); //@line 570 "format.c"
 if ($10) {
  $11 = $1; //@line 571 "format.c"
  $12 = ((($11)) + 4|0); //@line 571 "format.c"
  $13 = HEAP32[$12>>2]|0; //@line 571 "format.c"
  _free($13); //@line 571 "format.c"
 }
 $14 = $1; //@line 572 "format.c"
 _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($14); //@line 572 "format.c"
 STACKTOP = sp;return; //@line 573 "format.c"
}
function _FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 581 "format.c"
 $6 = ((($5)) + 8|0); //@line 581 "format.c"
 $7 = HEAP32[$6>>2]|0; //@line 581 "format.c"
 $8 = $4; //@line 581 "format.c"
 $9 = ($7>>>0)<($8>>>0); //@line 581 "format.c"
 do {
  if ($9) {
   $10 = $3; //@line 582 "format.c"
   $11 = HEAP32[$10>>2]|0; //@line 582 "format.c"
   $12 = $4; //@line 582 "format.c"
   $13 = 1 << $12; //@line 582 "format.c"
   $14 = $13<<2; //@line 582 "format.c"
   $15 = (_safe_realloc__25($11,$14)|0); //@line 582 "format.c"
   $16 = $3; //@line 582 "format.c"
   HEAP32[$16>>2] = $15; //@line 582 "format.c"
   $17 = (0|0)==($15|0); //@line 582 "format.c"
   if ($17) {
    $2 = 0; //@line 583 "format.c"
    $37 = $2; //@line 591 "format.c"
    STACKTOP = sp;return ($37|0); //@line 591 "format.c"
   }
   $18 = $3; //@line 584 "format.c"
   $19 = ((($18)) + 4|0); //@line 584 "format.c"
   $20 = HEAP32[$19>>2]|0; //@line 584 "format.c"
   $21 = $4; //@line 584 "format.c"
   $22 = 1 << $21; //@line 584 "format.c"
   $23 = $22<<2; //@line 584 "format.c"
   $24 = (_safe_realloc__25($20,$23)|0); //@line 584 "format.c"
   $25 = $3; //@line 584 "format.c"
   $26 = ((($25)) + 4|0); //@line 584 "format.c"
   HEAP32[$26>>2] = $24; //@line 584 "format.c"
   $27 = (0|0)==($24|0); //@line 584 "format.c"
   if (!($27)) {
    $28 = $3; //@line 586 "format.c"
    $29 = ((($28)) + 4|0); //@line 586 "format.c"
    $30 = HEAP32[$29>>2]|0; //@line 586 "format.c"
    $31 = $4; //@line 586 "format.c"
    $32 = 1 << $31; //@line 586 "format.c"
    $33 = $32<<2; //@line 586 "format.c"
    _memset(($30|0),0,($33|0))|0; //@line 586 "format.c"
    $34 = $4; //@line 587 "format.c"
    $35 = $3; //@line 587 "format.c"
    $36 = ((($35)) + 8|0); //@line 587 "format.c"
    HEAP32[$36>>2] = $34; //@line 587 "format.c"
    break;
   }
   $2 = 0; //@line 585 "format.c"
   $37 = $2; //@line 591 "format.c"
   STACKTOP = sp;return ($37|0); //@line 591 "format.c"
  }
 } while(0);
 $2 = 1; //@line 590 "format.c"
 $37 = $2; //@line 591 "format.c"
 STACKTOP = sp;return ($37|0); //@line 591 "format.c"
}
function _safe_realloc__25($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2; //@line 158 "../../include\share/alloc.h"
 $4 = $6; //@line 158 "../../include\share/alloc.h"
 $7 = $2; //@line 159 "../../include\share/alloc.h"
 $8 = $3; //@line 159 "../../include\share/alloc.h"
 $9 = (_realloc($7,$8)|0); //@line 159 "../../include\share/alloc.h"
 $5 = $9; //@line 159 "../../include\share/alloc.h"
 $10 = $3; //@line 160 "../../include\share/alloc.h"
 $11 = ($10>>>0)>(0); //@line 160 "../../include\share/alloc.h"
 $12 = $5; //@line 160 "../../include\share/alloc.h"
 $13 = ($12|0)==(0|0); //@line 160 "../../include\share/alloc.h"
 $or$cond = $11 & $13; //@line 160 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $15 = $5; //@line 162 "../../include\share/alloc.h"
  STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
 }
 $14 = $4; //@line 161 "../../include\share/alloc.h"
 _free($14); //@line 161 "../../include\share/alloc.h"
 $15 = $5; //@line 162 "../../include\share/alloc.h"
 STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
}
function _FLAC__lpc_window_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0; //@line 69 "lpc.c"
 while(1) {
  $9 = $8; //@line 69 "lpc.c"
  $10 = $7; //@line 69 "lpc.c"
  $11 = ($9>>>0)<($10>>>0); //@line 69 "lpc.c"
  if (!($11)) {
   break;
  }
  $12 = $4; //@line 70 "lpc.c"
  $13 = $8; //@line 70 "lpc.c"
  $14 = (($12) + ($13<<2)|0); //@line 70 "lpc.c"
  $15 = HEAP32[$14>>2]|0; //@line 70 "lpc.c"
  $16 = (+($15|0)); //@line 70 "lpc.c"
  $17 = $5; //@line 70 "lpc.c"
  $18 = $8; //@line 70 "lpc.c"
  $19 = (($17) + ($18<<2)|0); //@line 70 "lpc.c"
  $20 = +HEAPF32[$19>>2]; //@line 70 "lpc.c"
  $21 = $16 * $20; //@line 70 "lpc.c"
  $22 = $6; //@line 70 "lpc.c"
  $23 = $8; //@line 70 "lpc.c"
  $24 = (($22) + ($23<<2)|0); //@line 70 "lpc.c"
  HEAPF32[$24>>2] = $21; //@line 70 "lpc.c"
  $25 = $8; //@line 69 "lpc.c"
  $26 = (($25) + 1)|0; //@line 69 "lpc.c"
  $8 = $26; //@line 69 "lpc.c"
 }
 STACKTOP = sp;return; //@line 71 "lpc.c"
}
function _FLAC__lpc_compute_autocorrelation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $5; //@line 103 "lpc.c"
 $13 = $6; //@line 103 "lpc.c"
 $14 = (($12) - ($13))|0; //@line 103 "lpc.c"
 $11 = $14; //@line 103 "lpc.c"
 $10 = 0; //@line 108 "lpc.c"
 while(1) {
  $15 = $10; //@line 108 "lpc.c"
  $16 = $6; //@line 108 "lpc.c"
  $17 = ($15>>>0)<($16>>>0); //@line 108 "lpc.c"
  if (!($17)) {
   break;
  }
  $18 = $7; //@line 109 "lpc.c"
  $19 = $10; //@line 109 "lpc.c"
  $20 = (($18) + ($19<<2)|0); //@line 109 "lpc.c"
  HEAPF32[$20>>2] = 0.0; //@line 109 "lpc.c"
  $21 = $10; //@line 108 "lpc.c"
  $22 = (($21) + 1)|0; //@line 108 "lpc.c"
  $10 = $22; //@line 108 "lpc.c"
 }
 $9 = 0; //@line 110 "lpc.c"
 while(1) {
  $23 = $9; //@line 110 "lpc.c"
  $24 = $11; //@line 110 "lpc.c"
  $25 = ($23>>>0)<=($24>>>0); //@line 110 "lpc.c"
  if (!($25)) {
   break;
  }
  $26 = $4; //@line 111 "lpc.c"
  $27 = $9; //@line 111 "lpc.c"
  $28 = (($26) + ($27<<2)|0); //@line 111 "lpc.c"
  $29 = +HEAPF32[$28>>2]; //@line 111 "lpc.c"
  $8 = $29; //@line 111 "lpc.c"
  $10 = 0; //@line 112 "lpc.c"
  while(1) {
   $30 = $10; //@line 112 "lpc.c"
   $31 = $6; //@line 112 "lpc.c"
   $32 = ($30>>>0)<($31>>>0); //@line 112 "lpc.c"
   if (!($32)) {
    break;
   }
   $33 = $8; //@line 113 "lpc.c"
   $34 = $4; //@line 113 "lpc.c"
   $35 = $9; //@line 113 "lpc.c"
   $36 = $10; //@line 113 "lpc.c"
   $37 = (($35) + ($36))|0; //@line 113 "lpc.c"
   $38 = (($34) + ($37<<2)|0); //@line 113 "lpc.c"
   $39 = +HEAPF32[$38>>2]; //@line 113 "lpc.c"
   $40 = $33 * $39; //@line 113 "lpc.c"
   $41 = $7; //@line 113 "lpc.c"
   $42 = $10; //@line 113 "lpc.c"
   $43 = (($41) + ($42<<2)|0); //@line 113 "lpc.c"
   $44 = +HEAPF32[$43>>2]; //@line 113 "lpc.c"
   $45 = $44 + $40; //@line 113 "lpc.c"
   HEAPF32[$43>>2] = $45; //@line 113 "lpc.c"
   $46 = $10; //@line 112 "lpc.c"
   $47 = (($46) + 1)|0; //@line 112 "lpc.c"
   $10 = $47; //@line 112 "lpc.c"
  }
  $48 = $9; //@line 110 "lpc.c"
  $49 = (($48) + 1)|0; //@line 110 "lpc.c"
  $9 = $49; //@line 110 "lpc.c"
 }
 while(1) {
  $50 = $9; //@line 115 "lpc.c"
  $51 = $5; //@line 115 "lpc.c"
  $52 = ($50>>>0)<($51>>>0); //@line 115 "lpc.c"
  if (!($52)) {
   break;
  }
  $53 = $4; //@line 116 "lpc.c"
  $54 = $9; //@line 116 "lpc.c"
  $55 = (($53) + ($54<<2)|0); //@line 116 "lpc.c"
  $56 = +HEAPF32[$55>>2]; //@line 116 "lpc.c"
  $8 = $56; //@line 116 "lpc.c"
  $10 = 0; //@line 117 "lpc.c"
  while(1) {
   $57 = $10; //@line 117 "lpc.c"
   $58 = $5; //@line 117 "lpc.c"
   $59 = $9; //@line 117 "lpc.c"
   $60 = (($58) - ($59))|0; //@line 117 "lpc.c"
   $61 = ($57>>>0)<($60>>>0); //@line 117 "lpc.c"
   if (!($61)) {
    break;
   }
   $62 = $8; //@line 118 "lpc.c"
   $63 = $4; //@line 118 "lpc.c"
   $64 = $9; //@line 118 "lpc.c"
   $65 = $10; //@line 118 "lpc.c"
   $66 = (($64) + ($65))|0; //@line 118 "lpc.c"
   $67 = (($63) + ($66<<2)|0); //@line 118 "lpc.c"
   $68 = +HEAPF32[$67>>2]; //@line 118 "lpc.c"
   $69 = $62 * $68; //@line 118 "lpc.c"
   $70 = $7; //@line 118 "lpc.c"
   $71 = $10; //@line 118 "lpc.c"
   $72 = (($70) + ($71<<2)|0); //@line 118 "lpc.c"
   $73 = +HEAPF32[$72>>2]; //@line 118 "lpc.c"
   $74 = $73 + $69; //@line 118 "lpc.c"
   HEAPF32[$72>>2] = $74; //@line 118 "lpc.c"
   $75 = $10; //@line 117 "lpc.c"
   $76 = (($75) + 1)|0; //@line 117 "lpc.c"
   $10 = $76; //@line 117 "lpc.c"
  }
  $77 = $9; //@line 115 "lpc.c"
  $78 = (($77) + 1)|0; //@line 115 "lpc.c"
  $9 = $78; //@line 115 "lpc.c"
 }
 STACKTOP = sp;return; //@line 120 "lpc.c"
}
function _FLAC__lpc_compute_lp_coefficients($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $12 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $4; //@line 132 "lpc.c"
 $15 = +HEAPF32[$14>>2]; //@line 132 "lpc.c"
 $16 = $15; //@line 132 "lpc.c"
 $11 = $16; //@line 132 "lpc.c"
 $8 = 0; //@line 134 "lpc.c"
 while(1) {
  $17 = $8; //@line 134 "lpc.c"
  $18 = $5; //@line 134 "lpc.c"
  $19 = HEAP32[$18>>2]|0; //@line 134 "lpc.c"
  $20 = ($17>>>0)<($19>>>0); //@line 134 "lpc.c"
  if (!($20)) {
   label = 17;
   break;
  }
  $21 = $4; //@line 136 "lpc.c"
  $22 = $8; //@line 136 "lpc.c"
  $23 = (($22) + 1)|0; //@line 136 "lpc.c"
  $24 = (($21) + ($23<<2)|0); //@line 136 "lpc.c"
  $25 = +HEAPF32[$24>>2]; //@line 136 "lpc.c"
  $26 = - $25; //@line 136 "lpc.c"
  $27 = $26; //@line 136 "lpc.c"
  $10 = $27; //@line 136 "lpc.c"
  $9 = 0; //@line 137 "lpc.c"
  while(1) {
   $28 = $9; //@line 137 "lpc.c"
   $29 = $8; //@line 137 "lpc.c"
   $30 = ($28>>>0)<($29>>>0); //@line 137 "lpc.c"
   if (!($30)) {
    break;
   }
   $31 = $9; //@line 138 "lpc.c"
   $32 = (($12) + ($31<<3)|0); //@line 138 "lpc.c"
   $33 = +HEAPF64[$32>>3]; //@line 138 "lpc.c"
   $34 = $4; //@line 138 "lpc.c"
   $35 = $8; //@line 138 "lpc.c"
   $36 = $9; //@line 138 "lpc.c"
   $37 = (($35) - ($36))|0; //@line 138 "lpc.c"
   $38 = (($34) + ($37<<2)|0); //@line 138 "lpc.c"
   $39 = +HEAPF32[$38>>2]; //@line 138 "lpc.c"
   $40 = $39; //@line 138 "lpc.c"
   $41 = $33 * $40; //@line 138 "lpc.c"
   $42 = $10; //@line 138 "lpc.c"
   $43 = $42 - $41; //@line 138 "lpc.c"
   $10 = $43; //@line 138 "lpc.c"
   $44 = $9; //@line 137 "lpc.c"
   $45 = (($44) + 1)|0; //@line 137 "lpc.c"
   $9 = $45; //@line 137 "lpc.c"
  }
  $46 = $11; //@line 139 "lpc.c"
  $47 = $10; //@line 139 "lpc.c"
  $48 = $47 / $46; //@line 139 "lpc.c"
  $10 = $48; //@line 139 "lpc.c"
  $49 = $10; //@line 142 "lpc.c"
  $50 = $8; //@line 142 "lpc.c"
  $51 = (($12) + ($50<<3)|0); //@line 142 "lpc.c"
  HEAPF64[$51>>3] = $49; //@line 142 "lpc.c"
  $9 = 0; //@line 143 "lpc.c"
  while(1) {
   $52 = $9; //@line 143 "lpc.c"
   $53 = $8; //@line 143 "lpc.c"
   $54 = $53 >>> 1; //@line 143 "lpc.c"
   $55 = ($52>>>0)<($54>>>0); //@line 143 "lpc.c"
   if (!($55)) {
    break;
   }
   $56 = $9; //@line 144 "lpc.c"
   $57 = (($12) + ($56<<3)|0); //@line 144 "lpc.c"
   $58 = +HEAPF64[$57>>3]; //@line 144 "lpc.c"
   $13 = $58; //@line 144 "lpc.c"
   $59 = $10; //@line 145 "lpc.c"
   $60 = $8; //@line 145 "lpc.c"
   $61 = (($60) - 1)|0; //@line 145 "lpc.c"
   $62 = $9; //@line 145 "lpc.c"
   $63 = (($61) - ($62))|0; //@line 145 "lpc.c"
   $64 = (($12) + ($63<<3)|0); //@line 145 "lpc.c"
   $65 = +HEAPF64[$64>>3]; //@line 145 "lpc.c"
   $66 = $59 * $65; //@line 145 "lpc.c"
   $67 = $9; //@line 145 "lpc.c"
   $68 = (($12) + ($67<<3)|0); //@line 145 "lpc.c"
   $69 = +HEAPF64[$68>>3]; //@line 145 "lpc.c"
   $70 = $69 + $66; //@line 145 "lpc.c"
   HEAPF64[$68>>3] = $70; //@line 145 "lpc.c"
   $71 = $10; //@line 146 "lpc.c"
   $72 = $13; //@line 146 "lpc.c"
   $73 = $71 * $72; //@line 146 "lpc.c"
   $74 = $8; //@line 146 "lpc.c"
   $75 = (($74) - 1)|0; //@line 146 "lpc.c"
   $76 = $9; //@line 146 "lpc.c"
   $77 = (($75) - ($76))|0; //@line 146 "lpc.c"
   $78 = (($12) + ($77<<3)|0); //@line 146 "lpc.c"
   $79 = +HEAPF64[$78>>3]; //@line 146 "lpc.c"
   $80 = $79 + $73; //@line 146 "lpc.c"
   HEAPF64[$78>>3] = $80; //@line 146 "lpc.c"
   $81 = $9; //@line 143 "lpc.c"
   $82 = (($81) + 1)|0; //@line 143 "lpc.c"
   $9 = $82; //@line 143 "lpc.c"
  }
  $83 = $8; //@line 148 "lpc.c"
  $84 = $83 & 1; //@line 148 "lpc.c"
  $85 = ($84|0)!=(0); //@line 148 "lpc.c"
  if ($85) {
   $86 = $9; //@line 149 "lpc.c"
   $87 = (($12) + ($86<<3)|0); //@line 149 "lpc.c"
   $88 = +HEAPF64[$87>>3]; //@line 149 "lpc.c"
   $89 = $10; //@line 149 "lpc.c"
   $90 = $88 * $89; //@line 149 "lpc.c"
   $91 = $9; //@line 149 "lpc.c"
   $92 = (($12) + ($91<<3)|0); //@line 149 "lpc.c"
   $93 = +HEAPF64[$92>>3]; //@line 149 "lpc.c"
   $94 = $93 + $90; //@line 149 "lpc.c"
   HEAPF64[$92>>3] = $94; //@line 149 "lpc.c"
  }
  $95 = $10; //@line 151 "lpc.c"
  $96 = $10; //@line 151 "lpc.c"
  $97 = $95 * $96; //@line 151 "lpc.c"
  $98 = 1.0 - $97; //@line 151 "lpc.c"
  $99 = $11; //@line 151 "lpc.c"
  $100 = $99 * $98; //@line 151 "lpc.c"
  $11 = $100; //@line 151 "lpc.c"
  $9 = 0; //@line 154 "lpc.c"
  while(1) {
   $101 = $9; //@line 154 "lpc.c"
   $102 = $8; //@line 154 "lpc.c"
   $103 = ($101>>>0)<=($102>>>0); //@line 154 "lpc.c"
   if (!($103)) {
    break;
   }
   $104 = $9; //@line 155 "lpc.c"
   $105 = (($12) + ($104<<3)|0); //@line 155 "lpc.c"
   $106 = +HEAPF64[$105>>3]; //@line 155 "lpc.c"
   $107 = - $106; //@line 155 "lpc.c"
   $108 = $107; //@line 155 "lpc.c"
   $109 = $6; //@line 155 "lpc.c"
   $110 = $8; //@line 155 "lpc.c"
   $111 = (($109) + ($110<<7)|0); //@line 155 "lpc.c"
   $112 = $9; //@line 155 "lpc.c"
   $113 = (($111) + ($112<<2)|0); //@line 155 "lpc.c"
   HEAPF32[$113>>2] = $108; //@line 155 "lpc.c"
   $114 = $9; //@line 154 "lpc.c"
   $115 = (($114) + 1)|0; //@line 154 "lpc.c"
   $9 = $115; //@line 154 "lpc.c"
  }
  $116 = $11; //@line 156 "lpc.c"
  $117 = $7; //@line 156 "lpc.c"
  $118 = $8; //@line 156 "lpc.c"
  $119 = (($117) + ($118<<3)|0); //@line 156 "lpc.c"
  HEAPF64[$119>>3] = $116; //@line 156 "lpc.c"
  $120 = $11; //@line 159 "lpc.c"
  $121 = $120 == 0.0; //@line 159 "lpc.c"
  $122 = $8;
  $123 = (($122) + 1)|0;
  if ($121) {
   break;
  }
  $8 = $123; //@line 134 "lpc.c"
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return; //@line 164 "lpc.c"
 }
 $124 = $5; //@line 160 "lpc.c"
 HEAP32[$124>>2] = $123; //@line 160 "lpc.c"
 STACKTOP = sp;return; //@line 164 "lpc.c"
}
function _FLAC__lpc_quantize_coefficients($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $18 = sp + 44|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $8; //@line 176 "lpc.c"
 $25 = (($24) + -1)|0; //@line 176 "lpc.c"
 $8 = $25; //@line 176 "lpc.c"
 $26 = $8; //@line 177 "lpc.c"
 $27 = 1 << $26; //@line 177 "lpc.c"
 $13 = $27; //@line 177 "lpc.c"
 $28 = $13; //@line 178 "lpc.c"
 $29 = (0 - ($28))|0; //@line 178 "lpc.c"
 $14 = $29; //@line 178 "lpc.c"
 $30 = $13; //@line 179 "lpc.c"
 $31 = (($30) + -1)|0; //@line 179 "lpc.c"
 $13 = $31; //@line 179 "lpc.c"
 $12 = 0.0; //@line 182 "lpc.c"
 $11 = 0; //@line 183 "lpc.c"
 while(1) {
  $32 = $11; //@line 183 "lpc.c"
  $33 = $7; //@line 183 "lpc.c"
  $34 = ($32>>>0)<($33>>>0); //@line 183 "lpc.c"
  if (!($34)) {
   break;
  }
  $35 = $6; //@line 184 "lpc.c"
  $36 = $11; //@line 184 "lpc.c"
  $37 = (($35) + ($36<<2)|0); //@line 184 "lpc.c"
  $38 = +HEAPF32[$37>>2]; //@line 184 "lpc.c"
  $39 = $38; //@line 184 "lpc.c"
  $40 = (+Math_abs((+$39))); //@line 184 "lpc.c"
  $15 = $40; //@line 184 "lpc.c"
  $41 = $15; //@line 185 "lpc.c"
  $42 = $12; //@line 185 "lpc.c"
  $43 = $41 > $42; //@line 185 "lpc.c"
  if ($43) {
   $44 = $15; //@line 186 "lpc.c"
   $12 = $44; //@line 186 "lpc.c"
  }
  $45 = $11; //@line 183 "lpc.c"
  $46 = (($45) + 1)|0; //@line 183 "lpc.c"
  $11 = $46; //@line 183 "lpc.c"
 }
 $47 = $12; //@line 189 "lpc.c"
 $48 = $47 <= 0.0; //@line 189 "lpc.c"
 if ($48) {
  $5 = 2; //@line 191 "lpc.c"
  $150 = $5; //@line 260 "lpc.c"
  STACKTOP = sp;return ($150|0); //@line 260 "lpc.c"
 }
 $49 = HEAP32[275]|0; //@line 194 "lpc.c"
 $50 = (($49) - 1)|0; //@line 194 "lpc.c"
 $51 = 1 << $50; //@line 194 "lpc.c"
 $52 = (($51) - 1)|0; //@line 194 "lpc.c"
 $16 = $52; //@line 194 "lpc.c"
 $53 = $16; //@line 195 "lpc.c"
 $54 = (0 - ($53))|0; //@line 195 "lpc.c"
 $55 = (($54) - 1)|0; //@line 195 "lpc.c"
 $17 = $55; //@line 195 "lpc.c"
 $56 = $12; //@line 198 "lpc.c"
 (+_frexp($56,$18)); //@line 198 "lpc.c"
 $57 = HEAP32[$18>>2]|0; //@line 199 "lpc.c"
 $58 = (($57) + -1)|0; //@line 199 "lpc.c"
 HEAP32[$18>>2] = $58; //@line 199 "lpc.c"
 $59 = $8; //@line 200 "lpc.c"
 $60 = HEAP32[$18>>2]|0; //@line 200 "lpc.c"
 $61 = (($59) - ($60))|0; //@line 200 "lpc.c"
 $62 = (($61) - 1)|0; //@line 200 "lpc.c"
 $63 = $10; //@line 200 "lpc.c"
 HEAP32[$63>>2] = $62; //@line 200 "lpc.c"
 $64 = $10; //@line 202 "lpc.c"
 $65 = HEAP32[$64>>2]|0; //@line 202 "lpc.c"
 $66 = $16; //@line 202 "lpc.c"
 $67 = ($65|0)>($66|0); //@line 202 "lpc.c"
 if ($67) {
  $68 = $16; //@line 203 "lpc.c"
  $69 = $10; //@line 203 "lpc.c"
  HEAP32[$69>>2] = $68; //@line 203 "lpc.c"
 } else {
  $70 = $10; //@line 204 "lpc.c"
  $71 = HEAP32[$70>>2]|0; //@line 204 "lpc.c"
  $72 = $17; //@line 204 "lpc.c"
  $73 = ($71|0)<($72|0); //@line 204 "lpc.c"
  if ($73) {
   $5 = 1; //@line 205 "lpc.c"
   $150 = $5; //@line 260 "lpc.c"
   STACKTOP = sp;return ($150|0); //@line 260 "lpc.c"
  }
 }
 $74 = $10; //@line 208 "lpc.c"
 $75 = HEAP32[$74>>2]|0; //@line 208 "lpc.c"
 $76 = ($75|0)>=(0); //@line 208 "lpc.c"
 L18: do {
  if ($76) {
   $19 = 0.0; //@line 209 "lpc.c"
   $11 = 0; //@line 211 "lpc.c"
   while(1) {
    $77 = $11; //@line 211 "lpc.c"
    $78 = $7; //@line 211 "lpc.c"
    $79 = ($77>>>0)<($78>>>0); //@line 211 "lpc.c"
    if (!($79)) {
     break L18;
    }
    $80 = $6; //@line 212 "lpc.c"
    $81 = $11; //@line 212 "lpc.c"
    $82 = (($80) + ($81<<2)|0); //@line 212 "lpc.c"
    $83 = +HEAPF32[$82>>2]; //@line 212 "lpc.c"
    $84 = $10; //@line 212 "lpc.c"
    $85 = HEAP32[$84>>2]|0; //@line 212 "lpc.c"
    $86 = 1 << $85; //@line 212 "lpc.c"
    $87 = (+($86|0)); //@line 212 "lpc.c"
    $88 = $83 * $87; //@line 212 "lpc.c"
    $89 = $88; //@line 212 "lpc.c"
    $90 = $19; //@line 212 "lpc.c"
    $91 = $90 + $89; //@line 212 "lpc.c"
    $19 = $91; //@line 212 "lpc.c"
    $92 = $19; //@line 213 "lpc.c"
    $93 = (_lround($92)|0); //@line 213 "lpc.c"
    $20 = $93; //@line 213 "lpc.c"
    $94 = $20; //@line 221 "lpc.c"
    $95 = $13; //@line 221 "lpc.c"
    $96 = ($94|0)>($95|0); //@line 221 "lpc.c"
    if ($96) {
     $97 = $13; //@line 222 "lpc.c"
     $20 = $97; //@line 222 "lpc.c"
    } else {
     $98 = $20; //@line 223 "lpc.c"
     $99 = $14; //@line 223 "lpc.c"
     $100 = ($98|0)<($99|0); //@line 223 "lpc.c"
     if ($100) {
      $101 = $14; //@line 224 "lpc.c"
      $20 = $101; //@line 224 "lpc.c"
     }
    }
    $102 = $20; //@line 225 "lpc.c"
    $103 = (+($102|0)); //@line 225 "lpc.c"
    $104 = $19; //@line 225 "lpc.c"
    $105 = $104 - $103; //@line 225 "lpc.c"
    $19 = $105; //@line 225 "lpc.c"
    $106 = $20; //@line 226 "lpc.c"
    $107 = $9; //@line 226 "lpc.c"
    $108 = $11; //@line 226 "lpc.c"
    $109 = (($107) + ($108<<2)|0); //@line 226 "lpc.c"
    HEAP32[$109>>2] = $106; //@line 226 "lpc.c"
    $110 = $11; //@line 211 "lpc.c"
    $111 = (($110) + 1)|0; //@line 211 "lpc.c"
    $11 = $111; //@line 211 "lpc.c"
   }
  } else {
   $112 = $10; //@line 234 "lpc.c"
   $113 = HEAP32[$112>>2]|0; //@line 234 "lpc.c"
   $114 = (0 - ($113))|0; //@line 234 "lpc.c"
   $21 = $114; //@line 234 "lpc.c"
   $22 = 0.0; //@line 235 "lpc.c"
   $11 = 0; //@line 240 "lpc.c"
   while(1) {
    $115 = $11; //@line 240 "lpc.c"
    $116 = $7; //@line 240 "lpc.c"
    $117 = ($115>>>0)<($116>>>0); //@line 240 "lpc.c"
    if (!($117)) {
     break;
    }
    $118 = $6; //@line 241 "lpc.c"
    $119 = $11; //@line 241 "lpc.c"
    $120 = (($118) + ($119<<2)|0); //@line 241 "lpc.c"
    $121 = +HEAPF32[$120>>2]; //@line 241 "lpc.c"
    $122 = $21; //@line 241 "lpc.c"
    $123 = 1 << $122; //@line 241 "lpc.c"
    $124 = (+($123|0)); //@line 241 "lpc.c"
    $125 = $121 / $124; //@line 241 "lpc.c"
    $126 = $125; //@line 241 "lpc.c"
    $127 = $22; //@line 241 "lpc.c"
    $128 = $127 + $126; //@line 241 "lpc.c"
    $22 = $128; //@line 241 "lpc.c"
    $129 = $22; //@line 242 "lpc.c"
    $130 = (_lround($129)|0); //@line 242 "lpc.c"
    $23 = $130; //@line 242 "lpc.c"
    $131 = $23; //@line 249 "lpc.c"
    $132 = $13; //@line 249 "lpc.c"
    $133 = ($131|0)>($132|0); //@line 249 "lpc.c"
    if ($133) {
     $134 = $13; //@line 250 "lpc.c"
     $23 = $134; //@line 250 "lpc.c"
    } else {
     $135 = $23; //@line 251 "lpc.c"
     $136 = $14; //@line 251 "lpc.c"
     $137 = ($135|0)<($136|0); //@line 251 "lpc.c"
     if ($137) {
      $138 = $14; //@line 252 "lpc.c"
      $23 = $138; //@line 252 "lpc.c"
     }
    }
    $139 = $23; //@line 253 "lpc.c"
    $140 = (+($139|0)); //@line 253 "lpc.c"
    $141 = $22; //@line 253 "lpc.c"
    $142 = $141 - $140; //@line 253 "lpc.c"
    $22 = $142; //@line 253 "lpc.c"
    $143 = $23; //@line 254 "lpc.c"
    $144 = $9; //@line 254 "lpc.c"
    $145 = $11; //@line 254 "lpc.c"
    $146 = (($144) + ($145<<2)|0); //@line 254 "lpc.c"
    HEAP32[$146>>2] = $143; //@line 254 "lpc.c"
    $147 = $11; //@line 240 "lpc.c"
    $148 = (($147) + 1)|0; //@line 240 "lpc.c"
    $11 = $148; //@line 240 "lpc.c"
   }
   $149 = $10; //@line 256 "lpc.c"
   HEAP32[$149>>2] = 0; //@line 256 "lpc.c"
  }
 } while(0);
 $5 = 0; //@line 259 "lpc.c"
 $150 = $5; //@line 260 "lpc.c"
 STACKTOP = sp;return ($150|0); //@line 260 "lpc.c"
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $9; //@line 318 "lpc.c"
 $15 = ($14>>>0)<=(12); //@line 318 "lpc.c"
 if (!($15)) {
  $12 = 0; //@line 486 "lpc.c"
  while(1) {
   $1068 = $12; //@line 486 "lpc.c"
   $1069 = $7; //@line 486 "lpc.c"
   $1070 = ($1068|0)<($1069|0); //@line 486 "lpc.c"
   if (!($1070)) {
    break;
   }
   $13 = 0; //@line 487 "lpc.c"
   $1071 = $9; //@line 488 "lpc.c"
   switch ($1071|0) {
   case 32:  {
    $1072 = $8; //@line 489 "lpc.c"
    $1073 = ((($1072)) + 124|0); //@line 489 "lpc.c"
    $1074 = HEAP32[$1073>>2]|0; //@line 489 "lpc.c"
    $1075 = $6; //@line 489 "lpc.c"
    $1076 = $12; //@line 489 "lpc.c"
    $1077 = (($1076) - 32)|0; //@line 489 "lpc.c"
    $1078 = (($1075) + ($1077<<2)|0); //@line 489 "lpc.c"
    $1079 = HEAP32[$1078>>2]|0; //@line 489 "lpc.c"
    $1080 = Math_imul($1074, $1079)|0; //@line 489 "lpc.c"
    $1081 = $13; //@line 489 "lpc.c"
    $1082 = (($1081) + ($1080))|0; //@line 489 "lpc.c"
    $13 = $1082; //@line 489 "lpc.c"
    label = 53;
    break;
   }
   case 31:  {
    label = 53;
    break;
   }
   case 30:  {
    label = 54;
    break;
   }
   case 29:  {
    label = 55;
    break;
   }
   case 28:  {
    label = 56;
    break;
   }
   case 27:  {
    label = 57;
    break;
   }
   case 26:  {
    label = 58;
    break;
   }
   case 25:  {
    label = 59;
    break;
   }
   case 24:  {
    label = 60;
    break;
   }
   case 23:  {
    label = 61;
    break;
   }
   case 22:  {
    label = 62;
    break;
   }
   case 21:  {
    label = 63;
    break;
   }
   case 20:  {
    label = 64;
    break;
   }
   case 19:  {
    label = 65;
    break;
   }
   case 18:  {
    label = 66;
    break;
   }
   case 17:  {
    label = 67;
    break;
   }
   case 16:  {
    label = 68;
    break;
   }
   case 15:  {
    label = 69;
    break;
   }
   case 14:  {
    label = 70;
    break;
   }
   case 13:  {
    label = 71;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1083 = $8; //@line 490 "lpc.c"
    $1084 = ((($1083)) + 120|0); //@line 490 "lpc.c"
    $1085 = HEAP32[$1084>>2]|0; //@line 490 "lpc.c"
    $1086 = $6; //@line 490 "lpc.c"
    $1087 = $12; //@line 490 "lpc.c"
    $1088 = (($1087) - 31)|0; //@line 490 "lpc.c"
    $1089 = (($1086) + ($1088<<2)|0); //@line 490 "lpc.c"
    $1090 = HEAP32[$1089>>2]|0; //@line 490 "lpc.c"
    $1091 = Math_imul($1085, $1090)|0; //@line 490 "lpc.c"
    $1092 = $13; //@line 490 "lpc.c"
    $1093 = (($1092) + ($1091))|0; //@line 490 "lpc.c"
    $13 = $1093; //@line 490 "lpc.c"
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1094 = $8; //@line 491 "lpc.c"
    $1095 = ((($1094)) + 116|0); //@line 491 "lpc.c"
    $1096 = HEAP32[$1095>>2]|0; //@line 491 "lpc.c"
    $1097 = $6; //@line 491 "lpc.c"
    $1098 = $12; //@line 491 "lpc.c"
    $1099 = (($1098) - 30)|0; //@line 491 "lpc.c"
    $1100 = (($1097) + ($1099<<2)|0); //@line 491 "lpc.c"
    $1101 = HEAP32[$1100>>2]|0; //@line 491 "lpc.c"
    $1102 = Math_imul($1096, $1101)|0; //@line 491 "lpc.c"
    $1103 = $13; //@line 491 "lpc.c"
    $1104 = (($1103) + ($1102))|0; //@line 491 "lpc.c"
    $13 = $1104; //@line 491 "lpc.c"
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1105 = $8; //@line 492 "lpc.c"
    $1106 = ((($1105)) + 112|0); //@line 492 "lpc.c"
    $1107 = HEAP32[$1106>>2]|0; //@line 492 "lpc.c"
    $1108 = $6; //@line 492 "lpc.c"
    $1109 = $12; //@line 492 "lpc.c"
    $1110 = (($1109) - 29)|0; //@line 492 "lpc.c"
    $1111 = (($1108) + ($1110<<2)|0); //@line 492 "lpc.c"
    $1112 = HEAP32[$1111>>2]|0; //@line 492 "lpc.c"
    $1113 = Math_imul($1107, $1112)|0; //@line 492 "lpc.c"
    $1114 = $13; //@line 492 "lpc.c"
    $1115 = (($1114) + ($1113))|0; //@line 492 "lpc.c"
    $13 = $1115; //@line 492 "lpc.c"
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1116 = $8; //@line 493 "lpc.c"
    $1117 = ((($1116)) + 108|0); //@line 493 "lpc.c"
    $1118 = HEAP32[$1117>>2]|0; //@line 493 "lpc.c"
    $1119 = $6; //@line 493 "lpc.c"
    $1120 = $12; //@line 493 "lpc.c"
    $1121 = (($1120) - 28)|0; //@line 493 "lpc.c"
    $1122 = (($1119) + ($1121<<2)|0); //@line 493 "lpc.c"
    $1123 = HEAP32[$1122>>2]|0; //@line 493 "lpc.c"
    $1124 = Math_imul($1118, $1123)|0; //@line 493 "lpc.c"
    $1125 = $13; //@line 493 "lpc.c"
    $1126 = (($1125) + ($1124))|0; //@line 493 "lpc.c"
    $13 = $1126; //@line 493 "lpc.c"
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1127 = $8; //@line 494 "lpc.c"
    $1128 = ((($1127)) + 104|0); //@line 494 "lpc.c"
    $1129 = HEAP32[$1128>>2]|0; //@line 494 "lpc.c"
    $1130 = $6; //@line 494 "lpc.c"
    $1131 = $12; //@line 494 "lpc.c"
    $1132 = (($1131) - 27)|0; //@line 494 "lpc.c"
    $1133 = (($1130) + ($1132<<2)|0); //@line 494 "lpc.c"
    $1134 = HEAP32[$1133>>2]|0; //@line 494 "lpc.c"
    $1135 = Math_imul($1129, $1134)|0; //@line 494 "lpc.c"
    $1136 = $13; //@line 494 "lpc.c"
    $1137 = (($1136) + ($1135))|0; //@line 494 "lpc.c"
    $13 = $1137; //@line 494 "lpc.c"
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1138 = $8; //@line 495 "lpc.c"
    $1139 = ((($1138)) + 100|0); //@line 495 "lpc.c"
    $1140 = HEAP32[$1139>>2]|0; //@line 495 "lpc.c"
    $1141 = $6; //@line 495 "lpc.c"
    $1142 = $12; //@line 495 "lpc.c"
    $1143 = (($1142) - 26)|0; //@line 495 "lpc.c"
    $1144 = (($1141) + ($1143<<2)|0); //@line 495 "lpc.c"
    $1145 = HEAP32[$1144>>2]|0; //@line 495 "lpc.c"
    $1146 = Math_imul($1140, $1145)|0; //@line 495 "lpc.c"
    $1147 = $13; //@line 495 "lpc.c"
    $1148 = (($1147) + ($1146))|0; //@line 495 "lpc.c"
    $13 = $1148; //@line 495 "lpc.c"
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1149 = $8; //@line 496 "lpc.c"
    $1150 = ((($1149)) + 96|0); //@line 496 "lpc.c"
    $1151 = HEAP32[$1150>>2]|0; //@line 496 "lpc.c"
    $1152 = $6; //@line 496 "lpc.c"
    $1153 = $12; //@line 496 "lpc.c"
    $1154 = (($1153) - 25)|0; //@line 496 "lpc.c"
    $1155 = (($1152) + ($1154<<2)|0); //@line 496 "lpc.c"
    $1156 = HEAP32[$1155>>2]|0; //@line 496 "lpc.c"
    $1157 = Math_imul($1151, $1156)|0; //@line 496 "lpc.c"
    $1158 = $13; //@line 496 "lpc.c"
    $1159 = (($1158) + ($1157))|0; //@line 496 "lpc.c"
    $13 = $1159; //@line 496 "lpc.c"
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1160 = $8; //@line 497 "lpc.c"
    $1161 = ((($1160)) + 92|0); //@line 497 "lpc.c"
    $1162 = HEAP32[$1161>>2]|0; //@line 497 "lpc.c"
    $1163 = $6; //@line 497 "lpc.c"
    $1164 = $12; //@line 497 "lpc.c"
    $1165 = (($1164) - 24)|0; //@line 497 "lpc.c"
    $1166 = (($1163) + ($1165<<2)|0); //@line 497 "lpc.c"
    $1167 = HEAP32[$1166>>2]|0; //@line 497 "lpc.c"
    $1168 = Math_imul($1162, $1167)|0; //@line 497 "lpc.c"
    $1169 = $13; //@line 497 "lpc.c"
    $1170 = (($1169) + ($1168))|0; //@line 497 "lpc.c"
    $13 = $1170; //@line 497 "lpc.c"
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1171 = $8; //@line 498 "lpc.c"
    $1172 = ((($1171)) + 88|0); //@line 498 "lpc.c"
    $1173 = HEAP32[$1172>>2]|0; //@line 498 "lpc.c"
    $1174 = $6; //@line 498 "lpc.c"
    $1175 = $12; //@line 498 "lpc.c"
    $1176 = (($1175) - 23)|0; //@line 498 "lpc.c"
    $1177 = (($1174) + ($1176<<2)|0); //@line 498 "lpc.c"
    $1178 = HEAP32[$1177>>2]|0; //@line 498 "lpc.c"
    $1179 = Math_imul($1173, $1178)|0; //@line 498 "lpc.c"
    $1180 = $13; //@line 498 "lpc.c"
    $1181 = (($1180) + ($1179))|0; //@line 498 "lpc.c"
    $13 = $1181; //@line 498 "lpc.c"
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1182 = $8; //@line 499 "lpc.c"
    $1183 = ((($1182)) + 84|0); //@line 499 "lpc.c"
    $1184 = HEAP32[$1183>>2]|0; //@line 499 "lpc.c"
    $1185 = $6; //@line 499 "lpc.c"
    $1186 = $12; //@line 499 "lpc.c"
    $1187 = (($1186) - 22)|0; //@line 499 "lpc.c"
    $1188 = (($1185) + ($1187<<2)|0); //@line 499 "lpc.c"
    $1189 = HEAP32[$1188>>2]|0; //@line 499 "lpc.c"
    $1190 = Math_imul($1184, $1189)|0; //@line 499 "lpc.c"
    $1191 = $13; //@line 499 "lpc.c"
    $1192 = (($1191) + ($1190))|0; //@line 499 "lpc.c"
    $13 = $1192; //@line 499 "lpc.c"
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1193 = $8; //@line 500 "lpc.c"
    $1194 = ((($1193)) + 80|0); //@line 500 "lpc.c"
    $1195 = HEAP32[$1194>>2]|0; //@line 500 "lpc.c"
    $1196 = $6; //@line 500 "lpc.c"
    $1197 = $12; //@line 500 "lpc.c"
    $1198 = (($1197) - 21)|0; //@line 500 "lpc.c"
    $1199 = (($1196) + ($1198<<2)|0); //@line 500 "lpc.c"
    $1200 = HEAP32[$1199>>2]|0; //@line 500 "lpc.c"
    $1201 = Math_imul($1195, $1200)|0; //@line 500 "lpc.c"
    $1202 = $13; //@line 500 "lpc.c"
    $1203 = (($1202) + ($1201))|0; //@line 500 "lpc.c"
    $13 = $1203; //@line 500 "lpc.c"
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1204 = $8; //@line 501 "lpc.c"
    $1205 = ((($1204)) + 76|0); //@line 501 "lpc.c"
    $1206 = HEAP32[$1205>>2]|0; //@line 501 "lpc.c"
    $1207 = $6; //@line 501 "lpc.c"
    $1208 = $12; //@line 501 "lpc.c"
    $1209 = (($1208) - 20)|0; //@line 501 "lpc.c"
    $1210 = (($1207) + ($1209<<2)|0); //@line 501 "lpc.c"
    $1211 = HEAP32[$1210>>2]|0; //@line 501 "lpc.c"
    $1212 = Math_imul($1206, $1211)|0; //@line 501 "lpc.c"
    $1213 = $13; //@line 501 "lpc.c"
    $1214 = (($1213) + ($1212))|0; //@line 501 "lpc.c"
    $13 = $1214; //@line 501 "lpc.c"
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1215 = $8; //@line 502 "lpc.c"
    $1216 = ((($1215)) + 72|0); //@line 502 "lpc.c"
    $1217 = HEAP32[$1216>>2]|0; //@line 502 "lpc.c"
    $1218 = $6; //@line 502 "lpc.c"
    $1219 = $12; //@line 502 "lpc.c"
    $1220 = (($1219) - 19)|0; //@line 502 "lpc.c"
    $1221 = (($1218) + ($1220<<2)|0); //@line 502 "lpc.c"
    $1222 = HEAP32[$1221>>2]|0; //@line 502 "lpc.c"
    $1223 = Math_imul($1217, $1222)|0; //@line 502 "lpc.c"
    $1224 = $13; //@line 502 "lpc.c"
    $1225 = (($1224) + ($1223))|0; //@line 502 "lpc.c"
    $13 = $1225; //@line 502 "lpc.c"
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1226 = $8; //@line 503 "lpc.c"
    $1227 = ((($1226)) + 68|0); //@line 503 "lpc.c"
    $1228 = HEAP32[$1227>>2]|0; //@line 503 "lpc.c"
    $1229 = $6; //@line 503 "lpc.c"
    $1230 = $12; //@line 503 "lpc.c"
    $1231 = (($1230) - 18)|0; //@line 503 "lpc.c"
    $1232 = (($1229) + ($1231<<2)|0); //@line 503 "lpc.c"
    $1233 = HEAP32[$1232>>2]|0; //@line 503 "lpc.c"
    $1234 = Math_imul($1228, $1233)|0; //@line 503 "lpc.c"
    $1235 = $13; //@line 503 "lpc.c"
    $1236 = (($1235) + ($1234))|0; //@line 503 "lpc.c"
    $13 = $1236; //@line 503 "lpc.c"
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1237 = $8; //@line 504 "lpc.c"
    $1238 = ((($1237)) + 64|0); //@line 504 "lpc.c"
    $1239 = HEAP32[$1238>>2]|0; //@line 504 "lpc.c"
    $1240 = $6; //@line 504 "lpc.c"
    $1241 = $12; //@line 504 "lpc.c"
    $1242 = (($1241) - 17)|0; //@line 504 "lpc.c"
    $1243 = (($1240) + ($1242<<2)|0); //@line 504 "lpc.c"
    $1244 = HEAP32[$1243>>2]|0; //@line 504 "lpc.c"
    $1245 = Math_imul($1239, $1244)|0; //@line 504 "lpc.c"
    $1246 = $13; //@line 504 "lpc.c"
    $1247 = (($1246) + ($1245))|0; //@line 504 "lpc.c"
    $13 = $1247; //@line 504 "lpc.c"
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1248 = $8; //@line 505 "lpc.c"
    $1249 = ((($1248)) + 60|0); //@line 505 "lpc.c"
    $1250 = HEAP32[$1249>>2]|0; //@line 505 "lpc.c"
    $1251 = $6; //@line 505 "lpc.c"
    $1252 = $12; //@line 505 "lpc.c"
    $1253 = (($1252) - 16)|0; //@line 505 "lpc.c"
    $1254 = (($1251) + ($1253<<2)|0); //@line 505 "lpc.c"
    $1255 = HEAP32[$1254>>2]|0; //@line 505 "lpc.c"
    $1256 = Math_imul($1250, $1255)|0; //@line 505 "lpc.c"
    $1257 = $13; //@line 505 "lpc.c"
    $1258 = (($1257) + ($1256))|0; //@line 505 "lpc.c"
    $13 = $1258; //@line 505 "lpc.c"
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1259 = $8; //@line 506 "lpc.c"
    $1260 = ((($1259)) + 56|0); //@line 506 "lpc.c"
    $1261 = HEAP32[$1260>>2]|0; //@line 506 "lpc.c"
    $1262 = $6; //@line 506 "lpc.c"
    $1263 = $12; //@line 506 "lpc.c"
    $1264 = (($1263) - 15)|0; //@line 506 "lpc.c"
    $1265 = (($1262) + ($1264<<2)|0); //@line 506 "lpc.c"
    $1266 = HEAP32[$1265>>2]|0; //@line 506 "lpc.c"
    $1267 = Math_imul($1261, $1266)|0; //@line 506 "lpc.c"
    $1268 = $13; //@line 506 "lpc.c"
    $1269 = (($1268) + ($1267))|0; //@line 506 "lpc.c"
    $13 = $1269; //@line 506 "lpc.c"
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1270 = $8; //@line 507 "lpc.c"
    $1271 = ((($1270)) + 52|0); //@line 507 "lpc.c"
    $1272 = HEAP32[$1271>>2]|0; //@line 507 "lpc.c"
    $1273 = $6; //@line 507 "lpc.c"
    $1274 = $12; //@line 507 "lpc.c"
    $1275 = (($1274) - 14)|0; //@line 507 "lpc.c"
    $1276 = (($1273) + ($1275<<2)|0); //@line 507 "lpc.c"
    $1277 = HEAP32[$1276>>2]|0; //@line 507 "lpc.c"
    $1278 = Math_imul($1272, $1277)|0; //@line 507 "lpc.c"
    $1279 = $13; //@line 507 "lpc.c"
    $1280 = (($1279) + ($1278))|0; //@line 507 "lpc.c"
    $13 = $1280; //@line 507 "lpc.c"
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1281 = $8; //@line 508 "lpc.c"
    $1282 = ((($1281)) + 48|0); //@line 508 "lpc.c"
    $1283 = HEAP32[$1282>>2]|0; //@line 508 "lpc.c"
    $1284 = $6; //@line 508 "lpc.c"
    $1285 = $12; //@line 508 "lpc.c"
    $1286 = (($1285) - 13)|0; //@line 508 "lpc.c"
    $1287 = (($1284) + ($1286<<2)|0); //@line 508 "lpc.c"
    $1288 = HEAP32[$1287>>2]|0; //@line 508 "lpc.c"
    $1289 = Math_imul($1283, $1288)|0; //@line 508 "lpc.c"
    $1290 = $13; //@line 508 "lpc.c"
    $1291 = (($1290) + ($1289))|0; //@line 508 "lpc.c"
    $13 = $1291; //@line 508 "lpc.c"
    $1292 = $8; //@line 509 "lpc.c"
    $1293 = ((($1292)) + 44|0); //@line 509 "lpc.c"
    $1294 = HEAP32[$1293>>2]|0; //@line 509 "lpc.c"
    $1295 = $6; //@line 509 "lpc.c"
    $1296 = $12; //@line 509 "lpc.c"
    $1297 = (($1296) - 12)|0; //@line 509 "lpc.c"
    $1298 = (($1295) + ($1297<<2)|0); //@line 509 "lpc.c"
    $1299 = HEAP32[$1298>>2]|0; //@line 509 "lpc.c"
    $1300 = Math_imul($1294, $1299)|0; //@line 509 "lpc.c"
    $1301 = $13; //@line 509 "lpc.c"
    $1302 = (($1301) + ($1300))|0; //@line 509 "lpc.c"
    $13 = $1302; //@line 509 "lpc.c"
    $1303 = $8; //@line 510 "lpc.c"
    $1304 = ((($1303)) + 40|0); //@line 510 "lpc.c"
    $1305 = HEAP32[$1304>>2]|0; //@line 510 "lpc.c"
    $1306 = $6; //@line 510 "lpc.c"
    $1307 = $12; //@line 510 "lpc.c"
    $1308 = (($1307) - 11)|0; //@line 510 "lpc.c"
    $1309 = (($1306) + ($1308<<2)|0); //@line 510 "lpc.c"
    $1310 = HEAP32[$1309>>2]|0; //@line 510 "lpc.c"
    $1311 = Math_imul($1305, $1310)|0; //@line 510 "lpc.c"
    $1312 = $13; //@line 510 "lpc.c"
    $1313 = (($1312) + ($1311))|0; //@line 510 "lpc.c"
    $13 = $1313; //@line 510 "lpc.c"
    $1314 = $8; //@line 511 "lpc.c"
    $1315 = ((($1314)) + 36|0); //@line 511 "lpc.c"
    $1316 = HEAP32[$1315>>2]|0; //@line 511 "lpc.c"
    $1317 = $6; //@line 511 "lpc.c"
    $1318 = $12; //@line 511 "lpc.c"
    $1319 = (($1318) - 10)|0; //@line 511 "lpc.c"
    $1320 = (($1317) + ($1319<<2)|0); //@line 511 "lpc.c"
    $1321 = HEAP32[$1320>>2]|0; //@line 511 "lpc.c"
    $1322 = Math_imul($1316, $1321)|0; //@line 511 "lpc.c"
    $1323 = $13; //@line 511 "lpc.c"
    $1324 = (($1323) + ($1322))|0; //@line 511 "lpc.c"
    $13 = $1324; //@line 511 "lpc.c"
    $1325 = $8; //@line 512 "lpc.c"
    $1326 = ((($1325)) + 32|0); //@line 512 "lpc.c"
    $1327 = HEAP32[$1326>>2]|0; //@line 512 "lpc.c"
    $1328 = $6; //@line 512 "lpc.c"
    $1329 = $12; //@line 512 "lpc.c"
    $1330 = (($1329) - 9)|0; //@line 512 "lpc.c"
    $1331 = (($1328) + ($1330<<2)|0); //@line 512 "lpc.c"
    $1332 = HEAP32[$1331>>2]|0; //@line 512 "lpc.c"
    $1333 = Math_imul($1327, $1332)|0; //@line 512 "lpc.c"
    $1334 = $13; //@line 512 "lpc.c"
    $1335 = (($1334) + ($1333))|0; //@line 512 "lpc.c"
    $13 = $1335; //@line 512 "lpc.c"
    $1336 = $8; //@line 513 "lpc.c"
    $1337 = ((($1336)) + 28|0); //@line 513 "lpc.c"
    $1338 = HEAP32[$1337>>2]|0; //@line 513 "lpc.c"
    $1339 = $6; //@line 513 "lpc.c"
    $1340 = $12; //@line 513 "lpc.c"
    $1341 = (($1340) - 8)|0; //@line 513 "lpc.c"
    $1342 = (($1339) + ($1341<<2)|0); //@line 513 "lpc.c"
    $1343 = HEAP32[$1342>>2]|0; //@line 513 "lpc.c"
    $1344 = Math_imul($1338, $1343)|0; //@line 513 "lpc.c"
    $1345 = $13; //@line 513 "lpc.c"
    $1346 = (($1345) + ($1344))|0; //@line 513 "lpc.c"
    $13 = $1346; //@line 513 "lpc.c"
    $1347 = $8; //@line 514 "lpc.c"
    $1348 = ((($1347)) + 24|0); //@line 514 "lpc.c"
    $1349 = HEAP32[$1348>>2]|0; //@line 514 "lpc.c"
    $1350 = $6; //@line 514 "lpc.c"
    $1351 = $12; //@line 514 "lpc.c"
    $1352 = (($1351) - 7)|0; //@line 514 "lpc.c"
    $1353 = (($1350) + ($1352<<2)|0); //@line 514 "lpc.c"
    $1354 = HEAP32[$1353>>2]|0; //@line 514 "lpc.c"
    $1355 = Math_imul($1349, $1354)|0; //@line 514 "lpc.c"
    $1356 = $13; //@line 514 "lpc.c"
    $1357 = (($1356) + ($1355))|0; //@line 514 "lpc.c"
    $13 = $1357; //@line 514 "lpc.c"
    $1358 = $8; //@line 515 "lpc.c"
    $1359 = ((($1358)) + 20|0); //@line 515 "lpc.c"
    $1360 = HEAP32[$1359>>2]|0; //@line 515 "lpc.c"
    $1361 = $6; //@line 515 "lpc.c"
    $1362 = $12; //@line 515 "lpc.c"
    $1363 = (($1362) - 6)|0; //@line 515 "lpc.c"
    $1364 = (($1361) + ($1363<<2)|0); //@line 515 "lpc.c"
    $1365 = HEAP32[$1364>>2]|0; //@line 515 "lpc.c"
    $1366 = Math_imul($1360, $1365)|0; //@line 515 "lpc.c"
    $1367 = $13; //@line 515 "lpc.c"
    $1368 = (($1367) + ($1366))|0; //@line 515 "lpc.c"
    $13 = $1368; //@line 515 "lpc.c"
    $1369 = $8; //@line 516 "lpc.c"
    $1370 = ((($1369)) + 16|0); //@line 516 "lpc.c"
    $1371 = HEAP32[$1370>>2]|0; //@line 516 "lpc.c"
    $1372 = $6; //@line 516 "lpc.c"
    $1373 = $12; //@line 516 "lpc.c"
    $1374 = (($1373) - 5)|0; //@line 516 "lpc.c"
    $1375 = (($1372) + ($1374<<2)|0); //@line 516 "lpc.c"
    $1376 = HEAP32[$1375>>2]|0; //@line 516 "lpc.c"
    $1377 = Math_imul($1371, $1376)|0; //@line 516 "lpc.c"
    $1378 = $13; //@line 516 "lpc.c"
    $1379 = (($1378) + ($1377))|0; //@line 516 "lpc.c"
    $13 = $1379; //@line 516 "lpc.c"
    $1380 = $8; //@line 517 "lpc.c"
    $1381 = ((($1380)) + 12|0); //@line 517 "lpc.c"
    $1382 = HEAP32[$1381>>2]|0; //@line 517 "lpc.c"
    $1383 = $6; //@line 517 "lpc.c"
    $1384 = $12; //@line 517 "lpc.c"
    $1385 = (($1384) - 4)|0; //@line 517 "lpc.c"
    $1386 = (($1383) + ($1385<<2)|0); //@line 517 "lpc.c"
    $1387 = HEAP32[$1386>>2]|0; //@line 517 "lpc.c"
    $1388 = Math_imul($1382, $1387)|0; //@line 517 "lpc.c"
    $1389 = $13; //@line 517 "lpc.c"
    $1390 = (($1389) + ($1388))|0; //@line 517 "lpc.c"
    $13 = $1390; //@line 517 "lpc.c"
    $1391 = $8; //@line 518 "lpc.c"
    $1392 = ((($1391)) + 8|0); //@line 518 "lpc.c"
    $1393 = HEAP32[$1392>>2]|0; //@line 518 "lpc.c"
    $1394 = $6; //@line 518 "lpc.c"
    $1395 = $12; //@line 518 "lpc.c"
    $1396 = (($1395) - 3)|0; //@line 518 "lpc.c"
    $1397 = (($1394) + ($1396<<2)|0); //@line 518 "lpc.c"
    $1398 = HEAP32[$1397>>2]|0; //@line 518 "lpc.c"
    $1399 = Math_imul($1393, $1398)|0; //@line 518 "lpc.c"
    $1400 = $13; //@line 518 "lpc.c"
    $1401 = (($1400) + ($1399))|0; //@line 518 "lpc.c"
    $13 = $1401; //@line 518 "lpc.c"
    $1402 = $8; //@line 519 "lpc.c"
    $1403 = ((($1402)) + 4|0); //@line 519 "lpc.c"
    $1404 = HEAP32[$1403>>2]|0; //@line 519 "lpc.c"
    $1405 = $6; //@line 519 "lpc.c"
    $1406 = $12; //@line 519 "lpc.c"
    $1407 = (($1406) - 2)|0; //@line 519 "lpc.c"
    $1408 = (($1405) + ($1407<<2)|0); //@line 519 "lpc.c"
    $1409 = HEAP32[$1408>>2]|0; //@line 519 "lpc.c"
    $1410 = Math_imul($1404, $1409)|0; //@line 519 "lpc.c"
    $1411 = $13; //@line 519 "lpc.c"
    $1412 = (($1411) + ($1410))|0; //@line 519 "lpc.c"
    $13 = $1412; //@line 519 "lpc.c"
    $1413 = $8; //@line 520 "lpc.c"
    $1414 = HEAP32[$1413>>2]|0; //@line 520 "lpc.c"
    $1415 = $6; //@line 520 "lpc.c"
    $1416 = $12; //@line 520 "lpc.c"
    $1417 = (($1416) - 1)|0; //@line 520 "lpc.c"
    $1418 = (($1415) + ($1417<<2)|0); //@line 520 "lpc.c"
    $1419 = HEAP32[$1418>>2]|0; //@line 520 "lpc.c"
    $1420 = Math_imul($1414, $1419)|0; //@line 520 "lpc.c"
    $1421 = $13; //@line 520 "lpc.c"
    $1422 = (($1421) + ($1420))|0; //@line 520 "lpc.c"
    $13 = $1422; //@line 520 "lpc.c"
   }
   $1423 = $6; //@line 522 "lpc.c"
   $1424 = $12; //@line 522 "lpc.c"
   $1425 = (($1423) + ($1424<<2)|0); //@line 522 "lpc.c"
   $1426 = HEAP32[$1425>>2]|0; //@line 522 "lpc.c"
   $1427 = $13; //@line 522 "lpc.c"
   $1428 = $10; //@line 522 "lpc.c"
   $1429 = $1427 >> $1428; //@line 522 "lpc.c"
   $1430 = (($1426) - ($1429))|0; //@line 522 "lpc.c"
   $1431 = $11; //@line 522 "lpc.c"
   $1432 = $12; //@line 522 "lpc.c"
   $1433 = (($1431) + ($1432<<2)|0); //@line 522 "lpc.c"
   HEAP32[$1433>>2] = $1430; //@line 522 "lpc.c"
   $1434 = $12; //@line 486 "lpc.c"
   $1435 = (($1434) + 1)|0; //@line 486 "lpc.c"
   $12 = $1435; //@line 486 "lpc.c"
  }
  STACKTOP = sp;return; //@line 525 "lpc.c"
 }
 $16 = $9; //@line 319 "lpc.c"
 $17 = ($16>>>0)>(8); //@line 319 "lpc.c"
 $18 = $9;
 if ($17) {
  $19 = ($18>>>0)>(10); //@line 320 "lpc.c"
  $20 = $9;
  if ($19) {
   $21 = ($20|0)==(12); //@line 321 "lpc.c"
   $12 = 0;
   if ($21) {
    while(1) {
     $22 = $12; //@line 322 "lpc.c"
     $23 = $7; //@line 322 "lpc.c"
     $24 = ($22|0)<($23|0); //@line 322 "lpc.c"
     if (!($24)) {
      break;
     }
     $13 = 0; //@line 323 "lpc.c"
     $25 = $8; //@line 324 "lpc.c"
     $26 = ((($25)) + 44|0); //@line 324 "lpc.c"
     $27 = HEAP32[$26>>2]|0; //@line 324 "lpc.c"
     $28 = $6; //@line 324 "lpc.c"
     $29 = $12; //@line 324 "lpc.c"
     $30 = (($29) - 12)|0; //@line 324 "lpc.c"
     $31 = (($28) + ($30<<2)|0); //@line 324 "lpc.c"
     $32 = HEAP32[$31>>2]|0; //@line 324 "lpc.c"
     $33 = Math_imul($27, $32)|0; //@line 324 "lpc.c"
     $34 = $13; //@line 324 "lpc.c"
     $35 = (($34) + ($33))|0; //@line 324 "lpc.c"
     $13 = $35; //@line 324 "lpc.c"
     $36 = $8; //@line 325 "lpc.c"
     $37 = ((($36)) + 40|0); //@line 325 "lpc.c"
     $38 = HEAP32[$37>>2]|0; //@line 325 "lpc.c"
     $39 = $6; //@line 325 "lpc.c"
     $40 = $12; //@line 325 "lpc.c"
     $41 = (($40) - 11)|0; //@line 325 "lpc.c"
     $42 = (($39) + ($41<<2)|0); //@line 325 "lpc.c"
     $43 = HEAP32[$42>>2]|0; //@line 325 "lpc.c"
     $44 = Math_imul($38, $43)|0; //@line 325 "lpc.c"
     $45 = $13; //@line 325 "lpc.c"
     $46 = (($45) + ($44))|0; //@line 325 "lpc.c"
     $13 = $46; //@line 325 "lpc.c"
     $47 = $8; //@line 326 "lpc.c"
     $48 = ((($47)) + 36|0); //@line 326 "lpc.c"
     $49 = HEAP32[$48>>2]|0; //@line 326 "lpc.c"
     $50 = $6; //@line 326 "lpc.c"
     $51 = $12; //@line 326 "lpc.c"
     $52 = (($51) - 10)|0; //@line 326 "lpc.c"
     $53 = (($50) + ($52<<2)|0); //@line 326 "lpc.c"
     $54 = HEAP32[$53>>2]|0; //@line 326 "lpc.c"
     $55 = Math_imul($49, $54)|0; //@line 326 "lpc.c"
     $56 = $13; //@line 326 "lpc.c"
     $57 = (($56) + ($55))|0; //@line 326 "lpc.c"
     $13 = $57; //@line 326 "lpc.c"
     $58 = $8; //@line 327 "lpc.c"
     $59 = ((($58)) + 32|0); //@line 327 "lpc.c"
     $60 = HEAP32[$59>>2]|0; //@line 327 "lpc.c"
     $61 = $6; //@line 327 "lpc.c"
     $62 = $12; //@line 327 "lpc.c"
     $63 = (($62) - 9)|0; //@line 327 "lpc.c"
     $64 = (($61) + ($63<<2)|0); //@line 327 "lpc.c"
     $65 = HEAP32[$64>>2]|0; //@line 327 "lpc.c"
     $66 = Math_imul($60, $65)|0; //@line 327 "lpc.c"
     $67 = $13; //@line 327 "lpc.c"
     $68 = (($67) + ($66))|0; //@line 327 "lpc.c"
     $13 = $68; //@line 327 "lpc.c"
     $69 = $8; //@line 328 "lpc.c"
     $70 = ((($69)) + 28|0); //@line 328 "lpc.c"
     $71 = HEAP32[$70>>2]|0; //@line 328 "lpc.c"
     $72 = $6; //@line 328 "lpc.c"
     $73 = $12; //@line 328 "lpc.c"
     $74 = (($73) - 8)|0; //@line 328 "lpc.c"
     $75 = (($72) + ($74<<2)|0); //@line 328 "lpc.c"
     $76 = HEAP32[$75>>2]|0; //@line 328 "lpc.c"
     $77 = Math_imul($71, $76)|0; //@line 328 "lpc.c"
     $78 = $13; //@line 328 "lpc.c"
     $79 = (($78) + ($77))|0; //@line 328 "lpc.c"
     $13 = $79; //@line 328 "lpc.c"
     $80 = $8; //@line 329 "lpc.c"
     $81 = ((($80)) + 24|0); //@line 329 "lpc.c"
     $82 = HEAP32[$81>>2]|0; //@line 329 "lpc.c"
     $83 = $6; //@line 329 "lpc.c"
     $84 = $12; //@line 329 "lpc.c"
     $85 = (($84) - 7)|0; //@line 329 "lpc.c"
     $86 = (($83) + ($85<<2)|0); //@line 329 "lpc.c"
     $87 = HEAP32[$86>>2]|0; //@line 329 "lpc.c"
     $88 = Math_imul($82, $87)|0; //@line 329 "lpc.c"
     $89 = $13; //@line 329 "lpc.c"
     $90 = (($89) + ($88))|0; //@line 329 "lpc.c"
     $13 = $90; //@line 329 "lpc.c"
     $91 = $8; //@line 330 "lpc.c"
     $92 = ((($91)) + 20|0); //@line 330 "lpc.c"
     $93 = HEAP32[$92>>2]|0; //@line 330 "lpc.c"
     $94 = $6; //@line 330 "lpc.c"
     $95 = $12; //@line 330 "lpc.c"
     $96 = (($95) - 6)|0; //@line 330 "lpc.c"
     $97 = (($94) + ($96<<2)|0); //@line 330 "lpc.c"
     $98 = HEAP32[$97>>2]|0; //@line 330 "lpc.c"
     $99 = Math_imul($93, $98)|0; //@line 330 "lpc.c"
     $100 = $13; //@line 330 "lpc.c"
     $101 = (($100) + ($99))|0; //@line 330 "lpc.c"
     $13 = $101; //@line 330 "lpc.c"
     $102 = $8; //@line 331 "lpc.c"
     $103 = ((($102)) + 16|0); //@line 331 "lpc.c"
     $104 = HEAP32[$103>>2]|0; //@line 331 "lpc.c"
     $105 = $6; //@line 331 "lpc.c"
     $106 = $12; //@line 331 "lpc.c"
     $107 = (($106) - 5)|0; //@line 331 "lpc.c"
     $108 = (($105) + ($107<<2)|0); //@line 331 "lpc.c"
     $109 = HEAP32[$108>>2]|0; //@line 331 "lpc.c"
     $110 = Math_imul($104, $109)|0; //@line 331 "lpc.c"
     $111 = $13; //@line 331 "lpc.c"
     $112 = (($111) + ($110))|0; //@line 331 "lpc.c"
     $13 = $112; //@line 331 "lpc.c"
     $113 = $8; //@line 332 "lpc.c"
     $114 = ((($113)) + 12|0); //@line 332 "lpc.c"
     $115 = HEAP32[$114>>2]|0; //@line 332 "lpc.c"
     $116 = $6; //@line 332 "lpc.c"
     $117 = $12; //@line 332 "lpc.c"
     $118 = (($117) - 4)|0; //@line 332 "lpc.c"
     $119 = (($116) + ($118<<2)|0); //@line 332 "lpc.c"
     $120 = HEAP32[$119>>2]|0; //@line 332 "lpc.c"
     $121 = Math_imul($115, $120)|0; //@line 332 "lpc.c"
     $122 = $13; //@line 332 "lpc.c"
     $123 = (($122) + ($121))|0; //@line 332 "lpc.c"
     $13 = $123; //@line 332 "lpc.c"
     $124 = $8; //@line 333 "lpc.c"
     $125 = ((($124)) + 8|0); //@line 333 "lpc.c"
     $126 = HEAP32[$125>>2]|0; //@line 333 "lpc.c"
     $127 = $6; //@line 333 "lpc.c"
     $128 = $12; //@line 333 "lpc.c"
     $129 = (($128) - 3)|0; //@line 333 "lpc.c"
     $130 = (($127) + ($129<<2)|0); //@line 333 "lpc.c"
     $131 = HEAP32[$130>>2]|0; //@line 333 "lpc.c"
     $132 = Math_imul($126, $131)|0; //@line 333 "lpc.c"
     $133 = $13; //@line 333 "lpc.c"
     $134 = (($133) + ($132))|0; //@line 333 "lpc.c"
     $13 = $134; //@line 333 "lpc.c"
     $135 = $8; //@line 334 "lpc.c"
     $136 = ((($135)) + 4|0); //@line 334 "lpc.c"
     $137 = HEAP32[$136>>2]|0; //@line 334 "lpc.c"
     $138 = $6; //@line 334 "lpc.c"
     $139 = $12; //@line 334 "lpc.c"
     $140 = (($139) - 2)|0; //@line 334 "lpc.c"
     $141 = (($138) + ($140<<2)|0); //@line 334 "lpc.c"
     $142 = HEAP32[$141>>2]|0; //@line 334 "lpc.c"
     $143 = Math_imul($137, $142)|0; //@line 334 "lpc.c"
     $144 = $13; //@line 334 "lpc.c"
     $145 = (($144) + ($143))|0; //@line 334 "lpc.c"
     $13 = $145; //@line 334 "lpc.c"
     $146 = $8; //@line 335 "lpc.c"
     $147 = HEAP32[$146>>2]|0; //@line 335 "lpc.c"
     $148 = $6; //@line 335 "lpc.c"
     $149 = $12; //@line 335 "lpc.c"
     $150 = (($149) - 1)|0; //@line 335 "lpc.c"
     $151 = (($148) + ($150<<2)|0); //@line 335 "lpc.c"
     $152 = HEAP32[$151>>2]|0; //@line 335 "lpc.c"
     $153 = Math_imul($147, $152)|0; //@line 335 "lpc.c"
     $154 = $13; //@line 335 "lpc.c"
     $155 = (($154) + ($153))|0; //@line 335 "lpc.c"
     $13 = $155; //@line 335 "lpc.c"
     $156 = $6; //@line 336 "lpc.c"
     $157 = $12; //@line 336 "lpc.c"
     $158 = (($156) + ($157<<2)|0); //@line 336 "lpc.c"
     $159 = HEAP32[$158>>2]|0; //@line 336 "lpc.c"
     $160 = $13; //@line 336 "lpc.c"
     $161 = $10; //@line 336 "lpc.c"
     $162 = $160 >> $161; //@line 336 "lpc.c"
     $163 = (($159) - ($162))|0; //@line 336 "lpc.c"
     $164 = $11; //@line 336 "lpc.c"
     $165 = $12; //@line 336 "lpc.c"
     $166 = (($164) + ($165<<2)|0); //@line 336 "lpc.c"
     HEAP32[$166>>2] = $163; //@line 336 "lpc.c"
     $167 = $12; //@line 322 "lpc.c"
     $168 = (($167) + 1)|0; //@line 322 "lpc.c"
     $12 = $168; //@line 322 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $169 = $12; //@line 340 "lpc.c"
     $170 = $7; //@line 340 "lpc.c"
     $171 = ($169|0)<($170|0); //@line 340 "lpc.c"
     if (!($171)) {
      break;
     }
     $13 = 0; //@line 341 "lpc.c"
     $172 = $8; //@line 342 "lpc.c"
     $173 = ((($172)) + 40|0); //@line 342 "lpc.c"
     $174 = HEAP32[$173>>2]|0; //@line 342 "lpc.c"
     $175 = $6; //@line 342 "lpc.c"
     $176 = $12; //@line 342 "lpc.c"
     $177 = (($176) - 11)|0; //@line 342 "lpc.c"
     $178 = (($175) + ($177<<2)|0); //@line 342 "lpc.c"
     $179 = HEAP32[$178>>2]|0; //@line 342 "lpc.c"
     $180 = Math_imul($174, $179)|0; //@line 342 "lpc.c"
     $181 = $13; //@line 342 "lpc.c"
     $182 = (($181) + ($180))|0; //@line 342 "lpc.c"
     $13 = $182; //@line 342 "lpc.c"
     $183 = $8; //@line 343 "lpc.c"
     $184 = ((($183)) + 36|0); //@line 343 "lpc.c"
     $185 = HEAP32[$184>>2]|0; //@line 343 "lpc.c"
     $186 = $6; //@line 343 "lpc.c"
     $187 = $12; //@line 343 "lpc.c"
     $188 = (($187) - 10)|0; //@line 343 "lpc.c"
     $189 = (($186) + ($188<<2)|0); //@line 343 "lpc.c"
     $190 = HEAP32[$189>>2]|0; //@line 343 "lpc.c"
     $191 = Math_imul($185, $190)|0; //@line 343 "lpc.c"
     $192 = $13; //@line 343 "lpc.c"
     $193 = (($192) + ($191))|0; //@line 343 "lpc.c"
     $13 = $193; //@line 343 "lpc.c"
     $194 = $8; //@line 344 "lpc.c"
     $195 = ((($194)) + 32|0); //@line 344 "lpc.c"
     $196 = HEAP32[$195>>2]|0; //@line 344 "lpc.c"
     $197 = $6; //@line 344 "lpc.c"
     $198 = $12; //@line 344 "lpc.c"
     $199 = (($198) - 9)|0; //@line 344 "lpc.c"
     $200 = (($197) + ($199<<2)|0); //@line 344 "lpc.c"
     $201 = HEAP32[$200>>2]|0; //@line 344 "lpc.c"
     $202 = Math_imul($196, $201)|0; //@line 344 "lpc.c"
     $203 = $13; //@line 344 "lpc.c"
     $204 = (($203) + ($202))|0; //@line 344 "lpc.c"
     $13 = $204; //@line 344 "lpc.c"
     $205 = $8; //@line 345 "lpc.c"
     $206 = ((($205)) + 28|0); //@line 345 "lpc.c"
     $207 = HEAP32[$206>>2]|0; //@line 345 "lpc.c"
     $208 = $6; //@line 345 "lpc.c"
     $209 = $12; //@line 345 "lpc.c"
     $210 = (($209) - 8)|0; //@line 345 "lpc.c"
     $211 = (($208) + ($210<<2)|0); //@line 345 "lpc.c"
     $212 = HEAP32[$211>>2]|0; //@line 345 "lpc.c"
     $213 = Math_imul($207, $212)|0; //@line 345 "lpc.c"
     $214 = $13; //@line 345 "lpc.c"
     $215 = (($214) + ($213))|0; //@line 345 "lpc.c"
     $13 = $215; //@line 345 "lpc.c"
     $216 = $8; //@line 346 "lpc.c"
     $217 = ((($216)) + 24|0); //@line 346 "lpc.c"
     $218 = HEAP32[$217>>2]|0; //@line 346 "lpc.c"
     $219 = $6; //@line 346 "lpc.c"
     $220 = $12; //@line 346 "lpc.c"
     $221 = (($220) - 7)|0; //@line 346 "lpc.c"
     $222 = (($219) + ($221<<2)|0); //@line 346 "lpc.c"
     $223 = HEAP32[$222>>2]|0; //@line 346 "lpc.c"
     $224 = Math_imul($218, $223)|0; //@line 346 "lpc.c"
     $225 = $13; //@line 346 "lpc.c"
     $226 = (($225) + ($224))|0; //@line 346 "lpc.c"
     $13 = $226; //@line 346 "lpc.c"
     $227 = $8; //@line 347 "lpc.c"
     $228 = ((($227)) + 20|0); //@line 347 "lpc.c"
     $229 = HEAP32[$228>>2]|0; //@line 347 "lpc.c"
     $230 = $6; //@line 347 "lpc.c"
     $231 = $12; //@line 347 "lpc.c"
     $232 = (($231) - 6)|0; //@line 347 "lpc.c"
     $233 = (($230) + ($232<<2)|0); //@line 347 "lpc.c"
     $234 = HEAP32[$233>>2]|0; //@line 347 "lpc.c"
     $235 = Math_imul($229, $234)|0; //@line 347 "lpc.c"
     $236 = $13; //@line 347 "lpc.c"
     $237 = (($236) + ($235))|0; //@line 347 "lpc.c"
     $13 = $237; //@line 347 "lpc.c"
     $238 = $8; //@line 348 "lpc.c"
     $239 = ((($238)) + 16|0); //@line 348 "lpc.c"
     $240 = HEAP32[$239>>2]|0; //@line 348 "lpc.c"
     $241 = $6; //@line 348 "lpc.c"
     $242 = $12; //@line 348 "lpc.c"
     $243 = (($242) - 5)|0; //@line 348 "lpc.c"
     $244 = (($241) + ($243<<2)|0); //@line 348 "lpc.c"
     $245 = HEAP32[$244>>2]|0; //@line 348 "lpc.c"
     $246 = Math_imul($240, $245)|0; //@line 348 "lpc.c"
     $247 = $13; //@line 348 "lpc.c"
     $248 = (($247) + ($246))|0; //@line 348 "lpc.c"
     $13 = $248; //@line 348 "lpc.c"
     $249 = $8; //@line 349 "lpc.c"
     $250 = ((($249)) + 12|0); //@line 349 "lpc.c"
     $251 = HEAP32[$250>>2]|0; //@line 349 "lpc.c"
     $252 = $6; //@line 349 "lpc.c"
     $253 = $12; //@line 349 "lpc.c"
     $254 = (($253) - 4)|0; //@line 349 "lpc.c"
     $255 = (($252) + ($254<<2)|0); //@line 349 "lpc.c"
     $256 = HEAP32[$255>>2]|0; //@line 349 "lpc.c"
     $257 = Math_imul($251, $256)|0; //@line 349 "lpc.c"
     $258 = $13; //@line 349 "lpc.c"
     $259 = (($258) + ($257))|0; //@line 349 "lpc.c"
     $13 = $259; //@line 349 "lpc.c"
     $260 = $8; //@line 350 "lpc.c"
     $261 = ((($260)) + 8|0); //@line 350 "lpc.c"
     $262 = HEAP32[$261>>2]|0; //@line 350 "lpc.c"
     $263 = $6; //@line 350 "lpc.c"
     $264 = $12; //@line 350 "lpc.c"
     $265 = (($264) - 3)|0; //@line 350 "lpc.c"
     $266 = (($263) + ($265<<2)|0); //@line 350 "lpc.c"
     $267 = HEAP32[$266>>2]|0; //@line 350 "lpc.c"
     $268 = Math_imul($262, $267)|0; //@line 350 "lpc.c"
     $269 = $13; //@line 350 "lpc.c"
     $270 = (($269) + ($268))|0; //@line 350 "lpc.c"
     $13 = $270; //@line 350 "lpc.c"
     $271 = $8; //@line 351 "lpc.c"
     $272 = ((($271)) + 4|0); //@line 351 "lpc.c"
     $273 = HEAP32[$272>>2]|0; //@line 351 "lpc.c"
     $274 = $6; //@line 351 "lpc.c"
     $275 = $12; //@line 351 "lpc.c"
     $276 = (($275) - 2)|0; //@line 351 "lpc.c"
     $277 = (($274) + ($276<<2)|0); //@line 351 "lpc.c"
     $278 = HEAP32[$277>>2]|0; //@line 351 "lpc.c"
     $279 = Math_imul($273, $278)|0; //@line 351 "lpc.c"
     $280 = $13; //@line 351 "lpc.c"
     $281 = (($280) + ($279))|0; //@line 351 "lpc.c"
     $13 = $281; //@line 351 "lpc.c"
     $282 = $8; //@line 352 "lpc.c"
     $283 = HEAP32[$282>>2]|0; //@line 352 "lpc.c"
     $284 = $6; //@line 352 "lpc.c"
     $285 = $12; //@line 352 "lpc.c"
     $286 = (($285) - 1)|0; //@line 352 "lpc.c"
     $287 = (($284) + ($286<<2)|0); //@line 352 "lpc.c"
     $288 = HEAP32[$287>>2]|0; //@line 352 "lpc.c"
     $289 = Math_imul($283, $288)|0; //@line 352 "lpc.c"
     $290 = $13; //@line 352 "lpc.c"
     $291 = (($290) + ($289))|0; //@line 352 "lpc.c"
     $13 = $291; //@line 352 "lpc.c"
     $292 = $6; //@line 353 "lpc.c"
     $293 = $12; //@line 353 "lpc.c"
     $294 = (($292) + ($293<<2)|0); //@line 353 "lpc.c"
     $295 = HEAP32[$294>>2]|0; //@line 353 "lpc.c"
     $296 = $13; //@line 353 "lpc.c"
     $297 = $10; //@line 353 "lpc.c"
     $298 = $296 >> $297; //@line 353 "lpc.c"
     $299 = (($295) - ($298))|0; //@line 353 "lpc.c"
     $300 = $11; //@line 353 "lpc.c"
     $301 = $12; //@line 353 "lpc.c"
     $302 = (($300) + ($301<<2)|0); //@line 353 "lpc.c"
     HEAP32[$302>>2] = $299; //@line 353 "lpc.c"
     $303 = $12; //@line 340 "lpc.c"
     $304 = (($303) + 1)|0; //@line 340 "lpc.c"
     $12 = $304; //@line 340 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  } else {
   $305 = ($20|0)==(10); //@line 358 "lpc.c"
   $12 = 0;
   if ($305) {
    while(1) {
     $306 = $12; //@line 359 "lpc.c"
     $307 = $7; //@line 359 "lpc.c"
     $308 = ($306|0)<($307|0); //@line 359 "lpc.c"
     if (!($308)) {
      break;
     }
     $13 = 0; //@line 360 "lpc.c"
     $309 = $8; //@line 361 "lpc.c"
     $310 = ((($309)) + 36|0); //@line 361 "lpc.c"
     $311 = HEAP32[$310>>2]|0; //@line 361 "lpc.c"
     $312 = $6; //@line 361 "lpc.c"
     $313 = $12; //@line 361 "lpc.c"
     $314 = (($313) - 10)|0; //@line 361 "lpc.c"
     $315 = (($312) + ($314<<2)|0); //@line 361 "lpc.c"
     $316 = HEAP32[$315>>2]|0; //@line 361 "lpc.c"
     $317 = Math_imul($311, $316)|0; //@line 361 "lpc.c"
     $318 = $13; //@line 361 "lpc.c"
     $319 = (($318) + ($317))|0; //@line 361 "lpc.c"
     $13 = $319; //@line 361 "lpc.c"
     $320 = $8; //@line 362 "lpc.c"
     $321 = ((($320)) + 32|0); //@line 362 "lpc.c"
     $322 = HEAP32[$321>>2]|0; //@line 362 "lpc.c"
     $323 = $6; //@line 362 "lpc.c"
     $324 = $12; //@line 362 "lpc.c"
     $325 = (($324) - 9)|0; //@line 362 "lpc.c"
     $326 = (($323) + ($325<<2)|0); //@line 362 "lpc.c"
     $327 = HEAP32[$326>>2]|0; //@line 362 "lpc.c"
     $328 = Math_imul($322, $327)|0; //@line 362 "lpc.c"
     $329 = $13; //@line 362 "lpc.c"
     $330 = (($329) + ($328))|0; //@line 362 "lpc.c"
     $13 = $330; //@line 362 "lpc.c"
     $331 = $8; //@line 363 "lpc.c"
     $332 = ((($331)) + 28|0); //@line 363 "lpc.c"
     $333 = HEAP32[$332>>2]|0; //@line 363 "lpc.c"
     $334 = $6; //@line 363 "lpc.c"
     $335 = $12; //@line 363 "lpc.c"
     $336 = (($335) - 8)|0; //@line 363 "lpc.c"
     $337 = (($334) + ($336<<2)|0); //@line 363 "lpc.c"
     $338 = HEAP32[$337>>2]|0; //@line 363 "lpc.c"
     $339 = Math_imul($333, $338)|0; //@line 363 "lpc.c"
     $340 = $13; //@line 363 "lpc.c"
     $341 = (($340) + ($339))|0; //@line 363 "lpc.c"
     $13 = $341; //@line 363 "lpc.c"
     $342 = $8; //@line 364 "lpc.c"
     $343 = ((($342)) + 24|0); //@line 364 "lpc.c"
     $344 = HEAP32[$343>>2]|0; //@line 364 "lpc.c"
     $345 = $6; //@line 364 "lpc.c"
     $346 = $12; //@line 364 "lpc.c"
     $347 = (($346) - 7)|0; //@line 364 "lpc.c"
     $348 = (($345) + ($347<<2)|0); //@line 364 "lpc.c"
     $349 = HEAP32[$348>>2]|0; //@line 364 "lpc.c"
     $350 = Math_imul($344, $349)|0; //@line 364 "lpc.c"
     $351 = $13; //@line 364 "lpc.c"
     $352 = (($351) + ($350))|0; //@line 364 "lpc.c"
     $13 = $352; //@line 364 "lpc.c"
     $353 = $8; //@line 365 "lpc.c"
     $354 = ((($353)) + 20|0); //@line 365 "lpc.c"
     $355 = HEAP32[$354>>2]|0; //@line 365 "lpc.c"
     $356 = $6; //@line 365 "lpc.c"
     $357 = $12; //@line 365 "lpc.c"
     $358 = (($357) - 6)|0; //@line 365 "lpc.c"
     $359 = (($356) + ($358<<2)|0); //@line 365 "lpc.c"
     $360 = HEAP32[$359>>2]|0; //@line 365 "lpc.c"
     $361 = Math_imul($355, $360)|0; //@line 365 "lpc.c"
     $362 = $13; //@line 365 "lpc.c"
     $363 = (($362) + ($361))|0; //@line 365 "lpc.c"
     $13 = $363; //@line 365 "lpc.c"
     $364 = $8; //@line 366 "lpc.c"
     $365 = ((($364)) + 16|0); //@line 366 "lpc.c"
     $366 = HEAP32[$365>>2]|0; //@line 366 "lpc.c"
     $367 = $6; //@line 366 "lpc.c"
     $368 = $12; //@line 366 "lpc.c"
     $369 = (($368) - 5)|0; //@line 366 "lpc.c"
     $370 = (($367) + ($369<<2)|0); //@line 366 "lpc.c"
     $371 = HEAP32[$370>>2]|0; //@line 366 "lpc.c"
     $372 = Math_imul($366, $371)|0; //@line 366 "lpc.c"
     $373 = $13; //@line 366 "lpc.c"
     $374 = (($373) + ($372))|0; //@line 366 "lpc.c"
     $13 = $374; //@line 366 "lpc.c"
     $375 = $8; //@line 367 "lpc.c"
     $376 = ((($375)) + 12|0); //@line 367 "lpc.c"
     $377 = HEAP32[$376>>2]|0; //@line 367 "lpc.c"
     $378 = $6; //@line 367 "lpc.c"
     $379 = $12; //@line 367 "lpc.c"
     $380 = (($379) - 4)|0; //@line 367 "lpc.c"
     $381 = (($378) + ($380<<2)|0); //@line 367 "lpc.c"
     $382 = HEAP32[$381>>2]|0; //@line 367 "lpc.c"
     $383 = Math_imul($377, $382)|0; //@line 367 "lpc.c"
     $384 = $13; //@line 367 "lpc.c"
     $385 = (($384) + ($383))|0; //@line 367 "lpc.c"
     $13 = $385; //@line 367 "lpc.c"
     $386 = $8; //@line 368 "lpc.c"
     $387 = ((($386)) + 8|0); //@line 368 "lpc.c"
     $388 = HEAP32[$387>>2]|0; //@line 368 "lpc.c"
     $389 = $6; //@line 368 "lpc.c"
     $390 = $12; //@line 368 "lpc.c"
     $391 = (($390) - 3)|0; //@line 368 "lpc.c"
     $392 = (($389) + ($391<<2)|0); //@line 368 "lpc.c"
     $393 = HEAP32[$392>>2]|0; //@line 368 "lpc.c"
     $394 = Math_imul($388, $393)|0; //@line 368 "lpc.c"
     $395 = $13; //@line 368 "lpc.c"
     $396 = (($395) + ($394))|0; //@line 368 "lpc.c"
     $13 = $396; //@line 368 "lpc.c"
     $397 = $8; //@line 369 "lpc.c"
     $398 = ((($397)) + 4|0); //@line 369 "lpc.c"
     $399 = HEAP32[$398>>2]|0; //@line 369 "lpc.c"
     $400 = $6; //@line 369 "lpc.c"
     $401 = $12; //@line 369 "lpc.c"
     $402 = (($401) - 2)|0; //@line 369 "lpc.c"
     $403 = (($400) + ($402<<2)|0); //@line 369 "lpc.c"
     $404 = HEAP32[$403>>2]|0; //@line 369 "lpc.c"
     $405 = Math_imul($399, $404)|0; //@line 369 "lpc.c"
     $406 = $13; //@line 369 "lpc.c"
     $407 = (($406) + ($405))|0; //@line 369 "lpc.c"
     $13 = $407; //@line 369 "lpc.c"
     $408 = $8; //@line 370 "lpc.c"
     $409 = HEAP32[$408>>2]|0; //@line 370 "lpc.c"
     $410 = $6; //@line 370 "lpc.c"
     $411 = $12; //@line 370 "lpc.c"
     $412 = (($411) - 1)|0; //@line 370 "lpc.c"
     $413 = (($410) + ($412<<2)|0); //@line 370 "lpc.c"
     $414 = HEAP32[$413>>2]|0; //@line 370 "lpc.c"
     $415 = Math_imul($409, $414)|0; //@line 370 "lpc.c"
     $416 = $13; //@line 370 "lpc.c"
     $417 = (($416) + ($415))|0; //@line 370 "lpc.c"
     $13 = $417; //@line 370 "lpc.c"
     $418 = $6; //@line 371 "lpc.c"
     $419 = $12; //@line 371 "lpc.c"
     $420 = (($418) + ($419<<2)|0); //@line 371 "lpc.c"
     $421 = HEAP32[$420>>2]|0; //@line 371 "lpc.c"
     $422 = $13; //@line 371 "lpc.c"
     $423 = $10; //@line 371 "lpc.c"
     $424 = $422 >> $423; //@line 371 "lpc.c"
     $425 = (($421) - ($424))|0; //@line 371 "lpc.c"
     $426 = $11; //@line 371 "lpc.c"
     $427 = $12; //@line 371 "lpc.c"
     $428 = (($426) + ($427<<2)|0); //@line 371 "lpc.c"
     HEAP32[$428>>2] = $425; //@line 371 "lpc.c"
     $429 = $12; //@line 359 "lpc.c"
     $430 = (($429) + 1)|0; //@line 359 "lpc.c"
     $12 = $430; //@line 359 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $431 = $12; //@line 375 "lpc.c"
     $432 = $7; //@line 375 "lpc.c"
     $433 = ($431|0)<($432|0); //@line 375 "lpc.c"
     if (!($433)) {
      break;
     }
     $13 = 0; //@line 376 "lpc.c"
     $434 = $8; //@line 377 "lpc.c"
     $435 = ((($434)) + 32|0); //@line 377 "lpc.c"
     $436 = HEAP32[$435>>2]|0; //@line 377 "lpc.c"
     $437 = $6; //@line 377 "lpc.c"
     $438 = $12; //@line 377 "lpc.c"
     $439 = (($438) - 9)|0; //@line 377 "lpc.c"
     $440 = (($437) + ($439<<2)|0); //@line 377 "lpc.c"
     $441 = HEAP32[$440>>2]|0; //@line 377 "lpc.c"
     $442 = Math_imul($436, $441)|0; //@line 377 "lpc.c"
     $443 = $13; //@line 377 "lpc.c"
     $444 = (($443) + ($442))|0; //@line 377 "lpc.c"
     $13 = $444; //@line 377 "lpc.c"
     $445 = $8; //@line 378 "lpc.c"
     $446 = ((($445)) + 28|0); //@line 378 "lpc.c"
     $447 = HEAP32[$446>>2]|0; //@line 378 "lpc.c"
     $448 = $6; //@line 378 "lpc.c"
     $449 = $12; //@line 378 "lpc.c"
     $450 = (($449) - 8)|0; //@line 378 "lpc.c"
     $451 = (($448) + ($450<<2)|0); //@line 378 "lpc.c"
     $452 = HEAP32[$451>>2]|0; //@line 378 "lpc.c"
     $453 = Math_imul($447, $452)|0; //@line 378 "lpc.c"
     $454 = $13; //@line 378 "lpc.c"
     $455 = (($454) + ($453))|0; //@line 378 "lpc.c"
     $13 = $455; //@line 378 "lpc.c"
     $456 = $8; //@line 379 "lpc.c"
     $457 = ((($456)) + 24|0); //@line 379 "lpc.c"
     $458 = HEAP32[$457>>2]|0; //@line 379 "lpc.c"
     $459 = $6; //@line 379 "lpc.c"
     $460 = $12; //@line 379 "lpc.c"
     $461 = (($460) - 7)|0; //@line 379 "lpc.c"
     $462 = (($459) + ($461<<2)|0); //@line 379 "lpc.c"
     $463 = HEAP32[$462>>2]|0; //@line 379 "lpc.c"
     $464 = Math_imul($458, $463)|0; //@line 379 "lpc.c"
     $465 = $13; //@line 379 "lpc.c"
     $466 = (($465) + ($464))|0; //@line 379 "lpc.c"
     $13 = $466; //@line 379 "lpc.c"
     $467 = $8; //@line 380 "lpc.c"
     $468 = ((($467)) + 20|0); //@line 380 "lpc.c"
     $469 = HEAP32[$468>>2]|0; //@line 380 "lpc.c"
     $470 = $6; //@line 380 "lpc.c"
     $471 = $12; //@line 380 "lpc.c"
     $472 = (($471) - 6)|0; //@line 380 "lpc.c"
     $473 = (($470) + ($472<<2)|0); //@line 380 "lpc.c"
     $474 = HEAP32[$473>>2]|0; //@line 380 "lpc.c"
     $475 = Math_imul($469, $474)|0; //@line 380 "lpc.c"
     $476 = $13; //@line 380 "lpc.c"
     $477 = (($476) + ($475))|0; //@line 380 "lpc.c"
     $13 = $477; //@line 380 "lpc.c"
     $478 = $8; //@line 381 "lpc.c"
     $479 = ((($478)) + 16|0); //@line 381 "lpc.c"
     $480 = HEAP32[$479>>2]|0; //@line 381 "lpc.c"
     $481 = $6; //@line 381 "lpc.c"
     $482 = $12; //@line 381 "lpc.c"
     $483 = (($482) - 5)|0; //@line 381 "lpc.c"
     $484 = (($481) + ($483<<2)|0); //@line 381 "lpc.c"
     $485 = HEAP32[$484>>2]|0; //@line 381 "lpc.c"
     $486 = Math_imul($480, $485)|0; //@line 381 "lpc.c"
     $487 = $13; //@line 381 "lpc.c"
     $488 = (($487) + ($486))|0; //@line 381 "lpc.c"
     $13 = $488; //@line 381 "lpc.c"
     $489 = $8; //@line 382 "lpc.c"
     $490 = ((($489)) + 12|0); //@line 382 "lpc.c"
     $491 = HEAP32[$490>>2]|0; //@line 382 "lpc.c"
     $492 = $6; //@line 382 "lpc.c"
     $493 = $12; //@line 382 "lpc.c"
     $494 = (($493) - 4)|0; //@line 382 "lpc.c"
     $495 = (($492) + ($494<<2)|0); //@line 382 "lpc.c"
     $496 = HEAP32[$495>>2]|0; //@line 382 "lpc.c"
     $497 = Math_imul($491, $496)|0; //@line 382 "lpc.c"
     $498 = $13; //@line 382 "lpc.c"
     $499 = (($498) + ($497))|0; //@line 382 "lpc.c"
     $13 = $499; //@line 382 "lpc.c"
     $500 = $8; //@line 383 "lpc.c"
     $501 = ((($500)) + 8|0); //@line 383 "lpc.c"
     $502 = HEAP32[$501>>2]|0; //@line 383 "lpc.c"
     $503 = $6; //@line 383 "lpc.c"
     $504 = $12; //@line 383 "lpc.c"
     $505 = (($504) - 3)|0; //@line 383 "lpc.c"
     $506 = (($503) + ($505<<2)|0); //@line 383 "lpc.c"
     $507 = HEAP32[$506>>2]|0; //@line 383 "lpc.c"
     $508 = Math_imul($502, $507)|0; //@line 383 "lpc.c"
     $509 = $13; //@line 383 "lpc.c"
     $510 = (($509) + ($508))|0; //@line 383 "lpc.c"
     $13 = $510; //@line 383 "lpc.c"
     $511 = $8; //@line 384 "lpc.c"
     $512 = ((($511)) + 4|0); //@line 384 "lpc.c"
     $513 = HEAP32[$512>>2]|0; //@line 384 "lpc.c"
     $514 = $6; //@line 384 "lpc.c"
     $515 = $12; //@line 384 "lpc.c"
     $516 = (($515) - 2)|0; //@line 384 "lpc.c"
     $517 = (($514) + ($516<<2)|0); //@line 384 "lpc.c"
     $518 = HEAP32[$517>>2]|0; //@line 384 "lpc.c"
     $519 = Math_imul($513, $518)|0; //@line 384 "lpc.c"
     $520 = $13; //@line 384 "lpc.c"
     $521 = (($520) + ($519))|0; //@line 384 "lpc.c"
     $13 = $521; //@line 384 "lpc.c"
     $522 = $8; //@line 385 "lpc.c"
     $523 = HEAP32[$522>>2]|0; //@line 385 "lpc.c"
     $524 = $6; //@line 385 "lpc.c"
     $525 = $12; //@line 385 "lpc.c"
     $526 = (($525) - 1)|0; //@line 385 "lpc.c"
     $527 = (($524) + ($526<<2)|0); //@line 385 "lpc.c"
     $528 = HEAP32[$527>>2]|0; //@line 385 "lpc.c"
     $529 = Math_imul($523, $528)|0; //@line 385 "lpc.c"
     $530 = $13; //@line 385 "lpc.c"
     $531 = (($530) + ($529))|0; //@line 385 "lpc.c"
     $13 = $531; //@line 385 "lpc.c"
     $532 = $6; //@line 386 "lpc.c"
     $533 = $12; //@line 386 "lpc.c"
     $534 = (($532) + ($533<<2)|0); //@line 386 "lpc.c"
     $535 = HEAP32[$534>>2]|0; //@line 386 "lpc.c"
     $536 = $13; //@line 386 "lpc.c"
     $537 = $10; //@line 386 "lpc.c"
     $538 = $536 >> $537; //@line 386 "lpc.c"
     $539 = (($535) - ($538))|0; //@line 386 "lpc.c"
     $540 = $11; //@line 386 "lpc.c"
     $541 = $12; //@line 386 "lpc.c"
     $542 = (($540) + ($541<<2)|0); //@line 386 "lpc.c"
     HEAP32[$542>>2] = $539; //@line 386 "lpc.c"
     $543 = $12; //@line 375 "lpc.c"
     $544 = (($543) + 1)|0; //@line 375 "lpc.c"
     $12 = $544; //@line 375 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  }
 }
 $545 = ($18>>>0)>(4); //@line 391 "lpc.c"
 $546 = $9;
 if ($545) {
  $547 = ($546>>>0)>(6); //@line 392 "lpc.c"
  $548 = $9;
  if ($547) {
   $549 = ($548|0)==(8); //@line 393 "lpc.c"
   $12 = 0;
   if ($549) {
    while(1) {
     $550 = $12; //@line 394 "lpc.c"
     $551 = $7; //@line 394 "lpc.c"
     $552 = ($550|0)<($551|0); //@line 394 "lpc.c"
     if (!($552)) {
      break;
     }
     $13 = 0; //@line 395 "lpc.c"
     $553 = $8; //@line 396 "lpc.c"
     $554 = ((($553)) + 28|0); //@line 396 "lpc.c"
     $555 = HEAP32[$554>>2]|0; //@line 396 "lpc.c"
     $556 = $6; //@line 396 "lpc.c"
     $557 = $12; //@line 396 "lpc.c"
     $558 = (($557) - 8)|0; //@line 396 "lpc.c"
     $559 = (($556) + ($558<<2)|0); //@line 396 "lpc.c"
     $560 = HEAP32[$559>>2]|0; //@line 396 "lpc.c"
     $561 = Math_imul($555, $560)|0; //@line 396 "lpc.c"
     $562 = $13; //@line 396 "lpc.c"
     $563 = (($562) + ($561))|0; //@line 396 "lpc.c"
     $13 = $563; //@line 396 "lpc.c"
     $564 = $8; //@line 397 "lpc.c"
     $565 = ((($564)) + 24|0); //@line 397 "lpc.c"
     $566 = HEAP32[$565>>2]|0; //@line 397 "lpc.c"
     $567 = $6; //@line 397 "lpc.c"
     $568 = $12; //@line 397 "lpc.c"
     $569 = (($568) - 7)|0; //@line 397 "lpc.c"
     $570 = (($567) + ($569<<2)|0); //@line 397 "lpc.c"
     $571 = HEAP32[$570>>2]|0; //@line 397 "lpc.c"
     $572 = Math_imul($566, $571)|0; //@line 397 "lpc.c"
     $573 = $13; //@line 397 "lpc.c"
     $574 = (($573) + ($572))|0; //@line 397 "lpc.c"
     $13 = $574; //@line 397 "lpc.c"
     $575 = $8; //@line 398 "lpc.c"
     $576 = ((($575)) + 20|0); //@line 398 "lpc.c"
     $577 = HEAP32[$576>>2]|0; //@line 398 "lpc.c"
     $578 = $6; //@line 398 "lpc.c"
     $579 = $12; //@line 398 "lpc.c"
     $580 = (($579) - 6)|0; //@line 398 "lpc.c"
     $581 = (($578) + ($580<<2)|0); //@line 398 "lpc.c"
     $582 = HEAP32[$581>>2]|0; //@line 398 "lpc.c"
     $583 = Math_imul($577, $582)|0; //@line 398 "lpc.c"
     $584 = $13; //@line 398 "lpc.c"
     $585 = (($584) + ($583))|0; //@line 398 "lpc.c"
     $13 = $585; //@line 398 "lpc.c"
     $586 = $8; //@line 399 "lpc.c"
     $587 = ((($586)) + 16|0); //@line 399 "lpc.c"
     $588 = HEAP32[$587>>2]|0; //@line 399 "lpc.c"
     $589 = $6; //@line 399 "lpc.c"
     $590 = $12; //@line 399 "lpc.c"
     $591 = (($590) - 5)|0; //@line 399 "lpc.c"
     $592 = (($589) + ($591<<2)|0); //@line 399 "lpc.c"
     $593 = HEAP32[$592>>2]|0; //@line 399 "lpc.c"
     $594 = Math_imul($588, $593)|0; //@line 399 "lpc.c"
     $595 = $13; //@line 399 "lpc.c"
     $596 = (($595) + ($594))|0; //@line 399 "lpc.c"
     $13 = $596; //@line 399 "lpc.c"
     $597 = $8; //@line 400 "lpc.c"
     $598 = ((($597)) + 12|0); //@line 400 "lpc.c"
     $599 = HEAP32[$598>>2]|0; //@line 400 "lpc.c"
     $600 = $6; //@line 400 "lpc.c"
     $601 = $12; //@line 400 "lpc.c"
     $602 = (($601) - 4)|0; //@line 400 "lpc.c"
     $603 = (($600) + ($602<<2)|0); //@line 400 "lpc.c"
     $604 = HEAP32[$603>>2]|0; //@line 400 "lpc.c"
     $605 = Math_imul($599, $604)|0; //@line 400 "lpc.c"
     $606 = $13; //@line 400 "lpc.c"
     $607 = (($606) + ($605))|0; //@line 400 "lpc.c"
     $13 = $607; //@line 400 "lpc.c"
     $608 = $8; //@line 401 "lpc.c"
     $609 = ((($608)) + 8|0); //@line 401 "lpc.c"
     $610 = HEAP32[$609>>2]|0; //@line 401 "lpc.c"
     $611 = $6; //@line 401 "lpc.c"
     $612 = $12; //@line 401 "lpc.c"
     $613 = (($612) - 3)|0; //@line 401 "lpc.c"
     $614 = (($611) + ($613<<2)|0); //@line 401 "lpc.c"
     $615 = HEAP32[$614>>2]|0; //@line 401 "lpc.c"
     $616 = Math_imul($610, $615)|0; //@line 401 "lpc.c"
     $617 = $13; //@line 401 "lpc.c"
     $618 = (($617) + ($616))|0; //@line 401 "lpc.c"
     $13 = $618; //@line 401 "lpc.c"
     $619 = $8; //@line 402 "lpc.c"
     $620 = ((($619)) + 4|0); //@line 402 "lpc.c"
     $621 = HEAP32[$620>>2]|0; //@line 402 "lpc.c"
     $622 = $6; //@line 402 "lpc.c"
     $623 = $12; //@line 402 "lpc.c"
     $624 = (($623) - 2)|0; //@line 402 "lpc.c"
     $625 = (($622) + ($624<<2)|0); //@line 402 "lpc.c"
     $626 = HEAP32[$625>>2]|0; //@line 402 "lpc.c"
     $627 = Math_imul($621, $626)|0; //@line 402 "lpc.c"
     $628 = $13; //@line 402 "lpc.c"
     $629 = (($628) + ($627))|0; //@line 402 "lpc.c"
     $13 = $629; //@line 402 "lpc.c"
     $630 = $8; //@line 403 "lpc.c"
     $631 = HEAP32[$630>>2]|0; //@line 403 "lpc.c"
     $632 = $6; //@line 403 "lpc.c"
     $633 = $12; //@line 403 "lpc.c"
     $634 = (($633) - 1)|0; //@line 403 "lpc.c"
     $635 = (($632) + ($634<<2)|0); //@line 403 "lpc.c"
     $636 = HEAP32[$635>>2]|0; //@line 403 "lpc.c"
     $637 = Math_imul($631, $636)|0; //@line 403 "lpc.c"
     $638 = $13; //@line 403 "lpc.c"
     $639 = (($638) + ($637))|0; //@line 403 "lpc.c"
     $13 = $639; //@line 403 "lpc.c"
     $640 = $6; //@line 404 "lpc.c"
     $641 = $12; //@line 404 "lpc.c"
     $642 = (($640) + ($641<<2)|0); //@line 404 "lpc.c"
     $643 = HEAP32[$642>>2]|0; //@line 404 "lpc.c"
     $644 = $13; //@line 404 "lpc.c"
     $645 = $10; //@line 404 "lpc.c"
     $646 = $644 >> $645; //@line 404 "lpc.c"
     $647 = (($643) - ($646))|0; //@line 404 "lpc.c"
     $648 = $11; //@line 404 "lpc.c"
     $649 = $12; //@line 404 "lpc.c"
     $650 = (($648) + ($649<<2)|0); //@line 404 "lpc.c"
     HEAP32[$650>>2] = $647; //@line 404 "lpc.c"
     $651 = $12; //@line 394 "lpc.c"
     $652 = (($651) + 1)|0; //@line 394 "lpc.c"
     $12 = $652; //@line 394 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $653 = $12; //@line 408 "lpc.c"
     $654 = $7; //@line 408 "lpc.c"
     $655 = ($653|0)<($654|0); //@line 408 "lpc.c"
     if (!($655)) {
      break;
     }
     $13 = 0; //@line 409 "lpc.c"
     $656 = $8; //@line 410 "lpc.c"
     $657 = ((($656)) + 24|0); //@line 410 "lpc.c"
     $658 = HEAP32[$657>>2]|0; //@line 410 "lpc.c"
     $659 = $6; //@line 410 "lpc.c"
     $660 = $12; //@line 410 "lpc.c"
     $661 = (($660) - 7)|0; //@line 410 "lpc.c"
     $662 = (($659) + ($661<<2)|0); //@line 410 "lpc.c"
     $663 = HEAP32[$662>>2]|0; //@line 410 "lpc.c"
     $664 = Math_imul($658, $663)|0; //@line 410 "lpc.c"
     $665 = $13; //@line 410 "lpc.c"
     $666 = (($665) + ($664))|0; //@line 410 "lpc.c"
     $13 = $666; //@line 410 "lpc.c"
     $667 = $8; //@line 411 "lpc.c"
     $668 = ((($667)) + 20|0); //@line 411 "lpc.c"
     $669 = HEAP32[$668>>2]|0; //@line 411 "lpc.c"
     $670 = $6; //@line 411 "lpc.c"
     $671 = $12; //@line 411 "lpc.c"
     $672 = (($671) - 6)|0; //@line 411 "lpc.c"
     $673 = (($670) + ($672<<2)|0); //@line 411 "lpc.c"
     $674 = HEAP32[$673>>2]|0; //@line 411 "lpc.c"
     $675 = Math_imul($669, $674)|0; //@line 411 "lpc.c"
     $676 = $13; //@line 411 "lpc.c"
     $677 = (($676) + ($675))|0; //@line 411 "lpc.c"
     $13 = $677; //@line 411 "lpc.c"
     $678 = $8; //@line 412 "lpc.c"
     $679 = ((($678)) + 16|0); //@line 412 "lpc.c"
     $680 = HEAP32[$679>>2]|0; //@line 412 "lpc.c"
     $681 = $6; //@line 412 "lpc.c"
     $682 = $12; //@line 412 "lpc.c"
     $683 = (($682) - 5)|0; //@line 412 "lpc.c"
     $684 = (($681) + ($683<<2)|0); //@line 412 "lpc.c"
     $685 = HEAP32[$684>>2]|0; //@line 412 "lpc.c"
     $686 = Math_imul($680, $685)|0; //@line 412 "lpc.c"
     $687 = $13; //@line 412 "lpc.c"
     $688 = (($687) + ($686))|0; //@line 412 "lpc.c"
     $13 = $688; //@line 412 "lpc.c"
     $689 = $8; //@line 413 "lpc.c"
     $690 = ((($689)) + 12|0); //@line 413 "lpc.c"
     $691 = HEAP32[$690>>2]|0; //@line 413 "lpc.c"
     $692 = $6; //@line 413 "lpc.c"
     $693 = $12; //@line 413 "lpc.c"
     $694 = (($693) - 4)|0; //@line 413 "lpc.c"
     $695 = (($692) + ($694<<2)|0); //@line 413 "lpc.c"
     $696 = HEAP32[$695>>2]|0; //@line 413 "lpc.c"
     $697 = Math_imul($691, $696)|0; //@line 413 "lpc.c"
     $698 = $13; //@line 413 "lpc.c"
     $699 = (($698) + ($697))|0; //@line 413 "lpc.c"
     $13 = $699; //@line 413 "lpc.c"
     $700 = $8; //@line 414 "lpc.c"
     $701 = ((($700)) + 8|0); //@line 414 "lpc.c"
     $702 = HEAP32[$701>>2]|0; //@line 414 "lpc.c"
     $703 = $6; //@line 414 "lpc.c"
     $704 = $12; //@line 414 "lpc.c"
     $705 = (($704) - 3)|0; //@line 414 "lpc.c"
     $706 = (($703) + ($705<<2)|0); //@line 414 "lpc.c"
     $707 = HEAP32[$706>>2]|0; //@line 414 "lpc.c"
     $708 = Math_imul($702, $707)|0; //@line 414 "lpc.c"
     $709 = $13; //@line 414 "lpc.c"
     $710 = (($709) + ($708))|0; //@line 414 "lpc.c"
     $13 = $710; //@line 414 "lpc.c"
     $711 = $8; //@line 415 "lpc.c"
     $712 = ((($711)) + 4|0); //@line 415 "lpc.c"
     $713 = HEAP32[$712>>2]|0; //@line 415 "lpc.c"
     $714 = $6; //@line 415 "lpc.c"
     $715 = $12; //@line 415 "lpc.c"
     $716 = (($715) - 2)|0; //@line 415 "lpc.c"
     $717 = (($714) + ($716<<2)|0); //@line 415 "lpc.c"
     $718 = HEAP32[$717>>2]|0; //@line 415 "lpc.c"
     $719 = Math_imul($713, $718)|0; //@line 415 "lpc.c"
     $720 = $13; //@line 415 "lpc.c"
     $721 = (($720) + ($719))|0; //@line 415 "lpc.c"
     $13 = $721; //@line 415 "lpc.c"
     $722 = $8; //@line 416 "lpc.c"
     $723 = HEAP32[$722>>2]|0; //@line 416 "lpc.c"
     $724 = $6; //@line 416 "lpc.c"
     $725 = $12; //@line 416 "lpc.c"
     $726 = (($725) - 1)|0; //@line 416 "lpc.c"
     $727 = (($724) + ($726<<2)|0); //@line 416 "lpc.c"
     $728 = HEAP32[$727>>2]|0; //@line 416 "lpc.c"
     $729 = Math_imul($723, $728)|0; //@line 416 "lpc.c"
     $730 = $13; //@line 416 "lpc.c"
     $731 = (($730) + ($729))|0; //@line 416 "lpc.c"
     $13 = $731; //@line 416 "lpc.c"
     $732 = $6; //@line 417 "lpc.c"
     $733 = $12; //@line 417 "lpc.c"
     $734 = (($732) + ($733<<2)|0); //@line 417 "lpc.c"
     $735 = HEAP32[$734>>2]|0; //@line 417 "lpc.c"
     $736 = $13; //@line 417 "lpc.c"
     $737 = $10; //@line 417 "lpc.c"
     $738 = $736 >> $737; //@line 417 "lpc.c"
     $739 = (($735) - ($738))|0; //@line 417 "lpc.c"
     $740 = $11; //@line 417 "lpc.c"
     $741 = $12; //@line 417 "lpc.c"
     $742 = (($740) + ($741<<2)|0); //@line 417 "lpc.c"
     HEAP32[$742>>2] = $739; //@line 417 "lpc.c"
     $743 = $12; //@line 408 "lpc.c"
     $744 = (($743) + 1)|0; //@line 408 "lpc.c"
     $12 = $744; //@line 408 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  } else {
   $745 = ($548|0)==(6); //@line 422 "lpc.c"
   $12 = 0;
   if ($745) {
    while(1) {
     $746 = $12; //@line 423 "lpc.c"
     $747 = $7; //@line 423 "lpc.c"
     $748 = ($746|0)<($747|0); //@line 423 "lpc.c"
     if (!($748)) {
      break;
     }
     $13 = 0; //@line 424 "lpc.c"
     $749 = $8; //@line 425 "lpc.c"
     $750 = ((($749)) + 20|0); //@line 425 "lpc.c"
     $751 = HEAP32[$750>>2]|0; //@line 425 "lpc.c"
     $752 = $6; //@line 425 "lpc.c"
     $753 = $12; //@line 425 "lpc.c"
     $754 = (($753) - 6)|0; //@line 425 "lpc.c"
     $755 = (($752) + ($754<<2)|0); //@line 425 "lpc.c"
     $756 = HEAP32[$755>>2]|0; //@line 425 "lpc.c"
     $757 = Math_imul($751, $756)|0; //@line 425 "lpc.c"
     $758 = $13; //@line 425 "lpc.c"
     $759 = (($758) + ($757))|0; //@line 425 "lpc.c"
     $13 = $759; //@line 425 "lpc.c"
     $760 = $8; //@line 426 "lpc.c"
     $761 = ((($760)) + 16|0); //@line 426 "lpc.c"
     $762 = HEAP32[$761>>2]|0; //@line 426 "lpc.c"
     $763 = $6; //@line 426 "lpc.c"
     $764 = $12; //@line 426 "lpc.c"
     $765 = (($764) - 5)|0; //@line 426 "lpc.c"
     $766 = (($763) + ($765<<2)|0); //@line 426 "lpc.c"
     $767 = HEAP32[$766>>2]|0; //@line 426 "lpc.c"
     $768 = Math_imul($762, $767)|0; //@line 426 "lpc.c"
     $769 = $13; //@line 426 "lpc.c"
     $770 = (($769) + ($768))|0; //@line 426 "lpc.c"
     $13 = $770; //@line 426 "lpc.c"
     $771 = $8; //@line 427 "lpc.c"
     $772 = ((($771)) + 12|0); //@line 427 "lpc.c"
     $773 = HEAP32[$772>>2]|0; //@line 427 "lpc.c"
     $774 = $6; //@line 427 "lpc.c"
     $775 = $12; //@line 427 "lpc.c"
     $776 = (($775) - 4)|0; //@line 427 "lpc.c"
     $777 = (($774) + ($776<<2)|0); //@line 427 "lpc.c"
     $778 = HEAP32[$777>>2]|0; //@line 427 "lpc.c"
     $779 = Math_imul($773, $778)|0; //@line 427 "lpc.c"
     $780 = $13; //@line 427 "lpc.c"
     $781 = (($780) + ($779))|0; //@line 427 "lpc.c"
     $13 = $781; //@line 427 "lpc.c"
     $782 = $8; //@line 428 "lpc.c"
     $783 = ((($782)) + 8|0); //@line 428 "lpc.c"
     $784 = HEAP32[$783>>2]|0; //@line 428 "lpc.c"
     $785 = $6; //@line 428 "lpc.c"
     $786 = $12; //@line 428 "lpc.c"
     $787 = (($786) - 3)|0; //@line 428 "lpc.c"
     $788 = (($785) + ($787<<2)|0); //@line 428 "lpc.c"
     $789 = HEAP32[$788>>2]|0; //@line 428 "lpc.c"
     $790 = Math_imul($784, $789)|0; //@line 428 "lpc.c"
     $791 = $13; //@line 428 "lpc.c"
     $792 = (($791) + ($790))|0; //@line 428 "lpc.c"
     $13 = $792; //@line 428 "lpc.c"
     $793 = $8; //@line 429 "lpc.c"
     $794 = ((($793)) + 4|0); //@line 429 "lpc.c"
     $795 = HEAP32[$794>>2]|0; //@line 429 "lpc.c"
     $796 = $6; //@line 429 "lpc.c"
     $797 = $12; //@line 429 "lpc.c"
     $798 = (($797) - 2)|0; //@line 429 "lpc.c"
     $799 = (($796) + ($798<<2)|0); //@line 429 "lpc.c"
     $800 = HEAP32[$799>>2]|0; //@line 429 "lpc.c"
     $801 = Math_imul($795, $800)|0; //@line 429 "lpc.c"
     $802 = $13; //@line 429 "lpc.c"
     $803 = (($802) + ($801))|0; //@line 429 "lpc.c"
     $13 = $803; //@line 429 "lpc.c"
     $804 = $8; //@line 430 "lpc.c"
     $805 = HEAP32[$804>>2]|0; //@line 430 "lpc.c"
     $806 = $6; //@line 430 "lpc.c"
     $807 = $12; //@line 430 "lpc.c"
     $808 = (($807) - 1)|0; //@line 430 "lpc.c"
     $809 = (($806) + ($808<<2)|0); //@line 430 "lpc.c"
     $810 = HEAP32[$809>>2]|0; //@line 430 "lpc.c"
     $811 = Math_imul($805, $810)|0; //@line 430 "lpc.c"
     $812 = $13; //@line 430 "lpc.c"
     $813 = (($812) + ($811))|0; //@line 430 "lpc.c"
     $13 = $813; //@line 430 "lpc.c"
     $814 = $6; //@line 431 "lpc.c"
     $815 = $12; //@line 431 "lpc.c"
     $816 = (($814) + ($815<<2)|0); //@line 431 "lpc.c"
     $817 = HEAP32[$816>>2]|0; //@line 431 "lpc.c"
     $818 = $13; //@line 431 "lpc.c"
     $819 = $10; //@line 431 "lpc.c"
     $820 = $818 >> $819; //@line 431 "lpc.c"
     $821 = (($817) - ($820))|0; //@line 431 "lpc.c"
     $822 = $11; //@line 431 "lpc.c"
     $823 = $12; //@line 431 "lpc.c"
     $824 = (($822) + ($823<<2)|0); //@line 431 "lpc.c"
     HEAP32[$824>>2] = $821; //@line 431 "lpc.c"
     $825 = $12; //@line 423 "lpc.c"
     $826 = (($825) + 1)|0; //@line 423 "lpc.c"
     $12 = $826; //@line 423 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $827 = $12; //@line 435 "lpc.c"
     $828 = $7; //@line 435 "lpc.c"
     $829 = ($827|0)<($828|0); //@line 435 "lpc.c"
     if (!($829)) {
      break;
     }
     $13 = 0; //@line 436 "lpc.c"
     $830 = $8; //@line 437 "lpc.c"
     $831 = ((($830)) + 16|0); //@line 437 "lpc.c"
     $832 = HEAP32[$831>>2]|0; //@line 437 "lpc.c"
     $833 = $6; //@line 437 "lpc.c"
     $834 = $12; //@line 437 "lpc.c"
     $835 = (($834) - 5)|0; //@line 437 "lpc.c"
     $836 = (($833) + ($835<<2)|0); //@line 437 "lpc.c"
     $837 = HEAP32[$836>>2]|0; //@line 437 "lpc.c"
     $838 = Math_imul($832, $837)|0; //@line 437 "lpc.c"
     $839 = $13; //@line 437 "lpc.c"
     $840 = (($839) + ($838))|0; //@line 437 "lpc.c"
     $13 = $840; //@line 437 "lpc.c"
     $841 = $8; //@line 438 "lpc.c"
     $842 = ((($841)) + 12|0); //@line 438 "lpc.c"
     $843 = HEAP32[$842>>2]|0; //@line 438 "lpc.c"
     $844 = $6; //@line 438 "lpc.c"
     $845 = $12; //@line 438 "lpc.c"
     $846 = (($845) - 4)|0; //@line 438 "lpc.c"
     $847 = (($844) + ($846<<2)|0); //@line 438 "lpc.c"
     $848 = HEAP32[$847>>2]|0; //@line 438 "lpc.c"
     $849 = Math_imul($843, $848)|0; //@line 438 "lpc.c"
     $850 = $13; //@line 438 "lpc.c"
     $851 = (($850) + ($849))|0; //@line 438 "lpc.c"
     $13 = $851; //@line 438 "lpc.c"
     $852 = $8; //@line 439 "lpc.c"
     $853 = ((($852)) + 8|0); //@line 439 "lpc.c"
     $854 = HEAP32[$853>>2]|0; //@line 439 "lpc.c"
     $855 = $6; //@line 439 "lpc.c"
     $856 = $12; //@line 439 "lpc.c"
     $857 = (($856) - 3)|0; //@line 439 "lpc.c"
     $858 = (($855) + ($857<<2)|0); //@line 439 "lpc.c"
     $859 = HEAP32[$858>>2]|0; //@line 439 "lpc.c"
     $860 = Math_imul($854, $859)|0; //@line 439 "lpc.c"
     $861 = $13; //@line 439 "lpc.c"
     $862 = (($861) + ($860))|0; //@line 439 "lpc.c"
     $13 = $862; //@line 439 "lpc.c"
     $863 = $8; //@line 440 "lpc.c"
     $864 = ((($863)) + 4|0); //@line 440 "lpc.c"
     $865 = HEAP32[$864>>2]|0; //@line 440 "lpc.c"
     $866 = $6; //@line 440 "lpc.c"
     $867 = $12; //@line 440 "lpc.c"
     $868 = (($867) - 2)|0; //@line 440 "lpc.c"
     $869 = (($866) + ($868<<2)|0); //@line 440 "lpc.c"
     $870 = HEAP32[$869>>2]|0; //@line 440 "lpc.c"
     $871 = Math_imul($865, $870)|0; //@line 440 "lpc.c"
     $872 = $13; //@line 440 "lpc.c"
     $873 = (($872) + ($871))|0; //@line 440 "lpc.c"
     $13 = $873; //@line 440 "lpc.c"
     $874 = $8; //@line 441 "lpc.c"
     $875 = HEAP32[$874>>2]|0; //@line 441 "lpc.c"
     $876 = $6; //@line 441 "lpc.c"
     $877 = $12; //@line 441 "lpc.c"
     $878 = (($877) - 1)|0; //@line 441 "lpc.c"
     $879 = (($876) + ($878<<2)|0); //@line 441 "lpc.c"
     $880 = HEAP32[$879>>2]|0; //@line 441 "lpc.c"
     $881 = Math_imul($875, $880)|0; //@line 441 "lpc.c"
     $882 = $13; //@line 441 "lpc.c"
     $883 = (($882) + ($881))|0; //@line 441 "lpc.c"
     $13 = $883; //@line 441 "lpc.c"
     $884 = $6; //@line 442 "lpc.c"
     $885 = $12; //@line 442 "lpc.c"
     $886 = (($884) + ($885<<2)|0); //@line 442 "lpc.c"
     $887 = HEAP32[$886>>2]|0; //@line 442 "lpc.c"
     $888 = $13; //@line 442 "lpc.c"
     $889 = $10; //@line 442 "lpc.c"
     $890 = $888 >> $889; //@line 442 "lpc.c"
     $891 = (($887) - ($890))|0; //@line 442 "lpc.c"
     $892 = $11; //@line 442 "lpc.c"
     $893 = $12; //@line 442 "lpc.c"
     $894 = (($892) + ($893<<2)|0); //@line 442 "lpc.c"
     HEAP32[$894>>2] = $891; //@line 442 "lpc.c"
     $895 = $12; //@line 435 "lpc.c"
     $896 = (($895) + 1)|0; //@line 435 "lpc.c"
     $12 = $896; //@line 435 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  }
 } else {
  $897 = ($546>>>0)>(2); //@line 448 "lpc.c"
  $898 = $9;
  if ($897) {
   $899 = ($898|0)==(4); //@line 449 "lpc.c"
   $12 = 0;
   if ($899) {
    while(1) {
     $900 = $12; //@line 450 "lpc.c"
     $901 = $7; //@line 450 "lpc.c"
     $902 = ($900|0)<($901|0); //@line 450 "lpc.c"
     if (!($902)) {
      break;
     }
     $13 = 0; //@line 451 "lpc.c"
     $903 = $8; //@line 452 "lpc.c"
     $904 = ((($903)) + 12|0); //@line 452 "lpc.c"
     $905 = HEAP32[$904>>2]|0; //@line 452 "lpc.c"
     $906 = $6; //@line 452 "lpc.c"
     $907 = $12; //@line 452 "lpc.c"
     $908 = (($907) - 4)|0; //@line 452 "lpc.c"
     $909 = (($906) + ($908<<2)|0); //@line 452 "lpc.c"
     $910 = HEAP32[$909>>2]|0; //@line 452 "lpc.c"
     $911 = Math_imul($905, $910)|0; //@line 452 "lpc.c"
     $912 = $13; //@line 452 "lpc.c"
     $913 = (($912) + ($911))|0; //@line 452 "lpc.c"
     $13 = $913; //@line 452 "lpc.c"
     $914 = $8; //@line 453 "lpc.c"
     $915 = ((($914)) + 8|0); //@line 453 "lpc.c"
     $916 = HEAP32[$915>>2]|0; //@line 453 "lpc.c"
     $917 = $6; //@line 453 "lpc.c"
     $918 = $12; //@line 453 "lpc.c"
     $919 = (($918) - 3)|0; //@line 453 "lpc.c"
     $920 = (($917) + ($919<<2)|0); //@line 453 "lpc.c"
     $921 = HEAP32[$920>>2]|0; //@line 453 "lpc.c"
     $922 = Math_imul($916, $921)|0; //@line 453 "lpc.c"
     $923 = $13; //@line 453 "lpc.c"
     $924 = (($923) + ($922))|0; //@line 453 "lpc.c"
     $13 = $924; //@line 453 "lpc.c"
     $925 = $8; //@line 454 "lpc.c"
     $926 = ((($925)) + 4|0); //@line 454 "lpc.c"
     $927 = HEAP32[$926>>2]|0; //@line 454 "lpc.c"
     $928 = $6; //@line 454 "lpc.c"
     $929 = $12; //@line 454 "lpc.c"
     $930 = (($929) - 2)|0; //@line 454 "lpc.c"
     $931 = (($928) + ($930<<2)|0); //@line 454 "lpc.c"
     $932 = HEAP32[$931>>2]|0; //@line 454 "lpc.c"
     $933 = Math_imul($927, $932)|0; //@line 454 "lpc.c"
     $934 = $13; //@line 454 "lpc.c"
     $935 = (($934) + ($933))|0; //@line 454 "lpc.c"
     $13 = $935; //@line 454 "lpc.c"
     $936 = $8; //@line 455 "lpc.c"
     $937 = HEAP32[$936>>2]|0; //@line 455 "lpc.c"
     $938 = $6; //@line 455 "lpc.c"
     $939 = $12; //@line 455 "lpc.c"
     $940 = (($939) - 1)|0; //@line 455 "lpc.c"
     $941 = (($938) + ($940<<2)|0); //@line 455 "lpc.c"
     $942 = HEAP32[$941>>2]|0; //@line 455 "lpc.c"
     $943 = Math_imul($937, $942)|0; //@line 455 "lpc.c"
     $944 = $13; //@line 455 "lpc.c"
     $945 = (($944) + ($943))|0; //@line 455 "lpc.c"
     $13 = $945; //@line 455 "lpc.c"
     $946 = $6; //@line 456 "lpc.c"
     $947 = $12; //@line 456 "lpc.c"
     $948 = (($946) + ($947<<2)|0); //@line 456 "lpc.c"
     $949 = HEAP32[$948>>2]|0; //@line 456 "lpc.c"
     $950 = $13; //@line 456 "lpc.c"
     $951 = $10; //@line 456 "lpc.c"
     $952 = $950 >> $951; //@line 456 "lpc.c"
     $953 = (($949) - ($952))|0; //@line 456 "lpc.c"
     $954 = $11; //@line 456 "lpc.c"
     $955 = $12; //@line 456 "lpc.c"
     $956 = (($954) + ($955<<2)|0); //@line 456 "lpc.c"
     HEAP32[$956>>2] = $953; //@line 456 "lpc.c"
     $957 = $12; //@line 450 "lpc.c"
     $958 = (($957) + 1)|0; //@line 450 "lpc.c"
     $12 = $958; //@line 450 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $959 = $12; //@line 460 "lpc.c"
     $960 = $7; //@line 460 "lpc.c"
     $961 = ($959|0)<($960|0); //@line 460 "lpc.c"
     if (!($961)) {
      break;
     }
     $13 = 0; //@line 461 "lpc.c"
     $962 = $8; //@line 462 "lpc.c"
     $963 = ((($962)) + 8|0); //@line 462 "lpc.c"
     $964 = HEAP32[$963>>2]|0; //@line 462 "lpc.c"
     $965 = $6; //@line 462 "lpc.c"
     $966 = $12; //@line 462 "lpc.c"
     $967 = (($966) - 3)|0; //@line 462 "lpc.c"
     $968 = (($965) + ($967<<2)|0); //@line 462 "lpc.c"
     $969 = HEAP32[$968>>2]|0; //@line 462 "lpc.c"
     $970 = Math_imul($964, $969)|0; //@line 462 "lpc.c"
     $971 = $13; //@line 462 "lpc.c"
     $972 = (($971) + ($970))|0; //@line 462 "lpc.c"
     $13 = $972; //@line 462 "lpc.c"
     $973 = $8; //@line 463 "lpc.c"
     $974 = ((($973)) + 4|0); //@line 463 "lpc.c"
     $975 = HEAP32[$974>>2]|0; //@line 463 "lpc.c"
     $976 = $6; //@line 463 "lpc.c"
     $977 = $12; //@line 463 "lpc.c"
     $978 = (($977) - 2)|0; //@line 463 "lpc.c"
     $979 = (($976) + ($978<<2)|0); //@line 463 "lpc.c"
     $980 = HEAP32[$979>>2]|0; //@line 463 "lpc.c"
     $981 = Math_imul($975, $980)|0; //@line 463 "lpc.c"
     $982 = $13; //@line 463 "lpc.c"
     $983 = (($982) + ($981))|0; //@line 463 "lpc.c"
     $13 = $983; //@line 463 "lpc.c"
     $984 = $8; //@line 464 "lpc.c"
     $985 = HEAP32[$984>>2]|0; //@line 464 "lpc.c"
     $986 = $6; //@line 464 "lpc.c"
     $987 = $12; //@line 464 "lpc.c"
     $988 = (($987) - 1)|0; //@line 464 "lpc.c"
     $989 = (($986) + ($988<<2)|0); //@line 464 "lpc.c"
     $990 = HEAP32[$989>>2]|0; //@line 464 "lpc.c"
     $991 = Math_imul($985, $990)|0; //@line 464 "lpc.c"
     $992 = $13; //@line 464 "lpc.c"
     $993 = (($992) + ($991))|0; //@line 464 "lpc.c"
     $13 = $993; //@line 464 "lpc.c"
     $994 = $6; //@line 465 "lpc.c"
     $995 = $12; //@line 465 "lpc.c"
     $996 = (($994) + ($995<<2)|0); //@line 465 "lpc.c"
     $997 = HEAP32[$996>>2]|0; //@line 465 "lpc.c"
     $998 = $13; //@line 465 "lpc.c"
     $999 = $10; //@line 465 "lpc.c"
     $1000 = $998 >> $999; //@line 465 "lpc.c"
     $1001 = (($997) - ($1000))|0; //@line 465 "lpc.c"
     $1002 = $11; //@line 465 "lpc.c"
     $1003 = $12; //@line 465 "lpc.c"
     $1004 = (($1002) + ($1003<<2)|0); //@line 465 "lpc.c"
     HEAP32[$1004>>2] = $1001; //@line 465 "lpc.c"
     $1005 = $12; //@line 460 "lpc.c"
     $1006 = (($1005) + 1)|0; //@line 460 "lpc.c"
     $12 = $1006; //@line 460 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  } else {
   $1007 = ($898|0)==(2); //@line 470 "lpc.c"
   $12 = 0;
   if ($1007) {
    while(1) {
     $1008 = $12; //@line 471 "lpc.c"
     $1009 = $7; //@line 471 "lpc.c"
     $1010 = ($1008|0)<($1009|0); //@line 471 "lpc.c"
     if (!($1010)) {
      break;
     }
     $13 = 0; //@line 472 "lpc.c"
     $1011 = $8; //@line 473 "lpc.c"
     $1012 = ((($1011)) + 4|0); //@line 473 "lpc.c"
     $1013 = HEAP32[$1012>>2]|0; //@line 473 "lpc.c"
     $1014 = $6; //@line 473 "lpc.c"
     $1015 = $12; //@line 473 "lpc.c"
     $1016 = (($1015) - 2)|0; //@line 473 "lpc.c"
     $1017 = (($1014) + ($1016<<2)|0); //@line 473 "lpc.c"
     $1018 = HEAP32[$1017>>2]|0; //@line 473 "lpc.c"
     $1019 = Math_imul($1013, $1018)|0; //@line 473 "lpc.c"
     $1020 = $13; //@line 473 "lpc.c"
     $1021 = (($1020) + ($1019))|0; //@line 473 "lpc.c"
     $13 = $1021; //@line 473 "lpc.c"
     $1022 = $8; //@line 474 "lpc.c"
     $1023 = HEAP32[$1022>>2]|0; //@line 474 "lpc.c"
     $1024 = $6; //@line 474 "lpc.c"
     $1025 = $12; //@line 474 "lpc.c"
     $1026 = (($1025) - 1)|0; //@line 474 "lpc.c"
     $1027 = (($1024) + ($1026<<2)|0); //@line 474 "lpc.c"
     $1028 = HEAP32[$1027>>2]|0; //@line 474 "lpc.c"
     $1029 = Math_imul($1023, $1028)|0; //@line 474 "lpc.c"
     $1030 = $13; //@line 474 "lpc.c"
     $1031 = (($1030) + ($1029))|0; //@line 474 "lpc.c"
     $13 = $1031; //@line 474 "lpc.c"
     $1032 = $6; //@line 475 "lpc.c"
     $1033 = $12; //@line 475 "lpc.c"
     $1034 = (($1032) + ($1033<<2)|0); //@line 475 "lpc.c"
     $1035 = HEAP32[$1034>>2]|0; //@line 475 "lpc.c"
     $1036 = $13; //@line 475 "lpc.c"
     $1037 = $10; //@line 475 "lpc.c"
     $1038 = $1036 >> $1037; //@line 475 "lpc.c"
     $1039 = (($1035) - ($1038))|0; //@line 475 "lpc.c"
     $1040 = $11; //@line 475 "lpc.c"
     $1041 = $12; //@line 475 "lpc.c"
     $1042 = (($1040) + ($1041<<2)|0); //@line 475 "lpc.c"
     HEAP32[$1042>>2] = $1039; //@line 475 "lpc.c"
     $1043 = $12; //@line 471 "lpc.c"
     $1044 = (($1043) + 1)|0; //@line 471 "lpc.c"
     $12 = $1044; //@line 471 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   } else {
    while(1) {
     $1045 = $12; //@line 479 "lpc.c"
     $1046 = $7; //@line 479 "lpc.c"
     $1047 = ($1045|0)<($1046|0); //@line 479 "lpc.c"
     if (!($1047)) {
      break;
     }
     $1048 = $6; //@line 480 "lpc.c"
     $1049 = $12; //@line 480 "lpc.c"
     $1050 = (($1048) + ($1049<<2)|0); //@line 480 "lpc.c"
     $1051 = HEAP32[$1050>>2]|0; //@line 480 "lpc.c"
     $1052 = $8; //@line 480 "lpc.c"
     $1053 = HEAP32[$1052>>2]|0; //@line 480 "lpc.c"
     $1054 = $6; //@line 480 "lpc.c"
     $1055 = $12; //@line 480 "lpc.c"
     $1056 = (($1055) - 1)|0; //@line 480 "lpc.c"
     $1057 = (($1054) + ($1056<<2)|0); //@line 480 "lpc.c"
     $1058 = HEAP32[$1057>>2]|0; //@line 480 "lpc.c"
     $1059 = Math_imul($1053, $1058)|0; //@line 480 "lpc.c"
     $1060 = $10; //@line 480 "lpc.c"
     $1061 = $1059 >> $1060; //@line 480 "lpc.c"
     $1062 = (($1051) - ($1061))|0; //@line 480 "lpc.c"
     $1063 = $11; //@line 480 "lpc.c"
     $1064 = $12; //@line 480 "lpc.c"
     $1065 = (($1063) + ($1064<<2)|0); //@line 480 "lpc.c"
     HEAP32[$1065>>2] = $1062; //@line 480 "lpc.c"
     $1066 = $12; //@line 479 "lpc.c"
     $1067 = (($1066) + 1)|0; //@line 479 "lpc.c"
     $12 = $1067; //@line 479 "lpc.c"
    }
    STACKTOP = sp;return; //@line 525 "lpc.c"
   }
  }
 }
}
function _FLAC__lpc_compute_residual_from_qlp_coefficients_wide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0;
 var $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0;
 var $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0;
 var $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0;
 var $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $9; //@line 572 "lpc.c"
 $15 = ($14>>>0)<=(12); //@line 572 "lpc.c"
 if (!($15)) {
  $12 = 0; //@line 740 "lpc.c"
  while(1) {
   $2339 = $12; //@line 740 "lpc.c"
   $2340 = $7; //@line 740 "lpc.c"
   $2341 = ($2339|0)<($2340|0); //@line 740 "lpc.c"
   if (!($2341)) {
    break;
   }
   $2342 = $13; //@line 741 "lpc.c"
   $2343 = $2342; //@line 741 "lpc.c"
   HEAP32[$2343>>2] = 0; //@line 741 "lpc.c"
   $2344 = (($2342) + 4)|0; //@line 741 "lpc.c"
   $2345 = $2344; //@line 741 "lpc.c"
   HEAP32[$2345>>2] = 0; //@line 741 "lpc.c"
   $2346 = $9; //@line 742 "lpc.c"
   switch ($2346|0) {
   case 32:  {
    $2347 = $8; //@line 743 "lpc.c"
    $2348 = ((($2347)) + 124|0); //@line 743 "lpc.c"
    $2349 = HEAP32[$2348>>2]|0; //@line 743 "lpc.c"
    $2350 = ($2349|0)<(0); //@line 743 "lpc.c"
    $2351 = $2350 << 31 >> 31; //@line 743 "lpc.c"
    $2352 = $6; //@line 743 "lpc.c"
    $2353 = $12; //@line 743 "lpc.c"
    $2354 = (($2353) - 32)|0; //@line 743 "lpc.c"
    $2355 = (($2352) + ($2354<<2)|0); //@line 743 "lpc.c"
    $2356 = HEAP32[$2355>>2]|0; //@line 743 "lpc.c"
    $2357 = ($2356|0)<(0); //@line 743 "lpc.c"
    $2358 = $2357 << 31 >> 31; //@line 743 "lpc.c"
    $2359 = (___muldi3(($2349|0),($2351|0),($2356|0),($2358|0))|0); //@line 743 "lpc.c"
    $2360 = tempRet0; //@line 743 "lpc.c"
    $2361 = $13; //@line 743 "lpc.c"
    $2362 = $2361; //@line 743 "lpc.c"
    $2363 = HEAP32[$2362>>2]|0; //@line 743 "lpc.c"
    $2364 = (($2361) + 4)|0; //@line 743 "lpc.c"
    $2365 = $2364; //@line 743 "lpc.c"
    $2366 = HEAP32[$2365>>2]|0; //@line 743 "lpc.c"
    $2367 = (_i64Add(($2363|0),($2366|0),($2359|0),($2360|0))|0); //@line 743 "lpc.c"
    $2368 = tempRet0; //@line 743 "lpc.c"
    $2369 = $13; //@line 743 "lpc.c"
    $2370 = $2369; //@line 743 "lpc.c"
    HEAP32[$2370>>2] = $2367; //@line 743 "lpc.c"
    $2371 = (($2369) + 4)|0; //@line 743 "lpc.c"
    $2372 = $2371; //@line 743 "lpc.c"
    HEAP32[$2372>>2] = $2368; //@line 743 "lpc.c"
    label = 53;
    break;
   }
   case 31:  {
    label = 53;
    break;
   }
   case 30:  {
    label = 54;
    break;
   }
   case 29:  {
    label = 55;
    break;
   }
   case 28:  {
    label = 56;
    break;
   }
   case 27:  {
    label = 57;
    break;
   }
   case 26:  {
    label = 58;
    break;
   }
   case 25:  {
    label = 59;
    break;
   }
   case 24:  {
    label = 60;
    break;
   }
   case 23:  {
    label = 61;
    break;
   }
   case 22:  {
    label = 62;
    break;
   }
   case 21:  {
    label = 63;
    break;
   }
   case 20:  {
    label = 64;
    break;
   }
   case 19:  {
    label = 65;
    break;
   }
   case 18:  {
    label = 66;
    break;
   }
   case 17:  {
    label = 67;
    break;
   }
   case 16:  {
    label = 68;
    break;
   }
   case 15:  {
    label = 69;
    break;
   }
   case 14:  {
    label = 70;
    break;
   }
   case 13:  {
    label = 71;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $2373 = $8; //@line 744 "lpc.c"
    $2374 = ((($2373)) + 120|0); //@line 744 "lpc.c"
    $2375 = HEAP32[$2374>>2]|0; //@line 744 "lpc.c"
    $2376 = ($2375|0)<(0); //@line 744 "lpc.c"
    $2377 = $2376 << 31 >> 31; //@line 744 "lpc.c"
    $2378 = $6; //@line 744 "lpc.c"
    $2379 = $12; //@line 744 "lpc.c"
    $2380 = (($2379) - 31)|0; //@line 744 "lpc.c"
    $2381 = (($2378) + ($2380<<2)|0); //@line 744 "lpc.c"
    $2382 = HEAP32[$2381>>2]|0; //@line 744 "lpc.c"
    $2383 = ($2382|0)<(0); //@line 744 "lpc.c"
    $2384 = $2383 << 31 >> 31; //@line 744 "lpc.c"
    $2385 = (___muldi3(($2375|0),($2377|0),($2382|0),($2384|0))|0); //@line 744 "lpc.c"
    $2386 = tempRet0; //@line 744 "lpc.c"
    $2387 = $13; //@line 744 "lpc.c"
    $2388 = $2387; //@line 744 "lpc.c"
    $2389 = HEAP32[$2388>>2]|0; //@line 744 "lpc.c"
    $2390 = (($2387) + 4)|0; //@line 744 "lpc.c"
    $2391 = $2390; //@line 744 "lpc.c"
    $2392 = HEAP32[$2391>>2]|0; //@line 744 "lpc.c"
    $2393 = (_i64Add(($2389|0),($2392|0),($2385|0),($2386|0))|0); //@line 744 "lpc.c"
    $2394 = tempRet0; //@line 744 "lpc.c"
    $2395 = $13; //@line 744 "lpc.c"
    $2396 = $2395; //@line 744 "lpc.c"
    HEAP32[$2396>>2] = $2393; //@line 744 "lpc.c"
    $2397 = (($2395) + 4)|0; //@line 744 "lpc.c"
    $2398 = $2397; //@line 744 "lpc.c"
    HEAP32[$2398>>2] = $2394; //@line 744 "lpc.c"
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $2399 = $8; //@line 745 "lpc.c"
    $2400 = ((($2399)) + 116|0); //@line 745 "lpc.c"
    $2401 = HEAP32[$2400>>2]|0; //@line 745 "lpc.c"
    $2402 = ($2401|0)<(0); //@line 745 "lpc.c"
    $2403 = $2402 << 31 >> 31; //@line 745 "lpc.c"
    $2404 = $6; //@line 745 "lpc.c"
    $2405 = $12; //@line 745 "lpc.c"
    $2406 = (($2405) - 30)|0; //@line 745 "lpc.c"
    $2407 = (($2404) + ($2406<<2)|0); //@line 745 "lpc.c"
    $2408 = HEAP32[$2407>>2]|0; //@line 745 "lpc.c"
    $2409 = ($2408|0)<(0); //@line 745 "lpc.c"
    $2410 = $2409 << 31 >> 31; //@line 745 "lpc.c"
    $2411 = (___muldi3(($2401|0),($2403|0),($2408|0),($2410|0))|0); //@line 745 "lpc.c"
    $2412 = tempRet0; //@line 745 "lpc.c"
    $2413 = $13; //@line 745 "lpc.c"
    $2414 = $2413; //@line 745 "lpc.c"
    $2415 = HEAP32[$2414>>2]|0; //@line 745 "lpc.c"
    $2416 = (($2413) + 4)|0; //@line 745 "lpc.c"
    $2417 = $2416; //@line 745 "lpc.c"
    $2418 = HEAP32[$2417>>2]|0; //@line 745 "lpc.c"
    $2419 = (_i64Add(($2415|0),($2418|0),($2411|0),($2412|0))|0); //@line 745 "lpc.c"
    $2420 = tempRet0; //@line 745 "lpc.c"
    $2421 = $13; //@line 745 "lpc.c"
    $2422 = $2421; //@line 745 "lpc.c"
    HEAP32[$2422>>2] = $2419; //@line 745 "lpc.c"
    $2423 = (($2421) + 4)|0; //@line 745 "lpc.c"
    $2424 = $2423; //@line 745 "lpc.c"
    HEAP32[$2424>>2] = $2420; //@line 745 "lpc.c"
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $2425 = $8; //@line 746 "lpc.c"
    $2426 = ((($2425)) + 112|0); //@line 746 "lpc.c"
    $2427 = HEAP32[$2426>>2]|0; //@line 746 "lpc.c"
    $2428 = ($2427|0)<(0); //@line 746 "lpc.c"
    $2429 = $2428 << 31 >> 31; //@line 746 "lpc.c"
    $2430 = $6; //@line 746 "lpc.c"
    $2431 = $12; //@line 746 "lpc.c"
    $2432 = (($2431) - 29)|0; //@line 746 "lpc.c"
    $2433 = (($2430) + ($2432<<2)|0); //@line 746 "lpc.c"
    $2434 = HEAP32[$2433>>2]|0; //@line 746 "lpc.c"
    $2435 = ($2434|0)<(0); //@line 746 "lpc.c"
    $2436 = $2435 << 31 >> 31; //@line 746 "lpc.c"
    $2437 = (___muldi3(($2427|0),($2429|0),($2434|0),($2436|0))|0); //@line 746 "lpc.c"
    $2438 = tempRet0; //@line 746 "lpc.c"
    $2439 = $13; //@line 746 "lpc.c"
    $2440 = $2439; //@line 746 "lpc.c"
    $2441 = HEAP32[$2440>>2]|0; //@line 746 "lpc.c"
    $2442 = (($2439) + 4)|0; //@line 746 "lpc.c"
    $2443 = $2442; //@line 746 "lpc.c"
    $2444 = HEAP32[$2443>>2]|0; //@line 746 "lpc.c"
    $2445 = (_i64Add(($2441|0),($2444|0),($2437|0),($2438|0))|0); //@line 746 "lpc.c"
    $2446 = tempRet0; //@line 746 "lpc.c"
    $2447 = $13; //@line 746 "lpc.c"
    $2448 = $2447; //@line 746 "lpc.c"
    HEAP32[$2448>>2] = $2445; //@line 746 "lpc.c"
    $2449 = (($2447) + 4)|0; //@line 746 "lpc.c"
    $2450 = $2449; //@line 746 "lpc.c"
    HEAP32[$2450>>2] = $2446; //@line 746 "lpc.c"
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $2451 = $8; //@line 747 "lpc.c"
    $2452 = ((($2451)) + 108|0); //@line 747 "lpc.c"
    $2453 = HEAP32[$2452>>2]|0; //@line 747 "lpc.c"
    $2454 = ($2453|0)<(0); //@line 747 "lpc.c"
    $2455 = $2454 << 31 >> 31; //@line 747 "lpc.c"
    $2456 = $6; //@line 747 "lpc.c"
    $2457 = $12; //@line 747 "lpc.c"
    $2458 = (($2457) - 28)|0; //@line 747 "lpc.c"
    $2459 = (($2456) + ($2458<<2)|0); //@line 747 "lpc.c"
    $2460 = HEAP32[$2459>>2]|0; //@line 747 "lpc.c"
    $2461 = ($2460|0)<(0); //@line 747 "lpc.c"
    $2462 = $2461 << 31 >> 31; //@line 747 "lpc.c"
    $2463 = (___muldi3(($2453|0),($2455|0),($2460|0),($2462|0))|0); //@line 747 "lpc.c"
    $2464 = tempRet0; //@line 747 "lpc.c"
    $2465 = $13; //@line 747 "lpc.c"
    $2466 = $2465; //@line 747 "lpc.c"
    $2467 = HEAP32[$2466>>2]|0; //@line 747 "lpc.c"
    $2468 = (($2465) + 4)|0; //@line 747 "lpc.c"
    $2469 = $2468; //@line 747 "lpc.c"
    $2470 = HEAP32[$2469>>2]|0; //@line 747 "lpc.c"
    $2471 = (_i64Add(($2467|0),($2470|0),($2463|0),($2464|0))|0); //@line 747 "lpc.c"
    $2472 = tempRet0; //@line 747 "lpc.c"
    $2473 = $13; //@line 747 "lpc.c"
    $2474 = $2473; //@line 747 "lpc.c"
    HEAP32[$2474>>2] = $2471; //@line 747 "lpc.c"
    $2475 = (($2473) + 4)|0; //@line 747 "lpc.c"
    $2476 = $2475; //@line 747 "lpc.c"
    HEAP32[$2476>>2] = $2472; //@line 747 "lpc.c"
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $2477 = $8; //@line 748 "lpc.c"
    $2478 = ((($2477)) + 104|0); //@line 748 "lpc.c"
    $2479 = HEAP32[$2478>>2]|0; //@line 748 "lpc.c"
    $2480 = ($2479|0)<(0); //@line 748 "lpc.c"
    $2481 = $2480 << 31 >> 31; //@line 748 "lpc.c"
    $2482 = $6; //@line 748 "lpc.c"
    $2483 = $12; //@line 748 "lpc.c"
    $2484 = (($2483) - 27)|0; //@line 748 "lpc.c"
    $2485 = (($2482) + ($2484<<2)|0); //@line 748 "lpc.c"
    $2486 = HEAP32[$2485>>2]|0; //@line 748 "lpc.c"
    $2487 = ($2486|0)<(0); //@line 748 "lpc.c"
    $2488 = $2487 << 31 >> 31; //@line 748 "lpc.c"
    $2489 = (___muldi3(($2479|0),($2481|0),($2486|0),($2488|0))|0); //@line 748 "lpc.c"
    $2490 = tempRet0; //@line 748 "lpc.c"
    $2491 = $13; //@line 748 "lpc.c"
    $2492 = $2491; //@line 748 "lpc.c"
    $2493 = HEAP32[$2492>>2]|0; //@line 748 "lpc.c"
    $2494 = (($2491) + 4)|0; //@line 748 "lpc.c"
    $2495 = $2494; //@line 748 "lpc.c"
    $2496 = HEAP32[$2495>>2]|0; //@line 748 "lpc.c"
    $2497 = (_i64Add(($2493|0),($2496|0),($2489|0),($2490|0))|0); //@line 748 "lpc.c"
    $2498 = tempRet0; //@line 748 "lpc.c"
    $2499 = $13; //@line 748 "lpc.c"
    $2500 = $2499; //@line 748 "lpc.c"
    HEAP32[$2500>>2] = $2497; //@line 748 "lpc.c"
    $2501 = (($2499) + 4)|0; //@line 748 "lpc.c"
    $2502 = $2501; //@line 748 "lpc.c"
    HEAP32[$2502>>2] = $2498; //@line 748 "lpc.c"
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $2503 = $8; //@line 749 "lpc.c"
    $2504 = ((($2503)) + 100|0); //@line 749 "lpc.c"
    $2505 = HEAP32[$2504>>2]|0; //@line 749 "lpc.c"
    $2506 = ($2505|0)<(0); //@line 749 "lpc.c"
    $2507 = $2506 << 31 >> 31; //@line 749 "lpc.c"
    $2508 = $6; //@line 749 "lpc.c"
    $2509 = $12; //@line 749 "lpc.c"
    $2510 = (($2509) - 26)|0; //@line 749 "lpc.c"
    $2511 = (($2508) + ($2510<<2)|0); //@line 749 "lpc.c"
    $2512 = HEAP32[$2511>>2]|0; //@line 749 "lpc.c"
    $2513 = ($2512|0)<(0); //@line 749 "lpc.c"
    $2514 = $2513 << 31 >> 31; //@line 749 "lpc.c"
    $2515 = (___muldi3(($2505|0),($2507|0),($2512|0),($2514|0))|0); //@line 749 "lpc.c"
    $2516 = tempRet0; //@line 749 "lpc.c"
    $2517 = $13; //@line 749 "lpc.c"
    $2518 = $2517; //@line 749 "lpc.c"
    $2519 = HEAP32[$2518>>2]|0; //@line 749 "lpc.c"
    $2520 = (($2517) + 4)|0; //@line 749 "lpc.c"
    $2521 = $2520; //@line 749 "lpc.c"
    $2522 = HEAP32[$2521>>2]|0; //@line 749 "lpc.c"
    $2523 = (_i64Add(($2519|0),($2522|0),($2515|0),($2516|0))|0); //@line 749 "lpc.c"
    $2524 = tempRet0; //@line 749 "lpc.c"
    $2525 = $13; //@line 749 "lpc.c"
    $2526 = $2525; //@line 749 "lpc.c"
    HEAP32[$2526>>2] = $2523; //@line 749 "lpc.c"
    $2527 = (($2525) + 4)|0; //@line 749 "lpc.c"
    $2528 = $2527; //@line 749 "lpc.c"
    HEAP32[$2528>>2] = $2524; //@line 749 "lpc.c"
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $2529 = $8; //@line 750 "lpc.c"
    $2530 = ((($2529)) + 96|0); //@line 750 "lpc.c"
    $2531 = HEAP32[$2530>>2]|0; //@line 750 "lpc.c"
    $2532 = ($2531|0)<(0); //@line 750 "lpc.c"
    $2533 = $2532 << 31 >> 31; //@line 750 "lpc.c"
    $2534 = $6; //@line 750 "lpc.c"
    $2535 = $12; //@line 750 "lpc.c"
    $2536 = (($2535) - 25)|0; //@line 750 "lpc.c"
    $2537 = (($2534) + ($2536<<2)|0); //@line 750 "lpc.c"
    $2538 = HEAP32[$2537>>2]|0; //@line 750 "lpc.c"
    $2539 = ($2538|0)<(0); //@line 750 "lpc.c"
    $2540 = $2539 << 31 >> 31; //@line 750 "lpc.c"
    $2541 = (___muldi3(($2531|0),($2533|0),($2538|0),($2540|0))|0); //@line 750 "lpc.c"
    $2542 = tempRet0; //@line 750 "lpc.c"
    $2543 = $13; //@line 750 "lpc.c"
    $2544 = $2543; //@line 750 "lpc.c"
    $2545 = HEAP32[$2544>>2]|0; //@line 750 "lpc.c"
    $2546 = (($2543) + 4)|0; //@line 750 "lpc.c"
    $2547 = $2546; //@line 750 "lpc.c"
    $2548 = HEAP32[$2547>>2]|0; //@line 750 "lpc.c"
    $2549 = (_i64Add(($2545|0),($2548|0),($2541|0),($2542|0))|0); //@line 750 "lpc.c"
    $2550 = tempRet0; //@line 750 "lpc.c"
    $2551 = $13; //@line 750 "lpc.c"
    $2552 = $2551; //@line 750 "lpc.c"
    HEAP32[$2552>>2] = $2549; //@line 750 "lpc.c"
    $2553 = (($2551) + 4)|0; //@line 750 "lpc.c"
    $2554 = $2553; //@line 750 "lpc.c"
    HEAP32[$2554>>2] = $2550; //@line 750 "lpc.c"
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $2555 = $8; //@line 751 "lpc.c"
    $2556 = ((($2555)) + 92|0); //@line 751 "lpc.c"
    $2557 = HEAP32[$2556>>2]|0; //@line 751 "lpc.c"
    $2558 = ($2557|0)<(0); //@line 751 "lpc.c"
    $2559 = $2558 << 31 >> 31; //@line 751 "lpc.c"
    $2560 = $6; //@line 751 "lpc.c"
    $2561 = $12; //@line 751 "lpc.c"
    $2562 = (($2561) - 24)|0; //@line 751 "lpc.c"
    $2563 = (($2560) + ($2562<<2)|0); //@line 751 "lpc.c"
    $2564 = HEAP32[$2563>>2]|0; //@line 751 "lpc.c"
    $2565 = ($2564|0)<(0); //@line 751 "lpc.c"
    $2566 = $2565 << 31 >> 31; //@line 751 "lpc.c"
    $2567 = (___muldi3(($2557|0),($2559|0),($2564|0),($2566|0))|0); //@line 751 "lpc.c"
    $2568 = tempRet0; //@line 751 "lpc.c"
    $2569 = $13; //@line 751 "lpc.c"
    $2570 = $2569; //@line 751 "lpc.c"
    $2571 = HEAP32[$2570>>2]|0; //@line 751 "lpc.c"
    $2572 = (($2569) + 4)|0; //@line 751 "lpc.c"
    $2573 = $2572; //@line 751 "lpc.c"
    $2574 = HEAP32[$2573>>2]|0; //@line 751 "lpc.c"
    $2575 = (_i64Add(($2571|0),($2574|0),($2567|0),($2568|0))|0); //@line 751 "lpc.c"
    $2576 = tempRet0; //@line 751 "lpc.c"
    $2577 = $13; //@line 751 "lpc.c"
    $2578 = $2577; //@line 751 "lpc.c"
    HEAP32[$2578>>2] = $2575; //@line 751 "lpc.c"
    $2579 = (($2577) + 4)|0; //@line 751 "lpc.c"
    $2580 = $2579; //@line 751 "lpc.c"
    HEAP32[$2580>>2] = $2576; //@line 751 "lpc.c"
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $2581 = $8; //@line 752 "lpc.c"
    $2582 = ((($2581)) + 88|0); //@line 752 "lpc.c"
    $2583 = HEAP32[$2582>>2]|0; //@line 752 "lpc.c"
    $2584 = ($2583|0)<(0); //@line 752 "lpc.c"
    $2585 = $2584 << 31 >> 31; //@line 752 "lpc.c"
    $2586 = $6; //@line 752 "lpc.c"
    $2587 = $12; //@line 752 "lpc.c"
    $2588 = (($2587) - 23)|0; //@line 752 "lpc.c"
    $2589 = (($2586) + ($2588<<2)|0); //@line 752 "lpc.c"
    $2590 = HEAP32[$2589>>2]|0; //@line 752 "lpc.c"
    $2591 = ($2590|0)<(0); //@line 752 "lpc.c"
    $2592 = $2591 << 31 >> 31; //@line 752 "lpc.c"
    $2593 = (___muldi3(($2583|0),($2585|0),($2590|0),($2592|0))|0); //@line 752 "lpc.c"
    $2594 = tempRet0; //@line 752 "lpc.c"
    $2595 = $13; //@line 752 "lpc.c"
    $2596 = $2595; //@line 752 "lpc.c"
    $2597 = HEAP32[$2596>>2]|0; //@line 752 "lpc.c"
    $2598 = (($2595) + 4)|0; //@line 752 "lpc.c"
    $2599 = $2598; //@line 752 "lpc.c"
    $2600 = HEAP32[$2599>>2]|0; //@line 752 "lpc.c"
    $2601 = (_i64Add(($2597|0),($2600|0),($2593|0),($2594|0))|0); //@line 752 "lpc.c"
    $2602 = tempRet0; //@line 752 "lpc.c"
    $2603 = $13; //@line 752 "lpc.c"
    $2604 = $2603; //@line 752 "lpc.c"
    HEAP32[$2604>>2] = $2601; //@line 752 "lpc.c"
    $2605 = (($2603) + 4)|0; //@line 752 "lpc.c"
    $2606 = $2605; //@line 752 "lpc.c"
    HEAP32[$2606>>2] = $2602; //@line 752 "lpc.c"
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $2607 = $8; //@line 753 "lpc.c"
    $2608 = ((($2607)) + 84|0); //@line 753 "lpc.c"
    $2609 = HEAP32[$2608>>2]|0; //@line 753 "lpc.c"
    $2610 = ($2609|0)<(0); //@line 753 "lpc.c"
    $2611 = $2610 << 31 >> 31; //@line 753 "lpc.c"
    $2612 = $6; //@line 753 "lpc.c"
    $2613 = $12; //@line 753 "lpc.c"
    $2614 = (($2613) - 22)|0; //@line 753 "lpc.c"
    $2615 = (($2612) + ($2614<<2)|0); //@line 753 "lpc.c"
    $2616 = HEAP32[$2615>>2]|0; //@line 753 "lpc.c"
    $2617 = ($2616|0)<(0); //@line 753 "lpc.c"
    $2618 = $2617 << 31 >> 31; //@line 753 "lpc.c"
    $2619 = (___muldi3(($2609|0),($2611|0),($2616|0),($2618|0))|0); //@line 753 "lpc.c"
    $2620 = tempRet0; //@line 753 "lpc.c"
    $2621 = $13; //@line 753 "lpc.c"
    $2622 = $2621; //@line 753 "lpc.c"
    $2623 = HEAP32[$2622>>2]|0; //@line 753 "lpc.c"
    $2624 = (($2621) + 4)|0; //@line 753 "lpc.c"
    $2625 = $2624; //@line 753 "lpc.c"
    $2626 = HEAP32[$2625>>2]|0; //@line 753 "lpc.c"
    $2627 = (_i64Add(($2623|0),($2626|0),($2619|0),($2620|0))|0); //@line 753 "lpc.c"
    $2628 = tempRet0; //@line 753 "lpc.c"
    $2629 = $13; //@line 753 "lpc.c"
    $2630 = $2629; //@line 753 "lpc.c"
    HEAP32[$2630>>2] = $2627; //@line 753 "lpc.c"
    $2631 = (($2629) + 4)|0; //@line 753 "lpc.c"
    $2632 = $2631; //@line 753 "lpc.c"
    HEAP32[$2632>>2] = $2628; //@line 753 "lpc.c"
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $2633 = $8; //@line 754 "lpc.c"
    $2634 = ((($2633)) + 80|0); //@line 754 "lpc.c"
    $2635 = HEAP32[$2634>>2]|0; //@line 754 "lpc.c"
    $2636 = ($2635|0)<(0); //@line 754 "lpc.c"
    $2637 = $2636 << 31 >> 31; //@line 754 "lpc.c"
    $2638 = $6; //@line 754 "lpc.c"
    $2639 = $12; //@line 754 "lpc.c"
    $2640 = (($2639) - 21)|0; //@line 754 "lpc.c"
    $2641 = (($2638) + ($2640<<2)|0); //@line 754 "lpc.c"
    $2642 = HEAP32[$2641>>2]|0; //@line 754 "lpc.c"
    $2643 = ($2642|0)<(0); //@line 754 "lpc.c"
    $2644 = $2643 << 31 >> 31; //@line 754 "lpc.c"
    $2645 = (___muldi3(($2635|0),($2637|0),($2642|0),($2644|0))|0); //@line 754 "lpc.c"
    $2646 = tempRet0; //@line 754 "lpc.c"
    $2647 = $13; //@line 754 "lpc.c"
    $2648 = $2647; //@line 754 "lpc.c"
    $2649 = HEAP32[$2648>>2]|0; //@line 754 "lpc.c"
    $2650 = (($2647) + 4)|0; //@line 754 "lpc.c"
    $2651 = $2650; //@line 754 "lpc.c"
    $2652 = HEAP32[$2651>>2]|0; //@line 754 "lpc.c"
    $2653 = (_i64Add(($2649|0),($2652|0),($2645|0),($2646|0))|0); //@line 754 "lpc.c"
    $2654 = tempRet0; //@line 754 "lpc.c"
    $2655 = $13; //@line 754 "lpc.c"
    $2656 = $2655; //@line 754 "lpc.c"
    HEAP32[$2656>>2] = $2653; //@line 754 "lpc.c"
    $2657 = (($2655) + 4)|0; //@line 754 "lpc.c"
    $2658 = $2657; //@line 754 "lpc.c"
    HEAP32[$2658>>2] = $2654; //@line 754 "lpc.c"
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $2659 = $8; //@line 755 "lpc.c"
    $2660 = ((($2659)) + 76|0); //@line 755 "lpc.c"
    $2661 = HEAP32[$2660>>2]|0; //@line 755 "lpc.c"
    $2662 = ($2661|0)<(0); //@line 755 "lpc.c"
    $2663 = $2662 << 31 >> 31; //@line 755 "lpc.c"
    $2664 = $6; //@line 755 "lpc.c"
    $2665 = $12; //@line 755 "lpc.c"
    $2666 = (($2665) - 20)|0; //@line 755 "lpc.c"
    $2667 = (($2664) + ($2666<<2)|0); //@line 755 "lpc.c"
    $2668 = HEAP32[$2667>>2]|0; //@line 755 "lpc.c"
    $2669 = ($2668|0)<(0); //@line 755 "lpc.c"
    $2670 = $2669 << 31 >> 31; //@line 755 "lpc.c"
    $2671 = (___muldi3(($2661|0),($2663|0),($2668|0),($2670|0))|0); //@line 755 "lpc.c"
    $2672 = tempRet0; //@line 755 "lpc.c"
    $2673 = $13; //@line 755 "lpc.c"
    $2674 = $2673; //@line 755 "lpc.c"
    $2675 = HEAP32[$2674>>2]|0; //@line 755 "lpc.c"
    $2676 = (($2673) + 4)|0; //@line 755 "lpc.c"
    $2677 = $2676; //@line 755 "lpc.c"
    $2678 = HEAP32[$2677>>2]|0; //@line 755 "lpc.c"
    $2679 = (_i64Add(($2675|0),($2678|0),($2671|0),($2672|0))|0); //@line 755 "lpc.c"
    $2680 = tempRet0; //@line 755 "lpc.c"
    $2681 = $13; //@line 755 "lpc.c"
    $2682 = $2681; //@line 755 "lpc.c"
    HEAP32[$2682>>2] = $2679; //@line 755 "lpc.c"
    $2683 = (($2681) + 4)|0; //@line 755 "lpc.c"
    $2684 = $2683; //@line 755 "lpc.c"
    HEAP32[$2684>>2] = $2680; //@line 755 "lpc.c"
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $2685 = $8; //@line 756 "lpc.c"
    $2686 = ((($2685)) + 72|0); //@line 756 "lpc.c"
    $2687 = HEAP32[$2686>>2]|0; //@line 756 "lpc.c"
    $2688 = ($2687|0)<(0); //@line 756 "lpc.c"
    $2689 = $2688 << 31 >> 31; //@line 756 "lpc.c"
    $2690 = $6; //@line 756 "lpc.c"
    $2691 = $12; //@line 756 "lpc.c"
    $2692 = (($2691) - 19)|0; //@line 756 "lpc.c"
    $2693 = (($2690) + ($2692<<2)|0); //@line 756 "lpc.c"
    $2694 = HEAP32[$2693>>2]|0; //@line 756 "lpc.c"
    $2695 = ($2694|0)<(0); //@line 756 "lpc.c"
    $2696 = $2695 << 31 >> 31; //@line 756 "lpc.c"
    $2697 = (___muldi3(($2687|0),($2689|0),($2694|0),($2696|0))|0); //@line 756 "lpc.c"
    $2698 = tempRet0; //@line 756 "lpc.c"
    $2699 = $13; //@line 756 "lpc.c"
    $2700 = $2699; //@line 756 "lpc.c"
    $2701 = HEAP32[$2700>>2]|0; //@line 756 "lpc.c"
    $2702 = (($2699) + 4)|0; //@line 756 "lpc.c"
    $2703 = $2702; //@line 756 "lpc.c"
    $2704 = HEAP32[$2703>>2]|0; //@line 756 "lpc.c"
    $2705 = (_i64Add(($2701|0),($2704|0),($2697|0),($2698|0))|0); //@line 756 "lpc.c"
    $2706 = tempRet0; //@line 756 "lpc.c"
    $2707 = $13; //@line 756 "lpc.c"
    $2708 = $2707; //@line 756 "lpc.c"
    HEAP32[$2708>>2] = $2705; //@line 756 "lpc.c"
    $2709 = (($2707) + 4)|0; //@line 756 "lpc.c"
    $2710 = $2709; //@line 756 "lpc.c"
    HEAP32[$2710>>2] = $2706; //@line 756 "lpc.c"
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $2711 = $8; //@line 757 "lpc.c"
    $2712 = ((($2711)) + 68|0); //@line 757 "lpc.c"
    $2713 = HEAP32[$2712>>2]|0; //@line 757 "lpc.c"
    $2714 = ($2713|0)<(0); //@line 757 "lpc.c"
    $2715 = $2714 << 31 >> 31; //@line 757 "lpc.c"
    $2716 = $6; //@line 757 "lpc.c"
    $2717 = $12; //@line 757 "lpc.c"
    $2718 = (($2717) - 18)|0; //@line 757 "lpc.c"
    $2719 = (($2716) + ($2718<<2)|0); //@line 757 "lpc.c"
    $2720 = HEAP32[$2719>>2]|0; //@line 757 "lpc.c"
    $2721 = ($2720|0)<(0); //@line 757 "lpc.c"
    $2722 = $2721 << 31 >> 31; //@line 757 "lpc.c"
    $2723 = (___muldi3(($2713|0),($2715|0),($2720|0),($2722|0))|0); //@line 757 "lpc.c"
    $2724 = tempRet0; //@line 757 "lpc.c"
    $2725 = $13; //@line 757 "lpc.c"
    $2726 = $2725; //@line 757 "lpc.c"
    $2727 = HEAP32[$2726>>2]|0; //@line 757 "lpc.c"
    $2728 = (($2725) + 4)|0; //@line 757 "lpc.c"
    $2729 = $2728; //@line 757 "lpc.c"
    $2730 = HEAP32[$2729>>2]|0; //@line 757 "lpc.c"
    $2731 = (_i64Add(($2727|0),($2730|0),($2723|0),($2724|0))|0); //@line 757 "lpc.c"
    $2732 = tempRet0; //@line 757 "lpc.c"
    $2733 = $13; //@line 757 "lpc.c"
    $2734 = $2733; //@line 757 "lpc.c"
    HEAP32[$2734>>2] = $2731; //@line 757 "lpc.c"
    $2735 = (($2733) + 4)|0; //@line 757 "lpc.c"
    $2736 = $2735; //@line 757 "lpc.c"
    HEAP32[$2736>>2] = $2732; //@line 757 "lpc.c"
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $2737 = $8; //@line 758 "lpc.c"
    $2738 = ((($2737)) + 64|0); //@line 758 "lpc.c"
    $2739 = HEAP32[$2738>>2]|0; //@line 758 "lpc.c"
    $2740 = ($2739|0)<(0); //@line 758 "lpc.c"
    $2741 = $2740 << 31 >> 31; //@line 758 "lpc.c"
    $2742 = $6; //@line 758 "lpc.c"
    $2743 = $12; //@line 758 "lpc.c"
    $2744 = (($2743) - 17)|0; //@line 758 "lpc.c"
    $2745 = (($2742) + ($2744<<2)|0); //@line 758 "lpc.c"
    $2746 = HEAP32[$2745>>2]|0; //@line 758 "lpc.c"
    $2747 = ($2746|0)<(0); //@line 758 "lpc.c"
    $2748 = $2747 << 31 >> 31; //@line 758 "lpc.c"
    $2749 = (___muldi3(($2739|0),($2741|0),($2746|0),($2748|0))|0); //@line 758 "lpc.c"
    $2750 = tempRet0; //@line 758 "lpc.c"
    $2751 = $13; //@line 758 "lpc.c"
    $2752 = $2751; //@line 758 "lpc.c"
    $2753 = HEAP32[$2752>>2]|0; //@line 758 "lpc.c"
    $2754 = (($2751) + 4)|0; //@line 758 "lpc.c"
    $2755 = $2754; //@line 758 "lpc.c"
    $2756 = HEAP32[$2755>>2]|0; //@line 758 "lpc.c"
    $2757 = (_i64Add(($2753|0),($2756|0),($2749|0),($2750|0))|0); //@line 758 "lpc.c"
    $2758 = tempRet0; //@line 758 "lpc.c"
    $2759 = $13; //@line 758 "lpc.c"
    $2760 = $2759; //@line 758 "lpc.c"
    HEAP32[$2760>>2] = $2757; //@line 758 "lpc.c"
    $2761 = (($2759) + 4)|0; //@line 758 "lpc.c"
    $2762 = $2761; //@line 758 "lpc.c"
    HEAP32[$2762>>2] = $2758; //@line 758 "lpc.c"
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $2763 = $8; //@line 759 "lpc.c"
    $2764 = ((($2763)) + 60|0); //@line 759 "lpc.c"
    $2765 = HEAP32[$2764>>2]|0; //@line 759 "lpc.c"
    $2766 = ($2765|0)<(0); //@line 759 "lpc.c"
    $2767 = $2766 << 31 >> 31; //@line 759 "lpc.c"
    $2768 = $6; //@line 759 "lpc.c"
    $2769 = $12; //@line 759 "lpc.c"
    $2770 = (($2769) - 16)|0; //@line 759 "lpc.c"
    $2771 = (($2768) + ($2770<<2)|0); //@line 759 "lpc.c"
    $2772 = HEAP32[$2771>>2]|0; //@line 759 "lpc.c"
    $2773 = ($2772|0)<(0); //@line 759 "lpc.c"
    $2774 = $2773 << 31 >> 31; //@line 759 "lpc.c"
    $2775 = (___muldi3(($2765|0),($2767|0),($2772|0),($2774|0))|0); //@line 759 "lpc.c"
    $2776 = tempRet0; //@line 759 "lpc.c"
    $2777 = $13; //@line 759 "lpc.c"
    $2778 = $2777; //@line 759 "lpc.c"
    $2779 = HEAP32[$2778>>2]|0; //@line 759 "lpc.c"
    $2780 = (($2777) + 4)|0; //@line 759 "lpc.c"
    $2781 = $2780; //@line 759 "lpc.c"
    $2782 = HEAP32[$2781>>2]|0; //@line 759 "lpc.c"
    $2783 = (_i64Add(($2779|0),($2782|0),($2775|0),($2776|0))|0); //@line 759 "lpc.c"
    $2784 = tempRet0; //@line 759 "lpc.c"
    $2785 = $13; //@line 759 "lpc.c"
    $2786 = $2785; //@line 759 "lpc.c"
    HEAP32[$2786>>2] = $2783; //@line 759 "lpc.c"
    $2787 = (($2785) + 4)|0; //@line 759 "lpc.c"
    $2788 = $2787; //@line 759 "lpc.c"
    HEAP32[$2788>>2] = $2784; //@line 759 "lpc.c"
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $2789 = $8; //@line 760 "lpc.c"
    $2790 = ((($2789)) + 56|0); //@line 760 "lpc.c"
    $2791 = HEAP32[$2790>>2]|0; //@line 760 "lpc.c"
    $2792 = ($2791|0)<(0); //@line 760 "lpc.c"
    $2793 = $2792 << 31 >> 31; //@line 760 "lpc.c"
    $2794 = $6; //@line 760 "lpc.c"
    $2795 = $12; //@line 760 "lpc.c"
    $2796 = (($2795) - 15)|0; //@line 760 "lpc.c"
    $2797 = (($2794) + ($2796<<2)|0); //@line 760 "lpc.c"
    $2798 = HEAP32[$2797>>2]|0; //@line 760 "lpc.c"
    $2799 = ($2798|0)<(0); //@line 760 "lpc.c"
    $2800 = $2799 << 31 >> 31; //@line 760 "lpc.c"
    $2801 = (___muldi3(($2791|0),($2793|0),($2798|0),($2800|0))|0); //@line 760 "lpc.c"
    $2802 = tempRet0; //@line 760 "lpc.c"
    $2803 = $13; //@line 760 "lpc.c"
    $2804 = $2803; //@line 760 "lpc.c"
    $2805 = HEAP32[$2804>>2]|0; //@line 760 "lpc.c"
    $2806 = (($2803) + 4)|0; //@line 760 "lpc.c"
    $2807 = $2806; //@line 760 "lpc.c"
    $2808 = HEAP32[$2807>>2]|0; //@line 760 "lpc.c"
    $2809 = (_i64Add(($2805|0),($2808|0),($2801|0),($2802|0))|0); //@line 760 "lpc.c"
    $2810 = tempRet0; //@line 760 "lpc.c"
    $2811 = $13; //@line 760 "lpc.c"
    $2812 = $2811; //@line 760 "lpc.c"
    HEAP32[$2812>>2] = $2809; //@line 760 "lpc.c"
    $2813 = (($2811) + 4)|0; //@line 760 "lpc.c"
    $2814 = $2813; //@line 760 "lpc.c"
    HEAP32[$2814>>2] = $2810; //@line 760 "lpc.c"
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $2815 = $8; //@line 761 "lpc.c"
    $2816 = ((($2815)) + 52|0); //@line 761 "lpc.c"
    $2817 = HEAP32[$2816>>2]|0; //@line 761 "lpc.c"
    $2818 = ($2817|0)<(0); //@line 761 "lpc.c"
    $2819 = $2818 << 31 >> 31; //@line 761 "lpc.c"
    $2820 = $6; //@line 761 "lpc.c"
    $2821 = $12; //@line 761 "lpc.c"
    $2822 = (($2821) - 14)|0; //@line 761 "lpc.c"
    $2823 = (($2820) + ($2822<<2)|0); //@line 761 "lpc.c"
    $2824 = HEAP32[$2823>>2]|0; //@line 761 "lpc.c"
    $2825 = ($2824|0)<(0); //@line 761 "lpc.c"
    $2826 = $2825 << 31 >> 31; //@line 761 "lpc.c"
    $2827 = (___muldi3(($2817|0),($2819|0),($2824|0),($2826|0))|0); //@line 761 "lpc.c"
    $2828 = tempRet0; //@line 761 "lpc.c"
    $2829 = $13; //@line 761 "lpc.c"
    $2830 = $2829; //@line 761 "lpc.c"
    $2831 = HEAP32[$2830>>2]|0; //@line 761 "lpc.c"
    $2832 = (($2829) + 4)|0; //@line 761 "lpc.c"
    $2833 = $2832; //@line 761 "lpc.c"
    $2834 = HEAP32[$2833>>2]|0; //@line 761 "lpc.c"
    $2835 = (_i64Add(($2831|0),($2834|0),($2827|0),($2828|0))|0); //@line 761 "lpc.c"
    $2836 = tempRet0; //@line 761 "lpc.c"
    $2837 = $13; //@line 761 "lpc.c"
    $2838 = $2837; //@line 761 "lpc.c"
    HEAP32[$2838>>2] = $2835; //@line 761 "lpc.c"
    $2839 = (($2837) + 4)|0; //@line 761 "lpc.c"
    $2840 = $2839; //@line 761 "lpc.c"
    HEAP32[$2840>>2] = $2836; //@line 761 "lpc.c"
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $2841 = $8; //@line 762 "lpc.c"
    $2842 = ((($2841)) + 48|0); //@line 762 "lpc.c"
    $2843 = HEAP32[$2842>>2]|0; //@line 762 "lpc.c"
    $2844 = ($2843|0)<(0); //@line 762 "lpc.c"
    $2845 = $2844 << 31 >> 31; //@line 762 "lpc.c"
    $2846 = $6; //@line 762 "lpc.c"
    $2847 = $12; //@line 762 "lpc.c"
    $2848 = (($2847) - 13)|0; //@line 762 "lpc.c"
    $2849 = (($2846) + ($2848<<2)|0); //@line 762 "lpc.c"
    $2850 = HEAP32[$2849>>2]|0; //@line 762 "lpc.c"
    $2851 = ($2850|0)<(0); //@line 762 "lpc.c"
    $2852 = $2851 << 31 >> 31; //@line 762 "lpc.c"
    $2853 = (___muldi3(($2843|0),($2845|0),($2850|0),($2852|0))|0); //@line 762 "lpc.c"
    $2854 = tempRet0; //@line 762 "lpc.c"
    $2855 = $13; //@line 762 "lpc.c"
    $2856 = $2855; //@line 762 "lpc.c"
    $2857 = HEAP32[$2856>>2]|0; //@line 762 "lpc.c"
    $2858 = (($2855) + 4)|0; //@line 762 "lpc.c"
    $2859 = $2858; //@line 762 "lpc.c"
    $2860 = HEAP32[$2859>>2]|0; //@line 762 "lpc.c"
    $2861 = (_i64Add(($2857|0),($2860|0),($2853|0),($2854|0))|0); //@line 762 "lpc.c"
    $2862 = tempRet0; //@line 762 "lpc.c"
    $2863 = $13; //@line 762 "lpc.c"
    $2864 = $2863; //@line 762 "lpc.c"
    HEAP32[$2864>>2] = $2861; //@line 762 "lpc.c"
    $2865 = (($2863) + 4)|0; //@line 762 "lpc.c"
    $2866 = $2865; //@line 762 "lpc.c"
    HEAP32[$2866>>2] = $2862; //@line 762 "lpc.c"
    $2867 = $8; //@line 763 "lpc.c"
    $2868 = ((($2867)) + 44|0); //@line 763 "lpc.c"
    $2869 = HEAP32[$2868>>2]|0; //@line 763 "lpc.c"
    $2870 = ($2869|0)<(0); //@line 763 "lpc.c"
    $2871 = $2870 << 31 >> 31; //@line 763 "lpc.c"
    $2872 = $6; //@line 763 "lpc.c"
    $2873 = $12; //@line 763 "lpc.c"
    $2874 = (($2873) - 12)|0; //@line 763 "lpc.c"
    $2875 = (($2872) + ($2874<<2)|0); //@line 763 "lpc.c"
    $2876 = HEAP32[$2875>>2]|0; //@line 763 "lpc.c"
    $2877 = ($2876|0)<(0); //@line 763 "lpc.c"
    $2878 = $2877 << 31 >> 31; //@line 763 "lpc.c"
    $2879 = (___muldi3(($2869|0),($2871|0),($2876|0),($2878|0))|0); //@line 763 "lpc.c"
    $2880 = tempRet0; //@line 763 "lpc.c"
    $2881 = $13; //@line 763 "lpc.c"
    $2882 = $2881; //@line 763 "lpc.c"
    $2883 = HEAP32[$2882>>2]|0; //@line 763 "lpc.c"
    $2884 = (($2881) + 4)|0; //@line 763 "lpc.c"
    $2885 = $2884; //@line 763 "lpc.c"
    $2886 = HEAP32[$2885>>2]|0; //@line 763 "lpc.c"
    $2887 = (_i64Add(($2883|0),($2886|0),($2879|0),($2880|0))|0); //@line 763 "lpc.c"
    $2888 = tempRet0; //@line 763 "lpc.c"
    $2889 = $13; //@line 763 "lpc.c"
    $2890 = $2889; //@line 763 "lpc.c"
    HEAP32[$2890>>2] = $2887; //@line 763 "lpc.c"
    $2891 = (($2889) + 4)|0; //@line 763 "lpc.c"
    $2892 = $2891; //@line 763 "lpc.c"
    HEAP32[$2892>>2] = $2888; //@line 763 "lpc.c"
    $2893 = $8; //@line 764 "lpc.c"
    $2894 = ((($2893)) + 40|0); //@line 764 "lpc.c"
    $2895 = HEAP32[$2894>>2]|0; //@line 764 "lpc.c"
    $2896 = ($2895|0)<(0); //@line 764 "lpc.c"
    $2897 = $2896 << 31 >> 31; //@line 764 "lpc.c"
    $2898 = $6; //@line 764 "lpc.c"
    $2899 = $12; //@line 764 "lpc.c"
    $2900 = (($2899) - 11)|0; //@line 764 "lpc.c"
    $2901 = (($2898) + ($2900<<2)|0); //@line 764 "lpc.c"
    $2902 = HEAP32[$2901>>2]|0; //@line 764 "lpc.c"
    $2903 = ($2902|0)<(0); //@line 764 "lpc.c"
    $2904 = $2903 << 31 >> 31; //@line 764 "lpc.c"
    $2905 = (___muldi3(($2895|0),($2897|0),($2902|0),($2904|0))|0); //@line 764 "lpc.c"
    $2906 = tempRet0; //@line 764 "lpc.c"
    $2907 = $13; //@line 764 "lpc.c"
    $2908 = $2907; //@line 764 "lpc.c"
    $2909 = HEAP32[$2908>>2]|0; //@line 764 "lpc.c"
    $2910 = (($2907) + 4)|0; //@line 764 "lpc.c"
    $2911 = $2910; //@line 764 "lpc.c"
    $2912 = HEAP32[$2911>>2]|0; //@line 764 "lpc.c"
    $2913 = (_i64Add(($2909|0),($2912|0),($2905|0),($2906|0))|0); //@line 764 "lpc.c"
    $2914 = tempRet0; //@line 764 "lpc.c"
    $2915 = $13; //@line 764 "lpc.c"
    $2916 = $2915; //@line 764 "lpc.c"
    HEAP32[$2916>>2] = $2913; //@line 764 "lpc.c"
    $2917 = (($2915) + 4)|0; //@line 764 "lpc.c"
    $2918 = $2917; //@line 764 "lpc.c"
    HEAP32[$2918>>2] = $2914; //@line 764 "lpc.c"
    $2919 = $8; //@line 765 "lpc.c"
    $2920 = ((($2919)) + 36|0); //@line 765 "lpc.c"
    $2921 = HEAP32[$2920>>2]|0; //@line 765 "lpc.c"
    $2922 = ($2921|0)<(0); //@line 765 "lpc.c"
    $2923 = $2922 << 31 >> 31; //@line 765 "lpc.c"
    $2924 = $6; //@line 765 "lpc.c"
    $2925 = $12; //@line 765 "lpc.c"
    $2926 = (($2925) - 10)|0; //@line 765 "lpc.c"
    $2927 = (($2924) + ($2926<<2)|0); //@line 765 "lpc.c"
    $2928 = HEAP32[$2927>>2]|0; //@line 765 "lpc.c"
    $2929 = ($2928|0)<(0); //@line 765 "lpc.c"
    $2930 = $2929 << 31 >> 31; //@line 765 "lpc.c"
    $2931 = (___muldi3(($2921|0),($2923|0),($2928|0),($2930|0))|0); //@line 765 "lpc.c"
    $2932 = tempRet0; //@line 765 "lpc.c"
    $2933 = $13; //@line 765 "lpc.c"
    $2934 = $2933; //@line 765 "lpc.c"
    $2935 = HEAP32[$2934>>2]|0; //@line 765 "lpc.c"
    $2936 = (($2933) + 4)|0; //@line 765 "lpc.c"
    $2937 = $2936; //@line 765 "lpc.c"
    $2938 = HEAP32[$2937>>2]|0; //@line 765 "lpc.c"
    $2939 = (_i64Add(($2935|0),($2938|0),($2931|0),($2932|0))|0); //@line 765 "lpc.c"
    $2940 = tempRet0; //@line 765 "lpc.c"
    $2941 = $13; //@line 765 "lpc.c"
    $2942 = $2941; //@line 765 "lpc.c"
    HEAP32[$2942>>2] = $2939; //@line 765 "lpc.c"
    $2943 = (($2941) + 4)|0; //@line 765 "lpc.c"
    $2944 = $2943; //@line 765 "lpc.c"
    HEAP32[$2944>>2] = $2940; //@line 765 "lpc.c"
    $2945 = $8; //@line 766 "lpc.c"
    $2946 = ((($2945)) + 32|0); //@line 766 "lpc.c"
    $2947 = HEAP32[$2946>>2]|0; //@line 766 "lpc.c"
    $2948 = ($2947|0)<(0); //@line 766 "lpc.c"
    $2949 = $2948 << 31 >> 31; //@line 766 "lpc.c"
    $2950 = $6; //@line 766 "lpc.c"
    $2951 = $12; //@line 766 "lpc.c"
    $2952 = (($2951) - 9)|0; //@line 766 "lpc.c"
    $2953 = (($2950) + ($2952<<2)|0); //@line 766 "lpc.c"
    $2954 = HEAP32[$2953>>2]|0; //@line 766 "lpc.c"
    $2955 = ($2954|0)<(0); //@line 766 "lpc.c"
    $2956 = $2955 << 31 >> 31; //@line 766 "lpc.c"
    $2957 = (___muldi3(($2947|0),($2949|0),($2954|0),($2956|0))|0); //@line 766 "lpc.c"
    $2958 = tempRet0; //@line 766 "lpc.c"
    $2959 = $13; //@line 766 "lpc.c"
    $2960 = $2959; //@line 766 "lpc.c"
    $2961 = HEAP32[$2960>>2]|0; //@line 766 "lpc.c"
    $2962 = (($2959) + 4)|0; //@line 766 "lpc.c"
    $2963 = $2962; //@line 766 "lpc.c"
    $2964 = HEAP32[$2963>>2]|0; //@line 766 "lpc.c"
    $2965 = (_i64Add(($2961|0),($2964|0),($2957|0),($2958|0))|0); //@line 766 "lpc.c"
    $2966 = tempRet0; //@line 766 "lpc.c"
    $2967 = $13; //@line 766 "lpc.c"
    $2968 = $2967; //@line 766 "lpc.c"
    HEAP32[$2968>>2] = $2965; //@line 766 "lpc.c"
    $2969 = (($2967) + 4)|0; //@line 766 "lpc.c"
    $2970 = $2969; //@line 766 "lpc.c"
    HEAP32[$2970>>2] = $2966; //@line 766 "lpc.c"
    $2971 = $8; //@line 767 "lpc.c"
    $2972 = ((($2971)) + 28|0); //@line 767 "lpc.c"
    $2973 = HEAP32[$2972>>2]|0; //@line 767 "lpc.c"
    $2974 = ($2973|0)<(0); //@line 767 "lpc.c"
    $2975 = $2974 << 31 >> 31; //@line 767 "lpc.c"
    $2976 = $6; //@line 767 "lpc.c"
    $2977 = $12; //@line 767 "lpc.c"
    $2978 = (($2977) - 8)|0; //@line 767 "lpc.c"
    $2979 = (($2976) + ($2978<<2)|0); //@line 767 "lpc.c"
    $2980 = HEAP32[$2979>>2]|0; //@line 767 "lpc.c"
    $2981 = ($2980|0)<(0); //@line 767 "lpc.c"
    $2982 = $2981 << 31 >> 31; //@line 767 "lpc.c"
    $2983 = (___muldi3(($2973|0),($2975|0),($2980|0),($2982|0))|0); //@line 767 "lpc.c"
    $2984 = tempRet0; //@line 767 "lpc.c"
    $2985 = $13; //@line 767 "lpc.c"
    $2986 = $2985; //@line 767 "lpc.c"
    $2987 = HEAP32[$2986>>2]|0; //@line 767 "lpc.c"
    $2988 = (($2985) + 4)|0; //@line 767 "lpc.c"
    $2989 = $2988; //@line 767 "lpc.c"
    $2990 = HEAP32[$2989>>2]|0; //@line 767 "lpc.c"
    $2991 = (_i64Add(($2987|0),($2990|0),($2983|0),($2984|0))|0); //@line 767 "lpc.c"
    $2992 = tempRet0; //@line 767 "lpc.c"
    $2993 = $13; //@line 767 "lpc.c"
    $2994 = $2993; //@line 767 "lpc.c"
    HEAP32[$2994>>2] = $2991; //@line 767 "lpc.c"
    $2995 = (($2993) + 4)|0; //@line 767 "lpc.c"
    $2996 = $2995; //@line 767 "lpc.c"
    HEAP32[$2996>>2] = $2992; //@line 767 "lpc.c"
    $2997 = $8; //@line 768 "lpc.c"
    $2998 = ((($2997)) + 24|0); //@line 768 "lpc.c"
    $2999 = HEAP32[$2998>>2]|0; //@line 768 "lpc.c"
    $3000 = ($2999|0)<(0); //@line 768 "lpc.c"
    $3001 = $3000 << 31 >> 31; //@line 768 "lpc.c"
    $3002 = $6; //@line 768 "lpc.c"
    $3003 = $12; //@line 768 "lpc.c"
    $3004 = (($3003) - 7)|0; //@line 768 "lpc.c"
    $3005 = (($3002) + ($3004<<2)|0); //@line 768 "lpc.c"
    $3006 = HEAP32[$3005>>2]|0; //@line 768 "lpc.c"
    $3007 = ($3006|0)<(0); //@line 768 "lpc.c"
    $3008 = $3007 << 31 >> 31; //@line 768 "lpc.c"
    $3009 = (___muldi3(($2999|0),($3001|0),($3006|0),($3008|0))|0); //@line 768 "lpc.c"
    $3010 = tempRet0; //@line 768 "lpc.c"
    $3011 = $13; //@line 768 "lpc.c"
    $3012 = $3011; //@line 768 "lpc.c"
    $3013 = HEAP32[$3012>>2]|0; //@line 768 "lpc.c"
    $3014 = (($3011) + 4)|0; //@line 768 "lpc.c"
    $3015 = $3014; //@line 768 "lpc.c"
    $3016 = HEAP32[$3015>>2]|0; //@line 768 "lpc.c"
    $3017 = (_i64Add(($3013|0),($3016|0),($3009|0),($3010|0))|0); //@line 768 "lpc.c"
    $3018 = tempRet0; //@line 768 "lpc.c"
    $3019 = $13; //@line 768 "lpc.c"
    $3020 = $3019; //@line 768 "lpc.c"
    HEAP32[$3020>>2] = $3017; //@line 768 "lpc.c"
    $3021 = (($3019) + 4)|0; //@line 768 "lpc.c"
    $3022 = $3021; //@line 768 "lpc.c"
    HEAP32[$3022>>2] = $3018; //@line 768 "lpc.c"
    $3023 = $8; //@line 769 "lpc.c"
    $3024 = ((($3023)) + 20|0); //@line 769 "lpc.c"
    $3025 = HEAP32[$3024>>2]|0; //@line 769 "lpc.c"
    $3026 = ($3025|0)<(0); //@line 769 "lpc.c"
    $3027 = $3026 << 31 >> 31; //@line 769 "lpc.c"
    $3028 = $6; //@line 769 "lpc.c"
    $3029 = $12; //@line 769 "lpc.c"
    $3030 = (($3029) - 6)|0; //@line 769 "lpc.c"
    $3031 = (($3028) + ($3030<<2)|0); //@line 769 "lpc.c"
    $3032 = HEAP32[$3031>>2]|0; //@line 769 "lpc.c"
    $3033 = ($3032|0)<(0); //@line 769 "lpc.c"
    $3034 = $3033 << 31 >> 31; //@line 769 "lpc.c"
    $3035 = (___muldi3(($3025|0),($3027|0),($3032|0),($3034|0))|0); //@line 769 "lpc.c"
    $3036 = tempRet0; //@line 769 "lpc.c"
    $3037 = $13; //@line 769 "lpc.c"
    $3038 = $3037; //@line 769 "lpc.c"
    $3039 = HEAP32[$3038>>2]|0; //@line 769 "lpc.c"
    $3040 = (($3037) + 4)|0; //@line 769 "lpc.c"
    $3041 = $3040; //@line 769 "lpc.c"
    $3042 = HEAP32[$3041>>2]|0; //@line 769 "lpc.c"
    $3043 = (_i64Add(($3039|0),($3042|0),($3035|0),($3036|0))|0); //@line 769 "lpc.c"
    $3044 = tempRet0; //@line 769 "lpc.c"
    $3045 = $13; //@line 769 "lpc.c"
    $3046 = $3045; //@line 769 "lpc.c"
    HEAP32[$3046>>2] = $3043; //@line 769 "lpc.c"
    $3047 = (($3045) + 4)|0; //@line 769 "lpc.c"
    $3048 = $3047; //@line 769 "lpc.c"
    HEAP32[$3048>>2] = $3044; //@line 769 "lpc.c"
    $3049 = $8; //@line 770 "lpc.c"
    $3050 = ((($3049)) + 16|0); //@line 770 "lpc.c"
    $3051 = HEAP32[$3050>>2]|0; //@line 770 "lpc.c"
    $3052 = ($3051|0)<(0); //@line 770 "lpc.c"
    $3053 = $3052 << 31 >> 31; //@line 770 "lpc.c"
    $3054 = $6; //@line 770 "lpc.c"
    $3055 = $12; //@line 770 "lpc.c"
    $3056 = (($3055) - 5)|0; //@line 770 "lpc.c"
    $3057 = (($3054) + ($3056<<2)|0); //@line 770 "lpc.c"
    $3058 = HEAP32[$3057>>2]|0; //@line 770 "lpc.c"
    $3059 = ($3058|0)<(0); //@line 770 "lpc.c"
    $3060 = $3059 << 31 >> 31; //@line 770 "lpc.c"
    $3061 = (___muldi3(($3051|0),($3053|0),($3058|0),($3060|0))|0); //@line 770 "lpc.c"
    $3062 = tempRet0; //@line 770 "lpc.c"
    $3063 = $13; //@line 770 "lpc.c"
    $3064 = $3063; //@line 770 "lpc.c"
    $3065 = HEAP32[$3064>>2]|0; //@line 770 "lpc.c"
    $3066 = (($3063) + 4)|0; //@line 770 "lpc.c"
    $3067 = $3066; //@line 770 "lpc.c"
    $3068 = HEAP32[$3067>>2]|0; //@line 770 "lpc.c"
    $3069 = (_i64Add(($3065|0),($3068|0),($3061|0),($3062|0))|0); //@line 770 "lpc.c"
    $3070 = tempRet0; //@line 770 "lpc.c"
    $3071 = $13; //@line 770 "lpc.c"
    $3072 = $3071; //@line 770 "lpc.c"
    HEAP32[$3072>>2] = $3069; //@line 770 "lpc.c"
    $3073 = (($3071) + 4)|0; //@line 770 "lpc.c"
    $3074 = $3073; //@line 770 "lpc.c"
    HEAP32[$3074>>2] = $3070; //@line 770 "lpc.c"
    $3075 = $8; //@line 771 "lpc.c"
    $3076 = ((($3075)) + 12|0); //@line 771 "lpc.c"
    $3077 = HEAP32[$3076>>2]|0; //@line 771 "lpc.c"
    $3078 = ($3077|0)<(0); //@line 771 "lpc.c"
    $3079 = $3078 << 31 >> 31; //@line 771 "lpc.c"
    $3080 = $6; //@line 771 "lpc.c"
    $3081 = $12; //@line 771 "lpc.c"
    $3082 = (($3081) - 4)|0; //@line 771 "lpc.c"
    $3083 = (($3080) + ($3082<<2)|0); //@line 771 "lpc.c"
    $3084 = HEAP32[$3083>>2]|0; //@line 771 "lpc.c"
    $3085 = ($3084|0)<(0); //@line 771 "lpc.c"
    $3086 = $3085 << 31 >> 31; //@line 771 "lpc.c"
    $3087 = (___muldi3(($3077|0),($3079|0),($3084|0),($3086|0))|0); //@line 771 "lpc.c"
    $3088 = tempRet0; //@line 771 "lpc.c"
    $3089 = $13; //@line 771 "lpc.c"
    $3090 = $3089; //@line 771 "lpc.c"
    $3091 = HEAP32[$3090>>2]|0; //@line 771 "lpc.c"
    $3092 = (($3089) + 4)|0; //@line 771 "lpc.c"
    $3093 = $3092; //@line 771 "lpc.c"
    $3094 = HEAP32[$3093>>2]|0; //@line 771 "lpc.c"
    $3095 = (_i64Add(($3091|0),($3094|0),($3087|0),($3088|0))|0); //@line 771 "lpc.c"
    $3096 = tempRet0; //@line 771 "lpc.c"
    $3097 = $13; //@line 771 "lpc.c"
    $3098 = $3097; //@line 771 "lpc.c"
    HEAP32[$3098>>2] = $3095; //@line 771 "lpc.c"
    $3099 = (($3097) + 4)|0; //@line 771 "lpc.c"
    $3100 = $3099; //@line 771 "lpc.c"
    HEAP32[$3100>>2] = $3096; //@line 771 "lpc.c"
    $3101 = $8; //@line 772 "lpc.c"
    $3102 = ((($3101)) + 8|0); //@line 772 "lpc.c"
    $3103 = HEAP32[$3102>>2]|0; //@line 772 "lpc.c"
    $3104 = ($3103|0)<(0); //@line 772 "lpc.c"
    $3105 = $3104 << 31 >> 31; //@line 772 "lpc.c"
    $3106 = $6; //@line 772 "lpc.c"
    $3107 = $12; //@line 772 "lpc.c"
    $3108 = (($3107) - 3)|0; //@line 772 "lpc.c"
    $3109 = (($3106) + ($3108<<2)|0); //@line 772 "lpc.c"
    $3110 = HEAP32[$3109>>2]|0; //@line 772 "lpc.c"
    $3111 = ($3110|0)<(0); //@line 772 "lpc.c"
    $3112 = $3111 << 31 >> 31; //@line 772 "lpc.c"
    $3113 = (___muldi3(($3103|0),($3105|0),($3110|0),($3112|0))|0); //@line 772 "lpc.c"
    $3114 = tempRet0; //@line 772 "lpc.c"
    $3115 = $13; //@line 772 "lpc.c"
    $3116 = $3115; //@line 772 "lpc.c"
    $3117 = HEAP32[$3116>>2]|0; //@line 772 "lpc.c"
    $3118 = (($3115) + 4)|0; //@line 772 "lpc.c"
    $3119 = $3118; //@line 772 "lpc.c"
    $3120 = HEAP32[$3119>>2]|0; //@line 772 "lpc.c"
    $3121 = (_i64Add(($3117|0),($3120|0),($3113|0),($3114|0))|0); //@line 772 "lpc.c"
    $3122 = tempRet0; //@line 772 "lpc.c"
    $3123 = $13; //@line 772 "lpc.c"
    $3124 = $3123; //@line 772 "lpc.c"
    HEAP32[$3124>>2] = $3121; //@line 772 "lpc.c"
    $3125 = (($3123) + 4)|0; //@line 772 "lpc.c"
    $3126 = $3125; //@line 772 "lpc.c"
    HEAP32[$3126>>2] = $3122; //@line 772 "lpc.c"
    $3127 = $8; //@line 773 "lpc.c"
    $3128 = ((($3127)) + 4|0); //@line 773 "lpc.c"
    $3129 = HEAP32[$3128>>2]|0; //@line 773 "lpc.c"
    $3130 = ($3129|0)<(0); //@line 773 "lpc.c"
    $3131 = $3130 << 31 >> 31; //@line 773 "lpc.c"
    $3132 = $6; //@line 773 "lpc.c"
    $3133 = $12; //@line 773 "lpc.c"
    $3134 = (($3133) - 2)|0; //@line 773 "lpc.c"
    $3135 = (($3132) + ($3134<<2)|0); //@line 773 "lpc.c"
    $3136 = HEAP32[$3135>>2]|0; //@line 773 "lpc.c"
    $3137 = ($3136|0)<(0); //@line 773 "lpc.c"
    $3138 = $3137 << 31 >> 31; //@line 773 "lpc.c"
    $3139 = (___muldi3(($3129|0),($3131|0),($3136|0),($3138|0))|0); //@line 773 "lpc.c"
    $3140 = tempRet0; //@line 773 "lpc.c"
    $3141 = $13; //@line 773 "lpc.c"
    $3142 = $3141; //@line 773 "lpc.c"
    $3143 = HEAP32[$3142>>2]|0; //@line 773 "lpc.c"
    $3144 = (($3141) + 4)|0; //@line 773 "lpc.c"
    $3145 = $3144; //@line 773 "lpc.c"
    $3146 = HEAP32[$3145>>2]|0; //@line 773 "lpc.c"
    $3147 = (_i64Add(($3143|0),($3146|0),($3139|0),($3140|0))|0); //@line 773 "lpc.c"
    $3148 = tempRet0; //@line 773 "lpc.c"
    $3149 = $13; //@line 773 "lpc.c"
    $3150 = $3149; //@line 773 "lpc.c"
    HEAP32[$3150>>2] = $3147; //@line 773 "lpc.c"
    $3151 = (($3149) + 4)|0; //@line 773 "lpc.c"
    $3152 = $3151; //@line 773 "lpc.c"
    HEAP32[$3152>>2] = $3148; //@line 773 "lpc.c"
    $3153 = $8; //@line 774 "lpc.c"
    $3154 = HEAP32[$3153>>2]|0; //@line 774 "lpc.c"
    $3155 = ($3154|0)<(0); //@line 774 "lpc.c"
    $3156 = $3155 << 31 >> 31; //@line 774 "lpc.c"
    $3157 = $6; //@line 774 "lpc.c"
    $3158 = $12; //@line 774 "lpc.c"
    $3159 = (($3158) - 1)|0; //@line 774 "lpc.c"
    $3160 = (($3157) + ($3159<<2)|0); //@line 774 "lpc.c"
    $3161 = HEAP32[$3160>>2]|0; //@line 774 "lpc.c"
    $3162 = ($3161|0)<(0); //@line 774 "lpc.c"
    $3163 = $3162 << 31 >> 31; //@line 774 "lpc.c"
    $3164 = (___muldi3(($3154|0),($3156|0),($3161|0),($3163|0))|0); //@line 774 "lpc.c"
    $3165 = tempRet0; //@line 774 "lpc.c"
    $3166 = $13; //@line 774 "lpc.c"
    $3167 = $3166; //@line 774 "lpc.c"
    $3168 = HEAP32[$3167>>2]|0; //@line 774 "lpc.c"
    $3169 = (($3166) + 4)|0; //@line 774 "lpc.c"
    $3170 = $3169; //@line 774 "lpc.c"
    $3171 = HEAP32[$3170>>2]|0; //@line 774 "lpc.c"
    $3172 = (_i64Add(($3168|0),($3171|0),($3164|0),($3165|0))|0); //@line 774 "lpc.c"
    $3173 = tempRet0; //@line 774 "lpc.c"
    $3174 = $13; //@line 774 "lpc.c"
    $3175 = $3174; //@line 774 "lpc.c"
    HEAP32[$3175>>2] = $3172; //@line 774 "lpc.c"
    $3176 = (($3174) + 4)|0; //@line 774 "lpc.c"
    $3177 = $3176; //@line 774 "lpc.c"
    HEAP32[$3177>>2] = $3173; //@line 774 "lpc.c"
   }
   $3178 = $6; //@line 776 "lpc.c"
   $3179 = $12; //@line 776 "lpc.c"
   $3180 = (($3178) + ($3179<<2)|0); //@line 776 "lpc.c"
   $3181 = HEAP32[$3180>>2]|0; //@line 776 "lpc.c"
   $3182 = $13; //@line 776 "lpc.c"
   $3183 = $3182; //@line 776 "lpc.c"
   $3184 = HEAP32[$3183>>2]|0; //@line 776 "lpc.c"
   $3185 = (($3182) + 4)|0; //@line 776 "lpc.c"
   $3186 = $3185; //@line 776 "lpc.c"
   $3187 = HEAP32[$3186>>2]|0; //@line 776 "lpc.c"
   $3188 = $10; //@line 776 "lpc.c"
   $3189 = (_bitshift64Ashr(($3184|0),($3187|0),($3188|0))|0); //@line 776 "lpc.c"
   $3190 = tempRet0; //@line 776 "lpc.c"
   $3191 = (($3181) - ($3189))|0; //@line 776 "lpc.c"
   $3192 = $11; //@line 776 "lpc.c"
   $3193 = $12; //@line 776 "lpc.c"
   $3194 = (($3192) + ($3193<<2)|0); //@line 776 "lpc.c"
   HEAP32[$3194>>2] = $3191; //@line 776 "lpc.c"
   $3195 = $12; //@line 740 "lpc.c"
   $3196 = (($3195) + 1)|0; //@line 740 "lpc.c"
   $12 = $3196; //@line 740 "lpc.c"
  }
  STACKTOP = sp;return; //@line 779 "lpc.c"
 }
 $16 = $9; //@line 573 "lpc.c"
 $17 = ($16>>>0)>(8); //@line 573 "lpc.c"
 $18 = $9;
 if ($17) {
  $19 = ($18>>>0)>(10); //@line 574 "lpc.c"
  $20 = $9;
  if ($19) {
   $21 = ($20|0)==(12); //@line 575 "lpc.c"
   $12 = 0;
   if ($21) {
    while(1) {
     $22 = $12; //@line 576 "lpc.c"
     $23 = $7; //@line 576 "lpc.c"
     $24 = ($22|0)<($23|0); //@line 576 "lpc.c"
     if (!($24)) {
      break;
     }
     $25 = $13; //@line 577 "lpc.c"
     $26 = $25; //@line 577 "lpc.c"
     HEAP32[$26>>2] = 0; //@line 577 "lpc.c"
     $27 = (($25) + 4)|0; //@line 577 "lpc.c"
     $28 = $27; //@line 577 "lpc.c"
     HEAP32[$28>>2] = 0; //@line 577 "lpc.c"
     $29 = $8; //@line 578 "lpc.c"
     $30 = ((($29)) + 44|0); //@line 578 "lpc.c"
     $31 = HEAP32[$30>>2]|0; //@line 578 "lpc.c"
     $32 = ($31|0)<(0); //@line 578 "lpc.c"
     $33 = $32 << 31 >> 31; //@line 578 "lpc.c"
     $34 = $6; //@line 578 "lpc.c"
     $35 = $12; //@line 578 "lpc.c"
     $36 = (($35) - 12)|0; //@line 578 "lpc.c"
     $37 = (($34) + ($36<<2)|0); //@line 578 "lpc.c"
     $38 = HEAP32[$37>>2]|0; //@line 578 "lpc.c"
     $39 = ($38|0)<(0); //@line 578 "lpc.c"
     $40 = $39 << 31 >> 31; //@line 578 "lpc.c"
     $41 = (___muldi3(($31|0),($33|0),($38|0),($40|0))|0); //@line 578 "lpc.c"
     $42 = tempRet0; //@line 578 "lpc.c"
     $43 = $13; //@line 578 "lpc.c"
     $44 = $43; //@line 578 "lpc.c"
     $45 = HEAP32[$44>>2]|0; //@line 578 "lpc.c"
     $46 = (($43) + 4)|0; //@line 578 "lpc.c"
     $47 = $46; //@line 578 "lpc.c"
     $48 = HEAP32[$47>>2]|0; //@line 578 "lpc.c"
     $49 = (_i64Add(($45|0),($48|0),($41|0),($42|0))|0); //@line 578 "lpc.c"
     $50 = tempRet0; //@line 578 "lpc.c"
     $51 = $13; //@line 578 "lpc.c"
     $52 = $51; //@line 578 "lpc.c"
     HEAP32[$52>>2] = $49; //@line 578 "lpc.c"
     $53 = (($51) + 4)|0; //@line 578 "lpc.c"
     $54 = $53; //@line 578 "lpc.c"
     HEAP32[$54>>2] = $50; //@line 578 "lpc.c"
     $55 = $8; //@line 579 "lpc.c"
     $56 = ((($55)) + 40|0); //@line 579 "lpc.c"
     $57 = HEAP32[$56>>2]|0; //@line 579 "lpc.c"
     $58 = ($57|0)<(0); //@line 579 "lpc.c"
     $59 = $58 << 31 >> 31; //@line 579 "lpc.c"
     $60 = $6; //@line 579 "lpc.c"
     $61 = $12; //@line 579 "lpc.c"
     $62 = (($61) - 11)|0; //@line 579 "lpc.c"
     $63 = (($60) + ($62<<2)|0); //@line 579 "lpc.c"
     $64 = HEAP32[$63>>2]|0; //@line 579 "lpc.c"
     $65 = ($64|0)<(0); //@line 579 "lpc.c"
     $66 = $65 << 31 >> 31; //@line 579 "lpc.c"
     $67 = (___muldi3(($57|0),($59|0),($64|0),($66|0))|0); //@line 579 "lpc.c"
     $68 = tempRet0; //@line 579 "lpc.c"
     $69 = $13; //@line 579 "lpc.c"
     $70 = $69; //@line 579 "lpc.c"
     $71 = HEAP32[$70>>2]|0; //@line 579 "lpc.c"
     $72 = (($69) + 4)|0; //@line 579 "lpc.c"
     $73 = $72; //@line 579 "lpc.c"
     $74 = HEAP32[$73>>2]|0; //@line 579 "lpc.c"
     $75 = (_i64Add(($71|0),($74|0),($67|0),($68|0))|0); //@line 579 "lpc.c"
     $76 = tempRet0; //@line 579 "lpc.c"
     $77 = $13; //@line 579 "lpc.c"
     $78 = $77; //@line 579 "lpc.c"
     HEAP32[$78>>2] = $75; //@line 579 "lpc.c"
     $79 = (($77) + 4)|0; //@line 579 "lpc.c"
     $80 = $79; //@line 579 "lpc.c"
     HEAP32[$80>>2] = $76; //@line 579 "lpc.c"
     $81 = $8; //@line 580 "lpc.c"
     $82 = ((($81)) + 36|0); //@line 580 "lpc.c"
     $83 = HEAP32[$82>>2]|0; //@line 580 "lpc.c"
     $84 = ($83|0)<(0); //@line 580 "lpc.c"
     $85 = $84 << 31 >> 31; //@line 580 "lpc.c"
     $86 = $6; //@line 580 "lpc.c"
     $87 = $12; //@line 580 "lpc.c"
     $88 = (($87) - 10)|0; //@line 580 "lpc.c"
     $89 = (($86) + ($88<<2)|0); //@line 580 "lpc.c"
     $90 = HEAP32[$89>>2]|0; //@line 580 "lpc.c"
     $91 = ($90|0)<(0); //@line 580 "lpc.c"
     $92 = $91 << 31 >> 31; //@line 580 "lpc.c"
     $93 = (___muldi3(($83|0),($85|0),($90|0),($92|0))|0); //@line 580 "lpc.c"
     $94 = tempRet0; //@line 580 "lpc.c"
     $95 = $13; //@line 580 "lpc.c"
     $96 = $95; //@line 580 "lpc.c"
     $97 = HEAP32[$96>>2]|0; //@line 580 "lpc.c"
     $98 = (($95) + 4)|0; //@line 580 "lpc.c"
     $99 = $98; //@line 580 "lpc.c"
     $100 = HEAP32[$99>>2]|0; //@line 580 "lpc.c"
     $101 = (_i64Add(($97|0),($100|0),($93|0),($94|0))|0); //@line 580 "lpc.c"
     $102 = tempRet0; //@line 580 "lpc.c"
     $103 = $13; //@line 580 "lpc.c"
     $104 = $103; //@line 580 "lpc.c"
     HEAP32[$104>>2] = $101; //@line 580 "lpc.c"
     $105 = (($103) + 4)|0; //@line 580 "lpc.c"
     $106 = $105; //@line 580 "lpc.c"
     HEAP32[$106>>2] = $102; //@line 580 "lpc.c"
     $107 = $8; //@line 581 "lpc.c"
     $108 = ((($107)) + 32|0); //@line 581 "lpc.c"
     $109 = HEAP32[$108>>2]|0; //@line 581 "lpc.c"
     $110 = ($109|0)<(0); //@line 581 "lpc.c"
     $111 = $110 << 31 >> 31; //@line 581 "lpc.c"
     $112 = $6; //@line 581 "lpc.c"
     $113 = $12; //@line 581 "lpc.c"
     $114 = (($113) - 9)|0; //@line 581 "lpc.c"
     $115 = (($112) + ($114<<2)|0); //@line 581 "lpc.c"
     $116 = HEAP32[$115>>2]|0; //@line 581 "lpc.c"
     $117 = ($116|0)<(0); //@line 581 "lpc.c"
     $118 = $117 << 31 >> 31; //@line 581 "lpc.c"
     $119 = (___muldi3(($109|0),($111|0),($116|0),($118|0))|0); //@line 581 "lpc.c"
     $120 = tempRet0; //@line 581 "lpc.c"
     $121 = $13; //@line 581 "lpc.c"
     $122 = $121; //@line 581 "lpc.c"
     $123 = HEAP32[$122>>2]|0; //@line 581 "lpc.c"
     $124 = (($121) + 4)|0; //@line 581 "lpc.c"
     $125 = $124; //@line 581 "lpc.c"
     $126 = HEAP32[$125>>2]|0; //@line 581 "lpc.c"
     $127 = (_i64Add(($123|0),($126|0),($119|0),($120|0))|0); //@line 581 "lpc.c"
     $128 = tempRet0; //@line 581 "lpc.c"
     $129 = $13; //@line 581 "lpc.c"
     $130 = $129; //@line 581 "lpc.c"
     HEAP32[$130>>2] = $127; //@line 581 "lpc.c"
     $131 = (($129) + 4)|0; //@line 581 "lpc.c"
     $132 = $131; //@line 581 "lpc.c"
     HEAP32[$132>>2] = $128; //@line 581 "lpc.c"
     $133 = $8; //@line 582 "lpc.c"
     $134 = ((($133)) + 28|0); //@line 582 "lpc.c"
     $135 = HEAP32[$134>>2]|0; //@line 582 "lpc.c"
     $136 = ($135|0)<(0); //@line 582 "lpc.c"
     $137 = $136 << 31 >> 31; //@line 582 "lpc.c"
     $138 = $6; //@line 582 "lpc.c"
     $139 = $12; //@line 582 "lpc.c"
     $140 = (($139) - 8)|0; //@line 582 "lpc.c"
     $141 = (($138) + ($140<<2)|0); //@line 582 "lpc.c"
     $142 = HEAP32[$141>>2]|0; //@line 582 "lpc.c"
     $143 = ($142|0)<(0); //@line 582 "lpc.c"
     $144 = $143 << 31 >> 31; //@line 582 "lpc.c"
     $145 = (___muldi3(($135|0),($137|0),($142|0),($144|0))|0); //@line 582 "lpc.c"
     $146 = tempRet0; //@line 582 "lpc.c"
     $147 = $13; //@line 582 "lpc.c"
     $148 = $147; //@line 582 "lpc.c"
     $149 = HEAP32[$148>>2]|0; //@line 582 "lpc.c"
     $150 = (($147) + 4)|0; //@line 582 "lpc.c"
     $151 = $150; //@line 582 "lpc.c"
     $152 = HEAP32[$151>>2]|0; //@line 582 "lpc.c"
     $153 = (_i64Add(($149|0),($152|0),($145|0),($146|0))|0); //@line 582 "lpc.c"
     $154 = tempRet0; //@line 582 "lpc.c"
     $155 = $13; //@line 582 "lpc.c"
     $156 = $155; //@line 582 "lpc.c"
     HEAP32[$156>>2] = $153; //@line 582 "lpc.c"
     $157 = (($155) + 4)|0; //@line 582 "lpc.c"
     $158 = $157; //@line 582 "lpc.c"
     HEAP32[$158>>2] = $154; //@line 582 "lpc.c"
     $159 = $8; //@line 583 "lpc.c"
     $160 = ((($159)) + 24|0); //@line 583 "lpc.c"
     $161 = HEAP32[$160>>2]|0; //@line 583 "lpc.c"
     $162 = ($161|0)<(0); //@line 583 "lpc.c"
     $163 = $162 << 31 >> 31; //@line 583 "lpc.c"
     $164 = $6; //@line 583 "lpc.c"
     $165 = $12; //@line 583 "lpc.c"
     $166 = (($165) - 7)|0; //@line 583 "lpc.c"
     $167 = (($164) + ($166<<2)|0); //@line 583 "lpc.c"
     $168 = HEAP32[$167>>2]|0; //@line 583 "lpc.c"
     $169 = ($168|0)<(0); //@line 583 "lpc.c"
     $170 = $169 << 31 >> 31; //@line 583 "lpc.c"
     $171 = (___muldi3(($161|0),($163|0),($168|0),($170|0))|0); //@line 583 "lpc.c"
     $172 = tempRet0; //@line 583 "lpc.c"
     $173 = $13; //@line 583 "lpc.c"
     $174 = $173; //@line 583 "lpc.c"
     $175 = HEAP32[$174>>2]|0; //@line 583 "lpc.c"
     $176 = (($173) + 4)|0; //@line 583 "lpc.c"
     $177 = $176; //@line 583 "lpc.c"
     $178 = HEAP32[$177>>2]|0; //@line 583 "lpc.c"
     $179 = (_i64Add(($175|0),($178|0),($171|0),($172|0))|0); //@line 583 "lpc.c"
     $180 = tempRet0; //@line 583 "lpc.c"
     $181 = $13; //@line 583 "lpc.c"
     $182 = $181; //@line 583 "lpc.c"
     HEAP32[$182>>2] = $179; //@line 583 "lpc.c"
     $183 = (($181) + 4)|0; //@line 583 "lpc.c"
     $184 = $183; //@line 583 "lpc.c"
     HEAP32[$184>>2] = $180; //@line 583 "lpc.c"
     $185 = $8; //@line 584 "lpc.c"
     $186 = ((($185)) + 20|0); //@line 584 "lpc.c"
     $187 = HEAP32[$186>>2]|0; //@line 584 "lpc.c"
     $188 = ($187|0)<(0); //@line 584 "lpc.c"
     $189 = $188 << 31 >> 31; //@line 584 "lpc.c"
     $190 = $6; //@line 584 "lpc.c"
     $191 = $12; //@line 584 "lpc.c"
     $192 = (($191) - 6)|0; //@line 584 "lpc.c"
     $193 = (($190) + ($192<<2)|0); //@line 584 "lpc.c"
     $194 = HEAP32[$193>>2]|0; //@line 584 "lpc.c"
     $195 = ($194|0)<(0); //@line 584 "lpc.c"
     $196 = $195 << 31 >> 31; //@line 584 "lpc.c"
     $197 = (___muldi3(($187|0),($189|0),($194|0),($196|0))|0); //@line 584 "lpc.c"
     $198 = tempRet0; //@line 584 "lpc.c"
     $199 = $13; //@line 584 "lpc.c"
     $200 = $199; //@line 584 "lpc.c"
     $201 = HEAP32[$200>>2]|0; //@line 584 "lpc.c"
     $202 = (($199) + 4)|0; //@line 584 "lpc.c"
     $203 = $202; //@line 584 "lpc.c"
     $204 = HEAP32[$203>>2]|0; //@line 584 "lpc.c"
     $205 = (_i64Add(($201|0),($204|0),($197|0),($198|0))|0); //@line 584 "lpc.c"
     $206 = tempRet0; //@line 584 "lpc.c"
     $207 = $13; //@line 584 "lpc.c"
     $208 = $207; //@line 584 "lpc.c"
     HEAP32[$208>>2] = $205; //@line 584 "lpc.c"
     $209 = (($207) + 4)|0; //@line 584 "lpc.c"
     $210 = $209; //@line 584 "lpc.c"
     HEAP32[$210>>2] = $206; //@line 584 "lpc.c"
     $211 = $8; //@line 585 "lpc.c"
     $212 = ((($211)) + 16|0); //@line 585 "lpc.c"
     $213 = HEAP32[$212>>2]|0; //@line 585 "lpc.c"
     $214 = ($213|0)<(0); //@line 585 "lpc.c"
     $215 = $214 << 31 >> 31; //@line 585 "lpc.c"
     $216 = $6; //@line 585 "lpc.c"
     $217 = $12; //@line 585 "lpc.c"
     $218 = (($217) - 5)|0; //@line 585 "lpc.c"
     $219 = (($216) + ($218<<2)|0); //@line 585 "lpc.c"
     $220 = HEAP32[$219>>2]|0; //@line 585 "lpc.c"
     $221 = ($220|0)<(0); //@line 585 "lpc.c"
     $222 = $221 << 31 >> 31; //@line 585 "lpc.c"
     $223 = (___muldi3(($213|0),($215|0),($220|0),($222|0))|0); //@line 585 "lpc.c"
     $224 = tempRet0; //@line 585 "lpc.c"
     $225 = $13; //@line 585 "lpc.c"
     $226 = $225; //@line 585 "lpc.c"
     $227 = HEAP32[$226>>2]|0; //@line 585 "lpc.c"
     $228 = (($225) + 4)|0; //@line 585 "lpc.c"
     $229 = $228; //@line 585 "lpc.c"
     $230 = HEAP32[$229>>2]|0; //@line 585 "lpc.c"
     $231 = (_i64Add(($227|0),($230|0),($223|0),($224|0))|0); //@line 585 "lpc.c"
     $232 = tempRet0; //@line 585 "lpc.c"
     $233 = $13; //@line 585 "lpc.c"
     $234 = $233; //@line 585 "lpc.c"
     HEAP32[$234>>2] = $231; //@line 585 "lpc.c"
     $235 = (($233) + 4)|0; //@line 585 "lpc.c"
     $236 = $235; //@line 585 "lpc.c"
     HEAP32[$236>>2] = $232; //@line 585 "lpc.c"
     $237 = $8; //@line 586 "lpc.c"
     $238 = ((($237)) + 12|0); //@line 586 "lpc.c"
     $239 = HEAP32[$238>>2]|0; //@line 586 "lpc.c"
     $240 = ($239|0)<(0); //@line 586 "lpc.c"
     $241 = $240 << 31 >> 31; //@line 586 "lpc.c"
     $242 = $6; //@line 586 "lpc.c"
     $243 = $12; //@line 586 "lpc.c"
     $244 = (($243) - 4)|0; //@line 586 "lpc.c"
     $245 = (($242) + ($244<<2)|0); //@line 586 "lpc.c"
     $246 = HEAP32[$245>>2]|0; //@line 586 "lpc.c"
     $247 = ($246|0)<(0); //@line 586 "lpc.c"
     $248 = $247 << 31 >> 31; //@line 586 "lpc.c"
     $249 = (___muldi3(($239|0),($241|0),($246|0),($248|0))|0); //@line 586 "lpc.c"
     $250 = tempRet0; //@line 586 "lpc.c"
     $251 = $13; //@line 586 "lpc.c"
     $252 = $251; //@line 586 "lpc.c"
     $253 = HEAP32[$252>>2]|0; //@line 586 "lpc.c"
     $254 = (($251) + 4)|0; //@line 586 "lpc.c"
     $255 = $254; //@line 586 "lpc.c"
     $256 = HEAP32[$255>>2]|0; //@line 586 "lpc.c"
     $257 = (_i64Add(($253|0),($256|0),($249|0),($250|0))|0); //@line 586 "lpc.c"
     $258 = tempRet0; //@line 586 "lpc.c"
     $259 = $13; //@line 586 "lpc.c"
     $260 = $259; //@line 586 "lpc.c"
     HEAP32[$260>>2] = $257; //@line 586 "lpc.c"
     $261 = (($259) + 4)|0; //@line 586 "lpc.c"
     $262 = $261; //@line 586 "lpc.c"
     HEAP32[$262>>2] = $258; //@line 586 "lpc.c"
     $263 = $8; //@line 587 "lpc.c"
     $264 = ((($263)) + 8|0); //@line 587 "lpc.c"
     $265 = HEAP32[$264>>2]|0; //@line 587 "lpc.c"
     $266 = ($265|0)<(0); //@line 587 "lpc.c"
     $267 = $266 << 31 >> 31; //@line 587 "lpc.c"
     $268 = $6; //@line 587 "lpc.c"
     $269 = $12; //@line 587 "lpc.c"
     $270 = (($269) - 3)|0; //@line 587 "lpc.c"
     $271 = (($268) + ($270<<2)|0); //@line 587 "lpc.c"
     $272 = HEAP32[$271>>2]|0; //@line 587 "lpc.c"
     $273 = ($272|0)<(0); //@line 587 "lpc.c"
     $274 = $273 << 31 >> 31; //@line 587 "lpc.c"
     $275 = (___muldi3(($265|0),($267|0),($272|0),($274|0))|0); //@line 587 "lpc.c"
     $276 = tempRet0; //@line 587 "lpc.c"
     $277 = $13; //@line 587 "lpc.c"
     $278 = $277; //@line 587 "lpc.c"
     $279 = HEAP32[$278>>2]|0; //@line 587 "lpc.c"
     $280 = (($277) + 4)|0; //@line 587 "lpc.c"
     $281 = $280; //@line 587 "lpc.c"
     $282 = HEAP32[$281>>2]|0; //@line 587 "lpc.c"
     $283 = (_i64Add(($279|0),($282|0),($275|0),($276|0))|0); //@line 587 "lpc.c"
     $284 = tempRet0; //@line 587 "lpc.c"
     $285 = $13; //@line 587 "lpc.c"
     $286 = $285; //@line 587 "lpc.c"
     HEAP32[$286>>2] = $283; //@line 587 "lpc.c"
     $287 = (($285) + 4)|0; //@line 587 "lpc.c"
     $288 = $287; //@line 587 "lpc.c"
     HEAP32[$288>>2] = $284; //@line 587 "lpc.c"
     $289 = $8; //@line 588 "lpc.c"
     $290 = ((($289)) + 4|0); //@line 588 "lpc.c"
     $291 = HEAP32[$290>>2]|0; //@line 588 "lpc.c"
     $292 = ($291|0)<(0); //@line 588 "lpc.c"
     $293 = $292 << 31 >> 31; //@line 588 "lpc.c"
     $294 = $6; //@line 588 "lpc.c"
     $295 = $12; //@line 588 "lpc.c"
     $296 = (($295) - 2)|0; //@line 588 "lpc.c"
     $297 = (($294) + ($296<<2)|0); //@line 588 "lpc.c"
     $298 = HEAP32[$297>>2]|0; //@line 588 "lpc.c"
     $299 = ($298|0)<(0); //@line 588 "lpc.c"
     $300 = $299 << 31 >> 31; //@line 588 "lpc.c"
     $301 = (___muldi3(($291|0),($293|0),($298|0),($300|0))|0); //@line 588 "lpc.c"
     $302 = tempRet0; //@line 588 "lpc.c"
     $303 = $13; //@line 588 "lpc.c"
     $304 = $303; //@line 588 "lpc.c"
     $305 = HEAP32[$304>>2]|0; //@line 588 "lpc.c"
     $306 = (($303) + 4)|0; //@line 588 "lpc.c"
     $307 = $306; //@line 588 "lpc.c"
     $308 = HEAP32[$307>>2]|0; //@line 588 "lpc.c"
     $309 = (_i64Add(($305|0),($308|0),($301|0),($302|0))|0); //@line 588 "lpc.c"
     $310 = tempRet0; //@line 588 "lpc.c"
     $311 = $13; //@line 588 "lpc.c"
     $312 = $311; //@line 588 "lpc.c"
     HEAP32[$312>>2] = $309; //@line 588 "lpc.c"
     $313 = (($311) + 4)|0; //@line 588 "lpc.c"
     $314 = $313; //@line 588 "lpc.c"
     HEAP32[$314>>2] = $310; //@line 588 "lpc.c"
     $315 = $8; //@line 589 "lpc.c"
     $316 = HEAP32[$315>>2]|0; //@line 589 "lpc.c"
     $317 = ($316|0)<(0); //@line 589 "lpc.c"
     $318 = $317 << 31 >> 31; //@line 589 "lpc.c"
     $319 = $6; //@line 589 "lpc.c"
     $320 = $12; //@line 589 "lpc.c"
     $321 = (($320) - 1)|0; //@line 589 "lpc.c"
     $322 = (($319) + ($321<<2)|0); //@line 589 "lpc.c"
     $323 = HEAP32[$322>>2]|0; //@line 589 "lpc.c"
     $324 = ($323|0)<(0); //@line 589 "lpc.c"
     $325 = $324 << 31 >> 31; //@line 589 "lpc.c"
     $326 = (___muldi3(($316|0),($318|0),($323|0),($325|0))|0); //@line 589 "lpc.c"
     $327 = tempRet0; //@line 589 "lpc.c"
     $328 = $13; //@line 589 "lpc.c"
     $329 = $328; //@line 589 "lpc.c"
     $330 = HEAP32[$329>>2]|0; //@line 589 "lpc.c"
     $331 = (($328) + 4)|0; //@line 589 "lpc.c"
     $332 = $331; //@line 589 "lpc.c"
     $333 = HEAP32[$332>>2]|0; //@line 589 "lpc.c"
     $334 = (_i64Add(($330|0),($333|0),($326|0),($327|0))|0); //@line 589 "lpc.c"
     $335 = tempRet0; //@line 589 "lpc.c"
     $336 = $13; //@line 589 "lpc.c"
     $337 = $336; //@line 589 "lpc.c"
     HEAP32[$337>>2] = $334; //@line 589 "lpc.c"
     $338 = (($336) + 4)|0; //@line 589 "lpc.c"
     $339 = $338; //@line 589 "lpc.c"
     HEAP32[$339>>2] = $335; //@line 589 "lpc.c"
     $340 = $6; //@line 590 "lpc.c"
     $341 = $12; //@line 590 "lpc.c"
     $342 = (($340) + ($341<<2)|0); //@line 590 "lpc.c"
     $343 = HEAP32[$342>>2]|0; //@line 590 "lpc.c"
     $344 = $13; //@line 590 "lpc.c"
     $345 = $344; //@line 590 "lpc.c"
     $346 = HEAP32[$345>>2]|0; //@line 590 "lpc.c"
     $347 = (($344) + 4)|0; //@line 590 "lpc.c"
     $348 = $347; //@line 590 "lpc.c"
     $349 = HEAP32[$348>>2]|0; //@line 590 "lpc.c"
     $350 = $10; //@line 590 "lpc.c"
     $351 = (_bitshift64Ashr(($346|0),($349|0),($350|0))|0); //@line 590 "lpc.c"
     $352 = tempRet0; //@line 590 "lpc.c"
     $353 = (($343) - ($351))|0; //@line 590 "lpc.c"
     $354 = $11; //@line 590 "lpc.c"
     $355 = $12; //@line 590 "lpc.c"
     $356 = (($354) + ($355<<2)|0); //@line 590 "lpc.c"
     HEAP32[$356>>2] = $353; //@line 590 "lpc.c"
     $357 = $12; //@line 576 "lpc.c"
     $358 = (($357) + 1)|0; //@line 576 "lpc.c"
     $12 = $358; //@line 576 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $359 = $12; //@line 594 "lpc.c"
     $360 = $7; //@line 594 "lpc.c"
     $361 = ($359|0)<($360|0); //@line 594 "lpc.c"
     if (!($361)) {
      break;
     }
     $362 = $13; //@line 595 "lpc.c"
     $363 = $362; //@line 595 "lpc.c"
     HEAP32[$363>>2] = 0; //@line 595 "lpc.c"
     $364 = (($362) + 4)|0; //@line 595 "lpc.c"
     $365 = $364; //@line 595 "lpc.c"
     HEAP32[$365>>2] = 0; //@line 595 "lpc.c"
     $366 = $8; //@line 596 "lpc.c"
     $367 = ((($366)) + 40|0); //@line 596 "lpc.c"
     $368 = HEAP32[$367>>2]|0; //@line 596 "lpc.c"
     $369 = ($368|0)<(0); //@line 596 "lpc.c"
     $370 = $369 << 31 >> 31; //@line 596 "lpc.c"
     $371 = $6; //@line 596 "lpc.c"
     $372 = $12; //@line 596 "lpc.c"
     $373 = (($372) - 11)|0; //@line 596 "lpc.c"
     $374 = (($371) + ($373<<2)|0); //@line 596 "lpc.c"
     $375 = HEAP32[$374>>2]|0; //@line 596 "lpc.c"
     $376 = ($375|0)<(0); //@line 596 "lpc.c"
     $377 = $376 << 31 >> 31; //@line 596 "lpc.c"
     $378 = (___muldi3(($368|0),($370|0),($375|0),($377|0))|0); //@line 596 "lpc.c"
     $379 = tempRet0; //@line 596 "lpc.c"
     $380 = $13; //@line 596 "lpc.c"
     $381 = $380; //@line 596 "lpc.c"
     $382 = HEAP32[$381>>2]|0; //@line 596 "lpc.c"
     $383 = (($380) + 4)|0; //@line 596 "lpc.c"
     $384 = $383; //@line 596 "lpc.c"
     $385 = HEAP32[$384>>2]|0; //@line 596 "lpc.c"
     $386 = (_i64Add(($382|0),($385|0),($378|0),($379|0))|0); //@line 596 "lpc.c"
     $387 = tempRet0; //@line 596 "lpc.c"
     $388 = $13; //@line 596 "lpc.c"
     $389 = $388; //@line 596 "lpc.c"
     HEAP32[$389>>2] = $386; //@line 596 "lpc.c"
     $390 = (($388) + 4)|0; //@line 596 "lpc.c"
     $391 = $390; //@line 596 "lpc.c"
     HEAP32[$391>>2] = $387; //@line 596 "lpc.c"
     $392 = $8; //@line 597 "lpc.c"
     $393 = ((($392)) + 36|0); //@line 597 "lpc.c"
     $394 = HEAP32[$393>>2]|0; //@line 597 "lpc.c"
     $395 = ($394|0)<(0); //@line 597 "lpc.c"
     $396 = $395 << 31 >> 31; //@line 597 "lpc.c"
     $397 = $6; //@line 597 "lpc.c"
     $398 = $12; //@line 597 "lpc.c"
     $399 = (($398) - 10)|0; //@line 597 "lpc.c"
     $400 = (($397) + ($399<<2)|0); //@line 597 "lpc.c"
     $401 = HEAP32[$400>>2]|0; //@line 597 "lpc.c"
     $402 = ($401|0)<(0); //@line 597 "lpc.c"
     $403 = $402 << 31 >> 31; //@line 597 "lpc.c"
     $404 = (___muldi3(($394|0),($396|0),($401|0),($403|0))|0); //@line 597 "lpc.c"
     $405 = tempRet0; //@line 597 "lpc.c"
     $406 = $13; //@line 597 "lpc.c"
     $407 = $406; //@line 597 "lpc.c"
     $408 = HEAP32[$407>>2]|0; //@line 597 "lpc.c"
     $409 = (($406) + 4)|0; //@line 597 "lpc.c"
     $410 = $409; //@line 597 "lpc.c"
     $411 = HEAP32[$410>>2]|0; //@line 597 "lpc.c"
     $412 = (_i64Add(($408|0),($411|0),($404|0),($405|0))|0); //@line 597 "lpc.c"
     $413 = tempRet0; //@line 597 "lpc.c"
     $414 = $13; //@line 597 "lpc.c"
     $415 = $414; //@line 597 "lpc.c"
     HEAP32[$415>>2] = $412; //@line 597 "lpc.c"
     $416 = (($414) + 4)|0; //@line 597 "lpc.c"
     $417 = $416; //@line 597 "lpc.c"
     HEAP32[$417>>2] = $413; //@line 597 "lpc.c"
     $418 = $8; //@line 598 "lpc.c"
     $419 = ((($418)) + 32|0); //@line 598 "lpc.c"
     $420 = HEAP32[$419>>2]|0; //@line 598 "lpc.c"
     $421 = ($420|0)<(0); //@line 598 "lpc.c"
     $422 = $421 << 31 >> 31; //@line 598 "lpc.c"
     $423 = $6; //@line 598 "lpc.c"
     $424 = $12; //@line 598 "lpc.c"
     $425 = (($424) - 9)|0; //@line 598 "lpc.c"
     $426 = (($423) + ($425<<2)|0); //@line 598 "lpc.c"
     $427 = HEAP32[$426>>2]|0; //@line 598 "lpc.c"
     $428 = ($427|0)<(0); //@line 598 "lpc.c"
     $429 = $428 << 31 >> 31; //@line 598 "lpc.c"
     $430 = (___muldi3(($420|0),($422|0),($427|0),($429|0))|0); //@line 598 "lpc.c"
     $431 = tempRet0; //@line 598 "lpc.c"
     $432 = $13; //@line 598 "lpc.c"
     $433 = $432; //@line 598 "lpc.c"
     $434 = HEAP32[$433>>2]|0; //@line 598 "lpc.c"
     $435 = (($432) + 4)|0; //@line 598 "lpc.c"
     $436 = $435; //@line 598 "lpc.c"
     $437 = HEAP32[$436>>2]|0; //@line 598 "lpc.c"
     $438 = (_i64Add(($434|0),($437|0),($430|0),($431|0))|0); //@line 598 "lpc.c"
     $439 = tempRet0; //@line 598 "lpc.c"
     $440 = $13; //@line 598 "lpc.c"
     $441 = $440; //@line 598 "lpc.c"
     HEAP32[$441>>2] = $438; //@line 598 "lpc.c"
     $442 = (($440) + 4)|0; //@line 598 "lpc.c"
     $443 = $442; //@line 598 "lpc.c"
     HEAP32[$443>>2] = $439; //@line 598 "lpc.c"
     $444 = $8; //@line 599 "lpc.c"
     $445 = ((($444)) + 28|0); //@line 599 "lpc.c"
     $446 = HEAP32[$445>>2]|0; //@line 599 "lpc.c"
     $447 = ($446|0)<(0); //@line 599 "lpc.c"
     $448 = $447 << 31 >> 31; //@line 599 "lpc.c"
     $449 = $6; //@line 599 "lpc.c"
     $450 = $12; //@line 599 "lpc.c"
     $451 = (($450) - 8)|0; //@line 599 "lpc.c"
     $452 = (($449) + ($451<<2)|0); //@line 599 "lpc.c"
     $453 = HEAP32[$452>>2]|0; //@line 599 "lpc.c"
     $454 = ($453|0)<(0); //@line 599 "lpc.c"
     $455 = $454 << 31 >> 31; //@line 599 "lpc.c"
     $456 = (___muldi3(($446|0),($448|0),($453|0),($455|0))|0); //@line 599 "lpc.c"
     $457 = tempRet0; //@line 599 "lpc.c"
     $458 = $13; //@line 599 "lpc.c"
     $459 = $458; //@line 599 "lpc.c"
     $460 = HEAP32[$459>>2]|0; //@line 599 "lpc.c"
     $461 = (($458) + 4)|0; //@line 599 "lpc.c"
     $462 = $461; //@line 599 "lpc.c"
     $463 = HEAP32[$462>>2]|0; //@line 599 "lpc.c"
     $464 = (_i64Add(($460|0),($463|0),($456|0),($457|0))|0); //@line 599 "lpc.c"
     $465 = tempRet0; //@line 599 "lpc.c"
     $466 = $13; //@line 599 "lpc.c"
     $467 = $466; //@line 599 "lpc.c"
     HEAP32[$467>>2] = $464; //@line 599 "lpc.c"
     $468 = (($466) + 4)|0; //@line 599 "lpc.c"
     $469 = $468; //@line 599 "lpc.c"
     HEAP32[$469>>2] = $465; //@line 599 "lpc.c"
     $470 = $8; //@line 600 "lpc.c"
     $471 = ((($470)) + 24|0); //@line 600 "lpc.c"
     $472 = HEAP32[$471>>2]|0; //@line 600 "lpc.c"
     $473 = ($472|0)<(0); //@line 600 "lpc.c"
     $474 = $473 << 31 >> 31; //@line 600 "lpc.c"
     $475 = $6; //@line 600 "lpc.c"
     $476 = $12; //@line 600 "lpc.c"
     $477 = (($476) - 7)|0; //@line 600 "lpc.c"
     $478 = (($475) + ($477<<2)|0); //@line 600 "lpc.c"
     $479 = HEAP32[$478>>2]|0; //@line 600 "lpc.c"
     $480 = ($479|0)<(0); //@line 600 "lpc.c"
     $481 = $480 << 31 >> 31; //@line 600 "lpc.c"
     $482 = (___muldi3(($472|0),($474|0),($479|0),($481|0))|0); //@line 600 "lpc.c"
     $483 = tempRet0; //@line 600 "lpc.c"
     $484 = $13; //@line 600 "lpc.c"
     $485 = $484; //@line 600 "lpc.c"
     $486 = HEAP32[$485>>2]|0; //@line 600 "lpc.c"
     $487 = (($484) + 4)|0; //@line 600 "lpc.c"
     $488 = $487; //@line 600 "lpc.c"
     $489 = HEAP32[$488>>2]|0; //@line 600 "lpc.c"
     $490 = (_i64Add(($486|0),($489|0),($482|0),($483|0))|0); //@line 600 "lpc.c"
     $491 = tempRet0; //@line 600 "lpc.c"
     $492 = $13; //@line 600 "lpc.c"
     $493 = $492; //@line 600 "lpc.c"
     HEAP32[$493>>2] = $490; //@line 600 "lpc.c"
     $494 = (($492) + 4)|0; //@line 600 "lpc.c"
     $495 = $494; //@line 600 "lpc.c"
     HEAP32[$495>>2] = $491; //@line 600 "lpc.c"
     $496 = $8; //@line 601 "lpc.c"
     $497 = ((($496)) + 20|0); //@line 601 "lpc.c"
     $498 = HEAP32[$497>>2]|0; //@line 601 "lpc.c"
     $499 = ($498|0)<(0); //@line 601 "lpc.c"
     $500 = $499 << 31 >> 31; //@line 601 "lpc.c"
     $501 = $6; //@line 601 "lpc.c"
     $502 = $12; //@line 601 "lpc.c"
     $503 = (($502) - 6)|0; //@line 601 "lpc.c"
     $504 = (($501) + ($503<<2)|0); //@line 601 "lpc.c"
     $505 = HEAP32[$504>>2]|0; //@line 601 "lpc.c"
     $506 = ($505|0)<(0); //@line 601 "lpc.c"
     $507 = $506 << 31 >> 31; //@line 601 "lpc.c"
     $508 = (___muldi3(($498|0),($500|0),($505|0),($507|0))|0); //@line 601 "lpc.c"
     $509 = tempRet0; //@line 601 "lpc.c"
     $510 = $13; //@line 601 "lpc.c"
     $511 = $510; //@line 601 "lpc.c"
     $512 = HEAP32[$511>>2]|0; //@line 601 "lpc.c"
     $513 = (($510) + 4)|0; //@line 601 "lpc.c"
     $514 = $513; //@line 601 "lpc.c"
     $515 = HEAP32[$514>>2]|0; //@line 601 "lpc.c"
     $516 = (_i64Add(($512|0),($515|0),($508|0),($509|0))|0); //@line 601 "lpc.c"
     $517 = tempRet0; //@line 601 "lpc.c"
     $518 = $13; //@line 601 "lpc.c"
     $519 = $518; //@line 601 "lpc.c"
     HEAP32[$519>>2] = $516; //@line 601 "lpc.c"
     $520 = (($518) + 4)|0; //@line 601 "lpc.c"
     $521 = $520; //@line 601 "lpc.c"
     HEAP32[$521>>2] = $517; //@line 601 "lpc.c"
     $522 = $8; //@line 602 "lpc.c"
     $523 = ((($522)) + 16|0); //@line 602 "lpc.c"
     $524 = HEAP32[$523>>2]|0; //@line 602 "lpc.c"
     $525 = ($524|0)<(0); //@line 602 "lpc.c"
     $526 = $525 << 31 >> 31; //@line 602 "lpc.c"
     $527 = $6; //@line 602 "lpc.c"
     $528 = $12; //@line 602 "lpc.c"
     $529 = (($528) - 5)|0; //@line 602 "lpc.c"
     $530 = (($527) + ($529<<2)|0); //@line 602 "lpc.c"
     $531 = HEAP32[$530>>2]|0; //@line 602 "lpc.c"
     $532 = ($531|0)<(0); //@line 602 "lpc.c"
     $533 = $532 << 31 >> 31; //@line 602 "lpc.c"
     $534 = (___muldi3(($524|0),($526|0),($531|0),($533|0))|0); //@line 602 "lpc.c"
     $535 = tempRet0; //@line 602 "lpc.c"
     $536 = $13; //@line 602 "lpc.c"
     $537 = $536; //@line 602 "lpc.c"
     $538 = HEAP32[$537>>2]|0; //@line 602 "lpc.c"
     $539 = (($536) + 4)|0; //@line 602 "lpc.c"
     $540 = $539; //@line 602 "lpc.c"
     $541 = HEAP32[$540>>2]|0; //@line 602 "lpc.c"
     $542 = (_i64Add(($538|0),($541|0),($534|0),($535|0))|0); //@line 602 "lpc.c"
     $543 = tempRet0; //@line 602 "lpc.c"
     $544 = $13; //@line 602 "lpc.c"
     $545 = $544; //@line 602 "lpc.c"
     HEAP32[$545>>2] = $542; //@line 602 "lpc.c"
     $546 = (($544) + 4)|0; //@line 602 "lpc.c"
     $547 = $546; //@line 602 "lpc.c"
     HEAP32[$547>>2] = $543; //@line 602 "lpc.c"
     $548 = $8; //@line 603 "lpc.c"
     $549 = ((($548)) + 12|0); //@line 603 "lpc.c"
     $550 = HEAP32[$549>>2]|0; //@line 603 "lpc.c"
     $551 = ($550|0)<(0); //@line 603 "lpc.c"
     $552 = $551 << 31 >> 31; //@line 603 "lpc.c"
     $553 = $6; //@line 603 "lpc.c"
     $554 = $12; //@line 603 "lpc.c"
     $555 = (($554) - 4)|0; //@line 603 "lpc.c"
     $556 = (($553) + ($555<<2)|0); //@line 603 "lpc.c"
     $557 = HEAP32[$556>>2]|0; //@line 603 "lpc.c"
     $558 = ($557|0)<(0); //@line 603 "lpc.c"
     $559 = $558 << 31 >> 31; //@line 603 "lpc.c"
     $560 = (___muldi3(($550|0),($552|0),($557|0),($559|0))|0); //@line 603 "lpc.c"
     $561 = tempRet0; //@line 603 "lpc.c"
     $562 = $13; //@line 603 "lpc.c"
     $563 = $562; //@line 603 "lpc.c"
     $564 = HEAP32[$563>>2]|0; //@line 603 "lpc.c"
     $565 = (($562) + 4)|0; //@line 603 "lpc.c"
     $566 = $565; //@line 603 "lpc.c"
     $567 = HEAP32[$566>>2]|0; //@line 603 "lpc.c"
     $568 = (_i64Add(($564|0),($567|0),($560|0),($561|0))|0); //@line 603 "lpc.c"
     $569 = tempRet0; //@line 603 "lpc.c"
     $570 = $13; //@line 603 "lpc.c"
     $571 = $570; //@line 603 "lpc.c"
     HEAP32[$571>>2] = $568; //@line 603 "lpc.c"
     $572 = (($570) + 4)|0; //@line 603 "lpc.c"
     $573 = $572; //@line 603 "lpc.c"
     HEAP32[$573>>2] = $569; //@line 603 "lpc.c"
     $574 = $8; //@line 604 "lpc.c"
     $575 = ((($574)) + 8|0); //@line 604 "lpc.c"
     $576 = HEAP32[$575>>2]|0; //@line 604 "lpc.c"
     $577 = ($576|0)<(0); //@line 604 "lpc.c"
     $578 = $577 << 31 >> 31; //@line 604 "lpc.c"
     $579 = $6; //@line 604 "lpc.c"
     $580 = $12; //@line 604 "lpc.c"
     $581 = (($580) - 3)|0; //@line 604 "lpc.c"
     $582 = (($579) + ($581<<2)|0); //@line 604 "lpc.c"
     $583 = HEAP32[$582>>2]|0; //@line 604 "lpc.c"
     $584 = ($583|0)<(0); //@line 604 "lpc.c"
     $585 = $584 << 31 >> 31; //@line 604 "lpc.c"
     $586 = (___muldi3(($576|0),($578|0),($583|0),($585|0))|0); //@line 604 "lpc.c"
     $587 = tempRet0; //@line 604 "lpc.c"
     $588 = $13; //@line 604 "lpc.c"
     $589 = $588; //@line 604 "lpc.c"
     $590 = HEAP32[$589>>2]|0; //@line 604 "lpc.c"
     $591 = (($588) + 4)|0; //@line 604 "lpc.c"
     $592 = $591; //@line 604 "lpc.c"
     $593 = HEAP32[$592>>2]|0; //@line 604 "lpc.c"
     $594 = (_i64Add(($590|0),($593|0),($586|0),($587|0))|0); //@line 604 "lpc.c"
     $595 = tempRet0; //@line 604 "lpc.c"
     $596 = $13; //@line 604 "lpc.c"
     $597 = $596; //@line 604 "lpc.c"
     HEAP32[$597>>2] = $594; //@line 604 "lpc.c"
     $598 = (($596) + 4)|0; //@line 604 "lpc.c"
     $599 = $598; //@line 604 "lpc.c"
     HEAP32[$599>>2] = $595; //@line 604 "lpc.c"
     $600 = $8; //@line 605 "lpc.c"
     $601 = ((($600)) + 4|0); //@line 605 "lpc.c"
     $602 = HEAP32[$601>>2]|0; //@line 605 "lpc.c"
     $603 = ($602|0)<(0); //@line 605 "lpc.c"
     $604 = $603 << 31 >> 31; //@line 605 "lpc.c"
     $605 = $6; //@line 605 "lpc.c"
     $606 = $12; //@line 605 "lpc.c"
     $607 = (($606) - 2)|0; //@line 605 "lpc.c"
     $608 = (($605) + ($607<<2)|0); //@line 605 "lpc.c"
     $609 = HEAP32[$608>>2]|0; //@line 605 "lpc.c"
     $610 = ($609|0)<(0); //@line 605 "lpc.c"
     $611 = $610 << 31 >> 31; //@line 605 "lpc.c"
     $612 = (___muldi3(($602|0),($604|0),($609|0),($611|0))|0); //@line 605 "lpc.c"
     $613 = tempRet0; //@line 605 "lpc.c"
     $614 = $13; //@line 605 "lpc.c"
     $615 = $614; //@line 605 "lpc.c"
     $616 = HEAP32[$615>>2]|0; //@line 605 "lpc.c"
     $617 = (($614) + 4)|0; //@line 605 "lpc.c"
     $618 = $617; //@line 605 "lpc.c"
     $619 = HEAP32[$618>>2]|0; //@line 605 "lpc.c"
     $620 = (_i64Add(($616|0),($619|0),($612|0),($613|0))|0); //@line 605 "lpc.c"
     $621 = tempRet0; //@line 605 "lpc.c"
     $622 = $13; //@line 605 "lpc.c"
     $623 = $622; //@line 605 "lpc.c"
     HEAP32[$623>>2] = $620; //@line 605 "lpc.c"
     $624 = (($622) + 4)|0; //@line 605 "lpc.c"
     $625 = $624; //@line 605 "lpc.c"
     HEAP32[$625>>2] = $621; //@line 605 "lpc.c"
     $626 = $8; //@line 606 "lpc.c"
     $627 = HEAP32[$626>>2]|0; //@line 606 "lpc.c"
     $628 = ($627|0)<(0); //@line 606 "lpc.c"
     $629 = $628 << 31 >> 31; //@line 606 "lpc.c"
     $630 = $6; //@line 606 "lpc.c"
     $631 = $12; //@line 606 "lpc.c"
     $632 = (($631) - 1)|0; //@line 606 "lpc.c"
     $633 = (($630) + ($632<<2)|0); //@line 606 "lpc.c"
     $634 = HEAP32[$633>>2]|0; //@line 606 "lpc.c"
     $635 = ($634|0)<(0); //@line 606 "lpc.c"
     $636 = $635 << 31 >> 31; //@line 606 "lpc.c"
     $637 = (___muldi3(($627|0),($629|0),($634|0),($636|0))|0); //@line 606 "lpc.c"
     $638 = tempRet0; //@line 606 "lpc.c"
     $639 = $13; //@line 606 "lpc.c"
     $640 = $639; //@line 606 "lpc.c"
     $641 = HEAP32[$640>>2]|0; //@line 606 "lpc.c"
     $642 = (($639) + 4)|0; //@line 606 "lpc.c"
     $643 = $642; //@line 606 "lpc.c"
     $644 = HEAP32[$643>>2]|0; //@line 606 "lpc.c"
     $645 = (_i64Add(($641|0),($644|0),($637|0),($638|0))|0); //@line 606 "lpc.c"
     $646 = tempRet0; //@line 606 "lpc.c"
     $647 = $13; //@line 606 "lpc.c"
     $648 = $647; //@line 606 "lpc.c"
     HEAP32[$648>>2] = $645; //@line 606 "lpc.c"
     $649 = (($647) + 4)|0; //@line 606 "lpc.c"
     $650 = $649; //@line 606 "lpc.c"
     HEAP32[$650>>2] = $646; //@line 606 "lpc.c"
     $651 = $6; //@line 607 "lpc.c"
     $652 = $12; //@line 607 "lpc.c"
     $653 = (($651) + ($652<<2)|0); //@line 607 "lpc.c"
     $654 = HEAP32[$653>>2]|0; //@line 607 "lpc.c"
     $655 = $13; //@line 607 "lpc.c"
     $656 = $655; //@line 607 "lpc.c"
     $657 = HEAP32[$656>>2]|0; //@line 607 "lpc.c"
     $658 = (($655) + 4)|0; //@line 607 "lpc.c"
     $659 = $658; //@line 607 "lpc.c"
     $660 = HEAP32[$659>>2]|0; //@line 607 "lpc.c"
     $661 = $10; //@line 607 "lpc.c"
     $662 = (_bitshift64Ashr(($657|0),($660|0),($661|0))|0); //@line 607 "lpc.c"
     $663 = tempRet0; //@line 607 "lpc.c"
     $664 = (($654) - ($662))|0; //@line 607 "lpc.c"
     $665 = $11; //@line 607 "lpc.c"
     $666 = $12; //@line 607 "lpc.c"
     $667 = (($665) + ($666<<2)|0); //@line 607 "lpc.c"
     HEAP32[$667>>2] = $664; //@line 607 "lpc.c"
     $668 = $12; //@line 594 "lpc.c"
     $669 = (($668) + 1)|0; //@line 594 "lpc.c"
     $12 = $669; //@line 594 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  } else {
   $670 = ($20|0)==(10); //@line 612 "lpc.c"
   $12 = 0;
   if ($670) {
    while(1) {
     $671 = $12; //@line 613 "lpc.c"
     $672 = $7; //@line 613 "lpc.c"
     $673 = ($671|0)<($672|0); //@line 613 "lpc.c"
     if (!($673)) {
      break;
     }
     $674 = $13; //@line 614 "lpc.c"
     $675 = $674; //@line 614 "lpc.c"
     HEAP32[$675>>2] = 0; //@line 614 "lpc.c"
     $676 = (($674) + 4)|0; //@line 614 "lpc.c"
     $677 = $676; //@line 614 "lpc.c"
     HEAP32[$677>>2] = 0; //@line 614 "lpc.c"
     $678 = $8; //@line 615 "lpc.c"
     $679 = ((($678)) + 36|0); //@line 615 "lpc.c"
     $680 = HEAP32[$679>>2]|0; //@line 615 "lpc.c"
     $681 = ($680|0)<(0); //@line 615 "lpc.c"
     $682 = $681 << 31 >> 31; //@line 615 "lpc.c"
     $683 = $6; //@line 615 "lpc.c"
     $684 = $12; //@line 615 "lpc.c"
     $685 = (($684) - 10)|0; //@line 615 "lpc.c"
     $686 = (($683) + ($685<<2)|0); //@line 615 "lpc.c"
     $687 = HEAP32[$686>>2]|0; //@line 615 "lpc.c"
     $688 = ($687|0)<(0); //@line 615 "lpc.c"
     $689 = $688 << 31 >> 31; //@line 615 "lpc.c"
     $690 = (___muldi3(($680|0),($682|0),($687|0),($689|0))|0); //@line 615 "lpc.c"
     $691 = tempRet0; //@line 615 "lpc.c"
     $692 = $13; //@line 615 "lpc.c"
     $693 = $692; //@line 615 "lpc.c"
     $694 = HEAP32[$693>>2]|0; //@line 615 "lpc.c"
     $695 = (($692) + 4)|0; //@line 615 "lpc.c"
     $696 = $695; //@line 615 "lpc.c"
     $697 = HEAP32[$696>>2]|0; //@line 615 "lpc.c"
     $698 = (_i64Add(($694|0),($697|0),($690|0),($691|0))|0); //@line 615 "lpc.c"
     $699 = tempRet0; //@line 615 "lpc.c"
     $700 = $13; //@line 615 "lpc.c"
     $701 = $700; //@line 615 "lpc.c"
     HEAP32[$701>>2] = $698; //@line 615 "lpc.c"
     $702 = (($700) + 4)|0; //@line 615 "lpc.c"
     $703 = $702; //@line 615 "lpc.c"
     HEAP32[$703>>2] = $699; //@line 615 "lpc.c"
     $704 = $8; //@line 616 "lpc.c"
     $705 = ((($704)) + 32|0); //@line 616 "lpc.c"
     $706 = HEAP32[$705>>2]|0; //@line 616 "lpc.c"
     $707 = ($706|0)<(0); //@line 616 "lpc.c"
     $708 = $707 << 31 >> 31; //@line 616 "lpc.c"
     $709 = $6; //@line 616 "lpc.c"
     $710 = $12; //@line 616 "lpc.c"
     $711 = (($710) - 9)|0; //@line 616 "lpc.c"
     $712 = (($709) + ($711<<2)|0); //@line 616 "lpc.c"
     $713 = HEAP32[$712>>2]|0; //@line 616 "lpc.c"
     $714 = ($713|0)<(0); //@line 616 "lpc.c"
     $715 = $714 << 31 >> 31; //@line 616 "lpc.c"
     $716 = (___muldi3(($706|0),($708|0),($713|0),($715|0))|0); //@line 616 "lpc.c"
     $717 = tempRet0; //@line 616 "lpc.c"
     $718 = $13; //@line 616 "lpc.c"
     $719 = $718; //@line 616 "lpc.c"
     $720 = HEAP32[$719>>2]|0; //@line 616 "lpc.c"
     $721 = (($718) + 4)|0; //@line 616 "lpc.c"
     $722 = $721; //@line 616 "lpc.c"
     $723 = HEAP32[$722>>2]|0; //@line 616 "lpc.c"
     $724 = (_i64Add(($720|0),($723|0),($716|0),($717|0))|0); //@line 616 "lpc.c"
     $725 = tempRet0; //@line 616 "lpc.c"
     $726 = $13; //@line 616 "lpc.c"
     $727 = $726; //@line 616 "lpc.c"
     HEAP32[$727>>2] = $724; //@line 616 "lpc.c"
     $728 = (($726) + 4)|0; //@line 616 "lpc.c"
     $729 = $728; //@line 616 "lpc.c"
     HEAP32[$729>>2] = $725; //@line 616 "lpc.c"
     $730 = $8; //@line 617 "lpc.c"
     $731 = ((($730)) + 28|0); //@line 617 "lpc.c"
     $732 = HEAP32[$731>>2]|0; //@line 617 "lpc.c"
     $733 = ($732|0)<(0); //@line 617 "lpc.c"
     $734 = $733 << 31 >> 31; //@line 617 "lpc.c"
     $735 = $6; //@line 617 "lpc.c"
     $736 = $12; //@line 617 "lpc.c"
     $737 = (($736) - 8)|0; //@line 617 "lpc.c"
     $738 = (($735) + ($737<<2)|0); //@line 617 "lpc.c"
     $739 = HEAP32[$738>>2]|0; //@line 617 "lpc.c"
     $740 = ($739|0)<(0); //@line 617 "lpc.c"
     $741 = $740 << 31 >> 31; //@line 617 "lpc.c"
     $742 = (___muldi3(($732|0),($734|0),($739|0),($741|0))|0); //@line 617 "lpc.c"
     $743 = tempRet0; //@line 617 "lpc.c"
     $744 = $13; //@line 617 "lpc.c"
     $745 = $744; //@line 617 "lpc.c"
     $746 = HEAP32[$745>>2]|0; //@line 617 "lpc.c"
     $747 = (($744) + 4)|0; //@line 617 "lpc.c"
     $748 = $747; //@line 617 "lpc.c"
     $749 = HEAP32[$748>>2]|0; //@line 617 "lpc.c"
     $750 = (_i64Add(($746|0),($749|0),($742|0),($743|0))|0); //@line 617 "lpc.c"
     $751 = tempRet0; //@line 617 "lpc.c"
     $752 = $13; //@line 617 "lpc.c"
     $753 = $752; //@line 617 "lpc.c"
     HEAP32[$753>>2] = $750; //@line 617 "lpc.c"
     $754 = (($752) + 4)|0; //@line 617 "lpc.c"
     $755 = $754; //@line 617 "lpc.c"
     HEAP32[$755>>2] = $751; //@line 617 "lpc.c"
     $756 = $8; //@line 618 "lpc.c"
     $757 = ((($756)) + 24|0); //@line 618 "lpc.c"
     $758 = HEAP32[$757>>2]|0; //@line 618 "lpc.c"
     $759 = ($758|0)<(0); //@line 618 "lpc.c"
     $760 = $759 << 31 >> 31; //@line 618 "lpc.c"
     $761 = $6; //@line 618 "lpc.c"
     $762 = $12; //@line 618 "lpc.c"
     $763 = (($762) - 7)|0; //@line 618 "lpc.c"
     $764 = (($761) + ($763<<2)|0); //@line 618 "lpc.c"
     $765 = HEAP32[$764>>2]|0; //@line 618 "lpc.c"
     $766 = ($765|0)<(0); //@line 618 "lpc.c"
     $767 = $766 << 31 >> 31; //@line 618 "lpc.c"
     $768 = (___muldi3(($758|0),($760|0),($765|0),($767|0))|0); //@line 618 "lpc.c"
     $769 = tempRet0; //@line 618 "lpc.c"
     $770 = $13; //@line 618 "lpc.c"
     $771 = $770; //@line 618 "lpc.c"
     $772 = HEAP32[$771>>2]|0; //@line 618 "lpc.c"
     $773 = (($770) + 4)|0; //@line 618 "lpc.c"
     $774 = $773; //@line 618 "lpc.c"
     $775 = HEAP32[$774>>2]|0; //@line 618 "lpc.c"
     $776 = (_i64Add(($772|0),($775|0),($768|0),($769|0))|0); //@line 618 "lpc.c"
     $777 = tempRet0; //@line 618 "lpc.c"
     $778 = $13; //@line 618 "lpc.c"
     $779 = $778; //@line 618 "lpc.c"
     HEAP32[$779>>2] = $776; //@line 618 "lpc.c"
     $780 = (($778) + 4)|0; //@line 618 "lpc.c"
     $781 = $780; //@line 618 "lpc.c"
     HEAP32[$781>>2] = $777; //@line 618 "lpc.c"
     $782 = $8; //@line 619 "lpc.c"
     $783 = ((($782)) + 20|0); //@line 619 "lpc.c"
     $784 = HEAP32[$783>>2]|0; //@line 619 "lpc.c"
     $785 = ($784|0)<(0); //@line 619 "lpc.c"
     $786 = $785 << 31 >> 31; //@line 619 "lpc.c"
     $787 = $6; //@line 619 "lpc.c"
     $788 = $12; //@line 619 "lpc.c"
     $789 = (($788) - 6)|0; //@line 619 "lpc.c"
     $790 = (($787) + ($789<<2)|0); //@line 619 "lpc.c"
     $791 = HEAP32[$790>>2]|0; //@line 619 "lpc.c"
     $792 = ($791|0)<(0); //@line 619 "lpc.c"
     $793 = $792 << 31 >> 31; //@line 619 "lpc.c"
     $794 = (___muldi3(($784|0),($786|0),($791|0),($793|0))|0); //@line 619 "lpc.c"
     $795 = tempRet0; //@line 619 "lpc.c"
     $796 = $13; //@line 619 "lpc.c"
     $797 = $796; //@line 619 "lpc.c"
     $798 = HEAP32[$797>>2]|0; //@line 619 "lpc.c"
     $799 = (($796) + 4)|0; //@line 619 "lpc.c"
     $800 = $799; //@line 619 "lpc.c"
     $801 = HEAP32[$800>>2]|0; //@line 619 "lpc.c"
     $802 = (_i64Add(($798|0),($801|0),($794|0),($795|0))|0); //@line 619 "lpc.c"
     $803 = tempRet0; //@line 619 "lpc.c"
     $804 = $13; //@line 619 "lpc.c"
     $805 = $804; //@line 619 "lpc.c"
     HEAP32[$805>>2] = $802; //@line 619 "lpc.c"
     $806 = (($804) + 4)|0; //@line 619 "lpc.c"
     $807 = $806; //@line 619 "lpc.c"
     HEAP32[$807>>2] = $803; //@line 619 "lpc.c"
     $808 = $8; //@line 620 "lpc.c"
     $809 = ((($808)) + 16|0); //@line 620 "lpc.c"
     $810 = HEAP32[$809>>2]|0; //@line 620 "lpc.c"
     $811 = ($810|0)<(0); //@line 620 "lpc.c"
     $812 = $811 << 31 >> 31; //@line 620 "lpc.c"
     $813 = $6; //@line 620 "lpc.c"
     $814 = $12; //@line 620 "lpc.c"
     $815 = (($814) - 5)|0; //@line 620 "lpc.c"
     $816 = (($813) + ($815<<2)|0); //@line 620 "lpc.c"
     $817 = HEAP32[$816>>2]|0; //@line 620 "lpc.c"
     $818 = ($817|0)<(0); //@line 620 "lpc.c"
     $819 = $818 << 31 >> 31; //@line 620 "lpc.c"
     $820 = (___muldi3(($810|0),($812|0),($817|0),($819|0))|0); //@line 620 "lpc.c"
     $821 = tempRet0; //@line 620 "lpc.c"
     $822 = $13; //@line 620 "lpc.c"
     $823 = $822; //@line 620 "lpc.c"
     $824 = HEAP32[$823>>2]|0; //@line 620 "lpc.c"
     $825 = (($822) + 4)|0; //@line 620 "lpc.c"
     $826 = $825; //@line 620 "lpc.c"
     $827 = HEAP32[$826>>2]|0; //@line 620 "lpc.c"
     $828 = (_i64Add(($824|0),($827|0),($820|0),($821|0))|0); //@line 620 "lpc.c"
     $829 = tempRet0; //@line 620 "lpc.c"
     $830 = $13; //@line 620 "lpc.c"
     $831 = $830; //@line 620 "lpc.c"
     HEAP32[$831>>2] = $828; //@line 620 "lpc.c"
     $832 = (($830) + 4)|0; //@line 620 "lpc.c"
     $833 = $832; //@line 620 "lpc.c"
     HEAP32[$833>>2] = $829; //@line 620 "lpc.c"
     $834 = $8; //@line 621 "lpc.c"
     $835 = ((($834)) + 12|0); //@line 621 "lpc.c"
     $836 = HEAP32[$835>>2]|0; //@line 621 "lpc.c"
     $837 = ($836|0)<(0); //@line 621 "lpc.c"
     $838 = $837 << 31 >> 31; //@line 621 "lpc.c"
     $839 = $6; //@line 621 "lpc.c"
     $840 = $12; //@line 621 "lpc.c"
     $841 = (($840) - 4)|0; //@line 621 "lpc.c"
     $842 = (($839) + ($841<<2)|0); //@line 621 "lpc.c"
     $843 = HEAP32[$842>>2]|0; //@line 621 "lpc.c"
     $844 = ($843|0)<(0); //@line 621 "lpc.c"
     $845 = $844 << 31 >> 31; //@line 621 "lpc.c"
     $846 = (___muldi3(($836|0),($838|0),($843|0),($845|0))|0); //@line 621 "lpc.c"
     $847 = tempRet0; //@line 621 "lpc.c"
     $848 = $13; //@line 621 "lpc.c"
     $849 = $848; //@line 621 "lpc.c"
     $850 = HEAP32[$849>>2]|0; //@line 621 "lpc.c"
     $851 = (($848) + 4)|0; //@line 621 "lpc.c"
     $852 = $851; //@line 621 "lpc.c"
     $853 = HEAP32[$852>>2]|0; //@line 621 "lpc.c"
     $854 = (_i64Add(($850|0),($853|0),($846|0),($847|0))|0); //@line 621 "lpc.c"
     $855 = tempRet0; //@line 621 "lpc.c"
     $856 = $13; //@line 621 "lpc.c"
     $857 = $856; //@line 621 "lpc.c"
     HEAP32[$857>>2] = $854; //@line 621 "lpc.c"
     $858 = (($856) + 4)|0; //@line 621 "lpc.c"
     $859 = $858; //@line 621 "lpc.c"
     HEAP32[$859>>2] = $855; //@line 621 "lpc.c"
     $860 = $8; //@line 622 "lpc.c"
     $861 = ((($860)) + 8|0); //@line 622 "lpc.c"
     $862 = HEAP32[$861>>2]|0; //@line 622 "lpc.c"
     $863 = ($862|0)<(0); //@line 622 "lpc.c"
     $864 = $863 << 31 >> 31; //@line 622 "lpc.c"
     $865 = $6; //@line 622 "lpc.c"
     $866 = $12; //@line 622 "lpc.c"
     $867 = (($866) - 3)|0; //@line 622 "lpc.c"
     $868 = (($865) + ($867<<2)|0); //@line 622 "lpc.c"
     $869 = HEAP32[$868>>2]|0; //@line 622 "lpc.c"
     $870 = ($869|0)<(0); //@line 622 "lpc.c"
     $871 = $870 << 31 >> 31; //@line 622 "lpc.c"
     $872 = (___muldi3(($862|0),($864|0),($869|0),($871|0))|0); //@line 622 "lpc.c"
     $873 = tempRet0; //@line 622 "lpc.c"
     $874 = $13; //@line 622 "lpc.c"
     $875 = $874; //@line 622 "lpc.c"
     $876 = HEAP32[$875>>2]|0; //@line 622 "lpc.c"
     $877 = (($874) + 4)|0; //@line 622 "lpc.c"
     $878 = $877; //@line 622 "lpc.c"
     $879 = HEAP32[$878>>2]|0; //@line 622 "lpc.c"
     $880 = (_i64Add(($876|0),($879|0),($872|0),($873|0))|0); //@line 622 "lpc.c"
     $881 = tempRet0; //@line 622 "lpc.c"
     $882 = $13; //@line 622 "lpc.c"
     $883 = $882; //@line 622 "lpc.c"
     HEAP32[$883>>2] = $880; //@line 622 "lpc.c"
     $884 = (($882) + 4)|0; //@line 622 "lpc.c"
     $885 = $884; //@line 622 "lpc.c"
     HEAP32[$885>>2] = $881; //@line 622 "lpc.c"
     $886 = $8; //@line 623 "lpc.c"
     $887 = ((($886)) + 4|0); //@line 623 "lpc.c"
     $888 = HEAP32[$887>>2]|0; //@line 623 "lpc.c"
     $889 = ($888|0)<(0); //@line 623 "lpc.c"
     $890 = $889 << 31 >> 31; //@line 623 "lpc.c"
     $891 = $6; //@line 623 "lpc.c"
     $892 = $12; //@line 623 "lpc.c"
     $893 = (($892) - 2)|0; //@line 623 "lpc.c"
     $894 = (($891) + ($893<<2)|0); //@line 623 "lpc.c"
     $895 = HEAP32[$894>>2]|0; //@line 623 "lpc.c"
     $896 = ($895|0)<(0); //@line 623 "lpc.c"
     $897 = $896 << 31 >> 31; //@line 623 "lpc.c"
     $898 = (___muldi3(($888|0),($890|0),($895|0),($897|0))|0); //@line 623 "lpc.c"
     $899 = tempRet0; //@line 623 "lpc.c"
     $900 = $13; //@line 623 "lpc.c"
     $901 = $900; //@line 623 "lpc.c"
     $902 = HEAP32[$901>>2]|0; //@line 623 "lpc.c"
     $903 = (($900) + 4)|0; //@line 623 "lpc.c"
     $904 = $903; //@line 623 "lpc.c"
     $905 = HEAP32[$904>>2]|0; //@line 623 "lpc.c"
     $906 = (_i64Add(($902|0),($905|0),($898|0),($899|0))|0); //@line 623 "lpc.c"
     $907 = tempRet0; //@line 623 "lpc.c"
     $908 = $13; //@line 623 "lpc.c"
     $909 = $908; //@line 623 "lpc.c"
     HEAP32[$909>>2] = $906; //@line 623 "lpc.c"
     $910 = (($908) + 4)|0; //@line 623 "lpc.c"
     $911 = $910; //@line 623 "lpc.c"
     HEAP32[$911>>2] = $907; //@line 623 "lpc.c"
     $912 = $8; //@line 624 "lpc.c"
     $913 = HEAP32[$912>>2]|0; //@line 624 "lpc.c"
     $914 = ($913|0)<(0); //@line 624 "lpc.c"
     $915 = $914 << 31 >> 31; //@line 624 "lpc.c"
     $916 = $6; //@line 624 "lpc.c"
     $917 = $12; //@line 624 "lpc.c"
     $918 = (($917) - 1)|0; //@line 624 "lpc.c"
     $919 = (($916) + ($918<<2)|0); //@line 624 "lpc.c"
     $920 = HEAP32[$919>>2]|0; //@line 624 "lpc.c"
     $921 = ($920|0)<(0); //@line 624 "lpc.c"
     $922 = $921 << 31 >> 31; //@line 624 "lpc.c"
     $923 = (___muldi3(($913|0),($915|0),($920|0),($922|0))|0); //@line 624 "lpc.c"
     $924 = tempRet0; //@line 624 "lpc.c"
     $925 = $13; //@line 624 "lpc.c"
     $926 = $925; //@line 624 "lpc.c"
     $927 = HEAP32[$926>>2]|0; //@line 624 "lpc.c"
     $928 = (($925) + 4)|0; //@line 624 "lpc.c"
     $929 = $928; //@line 624 "lpc.c"
     $930 = HEAP32[$929>>2]|0; //@line 624 "lpc.c"
     $931 = (_i64Add(($927|0),($930|0),($923|0),($924|0))|0); //@line 624 "lpc.c"
     $932 = tempRet0; //@line 624 "lpc.c"
     $933 = $13; //@line 624 "lpc.c"
     $934 = $933; //@line 624 "lpc.c"
     HEAP32[$934>>2] = $931; //@line 624 "lpc.c"
     $935 = (($933) + 4)|0; //@line 624 "lpc.c"
     $936 = $935; //@line 624 "lpc.c"
     HEAP32[$936>>2] = $932; //@line 624 "lpc.c"
     $937 = $6; //@line 625 "lpc.c"
     $938 = $12; //@line 625 "lpc.c"
     $939 = (($937) + ($938<<2)|0); //@line 625 "lpc.c"
     $940 = HEAP32[$939>>2]|0; //@line 625 "lpc.c"
     $941 = $13; //@line 625 "lpc.c"
     $942 = $941; //@line 625 "lpc.c"
     $943 = HEAP32[$942>>2]|0; //@line 625 "lpc.c"
     $944 = (($941) + 4)|0; //@line 625 "lpc.c"
     $945 = $944; //@line 625 "lpc.c"
     $946 = HEAP32[$945>>2]|0; //@line 625 "lpc.c"
     $947 = $10; //@line 625 "lpc.c"
     $948 = (_bitshift64Ashr(($943|0),($946|0),($947|0))|0); //@line 625 "lpc.c"
     $949 = tempRet0; //@line 625 "lpc.c"
     $950 = (($940) - ($948))|0; //@line 625 "lpc.c"
     $951 = $11; //@line 625 "lpc.c"
     $952 = $12; //@line 625 "lpc.c"
     $953 = (($951) + ($952<<2)|0); //@line 625 "lpc.c"
     HEAP32[$953>>2] = $950; //@line 625 "lpc.c"
     $954 = $12; //@line 613 "lpc.c"
     $955 = (($954) + 1)|0; //@line 613 "lpc.c"
     $12 = $955; //@line 613 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $956 = $12; //@line 629 "lpc.c"
     $957 = $7; //@line 629 "lpc.c"
     $958 = ($956|0)<($957|0); //@line 629 "lpc.c"
     if (!($958)) {
      break;
     }
     $959 = $13; //@line 630 "lpc.c"
     $960 = $959; //@line 630 "lpc.c"
     HEAP32[$960>>2] = 0; //@line 630 "lpc.c"
     $961 = (($959) + 4)|0; //@line 630 "lpc.c"
     $962 = $961; //@line 630 "lpc.c"
     HEAP32[$962>>2] = 0; //@line 630 "lpc.c"
     $963 = $8; //@line 631 "lpc.c"
     $964 = ((($963)) + 32|0); //@line 631 "lpc.c"
     $965 = HEAP32[$964>>2]|0; //@line 631 "lpc.c"
     $966 = ($965|0)<(0); //@line 631 "lpc.c"
     $967 = $966 << 31 >> 31; //@line 631 "lpc.c"
     $968 = $6; //@line 631 "lpc.c"
     $969 = $12; //@line 631 "lpc.c"
     $970 = (($969) - 9)|0; //@line 631 "lpc.c"
     $971 = (($968) + ($970<<2)|0); //@line 631 "lpc.c"
     $972 = HEAP32[$971>>2]|0; //@line 631 "lpc.c"
     $973 = ($972|0)<(0); //@line 631 "lpc.c"
     $974 = $973 << 31 >> 31; //@line 631 "lpc.c"
     $975 = (___muldi3(($965|0),($967|0),($972|0),($974|0))|0); //@line 631 "lpc.c"
     $976 = tempRet0; //@line 631 "lpc.c"
     $977 = $13; //@line 631 "lpc.c"
     $978 = $977; //@line 631 "lpc.c"
     $979 = HEAP32[$978>>2]|0; //@line 631 "lpc.c"
     $980 = (($977) + 4)|0; //@line 631 "lpc.c"
     $981 = $980; //@line 631 "lpc.c"
     $982 = HEAP32[$981>>2]|0; //@line 631 "lpc.c"
     $983 = (_i64Add(($979|0),($982|0),($975|0),($976|0))|0); //@line 631 "lpc.c"
     $984 = tempRet0; //@line 631 "lpc.c"
     $985 = $13; //@line 631 "lpc.c"
     $986 = $985; //@line 631 "lpc.c"
     HEAP32[$986>>2] = $983; //@line 631 "lpc.c"
     $987 = (($985) + 4)|0; //@line 631 "lpc.c"
     $988 = $987; //@line 631 "lpc.c"
     HEAP32[$988>>2] = $984; //@line 631 "lpc.c"
     $989 = $8; //@line 632 "lpc.c"
     $990 = ((($989)) + 28|0); //@line 632 "lpc.c"
     $991 = HEAP32[$990>>2]|0; //@line 632 "lpc.c"
     $992 = ($991|0)<(0); //@line 632 "lpc.c"
     $993 = $992 << 31 >> 31; //@line 632 "lpc.c"
     $994 = $6; //@line 632 "lpc.c"
     $995 = $12; //@line 632 "lpc.c"
     $996 = (($995) - 8)|0; //@line 632 "lpc.c"
     $997 = (($994) + ($996<<2)|0); //@line 632 "lpc.c"
     $998 = HEAP32[$997>>2]|0; //@line 632 "lpc.c"
     $999 = ($998|0)<(0); //@line 632 "lpc.c"
     $1000 = $999 << 31 >> 31; //@line 632 "lpc.c"
     $1001 = (___muldi3(($991|0),($993|0),($998|0),($1000|0))|0); //@line 632 "lpc.c"
     $1002 = tempRet0; //@line 632 "lpc.c"
     $1003 = $13; //@line 632 "lpc.c"
     $1004 = $1003; //@line 632 "lpc.c"
     $1005 = HEAP32[$1004>>2]|0; //@line 632 "lpc.c"
     $1006 = (($1003) + 4)|0; //@line 632 "lpc.c"
     $1007 = $1006; //@line 632 "lpc.c"
     $1008 = HEAP32[$1007>>2]|0; //@line 632 "lpc.c"
     $1009 = (_i64Add(($1005|0),($1008|0),($1001|0),($1002|0))|0); //@line 632 "lpc.c"
     $1010 = tempRet0; //@line 632 "lpc.c"
     $1011 = $13; //@line 632 "lpc.c"
     $1012 = $1011; //@line 632 "lpc.c"
     HEAP32[$1012>>2] = $1009; //@line 632 "lpc.c"
     $1013 = (($1011) + 4)|0; //@line 632 "lpc.c"
     $1014 = $1013; //@line 632 "lpc.c"
     HEAP32[$1014>>2] = $1010; //@line 632 "lpc.c"
     $1015 = $8; //@line 633 "lpc.c"
     $1016 = ((($1015)) + 24|0); //@line 633 "lpc.c"
     $1017 = HEAP32[$1016>>2]|0; //@line 633 "lpc.c"
     $1018 = ($1017|0)<(0); //@line 633 "lpc.c"
     $1019 = $1018 << 31 >> 31; //@line 633 "lpc.c"
     $1020 = $6; //@line 633 "lpc.c"
     $1021 = $12; //@line 633 "lpc.c"
     $1022 = (($1021) - 7)|0; //@line 633 "lpc.c"
     $1023 = (($1020) + ($1022<<2)|0); //@line 633 "lpc.c"
     $1024 = HEAP32[$1023>>2]|0; //@line 633 "lpc.c"
     $1025 = ($1024|0)<(0); //@line 633 "lpc.c"
     $1026 = $1025 << 31 >> 31; //@line 633 "lpc.c"
     $1027 = (___muldi3(($1017|0),($1019|0),($1024|0),($1026|0))|0); //@line 633 "lpc.c"
     $1028 = tempRet0; //@line 633 "lpc.c"
     $1029 = $13; //@line 633 "lpc.c"
     $1030 = $1029; //@line 633 "lpc.c"
     $1031 = HEAP32[$1030>>2]|0; //@line 633 "lpc.c"
     $1032 = (($1029) + 4)|0; //@line 633 "lpc.c"
     $1033 = $1032; //@line 633 "lpc.c"
     $1034 = HEAP32[$1033>>2]|0; //@line 633 "lpc.c"
     $1035 = (_i64Add(($1031|0),($1034|0),($1027|0),($1028|0))|0); //@line 633 "lpc.c"
     $1036 = tempRet0; //@line 633 "lpc.c"
     $1037 = $13; //@line 633 "lpc.c"
     $1038 = $1037; //@line 633 "lpc.c"
     HEAP32[$1038>>2] = $1035; //@line 633 "lpc.c"
     $1039 = (($1037) + 4)|0; //@line 633 "lpc.c"
     $1040 = $1039; //@line 633 "lpc.c"
     HEAP32[$1040>>2] = $1036; //@line 633 "lpc.c"
     $1041 = $8; //@line 634 "lpc.c"
     $1042 = ((($1041)) + 20|0); //@line 634 "lpc.c"
     $1043 = HEAP32[$1042>>2]|0; //@line 634 "lpc.c"
     $1044 = ($1043|0)<(0); //@line 634 "lpc.c"
     $1045 = $1044 << 31 >> 31; //@line 634 "lpc.c"
     $1046 = $6; //@line 634 "lpc.c"
     $1047 = $12; //@line 634 "lpc.c"
     $1048 = (($1047) - 6)|0; //@line 634 "lpc.c"
     $1049 = (($1046) + ($1048<<2)|0); //@line 634 "lpc.c"
     $1050 = HEAP32[$1049>>2]|0; //@line 634 "lpc.c"
     $1051 = ($1050|0)<(0); //@line 634 "lpc.c"
     $1052 = $1051 << 31 >> 31; //@line 634 "lpc.c"
     $1053 = (___muldi3(($1043|0),($1045|0),($1050|0),($1052|0))|0); //@line 634 "lpc.c"
     $1054 = tempRet0; //@line 634 "lpc.c"
     $1055 = $13; //@line 634 "lpc.c"
     $1056 = $1055; //@line 634 "lpc.c"
     $1057 = HEAP32[$1056>>2]|0; //@line 634 "lpc.c"
     $1058 = (($1055) + 4)|0; //@line 634 "lpc.c"
     $1059 = $1058; //@line 634 "lpc.c"
     $1060 = HEAP32[$1059>>2]|0; //@line 634 "lpc.c"
     $1061 = (_i64Add(($1057|0),($1060|0),($1053|0),($1054|0))|0); //@line 634 "lpc.c"
     $1062 = tempRet0; //@line 634 "lpc.c"
     $1063 = $13; //@line 634 "lpc.c"
     $1064 = $1063; //@line 634 "lpc.c"
     HEAP32[$1064>>2] = $1061; //@line 634 "lpc.c"
     $1065 = (($1063) + 4)|0; //@line 634 "lpc.c"
     $1066 = $1065; //@line 634 "lpc.c"
     HEAP32[$1066>>2] = $1062; //@line 634 "lpc.c"
     $1067 = $8; //@line 635 "lpc.c"
     $1068 = ((($1067)) + 16|0); //@line 635 "lpc.c"
     $1069 = HEAP32[$1068>>2]|0; //@line 635 "lpc.c"
     $1070 = ($1069|0)<(0); //@line 635 "lpc.c"
     $1071 = $1070 << 31 >> 31; //@line 635 "lpc.c"
     $1072 = $6; //@line 635 "lpc.c"
     $1073 = $12; //@line 635 "lpc.c"
     $1074 = (($1073) - 5)|0; //@line 635 "lpc.c"
     $1075 = (($1072) + ($1074<<2)|0); //@line 635 "lpc.c"
     $1076 = HEAP32[$1075>>2]|0; //@line 635 "lpc.c"
     $1077 = ($1076|0)<(0); //@line 635 "lpc.c"
     $1078 = $1077 << 31 >> 31; //@line 635 "lpc.c"
     $1079 = (___muldi3(($1069|0),($1071|0),($1076|0),($1078|0))|0); //@line 635 "lpc.c"
     $1080 = tempRet0; //@line 635 "lpc.c"
     $1081 = $13; //@line 635 "lpc.c"
     $1082 = $1081; //@line 635 "lpc.c"
     $1083 = HEAP32[$1082>>2]|0; //@line 635 "lpc.c"
     $1084 = (($1081) + 4)|0; //@line 635 "lpc.c"
     $1085 = $1084; //@line 635 "lpc.c"
     $1086 = HEAP32[$1085>>2]|0; //@line 635 "lpc.c"
     $1087 = (_i64Add(($1083|0),($1086|0),($1079|0),($1080|0))|0); //@line 635 "lpc.c"
     $1088 = tempRet0; //@line 635 "lpc.c"
     $1089 = $13; //@line 635 "lpc.c"
     $1090 = $1089; //@line 635 "lpc.c"
     HEAP32[$1090>>2] = $1087; //@line 635 "lpc.c"
     $1091 = (($1089) + 4)|0; //@line 635 "lpc.c"
     $1092 = $1091; //@line 635 "lpc.c"
     HEAP32[$1092>>2] = $1088; //@line 635 "lpc.c"
     $1093 = $8; //@line 636 "lpc.c"
     $1094 = ((($1093)) + 12|0); //@line 636 "lpc.c"
     $1095 = HEAP32[$1094>>2]|0; //@line 636 "lpc.c"
     $1096 = ($1095|0)<(0); //@line 636 "lpc.c"
     $1097 = $1096 << 31 >> 31; //@line 636 "lpc.c"
     $1098 = $6; //@line 636 "lpc.c"
     $1099 = $12; //@line 636 "lpc.c"
     $1100 = (($1099) - 4)|0; //@line 636 "lpc.c"
     $1101 = (($1098) + ($1100<<2)|0); //@line 636 "lpc.c"
     $1102 = HEAP32[$1101>>2]|0; //@line 636 "lpc.c"
     $1103 = ($1102|0)<(0); //@line 636 "lpc.c"
     $1104 = $1103 << 31 >> 31; //@line 636 "lpc.c"
     $1105 = (___muldi3(($1095|0),($1097|0),($1102|0),($1104|0))|0); //@line 636 "lpc.c"
     $1106 = tempRet0; //@line 636 "lpc.c"
     $1107 = $13; //@line 636 "lpc.c"
     $1108 = $1107; //@line 636 "lpc.c"
     $1109 = HEAP32[$1108>>2]|0; //@line 636 "lpc.c"
     $1110 = (($1107) + 4)|0; //@line 636 "lpc.c"
     $1111 = $1110; //@line 636 "lpc.c"
     $1112 = HEAP32[$1111>>2]|0; //@line 636 "lpc.c"
     $1113 = (_i64Add(($1109|0),($1112|0),($1105|0),($1106|0))|0); //@line 636 "lpc.c"
     $1114 = tempRet0; //@line 636 "lpc.c"
     $1115 = $13; //@line 636 "lpc.c"
     $1116 = $1115; //@line 636 "lpc.c"
     HEAP32[$1116>>2] = $1113; //@line 636 "lpc.c"
     $1117 = (($1115) + 4)|0; //@line 636 "lpc.c"
     $1118 = $1117; //@line 636 "lpc.c"
     HEAP32[$1118>>2] = $1114; //@line 636 "lpc.c"
     $1119 = $8; //@line 637 "lpc.c"
     $1120 = ((($1119)) + 8|0); //@line 637 "lpc.c"
     $1121 = HEAP32[$1120>>2]|0; //@line 637 "lpc.c"
     $1122 = ($1121|0)<(0); //@line 637 "lpc.c"
     $1123 = $1122 << 31 >> 31; //@line 637 "lpc.c"
     $1124 = $6; //@line 637 "lpc.c"
     $1125 = $12; //@line 637 "lpc.c"
     $1126 = (($1125) - 3)|0; //@line 637 "lpc.c"
     $1127 = (($1124) + ($1126<<2)|0); //@line 637 "lpc.c"
     $1128 = HEAP32[$1127>>2]|0; //@line 637 "lpc.c"
     $1129 = ($1128|0)<(0); //@line 637 "lpc.c"
     $1130 = $1129 << 31 >> 31; //@line 637 "lpc.c"
     $1131 = (___muldi3(($1121|0),($1123|0),($1128|0),($1130|0))|0); //@line 637 "lpc.c"
     $1132 = tempRet0; //@line 637 "lpc.c"
     $1133 = $13; //@line 637 "lpc.c"
     $1134 = $1133; //@line 637 "lpc.c"
     $1135 = HEAP32[$1134>>2]|0; //@line 637 "lpc.c"
     $1136 = (($1133) + 4)|0; //@line 637 "lpc.c"
     $1137 = $1136; //@line 637 "lpc.c"
     $1138 = HEAP32[$1137>>2]|0; //@line 637 "lpc.c"
     $1139 = (_i64Add(($1135|0),($1138|0),($1131|0),($1132|0))|0); //@line 637 "lpc.c"
     $1140 = tempRet0; //@line 637 "lpc.c"
     $1141 = $13; //@line 637 "lpc.c"
     $1142 = $1141; //@line 637 "lpc.c"
     HEAP32[$1142>>2] = $1139; //@line 637 "lpc.c"
     $1143 = (($1141) + 4)|0; //@line 637 "lpc.c"
     $1144 = $1143; //@line 637 "lpc.c"
     HEAP32[$1144>>2] = $1140; //@line 637 "lpc.c"
     $1145 = $8; //@line 638 "lpc.c"
     $1146 = ((($1145)) + 4|0); //@line 638 "lpc.c"
     $1147 = HEAP32[$1146>>2]|0; //@line 638 "lpc.c"
     $1148 = ($1147|0)<(0); //@line 638 "lpc.c"
     $1149 = $1148 << 31 >> 31; //@line 638 "lpc.c"
     $1150 = $6; //@line 638 "lpc.c"
     $1151 = $12; //@line 638 "lpc.c"
     $1152 = (($1151) - 2)|0; //@line 638 "lpc.c"
     $1153 = (($1150) + ($1152<<2)|0); //@line 638 "lpc.c"
     $1154 = HEAP32[$1153>>2]|0; //@line 638 "lpc.c"
     $1155 = ($1154|0)<(0); //@line 638 "lpc.c"
     $1156 = $1155 << 31 >> 31; //@line 638 "lpc.c"
     $1157 = (___muldi3(($1147|0),($1149|0),($1154|0),($1156|0))|0); //@line 638 "lpc.c"
     $1158 = tempRet0; //@line 638 "lpc.c"
     $1159 = $13; //@line 638 "lpc.c"
     $1160 = $1159; //@line 638 "lpc.c"
     $1161 = HEAP32[$1160>>2]|0; //@line 638 "lpc.c"
     $1162 = (($1159) + 4)|0; //@line 638 "lpc.c"
     $1163 = $1162; //@line 638 "lpc.c"
     $1164 = HEAP32[$1163>>2]|0; //@line 638 "lpc.c"
     $1165 = (_i64Add(($1161|0),($1164|0),($1157|0),($1158|0))|0); //@line 638 "lpc.c"
     $1166 = tempRet0; //@line 638 "lpc.c"
     $1167 = $13; //@line 638 "lpc.c"
     $1168 = $1167; //@line 638 "lpc.c"
     HEAP32[$1168>>2] = $1165; //@line 638 "lpc.c"
     $1169 = (($1167) + 4)|0; //@line 638 "lpc.c"
     $1170 = $1169; //@line 638 "lpc.c"
     HEAP32[$1170>>2] = $1166; //@line 638 "lpc.c"
     $1171 = $8; //@line 639 "lpc.c"
     $1172 = HEAP32[$1171>>2]|0; //@line 639 "lpc.c"
     $1173 = ($1172|0)<(0); //@line 639 "lpc.c"
     $1174 = $1173 << 31 >> 31; //@line 639 "lpc.c"
     $1175 = $6; //@line 639 "lpc.c"
     $1176 = $12; //@line 639 "lpc.c"
     $1177 = (($1176) - 1)|0; //@line 639 "lpc.c"
     $1178 = (($1175) + ($1177<<2)|0); //@line 639 "lpc.c"
     $1179 = HEAP32[$1178>>2]|0; //@line 639 "lpc.c"
     $1180 = ($1179|0)<(0); //@line 639 "lpc.c"
     $1181 = $1180 << 31 >> 31; //@line 639 "lpc.c"
     $1182 = (___muldi3(($1172|0),($1174|0),($1179|0),($1181|0))|0); //@line 639 "lpc.c"
     $1183 = tempRet0; //@line 639 "lpc.c"
     $1184 = $13; //@line 639 "lpc.c"
     $1185 = $1184; //@line 639 "lpc.c"
     $1186 = HEAP32[$1185>>2]|0; //@line 639 "lpc.c"
     $1187 = (($1184) + 4)|0; //@line 639 "lpc.c"
     $1188 = $1187; //@line 639 "lpc.c"
     $1189 = HEAP32[$1188>>2]|0; //@line 639 "lpc.c"
     $1190 = (_i64Add(($1186|0),($1189|0),($1182|0),($1183|0))|0); //@line 639 "lpc.c"
     $1191 = tempRet0; //@line 639 "lpc.c"
     $1192 = $13; //@line 639 "lpc.c"
     $1193 = $1192; //@line 639 "lpc.c"
     HEAP32[$1193>>2] = $1190; //@line 639 "lpc.c"
     $1194 = (($1192) + 4)|0; //@line 639 "lpc.c"
     $1195 = $1194; //@line 639 "lpc.c"
     HEAP32[$1195>>2] = $1191; //@line 639 "lpc.c"
     $1196 = $6; //@line 640 "lpc.c"
     $1197 = $12; //@line 640 "lpc.c"
     $1198 = (($1196) + ($1197<<2)|0); //@line 640 "lpc.c"
     $1199 = HEAP32[$1198>>2]|0; //@line 640 "lpc.c"
     $1200 = $13; //@line 640 "lpc.c"
     $1201 = $1200; //@line 640 "lpc.c"
     $1202 = HEAP32[$1201>>2]|0; //@line 640 "lpc.c"
     $1203 = (($1200) + 4)|0; //@line 640 "lpc.c"
     $1204 = $1203; //@line 640 "lpc.c"
     $1205 = HEAP32[$1204>>2]|0; //@line 640 "lpc.c"
     $1206 = $10; //@line 640 "lpc.c"
     $1207 = (_bitshift64Ashr(($1202|0),($1205|0),($1206|0))|0); //@line 640 "lpc.c"
     $1208 = tempRet0; //@line 640 "lpc.c"
     $1209 = (($1199) - ($1207))|0; //@line 640 "lpc.c"
     $1210 = $11; //@line 640 "lpc.c"
     $1211 = $12; //@line 640 "lpc.c"
     $1212 = (($1210) + ($1211<<2)|0); //@line 640 "lpc.c"
     HEAP32[$1212>>2] = $1209; //@line 640 "lpc.c"
     $1213 = $12; //@line 629 "lpc.c"
     $1214 = (($1213) + 1)|0; //@line 629 "lpc.c"
     $12 = $1214; //@line 629 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  }
 }
 $1215 = ($18>>>0)>(4); //@line 645 "lpc.c"
 $1216 = $9;
 if ($1215) {
  $1217 = ($1216>>>0)>(6); //@line 646 "lpc.c"
  $1218 = $9;
  if ($1217) {
   $1219 = ($1218|0)==(8); //@line 647 "lpc.c"
   $12 = 0;
   if ($1219) {
    while(1) {
     $1220 = $12; //@line 648 "lpc.c"
     $1221 = $7; //@line 648 "lpc.c"
     $1222 = ($1220|0)<($1221|0); //@line 648 "lpc.c"
     if (!($1222)) {
      break;
     }
     $1223 = $13; //@line 649 "lpc.c"
     $1224 = $1223; //@line 649 "lpc.c"
     HEAP32[$1224>>2] = 0; //@line 649 "lpc.c"
     $1225 = (($1223) + 4)|0; //@line 649 "lpc.c"
     $1226 = $1225; //@line 649 "lpc.c"
     HEAP32[$1226>>2] = 0; //@line 649 "lpc.c"
     $1227 = $8; //@line 650 "lpc.c"
     $1228 = ((($1227)) + 28|0); //@line 650 "lpc.c"
     $1229 = HEAP32[$1228>>2]|0; //@line 650 "lpc.c"
     $1230 = ($1229|0)<(0); //@line 650 "lpc.c"
     $1231 = $1230 << 31 >> 31; //@line 650 "lpc.c"
     $1232 = $6; //@line 650 "lpc.c"
     $1233 = $12; //@line 650 "lpc.c"
     $1234 = (($1233) - 8)|0; //@line 650 "lpc.c"
     $1235 = (($1232) + ($1234<<2)|0); //@line 650 "lpc.c"
     $1236 = HEAP32[$1235>>2]|0; //@line 650 "lpc.c"
     $1237 = ($1236|0)<(0); //@line 650 "lpc.c"
     $1238 = $1237 << 31 >> 31; //@line 650 "lpc.c"
     $1239 = (___muldi3(($1229|0),($1231|0),($1236|0),($1238|0))|0); //@line 650 "lpc.c"
     $1240 = tempRet0; //@line 650 "lpc.c"
     $1241 = $13; //@line 650 "lpc.c"
     $1242 = $1241; //@line 650 "lpc.c"
     $1243 = HEAP32[$1242>>2]|0; //@line 650 "lpc.c"
     $1244 = (($1241) + 4)|0; //@line 650 "lpc.c"
     $1245 = $1244; //@line 650 "lpc.c"
     $1246 = HEAP32[$1245>>2]|0; //@line 650 "lpc.c"
     $1247 = (_i64Add(($1243|0),($1246|0),($1239|0),($1240|0))|0); //@line 650 "lpc.c"
     $1248 = tempRet0; //@line 650 "lpc.c"
     $1249 = $13; //@line 650 "lpc.c"
     $1250 = $1249; //@line 650 "lpc.c"
     HEAP32[$1250>>2] = $1247; //@line 650 "lpc.c"
     $1251 = (($1249) + 4)|0; //@line 650 "lpc.c"
     $1252 = $1251; //@line 650 "lpc.c"
     HEAP32[$1252>>2] = $1248; //@line 650 "lpc.c"
     $1253 = $8; //@line 651 "lpc.c"
     $1254 = ((($1253)) + 24|0); //@line 651 "lpc.c"
     $1255 = HEAP32[$1254>>2]|0; //@line 651 "lpc.c"
     $1256 = ($1255|0)<(0); //@line 651 "lpc.c"
     $1257 = $1256 << 31 >> 31; //@line 651 "lpc.c"
     $1258 = $6; //@line 651 "lpc.c"
     $1259 = $12; //@line 651 "lpc.c"
     $1260 = (($1259) - 7)|0; //@line 651 "lpc.c"
     $1261 = (($1258) + ($1260<<2)|0); //@line 651 "lpc.c"
     $1262 = HEAP32[$1261>>2]|0; //@line 651 "lpc.c"
     $1263 = ($1262|0)<(0); //@line 651 "lpc.c"
     $1264 = $1263 << 31 >> 31; //@line 651 "lpc.c"
     $1265 = (___muldi3(($1255|0),($1257|0),($1262|0),($1264|0))|0); //@line 651 "lpc.c"
     $1266 = tempRet0; //@line 651 "lpc.c"
     $1267 = $13; //@line 651 "lpc.c"
     $1268 = $1267; //@line 651 "lpc.c"
     $1269 = HEAP32[$1268>>2]|0; //@line 651 "lpc.c"
     $1270 = (($1267) + 4)|0; //@line 651 "lpc.c"
     $1271 = $1270; //@line 651 "lpc.c"
     $1272 = HEAP32[$1271>>2]|0; //@line 651 "lpc.c"
     $1273 = (_i64Add(($1269|0),($1272|0),($1265|0),($1266|0))|0); //@line 651 "lpc.c"
     $1274 = tempRet0; //@line 651 "lpc.c"
     $1275 = $13; //@line 651 "lpc.c"
     $1276 = $1275; //@line 651 "lpc.c"
     HEAP32[$1276>>2] = $1273; //@line 651 "lpc.c"
     $1277 = (($1275) + 4)|0; //@line 651 "lpc.c"
     $1278 = $1277; //@line 651 "lpc.c"
     HEAP32[$1278>>2] = $1274; //@line 651 "lpc.c"
     $1279 = $8; //@line 652 "lpc.c"
     $1280 = ((($1279)) + 20|0); //@line 652 "lpc.c"
     $1281 = HEAP32[$1280>>2]|0; //@line 652 "lpc.c"
     $1282 = ($1281|0)<(0); //@line 652 "lpc.c"
     $1283 = $1282 << 31 >> 31; //@line 652 "lpc.c"
     $1284 = $6; //@line 652 "lpc.c"
     $1285 = $12; //@line 652 "lpc.c"
     $1286 = (($1285) - 6)|0; //@line 652 "lpc.c"
     $1287 = (($1284) + ($1286<<2)|0); //@line 652 "lpc.c"
     $1288 = HEAP32[$1287>>2]|0; //@line 652 "lpc.c"
     $1289 = ($1288|0)<(0); //@line 652 "lpc.c"
     $1290 = $1289 << 31 >> 31; //@line 652 "lpc.c"
     $1291 = (___muldi3(($1281|0),($1283|0),($1288|0),($1290|0))|0); //@line 652 "lpc.c"
     $1292 = tempRet0; //@line 652 "lpc.c"
     $1293 = $13; //@line 652 "lpc.c"
     $1294 = $1293; //@line 652 "lpc.c"
     $1295 = HEAP32[$1294>>2]|0; //@line 652 "lpc.c"
     $1296 = (($1293) + 4)|0; //@line 652 "lpc.c"
     $1297 = $1296; //@line 652 "lpc.c"
     $1298 = HEAP32[$1297>>2]|0; //@line 652 "lpc.c"
     $1299 = (_i64Add(($1295|0),($1298|0),($1291|0),($1292|0))|0); //@line 652 "lpc.c"
     $1300 = tempRet0; //@line 652 "lpc.c"
     $1301 = $13; //@line 652 "lpc.c"
     $1302 = $1301; //@line 652 "lpc.c"
     HEAP32[$1302>>2] = $1299; //@line 652 "lpc.c"
     $1303 = (($1301) + 4)|0; //@line 652 "lpc.c"
     $1304 = $1303; //@line 652 "lpc.c"
     HEAP32[$1304>>2] = $1300; //@line 652 "lpc.c"
     $1305 = $8; //@line 653 "lpc.c"
     $1306 = ((($1305)) + 16|0); //@line 653 "lpc.c"
     $1307 = HEAP32[$1306>>2]|0; //@line 653 "lpc.c"
     $1308 = ($1307|0)<(0); //@line 653 "lpc.c"
     $1309 = $1308 << 31 >> 31; //@line 653 "lpc.c"
     $1310 = $6; //@line 653 "lpc.c"
     $1311 = $12; //@line 653 "lpc.c"
     $1312 = (($1311) - 5)|0; //@line 653 "lpc.c"
     $1313 = (($1310) + ($1312<<2)|0); //@line 653 "lpc.c"
     $1314 = HEAP32[$1313>>2]|0; //@line 653 "lpc.c"
     $1315 = ($1314|0)<(0); //@line 653 "lpc.c"
     $1316 = $1315 << 31 >> 31; //@line 653 "lpc.c"
     $1317 = (___muldi3(($1307|0),($1309|0),($1314|0),($1316|0))|0); //@line 653 "lpc.c"
     $1318 = tempRet0; //@line 653 "lpc.c"
     $1319 = $13; //@line 653 "lpc.c"
     $1320 = $1319; //@line 653 "lpc.c"
     $1321 = HEAP32[$1320>>2]|0; //@line 653 "lpc.c"
     $1322 = (($1319) + 4)|0; //@line 653 "lpc.c"
     $1323 = $1322; //@line 653 "lpc.c"
     $1324 = HEAP32[$1323>>2]|0; //@line 653 "lpc.c"
     $1325 = (_i64Add(($1321|0),($1324|0),($1317|0),($1318|0))|0); //@line 653 "lpc.c"
     $1326 = tempRet0; //@line 653 "lpc.c"
     $1327 = $13; //@line 653 "lpc.c"
     $1328 = $1327; //@line 653 "lpc.c"
     HEAP32[$1328>>2] = $1325; //@line 653 "lpc.c"
     $1329 = (($1327) + 4)|0; //@line 653 "lpc.c"
     $1330 = $1329; //@line 653 "lpc.c"
     HEAP32[$1330>>2] = $1326; //@line 653 "lpc.c"
     $1331 = $8; //@line 654 "lpc.c"
     $1332 = ((($1331)) + 12|0); //@line 654 "lpc.c"
     $1333 = HEAP32[$1332>>2]|0; //@line 654 "lpc.c"
     $1334 = ($1333|0)<(0); //@line 654 "lpc.c"
     $1335 = $1334 << 31 >> 31; //@line 654 "lpc.c"
     $1336 = $6; //@line 654 "lpc.c"
     $1337 = $12; //@line 654 "lpc.c"
     $1338 = (($1337) - 4)|0; //@line 654 "lpc.c"
     $1339 = (($1336) + ($1338<<2)|0); //@line 654 "lpc.c"
     $1340 = HEAP32[$1339>>2]|0; //@line 654 "lpc.c"
     $1341 = ($1340|0)<(0); //@line 654 "lpc.c"
     $1342 = $1341 << 31 >> 31; //@line 654 "lpc.c"
     $1343 = (___muldi3(($1333|0),($1335|0),($1340|0),($1342|0))|0); //@line 654 "lpc.c"
     $1344 = tempRet0; //@line 654 "lpc.c"
     $1345 = $13; //@line 654 "lpc.c"
     $1346 = $1345; //@line 654 "lpc.c"
     $1347 = HEAP32[$1346>>2]|0; //@line 654 "lpc.c"
     $1348 = (($1345) + 4)|0; //@line 654 "lpc.c"
     $1349 = $1348; //@line 654 "lpc.c"
     $1350 = HEAP32[$1349>>2]|0; //@line 654 "lpc.c"
     $1351 = (_i64Add(($1347|0),($1350|0),($1343|0),($1344|0))|0); //@line 654 "lpc.c"
     $1352 = tempRet0; //@line 654 "lpc.c"
     $1353 = $13; //@line 654 "lpc.c"
     $1354 = $1353; //@line 654 "lpc.c"
     HEAP32[$1354>>2] = $1351; //@line 654 "lpc.c"
     $1355 = (($1353) + 4)|0; //@line 654 "lpc.c"
     $1356 = $1355; //@line 654 "lpc.c"
     HEAP32[$1356>>2] = $1352; //@line 654 "lpc.c"
     $1357 = $8; //@line 655 "lpc.c"
     $1358 = ((($1357)) + 8|0); //@line 655 "lpc.c"
     $1359 = HEAP32[$1358>>2]|0; //@line 655 "lpc.c"
     $1360 = ($1359|0)<(0); //@line 655 "lpc.c"
     $1361 = $1360 << 31 >> 31; //@line 655 "lpc.c"
     $1362 = $6; //@line 655 "lpc.c"
     $1363 = $12; //@line 655 "lpc.c"
     $1364 = (($1363) - 3)|0; //@line 655 "lpc.c"
     $1365 = (($1362) + ($1364<<2)|0); //@line 655 "lpc.c"
     $1366 = HEAP32[$1365>>2]|0; //@line 655 "lpc.c"
     $1367 = ($1366|0)<(0); //@line 655 "lpc.c"
     $1368 = $1367 << 31 >> 31; //@line 655 "lpc.c"
     $1369 = (___muldi3(($1359|0),($1361|0),($1366|0),($1368|0))|0); //@line 655 "lpc.c"
     $1370 = tempRet0; //@line 655 "lpc.c"
     $1371 = $13; //@line 655 "lpc.c"
     $1372 = $1371; //@line 655 "lpc.c"
     $1373 = HEAP32[$1372>>2]|0; //@line 655 "lpc.c"
     $1374 = (($1371) + 4)|0; //@line 655 "lpc.c"
     $1375 = $1374; //@line 655 "lpc.c"
     $1376 = HEAP32[$1375>>2]|0; //@line 655 "lpc.c"
     $1377 = (_i64Add(($1373|0),($1376|0),($1369|0),($1370|0))|0); //@line 655 "lpc.c"
     $1378 = tempRet0; //@line 655 "lpc.c"
     $1379 = $13; //@line 655 "lpc.c"
     $1380 = $1379; //@line 655 "lpc.c"
     HEAP32[$1380>>2] = $1377; //@line 655 "lpc.c"
     $1381 = (($1379) + 4)|0; //@line 655 "lpc.c"
     $1382 = $1381; //@line 655 "lpc.c"
     HEAP32[$1382>>2] = $1378; //@line 655 "lpc.c"
     $1383 = $8; //@line 656 "lpc.c"
     $1384 = ((($1383)) + 4|0); //@line 656 "lpc.c"
     $1385 = HEAP32[$1384>>2]|0; //@line 656 "lpc.c"
     $1386 = ($1385|0)<(0); //@line 656 "lpc.c"
     $1387 = $1386 << 31 >> 31; //@line 656 "lpc.c"
     $1388 = $6; //@line 656 "lpc.c"
     $1389 = $12; //@line 656 "lpc.c"
     $1390 = (($1389) - 2)|0; //@line 656 "lpc.c"
     $1391 = (($1388) + ($1390<<2)|0); //@line 656 "lpc.c"
     $1392 = HEAP32[$1391>>2]|0; //@line 656 "lpc.c"
     $1393 = ($1392|0)<(0); //@line 656 "lpc.c"
     $1394 = $1393 << 31 >> 31; //@line 656 "lpc.c"
     $1395 = (___muldi3(($1385|0),($1387|0),($1392|0),($1394|0))|0); //@line 656 "lpc.c"
     $1396 = tempRet0; //@line 656 "lpc.c"
     $1397 = $13; //@line 656 "lpc.c"
     $1398 = $1397; //@line 656 "lpc.c"
     $1399 = HEAP32[$1398>>2]|0; //@line 656 "lpc.c"
     $1400 = (($1397) + 4)|0; //@line 656 "lpc.c"
     $1401 = $1400; //@line 656 "lpc.c"
     $1402 = HEAP32[$1401>>2]|0; //@line 656 "lpc.c"
     $1403 = (_i64Add(($1399|0),($1402|0),($1395|0),($1396|0))|0); //@line 656 "lpc.c"
     $1404 = tempRet0; //@line 656 "lpc.c"
     $1405 = $13; //@line 656 "lpc.c"
     $1406 = $1405; //@line 656 "lpc.c"
     HEAP32[$1406>>2] = $1403; //@line 656 "lpc.c"
     $1407 = (($1405) + 4)|0; //@line 656 "lpc.c"
     $1408 = $1407; //@line 656 "lpc.c"
     HEAP32[$1408>>2] = $1404; //@line 656 "lpc.c"
     $1409 = $8; //@line 657 "lpc.c"
     $1410 = HEAP32[$1409>>2]|0; //@line 657 "lpc.c"
     $1411 = ($1410|0)<(0); //@line 657 "lpc.c"
     $1412 = $1411 << 31 >> 31; //@line 657 "lpc.c"
     $1413 = $6; //@line 657 "lpc.c"
     $1414 = $12; //@line 657 "lpc.c"
     $1415 = (($1414) - 1)|0; //@line 657 "lpc.c"
     $1416 = (($1413) + ($1415<<2)|0); //@line 657 "lpc.c"
     $1417 = HEAP32[$1416>>2]|0; //@line 657 "lpc.c"
     $1418 = ($1417|0)<(0); //@line 657 "lpc.c"
     $1419 = $1418 << 31 >> 31; //@line 657 "lpc.c"
     $1420 = (___muldi3(($1410|0),($1412|0),($1417|0),($1419|0))|0); //@line 657 "lpc.c"
     $1421 = tempRet0; //@line 657 "lpc.c"
     $1422 = $13; //@line 657 "lpc.c"
     $1423 = $1422; //@line 657 "lpc.c"
     $1424 = HEAP32[$1423>>2]|0; //@line 657 "lpc.c"
     $1425 = (($1422) + 4)|0; //@line 657 "lpc.c"
     $1426 = $1425; //@line 657 "lpc.c"
     $1427 = HEAP32[$1426>>2]|0; //@line 657 "lpc.c"
     $1428 = (_i64Add(($1424|0),($1427|0),($1420|0),($1421|0))|0); //@line 657 "lpc.c"
     $1429 = tempRet0; //@line 657 "lpc.c"
     $1430 = $13; //@line 657 "lpc.c"
     $1431 = $1430; //@line 657 "lpc.c"
     HEAP32[$1431>>2] = $1428; //@line 657 "lpc.c"
     $1432 = (($1430) + 4)|0; //@line 657 "lpc.c"
     $1433 = $1432; //@line 657 "lpc.c"
     HEAP32[$1433>>2] = $1429; //@line 657 "lpc.c"
     $1434 = $6; //@line 658 "lpc.c"
     $1435 = $12; //@line 658 "lpc.c"
     $1436 = (($1434) + ($1435<<2)|0); //@line 658 "lpc.c"
     $1437 = HEAP32[$1436>>2]|0; //@line 658 "lpc.c"
     $1438 = $13; //@line 658 "lpc.c"
     $1439 = $1438; //@line 658 "lpc.c"
     $1440 = HEAP32[$1439>>2]|0; //@line 658 "lpc.c"
     $1441 = (($1438) + 4)|0; //@line 658 "lpc.c"
     $1442 = $1441; //@line 658 "lpc.c"
     $1443 = HEAP32[$1442>>2]|0; //@line 658 "lpc.c"
     $1444 = $10; //@line 658 "lpc.c"
     $1445 = (_bitshift64Ashr(($1440|0),($1443|0),($1444|0))|0); //@line 658 "lpc.c"
     $1446 = tempRet0; //@line 658 "lpc.c"
     $1447 = (($1437) - ($1445))|0; //@line 658 "lpc.c"
     $1448 = $11; //@line 658 "lpc.c"
     $1449 = $12; //@line 658 "lpc.c"
     $1450 = (($1448) + ($1449<<2)|0); //@line 658 "lpc.c"
     HEAP32[$1450>>2] = $1447; //@line 658 "lpc.c"
     $1451 = $12; //@line 648 "lpc.c"
     $1452 = (($1451) + 1)|0; //@line 648 "lpc.c"
     $12 = $1452; //@line 648 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $1453 = $12; //@line 662 "lpc.c"
     $1454 = $7; //@line 662 "lpc.c"
     $1455 = ($1453|0)<($1454|0); //@line 662 "lpc.c"
     if (!($1455)) {
      break;
     }
     $1456 = $13; //@line 663 "lpc.c"
     $1457 = $1456; //@line 663 "lpc.c"
     HEAP32[$1457>>2] = 0; //@line 663 "lpc.c"
     $1458 = (($1456) + 4)|0; //@line 663 "lpc.c"
     $1459 = $1458; //@line 663 "lpc.c"
     HEAP32[$1459>>2] = 0; //@line 663 "lpc.c"
     $1460 = $8; //@line 664 "lpc.c"
     $1461 = ((($1460)) + 24|0); //@line 664 "lpc.c"
     $1462 = HEAP32[$1461>>2]|0; //@line 664 "lpc.c"
     $1463 = ($1462|0)<(0); //@line 664 "lpc.c"
     $1464 = $1463 << 31 >> 31; //@line 664 "lpc.c"
     $1465 = $6; //@line 664 "lpc.c"
     $1466 = $12; //@line 664 "lpc.c"
     $1467 = (($1466) - 7)|0; //@line 664 "lpc.c"
     $1468 = (($1465) + ($1467<<2)|0); //@line 664 "lpc.c"
     $1469 = HEAP32[$1468>>2]|0; //@line 664 "lpc.c"
     $1470 = ($1469|0)<(0); //@line 664 "lpc.c"
     $1471 = $1470 << 31 >> 31; //@line 664 "lpc.c"
     $1472 = (___muldi3(($1462|0),($1464|0),($1469|0),($1471|0))|0); //@line 664 "lpc.c"
     $1473 = tempRet0; //@line 664 "lpc.c"
     $1474 = $13; //@line 664 "lpc.c"
     $1475 = $1474; //@line 664 "lpc.c"
     $1476 = HEAP32[$1475>>2]|0; //@line 664 "lpc.c"
     $1477 = (($1474) + 4)|0; //@line 664 "lpc.c"
     $1478 = $1477; //@line 664 "lpc.c"
     $1479 = HEAP32[$1478>>2]|0; //@line 664 "lpc.c"
     $1480 = (_i64Add(($1476|0),($1479|0),($1472|0),($1473|0))|0); //@line 664 "lpc.c"
     $1481 = tempRet0; //@line 664 "lpc.c"
     $1482 = $13; //@line 664 "lpc.c"
     $1483 = $1482; //@line 664 "lpc.c"
     HEAP32[$1483>>2] = $1480; //@line 664 "lpc.c"
     $1484 = (($1482) + 4)|0; //@line 664 "lpc.c"
     $1485 = $1484; //@line 664 "lpc.c"
     HEAP32[$1485>>2] = $1481; //@line 664 "lpc.c"
     $1486 = $8; //@line 665 "lpc.c"
     $1487 = ((($1486)) + 20|0); //@line 665 "lpc.c"
     $1488 = HEAP32[$1487>>2]|0; //@line 665 "lpc.c"
     $1489 = ($1488|0)<(0); //@line 665 "lpc.c"
     $1490 = $1489 << 31 >> 31; //@line 665 "lpc.c"
     $1491 = $6; //@line 665 "lpc.c"
     $1492 = $12; //@line 665 "lpc.c"
     $1493 = (($1492) - 6)|0; //@line 665 "lpc.c"
     $1494 = (($1491) + ($1493<<2)|0); //@line 665 "lpc.c"
     $1495 = HEAP32[$1494>>2]|0; //@line 665 "lpc.c"
     $1496 = ($1495|0)<(0); //@line 665 "lpc.c"
     $1497 = $1496 << 31 >> 31; //@line 665 "lpc.c"
     $1498 = (___muldi3(($1488|0),($1490|0),($1495|0),($1497|0))|0); //@line 665 "lpc.c"
     $1499 = tempRet0; //@line 665 "lpc.c"
     $1500 = $13; //@line 665 "lpc.c"
     $1501 = $1500; //@line 665 "lpc.c"
     $1502 = HEAP32[$1501>>2]|0; //@line 665 "lpc.c"
     $1503 = (($1500) + 4)|0; //@line 665 "lpc.c"
     $1504 = $1503; //@line 665 "lpc.c"
     $1505 = HEAP32[$1504>>2]|0; //@line 665 "lpc.c"
     $1506 = (_i64Add(($1502|0),($1505|0),($1498|0),($1499|0))|0); //@line 665 "lpc.c"
     $1507 = tempRet0; //@line 665 "lpc.c"
     $1508 = $13; //@line 665 "lpc.c"
     $1509 = $1508; //@line 665 "lpc.c"
     HEAP32[$1509>>2] = $1506; //@line 665 "lpc.c"
     $1510 = (($1508) + 4)|0; //@line 665 "lpc.c"
     $1511 = $1510; //@line 665 "lpc.c"
     HEAP32[$1511>>2] = $1507; //@line 665 "lpc.c"
     $1512 = $8; //@line 666 "lpc.c"
     $1513 = ((($1512)) + 16|0); //@line 666 "lpc.c"
     $1514 = HEAP32[$1513>>2]|0; //@line 666 "lpc.c"
     $1515 = ($1514|0)<(0); //@line 666 "lpc.c"
     $1516 = $1515 << 31 >> 31; //@line 666 "lpc.c"
     $1517 = $6; //@line 666 "lpc.c"
     $1518 = $12; //@line 666 "lpc.c"
     $1519 = (($1518) - 5)|0; //@line 666 "lpc.c"
     $1520 = (($1517) + ($1519<<2)|0); //@line 666 "lpc.c"
     $1521 = HEAP32[$1520>>2]|0; //@line 666 "lpc.c"
     $1522 = ($1521|0)<(0); //@line 666 "lpc.c"
     $1523 = $1522 << 31 >> 31; //@line 666 "lpc.c"
     $1524 = (___muldi3(($1514|0),($1516|0),($1521|0),($1523|0))|0); //@line 666 "lpc.c"
     $1525 = tempRet0; //@line 666 "lpc.c"
     $1526 = $13; //@line 666 "lpc.c"
     $1527 = $1526; //@line 666 "lpc.c"
     $1528 = HEAP32[$1527>>2]|0; //@line 666 "lpc.c"
     $1529 = (($1526) + 4)|0; //@line 666 "lpc.c"
     $1530 = $1529; //@line 666 "lpc.c"
     $1531 = HEAP32[$1530>>2]|0; //@line 666 "lpc.c"
     $1532 = (_i64Add(($1528|0),($1531|0),($1524|0),($1525|0))|0); //@line 666 "lpc.c"
     $1533 = tempRet0; //@line 666 "lpc.c"
     $1534 = $13; //@line 666 "lpc.c"
     $1535 = $1534; //@line 666 "lpc.c"
     HEAP32[$1535>>2] = $1532; //@line 666 "lpc.c"
     $1536 = (($1534) + 4)|0; //@line 666 "lpc.c"
     $1537 = $1536; //@line 666 "lpc.c"
     HEAP32[$1537>>2] = $1533; //@line 666 "lpc.c"
     $1538 = $8; //@line 667 "lpc.c"
     $1539 = ((($1538)) + 12|0); //@line 667 "lpc.c"
     $1540 = HEAP32[$1539>>2]|0; //@line 667 "lpc.c"
     $1541 = ($1540|0)<(0); //@line 667 "lpc.c"
     $1542 = $1541 << 31 >> 31; //@line 667 "lpc.c"
     $1543 = $6; //@line 667 "lpc.c"
     $1544 = $12; //@line 667 "lpc.c"
     $1545 = (($1544) - 4)|0; //@line 667 "lpc.c"
     $1546 = (($1543) + ($1545<<2)|0); //@line 667 "lpc.c"
     $1547 = HEAP32[$1546>>2]|0; //@line 667 "lpc.c"
     $1548 = ($1547|0)<(0); //@line 667 "lpc.c"
     $1549 = $1548 << 31 >> 31; //@line 667 "lpc.c"
     $1550 = (___muldi3(($1540|0),($1542|0),($1547|0),($1549|0))|0); //@line 667 "lpc.c"
     $1551 = tempRet0; //@line 667 "lpc.c"
     $1552 = $13; //@line 667 "lpc.c"
     $1553 = $1552; //@line 667 "lpc.c"
     $1554 = HEAP32[$1553>>2]|0; //@line 667 "lpc.c"
     $1555 = (($1552) + 4)|0; //@line 667 "lpc.c"
     $1556 = $1555; //@line 667 "lpc.c"
     $1557 = HEAP32[$1556>>2]|0; //@line 667 "lpc.c"
     $1558 = (_i64Add(($1554|0),($1557|0),($1550|0),($1551|0))|0); //@line 667 "lpc.c"
     $1559 = tempRet0; //@line 667 "lpc.c"
     $1560 = $13; //@line 667 "lpc.c"
     $1561 = $1560; //@line 667 "lpc.c"
     HEAP32[$1561>>2] = $1558; //@line 667 "lpc.c"
     $1562 = (($1560) + 4)|0; //@line 667 "lpc.c"
     $1563 = $1562; //@line 667 "lpc.c"
     HEAP32[$1563>>2] = $1559; //@line 667 "lpc.c"
     $1564 = $8; //@line 668 "lpc.c"
     $1565 = ((($1564)) + 8|0); //@line 668 "lpc.c"
     $1566 = HEAP32[$1565>>2]|0; //@line 668 "lpc.c"
     $1567 = ($1566|0)<(0); //@line 668 "lpc.c"
     $1568 = $1567 << 31 >> 31; //@line 668 "lpc.c"
     $1569 = $6; //@line 668 "lpc.c"
     $1570 = $12; //@line 668 "lpc.c"
     $1571 = (($1570) - 3)|0; //@line 668 "lpc.c"
     $1572 = (($1569) + ($1571<<2)|0); //@line 668 "lpc.c"
     $1573 = HEAP32[$1572>>2]|0; //@line 668 "lpc.c"
     $1574 = ($1573|0)<(0); //@line 668 "lpc.c"
     $1575 = $1574 << 31 >> 31; //@line 668 "lpc.c"
     $1576 = (___muldi3(($1566|0),($1568|0),($1573|0),($1575|0))|0); //@line 668 "lpc.c"
     $1577 = tempRet0; //@line 668 "lpc.c"
     $1578 = $13; //@line 668 "lpc.c"
     $1579 = $1578; //@line 668 "lpc.c"
     $1580 = HEAP32[$1579>>2]|0; //@line 668 "lpc.c"
     $1581 = (($1578) + 4)|0; //@line 668 "lpc.c"
     $1582 = $1581; //@line 668 "lpc.c"
     $1583 = HEAP32[$1582>>2]|0; //@line 668 "lpc.c"
     $1584 = (_i64Add(($1580|0),($1583|0),($1576|0),($1577|0))|0); //@line 668 "lpc.c"
     $1585 = tempRet0; //@line 668 "lpc.c"
     $1586 = $13; //@line 668 "lpc.c"
     $1587 = $1586; //@line 668 "lpc.c"
     HEAP32[$1587>>2] = $1584; //@line 668 "lpc.c"
     $1588 = (($1586) + 4)|0; //@line 668 "lpc.c"
     $1589 = $1588; //@line 668 "lpc.c"
     HEAP32[$1589>>2] = $1585; //@line 668 "lpc.c"
     $1590 = $8; //@line 669 "lpc.c"
     $1591 = ((($1590)) + 4|0); //@line 669 "lpc.c"
     $1592 = HEAP32[$1591>>2]|0; //@line 669 "lpc.c"
     $1593 = ($1592|0)<(0); //@line 669 "lpc.c"
     $1594 = $1593 << 31 >> 31; //@line 669 "lpc.c"
     $1595 = $6; //@line 669 "lpc.c"
     $1596 = $12; //@line 669 "lpc.c"
     $1597 = (($1596) - 2)|0; //@line 669 "lpc.c"
     $1598 = (($1595) + ($1597<<2)|0); //@line 669 "lpc.c"
     $1599 = HEAP32[$1598>>2]|0; //@line 669 "lpc.c"
     $1600 = ($1599|0)<(0); //@line 669 "lpc.c"
     $1601 = $1600 << 31 >> 31; //@line 669 "lpc.c"
     $1602 = (___muldi3(($1592|0),($1594|0),($1599|0),($1601|0))|0); //@line 669 "lpc.c"
     $1603 = tempRet0; //@line 669 "lpc.c"
     $1604 = $13; //@line 669 "lpc.c"
     $1605 = $1604; //@line 669 "lpc.c"
     $1606 = HEAP32[$1605>>2]|0; //@line 669 "lpc.c"
     $1607 = (($1604) + 4)|0; //@line 669 "lpc.c"
     $1608 = $1607; //@line 669 "lpc.c"
     $1609 = HEAP32[$1608>>2]|0; //@line 669 "lpc.c"
     $1610 = (_i64Add(($1606|0),($1609|0),($1602|0),($1603|0))|0); //@line 669 "lpc.c"
     $1611 = tempRet0; //@line 669 "lpc.c"
     $1612 = $13; //@line 669 "lpc.c"
     $1613 = $1612; //@line 669 "lpc.c"
     HEAP32[$1613>>2] = $1610; //@line 669 "lpc.c"
     $1614 = (($1612) + 4)|0; //@line 669 "lpc.c"
     $1615 = $1614; //@line 669 "lpc.c"
     HEAP32[$1615>>2] = $1611; //@line 669 "lpc.c"
     $1616 = $8; //@line 670 "lpc.c"
     $1617 = HEAP32[$1616>>2]|0; //@line 670 "lpc.c"
     $1618 = ($1617|0)<(0); //@line 670 "lpc.c"
     $1619 = $1618 << 31 >> 31; //@line 670 "lpc.c"
     $1620 = $6; //@line 670 "lpc.c"
     $1621 = $12; //@line 670 "lpc.c"
     $1622 = (($1621) - 1)|0; //@line 670 "lpc.c"
     $1623 = (($1620) + ($1622<<2)|0); //@line 670 "lpc.c"
     $1624 = HEAP32[$1623>>2]|0; //@line 670 "lpc.c"
     $1625 = ($1624|0)<(0); //@line 670 "lpc.c"
     $1626 = $1625 << 31 >> 31; //@line 670 "lpc.c"
     $1627 = (___muldi3(($1617|0),($1619|0),($1624|0),($1626|0))|0); //@line 670 "lpc.c"
     $1628 = tempRet0; //@line 670 "lpc.c"
     $1629 = $13; //@line 670 "lpc.c"
     $1630 = $1629; //@line 670 "lpc.c"
     $1631 = HEAP32[$1630>>2]|0; //@line 670 "lpc.c"
     $1632 = (($1629) + 4)|0; //@line 670 "lpc.c"
     $1633 = $1632; //@line 670 "lpc.c"
     $1634 = HEAP32[$1633>>2]|0; //@line 670 "lpc.c"
     $1635 = (_i64Add(($1631|0),($1634|0),($1627|0),($1628|0))|0); //@line 670 "lpc.c"
     $1636 = tempRet0; //@line 670 "lpc.c"
     $1637 = $13; //@line 670 "lpc.c"
     $1638 = $1637; //@line 670 "lpc.c"
     HEAP32[$1638>>2] = $1635; //@line 670 "lpc.c"
     $1639 = (($1637) + 4)|0; //@line 670 "lpc.c"
     $1640 = $1639; //@line 670 "lpc.c"
     HEAP32[$1640>>2] = $1636; //@line 670 "lpc.c"
     $1641 = $6; //@line 671 "lpc.c"
     $1642 = $12; //@line 671 "lpc.c"
     $1643 = (($1641) + ($1642<<2)|0); //@line 671 "lpc.c"
     $1644 = HEAP32[$1643>>2]|0; //@line 671 "lpc.c"
     $1645 = $13; //@line 671 "lpc.c"
     $1646 = $1645; //@line 671 "lpc.c"
     $1647 = HEAP32[$1646>>2]|0; //@line 671 "lpc.c"
     $1648 = (($1645) + 4)|0; //@line 671 "lpc.c"
     $1649 = $1648; //@line 671 "lpc.c"
     $1650 = HEAP32[$1649>>2]|0; //@line 671 "lpc.c"
     $1651 = $10; //@line 671 "lpc.c"
     $1652 = (_bitshift64Ashr(($1647|0),($1650|0),($1651|0))|0); //@line 671 "lpc.c"
     $1653 = tempRet0; //@line 671 "lpc.c"
     $1654 = (($1644) - ($1652))|0; //@line 671 "lpc.c"
     $1655 = $11; //@line 671 "lpc.c"
     $1656 = $12; //@line 671 "lpc.c"
     $1657 = (($1655) + ($1656<<2)|0); //@line 671 "lpc.c"
     HEAP32[$1657>>2] = $1654; //@line 671 "lpc.c"
     $1658 = $12; //@line 662 "lpc.c"
     $1659 = (($1658) + 1)|0; //@line 662 "lpc.c"
     $12 = $1659; //@line 662 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  } else {
   $1660 = ($1218|0)==(6); //@line 676 "lpc.c"
   $12 = 0;
   if ($1660) {
    while(1) {
     $1661 = $12; //@line 677 "lpc.c"
     $1662 = $7; //@line 677 "lpc.c"
     $1663 = ($1661|0)<($1662|0); //@line 677 "lpc.c"
     if (!($1663)) {
      break;
     }
     $1664 = $13; //@line 678 "lpc.c"
     $1665 = $1664; //@line 678 "lpc.c"
     HEAP32[$1665>>2] = 0; //@line 678 "lpc.c"
     $1666 = (($1664) + 4)|0; //@line 678 "lpc.c"
     $1667 = $1666; //@line 678 "lpc.c"
     HEAP32[$1667>>2] = 0; //@line 678 "lpc.c"
     $1668 = $8; //@line 679 "lpc.c"
     $1669 = ((($1668)) + 20|0); //@line 679 "lpc.c"
     $1670 = HEAP32[$1669>>2]|0; //@line 679 "lpc.c"
     $1671 = ($1670|0)<(0); //@line 679 "lpc.c"
     $1672 = $1671 << 31 >> 31; //@line 679 "lpc.c"
     $1673 = $6; //@line 679 "lpc.c"
     $1674 = $12; //@line 679 "lpc.c"
     $1675 = (($1674) - 6)|0; //@line 679 "lpc.c"
     $1676 = (($1673) + ($1675<<2)|0); //@line 679 "lpc.c"
     $1677 = HEAP32[$1676>>2]|0; //@line 679 "lpc.c"
     $1678 = ($1677|0)<(0); //@line 679 "lpc.c"
     $1679 = $1678 << 31 >> 31; //@line 679 "lpc.c"
     $1680 = (___muldi3(($1670|0),($1672|0),($1677|0),($1679|0))|0); //@line 679 "lpc.c"
     $1681 = tempRet0; //@line 679 "lpc.c"
     $1682 = $13; //@line 679 "lpc.c"
     $1683 = $1682; //@line 679 "lpc.c"
     $1684 = HEAP32[$1683>>2]|0; //@line 679 "lpc.c"
     $1685 = (($1682) + 4)|0; //@line 679 "lpc.c"
     $1686 = $1685; //@line 679 "lpc.c"
     $1687 = HEAP32[$1686>>2]|0; //@line 679 "lpc.c"
     $1688 = (_i64Add(($1684|0),($1687|0),($1680|0),($1681|0))|0); //@line 679 "lpc.c"
     $1689 = tempRet0; //@line 679 "lpc.c"
     $1690 = $13; //@line 679 "lpc.c"
     $1691 = $1690; //@line 679 "lpc.c"
     HEAP32[$1691>>2] = $1688; //@line 679 "lpc.c"
     $1692 = (($1690) + 4)|0; //@line 679 "lpc.c"
     $1693 = $1692; //@line 679 "lpc.c"
     HEAP32[$1693>>2] = $1689; //@line 679 "lpc.c"
     $1694 = $8; //@line 680 "lpc.c"
     $1695 = ((($1694)) + 16|0); //@line 680 "lpc.c"
     $1696 = HEAP32[$1695>>2]|0; //@line 680 "lpc.c"
     $1697 = ($1696|0)<(0); //@line 680 "lpc.c"
     $1698 = $1697 << 31 >> 31; //@line 680 "lpc.c"
     $1699 = $6; //@line 680 "lpc.c"
     $1700 = $12; //@line 680 "lpc.c"
     $1701 = (($1700) - 5)|0; //@line 680 "lpc.c"
     $1702 = (($1699) + ($1701<<2)|0); //@line 680 "lpc.c"
     $1703 = HEAP32[$1702>>2]|0; //@line 680 "lpc.c"
     $1704 = ($1703|0)<(0); //@line 680 "lpc.c"
     $1705 = $1704 << 31 >> 31; //@line 680 "lpc.c"
     $1706 = (___muldi3(($1696|0),($1698|0),($1703|0),($1705|0))|0); //@line 680 "lpc.c"
     $1707 = tempRet0; //@line 680 "lpc.c"
     $1708 = $13; //@line 680 "lpc.c"
     $1709 = $1708; //@line 680 "lpc.c"
     $1710 = HEAP32[$1709>>2]|0; //@line 680 "lpc.c"
     $1711 = (($1708) + 4)|0; //@line 680 "lpc.c"
     $1712 = $1711; //@line 680 "lpc.c"
     $1713 = HEAP32[$1712>>2]|0; //@line 680 "lpc.c"
     $1714 = (_i64Add(($1710|0),($1713|0),($1706|0),($1707|0))|0); //@line 680 "lpc.c"
     $1715 = tempRet0; //@line 680 "lpc.c"
     $1716 = $13; //@line 680 "lpc.c"
     $1717 = $1716; //@line 680 "lpc.c"
     HEAP32[$1717>>2] = $1714; //@line 680 "lpc.c"
     $1718 = (($1716) + 4)|0; //@line 680 "lpc.c"
     $1719 = $1718; //@line 680 "lpc.c"
     HEAP32[$1719>>2] = $1715; //@line 680 "lpc.c"
     $1720 = $8; //@line 681 "lpc.c"
     $1721 = ((($1720)) + 12|0); //@line 681 "lpc.c"
     $1722 = HEAP32[$1721>>2]|0; //@line 681 "lpc.c"
     $1723 = ($1722|0)<(0); //@line 681 "lpc.c"
     $1724 = $1723 << 31 >> 31; //@line 681 "lpc.c"
     $1725 = $6; //@line 681 "lpc.c"
     $1726 = $12; //@line 681 "lpc.c"
     $1727 = (($1726) - 4)|0; //@line 681 "lpc.c"
     $1728 = (($1725) + ($1727<<2)|0); //@line 681 "lpc.c"
     $1729 = HEAP32[$1728>>2]|0; //@line 681 "lpc.c"
     $1730 = ($1729|0)<(0); //@line 681 "lpc.c"
     $1731 = $1730 << 31 >> 31; //@line 681 "lpc.c"
     $1732 = (___muldi3(($1722|0),($1724|0),($1729|0),($1731|0))|0); //@line 681 "lpc.c"
     $1733 = tempRet0; //@line 681 "lpc.c"
     $1734 = $13; //@line 681 "lpc.c"
     $1735 = $1734; //@line 681 "lpc.c"
     $1736 = HEAP32[$1735>>2]|0; //@line 681 "lpc.c"
     $1737 = (($1734) + 4)|0; //@line 681 "lpc.c"
     $1738 = $1737; //@line 681 "lpc.c"
     $1739 = HEAP32[$1738>>2]|0; //@line 681 "lpc.c"
     $1740 = (_i64Add(($1736|0),($1739|0),($1732|0),($1733|0))|0); //@line 681 "lpc.c"
     $1741 = tempRet0; //@line 681 "lpc.c"
     $1742 = $13; //@line 681 "lpc.c"
     $1743 = $1742; //@line 681 "lpc.c"
     HEAP32[$1743>>2] = $1740; //@line 681 "lpc.c"
     $1744 = (($1742) + 4)|0; //@line 681 "lpc.c"
     $1745 = $1744; //@line 681 "lpc.c"
     HEAP32[$1745>>2] = $1741; //@line 681 "lpc.c"
     $1746 = $8; //@line 682 "lpc.c"
     $1747 = ((($1746)) + 8|0); //@line 682 "lpc.c"
     $1748 = HEAP32[$1747>>2]|0; //@line 682 "lpc.c"
     $1749 = ($1748|0)<(0); //@line 682 "lpc.c"
     $1750 = $1749 << 31 >> 31; //@line 682 "lpc.c"
     $1751 = $6; //@line 682 "lpc.c"
     $1752 = $12; //@line 682 "lpc.c"
     $1753 = (($1752) - 3)|0; //@line 682 "lpc.c"
     $1754 = (($1751) + ($1753<<2)|0); //@line 682 "lpc.c"
     $1755 = HEAP32[$1754>>2]|0; //@line 682 "lpc.c"
     $1756 = ($1755|0)<(0); //@line 682 "lpc.c"
     $1757 = $1756 << 31 >> 31; //@line 682 "lpc.c"
     $1758 = (___muldi3(($1748|0),($1750|0),($1755|0),($1757|0))|0); //@line 682 "lpc.c"
     $1759 = tempRet0; //@line 682 "lpc.c"
     $1760 = $13; //@line 682 "lpc.c"
     $1761 = $1760; //@line 682 "lpc.c"
     $1762 = HEAP32[$1761>>2]|0; //@line 682 "lpc.c"
     $1763 = (($1760) + 4)|0; //@line 682 "lpc.c"
     $1764 = $1763; //@line 682 "lpc.c"
     $1765 = HEAP32[$1764>>2]|0; //@line 682 "lpc.c"
     $1766 = (_i64Add(($1762|0),($1765|0),($1758|0),($1759|0))|0); //@line 682 "lpc.c"
     $1767 = tempRet0; //@line 682 "lpc.c"
     $1768 = $13; //@line 682 "lpc.c"
     $1769 = $1768; //@line 682 "lpc.c"
     HEAP32[$1769>>2] = $1766; //@line 682 "lpc.c"
     $1770 = (($1768) + 4)|0; //@line 682 "lpc.c"
     $1771 = $1770; //@line 682 "lpc.c"
     HEAP32[$1771>>2] = $1767; //@line 682 "lpc.c"
     $1772 = $8; //@line 683 "lpc.c"
     $1773 = ((($1772)) + 4|0); //@line 683 "lpc.c"
     $1774 = HEAP32[$1773>>2]|0; //@line 683 "lpc.c"
     $1775 = ($1774|0)<(0); //@line 683 "lpc.c"
     $1776 = $1775 << 31 >> 31; //@line 683 "lpc.c"
     $1777 = $6; //@line 683 "lpc.c"
     $1778 = $12; //@line 683 "lpc.c"
     $1779 = (($1778) - 2)|0; //@line 683 "lpc.c"
     $1780 = (($1777) + ($1779<<2)|0); //@line 683 "lpc.c"
     $1781 = HEAP32[$1780>>2]|0; //@line 683 "lpc.c"
     $1782 = ($1781|0)<(0); //@line 683 "lpc.c"
     $1783 = $1782 << 31 >> 31; //@line 683 "lpc.c"
     $1784 = (___muldi3(($1774|0),($1776|0),($1781|0),($1783|0))|0); //@line 683 "lpc.c"
     $1785 = tempRet0; //@line 683 "lpc.c"
     $1786 = $13; //@line 683 "lpc.c"
     $1787 = $1786; //@line 683 "lpc.c"
     $1788 = HEAP32[$1787>>2]|0; //@line 683 "lpc.c"
     $1789 = (($1786) + 4)|0; //@line 683 "lpc.c"
     $1790 = $1789; //@line 683 "lpc.c"
     $1791 = HEAP32[$1790>>2]|0; //@line 683 "lpc.c"
     $1792 = (_i64Add(($1788|0),($1791|0),($1784|0),($1785|0))|0); //@line 683 "lpc.c"
     $1793 = tempRet0; //@line 683 "lpc.c"
     $1794 = $13; //@line 683 "lpc.c"
     $1795 = $1794; //@line 683 "lpc.c"
     HEAP32[$1795>>2] = $1792; //@line 683 "lpc.c"
     $1796 = (($1794) + 4)|0; //@line 683 "lpc.c"
     $1797 = $1796; //@line 683 "lpc.c"
     HEAP32[$1797>>2] = $1793; //@line 683 "lpc.c"
     $1798 = $8; //@line 684 "lpc.c"
     $1799 = HEAP32[$1798>>2]|0; //@line 684 "lpc.c"
     $1800 = ($1799|0)<(0); //@line 684 "lpc.c"
     $1801 = $1800 << 31 >> 31; //@line 684 "lpc.c"
     $1802 = $6; //@line 684 "lpc.c"
     $1803 = $12; //@line 684 "lpc.c"
     $1804 = (($1803) - 1)|0; //@line 684 "lpc.c"
     $1805 = (($1802) + ($1804<<2)|0); //@line 684 "lpc.c"
     $1806 = HEAP32[$1805>>2]|0; //@line 684 "lpc.c"
     $1807 = ($1806|0)<(0); //@line 684 "lpc.c"
     $1808 = $1807 << 31 >> 31; //@line 684 "lpc.c"
     $1809 = (___muldi3(($1799|0),($1801|0),($1806|0),($1808|0))|0); //@line 684 "lpc.c"
     $1810 = tempRet0; //@line 684 "lpc.c"
     $1811 = $13; //@line 684 "lpc.c"
     $1812 = $1811; //@line 684 "lpc.c"
     $1813 = HEAP32[$1812>>2]|0; //@line 684 "lpc.c"
     $1814 = (($1811) + 4)|0; //@line 684 "lpc.c"
     $1815 = $1814; //@line 684 "lpc.c"
     $1816 = HEAP32[$1815>>2]|0; //@line 684 "lpc.c"
     $1817 = (_i64Add(($1813|0),($1816|0),($1809|0),($1810|0))|0); //@line 684 "lpc.c"
     $1818 = tempRet0; //@line 684 "lpc.c"
     $1819 = $13; //@line 684 "lpc.c"
     $1820 = $1819; //@line 684 "lpc.c"
     HEAP32[$1820>>2] = $1817; //@line 684 "lpc.c"
     $1821 = (($1819) + 4)|0; //@line 684 "lpc.c"
     $1822 = $1821; //@line 684 "lpc.c"
     HEAP32[$1822>>2] = $1818; //@line 684 "lpc.c"
     $1823 = $6; //@line 685 "lpc.c"
     $1824 = $12; //@line 685 "lpc.c"
     $1825 = (($1823) + ($1824<<2)|0); //@line 685 "lpc.c"
     $1826 = HEAP32[$1825>>2]|0; //@line 685 "lpc.c"
     $1827 = $13; //@line 685 "lpc.c"
     $1828 = $1827; //@line 685 "lpc.c"
     $1829 = HEAP32[$1828>>2]|0; //@line 685 "lpc.c"
     $1830 = (($1827) + 4)|0; //@line 685 "lpc.c"
     $1831 = $1830; //@line 685 "lpc.c"
     $1832 = HEAP32[$1831>>2]|0; //@line 685 "lpc.c"
     $1833 = $10; //@line 685 "lpc.c"
     $1834 = (_bitshift64Ashr(($1829|0),($1832|0),($1833|0))|0); //@line 685 "lpc.c"
     $1835 = tempRet0; //@line 685 "lpc.c"
     $1836 = (($1826) - ($1834))|0; //@line 685 "lpc.c"
     $1837 = $11; //@line 685 "lpc.c"
     $1838 = $12; //@line 685 "lpc.c"
     $1839 = (($1837) + ($1838<<2)|0); //@line 685 "lpc.c"
     HEAP32[$1839>>2] = $1836; //@line 685 "lpc.c"
     $1840 = $12; //@line 677 "lpc.c"
     $1841 = (($1840) + 1)|0; //@line 677 "lpc.c"
     $12 = $1841; //@line 677 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $1842 = $12; //@line 689 "lpc.c"
     $1843 = $7; //@line 689 "lpc.c"
     $1844 = ($1842|0)<($1843|0); //@line 689 "lpc.c"
     if (!($1844)) {
      break;
     }
     $1845 = $13; //@line 690 "lpc.c"
     $1846 = $1845; //@line 690 "lpc.c"
     HEAP32[$1846>>2] = 0; //@line 690 "lpc.c"
     $1847 = (($1845) + 4)|0; //@line 690 "lpc.c"
     $1848 = $1847; //@line 690 "lpc.c"
     HEAP32[$1848>>2] = 0; //@line 690 "lpc.c"
     $1849 = $8; //@line 691 "lpc.c"
     $1850 = ((($1849)) + 16|0); //@line 691 "lpc.c"
     $1851 = HEAP32[$1850>>2]|0; //@line 691 "lpc.c"
     $1852 = ($1851|0)<(0); //@line 691 "lpc.c"
     $1853 = $1852 << 31 >> 31; //@line 691 "lpc.c"
     $1854 = $6; //@line 691 "lpc.c"
     $1855 = $12; //@line 691 "lpc.c"
     $1856 = (($1855) - 5)|0; //@line 691 "lpc.c"
     $1857 = (($1854) + ($1856<<2)|0); //@line 691 "lpc.c"
     $1858 = HEAP32[$1857>>2]|0; //@line 691 "lpc.c"
     $1859 = ($1858|0)<(0); //@line 691 "lpc.c"
     $1860 = $1859 << 31 >> 31; //@line 691 "lpc.c"
     $1861 = (___muldi3(($1851|0),($1853|0),($1858|0),($1860|0))|0); //@line 691 "lpc.c"
     $1862 = tempRet0; //@line 691 "lpc.c"
     $1863 = $13; //@line 691 "lpc.c"
     $1864 = $1863; //@line 691 "lpc.c"
     $1865 = HEAP32[$1864>>2]|0; //@line 691 "lpc.c"
     $1866 = (($1863) + 4)|0; //@line 691 "lpc.c"
     $1867 = $1866; //@line 691 "lpc.c"
     $1868 = HEAP32[$1867>>2]|0; //@line 691 "lpc.c"
     $1869 = (_i64Add(($1865|0),($1868|0),($1861|0),($1862|0))|0); //@line 691 "lpc.c"
     $1870 = tempRet0; //@line 691 "lpc.c"
     $1871 = $13; //@line 691 "lpc.c"
     $1872 = $1871; //@line 691 "lpc.c"
     HEAP32[$1872>>2] = $1869; //@line 691 "lpc.c"
     $1873 = (($1871) + 4)|0; //@line 691 "lpc.c"
     $1874 = $1873; //@line 691 "lpc.c"
     HEAP32[$1874>>2] = $1870; //@line 691 "lpc.c"
     $1875 = $8; //@line 692 "lpc.c"
     $1876 = ((($1875)) + 12|0); //@line 692 "lpc.c"
     $1877 = HEAP32[$1876>>2]|0; //@line 692 "lpc.c"
     $1878 = ($1877|0)<(0); //@line 692 "lpc.c"
     $1879 = $1878 << 31 >> 31; //@line 692 "lpc.c"
     $1880 = $6; //@line 692 "lpc.c"
     $1881 = $12; //@line 692 "lpc.c"
     $1882 = (($1881) - 4)|0; //@line 692 "lpc.c"
     $1883 = (($1880) + ($1882<<2)|0); //@line 692 "lpc.c"
     $1884 = HEAP32[$1883>>2]|0; //@line 692 "lpc.c"
     $1885 = ($1884|0)<(0); //@line 692 "lpc.c"
     $1886 = $1885 << 31 >> 31; //@line 692 "lpc.c"
     $1887 = (___muldi3(($1877|0),($1879|0),($1884|0),($1886|0))|0); //@line 692 "lpc.c"
     $1888 = tempRet0; //@line 692 "lpc.c"
     $1889 = $13; //@line 692 "lpc.c"
     $1890 = $1889; //@line 692 "lpc.c"
     $1891 = HEAP32[$1890>>2]|0; //@line 692 "lpc.c"
     $1892 = (($1889) + 4)|0; //@line 692 "lpc.c"
     $1893 = $1892; //@line 692 "lpc.c"
     $1894 = HEAP32[$1893>>2]|0; //@line 692 "lpc.c"
     $1895 = (_i64Add(($1891|0),($1894|0),($1887|0),($1888|0))|0); //@line 692 "lpc.c"
     $1896 = tempRet0; //@line 692 "lpc.c"
     $1897 = $13; //@line 692 "lpc.c"
     $1898 = $1897; //@line 692 "lpc.c"
     HEAP32[$1898>>2] = $1895; //@line 692 "lpc.c"
     $1899 = (($1897) + 4)|0; //@line 692 "lpc.c"
     $1900 = $1899; //@line 692 "lpc.c"
     HEAP32[$1900>>2] = $1896; //@line 692 "lpc.c"
     $1901 = $8; //@line 693 "lpc.c"
     $1902 = ((($1901)) + 8|0); //@line 693 "lpc.c"
     $1903 = HEAP32[$1902>>2]|0; //@line 693 "lpc.c"
     $1904 = ($1903|0)<(0); //@line 693 "lpc.c"
     $1905 = $1904 << 31 >> 31; //@line 693 "lpc.c"
     $1906 = $6; //@line 693 "lpc.c"
     $1907 = $12; //@line 693 "lpc.c"
     $1908 = (($1907) - 3)|0; //@line 693 "lpc.c"
     $1909 = (($1906) + ($1908<<2)|0); //@line 693 "lpc.c"
     $1910 = HEAP32[$1909>>2]|0; //@line 693 "lpc.c"
     $1911 = ($1910|0)<(0); //@line 693 "lpc.c"
     $1912 = $1911 << 31 >> 31; //@line 693 "lpc.c"
     $1913 = (___muldi3(($1903|0),($1905|0),($1910|0),($1912|0))|0); //@line 693 "lpc.c"
     $1914 = tempRet0; //@line 693 "lpc.c"
     $1915 = $13; //@line 693 "lpc.c"
     $1916 = $1915; //@line 693 "lpc.c"
     $1917 = HEAP32[$1916>>2]|0; //@line 693 "lpc.c"
     $1918 = (($1915) + 4)|0; //@line 693 "lpc.c"
     $1919 = $1918; //@line 693 "lpc.c"
     $1920 = HEAP32[$1919>>2]|0; //@line 693 "lpc.c"
     $1921 = (_i64Add(($1917|0),($1920|0),($1913|0),($1914|0))|0); //@line 693 "lpc.c"
     $1922 = tempRet0; //@line 693 "lpc.c"
     $1923 = $13; //@line 693 "lpc.c"
     $1924 = $1923; //@line 693 "lpc.c"
     HEAP32[$1924>>2] = $1921; //@line 693 "lpc.c"
     $1925 = (($1923) + 4)|0; //@line 693 "lpc.c"
     $1926 = $1925; //@line 693 "lpc.c"
     HEAP32[$1926>>2] = $1922; //@line 693 "lpc.c"
     $1927 = $8; //@line 694 "lpc.c"
     $1928 = ((($1927)) + 4|0); //@line 694 "lpc.c"
     $1929 = HEAP32[$1928>>2]|0; //@line 694 "lpc.c"
     $1930 = ($1929|0)<(0); //@line 694 "lpc.c"
     $1931 = $1930 << 31 >> 31; //@line 694 "lpc.c"
     $1932 = $6; //@line 694 "lpc.c"
     $1933 = $12; //@line 694 "lpc.c"
     $1934 = (($1933) - 2)|0; //@line 694 "lpc.c"
     $1935 = (($1932) + ($1934<<2)|0); //@line 694 "lpc.c"
     $1936 = HEAP32[$1935>>2]|0; //@line 694 "lpc.c"
     $1937 = ($1936|0)<(0); //@line 694 "lpc.c"
     $1938 = $1937 << 31 >> 31; //@line 694 "lpc.c"
     $1939 = (___muldi3(($1929|0),($1931|0),($1936|0),($1938|0))|0); //@line 694 "lpc.c"
     $1940 = tempRet0; //@line 694 "lpc.c"
     $1941 = $13; //@line 694 "lpc.c"
     $1942 = $1941; //@line 694 "lpc.c"
     $1943 = HEAP32[$1942>>2]|0; //@line 694 "lpc.c"
     $1944 = (($1941) + 4)|0; //@line 694 "lpc.c"
     $1945 = $1944; //@line 694 "lpc.c"
     $1946 = HEAP32[$1945>>2]|0; //@line 694 "lpc.c"
     $1947 = (_i64Add(($1943|0),($1946|0),($1939|0),($1940|0))|0); //@line 694 "lpc.c"
     $1948 = tempRet0; //@line 694 "lpc.c"
     $1949 = $13; //@line 694 "lpc.c"
     $1950 = $1949; //@line 694 "lpc.c"
     HEAP32[$1950>>2] = $1947; //@line 694 "lpc.c"
     $1951 = (($1949) + 4)|0; //@line 694 "lpc.c"
     $1952 = $1951; //@line 694 "lpc.c"
     HEAP32[$1952>>2] = $1948; //@line 694 "lpc.c"
     $1953 = $8; //@line 695 "lpc.c"
     $1954 = HEAP32[$1953>>2]|0; //@line 695 "lpc.c"
     $1955 = ($1954|0)<(0); //@line 695 "lpc.c"
     $1956 = $1955 << 31 >> 31; //@line 695 "lpc.c"
     $1957 = $6; //@line 695 "lpc.c"
     $1958 = $12; //@line 695 "lpc.c"
     $1959 = (($1958) - 1)|0; //@line 695 "lpc.c"
     $1960 = (($1957) + ($1959<<2)|0); //@line 695 "lpc.c"
     $1961 = HEAP32[$1960>>2]|0; //@line 695 "lpc.c"
     $1962 = ($1961|0)<(0); //@line 695 "lpc.c"
     $1963 = $1962 << 31 >> 31; //@line 695 "lpc.c"
     $1964 = (___muldi3(($1954|0),($1956|0),($1961|0),($1963|0))|0); //@line 695 "lpc.c"
     $1965 = tempRet0; //@line 695 "lpc.c"
     $1966 = $13; //@line 695 "lpc.c"
     $1967 = $1966; //@line 695 "lpc.c"
     $1968 = HEAP32[$1967>>2]|0; //@line 695 "lpc.c"
     $1969 = (($1966) + 4)|0; //@line 695 "lpc.c"
     $1970 = $1969; //@line 695 "lpc.c"
     $1971 = HEAP32[$1970>>2]|0; //@line 695 "lpc.c"
     $1972 = (_i64Add(($1968|0),($1971|0),($1964|0),($1965|0))|0); //@line 695 "lpc.c"
     $1973 = tempRet0; //@line 695 "lpc.c"
     $1974 = $13; //@line 695 "lpc.c"
     $1975 = $1974; //@line 695 "lpc.c"
     HEAP32[$1975>>2] = $1972; //@line 695 "lpc.c"
     $1976 = (($1974) + 4)|0; //@line 695 "lpc.c"
     $1977 = $1976; //@line 695 "lpc.c"
     HEAP32[$1977>>2] = $1973; //@line 695 "lpc.c"
     $1978 = $6; //@line 696 "lpc.c"
     $1979 = $12; //@line 696 "lpc.c"
     $1980 = (($1978) + ($1979<<2)|0); //@line 696 "lpc.c"
     $1981 = HEAP32[$1980>>2]|0; //@line 696 "lpc.c"
     $1982 = $13; //@line 696 "lpc.c"
     $1983 = $1982; //@line 696 "lpc.c"
     $1984 = HEAP32[$1983>>2]|0; //@line 696 "lpc.c"
     $1985 = (($1982) + 4)|0; //@line 696 "lpc.c"
     $1986 = $1985; //@line 696 "lpc.c"
     $1987 = HEAP32[$1986>>2]|0; //@line 696 "lpc.c"
     $1988 = $10; //@line 696 "lpc.c"
     $1989 = (_bitshift64Ashr(($1984|0),($1987|0),($1988|0))|0); //@line 696 "lpc.c"
     $1990 = tempRet0; //@line 696 "lpc.c"
     $1991 = (($1981) - ($1989))|0; //@line 696 "lpc.c"
     $1992 = $11; //@line 696 "lpc.c"
     $1993 = $12; //@line 696 "lpc.c"
     $1994 = (($1992) + ($1993<<2)|0); //@line 696 "lpc.c"
     HEAP32[$1994>>2] = $1991; //@line 696 "lpc.c"
     $1995 = $12; //@line 689 "lpc.c"
     $1996 = (($1995) + 1)|0; //@line 689 "lpc.c"
     $12 = $1996; //@line 689 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  }
 } else {
  $1997 = ($1216>>>0)>(2); //@line 702 "lpc.c"
  $1998 = $9;
  if ($1997) {
   $1999 = ($1998|0)==(4); //@line 703 "lpc.c"
   $12 = 0;
   if ($1999) {
    while(1) {
     $2000 = $12; //@line 704 "lpc.c"
     $2001 = $7; //@line 704 "lpc.c"
     $2002 = ($2000|0)<($2001|0); //@line 704 "lpc.c"
     if (!($2002)) {
      break;
     }
     $2003 = $13; //@line 705 "lpc.c"
     $2004 = $2003; //@line 705 "lpc.c"
     HEAP32[$2004>>2] = 0; //@line 705 "lpc.c"
     $2005 = (($2003) + 4)|0; //@line 705 "lpc.c"
     $2006 = $2005; //@line 705 "lpc.c"
     HEAP32[$2006>>2] = 0; //@line 705 "lpc.c"
     $2007 = $8; //@line 706 "lpc.c"
     $2008 = ((($2007)) + 12|0); //@line 706 "lpc.c"
     $2009 = HEAP32[$2008>>2]|0; //@line 706 "lpc.c"
     $2010 = ($2009|0)<(0); //@line 706 "lpc.c"
     $2011 = $2010 << 31 >> 31; //@line 706 "lpc.c"
     $2012 = $6; //@line 706 "lpc.c"
     $2013 = $12; //@line 706 "lpc.c"
     $2014 = (($2013) - 4)|0; //@line 706 "lpc.c"
     $2015 = (($2012) + ($2014<<2)|0); //@line 706 "lpc.c"
     $2016 = HEAP32[$2015>>2]|0; //@line 706 "lpc.c"
     $2017 = ($2016|0)<(0); //@line 706 "lpc.c"
     $2018 = $2017 << 31 >> 31; //@line 706 "lpc.c"
     $2019 = (___muldi3(($2009|0),($2011|0),($2016|0),($2018|0))|0); //@line 706 "lpc.c"
     $2020 = tempRet0; //@line 706 "lpc.c"
     $2021 = $13; //@line 706 "lpc.c"
     $2022 = $2021; //@line 706 "lpc.c"
     $2023 = HEAP32[$2022>>2]|0; //@line 706 "lpc.c"
     $2024 = (($2021) + 4)|0; //@line 706 "lpc.c"
     $2025 = $2024; //@line 706 "lpc.c"
     $2026 = HEAP32[$2025>>2]|0; //@line 706 "lpc.c"
     $2027 = (_i64Add(($2023|0),($2026|0),($2019|0),($2020|0))|0); //@line 706 "lpc.c"
     $2028 = tempRet0; //@line 706 "lpc.c"
     $2029 = $13; //@line 706 "lpc.c"
     $2030 = $2029; //@line 706 "lpc.c"
     HEAP32[$2030>>2] = $2027; //@line 706 "lpc.c"
     $2031 = (($2029) + 4)|0; //@line 706 "lpc.c"
     $2032 = $2031; //@line 706 "lpc.c"
     HEAP32[$2032>>2] = $2028; //@line 706 "lpc.c"
     $2033 = $8; //@line 707 "lpc.c"
     $2034 = ((($2033)) + 8|0); //@line 707 "lpc.c"
     $2035 = HEAP32[$2034>>2]|0; //@line 707 "lpc.c"
     $2036 = ($2035|0)<(0); //@line 707 "lpc.c"
     $2037 = $2036 << 31 >> 31; //@line 707 "lpc.c"
     $2038 = $6; //@line 707 "lpc.c"
     $2039 = $12; //@line 707 "lpc.c"
     $2040 = (($2039) - 3)|0; //@line 707 "lpc.c"
     $2041 = (($2038) + ($2040<<2)|0); //@line 707 "lpc.c"
     $2042 = HEAP32[$2041>>2]|0; //@line 707 "lpc.c"
     $2043 = ($2042|0)<(0); //@line 707 "lpc.c"
     $2044 = $2043 << 31 >> 31; //@line 707 "lpc.c"
     $2045 = (___muldi3(($2035|0),($2037|0),($2042|0),($2044|0))|0); //@line 707 "lpc.c"
     $2046 = tempRet0; //@line 707 "lpc.c"
     $2047 = $13; //@line 707 "lpc.c"
     $2048 = $2047; //@line 707 "lpc.c"
     $2049 = HEAP32[$2048>>2]|0; //@line 707 "lpc.c"
     $2050 = (($2047) + 4)|0; //@line 707 "lpc.c"
     $2051 = $2050; //@line 707 "lpc.c"
     $2052 = HEAP32[$2051>>2]|0; //@line 707 "lpc.c"
     $2053 = (_i64Add(($2049|0),($2052|0),($2045|0),($2046|0))|0); //@line 707 "lpc.c"
     $2054 = tempRet0; //@line 707 "lpc.c"
     $2055 = $13; //@line 707 "lpc.c"
     $2056 = $2055; //@line 707 "lpc.c"
     HEAP32[$2056>>2] = $2053; //@line 707 "lpc.c"
     $2057 = (($2055) + 4)|0; //@line 707 "lpc.c"
     $2058 = $2057; //@line 707 "lpc.c"
     HEAP32[$2058>>2] = $2054; //@line 707 "lpc.c"
     $2059 = $8; //@line 708 "lpc.c"
     $2060 = ((($2059)) + 4|0); //@line 708 "lpc.c"
     $2061 = HEAP32[$2060>>2]|0; //@line 708 "lpc.c"
     $2062 = ($2061|0)<(0); //@line 708 "lpc.c"
     $2063 = $2062 << 31 >> 31; //@line 708 "lpc.c"
     $2064 = $6; //@line 708 "lpc.c"
     $2065 = $12; //@line 708 "lpc.c"
     $2066 = (($2065) - 2)|0; //@line 708 "lpc.c"
     $2067 = (($2064) + ($2066<<2)|0); //@line 708 "lpc.c"
     $2068 = HEAP32[$2067>>2]|0; //@line 708 "lpc.c"
     $2069 = ($2068|0)<(0); //@line 708 "lpc.c"
     $2070 = $2069 << 31 >> 31; //@line 708 "lpc.c"
     $2071 = (___muldi3(($2061|0),($2063|0),($2068|0),($2070|0))|0); //@line 708 "lpc.c"
     $2072 = tempRet0; //@line 708 "lpc.c"
     $2073 = $13; //@line 708 "lpc.c"
     $2074 = $2073; //@line 708 "lpc.c"
     $2075 = HEAP32[$2074>>2]|0; //@line 708 "lpc.c"
     $2076 = (($2073) + 4)|0; //@line 708 "lpc.c"
     $2077 = $2076; //@line 708 "lpc.c"
     $2078 = HEAP32[$2077>>2]|0; //@line 708 "lpc.c"
     $2079 = (_i64Add(($2075|0),($2078|0),($2071|0),($2072|0))|0); //@line 708 "lpc.c"
     $2080 = tempRet0; //@line 708 "lpc.c"
     $2081 = $13; //@line 708 "lpc.c"
     $2082 = $2081; //@line 708 "lpc.c"
     HEAP32[$2082>>2] = $2079; //@line 708 "lpc.c"
     $2083 = (($2081) + 4)|0; //@line 708 "lpc.c"
     $2084 = $2083; //@line 708 "lpc.c"
     HEAP32[$2084>>2] = $2080; //@line 708 "lpc.c"
     $2085 = $8; //@line 709 "lpc.c"
     $2086 = HEAP32[$2085>>2]|0; //@line 709 "lpc.c"
     $2087 = ($2086|0)<(0); //@line 709 "lpc.c"
     $2088 = $2087 << 31 >> 31; //@line 709 "lpc.c"
     $2089 = $6; //@line 709 "lpc.c"
     $2090 = $12; //@line 709 "lpc.c"
     $2091 = (($2090) - 1)|0; //@line 709 "lpc.c"
     $2092 = (($2089) + ($2091<<2)|0); //@line 709 "lpc.c"
     $2093 = HEAP32[$2092>>2]|0; //@line 709 "lpc.c"
     $2094 = ($2093|0)<(0); //@line 709 "lpc.c"
     $2095 = $2094 << 31 >> 31; //@line 709 "lpc.c"
     $2096 = (___muldi3(($2086|0),($2088|0),($2093|0),($2095|0))|0); //@line 709 "lpc.c"
     $2097 = tempRet0; //@line 709 "lpc.c"
     $2098 = $13; //@line 709 "lpc.c"
     $2099 = $2098; //@line 709 "lpc.c"
     $2100 = HEAP32[$2099>>2]|0; //@line 709 "lpc.c"
     $2101 = (($2098) + 4)|0; //@line 709 "lpc.c"
     $2102 = $2101; //@line 709 "lpc.c"
     $2103 = HEAP32[$2102>>2]|0; //@line 709 "lpc.c"
     $2104 = (_i64Add(($2100|0),($2103|0),($2096|0),($2097|0))|0); //@line 709 "lpc.c"
     $2105 = tempRet0; //@line 709 "lpc.c"
     $2106 = $13; //@line 709 "lpc.c"
     $2107 = $2106; //@line 709 "lpc.c"
     HEAP32[$2107>>2] = $2104; //@line 709 "lpc.c"
     $2108 = (($2106) + 4)|0; //@line 709 "lpc.c"
     $2109 = $2108; //@line 709 "lpc.c"
     HEAP32[$2109>>2] = $2105; //@line 709 "lpc.c"
     $2110 = $6; //@line 710 "lpc.c"
     $2111 = $12; //@line 710 "lpc.c"
     $2112 = (($2110) + ($2111<<2)|0); //@line 710 "lpc.c"
     $2113 = HEAP32[$2112>>2]|0; //@line 710 "lpc.c"
     $2114 = $13; //@line 710 "lpc.c"
     $2115 = $2114; //@line 710 "lpc.c"
     $2116 = HEAP32[$2115>>2]|0; //@line 710 "lpc.c"
     $2117 = (($2114) + 4)|0; //@line 710 "lpc.c"
     $2118 = $2117; //@line 710 "lpc.c"
     $2119 = HEAP32[$2118>>2]|0; //@line 710 "lpc.c"
     $2120 = $10; //@line 710 "lpc.c"
     $2121 = (_bitshift64Ashr(($2116|0),($2119|0),($2120|0))|0); //@line 710 "lpc.c"
     $2122 = tempRet0; //@line 710 "lpc.c"
     $2123 = (($2113) - ($2121))|0; //@line 710 "lpc.c"
     $2124 = $11; //@line 710 "lpc.c"
     $2125 = $12; //@line 710 "lpc.c"
     $2126 = (($2124) + ($2125<<2)|0); //@line 710 "lpc.c"
     HEAP32[$2126>>2] = $2123; //@line 710 "lpc.c"
     $2127 = $12; //@line 704 "lpc.c"
     $2128 = (($2127) + 1)|0; //@line 704 "lpc.c"
     $12 = $2128; //@line 704 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $2129 = $12; //@line 714 "lpc.c"
     $2130 = $7; //@line 714 "lpc.c"
     $2131 = ($2129|0)<($2130|0); //@line 714 "lpc.c"
     if (!($2131)) {
      break;
     }
     $2132 = $13; //@line 715 "lpc.c"
     $2133 = $2132; //@line 715 "lpc.c"
     HEAP32[$2133>>2] = 0; //@line 715 "lpc.c"
     $2134 = (($2132) + 4)|0; //@line 715 "lpc.c"
     $2135 = $2134; //@line 715 "lpc.c"
     HEAP32[$2135>>2] = 0; //@line 715 "lpc.c"
     $2136 = $8; //@line 716 "lpc.c"
     $2137 = ((($2136)) + 8|0); //@line 716 "lpc.c"
     $2138 = HEAP32[$2137>>2]|0; //@line 716 "lpc.c"
     $2139 = ($2138|0)<(0); //@line 716 "lpc.c"
     $2140 = $2139 << 31 >> 31; //@line 716 "lpc.c"
     $2141 = $6; //@line 716 "lpc.c"
     $2142 = $12; //@line 716 "lpc.c"
     $2143 = (($2142) - 3)|0; //@line 716 "lpc.c"
     $2144 = (($2141) + ($2143<<2)|0); //@line 716 "lpc.c"
     $2145 = HEAP32[$2144>>2]|0; //@line 716 "lpc.c"
     $2146 = ($2145|0)<(0); //@line 716 "lpc.c"
     $2147 = $2146 << 31 >> 31; //@line 716 "lpc.c"
     $2148 = (___muldi3(($2138|0),($2140|0),($2145|0),($2147|0))|0); //@line 716 "lpc.c"
     $2149 = tempRet0; //@line 716 "lpc.c"
     $2150 = $13; //@line 716 "lpc.c"
     $2151 = $2150; //@line 716 "lpc.c"
     $2152 = HEAP32[$2151>>2]|0; //@line 716 "lpc.c"
     $2153 = (($2150) + 4)|0; //@line 716 "lpc.c"
     $2154 = $2153; //@line 716 "lpc.c"
     $2155 = HEAP32[$2154>>2]|0; //@line 716 "lpc.c"
     $2156 = (_i64Add(($2152|0),($2155|0),($2148|0),($2149|0))|0); //@line 716 "lpc.c"
     $2157 = tempRet0; //@line 716 "lpc.c"
     $2158 = $13; //@line 716 "lpc.c"
     $2159 = $2158; //@line 716 "lpc.c"
     HEAP32[$2159>>2] = $2156; //@line 716 "lpc.c"
     $2160 = (($2158) + 4)|0; //@line 716 "lpc.c"
     $2161 = $2160; //@line 716 "lpc.c"
     HEAP32[$2161>>2] = $2157; //@line 716 "lpc.c"
     $2162 = $8; //@line 717 "lpc.c"
     $2163 = ((($2162)) + 4|0); //@line 717 "lpc.c"
     $2164 = HEAP32[$2163>>2]|0; //@line 717 "lpc.c"
     $2165 = ($2164|0)<(0); //@line 717 "lpc.c"
     $2166 = $2165 << 31 >> 31; //@line 717 "lpc.c"
     $2167 = $6; //@line 717 "lpc.c"
     $2168 = $12; //@line 717 "lpc.c"
     $2169 = (($2168) - 2)|0; //@line 717 "lpc.c"
     $2170 = (($2167) + ($2169<<2)|0); //@line 717 "lpc.c"
     $2171 = HEAP32[$2170>>2]|0; //@line 717 "lpc.c"
     $2172 = ($2171|0)<(0); //@line 717 "lpc.c"
     $2173 = $2172 << 31 >> 31; //@line 717 "lpc.c"
     $2174 = (___muldi3(($2164|0),($2166|0),($2171|0),($2173|0))|0); //@line 717 "lpc.c"
     $2175 = tempRet0; //@line 717 "lpc.c"
     $2176 = $13; //@line 717 "lpc.c"
     $2177 = $2176; //@line 717 "lpc.c"
     $2178 = HEAP32[$2177>>2]|0; //@line 717 "lpc.c"
     $2179 = (($2176) + 4)|0; //@line 717 "lpc.c"
     $2180 = $2179; //@line 717 "lpc.c"
     $2181 = HEAP32[$2180>>2]|0; //@line 717 "lpc.c"
     $2182 = (_i64Add(($2178|0),($2181|0),($2174|0),($2175|0))|0); //@line 717 "lpc.c"
     $2183 = tempRet0; //@line 717 "lpc.c"
     $2184 = $13; //@line 717 "lpc.c"
     $2185 = $2184; //@line 717 "lpc.c"
     HEAP32[$2185>>2] = $2182; //@line 717 "lpc.c"
     $2186 = (($2184) + 4)|0; //@line 717 "lpc.c"
     $2187 = $2186; //@line 717 "lpc.c"
     HEAP32[$2187>>2] = $2183; //@line 717 "lpc.c"
     $2188 = $8; //@line 718 "lpc.c"
     $2189 = HEAP32[$2188>>2]|0; //@line 718 "lpc.c"
     $2190 = ($2189|0)<(0); //@line 718 "lpc.c"
     $2191 = $2190 << 31 >> 31; //@line 718 "lpc.c"
     $2192 = $6; //@line 718 "lpc.c"
     $2193 = $12; //@line 718 "lpc.c"
     $2194 = (($2193) - 1)|0; //@line 718 "lpc.c"
     $2195 = (($2192) + ($2194<<2)|0); //@line 718 "lpc.c"
     $2196 = HEAP32[$2195>>2]|0; //@line 718 "lpc.c"
     $2197 = ($2196|0)<(0); //@line 718 "lpc.c"
     $2198 = $2197 << 31 >> 31; //@line 718 "lpc.c"
     $2199 = (___muldi3(($2189|0),($2191|0),($2196|0),($2198|0))|0); //@line 718 "lpc.c"
     $2200 = tempRet0; //@line 718 "lpc.c"
     $2201 = $13; //@line 718 "lpc.c"
     $2202 = $2201; //@line 718 "lpc.c"
     $2203 = HEAP32[$2202>>2]|0; //@line 718 "lpc.c"
     $2204 = (($2201) + 4)|0; //@line 718 "lpc.c"
     $2205 = $2204; //@line 718 "lpc.c"
     $2206 = HEAP32[$2205>>2]|0; //@line 718 "lpc.c"
     $2207 = (_i64Add(($2203|0),($2206|0),($2199|0),($2200|0))|0); //@line 718 "lpc.c"
     $2208 = tempRet0; //@line 718 "lpc.c"
     $2209 = $13; //@line 718 "lpc.c"
     $2210 = $2209; //@line 718 "lpc.c"
     HEAP32[$2210>>2] = $2207; //@line 718 "lpc.c"
     $2211 = (($2209) + 4)|0; //@line 718 "lpc.c"
     $2212 = $2211; //@line 718 "lpc.c"
     HEAP32[$2212>>2] = $2208; //@line 718 "lpc.c"
     $2213 = $6; //@line 719 "lpc.c"
     $2214 = $12; //@line 719 "lpc.c"
     $2215 = (($2213) + ($2214<<2)|0); //@line 719 "lpc.c"
     $2216 = HEAP32[$2215>>2]|0; //@line 719 "lpc.c"
     $2217 = $13; //@line 719 "lpc.c"
     $2218 = $2217; //@line 719 "lpc.c"
     $2219 = HEAP32[$2218>>2]|0; //@line 719 "lpc.c"
     $2220 = (($2217) + 4)|0; //@line 719 "lpc.c"
     $2221 = $2220; //@line 719 "lpc.c"
     $2222 = HEAP32[$2221>>2]|0; //@line 719 "lpc.c"
     $2223 = $10; //@line 719 "lpc.c"
     $2224 = (_bitshift64Ashr(($2219|0),($2222|0),($2223|0))|0); //@line 719 "lpc.c"
     $2225 = tempRet0; //@line 719 "lpc.c"
     $2226 = (($2216) - ($2224))|0; //@line 719 "lpc.c"
     $2227 = $11; //@line 719 "lpc.c"
     $2228 = $12; //@line 719 "lpc.c"
     $2229 = (($2227) + ($2228<<2)|0); //@line 719 "lpc.c"
     HEAP32[$2229>>2] = $2226; //@line 719 "lpc.c"
     $2230 = $12; //@line 714 "lpc.c"
     $2231 = (($2230) + 1)|0; //@line 714 "lpc.c"
     $12 = $2231; //@line 714 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  } else {
   $2232 = ($1998|0)==(2); //@line 724 "lpc.c"
   $12 = 0;
   if ($2232) {
    while(1) {
     $2233 = $12; //@line 725 "lpc.c"
     $2234 = $7; //@line 725 "lpc.c"
     $2235 = ($2233|0)<($2234|0); //@line 725 "lpc.c"
     if (!($2235)) {
      break;
     }
     $2236 = $13; //@line 726 "lpc.c"
     $2237 = $2236; //@line 726 "lpc.c"
     HEAP32[$2237>>2] = 0; //@line 726 "lpc.c"
     $2238 = (($2236) + 4)|0; //@line 726 "lpc.c"
     $2239 = $2238; //@line 726 "lpc.c"
     HEAP32[$2239>>2] = 0; //@line 726 "lpc.c"
     $2240 = $8; //@line 727 "lpc.c"
     $2241 = ((($2240)) + 4|0); //@line 727 "lpc.c"
     $2242 = HEAP32[$2241>>2]|0; //@line 727 "lpc.c"
     $2243 = ($2242|0)<(0); //@line 727 "lpc.c"
     $2244 = $2243 << 31 >> 31; //@line 727 "lpc.c"
     $2245 = $6; //@line 727 "lpc.c"
     $2246 = $12; //@line 727 "lpc.c"
     $2247 = (($2246) - 2)|0; //@line 727 "lpc.c"
     $2248 = (($2245) + ($2247<<2)|0); //@line 727 "lpc.c"
     $2249 = HEAP32[$2248>>2]|0; //@line 727 "lpc.c"
     $2250 = ($2249|0)<(0); //@line 727 "lpc.c"
     $2251 = $2250 << 31 >> 31; //@line 727 "lpc.c"
     $2252 = (___muldi3(($2242|0),($2244|0),($2249|0),($2251|0))|0); //@line 727 "lpc.c"
     $2253 = tempRet0; //@line 727 "lpc.c"
     $2254 = $13; //@line 727 "lpc.c"
     $2255 = $2254; //@line 727 "lpc.c"
     $2256 = HEAP32[$2255>>2]|0; //@line 727 "lpc.c"
     $2257 = (($2254) + 4)|0; //@line 727 "lpc.c"
     $2258 = $2257; //@line 727 "lpc.c"
     $2259 = HEAP32[$2258>>2]|0; //@line 727 "lpc.c"
     $2260 = (_i64Add(($2256|0),($2259|0),($2252|0),($2253|0))|0); //@line 727 "lpc.c"
     $2261 = tempRet0; //@line 727 "lpc.c"
     $2262 = $13; //@line 727 "lpc.c"
     $2263 = $2262; //@line 727 "lpc.c"
     HEAP32[$2263>>2] = $2260; //@line 727 "lpc.c"
     $2264 = (($2262) + 4)|0; //@line 727 "lpc.c"
     $2265 = $2264; //@line 727 "lpc.c"
     HEAP32[$2265>>2] = $2261; //@line 727 "lpc.c"
     $2266 = $8; //@line 728 "lpc.c"
     $2267 = HEAP32[$2266>>2]|0; //@line 728 "lpc.c"
     $2268 = ($2267|0)<(0); //@line 728 "lpc.c"
     $2269 = $2268 << 31 >> 31; //@line 728 "lpc.c"
     $2270 = $6; //@line 728 "lpc.c"
     $2271 = $12; //@line 728 "lpc.c"
     $2272 = (($2271) - 1)|0; //@line 728 "lpc.c"
     $2273 = (($2270) + ($2272<<2)|0); //@line 728 "lpc.c"
     $2274 = HEAP32[$2273>>2]|0; //@line 728 "lpc.c"
     $2275 = ($2274|0)<(0); //@line 728 "lpc.c"
     $2276 = $2275 << 31 >> 31; //@line 728 "lpc.c"
     $2277 = (___muldi3(($2267|0),($2269|0),($2274|0),($2276|0))|0); //@line 728 "lpc.c"
     $2278 = tempRet0; //@line 728 "lpc.c"
     $2279 = $13; //@line 728 "lpc.c"
     $2280 = $2279; //@line 728 "lpc.c"
     $2281 = HEAP32[$2280>>2]|0; //@line 728 "lpc.c"
     $2282 = (($2279) + 4)|0; //@line 728 "lpc.c"
     $2283 = $2282; //@line 728 "lpc.c"
     $2284 = HEAP32[$2283>>2]|0; //@line 728 "lpc.c"
     $2285 = (_i64Add(($2281|0),($2284|0),($2277|0),($2278|0))|0); //@line 728 "lpc.c"
     $2286 = tempRet0; //@line 728 "lpc.c"
     $2287 = $13; //@line 728 "lpc.c"
     $2288 = $2287; //@line 728 "lpc.c"
     HEAP32[$2288>>2] = $2285; //@line 728 "lpc.c"
     $2289 = (($2287) + 4)|0; //@line 728 "lpc.c"
     $2290 = $2289; //@line 728 "lpc.c"
     HEAP32[$2290>>2] = $2286; //@line 728 "lpc.c"
     $2291 = $6; //@line 729 "lpc.c"
     $2292 = $12; //@line 729 "lpc.c"
     $2293 = (($2291) + ($2292<<2)|0); //@line 729 "lpc.c"
     $2294 = HEAP32[$2293>>2]|0; //@line 729 "lpc.c"
     $2295 = $13; //@line 729 "lpc.c"
     $2296 = $2295; //@line 729 "lpc.c"
     $2297 = HEAP32[$2296>>2]|0; //@line 729 "lpc.c"
     $2298 = (($2295) + 4)|0; //@line 729 "lpc.c"
     $2299 = $2298; //@line 729 "lpc.c"
     $2300 = HEAP32[$2299>>2]|0; //@line 729 "lpc.c"
     $2301 = $10; //@line 729 "lpc.c"
     $2302 = (_bitshift64Ashr(($2297|0),($2300|0),($2301|0))|0); //@line 729 "lpc.c"
     $2303 = tempRet0; //@line 729 "lpc.c"
     $2304 = (($2294) - ($2302))|0; //@line 729 "lpc.c"
     $2305 = $11; //@line 729 "lpc.c"
     $2306 = $12; //@line 729 "lpc.c"
     $2307 = (($2305) + ($2306<<2)|0); //@line 729 "lpc.c"
     HEAP32[$2307>>2] = $2304; //@line 729 "lpc.c"
     $2308 = $12; //@line 725 "lpc.c"
     $2309 = (($2308) + 1)|0; //@line 725 "lpc.c"
     $12 = $2309; //@line 725 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   } else {
    while(1) {
     $2310 = $12; //@line 733 "lpc.c"
     $2311 = $7; //@line 733 "lpc.c"
     $2312 = ($2310|0)<($2311|0); //@line 733 "lpc.c"
     if (!($2312)) {
      break;
     }
     $2313 = $6; //@line 734 "lpc.c"
     $2314 = $12; //@line 734 "lpc.c"
     $2315 = (($2313) + ($2314<<2)|0); //@line 734 "lpc.c"
     $2316 = HEAP32[$2315>>2]|0; //@line 734 "lpc.c"
     $2317 = $8; //@line 734 "lpc.c"
     $2318 = HEAP32[$2317>>2]|0; //@line 734 "lpc.c"
     $2319 = ($2318|0)<(0); //@line 734 "lpc.c"
     $2320 = $2319 << 31 >> 31; //@line 734 "lpc.c"
     $2321 = $6; //@line 734 "lpc.c"
     $2322 = $12; //@line 734 "lpc.c"
     $2323 = (($2322) - 1)|0; //@line 734 "lpc.c"
     $2324 = (($2321) + ($2323<<2)|0); //@line 734 "lpc.c"
     $2325 = HEAP32[$2324>>2]|0; //@line 734 "lpc.c"
     $2326 = ($2325|0)<(0); //@line 734 "lpc.c"
     $2327 = $2326 << 31 >> 31; //@line 734 "lpc.c"
     $2328 = (___muldi3(($2318|0),($2320|0),($2325|0),($2327|0))|0); //@line 734 "lpc.c"
     $2329 = tempRet0; //@line 734 "lpc.c"
     $2330 = $10; //@line 734 "lpc.c"
     $2331 = (_bitshift64Ashr(($2328|0),($2329|0),($2330|0))|0); //@line 734 "lpc.c"
     $2332 = tempRet0; //@line 734 "lpc.c"
     $2333 = (($2316) - ($2331))|0; //@line 734 "lpc.c"
     $2334 = $11; //@line 734 "lpc.c"
     $2335 = $12; //@line 734 "lpc.c"
     $2336 = (($2334) + ($2335<<2)|0); //@line 734 "lpc.c"
     HEAP32[$2336>>2] = $2333; //@line 734 "lpc.c"
     $2337 = $12; //@line 733 "lpc.c"
     $2338 = (($2337) + 1)|0; //@line 733 "lpc.c"
     $12 = $2338; //@line 733 "lpc.c"
    }
    STACKTOP = sp;return; //@line 779 "lpc.c"
   }
  }
 }
}
function _FLAC__lpc_restore_signal($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $9; //@line 835 "lpc.c"
 $15 = ($14>>>0)<=(12); //@line 835 "lpc.c"
 if (!($15)) {
  $12 = 0; //@line 1003 "lpc.c"
  while(1) {
   $1068 = $12; //@line 1003 "lpc.c"
   $1069 = $7; //@line 1003 "lpc.c"
   $1070 = ($1068|0)<($1069|0); //@line 1003 "lpc.c"
   if (!($1070)) {
    break;
   }
   $13 = 0; //@line 1004 "lpc.c"
   $1071 = $9; //@line 1005 "lpc.c"
   switch ($1071|0) {
   case 32:  {
    $1072 = $8; //@line 1006 "lpc.c"
    $1073 = ((($1072)) + 124|0); //@line 1006 "lpc.c"
    $1074 = HEAP32[$1073>>2]|0; //@line 1006 "lpc.c"
    $1075 = $11; //@line 1006 "lpc.c"
    $1076 = $12; //@line 1006 "lpc.c"
    $1077 = (($1076) - 32)|0; //@line 1006 "lpc.c"
    $1078 = (($1075) + ($1077<<2)|0); //@line 1006 "lpc.c"
    $1079 = HEAP32[$1078>>2]|0; //@line 1006 "lpc.c"
    $1080 = Math_imul($1074, $1079)|0; //@line 1006 "lpc.c"
    $1081 = $13; //@line 1006 "lpc.c"
    $1082 = (($1081) + ($1080))|0; //@line 1006 "lpc.c"
    $13 = $1082; //@line 1006 "lpc.c"
    label = 53;
    break;
   }
   case 31:  {
    label = 53;
    break;
   }
   case 30:  {
    label = 54;
    break;
   }
   case 29:  {
    label = 55;
    break;
   }
   case 28:  {
    label = 56;
    break;
   }
   case 27:  {
    label = 57;
    break;
   }
   case 26:  {
    label = 58;
    break;
   }
   case 25:  {
    label = 59;
    break;
   }
   case 24:  {
    label = 60;
    break;
   }
   case 23:  {
    label = 61;
    break;
   }
   case 22:  {
    label = 62;
    break;
   }
   case 21:  {
    label = 63;
    break;
   }
   case 20:  {
    label = 64;
    break;
   }
   case 19:  {
    label = 65;
    break;
   }
   case 18:  {
    label = 66;
    break;
   }
   case 17:  {
    label = 67;
    break;
   }
   case 16:  {
    label = 68;
    break;
   }
   case 15:  {
    label = 69;
    break;
   }
   case 14:  {
    label = 70;
    break;
   }
   case 13:  {
    label = 71;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $1083 = $8; //@line 1007 "lpc.c"
    $1084 = ((($1083)) + 120|0); //@line 1007 "lpc.c"
    $1085 = HEAP32[$1084>>2]|0; //@line 1007 "lpc.c"
    $1086 = $11; //@line 1007 "lpc.c"
    $1087 = $12; //@line 1007 "lpc.c"
    $1088 = (($1087) - 31)|0; //@line 1007 "lpc.c"
    $1089 = (($1086) + ($1088<<2)|0); //@line 1007 "lpc.c"
    $1090 = HEAP32[$1089>>2]|0; //@line 1007 "lpc.c"
    $1091 = Math_imul($1085, $1090)|0; //@line 1007 "lpc.c"
    $1092 = $13; //@line 1007 "lpc.c"
    $1093 = (($1092) + ($1091))|0; //@line 1007 "lpc.c"
    $13 = $1093; //@line 1007 "lpc.c"
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $1094 = $8; //@line 1008 "lpc.c"
    $1095 = ((($1094)) + 116|0); //@line 1008 "lpc.c"
    $1096 = HEAP32[$1095>>2]|0; //@line 1008 "lpc.c"
    $1097 = $11; //@line 1008 "lpc.c"
    $1098 = $12; //@line 1008 "lpc.c"
    $1099 = (($1098) - 30)|0; //@line 1008 "lpc.c"
    $1100 = (($1097) + ($1099<<2)|0); //@line 1008 "lpc.c"
    $1101 = HEAP32[$1100>>2]|0; //@line 1008 "lpc.c"
    $1102 = Math_imul($1096, $1101)|0; //@line 1008 "lpc.c"
    $1103 = $13; //@line 1008 "lpc.c"
    $1104 = (($1103) + ($1102))|0; //@line 1008 "lpc.c"
    $13 = $1104; //@line 1008 "lpc.c"
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $1105 = $8; //@line 1009 "lpc.c"
    $1106 = ((($1105)) + 112|0); //@line 1009 "lpc.c"
    $1107 = HEAP32[$1106>>2]|0; //@line 1009 "lpc.c"
    $1108 = $11; //@line 1009 "lpc.c"
    $1109 = $12; //@line 1009 "lpc.c"
    $1110 = (($1109) - 29)|0; //@line 1009 "lpc.c"
    $1111 = (($1108) + ($1110<<2)|0); //@line 1009 "lpc.c"
    $1112 = HEAP32[$1111>>2]|0; //@line 1009 "lpc.c"
    $1113 = Math_imul($1107, $1112)|0; //@line 1009 "lpc.c"
    $1114 = $13; //@line 1009 "lpc.c"
    $1115 = (($1114) + ($1113))|0; //@line 1009 "lpc.c"
    $13 = $1115; //@line 1009 "lpc.c"
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $1116 = $8; //@line 1010 "lpc.c"
    $1117 = ((($1116)) + 108|0); //@line 1010 "lpc.c"
    $1118 = HEAP32[$1117>>2]|0; //@line 1010 "lpc.c"
    $1119 = $11; //@line 1010 "lpc.c"
    $1120 = $12; //@line 1010 "lpc.c"
    $1121 = (($1120) - 28)|0; //@line 1010 "lpc.c"
    $1122 = (($1119) + ($1121<<2)|0); //@line 1010 "lpc.c"
    $1123 = HEAP32[$1122>>2]|0; //@line 1010 "lpc.c"
    $1124 = Math_imul($1118, $1123)|0; //@line 1010 "lpc.c"
    $1125 = $13; //@line 1010 "lpc.c"
    $1126 = (($1125) + ($1124))|0; //@line 1010 "lpc.c"
    $13 = $1126; //@line 1010 "lpc.c"
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $1127 = $8; //@line 1011 "lpc.c"
    $1128 = ((($1127)) + 104|0); //@line 1011 "lpc.c"
    $1129 = HEAP32[$1128>>2]|0; //@line 1011 "lpc.c"
    $1130 = $11; //@line 1011 "lpc.c"
    $1131 = $12; //@line 1011 "lpc.c"
    $1132 = (($1131) - 27)|0; //@line 1011 "lpc.c"
    $1133 = (($1130) + ($1132<<2)|0); //@line 1011 "lpc.c"
    $1134 = HEAP32[$1133>>2]|0; //@line 1011 "lpc.c"
    $1135 = Math_imul($1129, $1134)|0; //@line 1011 "lpc.c"
    $1136 = $13; //@line 1011 "lpc.c"
    $1137 = (($1136) + ($1135))|0; //@line 1011 "lpc.c"
    $13 = $1137; //@line 1011 "lpc.c"
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $1138 = $8; //@line 1012 "lpc.c"
    $1139 = ((($1138)) + 100|0); //@line 1012 "lpc.c"
    $1140 = HEAP32[$1139>>2]|0; //@line 1012 "lpc.c"
    $1141 = $11; //@line 1012 "lpc.c"
    $1142 = $12; //@line 1012 "lpc.c"
    $1143 = (($1142) - 26)|0; //@line 1012 "lpc.c"
    $1144 = (($1141) + ($1143<<2)|0); //@line 1012 "lpc.c"
    $1145 = HEAP32[$1144>>2]|0; //@line 1012 "lpc.c"
    $1146 = Math_imul($1140, $1145)|0; //@line 1012 "lpc.c"
    $1147 = $13; //@line 1012 "lpc.c"
    $1148 = (($1147) + ($1146))|0; //@line 1012 "lpc.c"
    $13 = $1148; //@line 1012 "lpc.c"
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $1149 = $8; //@line 1013 "lpc.c"
    $1150 = ((($1149)) + 96|0); //@line 1013 "lpc.c"
    $1151 = HEAP32[$1150>>2]|0; //@line 1013 "lpc.c"
    $1152 = $11; //@line 1013 "lpc.c"
    $1153 = $12; //@line 1013 "lpc.c"
    $1154 = (($1153) - 25)|0; //@line 1013 "lpc.c"
    $1155 = (($1152) + ($1154<<2)|0); //@line 1013 "lpc.c"
    $1156 = HEAP32[$1155>>2]|0; //@line 1013 "lpc.c"
    $1157 = Math_imul($1151, $1156)|0; //@line 1013 "lpc.c"
    $1158 = $13; //@line 1013 "lpc.c"
    $1159 = (($1158) + ($1157))|0; //@line 1013 "lpc.c"
    $13 = $1159; //@line 1013 "lpc.c"
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $1160 = $8; //@line 1014 "lpc.c"
    $1161 = ((($1160)) + 92|0); //@line 1014 "lpc.c"
    $1162 = HEAP32[$1161>>2]|0; //@line 1014 "lpc.c"
    $1163 = $11; //@line 1014 "lpc.c"
    $1164 = $12; //@line 1014 "lpc.c"
    $1165 = (($1164) - 24)|0; //@line 1014 "lpc.c"
    $1166 = (($1163) + ($1165<<2)|0); //@line 1014 "lpc.c"
    $1167 = HEAP32[$1166>>2]|0; //@line 1014 "lpc.c"
    $1168 = Math_imul($1162, $1167)|0; //@line 1014 "lpc.c"
    $1169 = $13; //@line 1014 "lpc.c"
    $1170 = (($1169) + ($1168))|0; //@line 1014 "lpc.c"
    $13 = $1170; //@line 1014 "lpc.c"
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $1171 = $8; //@line 1015 "lpc.c"
    $1172 = ((($1171)) + 88|0); //@line 1015 "lpc.c"
    $1173 = HEAP32[$1172>>2]|0; //@line 1015 "lpc.c"
    $1174 = $11; //@line 1015 "lpc.c"
    $1175 = $12; //@line 1015 "lpc.c"
    $1176 = (($1175) - 23)|0; //@line 1015 "lpc.c"
    $1177 = (($1174) + ($1176<<2)|0); //@line 1015 "lpc.c"
    $1178 = HEAP32[$1177>>2]|0; //@line 1015 "lpc.c"
    $1179 = Math_imul($1173, $1178)|0; //@line 1015 "lpc.c"
    $1180 = $13; //@line 1015 "lpc.c"
    $1181 = (($1180) + ($1179))|0; //@line 1015 "lpc.c"
    $13 = $1181; //@line 1015 "lpc.c"
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $1182 = $8; //@line 1016 "lpc.c"
    $1183 = ((($1182)) + 84|0); //@line 1016 "lpc.c"
    $1184 = HEAP32[$1183>>2]|0; //@line 1016 "lpc.c"
    $1185 = $11; //@line 1016 "lpc.c"
    $1186 = $12; //@line 1016 "lpc.c"
    $1187 = (($1186) - 22)|0; //@line 1016 "lpc.c"
    $1188 = (($1185) + ($1187<<2)|0); //@line 1016 "lpc.c"
    $1189 = HEAP32[$1188>>2]|0; //@line 1016 "lpc.c"
    $1190 = Math_imul($1184, $1189)|0; //@line 1016 "lpc.c"
    $1191 = $13; //@line 1016 "lpc.c"
    $1192 = (($1191) + ($1190))|0; //@line 1016 "lpc.c"
    $13 = $1192; //@line 1016 "lpc.c"
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $1193 = $8; //@line 1017 "lpc.c"
    $1194 = ((($1193)) + 80|0); //@line 1017 "lpc.c"
    $1195 = HEAP32[$1194>>2]|0; //@line 1017 "lpc.c"
    $1196 = $11; //@line 1017 "lpc.c"
    $1197 = $12; //@line 1017 "lpc.c"
    $1198 = (($1197) - 21)|0; //@line 1017 "lpc.c"
    $1199 = (($1196) + ($1198<<2)|0); //@line 1017 "lpc.c"
    $1200 = HEAP32[$1199>>2]|0; //@line 1017 "lpc.c"
    $1201 = Math_imul($1195, $1200)|0; //@line 1017 "lpc.c"
    $1202 = $13; //@line 1017 "lpc.c"
    $1203 = (($1202) + ($1201))|0; //@line 1017 "lpc.c"
    $13 = $1203; //@line 1017 "lpc.c"
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $1204 = $8; //@line 1018 "lpc.c"
    $1205 = ((($1204)) + 76|0); //@line 1018 "lpc.c"
    $1206 = HEAP32[$1205>>2]|0; //@line 1018 "lpc.c"
    $1207 = $11; //@line 1018 "lpc.c"
    $1208 = $12; //@line 1018 "lpc.c"
    $1209 = (($1208) - 20)|0; //@line 1018 "lpc.c"
    $1210 = (($1207) + ($1209<<2)|0); //@line 1018 "lpc.c"
    $1211 = HEAP32[$1210>>2]|0; //@line 1018 "lpc.c"
    $1212 = Math_imul($1206, $1211)|0; //@line 1018 "lpc.c"
    $1213 = $13; //@line 1018 "lpc.c"
    $1214 = (($1213) + ($1212))|0; //@line 1018 "lpc.c"
    $13 = $1214; //@line 1018 "lpc.c"
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $1215 = $8; //@line 1019 "lpc.c"
    $1216 = ((($1215)) + 72|0); //@line 1019 "lpc.c"
    $1217 = HEAP32[$1216>>2]|0; //@line 1019 "lpc.c"
    $1218 = $11; //@line 1019 "lpc.c"
    $1219 = $12; //@line 1019 "lpc.c"
    $1220 = (($1219) - 19)|0; //@line 1019 "lpc.c"
    $1221 = (($1218) + ($1220<<2)|0); //@line 1019 "lpc.c"
    $1222 = HEAP32[$1221>>2]|0; //@line 1019 "lpc.c"
    $1223 = Math_imul($1217, $1222)|0; //@line 1019 "lpc.c"
    $1224 = $13; //@line 1019 "lpc.c"
    $1225 = (($1224) + ($1223))|0; //@line 1019 "lpc.c"
    $13 = $1225; //@line 1019 "lpc.c"
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $1226 = $8; //@line 1020 "lpc.c"
    $1227 = ((($1226)) + 68|0); //@line 1020 "lpc.c"
    $1228 = HEAP32[$1227>>2]|0; //@line 1020 "lpc.c"
    $1229 = $11; //@line 1020 "lpc.c"
    $1230 = $12; //@line 1020 "lpc.c"
    $1231 = (($1230) - 18)|0; //@line 1020 "lpc.c"
    $1232 = (($1229) + ($1231<<2)|0); //@line 1020 "lpc.c"
    $1233 = HEAP32[$1232>>2]|0; //@line 1020 "lpc.c"
    $1234 = Math_imul($1228, $1233)|0; //@line 1020 "lpc.c"
    $1235 = $13; //@line 1020 "lpc.c"
    $1236 = (($1235) + ($1234))|0; //@line 1020 "lpc.c"
    $13 = $1236; //@line 1020 "lpc.c"
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $1237 = $8; //@line 1021 "lpc.c"
    $1238 = ((($1237)) + 64|0); //@line 1021 "lpc.c"
    $1239 = HEAP32[$1238>>2]|0; //@line 1021 "lpc.c"
    $1240 = $11; //@line 1021 "lpc.c"
    $1241 = $12; //@line 1021 "lpc.c"
    $1242 = (($1241) - 17)|0; //@line 1021 "lpc.c"
    $1243 = (($1240) + ($1242<<2)|0); //@line 1021 "lpc.c"
    $1244 = HEAP32[$1243>>2]|0; //@line 1021 "lpc.c"
    $1245 = Math_imul($1239, $1244)|0; //@line 1021 "lpc.c"
    $1246 = $13; //@line 1021 "lpc.c"
    $1247 = (($1246) + ($1245))|0; //@line 1021 "lpc.c"
    $13 = $1247; //@line 1021 "lpc.c"
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $1248 = $8; //@line 1022 "lpc.c"
    $1249 = ((($1248)) + 60|0); //@line 1022 "lpc.c"
    $1250 = HEAP32[$1249>>2]|0; //@line 1022 "lpc.c"
    $1251 = $11; //@line 1022 "lpc.c"
    $1252 = $12; //@line 1022 "lpc.c"
    $1253 = (($1252) - 16)|0; //@line 1022 "lpc.c"
    $1254 = (($1251) + ($1253<<2)|0); //@line 1022 "lpc.c"
    $1255 = HEAP32[$1254>>2]|0; //@line 1022 "lpc.c"
    $1256 = Math_imul($1250, $1255)|0; //@line 1022 "lpc.c"
    $1257 = $13; //@line 1022 "lpc.c"
    $1258 = (($1257) + ($1256))|0; //@line 1022 "lpc.c"
    $13 = $1258; //@line 1022 "lpc.c"
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $1259 = $8; //@line 1023 "lpc.c"
    $1260 = ((($1259)) + 56|0); //@line 1023 "lpc.c"
    $1261 = HEAP32[$1260>>2]|0; //@line 1023 "lpc.c"
    $1262 = $11; //@line 1023 "lpc.c"
    $1263 = $12; //@line 1023 "lpc.c"
    $1264 = (($1263) - 15)|0; //@line 1023 "lpc.c"
    $1265 = (($1262) + ($1264<<2)|0); //@line 1023 "lpc.c"
    $1266 = HEAP32[$1265>>2]|0; //@line 1023 "lpc.c"
    $1267 = Math_imul($1261, $1266)|0; //@line 1023 "lpc.c"
    $1268 = $13; //@line 1023 "lpc.c"
    $1269 = (($1268) + ($1267))|0; //@line 1023 "lpc.c"
    $13 = $1269; //@line 1023 "lpc.c"
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $1270 = $8; //@line 1024 "lpc.c"
    $1271 = ((($1270)) + 52|0); //@line 1024 "lpc.c"
    $1272 = HEAP32[$1271>>2]|0; //@line 1024 "lpc.c"
    $1273 = $11; //@line 1024 "lpc.c"
    $1274 = $12; //@line 1024 "lpc.c"
    $1275 = (($1274) - 14)|0; //@line 1024 "lpc.c"
    $1276 = (($1273) + ($1275<<2)|0); //@line 1024 "lpc.c"
    $1277 = HEAP32[$1276>>2]|0; //@line 1024 "lpc.c"
    $1278 = Math_imul($1272, $1277)|0; //@line 1024 "lpc.c"
    $1279 = $13; //@line 1024 "lpc.c"
    $1280 = (($1279) + ($1278))|0; //@line 1024 "lpc.c"
    $13 = $1280; //@line 1024 "lpc.c"
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $1281 = $8; //@line 1025 "lpc.c"
    $1282 = ((($1281)) + 48|0); //@line 1025 "lpc.c"
    $1283 = HEAP32[$1282>>2]|0; //@line 1025 "lpc.c"
    $1284 = $11; //@line 1025 "lpc.c"
    $1285 = $12; //@line 1025 "lpc.c"
    $1286 = (($1285) - 13)|0; //@line 1025 "lpc.c"
    $1287 = (($1284) + ($1286<<2)|0); //@line 1025 "lpc.c"
    $1288 = HEAP32[$1287>>2]|0; //@line 1025 "lpc.c"
    $1289 = Math_imul($1283, $1288)|0; //@line 1025 "lpc.c"
    $1290 = $13; //@line 1025 "lpc.c"
    $1291 = (($1290) + ($1289))|0; //@line 1025 "lpc.c"
    $13 = $1291; //@line 1025 "lpc.c"
    $1292 = $8; //@line 1026 "lpc.c"
    $1293 = ((($1292)) + 44|0); //@line 1026 "lpc.c"
    $1294 = HEAP32[$1293>>2]|0; //@line 1026 "lpc.c"
    $1295 = $11; //@line 1026 "lpc.c"
    $1296 = $12; //@line 1026 "lpc.c"
    $1297 = (($1296) - 12)|0; //@line 1026 "lpc.c"
    $1298 = (($1295) + ($1297<<2)|0); //@line 1026 "lpc.c"
    $1299 = HEAP32[$1298>>2]|0; //@line 1026 "lpc.c"
    $1300 = Math_imul($1294, $1299)|0; //@line 1026 "lpc.c"
    $1301 = $13; //@line 1026 "lpc.c"
    $1302 = (($1301) + ($1300))|0; //@line 1026 "lpc.c"
    $13 = $1302; //@line 1026 "lpc.c"
    $1303 = $8; //@line 1027 "lpc.c"
    $1304 = ((($1303)) + 40|0); //@line 1027 "lpc.c"
    $1305 = HEAP32[$1304>>2]|0; //@line 1027 "lpc.c"
    $1306 = $11; //@line 1027 "lpc.c"
    $1307 = $12; //@line 1027 "lpc.c"
    $1308 = (($1307) - 11)|0; //@line 1027 "lpc.c"
    $1309 = (($1306) + ($1308<<2)|0); //@line 1027 "lpc.c"
    $1310 = HEAP32[$1309>>2]|0; //@line 1027 "lpc.c"
    $1311 = Math_imul($1305, $1310)|0; //@line 1027 "lpc.c"
    $1312 = $13; //@line 1027 "lpc.c"
    $1313 = (($1312) + ($1311))|0; //@line 1027 "lpc.c"
    $13 = $1313; //@line 1027 "lpc.c"
    $1314 = $8; //@line 1028 "lpc.c"
    $1315 = ((($1314)) + 36|0); //@line 1028 "lpc.c"
    $1316 = HEAP32[$1315>>2]|0; //@line 1028 "lpc.c"
    $1317 = $11; //@line 1028 "lpc.c"
    $1318 = $12; //@line 1028 "lpc.c"
    $1319 = (($1318) - 10)|0; //@line 1028 "lpc.c"
    $1320 = (($1317) + ($1319<<2)|0); //@line 1028 "lpc.c"
    $1321 = HEAP32[$1320>>2]|0; //@line 1028 "lpc.c"
    $1322 = Math_imul($1316, $1321)|0; //@line 1028 "lpc.c"
    $1323 = $13; //@line 1028 "lpc.c"
    $1324 = (($1323) + ($1322))|0; //@line 1028 "lpc.c"
    $13 = $1324; //@line 1028 "lpc.c"
    $1325 = $8; //@line 1029 "lpc.c"
    $1326 = ((($1325)) + 32|0); //@line 1029 "lpc.c"
    $1327 = HEAP32[$1326>>2]|0; //@line 1029 "lpc.c"
    $1328 = $11; //@line 1029 "lpc.c"
    $1329 = $12; //@line 1029 "lpc.c"
    $1330 = (($1329) - 9)|0; //@line 1029 "lpc.c"
    $1331 = (($1328) + ($1330<<2)|0); //@line 1029 "lpc.c"
    $1332 = HEAP32[$1331>>2]|0; //@line 1029 "lpc.c"
    $1333 = Math_imul($1327, $1332)|0; //@line 1029 "lpc.c"
    $1334 = $13; //@line 1029 "lpc.c"
    $1335 = (($1334) + ($1333))|0; //@line 1029 "lpc.c"
    $13 = $1335; //@line 1029 "lpc.c"
    $1336 = $8; //@line 1030 "lpc.c"
    $1337 = ((($1336)) + 28|0); //@line 1030 "lpc.c"
    $1338 = HEAP32[$1337>>2]|0; //@line 1030 "lpc.c"
    $1339 = $11; //@line 1030 "lpc.c"
    $1340 = $12; //@line 1030 "lpc.c"
    $1341 = (($1340) - 8)|0; //@line 1030 "lpc.c"
    $1342 = (($1339) + ($1341<<2)|0); //@line 1030 "lpc.c"
    $1343 = HEAP32[$1342>>2]|0; //@line 1030 "lpc.c"
    $1344 = Math_imul($1338, $1343)|0; //@line 1030 "lpc.c"
    $1345 = $13; //@line 1030 "lpc.c"
    $1346 = (($1345) + ($1344))|0; //@line 1030 "lpc.c"
    $13 = $1346; //@line 1030 "lpc.c"
    $1347 = $8; //@line 1031 "lpc.c"
    $1348 = ((($1347)) + 24|0); //@line 1031 "lpc.c"
    $1349 = HEAP32[$1348>>2]|0; //@line 1031 "lpc.c"
    $1350 = $11; //@line 1031 "lpc.c"
    $1351 = $12; //@line 1031 "lpc.c"
    $1352 = (($1351) - 7)|0; //@line 1031 "lpc.c"
    $1353 = (($1350) + ($1352<<2)|0); //@line 1031 "lpc.c"
    $1354 = HEAP32[$1353>>2]|0; //@line 1031 "lpc.c"
    $1355 = Math_imul($1349, $1354)|0; //@line 1031 "lpc.c"
    $1356 = $13; //@line 1031 "lpc.c"
    $1357 = (($1356) + ($1355))|0; //@line 1031 "lpc.c"
    $13 = $1357; //@line 1031 "lpc.c"
    $1358 = $8; //@line 1032 "lpc.c"
    $1359 = ((($1358)) + 20|0); //@line 1032 "lpc.c"
    $1360 = HEAP32[$1359>>2]|0; //@line 1032 "lpc.c"
    $1361 = $11; //@line 1032 "lpc.c"
    $1362 = $12; //@line 1032 "lpc.c"
    $1363 = (($1362) - 6)|0; //@line 1032 "lpc.c"
    $1364 = (($1361) + ($1363<<2)|0); //@line 1032 "lpc.c"
    $1365 = HEAP32[$1364>>2]|0; //@line 1032 "lpc.c"
    $1366 = Math_imul($1360, $1365)|0; //@line 1032 "lpc.c"
    $1367 = $13; //@line 1032 "lpc.c"
    $1368 = (($1367) + ($1366))|0; //@line 1032 "lpc.c"
    $13 = $1368; //@line 1032 "lpc.c"
    $1369 = $8; //@line 1033 "lpc.c"
    $1370 = ((($1369)) + 16|0); //@line 1033 "lpc.c"
    $1371 = HEAP32[$1370>>2]|0; //@line 1033 "lpc.c"
    $1372 = $11; //@line 1033 "lpc.c"
    $1373 = $12; //@line 1033 "lpc.c"
    $1374 = (($1373) - 5)|0; //@line 1033 "lpc.c"
    $1375 = (($1372) + ($1374<<2)|0); //@line 1033 "lpc.c"
    $1376 = HEAP32[$1375>>2]|0; //@line 1033 "lpc.c"
    $1377 = Math_imul($1371, $1376)|0; //@line 1033 "lpc.c"
    $1378 = $13; //@line 1033 "lpc.c"
    $1379 = (($1378) + ($1377))|0; //@line 1033 "lpc.c"
    $13 = $1379; //@line 1033 "lpc.c"
    $1380 = $8; //@line 1034 "lpc.c"
    $1381 = ((($1380)) + 12|0); //@line 1034 "lpc.c"
    $1382 = HEAP32[$1381>>2]|0; //@line 1034 "lpc.c"
    $1383 = $11; //@line 1034 "lpc.c"
    $1384 = $12; //@line 1034 "lpc.c"
    $1385 = (($1384) - 4)|0; //@line 1034 "lpc.c"
    $1386 = (($1383) + ($1385<<2)|0); //@line 1034 "lpc.c"
    $1387 = HEAP32[$1386>>2]|0; //@line 1034 "lpc.c"
    $1388 = Math_imul($1382, $1387)|0; //@line 1034 "lpc.c"
    $1389 = $13; //@line 1034 "lpc.c"
    $1390 = (($1389) + ($1388))|0; //@line 1034 "lpc.c"
    $13 = $1390; //@line 1034 "lpc.c"
    $1391 = $8; //@line 1035 "lpc.c"
    $1392 = ((($1391)) + 8|0); //@line 1035 "lpc.c"
    $1393 = HEAP32[$1392>>2]|0; //@line 1035 "lpc.c"
    $1394 = $11; //@line 1035 "lpc.c"
    $1395 = $12; //@line 1035 "lpc.c"
    $1396 = (($1395) - 3)|0; //@line 1035 "lpc.c"
    $1397 = (($1394) + ($1396<<2)|0); //@line 1035 "lpc.c"
    $1398 = HEAP32[$1397>>2]|0; //@line 1035 "lpc.c"
    $1399 = Math_imul($1393, $1398)|0; //@line 1035 "lpc.c"
    $1400 = $13; //@line 1035 "lpc.c"
    $1401 = (($1400) + ($1399))|0; //@line 1035 "lpc.c"
    $13 = $1401; //@line 1035 "lpc.c"
    $1402 = $8; //@line 1036 "lpc.c"
    $1403 = ((($1402)) + 4|0); //@line 1036 "lpc.c"
    $1404 = HEAP32[$1403>>2]|0; //@line 1036 "lpc.c"
    $1405 = $11; //@line 1036 "lpc.c"
    $1406 = $12; //@line 1036 "lpc.c"
    $1407 = (($1406) - 2)|0; //@line 1036 "lpc.c"
    $1408 = (($1405) + ($1407<<2)|0); //@line 1036 "lpc.c"
    $1409 = HEAP32[$1408>>2]|0; //@line 1036 "lpc.c"
    $1410 = Math_imul($1404, $1409)|0; //@line 1036 "lpc.c"
    $1411 = $13; //@line 1036 "lpc.c"
    $1412 = (($1411) + ($1410))|0; //@line 1036 "lpc.c"
    $13 = $1412; //@line 1036 "lpc.c"
    $1413 = $8; //@line 1037 "lpc.c"
    $1414 = HEAP32[$1413>>2]|0; //@line 1037 "lpc.c"
    $1415 = $11; //@line 1037 "lpc.c"
    $1416 = $12; //@line 1037 "lpc.c"
    $1417 = (($1416) - 1)|0; //@line 1037 "lpc.c"
    $1418 = (($1415) + ($1417<<2)|0); //@line 1037 "lpc.c"
    $1419 = HEAP32[$1418>>2]|0; //@line 1037 "lpc.c"
    $1420 = Math_imul($1414, $1419)|0; //@line 1037 "lpc.c"
    $1421 = $13; //@line 1037 "lpc.c"
    $1422 = (($1421) + ($1420))|0; //@line 1037 "lpc.c"
    $13 = $1422; //@line 1037 "lpc.c"
   }
   $1423 = $6; //@line 1039 "lpc.c"
   $1424 = $12; //@line 1039 "lpc.c"
   $1425 = (($1423) + ($1424<<2)|0); //@line 1039 "lpc.c"
   $1426 = HEAP32[$1425>>2]|0; //@line 1039 "lpc.c"
   $1427 = $13; //@line 1039 "lpc.c"
   $1428 = $10; //@line 1039 "lpc.c"
   $1429 = $1427 >> $1428; //@line 1039 "lpc.c"
   $1430 = (($1426) + ($1429))|0; //@line 1039 "lpc.c"
   $1431 = $11; //@line 1039 "lpc.c"
   $1432 = $12; //@line 1039 "lpc.c"
   $1433 = (($1431) + ($1432<<2)|0); //@line 1039 "lpc.c"
   HEAP32[$1433>>2] = $1430; //@line 1039 "lpc.c"
   $1434 = $12; //@line 1003 "lpc.c"
   $1435 = (($1434) + 1)|0; //@line 1003 "lpc.c"
   $12 = $1435; //@line 1003 "lpc.c"
  }
  STACKTOP = sp;return; //@line 1042 "lpc.c"
 }
 $16 = $9; //@line 836 "lpc.c"
 $17 = ($16>>>0)>(8); //@line 836 "lpc.c"
 $18 = $9;
 if ($17) {
  $19 = ($18>>>0)>(10); //@line 837 "lpc.c"
  $20 = $9;
  if ($19) {
   $21 = ($20|0)==(12); //@line 838 "lpc.c"
   $12 = 0;
   if ($21) {
    while(1) {
     $22 = $12; //@line 839 "lpc.c"
     $23 = $7; //@line 839 "lpc.c"
     $24 = ($22|0)<($23|0); //@line 839 "lpc.c"
     if (!($24)) {
      break;
     }
     $13 = 0; //@line 840 "lpc.c"
     $25 = $8; //@line 841 "lpc.c"
     $26 = ((($25)) + 44|0); //@line 841 "lpc.c"
     $27 = HEAP32[$26>>2]|0; //@line 841 "lpc.c"
     $28 = $11; //@line 841 "lpc.c"
     $29 = $12; //@line 841 "lpc.c"
     $30 = (($29) - 12)|0; //@line 841 "lpc.c"
     $31 = (($28) + ($30<<2)|0); //@line 841 "lpc.c"
     $32 = HEAP32[$31>>2]|0; //@line 841 "lpc.c"
     $33 = Math_imul($27, $32)|0; //@line 841 "lpc.c"
     $34 = $13; //@line 841 "lpc.c"
     $35 = (($34) + ($33))|0; //@line 841 "lpc.c"
     $13 = $35; //@line 841 "lpc.c"
     $36 = $8; //@line 842 "lpc.c"
     $37 = ((($36)) + 40|0); //@line 842 "lpc.c"
     $38 = HEAP32[$37>>2]|0; //@line 842 "lpc.c"
     $39 = $11; //@line 842 "lpc.c"
     $40 = $12; //@line 842 "lpc.c"
     $41 = (($40) - 11)|0; //@line 842 "lpc.c"
     $42 = (($39) + ($41<<2)|0); //@line 842 "lpc.c"
     $43 = HEAP32[$42>>2]|0; //@line 842 "lpc.c"
     $44 = Math_imul($38, $43)|0; //@line 842 "lpc.c"
     $45 = $13; //@line 842 "lpc.c"
     $46 = (($45) + ($44))|0; //@line 842 "lpc.c"
     $13 = $46; //@line 842 "lpc.c"
     $47 = $8; //@line 843 "lpc.c"
     $48 = ((($47)) + 36|0); //@line 843 "lpc.c"
     $49 = HEAP32[$48>>2]|0; //@line 843 "lpc.c"
     $50 = $11; //@line 843 "lpc.c"
     $51 = $12; //@line 843 "lpc.c"
     $52 = (($51) - 10)|0; //@line 843 "lpc.c"
     $53 = (($50) + ($52<<2)|0); //@line 843 "lpc.c"
     $54 = HEAP32[$53>>2]|0; //@line 843 "lpc.c"
     $55 = Math_imul($49, $54)|0; //@line 843 "lpc.c"
     $56 = $13; //@line 843 "lpc.c"
     $57 = (($56) + ($55))|0; //@line 843 "lpc.c"
     $13 = $57; //@line 843 "lpc.c"
     $58 = $8; //@line 844 "lpc.c"
     $59 = ((($58)) + 32|0); //@line 844 "lpc.c"
     $60 = HEAP32[$59>>2]|0; //@line 844 "lpc.c"
     $61 = $11; //@line 844 "lpc.c"
     $62 = $12; //@line 844 "lpc.c"
     $63 = (($62) - 9)|0; //@line 844 "lpc.c"
     $64 = (($61) + ($63<<2)|0); //@line 844 "lpc.c"
     $65 = HEAP32[$64>>2]|0; //@line 844 "lpc.c"
     $66 = Math_imul($60, $65)|0; //@line 844 "lpc.c"
     $67 = $13; //@line 844 "lpc.c"
     $68 = (($67) + ($66))|0; //@line 844 "lpc.c"
     $13 = $68; //@line 844 "lpc.c"
     $69 = $8; //@line 845 "lpc.c"
     $70 = ((($69)) + 28|0); //@line 845 "lpc.c"
     $71 = HEAP32[$70>>2]|0; //@line 845 "lpc.c"
     $72 = $11; //@line 845 "lpc.c"
     $73 = $12; //@line 845 "lpc.c"
     $74 = (($73) - 8)|0; //@line 845 "lpc.c"
     $75 = (($72) + ($74<<2)|0); //@line 845 "lpc.c"
     $76 = HEAP32[$75>>2]|0; //@line 845 "lpc.c"
     $77 = Math_imul($71, $76)|0; //@line 845 "lpc.c"
     $78 = $13; //@line 845 "lpc.c"
     $79 = (($78) + ($77))|0; //@line 845 "lpc.c"
     $13 = $79; //@line 845 "lpc.c"
     $80 = $8; //@line 846 "lpc.c"
     $81 = ((($80)) + 24|0); //@line 846 "lpc.c"
     $82 = HEAP32[$81>>2]|0; //@line 846 "lpc.c"
     $83 = $11; //@line 846 "lpc.c"
     $84 = $12; //@line 846 "lpc.c"
     $85 = (($84) - 7)|0; //@line 846 "lpc.c"
     $86 = (($83) + ($85<<2)|0); //@line 846 "lpc.c"
     $87 = HEAP32[$86>>2]|0; //@line 846 "lpc.c"
     $88 = Math_imul($82, $87)|0; //@line 846 "lpc.c"
     $89 = $13; //@line 846 "lpc.c"
     $90 = (($89) + ($88))|0; //@line 846 "lpc.c"
     $13 = $90; //@line 846 "lpc.c"
     $91 = $8; //@line 847 "lpc.c"
     $92 = ((($91)) + 20|0); //@line 847 "lpc.c"
     $93 = HEAP32[$92>>2]|0; //@line 847 "lpc.c"
     $94 = $11; //@line 847 "lpc.c"
     $95 = $12; //@line 847 "lpc.c"
     $96 = (($95) - 6)|0; //@line 847 "lpc.c"
     $97 = (($94) + ($96<<2)|0); //@line 847 "lpc.c"
     $98 = HEAP32[$97>>2]|0; //@line 847 "lpc.c"
     $99 = Math_imul($93, $98)|0; //@line 847 "lpc.c"
     $100 = $13; //@line 847 "lpc.c"
     $101 = (($100) + ($99))|0; //@line 847 "lpc.c"
     $13 = $101; //@line 847 "lpc.c"
     $102 = $8; //@line 848 "lpc.c"
     $103 = ((($102)) + 16|0); //@line 848 "lpc.c"
     $104 = HEAP32[$103>>2]|0; //@line 848 "lpc.c"
     $105 = $11; //@line 848 "lpc.c"
     $106 = $12; //@line 848 "lpc.c"
     $107 = (($106) - 5)|0; //@line 848 "lpc.c"
     $108 = (($105) + ($107<<2)|0); //@line 848 "lpc.c"
     $109 = HEAP32[$108>>2]|0; //@line 848 "lpc.c"
     $110 = Math_imul($104, $109)|0; //@line 848 "lpc.c"
     $111 = $13; //@line 848 "lpc.c"
     $112 = (($111) + ($110))|0; //@line 848 "lpc.c"
     $13 = $112; //@line 848 "lpc.c"
     $113 = $8; //@line 849 "lpc.c"
     $114 = ((($113)) + 12|0); //@line 849 "lpc.c"
     $115 = HEAP32[$114>>2]|0; //@line 849 "lpc.c"
     $116 = $11; //@line 849 "lpc.c"
     $117 = $12; //@line 849 "lpc.c"
     $118 = (($117) - 4)|0; //@line 849 "lpc.c"
     $119 = (($116) + ($118<<2)|0); //@line 849 "lpc.c"
     $120 = HEAP32[$119>>2]|0; //@line 849 "lpc.c"
     $121 = Math_imul($115, $120)|0; //@line 849 "lpc.c"
     $122 = $13; //@line 849 "lpc.c"
     $123 = (($122) + ($121))|0; //@line 849 "lpc.c"
     $13 = $123; //@line 849 "lpc.c"
     $124 = $8; //@line 850 "lpc.c"
     $125 = ((($124)) + 8|0); //@line 850 "lpc.c"
     $126 = HEAP32[$125>>2]|0; //@line 850 "lpc.c"
     $127 = $11; //@line 850 "lpc.c"
     $128 = $12; //@line 850 "lpc.c"
     $129 = (($128) - 3)|0; //@line 850 "lpc.c"
     $130 = (($127) + ($129<<2)|0); //@line 850 "lpc.c"
     $131 = HEAP32[$130>>2]|0; //@line 850 "lpc.c"
     $132 = Math_imul($126, $131)|0; //@line 850 "lpc.c"
     $133 = $13; //@line 850 "lpc.c"
     $134 = (($133) + ($132))|0; //@line 850 "lpc.c"
     $13 = $134; //@line 850 "lpc.c"
     $135 = $8; //@line 851 "lpc.c"
     $136 = ((($135)) + 4|0); //@line 851 "lpc.c"
     $137 = HEAP32[$136>>2]|0; //@line 851 "lpc.c"
     $138 = $11; //@line 851 "lpc.c"
     $139 = $12; //@line 851 "lpc.c"
     $140 = (($139) - 2)|0; //@line 851 "lpc.c"
     $141 = (($138) + ($140<<2)|0); //@line 851 "lpc.c"
     $142 = HEAP32[$141>>2]|0; //@line 851 "lpc.c"
     $143 = Math_imul($137, $142)|0; //@line 851 "lpc.c"
     $144 = $13; //@line 851 "lpc.c"
     $145 = (($144) + ($143))|0; //@line 851 "lpc.c"
     $13 = $145; //@line 851 "lpc.c"
     $146 = $8; //@line 852 "lpc.c"
     $147 = HEAP32[$146>>2]|0; //@line 852 "lpc.c"
     $148 = $11; //@line 852 "lpc.c"
     $149 = $12; //@line 852 "lpc.c"
     $150 = (($149) - 1)|0; //@line 852 "lpc.c"
     $151 = (($148) + ($150<<2)|0); //@line 852 "lpc.c"
     $152 = HEAP32[$151>>2]|0; //@line 852 "lpc.c"
     $153 = Math_imul($147, $152)|0; //@line 852 "lpc.c"
     $154 = $13; //@line 852 "lpc.c"
     $155 = (($154) + ($153))|0; //@line 852 "lpc.c"
     $13 = $155; //@line 852 "lpc.c"
     $156 = $6; //@line 853 "lpc.c"
     $157 = $12; //@line 853 "lpc.c"
     $158 = (($156) + ($157<<2)|0); //@line 853 "lpc.c"
     $159 = HEAP32[$158>>2]|0; //@line 853 "lpc.c"
     $160 = $13; //@line 853 "lpc.c"
     $161 = $10; //@line 853 "lpc.c"
     $162 = $160 >> $161; //@line 853 "lpc.c"
     $163 = (($159) + ($162))|0; //@line 853 "lpc.c"
     $164 = $11; //@line 853 "lpc.c"
     $165 = $12; //@line 853 "lpc.c"
     $166 = (($164) + ($165<<2)|0); //@line 853 "lpc.c"
     HEAP32[$166>>2] = $163; //@line 853 "lpc.c"
     $167 = $12; //@line 839 "lpc.c"
     $168 = (($167) + 1)|0; //@line 839 "lpc.c"
     $12 = $168; //@line 839 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $169 = $12; //@line 857 "lpc.c"
     $170 = $7; //@line 857 "lpc.c"
     $171 = ($169|0)<($170|0); //@line 857 "lpc.c"
     if (!($171)) {
      break;
     }
     $13 = 0; //@line 858 "lpc.c"
     $172 = $8; //@line 859 "lpc.c"
     $173 = ((($172)) + 40|0); //@line 859 "lpc.c"
     $174 = HEAP32[$173>>2]|0; //@line 859 "lpc.c"
     $175 = $11; //@line 859 "lpc.c"
     $176 = $12; //@line 859 "lpc.c"
     $177 = (($176) - 11)|0; //@line 859 "lpc.c"
     $178 = (($175) + ($177<<2)|0); //@line 859 "lpc.c"
     $179 = HEAP32[$178>>2]|0; //@line 859 "lpc.c"
     $180 = Math_imul($174, $179)|0; //@line 859 "lpc.c"
     $181 = $13; //@line 859 "lpc.c"
     $182 = (($181) + ($180))|0; //@line 859 "lpc.c"
     $13 = $182; //@line 859 "lpc.c"
     $183 = $8; //@line 860 "lpc.c"
     $184 = ((($183)) + 36|0); //@line 860 "lpc.c"
     $185 = HEAP32[$184>>2]|0; //@line 860 "lpc.c"
     $186 = $11; //@line 860 "lpc.c"
     $187 = $12; //@line 860 "lpc.c"
     $188 = (($187) - 10)|0; //@line 860 "lpc.c"
     $189 = (($186) + ($188<<2)|0); //@line 860 "lpc.c"
     $190 = HEAP32[$189>>2]|0; //@line 860 "lpc.c"
     $191 = Math_imul($185, $190)|0; //@line 860 "lpc.c"
     $192 = $13; //@line 860 "lpc.c"
     $193 = (($192) + ($191))|0; //@line 860 "lpc.c"
     $13 = $193; //@line 860 "lpc.c"
     $194 = $8; //@line 861 "lpc.c"
     $195 = ((($194)) + 32|0); //@line 861 "lpc.c"
     $196 = HEAP32[$195>>2]|0; //@line 861 "lpc.c"
     $197 = $11; //@line 861 "lpc.c"
     $198 = $12; //@line 861 "lpc.c"
     $199 = (($198) - 9)|0; //@line 861 "lpc.c"
     $200 = (($197) + ($199<<2)|0); //@line 861 "lpc.c"
     $201 = HEAP32[$200>>2]|0; //@line 861 "lpc.c"
     $202 = Math_imul($196, $201)|0; //@line 861 "lpc.c"
     $203 = $13; //@line 861 "lpc.c"
     $204 = (($203) + ($202))|0; //@line 861 "lpc.c"
     $13 = $204; //@line 861 "lpc.c"
     $205 = $8; //@line 862 "lpc.c"
     $206 = ((($205)) + 28|0); //@line 862 "lpc.c"
     $207 = HEAP32[$206>>2]|0; //@line 862 "lpc.c"
     $208 = $11; //@line 862 "lpc.c"
     $209 = $12; //@line 862 "lpc.c"
     $210 = (($209) - 8)|0; //@line 862 "lpc.c"
     $211 = (($208) + ($210<<2)|0); //@line 862 "lpc.c"
     $212 = HEAP32[$211>>2]|0; //@line 862 "lpc.c"
     $213 = Math_imul($207, $212)|0; //@line 862 "lpc.c"
     $214 = $13; //@line 862 "lpc.c"
     $215 = (($214) + ($213))|0; //@line 862 "lpc.c"
     $13 = $215; //@line 862 "lpc.c"
     $216 = $8; //@line 863 "lpc.c"
     $217 = ((($216)) + 24|0); //@line 863 "lpc.c"
     $218 = HEAP32[$217>>2]|0; //@line 863 "lpc.c"
     $219 = $11; //@line 863 "lpc.c"
     $220 = $12; //@line 863 "lpc.c"
     $221 = (($220) - 7)|0; //@line 863 "lpc.c"
     $222 = (($219) + ($221<<2)|0); //@line 863 "lpc.c"
     $223 = HEAP32[$222>>2]|0; //@line 863 "lpc.c"
     $224 = Math_imul($218, $223)|0; //@line 863 "lpc.c"
     $225 = $13; //@line 863 "lpc.c"
     $226 = (($225) + ($224))|0; //@line 863 "lpc.c"
     $13 = $226; //@line 863 "lpc.c"
     $227 = $8; //@line 864 "lpc.c"
     $228 = ((($227)) + 20|0); //@line 864 "lpc.c"
     $229 = HEAP32[$228>>2]|0; //@line 864 "lpc.c"
     $230 = $11; //@line 864 "lpc.c"
     $231 = $12; //@line 864 "lpc.c"
     $232 = (($231) - 6)|0; //@line 864 "lpc.c"
     $233 = (($230) + ($232<<2)|0); //@line 864 "lpc.c"
     $234 = HEAP32[$233>>2]|0; //@line 864 "lpc.c"
     $235 = Math_imul($229, $234)|0; //@line 864 "lpc.c"
     $236 = $13; //@line 864 "lpc.c"
     $237 = (($236) + ($235))|0; //@line 864 "lpc.c"
     $13 = $237; //@line 864 "lpc.c"
     $238 = $8; //@line 865 "lpc.c"
     $239 = ((($238)) + 16|0); //@line 865 "lpc.c"
     $240 = HEAP32[$239>>2]|0; //@line 865 "lpc.c"
     $241 = $11; //@line 865 "lpc.c"
     $242 = $12; //@line 865 "lpc.c"
     $243 = (($242) - 5)|0; //@line 865 "lpc.c"
     $244 = (($241) + ($243<<2)|0); //@line 865 "lpc.c"
     $245 = HEAP32[$244>>2]|0; //@line 865 "lpc.c"
     $246 = Math_imul($240, $245)|0; //@line 865 "lpc.c"
     $247 = $13; //@line 865 "lpc.c"
     $248 = (($247) + ($246))|0; //@line 865 "lpc.c"
     $13 = $248; //@line 865 "lpc.c"
     $249 = $8; //@line 866 "lpc.c"
     $250 = ((($249)) + 12|0); //@line 866 "lpc.c"
     $251 = HEAP32[$250>>2]|0; //@line 866 "lpc.c"
     $252 = $11; //@line 866 "lpc.c"
     $253 = $12; //@line 866 "lpc.c"
     $254 = (($253) - 4)|0; //@line 866 "lpc.c"
     $255 = (($252) + ($254<<2)|0); //@line 866 "lpc.c"
     $256 = HEAP32[$255>>2]|0; //@line 866 "lpc.c"
     $257 = Math_imul($251, $256)|0; //@line 866 "lpc.c"
     $258 = $13; //@line 866 "lpc.c"
     $259 = (($258) + ($257))|0; //@line 866 "lpc.c"
     $13 = $259; //@line 866 "lpc.c"
     $260 = $8; //@line 867 "lpc.c"
     $261 = ((($260)) + 8|0); //@line 867 "lpc.c"
     $262 = HEAP32[$261>>2]|0; //@line 867 "lpc.c"
     $263 = $11; //@line 867 "lpc.c"
     $264 = $12; //@line 867 "lpc.c"
     $265 = (($264) - 3)|0; //@line 867 "lpc.c"
     $266 = (($263) + ($265<<2)|0); //@line 867 "lpc.c"
     $267 = HEAP32[$266>>2]|0; //@line 867 "lpc.c"
     $268 = Math_imul($262, $267)|0; //@line 867 "lpc.c"
     $269 = $13; //@line 867 "lpc.c"
     $270 = (($269) + ($268))|0; //@line 867 "lpc.c"
     $13 = $270; //@line 867 "lpc.c"
     $271 = $8; //@line 868 "lpc.c"
     $272 = ((($271)) + 4|0); //@line 868 "lpc.c"
     $273 = HEAP32[$272>>2]|0; //@line 868 "lpc.c"
     $274 = $11; //@line 868 "lpc.c"
     $275 = $12; //@line 868 "lpc.c"
     $276 = (($275) - 2)|0; //@line 868 "lpc.c"
     $277 = (($274) + ($276<<2)|0); //@line 868 "lpc.c"
     $278 = HEAP32[$277>>2]|0; //@line 868 "lpc.c"
     $279 = Math_imul($273, $278)|0; //@line 868 "lpc.c"
     $280 = $13; //@line 868 "lpc.c"
     $281 = (($280) + ($279))|0; //@line 868 "lpc.c"
     $13 = $281; //@line 868 "lpc.c"
     $282 = $8; //@line 869 "lpc.c"
     $283 = HEAP32[$282>>2]|0; //@line 869 "lpc.c"
     $284 = $11; //@line 869 "lpc.c"
     $285 = $12; //@line 869 "lpc.c"
     $286 = (($285) - 1)|0; //@line 869 "lpc.c"
     $287 = (($284) + ($286<<2)|0); //@line 869 "lpc.c"
     $288 = HEAP32[$287>>2]|0; //@line 869 "lpc.c"
     $289 = Math_imul($283, $288)|0; //@line 869 "lpc.c"
     $290 = $13; //@line 869 "lpc.c"
     $291 = (($290) + ($289))|0; //@line 869 "lpc.c"
     $13 = $291; //@line 869 "lpc.c"
     $292 = $6; //@line 870 "lpc.c"
     $293 = $12; //@line 870 "lpc.c"
     $294 = (($292) + ($293<<2)|0); //@line 870 "lpc.c"
     $295 = HEAP32[$294>>2]|0; //@line 870 "lpc.c"
     $296 = $13; //@line 870 "lpc.c"
     $297 = $10; //@line 870 "lpc.c"
     $298 = $296 >> $297; //@line 870 "lpc.c"
     $299 = (($295) + ($298))|0; //@line 870 "lpc.c"
     $300 = $11; //@line 870 "lpc.c"
     $301 = $12; //@line 870 "lpc.c"
     $302 = (($300) + ($301<<2)|0); //@line 870 "lpc.c"
     HEAP32[$302>>2] = $299; //@line 870 "lpc.c"
     $303 = $12; //@line 857 "lpc.c"
     $304 = (($303) + 1)|0; //@line 857 "lpc.c"
     $12 = $304; //@line 857 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  } else {
   $305 = ($20|0)==(10); //@line 875 "lpc.c"
   $12 = 0;
   if ($305) {
    while(1) {
     $306 = $12; //@line 876 "lpc.c"
     $307 = $7; //@line 876 "lpc.c"
     $308 = ($306|0)<($307|0); //@line 876 "lpc.c"
     if (!($308)) {
      break;
     }
     $13 = 0; //@line 877 "lpc.c"
     $309 = $8; //@line 878 "lpc.c"
     $310 = ((($309)) + 36|0); //@line 878 "lpc.c"
     $311 = HEAP32[$310>>2]|0; //@line 878 "lpc.c"
     $312 = $11; //@line 878 "lpc.c"
     $313 = $12; //@line 878 "lpc.c"
     $314 = (($313) - 10)|0; //@line 878 "lpc.c"
     $315 = (($312) + ($314<<2)|0); //@line 878 "lpc.c"
     $316 = HEAP32[$315>>2]|0; //@line 878 "lpc.c"
     $317 = Math_imul($311, $316)|0; //@line 878 "lpc.c"
     $318 = $13; //@line 878 "lpc.c"
     $319 = (($318) + ($317))|0; //@line 878 "lpc.c"
     $13 = $319; //@line 878 "lpc.c"
     $320 = $8; //@line 879 "lpc.c"
     $321 = ((($320)) + 32|0); //@line 879 "lpc.c"
     $322 = HEAP32[$321>>2]|0; //@line 879 "lpc.c"
     $323 = $11; //@line 879 "lpc.c"
     $324 = $12; //@line 879 "lpc.c"
     $325 = (($324) - 9)|0; //@line 879 "lpc.c"
     $326 = (($323) + ($325<<2)|0); //@line 879 "lpc.c"
     $327 = HEAP32[$326>>2]|0; //@line 879 "lpc.c"
     $328 = Math_imul($322, $327)|0; //@line 879 "lpc.c"
     $329 = $13; //@line 879 "lpc.c"
     $330 = (($329) + ($328))|0; //@line 879 "lpc.c"
     $13 = $330; //@line 879 "lpc.c"
     $331 = $8; //@line 880 "lpc.c"
     $332 = ((($331)) + 28|0); //@line 880 "lpc.c"
     $333 = HEAP32[$332>>2]|0; //@line 880 "lpc.c"
     $334 = $11; //@line 880 "lpc.c"
     $335 = $12; //@line 880 "lpc.c"
     $336 = (($335) - 8)|0; //@line 880 "lpc.c"
     $337 = (($334) + ($336<<2)|0); //@line 880 "lpc.c"
     $338 = HEAP32[$337>>2]|0; //@line 880 "lpc.c"
     $339 = Math_imul($333, $338)|0; //@line 880 "lpc.c"
     $340 = $13; //@line 880 "lpc.c"
     $341 = (($340) + ($339))|0; //@line 880 "lpc.c"
     $13 = $341; //@line 880 "lpc.c"
     $342 = $8; //@line 881 "lpc.c"
     $343 = ((($342)) + 24|0); //@line 881 "lpc.c"
     $344 = HEAP32[$343>>2]|0; //@line 881 "lpc.c"
     $345 = $11; //@line 881 "lpc.c"
     $346 = $12; //@line 881 "lpc.c"
     $347 = (($346) - 7)|0; //@line 881 "lpc.c"
     $348 = (($345) + ($347<<2)|0); //@line 881 "lpc.c"
     $349 = HEAP32[$348>>2]|0; //@line 881 "lpc.c"
     $350 = Math_imul($344, $349)|0; //@line 881 "lpc.c"
     $351 = $13; //@line 881 "lpc.c"
     $352 = (($351) + ($350))|0; //@line 881 "lpc.c"
     $13 = $352; //@line 881 "lpc.c"
     $353 = $8; //@line 882 "lpc.c"
     $354 = ((($353)) + 20|0); //@line 882 "lpc.c"
     $355 = HEAP32[$354>>2]|0; //@line 882 "lpc.c"
     $356 = $11; //@line 882 "lpc.c"
     $357 = $12; //@line 882 "lpc.c"
     $358 = (($357) - 6)|0; //@line 882 "lpc.c"
     $359 = (($356) + ($358<<2)|0); //@line 882 "lpc.c"
     $360 = HEAP32[$359>>2]|0; //@line 882 "lpc.c"
     $361 = Math_imul($355, $360)|0; //@line 882 "lpc.c"
     $362 = $13; //@line 882 "lpc.c"
     $363 = (($362) + ($361))|0; //@line 882 "lpc.c"
     $13 = $363; //@line 882 "lpc.c"
     $364 = $8; //@line 883 "lpc.c"
     $365 = ((($364)) + 16|0); //@line 883 "lpc.c"
     $366 = HEAP32[$365>>2]|0; //@line 883 "lpc.c"
     $367 = $11; //@line 883 "lpc.c"
     $368 = $12; //@line 883 "lpc.c"
     $369 = (($368) - 5)|0; //@line 883 "lpc.c"
     $370 = (($367) + ($369<<2)|0); //@line 883 "lpc.c"
     $371 = HEAP32[$370>>2]|0; //@line 883 "lpc.c"
     $372 = Math_imul($366, $371)|0; //@line 883 "lpc.c"
     $373 = $13; //@line 883 "lpc.c"
     $374 = (($373) + ($372))|0; //@line 883 "lpc.c"
     $13 = $374; //@line 883 "lpc.c"
     $375 = $8; //@line 884 "lpc.c"
     $376 = ((($375)) + 12|0); //@line 884 "lpc.c"
     $377 = HEAP32[$376>>2]|0; //@line 884 "lpc.c"
     $378 = $11; //@line 884 "lpc.c"
     $379 = $12; //@line 884 "lpc.c"
     $380 = (($379) - 4)|0; //@line 884 "lpc.c"
     $381 = (($378) + ($380<<2)|0); //@line 884 "lpc.c"
     $382 = HEAP32[$381>>2]|0; //@line 884 "lpc.c"
     $383 = Math_imul($377, $382)|0; //@line 884 "lpc.c"
     $384 = $13; //@line 884 "lpc.c"
     $385 = (($384) + ($383))|0; //@line 884 "lpc.c"
     $13 = $385; //@line 884 "lpc.c"
     $386 = $8; //@line 885 "lpc.c"
     $387 = ((($386)) + 8|0); //@line 885 "lpc.c"
     $388 = HEAP32[$387>>2]|0; //@line 885 "lpc.c"
     $389 = $11; //@line 885 "lpc.c"
     $390 = $12; //@line 885 "lpc.c"
     $391 = (($390) - 3)|0; //@line 885 "lpc.c"
     $392 = (($389) + ($391<<2)|0); //@line 885 "lpc.c"
     $393 = HEAP32[$392>>2]|0; //@line 885 "lpc.c"
     $394 = Math_imul($388, $393)|0; //@line 885 "lpc.c"
     $395 = $13; //@line 885 "lpc.c"
     $396 = (($395) + ($394))|0; //@line 885 "lpc.c"
     $13 = $396; //@line 885 "lpc.c"
     $397 = $8; //@line 886 "lpc.c"
     $398 = ((($397)) + 4|0); //@line 886 "lpc.c"
     $399 = HEAP32[$398>>2]|0; //@line 886 "lpc.c"
     $400 = $11; //@line 886 "lpc.c"
     $401 = $12; //@line 886 "lpc.c"
     $402 = (($401) - 2)|0; //@line 886 "lpc.c"
     $403 = (($400) + ($402<<2)|0); //@line 886 "lpc.c"
     $404 = HEAP32[$403>>2]|0; //@line 886 "lpc.c"
     $405 = Math_imul($399, $404)|0; //@line 886 "lpc.c"
     $406 = $13; //@line 886 "lpc.c"
     $407 = (($406) + ($405))|0; //@line 886 "lpc.c"
     $13 = $407; //@line 886 "lpc.c"
     $408 = $8; //@line 887 "lpc.c"
     $409 = HEAP32[$408>>2]|0; //@line 887 "lpc.c"
     $410 = $11; //@line 887 "lpc.c"
     $411 = $12; //@line 887 "lpc.c"
     $412 = (($411) - 1)|0; //@line 887 "lpc.c"
     $413 = (($410) + ($412<<2)|0); //@line 887 "lpc.c"
     $414 = HEAP32[$413>>2]|0; //@line 887 "lpc.c"
     $415 = Math_imul($409, $414)|0; //@line 887 "lpc.c"
     $416 = $13; //@line 887 "lpc.c"
     $417 = (($416) + ($415))|0; //@line 887 "lpc.c"
     $13 = $417; //@line 887 "lpc.c"
     $418 = $6; //@line 888 "lpc.c"
     $419 = $12; //@line 888 "lpc.c"
     $420 = (($418) + ($419<<2)|0); //@line 888 "lpc.c"
     $421 = HEAP32[$420>>2]|0; //@line 888 "lpc.c"
     $422 = $13; //@line 888 "lpc.c"
     $423 = $10; //@line 888 "lpc.c"
     $424 = $422 >> $423; //@line 888 "lpc.c"
     $425 = (($421) + ($424))|0; //@line 888 "lpc.c"
     $426 = $11; //@line 888 "lpc.c"
     $427 = $12; //@line 888 "lpc.c"
     $428 = (($426) + ($427<<2)|0); //@line 888 "lpc.c"
     HEAP32[$428>>2] = $425; //@line 888 "lpc.c"
     $429 = $12; //@line 876 "lpc.c"
     $430 = (($429) + 1)|0; //@line 876 "lpc.c"
     $12 = $430; //@line 876 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $431 = $12; //@line 892 "lpc.c"
     $432 = $7; //@line 892 "lpc.c"
     $433 = ($431|0)<($432|0); //@line 892 "lpc.c"
     if (!($433)) {
      break;
     }
     $13 = 0; //@line 893 "lpc.c"
     $434 = $8; //@line 894 "lpc.c"
     $435 = ((($434)) + 32|0); //@line 894 "lpc.c"
     $436 = HEAP32[$435>>2]|0; //@line 894 "lpc.c"
     $437 = $11; //@line 894 "lpc.c"
     $438 = $12; //@line 894 "lpc.c"
     $439 = (($438) - 9)|0; //@line 894 "lpc.c"
     $440 = (($437) + ($439<<2)|0); //@line 894 "lpc.c"
     $441 = HEAP32[$440>>2]|0; //@line 894 "lpc.c"
     $442 = Math_imul($436, $441)|0; //@line 894 "lpc.c"
     $443 = $13; //@line 894 "lpc.c"
     $444 = (($443) + ($442))|0; //@line 894 "lpc.c"
     $13 = $444; //@line 894 "lpc.c"
     $445 = $8; //@line 895 "lpc.c"
     $446 = ((($445)) + 28|0); //@line 895 "lpc.c"
     $447 = HEAP32[$446>>2]|0; //@line 895 "lpc.c"
     $448 = $11; //@line 895 "lpc.c"
     $449 = $12; //@line 895 "lpc.c"
     $450 = (($449) - 8)|0; //@line 895 "lpc.c"
     $451 = (($448) + ($450<<2)|0); //@line 895 "lpc.c"
     $452 = HEAP32[$451>>2]|0; //@line 895 "lpc.c"
     $453 = Math_imul($447, $452)|0; //@line 895 "lpc.c"
     $454 = $13; //@line 895 "lpc.c"
     $455 = (($454) + ($453))|0; //@line 895 "lpc.c"
     $13 = $455; //@line 895 "lpc.c"
     $456 = $8; //@line 896 "lpc.c"
     $457 = ((($456)) + 24|0); //@line 896 "lpc.c"
     $458 = HEAP32[$457>>2]|0; //@line 896 "lpc.c"
     $459 = $11; //@line 896 "lpc.c"
     $460 = $12; //@line 896 "lpc.c"
     $461 = (($460) - 7)|0; //@line 896 "lpc.c"
     $462 = (($459) + ($461<<2)|0); //@line 896 "lpc.c"
     $463 = HEAP32[$462>>2]|0; //@line 896 "lpc.c"
     $464 = Math_imul($458, $463)|0; //@line 896 "lpc.c"
     $465 = $13; //@line 896 "lpc.c"
     $466 = (($465) + ($464))|0; //@line 896 "lpc.c"
     $13 = $466; //@line 896 "lpc.c"
     $467 = $8; //@line 897 "lpc.c"
     $468 = ((($467)) + 20|0); //@line 897 "lpc.c"
     $469 = HEAP32[$468>>2]|0; //@line 897 "lpc.c"
     $470 = $11; //@line 897 "lpc.c"
     $471 = $12; //@line 897 "lpc.c"
     $472 = (($471) - 6)|0; //@line 897 "lpc.c"
     $473 = (($470) + ($472<<2)|0); //@line 897 "lpc.c"
     $474 = HEAP32[$473>>2]|0; //@line 897 "lpc.c"
     $475 = Math_imul($469, $474)|0; //@line 897 "lpc.c"
     $476 = $13; //@line 897 "lpc.c"
     $477 = (($476) + ($475))|0; //@line 897 "lpc.c"
     $13 = $477; //@line 897 "lpc.c"
     $478 = $8; //@line 898 "lpc.c"
     $479 = ((($478)) + 16|0); //@line 898 "lpc.c"
     $480 = HEAP32[$479>>2]|0; //@line 898 "lpc.c"
     $481 = $11; //@line 898 "lpc.c"
     $482 = $12; //@line 898 "lpc.c"
     $483 = (($482) - 5)|0; //@line 898 "lpc.c"
     $484 = (($481) + ($483<<2)|0); //@line 898 "lpc.c"
     $485 = HEAP32[$484>>2]|0; //@line 898 "lpc.c"
     $486 = Math_imul($480, $485)|0; //@line 898 "lpc.c"
     $487 = $13; //@line 898 "lpc.c"
     $488 = (($487) + ($486))|0; //@line 898 "lpc.c"
     $13 = $488; //@line 898 "lpc.c"
     $489 = $8; //@line 899 "lpc.c"
     $490 = ((($489)) + 12|0); //@line 899 "lpc.c"
     $491 = HEAP32[$490>>2]|0; //@line 899 "lpc.c"
     $492 = $11; //@line 899 "lpc.c"
     $493 = $12; //@line 899 "lpc.c"
     $494 = (($493) - 4)|0; //@line 899 "lpc.c"
     $495 = (($492) + ($494<<2)|0); //@line 899 "lpc.c"
     $496 = HEAP32[$495>>2]|0; //@line 899 "lpc.c"
     $497 = Math_imul($491, $496)|0; //@line 899 "lpc.c"
     $498 = $13; //@line 899 "lpc.c"
     $499 = (($498) + ($497))|0; //@line 899 "lpc.c"
     $13 = $499; //@line 899 "lpc.c"
     $500 = $8; //@line 900 "lpc.c"
     $501 = ((($500)) + 8|0); //@line 900 "lpc.c"
     $502 = HEAP32[$501>>2]|0; //@line 900 "lpc.c"
     $503 = $11; //@line 900 "lpc.c"
     $504 = $12; //@line 900 "lpc.c"
     $505 = (($504) - 3)|0; //@line 900 "lpc.c"
     $506 = (($503) + ($505<<2)|0); //@line 900 "lpc.c"
     $507 = HEAP32[$506>>2]|0; //@line 900 "lpc.c"
     $508 = Math_imul($502, $507)|0; //@line 900 "lpc.c"
     $509 = $13; //@line 900 "lpc.c"
     $510 = (($509) + ($508))|0; //@line 900 "lpc.c"
     $13 = $510; //@line 900 "lpc.c"
     $511 = $8; //@line 901 "lpc.c"
     $512 = ((($511)) + 4|0); //@line 901 "lpc.c"
     $513 = HEAP32[$512>>2]|0; //@line 901 "lpc.c"
     $514 = $11; //@line 901 "lpc.c"
     $515 = $12; //@line 901 "lpc.c"
     $516 = (($515) - 2)|0; //@line 901 "lpc.c"
     $517 = (($514) + ($516<<2)|0); //@line 901 "lpc.c"
     $518 = HEAP32[$517>>2]|0; //@line 901 "lpc.c"
     $519 = Math_imul($513, $518)|0; //@line 901 "lpc.c"
     $520 = $13; //@line 901 "lpc.c"
     $521 = (($520) + ($519))|0; //@line 901 "lpc.c"
     $13 = $521; //@line 901 "lpc.c"
     $522 = $8; //@line 902 "lpc.c"
     $523 = HEAP32[$522>>2]|0; //@line 902 "lpc.c"
     $524 = $11; //@line 902 "lpc.c"
     $525 = $12; //@line 902 "lpc.c"
     $526 = (($525) - 1)|0; //@line 902 "lpc.c"
     $527 = (($524) + ($526<<2)|0); //@line 902 "lpc.c"
     $528 = HEAP32[$527>>2]|0; //@line 902 "lpc.c"
     $529 = Math_imul($523, $528)|0; //@line 902 "lpc.c"
     $530 = $13; //@line 902 "lpc.c"
     $531 = (($530) + ($529))|0; //@line 902 "lpc.c"
     $13 = $531; //@line 902 "lpc.c"
     $532 = $6; //@line 903 "lpc.c"
     $533 = $12; //@line 903 "lpc.c"
     $534 = (($532) + ($533<<2)|0); //@line 903 "lpc.c"
     $535 = HEAP32[$534>>2]|0; //@line 903 "lpc.c"
     $536 = $13; //@line 903 "lpc.c"
     $537 = $10; //@line 903 "lpc.c"
     $538 = $536 >> $537; //@line 903 "lpc.c"
     $539 = (($535) + ($538))|0; //@line 903 "lpc.c"
     $540 = $11; //@line 903 "lpc.c"
     $541 = $12; //@line 903 "lpc.c"
     $542 = (($540) + ($541<<2)|0); //@line 903 "lpc.c"
     HEAP32[$542>>2] = $539; //@line 903 "lpc.c"
     $543 = $12; //@line 892 "lpc.c"
     $544 = (($543) + 1)|0; //@line 892 "lpc.c"
     $12 = $544; //@line 892 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  }
 }
 $545 = ($18>>>0)>(4); //@line 908 "lpc.c"
 $546 = $9;
 if ($545) {
  $547 = ($546>>>0)>(6); //@line 909 "lpc.c"
  $548 = $9;
  if ($547) {
   $549 = ($548|0)==(8); //@line 910 "lpc.c"
   $12 = 0;
   if ($549) {
    while(1) {
     $550 = $12; //@line 911 "lpc.c"
     $551 = $7; //@line 911 "lpc.c"
     $552 = ($550|0)<($551|0); //@line 911 "lpc.c"
     if (!($552)) {
      break;
     }
     $13 = 0; //@line 912 "lpc.c"
     $553 = $8; //@line 913 "lpc.c"
     $554 = ((($553)) + 28|0); //@line 913 "lpc.c"
     $555 = HEAP32[$554>>2]|0; //@line 913 "lpc.c"
     $556 = $11; //@line 913 "lpc.c"
     $557 = $12; //@line 913 "lpc.c"
     $558 = (($557) - 8)|0; //@line 913 "lpc.c"
     $559 = (($556) + ($558<<2)|0); //@line 913 "lpc.c"
     $560 = HEAP32[$559>>2]|0; //@line 913 "lpc.c"
     $561 = Math_imul($555, $560)|0; //@line 913 "lpc.c"
     $562 = $13; //@line 913 "lpc.c"
     $563 = (($562) + ($561))|0; //@line 913 "lpc.c"
     $13 = $563; //@line 913 "lpc.c"
     $564 = $8; //@line 914 "lpc.c"
     $565 = ((($564)) + 24|0); //@line 914 "lpc.c"
     $566 = HEAP32[$565>>2]|0; //@line 914 "lpc.c"
     $567 = $11; //@line 914 "lpc.c"
     $568 = $12; //@line 914 "lpc.c"
     $569 = (($568) - 7)|0; //@line 914 "lpc.c"
     $570 = (($567) + ($569<<2)|0); //@line 914 "lpc.c"
     $571 = HEAP32[$570>>2]|0; //@line 914 "lpc.c"
     $572 = Math_imul($566, $571)|0; //@line 914 "lpc.c"
     $573 = $13; //@line 914 "lpc.c"
     $574 = (($573) + ($572))|0; //@line 914 "lpc.c"
     $13 = $574; //@line 914 "lpc.c"
     $575 = $8; //@line 915 "lpc.c"
     $576 = ((($575)) + 20|0); //@line 915 "lpc.c"
     $577 = HEAP32[$576>>2]|0; //@line 915 "lpc.c"
     $578 = $11; //@line 915 "lpc.c"
     $579 = $12; //@line 915 "lpc.c"
     $580 = (($579) - 6)|0; //@line 915 "lpc.c"
     $581 = (($578) + ($580<<2)|0); //@line 915 "lpc.c"
     $582 = HEAP32[$581>>2]|0; //@line 915 "lpc.c"
     $583 = Math_imul($577, $582)|0; //@line 915 "lpc.c"
     $584 = $13; //@line 915 "lpc.c"
     $585 = (($584) + ($583))|0; //@line 915 "lpc.c"
     $13 = $585; //@line 915 "lpc.c"
     $586 = $8; //@line 916 "lpc.c"
     $587 = ((($586)) + 16|0); //@line 916 "lpc.c"
     $588 = HEAP32[$587>>2]|0; //@line 916 "lpc.c"
     $589 = $11; //@line 916 "lpc.c"
     $590 = $12; //@line 916 "lpc.c"
     $591 = (($590) - 5)|0; //@line 916 "lpc.c"
     $592 = (($589) + ($591<<2)|0); //@line 916 "lpc.c"
     $593 = HEAP32[$592>>2]|0; //@line 916 "lpc.c"
     $594 = Math_imul($588, $593)|0; //@line 916 "lpc.c"
     $595 = $13; //@line 916 "lpc.c"
     $596 = (($595) + ($594))|0; //@line 916 "lpc.c"
     $13 = $596; //@line 916 "lpc.c"
     $597 = $8; //@line 917 "lpc.c"
     $598 = ((($597)) + 12|0); //@line 917 "lpc.c"
     $599 = HEAP32[$598>>2]|0; //@line 917 "lpc.c"
     $600 = $11; //@line 917 "lpc.c"
     $601 = $12; //@line 917 "lpc.c"
     $602 = (($601) - 4)|0; //@line 917 "lpc.c"
     $603 = (($600) + ($602<<2)|0); //@line 917 "lpc.c"
     $604 = HEAP32[$603>>2]|0; //@line 917 "lpc.c"
     $605 = Math_imul($599, $604)|0; //@line 917 "lpc.c"
     $606 = $13; //@line 917 "lpc.c"
     $607 = (($606) + ($605))|0; //@line 917 "lpc.c"
     $13 = $607; //@line 917 "lpc.c"
     $608 = $8; //@line 918 "lpc.c"
     $609 = ((($608)) + 8|0); //@line 918 "lpc.c"
     $610 = HEAP32[$609>>2]|0; //@line 918 "lpc.c"
     $611 = $11; //@line 918 "lpc.c"
     $612 = $12; //@line 918 "lpc.c"
     $613 = (($612) - 3)|0; //@line 918 "lpc.c"
     $614 = (($611) + ($613<<2)|0); //@line 918 "lpc.c"
     $615 = HEAP32[$614>>2]|0; //@line 918 "lpc.c"
     $616 = Math_imul($610, $615)|0; //@line 918 "lpc.c"
     $617 = $13; //@line 918 "lpc.c"
     $618 = (($617) + ($616))|0; //@line 918 "lpc.c"
     $13 = $618; //@line 918 "lpc.c"
     $619 = $8; //@line 919 "lpc.c"
     $620 = ((($619)) + 4|0); //@line 919 "lpc.c"
     $621 = HEAP32[$620>>2]|0; //@line 919 "lpc.c"
     $622 = $11; //@line 919 "lpc.c"
     $623 = $12; //@line 919 "lpc.c"
     $624 = (($623) - 2)|0; //@line 919 "lpc.c"
     $625 = (($622) + ($624<<2)|0); //@line 919 "lpc.c"
     $626 = HEAP32[$625>>2]|0; //@line 919 "lpc.c"
     $627 = Math_imul($621, $626)|0; //@line 919 "lpc.c"
     $628 = $13; //@line 919 "lpc.c"
     $629 = (($628) + ($627))|0; //@line 919 "lpc.c"
     $13 = $629; //@line 919 "lpc.c"
     $630 = $8; //@line 920 "lpc.c"
     $631 = HEAP32[$630>>2]|0; //@line 920 "lpc.c"
     $632 = $11; //@line 920 "lpc.c"
     $633 = $12; //@line 920 "lpc.c"
     $634 = (($633) - 1)|0; //@line 920 "lpc.c"
     $635 = (($632) + ($634<<2)|0); //@line 920 "lpc.c"
     $636 = HEAP32[$635>>2]|0; //@line 920 "lpc.c"
     $637 = Math_imul($631, $636)|0; //@line 920 "lpc.c"
     $638 = $13; //@line 920 "lpc.c"
     $639 = (($638) + ($637))|0; //@line 920 "lpc.c"
     $13 = $639; //@line 920 "lpc.c"
     $640 = $6; //@line 921 "lpc.c"
     $641 = $12; //@line 921 "lpc.c"
     $642 = (($640) + ($641<<2)|0); //@line 921 "lpc.c"
     $643 = HEAP32[$642>>2]|0; //@line 921 "lpc.c"
     $644 = $13; //@line 921 "lpc.c"
     $645 = $10; //@line 921 "lpc.c"
     $646 = $644 >> $645; //@line 921 "lpc.c"
     $647 = (($643) + ($646))|0; //@line 921 "lpc.c"
     $648 = $11; //@line 921 "lpc.c"
     $649 = $12; //@line 921 "lpc.c"
     $650 = (($648) + ($649<<2)|0); //@line 921 "lpc.c"
     HEAP32[$650>>2] = $647; //@line 921 "lpc.c"
     $651 = $12; //@line 911 "lpc.c"
     $652 = (($651) + 1)|0; //@line 911 "lpc.c"
     $12 = $652; //@line 911 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $653 = $12; //@line 925 "lpc.c"
     $654 = $7; //@line 925 "lpc.c"
     $655 = ($653|0)<($654|0); //@line 925 "lpc.c"
     if (!($655)) {
      break;
     }
     $13 = 0; //@line 926 "lpc.c"
     $656 = $8; //@line 927 "lpc.c"
     $657 = ((($656)) + 24|0); //@line 927 "lpc.c"
     $658 = HEAP32[$657>>2]|0; //@line 927 "lpc.c"
     $659 = $11; //@line 927 "lpc.c"
     $660 = $12; //@line 927 "lpc.c"
     $661 = (($660) - 7)|0; //@line 927 "lpc.c"
     $662 = (($659) + ($661<<2)|0); //@line 927 "lpc.c"
     $663 = HEAP32[$662>>2]|0; //@line 927 "lpc.c"
     $664 = Math_imul($658, $663)|0; //@line 927 "lpc.c"
     $665 = $13; //@line 927 "lpc.c"
     $666 = (($665) + ($664))|0; //@line 927 "lpc.c"
     $13 = $666; //@line 927 "lpc.c"
     $667 = $8; //@line 928 "lpc.c"
     $668 = ((($667)) + 20|0); //@line 928 "lpc.c"
     $669 = HEAP32[$668>>2]|0; //@line 928 "lpc.c"
     $670 = $11; //@line 928 "lpc.c"
     $671 = $12; //@line 928 "lpc.c"
     $672 = (($671) - 6)|0; //@line 928 "lpc.c"
     $673 = (($670) + ($672<<2)|0); //@line 928 "lpc.c"
     $674 = HEAP32[$673>>2]|0; //@line 928 "lpc.c"
     $675 = Math_imul($669, $674)|0; //@line 928 "lpc.c"
     $676 = $13; //@line 928 "lpc.c"
     $677 = (($676) + ($675))|0; //@line 928 "lpc.c"
     $13 = $677; //@line 928 "lpc.c"
     $678 = $8; //@line 929 "lpc.c"
     $679 = ((($678)) + 16|0); //@line 929 "lpc.c"
     $680 = HEAP32[$679>>2]|0; //@line 929 "lpc.c"
     $681 = $11; //@line 929 "lpc.c"
     $682 = $12; //@line 929 "lpc.c"
     $683 = (($682) - 5)|0; //@line 929 "lpc.c"
     $684 = (($681) + ($683<<2)|0); //@line 929 "lpc.c"
     $685 = HEAP32[$684>>2]|0; //@line 929 "lpc.c"
     $686 = Math_imul($680, $685)|0; //@line 929 "lpc.c"
     $687 = $13; //@line 929 "lpc.c"
     $688 = (($687) + ($686))|0; //@line 929 "lpc.c"
     $13 = $688; //@line 929 "lpc.c"
     $689 = $8; //@line 930 "lpc.c"
     $690 = ((($689)) + 12|0); //@line 930 "lpc.c"
     $691 = HEAP32[$690>>2]|0; //@line 930 "lpc.c"
     $692 = $11; //@line 930 "lpc.c"
     $693 = $12; //@line 930 "lpc.c"
     $694 = (($693) - 4)|0; //@line 930 "lpc.c"
     $695 = (($692) + ($694<<2)|0); //@line 930 "lpc.c"
     $696 = HEAP32[$695>>2]|0; //@line 930 "lpc.c"
     $697 = Math_imul($691, $696)|0; //@line 930 "lpc.c"
     $698 = $13; //@line 930 "lpc.c"
     $699 = (($698) + ($697))|0; //@line 930 "lpc.c"
     $13 = $699; //@line 930 "lpc.c"
     $700 = $8; //@line 931 "lpc.c"
     $701 = ((($700)) + 8|0); //@line 931 "lpc.c"
     $702 = HEAP32[$701>>2]|0; //@line 931 "lpc.c"
     $703 = $11; //@line 931 "lpc.c"
     $704 = $12; //@line 931 "lpc.c"
     $705 = (($704) - 3)|0; //@line 931 "lpc.c"
     $706 = (($703) + ($705<<2)|0); //@line 931 "lpc.c"
     $707 = HEAP32[$706>>2]|0; //@line 931 "lpc.c"
     $708 = Math_imul($702, $707)|0; //@line 931 "lpc.c"
     $709 = $13; //@line 931 "lpc.c"
     $710 = (($709) + ($708))|0; //@line 931 "lpc.c"
     $13 = $710; //@line 931 "lpc.c"
     $711 = $8; //@line 932 "lpc.c"
     $712 = ((($711)) + 4|0); //@line 932 "lpc.c"
     $713 = HEAP32[$712>>2]|0; //@line 932 "lpc.c"
     $714 = $11; //@line 932 "lpc.c"
     $715 = $12; //@line 932 "lpc.c"
     $716 = (($715) - 2)|0; //@line 932 "lpc.c"
     $717 = (($714) + ($716<<2)|0); //@line 932 "lpc.c"
     $718 = HEAP32[$717>>2]|0; //@line 932 "lpc.c"
     $719 = Math_imul($713, $718)|0; //@line 932 "lpc.c"
     $720 = $13; //@line 932 "lpc.c"
     $721 = (($720) + ($719))|0; //@line 932 "lpc.c"
     $13 = $721; //@line 932 "lpc.c"
     $722 = $8; //@line 933 "lpc.c"
     $723 = HEAP32[$722>>2]|0; //@line 933 "lpc.c"
     $724 = $11; //@line 933 "lpc.c"
     $725 = $12; //@line 933 "lpc.c"
     $726 = (($725) - 1)|0; //@line 933 "lpc.c"
     $727 = (($724) + ($726<<2)|0); //@line 933 "lpc.c"
     $728 = HEAP32[$727>>2]|0; //@line 933 "lpc.c"
     $729 = Math_imul($723, $728)|0; //@line 933 "lpc.c"
     $730 = $13; //@line 933 "lpc.c"
     $731 = (($730) + ($729))|0; //@line 933 "lpc.c"
     $13 = $731; //@line 933 "lpc.c"
     $732 = $6; //@line 934 "lpc.c"
     $733 = $12; //@line 934 "lpc.c"
     $734 = (($732) + ($733<<2)|0); //@line 934 "lpc.c"
     $735 = HEAP32[$734>>2]|0; //@line 934 "lpc.c"
     $736 = $13; //@line 934 "lpc.c"
     $737 = $10; //@line 934 "lpc.c"
     $738 = $736 >> $737; //@line 934 "lpc.c"
     $739 = (($735) + ($738))|0; //@line 934 "lpc.c"
     $740 = $11; //@line 934 "lpc.c"
     $741 = $12; //@line 934 "lpc.c"
     $742 = (($740) + ($741<<2)|0); //@line 934 "lpc.c"
     HEAP32[$742>>2] = $739; //@line 934 "lpc.c"
     $743 = $12; //@line 925 "lpc.c"
     $744 = (($743) + 1)|0; //@line 925 "lpc.c"
     $12 = $744; //@line 925 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  } else {
   $745 = ($548|0)==(6); //@line 939 "lpc.c"
   $12 = 0;
   if ($745) {
    while(1) {
     $746 = $12; //@line 940 "lpc.c"
     $747 = $7; //@line 940 "lpc.c"
     $748 = ($746|0)<($747|0); //@line 940 "lpc.c"
     if (!($748)) {
      break;
     }
     $13 = 0; //@line 941 "lpc.c"
     $749 = $8; //@line 942 "lpc.c"
     $750 = ((($749)) + 20|0); //@line 942 "lpc.c"
     $751 = HEAP32[$750>>2]|0; //@line 942 "lpc.c"
     $752 = $11; //@line 942 "lpc.c"
     $753 = $12; //@line 942 "lpc.c"
     $754 = (($753) - 6)|0; //@line 942 "lpc.c"
     $755 = (($752) + ($754<<2)|0); //@line 942 "lpc.c"
     $756 = HEAP32[$755>>2]|0; //@line 942 "lpc.c"
     $757 = Math_imul($751, $756)|0; //@line 942 "lpc.c"
     $758 = $13; //@line 942 "lpc.c"
     $759 = (($758) + ($757))|0; //@line 942 "lpc.c"
     $13 = $759; //@line 942 "lpc.c"
     $760 = $8; //@line 943 "lpc.c"
     $761 = ((($760)) + 16|0); //@line 943 "lpc.c"
     $762 = HEAP32[$761>>2]|0; //@line 943 "lpc.c"
     $763 = $11; //@line 943 "lpc.c"
     $764 = $12; //@line 943 "lpc.c"
     $765 = (($764) - 5)|0; //@line 943 "lpc.c"
     $766 = (($763) + ($765<<2)|0); //@line 943 "lpc.c"
     $767 = HEAP32[$766>>2]|0; //@line 943 "lpc.c"
     $768 = Math_imul($762, $767)|0; //@line 943 "lpc.c"
     $769 = $13; //@line 943 "lpc.c"
     $770 = (($769) + ($768))|0; //@line 943 "lpc.c"
     $13 = $770; //@line 943 "lpc.c"
     $771 = $8; //@line 944 "lpc.c"
     $772 = ((($771)) + 12|0); //@line 944 "lpc.c"
     $773 = HEAP32[$772>>2]|0; //@line 944 "lpc.c"
     $774 = $11; //@line 944 "lpc.c"
     $775 = $12; //@line 944 "lpc.c"
     $776 = (($775) - 4)|0; //@line 944 "lpc.c"
     $777 = (($774) + ($776<<2)|0); //@line 944 "lpc.c"
     $778 = HEAP32[$777>>2]|0; //@line 944 "lpc.c"
     $779 = Math_imul($773, $778)|0; //@line 944 "lpc.c"
     $780 = $13; //@line 944 "lpc.c"
     $781 = (($780) + ($779))|0; //@line 944 "lpc.c"
     $13 = $781; //@line 944 "lpc.c"
     $782 = $8; //@line 945 "lpc.c"
     $783 = ((($782)) + 8|0); //@line 945 "lpc.c"
     $784 = HEAP32[$783>>2]|0; //@line 945 "lpc.c"
     $785 = $11; //@line 945 "lpc.c"
     $786 = $12; //@line 945 "lpc.c"
     $787 = (($786) - 3)|0; //@line 945 "lpc.c"
     $788 = (($785) + ($787<<2)|0); //@line 945 "lpc.c"
     $789 = HEAP32[$788>>2]|0; //@line 945 "lpc.c"
     $790 = Math_imul($784, $789)|0; //@line 945 "lpc.c"
     $791 = $13; //@line 945 "lpc.c"
     $792 = (($791) + ($790))|0; //@line 945 "lpc.c"
     $13 = $792; //@line 945 "lpc.c"
     $793 = $8; //@line 946 "lpc.c"
     $794 = ((($793)) + 4|0); //@line 946 "lpc.c"
     $795 = HEAP32[$794>>2]|0; //@line 946 "lpc.c"
     $796 = $11; //@line 946 "lpc.c"
     $797 = $12; //@line 946 "lpc.c"
     $798 = (($797) - 2)|0; //@line 946 "lpc.c"
     $799 = (($796) + ($798<<2)|0); //@line 946 "lpc.c"
     $800 = HEAP32[$799>>2]|0; //@line 946 "lpc.c"
     $801 = Math_imul($795, $800)|0; //@line 946 "lpc.c"
     $802 = $13; //@line 946 "lpc.c"
     $803 = (($802) + ($801))|0; //@line 946 "lpc.c"
     $13 = $803; //@line 946 "lpc.c"
     $804 = $8; //@line 947 "lpc.c"
     $805 = HEAP32[$804>>2]|0; //@line 947 "lpc.c"
     $806 = $11; //@line 947 "lpc.c"
     $807 = $12; //@line 947 "lpc.c"
     $808 = (($807) - 1)|0; //@line 947 "lpc.c"
     $809 = (($806) + ($808<<2)|0); //@line 947 "lpc.c"
     $810 = HEAP32[$809>>2]|0; //@line 947 "lpc.c"
     $811 = Math_imul($805, $810)|0; //@line 947 "lpc.c"
     $812 = $13; //@line 947 "lpc.c"
     $813 = (($812) + ($811))|0; //@line 947 "lpc.c"
     $13 = $813; //@line 947 "lpc.c"
     $814 = $6; //@line 948 "lpc.c"
     $815 = $12; //@line 948 "lpc.c"
     $816 = (($814) + ($815<<2)|0); //@line 948 "lpc.c"
     $817 = HEAP32[$816>>2]|0; //@line 948 "lpc.c"
     $818 = $13; //@line 948 "lpc.c"
     $819 = $10; //@line 948 "lpc.c"
     $820 = $818 >> $819; //@line 948 "lpc.c"
     $821 = (($817) + ($820))|0; //@line 948 "lpc.c"
     $822 = $11; //@line 948 "lpc.c"
     $823 = $12; //@line 948 "lpc.c"
     $824 = (($822) + ($823<<2)|0); //@line 948 "lpc.c"
     HEAP32[$824>>2] = $821; //@line 948 "lpc.c"
     $825 = $12; //@line 940 "lpc.c"
     $826 = (($825) + 1)|0; //@line 940 "lpc.c"
     $12 = $826; //@line 940 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $827 = $12; //@line 952 "lpc.c"
     $828 = $7; //@line 952 "lpc.c"
     $829 = ($827|0)<($828|0); //@line 952 "lpc.c"
     if (!($829)) {
      break;
     }
     $13 = 0; //@line 953 "lpc.c"
     $830 = $8; //@line 954 "lpc.c"
     $831 = ((($830)) + 16|0); //@line 954 "lpc.c"
     $832 = HEAP32[$831>>2]|0; //@line 954 "lpc.c"
     $833 = $11; //@line 954 "lpc.c"
     $834 = $12; //@line 954 "lpc.c"
     $835 = (($834) - 5)|0; //@line 954 "lpc.c"
     $836 = (($833) + ($835<<2)|0); //@line 954 "lpc.c"
     $837 = HEAP32[$836>>2]|0; //@line 954 "lpc.c"
     $838 = Math_imul($832, $837)|0; //@line 954 "lpc.c"
     $839 = $13; //@line 954 "lpc.c"
     $840 = (($839) + ($838))|0; //@line 954 "lpc.c"
     $13 = $840; //@line 954 "lpc.c"
     $841 = $8; //@line 955 "lpc.c"
     $842 = ((($841)) + 12|0); //@line 955 "lpc.c"
     $843 = HEAP32[$842>>2]|0; //@line 955 "lpc.c"
     $844 = $11; //@line 955 "lpc.c"
     $845 = $12; //@line 955 "lpc.c"
     $846 = (($845) - 4)|0; //@line 955 "lpc.c"
     $847 = (($844) + ($846<<2)|0); //@line 955 "lpc.c"
     $848 = HEAP32[$847>>2]|0; //@line 955 "lpc.c"
     $849 = Math_imul($843, $848)|0; //@line 955 "lpc.c"
     $850 = $13; //@line 955 "lpc.c"
     $851 = (($850) + ($849))|0; //@line 955 "lpc.c"
     $13 = $851; //@line 955 "lpc.c"
     $852 = $8; //@line 956 "lpc.c"
     $853 = ((($852)) + 8|0); //@line 956 "lpc.c"
     $854 = HEAP32[$853>>2]|0; //@line 956 "lpc.c"
     $855 = $11; //@line 956 "lpc.c"
     $856 = $12; //@line 956 "lpc.c"
     $857 = (($856) - 3)|0; //@line 956 "lpc.c"
     $858 = (($855) + ($857<<2)|0); //@line 956 "lpc.c"
     $859 = HEAP32[$858>>2]|0; //@line 956 "lpc.c"
     $860 = Math_imul($854, $859)|0; //@line 956 "lpc.c"
     $861 = $13; //@line 956 "lpc.c"
     $862 = (($861) + ($860))|0; //@line 956 "lpc.c"
     $13 = $862; //@line 956 "lpc.c"
     $863 = $8; //@line 957 "lpc.c"
     $864 = ((($863)) + 4|0); //@line 957 "lpc.c"
     $865 = HEAP32[$864>>2]|0; //@line 957 "lpc.c"
     $866 = $11; //@line 957 "lpc.c"
     $867 = $12; //@line 957 "lpc.c"
     $868 = (($867) - 2)|0; //@line 957 "lpc.c"
     $869 = (($866) + ($868<<2)|0); //@line 957 "lpc.c"
     $870 = HEAP32[$869>>2]|0; //@line 957 "lpc.c"
     $871 = Math_imul($865, $870)|0; //@line 957 "lpc.c"
     $872 = $13; //@line 957 "lpc.c"
     $873 = (($872) + ($871))|0; //@line 957 "lpc.c"
     $13 = $873; //@line 957 "lpc.c"
     $874 = $8; //@line 958 "lpc.c"
     $875 = HEAP32[$874>>2]|0; //@line 958 "lpc.c"
     $876 = $11; //@line 958 "lpc.c"
     $877 = $12; //@line 958 "lpc.c"
     $878 = (($877) - 1)|0; //@line 958 "lpc.c"
     $879 = (($876) + ($878<<2)|0); //@line 958 "lpc.c"
     $880 = HEAP32[$879>>2]|0; //@line 958 "lpc.c"
     $881 = Math_imul($875, $880)|0; //@line 958 "lpc.c"
     $882 = $13; //@line 958 "lpc.c"
     $883 = (($882) + ($881))|0; //@line 958 "lpc.c"
     $13 = $883; //@line 958 "lpc.c"
     $884 = $6; //@line 959 "lpc.c"
     $885 = $12; //@line 959 "lpc.c"
     $886 = (($884) + ($885<<2)|0); //@line 959 "lpc.c"
     $887 = HEAP32[$886>>2]|0; //@line 959 "lpc.c"
     $888 = $13; //@line 959 "lpc.c"
     $889 = $10; //@line 959 "lpc.c"
     $890 = $888 >> $889; //@line 959 "lpc.c"
     $891 = (($887) + ($890))|0; //@line 959 "lpc.c"
     $892 = $11; //@line 959 "lpc.c"
     $893 = $12; //@line 959 "lpc.c"
     $894 = (($892) + ($893<<2)|0); //@line 959 "lpc.c"
     HEAP32[$894>>2] = $891; //@line 959 "lpc.c"
     $895 = $12; //@line 952 "lpc.c"
     $896 = (($895) + 1)|0; //@line 952 "lpc.c"
     $12 = $896; //@line 952 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  }
 } else {
  $897 = ($546>>>0)>(2); //@line 965 "lpc.c"
  $898 = $9;
  if ($897) {
   $899 = ($898|0)==(4); //@line 966 "lpc.c"
   $12 = 0;
   if ($899) {
    while(1) {
     $900 = $12; //@line 967 "lpc.c"
     $901 = $7; //@line 967 "lpc.c"
     $902 = ($900|0)<($901|0); //@line 967 "lpc.c"
     if (!($902)) {
      break;
     }
     $13 = 0; //@line 968 "lpc.c"
     $903 = $8; //@line 969 "lpc.c"
     $904 = ((($903)) + 12|0); //@line 969 "lpc.c"
     $905 = HEAP32[$904>>2]|0; //@line 969 "lpc.c"
     $906 = $11; //@line 969 "lpc.c"
     $907 = $12; //@line 969 "lpc.c"
     $908 = (($907) - 4)|0; //@line 969 "lpc.c"
     $909 = (($906) + ($908<<2)|0); //@line 969 "lpc.c"
     $910 = HEAP32[$909>>2]|0; //@line 969 "lpc.c"
     $911 = Math_imul($905, $910)|0; //@line 969 "lpc.c"
     $912 = $13; //@line 969 "lpc.c"
     $913 = (($912) + ($911))|0; //@line 969 "lpc.c"
     $13 = $913; //@line 969 "lpc.c"
     $914 = $8; //@line 970 "lpc.c"
     $915 = ((($914)) + 8|0); //@line 970 "lpc.c"
     $916 = HEAP32[$915>>2]|0; //@line 970 "lpc.c"
     $917 = $11; //@line 970 "lpc.c"
     $918 = $12; //@line 970 "lpc.c"
     $919 = (($918) - 3)|0; //@line 970 "lpc.c"
     $920 = (($917) + ($919<<2)|0); //@line 970 "lpc.c"
     $921 = HEAP32[$920>>2]|0; //@line 970 "lpc.c"
     $922 = Math_imul($916, $921)|0; //@line 970 "lpc.c"
     $923 = $13; //@line 970 "lpc.c"
     $924 = (($923) + ($922))|0; //@line 970 "lpc.c"
     $13 = $924; //@line 970 "lpc.c"
     $925 = $8; //@line 971 "lpc.c"
     $926 = ((($925)) + 4|0); //@line 971 "lpc.c"
     $927 = HEAP32[$926>>2]|0; //@line 971 "lpc.c"
     $928 = $11; //@line 971 "lpc.c"
     $929 = $12; //@line 971 "lpc.c"
     $930 = (($929) - 2)|0; //@line 971 "lpc.c"
     $931 = (($928) + ($930<<2)|0); //@line 971 "lpc.c"
     $932 = HEAP32[$931>>2]|0; //@line 971 "lpc.c"
     $933 = Math_imul($927, $932)|0; //@line 971 "lpc.c"
     $934 = $13; //@line 971 "lpc.c"
     $935 = (($934) + ($933))|0; //@line 971 "lpc.c"
     $13 = $935; //@line 971 "lpc.c"
     $936 = $8; //@line 972 "lpc.c"
     $937 = HEAP32[$936>>2]|0; //@line 972 "lpc.c"
     $938 = $11; //@line 972 "lpc.c"
     $939 = $12; //@line 972 "lpc.c"
     $940 = (($939) - 1)|0; //@line 972 "lpc.c"
     $941 = (($938) + ($940<<2)|0); //@line 972 "lpc.c"
     $942 = HEAP32[$941>>2]|0; //@line 972 "lpc.c"
     $943 = Math_imul($937, $942)|0; //@line 972 "lpc.c"
     $944 = $13; //@line 972 "lpc.c"
     $945 = (($944) + ($943))|0; //@line 972 "lpc.c"
     $13 = $945; //@line 972 "lpc.c"
     $946 = $6; //@line 973 "lpc.c"
     $947 = $12; //@line 973 "lpc.c"
     $948 = (($946) + ($947<<2)|0); //@line 973 "lpc.c"
     $949 = HEAP32[$948>>2]|0; //@line 973 "lpc.c"
     $950 = $13; //@line 973 "lpc.c"
     $951 = $10; //@line 973 "lpc.c"
     $952 = $950 >> $951; //@line 973 "lpc.c"
     $953 = (($949) + ($952))|0; //@line 973 "lpc.c"
     $954 = $11; //@line 973 "lpc.c"
     $955 = $12; //@line 973 "lpc.c"
     $956 = (($954) + ($955<<2)|0); //@line 973 "lpc.c"
     HEAP32[$956>>2] = $953; //@line 973 "lpc.c"
     $957 = $12; //@line 967 "lpc.c"
     $958 = (($957) + 1)|0; //@line 967 "lpc.c"
     $12 = $958; //@line 967 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $959 = $12; //@line 977 "lpc.c"
     $960 = $7; //@line 977 "lpc.c"
     $961 = ($959|0)<($960|0); //@line 977 "lpc.c"
     if (!($961)) {
      break;
     }
     $13 = 0; //@line 978 "lpc.c"
     $962 = $8; //@line 979 "lpc.c"
     $963 = ((($962)) + 8|0); //@line 979 "lpc.c"
     $964 = HEAP32[$963>>2]|0; //@line 979 "lpc.c"
     $965 = $11; //@line 979 "lpc.c"
     $966 = $12; //@line 979 "lpc.c"
     $967 = (($966) - 3)|0; //@line 979 "lpc.c"
     $968 = (($965) + ($967<<2)|0); //@line 979 "lpc.c"
     $969 = HEAP32[$968>>2]|0; //@line 979 "lpc.c"
     $970 = Math_imul($964, $969)|0; //@line 979 "lpc.c"
     $971 = $13; //@line 979 "lpc.c"
     $972 = (($971) + ($970))|0; //@line 979 "lpc.c"
     $13 = $972; //@line 979 "lpc.c"
     $973 = $8; //@line 980 "lpc.c"
     $974 = ((($973)) + 4|0); //@line 980 "lpc.c"
     $975 = HEAP32[$974>>2]|0; //@line 980 "lpc.c"
     $976 = $11; //@line 980 "lpc.c"
     $977 = $12; //@line 980 "lpc.c"
     $978 = (($977) - 2)|0; //@line 980 "lpc.c"
     $979 = (($976) + ($978<<2)|0); //@line 980 "lpc.c"
     $980 = HEAP32[$979>>2]|0; //@line 980 "lpc.c"
     $981 = Math_imul($975, $980)|0; //@line 980 "lpc.c"
     $982 = $13; //@line 980 "lpc.c"
     $983 = (($982) + ($981))|0; //@line 980 "lpc.c"
     $13 = $983; //@line 980 "lpc.c"
     $984 = $8; //@line 981 "lpc.c"
     $985 = HEAP32[$984>>2]|0; //@line 981 "lpc.c"
     $986 = $11; //@line 981 "lpc.c"
     $987 = $12; //@line 981 "lpc.c"
     $988 = (($987) - 1)|0; //@line 981 "lpc.c"
     $989 = (($986) + ($988<<2)|0); //@line 981 "lpc.c"
     $990 = HEAP32[$989>>2]|0; //@line 981 "lpc.c"
     $991 = Math_imul($985, $990)|0; //@line 981 "lpc.c"
     $992 = $13; //@line 981 "lpc.c"
     $993 = (($992) + ($991))|0; //@line 981 "lpc.c"
     $13 = $993; //@line 981 "lpc.c"
     $994 = $6; //@line 982 "lpc.c"
     $995 = $12; //@line 982 "lpc.c"
     $996 = (($994) + ($995<<2)|0); //@line 982 "lpc.c"
     $997 = HEAP32[$996>>2]|0; //@line 982 "lpc.c"
     $998 = $13; //@line 982 "lpc.c"
     $999 = $10; //@line 982 "lpc.c"
     $1000 = $998 >> $999; //@line 982 "lpc.c"
     $1001 = (($997) + ($1000))|0; //@line 982 "lpc.c"
     $1002 = $11; //@line 982 "lpc.c"
     $1003 = $12; //@line 982 "lpc.c"
     $1004 = (($1002) + ($1003<<2)|0); //@line 982 "lpc.c"
     HEAP32[$1004>>2] = $1001; //@line 982 "lpc.c"
     $1005 = $12; //@line 977 "lpc.c"
     $1006 = (($1005) + 1)|0; //@line 977 "lpc.c"
     $12 = $1006; //@line 977 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  } else {
   $1007 = ($898|0)==(2); //@line 987 "lpc.c"
   $12 = 0;
   if ($1007) {
    while(1) {
     $1008 = $12; //@line 988 "lpc.c"
     $1009 = $7; //@line 988 "lpc.c"
     $1010 = ($1008|0)<($1009|0); //@line 988 "lpc.c"
     if (!($1010)) {
      break;
     }
     $13 = 0; //@line 989 "lpc.c"
     $1011 = $8; //@line 990 "lpc.c"
     $1012 = ((($1011)) + 4|0); //@line 990 "lpc.c"
     $1013 = HEAP32[$1012>>2]|0; //@line 990 "lpc.c"
     $1014 = $11; //@line 990 "lpc.c"
     $1015 = $12; //@line 990 "lpc.c"
     $1016 = (($1015) - 2)|0; //@line 990 "lpc.c"
     $1017 = (($1014) + ($1016<<2)|0); //@line 990 "lpc.c"
     $1018 = HEAP32[$1017>>2]|0; //@line 990 "lpc.c"
     $1019 = Math_imul($1013, $1018)|0; //@line 990 "lpc.c"
     $1020 = $13; //@line 990 "lpc.c"
     $1021 = (($1020) + ($1019))|0; //@line 990 "lpc.c"
     $13 = $1021; //@line 990 "lpc.c"
     $1022 = $8; //@line 991 "lpc.c"
     $1023 = HEAP32[$1022>>2]|0; //@line 991 "lpc.c"
     $1024 = $11; //@line 991 "lpc.c"
     $1025 = $12; //@line 991 "lpc.c"
     $1026 = (($1025) - 1)|0; //@line 991 "lpc.c"
     $1027 = (($1024) + ($1026<<2)|0); //@line 991 "lpc.c"
     $1028 = HEAP32[$1027>>2]|0; //@line 991 "lpc.c"
     $1029 = Math_imul($1023, $1028)|0; //@line 991 "lpc.c"
     $1030 = $13; //@line 991 "lpc.c"
     $1031 = (($1030) + ($1029))|0; //@line 991 "lpc.c"
     $13 = $1031; //@line 991 "lpc.c"
     $1032 = $6; //@line 992 "lpc.c"
     $1033 = $12; //@line 992 "lpc.c"
     $1034 = (($1032) + ($1033<<2)|0); //@line 992 "lpc.c"
     $1035 = HEAP32[$1034>>2]|0; //@line 992 "lpc.c"
     $1036 = $13; //@line 992 "lpc.c"
     $1037 = $10; //@line 992 "lpc.c"
     $1038 = $1036 >> $1037; //@line 992 "lpc.c"
     $1039 = (($1035) + ($1038))|0; //@line 992 "lpc.c"
     $1040 = $11; //@line 992 "lpc.c"
     $1041 = $12; //@line 992 "lpc.c"
     $1042 = (($1040) + ($1041<<2)|0); //@line 992 "lpc.c"
     HEAP32[$1042>>2] = $1039; //@line 992 "lpc.c"
     $1043 = $12; //@line 988 "lpc.c"
     $1044 = (($1043) + 1)|0; //@line 988 "lpc.c"
     $12 = $1044; //@line 988 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   } else {
    while(1) {
     $1045 = $12; //@line 996 "lpc.c"
     $1046 = $7; //@line 996 "lpc.c"
     $1047 = ($1045|0)<($1046|0); //@line 996 "lpc.c"
     if (!($1047)) {
      break;
     }
     $1048 = $6; //@line 997 "lpc.c"
     $1049 = $12; //@line 997 "lpc.c"
     $1050 = (($1048) + ($1049<<2)|0); //@line 997 "lpc.c"
     $1051 = HEAP32[$1050>>2]|0; //@line 997 "lpc.c"
     $1052 = $8; //@line 997 "lpc.c"
     $1053 = HEAP32[$1052>>2]|0; //@line 997 "lpc.c"
     $1054 = $11; //@line 997 "lpc.c"
     $1055 = $12; //@line 997 "lpc.c"
     $1056 = (($1055) - 1)|0; //@line 997 "lpc.c"
     $1057 = (($1054) + ($1056<<2)|0); //@line 997 "lpc.c"
     $1058 = HEAP32[$1057>>2]|0; //@line 997 "lpc.c"
     $1059 = Math_imul($1053, $1058)|0; //@line 997 "lpc.c"
     $1060 = $10; //@line 997 "lpc.c"
     $1061 = $1059 >> $1060; //@line 997 "lpc.c"
     $1062 = (($1051) + ($1061))|0; //@line 997 "lpc.c"
     $1063 = $11; //@line 997 "lpc.c"
     $1064 = $12; //@line 997 "lpc.c"
     $1065 = (($1063) + ($1064<<2)|0); //@line 997 "lpc.c"
     HEAP32[$1065>>2] = $1062; //@line 997 "lpc.c"
     $1066 = $12; //@line 996 "lpc.c"
     $1067 = (($1066) + 1)|0; //@line 996 "lpc.c"
     $12 = $1067; //@line 996 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1042 "lpc.c"
   }
  }
 }
}
function _FLAC__lpc_restore_signal_wide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0;
 var $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0;
 var $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0;
 var $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0;
 var $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $9; //@line 1089 "lpc.c"
 $15 = ($14>>>0)<=(12); //@line 1089 "lpc.c"
 if (!($15)) {
  $12 = 0; //@line 1257 "lpc.c"
  while(1) {
   $2339 = $12; //@line 1257 "lpc.c"
   $2340 = $7; //@line 1257 "lpc.c"
   $2341 = ($2339|0)<($2340|0); //@line 1257 "lpc.c"
   if (!($2341)) {
    break;
   }
   $2342 = $13; //@line 1258 "lpc.c"
   $2343 = $2342; //@line 1258 "lpc.c"
   HEAP32[$2343>>2] = 0; //@line 1258 "lpc.c"
   $2344 = (($2342) + 4)|0; //@line 1258 "lpc.c"
   $2345 = $2344; //@line 1258 "lpc.c"
   HEAP32[$2345>>2] = 0; //@line 1258 "lpc.c"
   $2346 = $9; //@line 1259 "lpc.c"
   switch ($2346|0) {
   case 32:  {
    $2347 = $8; //@line 1260 "lpc.c"
    $2348 = ((($2347)) + 124|0); //@line 1260 "lpc.c"
    $2349 = HEAP32[$2348>>2]|0; //@line 1260 "lpc.c"
    $2350 = ($2349|0)<(0); //@line 1260 "lpc.c"
    $2351 = $2350 << 31 >> 31; //@line 1260 "lpc.c"
    $2352 = $11; //@line 1260 "lpc.c"
    $2353 = $12; //@line 1260 "lpc.c"
    $2354 = (($2353) - 32)|0; //@line 1260 "lpc.c"
    $2355 = (($2352) + ($2354<<2)|0); //@line 1260 "lpc.c"
    $2356 = HEAP32[$2355>>2]|0; //@line 1260 "lpc.c"
    $2357 = ($2356|0)<(0); //@line 1260 "lpc.c"
    $2358 = $2357 << 31 >> 31; //@line 1260 "lpc.c"
    $2359 = (___muldi3(($2349|0),($2351|0),($2356|0),($2358|0))|0); //@line 1260 "lpc.c"
    $2360 = tempRet0; //@line 1260 "lpc.c"
    $2361 = $13; //@line 1260 "lpc.c"
    $2362 = $2361; //@line 1260 "lpc.c"
    $2363 = HEAP32[$2362>>2]|0; //@line 1260 "lpc.c"
    $2364 = (($2361) + 4)|0; //@line 1260 "lpc.c"
    $2365 = $2364; //@line 1260 "lpc.c"
    $2366 = HEAP32[$2365>>2]|0; //@line 1260 "lpc.c"
    $2367 = (_i64Add(($2363|0),($2366|0),($2359|0),($2360|0))|0); //@line 1260 "lpc.c"
    $2368 = tempRet0; //@line 1260 "lpc.c"
    $2369 = $13; //@line 1260 "lpc.c"
    $2370 = $2369; //@line 1260 "lpc.c"
    HEAP32[$2370>>2] = $2367; //@line 1260 "lpc.c"
    $2371 = (($2369) + 4)|0; //@line 1260 "lpc.c"
    $2372 = $2371; //@line 1260 "lpc.c"
    HEAP32[$2372>>2] = $2368; //@line 1260 "lpc.c"
    label = 53;
    break;
   }
   case 31:  {
    label = 53;
    break;
   }
   case 30:  {
    label = 54;
    break;
   }
   case 29:  {
    label = 55;
    break;
   }
   case 28:  {
    label = 56;
    break;
   }
   case 27:  {
    label = 57;
    break;
   }
   case 26:  {
    label = 58;
    break;
   }
   case 25:  {
    label = 59;
    break;
   }
   case 24:  {
    label = 60;
    break;
   }
   case 23:  {
    label = 61;
    break;
   }
   case 22:  {
    label = 62;
    break;
   }
   case 21:  {
    label = 63;
    break;
   }
   case 20:  {
    label = 64;
    break;
   }
   case 19:  {
    label = 65;
    break;
   }
   case 18:  {
    label = 66;
    break;
   }
   case 17:  {
    label = 67;
    break;
   }
   case 16:  {
    label = 68;
    break;
   }
   case 15:  {
    label = 69;
    break;
   }
   case 14:  {
    label = 70;
    break;
   }
   case 13:  {
    label = 71;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 53) {
    label = 0;
    $2373 = $8; //@line 1261 "lpc.c"
    $2374 = ((($2373)) + 120|0); //@line 1261 "lpc.c"
    $2375 = HEAP32[$2374>>2]|0; //@line 1261 "lpc.c"
    $2376 = ($2375|0)<(0); //@line 1261 "lpc.c"
    $2377 = $2376 << 31 >> 31; //@line 1261 "lpc.c"
    $2378 = $11; //@line 1261 "lpc.c"
    $2379 = $12; //@line 1261 "lpc.c"
    $2380 = (($2379) - 31)|0; //@line 1261 "lpc.c"
    $2381 = (($2378) + ($2380<<2)|0); //@line 1261 "lpc.c"
    $2382 = HEAP32[$2381>>2]|0; //@line 1261 "lpc.c"
    $2383 = ($2382|0)<(0); //@line 1261 "lpc.c"
    $2384 = $2383 << 31 >> 31; //@line 1261 "lpc.c"
    $2385 = (___muldi3(($2375|0),($2377|0),($2382|0),($2384|0))|0); //@line 1261 "lpc.c"
    $2386 = tempRet0; //@line 1261 "lpc.c"
    $2387 = $13; //@line 1261 "lpc.c"
    $2388 = $2387; //@line 1261 "lpc.c"
    $2389 = HEAP32[$2388>>2]|0; //@line 1261 "lpc.c"
    $2390 = (($2387) + 4)|0; //@line 1261 "lpc.c"
    $2391 = $2390; //@line 1261 "lpc.c"
    $2392 = HEAP32[$2391>>2]|0; //@line 1261 "lpc.c"
    $2393 = (_i64Add(($2389|0),($2392|0),($2385|0),($2386|0))|0); //@line 1261 "lpc.c"
    $2394 = tempRet0; //@line 1261 "lpc.c"
    $2395 = $13; //@line 1261 "lpc.c"
    $2396 = $2395; //@line 1261 "lpc.c"
    HEAP32[$2396>>2] = $2393; //@line 1261 "lpc.c"
    $2397 = (($2395) + 4)|0; //@line 1261 "lpc.c"
    $2398 = $2397; //@line 1261 "lpc.c"
    HEAP32[$2398>>2] = $2394; //@line 1261 "lpc.c"
    label = 54;
   }
   if ((label|0) == 54) {
    label = 0;
    $2399 = $8; //@line 1262 "lpc.c"
    $2400 = ((($2399)) + 116|0); //@line 1262 "lpc.c"
    $2401 = HEAP32[$2400>>2]|0; //@line 1262 "lpc.c"
    $2402 = ($2401|0)<(0); //@line 1262 "lpc.c"
    $2403 = $2402 << 31 >> 31; //@line 1262 "lpc.c"
    $2404 = $11; //@line 1262 "lpc.c"
    $2405 = $12; //@line 1262 "lpc.c"
    $2406 = (($2405) - 30)|0; //@line 1262 "lpc.c"
    $2407 = (($2404) + ($2406<<2)|0); //@line 1262 "lpc.c"
    $2408 = HEAP32[$2407>>2]|0; //@line 1262 "lpc.c"
    $2409 = ($2408|0)<(0); //@line 1262 "lpc.c"
    $2410 = $2409 << 31 >> 31; //@line 1262 "lpc.c"
    $2411 = (___muldi3(($2401|0),($2403|0),($2408|0),($2410|0))|0); //@line 1262 "lpc.c"
    $2412 = tempRet0; //@line 1262 "lpc.c"
    $2413 = $13; //@line 1262 "lpc.c"
    $2414 = $2413; //@line 1262 "lpc.c"
    $2415 = HEAP32[$2414>>2]|0; //@line 1262 "lpc.c"
    $2416 = (($2413) + 4)|0; //@line 1262 "lpc.c"
    $2417 = $2416; //@line 1262 "lpc.c"
    $2418 = HEAP32[$2417>>2]|0; //@line 1262 "lpc.c"
    $2419 = (_i64Add(($2415|0),($2418|0),($2411|0),($2412|0))|0); //@line 1262 "lpc.c"
    $2420 = tempRet0; //@line 1262 "lpc.c"
    $2421 = $13; //@line 1262 "lpc.c"
    $2422 = $2421; //@line 1262 "lpc.c"
    HEAP32[$2422>>2] = $2419; //@line 1262 "lpc.c"
    $2423 = (($2421) + 4)|0; //@line 1262 "lpc.c"
    $2424 = $2423; //@line 1262 "lpc.c"
    HEAP32[$2424>>2] = $2420; //@line 1262 "lpc.c"
    label = 55;
   }
   if ((label|0) == 55) {
    label = 0;
    $2425 = $8; //@line 1263 "lpc.c"
    $2426 = ((($2425)) + 112|0); //@line 1263 "lpc.c"
    $2427 = HEAP32[$2426>>2]|0; //@line 1263 "lpc.c"
    $2428 = ($2427|0)<(0); //@line 1263 "lpc.c"
    $2429 = $2428 << 31 >> 31; //@line 1263 "lpc.c"
    $2430 = $11; //@line 1263 "lpc.c"
    $2431 = $12; //@line 1263 "lpc.c"
    $2432 = (($2431) - 29)|0; //@line 1263 "lpc.c"
    $2433 = (($2430) + ($2432<<2)|0); //@line 1263 "lpc.c"
    $2434 = HEAP32[$2433>>2]|0; //@line 1263 "lpc.c"
    $2435 = ($2434|0)<(0); //@line 1263 "lpc.c"
    $2436 = $2435 << 31 >> 31; //@line 1263 "lpc.c"
    $2437 = (___muldi3(($2427|0),($2429|0),($2434|0),($2436|0))|0); //@line 1263 "lpc.c"
    $2438 = tempRet0; //@line 1263 "lpc.c"
    $2439 = $13; //@line 1263 "lpc.c"
    $2440 = $2439; //@line 1263 "lpc.c"
    $2441 = HEAP32[$2440>>2]|0; //@line 1263 "lpc.c"
    $2442 = (($2439) + 4)|0; //@line 1263 "lpc.c"
    $2443 = $2442; //@line 1263 "lpc.c"
    $2444 = HEAP32[$2443>>2]|0; //@line 1263 "lpc.c"
    $2445 = (_i64Add(($2441|0),($2444|0),($2437|0),($2438|0))|0); //@line 1263 "lpc.c"
    $2446 = tempRet0; //@line 1263 "lpc.c"
    $2447 = $13; //@line 1263 "lpc.c"
    $2448 = $2447; //@line 1263 "lpc.c"
    HEAP32[$2448>>2] = $2445; //@line 1263 "lpc.c"
    $2449 = (($2447) + 4)|0; //@line 1263 "lpc.c"
    $2450 = $2449; //@line 1263 "lpc.c"
    HEAP32[$2450>>2] = $2446; //@line 1263 "lpc.c"
    label = 56;
   }
   if ((label|0) == 56) {
    label = 0;
    $2451 = $8; //@line 1264 "lpc.c"
    $2452 = ((($2451)) + 108|0); //@line 1264 "lpc.c"
    $2453 = HEAP32[$2452>>2]|0; //@line 1264 "lpc.c"
    $2454 = ($2453|0)<(0); //@line 1264 "lpc.c"
    $2455 = $2454 << 31 >> 31; //@line 1264 "lpc.c"
    $2456 = $11; //@line 1264 "lpc.c"
    $2457 = $12; //@line 1264 "lpc.c"
    $2458 = (($2457) - 28)|0; //@line 1264 "lpc.c"
    $2459 = (($2456) + ($2458<<2)|0); //@line 1264 "lpc.c"
    $2460 = HEAP32[$2459>>2]|0; //@line 1264 "lpc.c"
    $2461 = ($2460|0)<(0); //@line 1264 "lpc.c"
    $2462 = $2461 << 31 >> 31; //@line 1264 "lpc.c"
    $2463 = (___muldi3(($2453|0),($2455|0),($2460|0),($2462|0))|0); //@line 1264 "lpc.c"
    $2464 = tempRet0; //@line 1264 "lpc.c"
    $2465 = $13; //@line 1264 "lpc.c"
    $2466 = $2465; //@line 1264 "lpc.c"
    $2467 = HEAP32[$2466>>2]|0; //@line 1264 "lpc.c"
    $2468 = (($2465) + 4)|0; //@line 1264 "lpc.c"
    $2469 = $2468; //@line 1264 "lpc.c"
    $2470 = HEAP32[$2469>>2]|0; //@line 1264 "lpc.c"
    $2471 = (_i64Add(($2467|0),($2470|0),($2463|0),($2464|0))|0); //@line 1264 "lpc.c"
    $2472 = tempRet0; //@line 1264 "lpc.c"
    $2473 = $13; //@line 1264 "lpc.c"
    $2474 = $2473; //@line 1264 "lpc.c"
    HEAP32[$2474>>2] = $2471; //@line 1264 "lpc.c"
    $2475 = (($2473) + 4)|0; //@line 1264 "lpc.c"
    $2476 = $2475; //@line 1264 "lpc.c"
    HEAP32[$2476>>2] = $2472; //@line 1264 "lpc.c"
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $2477 = $8; //@line 1265 "lpc.c"
    $2478 = ((($2477)) + 104|0); //@line 1265 "lpc.c"
    $2479 = HEAP32[$2478>>2]|0; //@line 1265 "lpc.c"
    $2480 = ($2479|0)<(0); //@line 1265 "lpc.c"
    $2481 = $2480 << 31 >> 31; //@line 1265 "lpc.c"
    $2482 = $11; //@line 1265 "lpc.c"
    $2483 = $12; //@line 1265 "lpc.c"
    $2484 = (($2483) - 27)|0; //@line 1265 "lpc.c"
    $2485 = (($2482) + ($2484<<2)|0); //@line 1265 "lpc.c"
    $2486 = HEAP32[$2485>>2]|0; //@line 1265 "lpc.c"
    $2487 = ($2486|0)<(0); //@line 1265 "lpc.c"
    $2488 = $2487 << 31 >> 31; //@line 1265 "lpc.c"
    $2489 = (___muldi3(($2479|0),($2481|0),($2486|0),($2488|0))|0); //@line 1265 "lpc.c"
    $2490 = tempRet0; //@line 1265 "lpc.c"
    $2491 = $13; //@line 1265 "lpc.c"
    $2492 = $2491; //@line 1265 "lpc.c"
    $2493 = HEAP32[$2492>>2]|0; //@line 1265 "lpc.c"
    $2494 = (($2491) + 4)|0; //@line 1265 "lpc.c"
    $2495 = $2494; //@line 1265 "lpc.c"
    $2496 = HEAP32[$2495>>2]|0; //@line 1265 "lpc.c"
    $2497 = (_i64Add(($2493|0),($2496|0),($2489|0),($2490|0))|0); //@line 1265 "lpc.c"
    $2498 = tempRet0; //@line 1265 "lpc.c"
    $2499 = $13; //@line 1265 "lpc.c"
    $2500 = $2499; //@line 1265 "lpc.c"
    HEAP32[$2500>>2] = $2497; //@line 1265 "lpc.c"
    $2501 = (($2499) + 4)|0; //@line 1265 "lpc.c"
    $2502 = $2501; //@line 1265 "lpc.c"
    HEAP32[$2502>>2] = $2498; //@line 1265 "lpc.c"
    label = 58;
   }
   if ((label|0) == 58) {
    label = 0;
    $2503 = $8; //@line 1266 "lpc.c"
    $2504 = ((($2503)) + 100|0); //@line 1266 "lpc.c"
    $2505 = HEAP32[$2504>>2]|0; //@line 1266 "lpc.c"
    $2506 = ($2505|0)<(0); //@line 1266 "lpc.c"
    $2507 = $2506 << 31 >> 31; //@line 1266 "lpc.c"
    $2508 = $11; //@line 1266 "lpc.c"
    $2509 = $12; //@line 1266 "lpc.c"
    $2510 = (($2509) - 26)|0; //@line 1266 "lpc.c"
    $2511 = (($2508) + ($2510<<2)|0); //@line 1266 "lpc.c"
    $2512 = HEAP32[$2511>>2]|0; //@line 1266 "lpc.c"
    $2513 = ($2512|0)<(0); //@line 1266 "lpc.c"
    $2514 = $2513 << 31 >> 31; //@line 1266 "lpc.c"
    $2515 = (___muldi3(($2505|0),($2507|0),($2512|0),($2514|0))|0); //@line 1266 "lpc.c"
    $2516 = tempRet0; //@line 1266 "lpc.c"
    $2517 = $13; //@line 1266 "lpc.c"
    $2518 = $2517; //@line 1266 "lpc.c"
    $2519 = HEAP32[$2518>>2]|0; //@line 1266 "lpc.c"
    $2520 = (($2517) + 4)|0; //@line 1266 "lpc.c"
    $2521 = $2520; //@line 1266 "lpc.c"
    $2522 = HEAP32[$2521>>2]|0; //@line 1266 "lpc.c"
    $2523 = (_i64Add(($2519|0),($2522|0),($2515|0),($2516|0))|0); //@line 1266 "lpc.c"
    $2524 = tempRet0; //@line 1266 "lpc.c"
    $2525 = $13; //@line 1266 "lpc.c"
    $2526 = $2525; //@line 1266 "lpc.c"
    HEAP32[$2526>>2] = $2523; //@line 1266 "lpc.c"
    $2527 = (($2525) + 4)|0; //@line 1266 "lpc.c"
    $2528 = $2527; //@line 1266 "lpc.c"
    HEAP32[$2528>>2] = $2524; //@line 1266 "lpc.c"
    label = 59;
   }
   if ((label|0) == 59) {
    label = 0;
    $2529 = $8; //@line 1267 "lpc.c"
    $2530 = ((($2529)) + 96|0); //@line 1267 "lpc.c"
    $2531 = HEAP32[$2530>>2]|0; //@line 1267 "lpc.c"
    $2532 = ($2531|0)<(0); //@line 1267 "lpc.c"
    $2533 = $2532 << 31 >> 31; //@line 1267 "lpc.c"
    $2534 = $11; //@line 1267 "lpc.c"
    $2535 = $12; //@line 1267 "lpc.c"
    $2536 = (($2535) - 25)|0; //@line 1267 "lpc.c"
    $2537 = (($2534) + ($2536<<2)|0); //@line 1267 "lpc.c"
    $2538 = HEAP32[$2537>>2]|0; //@line 1267 "lpc.c"
    $2539 = ($2538|0)<(0); //@line 1267 "lpc.c"
    $2540 = $2539 << 31 >> 31; //@line 1267 "lpc.c"
    $2541 = (___muldi3(($2531|0),($2533|0),($2538|0),($2540|0))|0); //@line 1267 "lpc.c"
    $2542 = tempRet0; //@line 1267 "lpc.c"
    $2543 = $13; //@line 1267 "lpc.c"
    $2544 = $2543; //@line 1267 "lpc.c"
    $2545 = HEAP32[$2544>>2]|0; //@line 1267 "lpc.c"
    $2546 = (($2543) + 4)|0; //@line 1267 "lpc.c"
    $2547 = $2546; //@line 1267 "lpc.c"
    $2548 = HEAP32[$2547>>2]|0; //@line 1267 "lpc.c"
    $2549 = (_i64Add(($2545|0),($2548|0),($2541|0),($2542|0))|0); //@line 1267 "lpc.c"
    $2550 = tempRet0; //@line 1267 "lpc.c"
    $2551 = $13; //@line 1267 "lpc.c"
    $2552 = $2551; //@line 1267 "lpc.c"
    HEAP32[$2552>>2] = $2549; //@line 1267 "lpc.c"
    $2553 = (($2551) + 4)|0; //@line 1267 "lpc.c"
    $2554 = $2553; //@line 1267 "lpc.c"
    HEAP32[$2554>>2] = $2550; //@line 1267 "lpc.c"
    label = 60;
   }
   if ((label|0) == 60) {
    label = 0;
    $2555 = $8; //@line 1268 "lpc.c"
    $2556 = ((($2555)) + 92|0); //@line 1268 "lpc.c"
    $2557 = HEAP32[$2556>>2]|0; //@line 1268 "lpc.c"
    $2558 = ($2557|0)<(0); //@line 1268 "lpc.c"
    $2559 = $2558 << 31 >> 31; //@line 1268 "lpc.c"
    $2560 = $11; //@line 1268 "lpc.c"
    $2561 = $12; //@line 1268 "lpc.c"
    $2562 = (($2561) - 24)|0; //@line 1268 "lpc.c"
    $2563 = (($2560) + ($2562<<2)|0); //@line 1268 "lpc.c"
    $2564 = HEAP32[$2563>>2]|0; //@line 1268 "lpc.c"
    $2565 = ($2564|0)<(0); //@line 1268 "lpc.c"
    $2566 = $2565 << 31 >> 31; //@line 1268 "lpc.c"
    $2567 = (___muldi3(($2557|0),($2559|0),($2564|0),($2566|0))|0); //@line 1268 "lpc.c"
    $2568 = tempRet0; //@line 1268 "lpc.c"
    $2569 = $13; //@line 1268 "lpc.c"
    $2570 = $2569; //@line 1268 "lpc.c"
    $2571 = HEAP32[$2570>>2]|0; //@line 1268 "lpc.c"
    $2572 = (($2569) + 4)|0; //@line 1268 "lpc.c"
    $2573 = $2572; //@line 1268 "lpc.c"
    $2574 = HEAP32[$2573>>2]|0; //@line 1268 "lpc.c"
    $2575 = (_i64Add(($2571|0),($2574|0),($2567|0),($2568|0))|0); //@line 1268 "lpc.c"
    $2576 = tempRet0; //@line 1268 "lpc.c"
    $2577 = $13; //@line 1268 "lpc.c"
    $2578 = $2577; //@line 1268 "lpc.c"
    HEAP32[$2578>>2] = $2575; //@line 1268 "lpc.c"
    $2579 = (($2577) + 4)|0; //@line 1268 "lpc.c"
    $2580 = $2579; //@line 1268 "lpc.c"
    HEAP32[$2580>>2] = $2576; //@line 1268 "lpc.c"
    label = 61;
   }
   if ((label|0) == 61) {
    label = 0;
    $2581 = $8; //@line 1269 "lpc.c"
    $2582 = ((($2581)) + 88|0); //@line 1269 "lpc.c"
    $2583 = HEAP32[$2582>>2]|0; //@line 1269 "lpc.c"
    $2584 = ($2583|0)<(0); //@line 1269 "lpc.c"
    $2585 = $2584 << 31 >> 31; //@line 1269 "lpc.c"
    $2586 = $11; //@line 1269 "lpc.c"
    $2587 = $12; //@line 1269 "lpc.c"
    $2588 = (($2587) - 23)|0; //@line 1269 "lpc.c"
    $2589 = (($2586) + ($2588<<2)|0); //@line 1269 "lpc.c"
    $2590 = HEAP32[$2589>>2]|0; //@line 1269 "lpc.c"
    $2591 = ($2590|0)<(0); //@line 1269 "lpc.c"
    $2592 = $2591 << 31 >> 31; //@line 1269 "lpc.c"
    $2593 = (___muldi3(($2583|0),($2585|0),($2590|0),($2592|0))|0); //@line 1269 "lpc.c"
    $2594 = tempRet0; //@line 1269 "lpc.c"
    $2595 = $13; //@line 1269 "lpc.c"
    $2596 = $2595; //@line 1269 "lpc.c"
    $2597 = HEAP32[$2596>>2]|0; //@line 1269 "lpc.c"
    $2598 = (($2595) + 4)|0; //@line 1269 "lpc.c"
    $2599 = $2598; //@line 1269 "lpc.c"
    $2600 = HEAP32[$2599>>2]|0; //@line 1269 "lpc.c"
    $2601 = (_i64Add(($2597|0),($2600|0),($2593|0),($2594|0))|0); //@line 1269 "lpc.c"
    $2602 = tempRet0; //@line 1269 "lpc.c"
    $2603 = $13; //@line 1269 "lpc.c"
    $2604 = $2603; //@line 1269 "lpc.c"
    HEAP32[$2604>>2] = $2601; //@line 1269 "lpc.c"
    $2605 = (($2603) + 4)|0; //@line 1269 "lpc.c"
    $2606 = $2605; //@line 1269 "lpc.c"
    HEAP32[$2606>>2] = $2602; //@line 1269 "lpc.c"
    label = 62;
   }
   if ((label|0) == 62) {
    label = 0;
    $2607 = $8; //@line 1270 "lpc.c"
    $2608 = ((($2607)) + 84|0); //@line 1270 "lpc.c"
    $2609 = HEAP32[$2608>>2]|0; //@line 1270 "lpc.c"
    $2610 = ($2609|0)<(0); //@line 1270 "lpc.c"
    $2611 = $2610 << 31 >> 31; //@line 1270 "lpc.c"
    $2612 = $11; //@line 1270 "lpc.c"
    $2613 = $12; //@line 1270 "lpc.c"
    $2614 = (($2613) - 22)|0; //@line 1270 "lpc.c"
    $2615 = (($2612) + ($2614<<2)|0); //@line 1270 "lpc.c"
    $2616 = HEAP32[$2615>>2]|0; //@line 1270 "lpc.c"
    $2617 = ($2616|0)<(0); //@line 1270 "lpc.c"
    $2618 = $2617 << 31 >> 31; //@line 1270 "lpc.c"
    $2619 = (___muldi3(($2609|0),($2611|0),($2616|0),($2618|0))|0); //@line 1270 "lpc.c"
    $2620 = tempRet0; //@line 1270 "lpc.c"
    $2621 = $13; //@line 1270 "lpc.c"
    $2622 = $2621; //@line 1270 "lpc.c"
    $2623 = HEAP32[$2622>>2]|0; //@line 1270 "lpc.c"
    $2624 = (($2621) + 4)|0; //@line 1270 "lpc.c"
    $2625 = $2624; //@line 1270 "lpc.c"
    $2626 = HEAP32[$2625>>2]|0; //@line 1270 "lpc.c"
    $2627 = (_i64Add(($2623|0),($2626|0),($2619|0),($2620|0))|0); //@line 1270 "lpc.c"
    $2628 = tempRet0; //@line 1270 "lpc.c"
    $2629 = $13; //@line 1270 "lpc.c"
    $2630 = $2629; //@line 1270 "lpc.c"
    HEAP32[$2630>>2] = $2627; //@line 1270 "lpc.c"
    $2631 = (($2629) + 4)|0; //@line 1270 "lpc.c"
    $2632 = $2631; //@line 1270 "lpc.c"
    HEAP32[$2632>>2] = $2628; //@line 1270 "lpc.c"
    label = 63;
   }
   if ((label|0) == 63) {
    label = 0;
    $2633 = $8; //@line 1271 "lpc.c"
    $2634 = ((($2633)) + 80|0); //@line 1271 "lpc.c"
    $2635 = HEAP32[$2634>>2]|0; //@line 1271 "lpc.c"
    $2636 = ($2635|0)<(0); //@line 1271 "lpc.c"
    $2637 = $2636 << 31 >> 31; //@line 1271 "lpc.c"
    $2638 = $11; //@line 1271 "lpc.c"
    $2639 = $12; //@line 1271 "lpc.c"
    $2640 = (($2639) - 21)|0; //@line 1271 "lpc.c"
    $2641 = (($2638) + ($2640<<2)|0); //@line 1271 "lpc.c"
    $2642 = HEAP32[$2641>>2]|0; //@line 1271 "lpc.c"
    $2643 = ($2642|0)<(0); //@line 1271 "lpc.c"
    $2644 = $2643 << 31 >> 31; //@line 1271 "lpc.c"
    $2645 = (___muldi3(($2635|0),($2637|0),($2642|0),($2644|0))|0); //@line 1271 "lpc.c"
    $2646 = tempRet0; //@line 1271 "lpc.c"
    $2647 = $13; //@line 1271 "lpc.c"
    $2648 = $2647; //@line 1271 "lpc.c"
    $2649 = HEAP32[$2648>>2]|0; //@line 1271 "lpc.c"
    $2650 = (($2647) + 4)|0; //@line 1271 "lpc.c"
    $2651 = $2650; //@line 1271 "lpc.c"
    $2652 = HEAP32[$2651>>2]|0; //@line 1271 "lpc.c"
    $2653 = (_i64Add(($2649|0),($2652|0),($2645|0),($2646|0))|0); //@line 1271 "lpc.c"
    $2654 = tempRet0; //@line 1271 "lpc.c"
    $2655 = $13; //@line 1271 "lpc.c"
    $2656 = $2655; //@line 1271 "lpc.c"
    HEAP32[$2656>>2] = $2653; //@line 1271 "lpc.c"
    $2657 = (($2655) + 4)|0; //@line 1271 "lpc.c"
    $2658 = $2657; //@line 1271 "lpc.c"
    HEAP32[$2658>>2] = $2654; //@line 1271 "lpc.c"
    label = 64;
   }
   if ((label|0) == 64) {
    label = 0;
    $2659 = $8; //@line 1272 "lpc.c"
    $2660 = ((($2659)) + 76|0); //@line 1272 "lpc.c"
    $2661 = HEAP32[$2660>>2]|0; //@line 1272 "lpc.c"
    $2662 = ($2661|0)<(0); //@line 1272 "lpc.c"
    $2663 = $2662 << 31 >> 31; //@line 1272 "lpc.c"
    $2664 = $11; //@line 1272 "lpc.c"
    $2665 = $12; //@line 1272 "lpc.c"
    $2666 = (($2665) - 20)|0; //@line 1272 "lpc.c"
    $2667 = (($2664) + ($2666<<2)|0); //@line 1272 "lpc.c"
    $2668 = HEAP32[$2667>>2]|0; //@line 1272 "lpc.c"
    $2669 = ($2668|0)<(0); //@line 1272 "lpc.c"
    $2670 = $2669 << 31 >> 31; //@line 1272 "lpc.c"
    $2671 = (___muldi3(($2661|0),($2663|0),($2668|0),($2670|0))|0); //@line 1272 "lpc.c"
    $2672 = tempRet0; //@line 1272 "lpc.c"
    $2673 = $13; //@line 1272 "lpc.c"
    $2674 = $2673; //@line 1272 "lpc.c"
    $2675 = HEAP32[$2674>>2]|0; //@line 1272 "lpc.c"
    $2676 = (($2673) + 4)|0; //@line 1272 "lpc.c"
    $2677 = $2676; //@line 1272 "lpc.c"
    $2678 = HEAP32[$2677>>2]|0; //@line 1272 "lpc.c"
    $2679 = (_i64Add(($2675|0),($2678|0),($2671|0),($2672|0))|0); //@line 1272 "lpc.c"
    $2680 = tempRet0; //@line 1272 "lpc.c"
    $2681 = $13; //@line 1272 "lpc.c"
    $2682 = $2681; //@line 1272 "lpc.c"
    HEAP32[$2682>>2] = $2679; //@line 1272 "lpc.c"
    $2683 = (($2681) + 4)|0; //@line 1272 "lpc.c"
    $2684 = $2683; //@line 1272 "lpc.c"
    HEAP32[$2684>>2] = $2680; //@line 1272 "lpc.c"
    label = 65;
   }
   if ((label|0) == 65) {
    label = 0;
    $2685 = $8; //@line 1273 "lpc.c"
    $2686 = ((($2685)) + 72|0); //@line 1273 "lpc.c"
    $2687 = HEAP32[$2686>>2]|0; //@line 1273 "lpc.c"
    $2688 = ($2687|0)<(0); //@line 1273 "lpc.c"
    $2689 = $2688 << 31 >> 31; //@line 1273 "lpc.c"
    $2690 = $11; //@line 1273 "lpc.c"
    $2691 = $12; //@line 1273 "lpc.c"
    $2692 = (($2691) - 19)|0; //@line 1273 "lpc.c"
    $2693 = (($2690) + ($2692<<2)|0); //@line 1273 "lpc.c"
    $2694 = HEAP32[$2693>>2]|0; //@line 1273 "lpc.c"
    $2695 = ($2694|0)<(0); //@line 1273 "lpc.c"
    $2696 = $2695 << 31 >> 31; //@line 1273 "lpc.c"
    $2697 = (___muldi3(($2687|0),($2689|0),($2694|0),($2696|0))|0); //@line 1273 "lpc.c"
    $2698 = tempRet0; //@line 1273 "lpc.c"
    $2699 = $13; //@line 1273 "lpc.c"
    $2700 = $2699; //@line 1273 "lpc.c"
    $2701 = HEAP32[$2700>>2]|0; //@line 1273 "lpc.c"
    $2702 = (($2699) + 4)|0; //@line 1273 "lpc.c"
    $2703 = $2702; //@line 1273 "lpc.c"
    $2704 = HEAP32[$2703>>2]|0; //@line 1273 "lpc.c"
    $2705 = (_i64Add(($2701|0),($2704|0),($2697|0),($2698|0))|0); //@line 1273 "lpc.c"
    $2706 = tempRet0; //@line 1273 "lpc.c"
    $2707 = $13; //@line 1273 "lpc.c"
    $2708 = $2707; //@line 1273 "lpc.c"
    HEAP32[$2708>>2] = $2705; //@line 1273 "lpc.c"
    $2709 = (($2707) + 4)|0; //@line 1273 "lpc.c"
    $2710 = $2709; //@line 1273 "lpc.c"
    HEAP32[$2710>>2] = $2706; //@line 1273 "lpc.c"
    label = 66;
   }
   if ((label|0) == 66) {
    label = 0;
    $2711 = $8; //@line 1274 "lpc.c"
    $2712 = ((($2711)) + 68|0); //@line 1274 "lpc.c"
    $2713 = HEAP32[$2712>>2]|0; //@line 1274 "lpc.c"
    $2714 = ($2713|0)<(0); //@line 1274 "lpc.c"
    $2715 = $2714 << 31 >> 31; //@line 1274 "lpc.c"
    $2716 = $11; //@line 1274 "lpc.c"
    $2717 = $12; //@line 1274 "lpc.c"
    $2718 = (($2717) - 18)|0; //@line 1274 "lpc.c"
    $2719 = (($2716) + ($2718<<2)|0); //@line 1274 "lpc.c"
    $2720 = HEAP32[$2719>>2]|0; //@line 1274 "lpc.c"
    $2721 = ($2720|0)<(0); //@line 1274 "lpc.c"
    $2722 = $2721 << 31 >> 31; //@line 1274 "lpc.c"
    $2723 = (___muldi3(($2713|0),($2715|0),($2720|0),($2722|0))|0); //@line 1274 "lpc.c"
    $2724 = tempRet0; //@line 1274 "lpc.c"
    $2725 = $13; //@line 1274 "lpc.c"
    $2726 = $2725; //@line 1274 "lpc.c"
    $2727 = HEAP32[$2726>>2]|0; //@line 1274 "lpc.c"
    $2728 = (($2725) + 4)|0; //@line 1274 "lpc.c"
    $2729 = $2728; //@line 1274 "lpc.c"
    $2730 = HEAP32[$2729>>2]|0; //@line 1274 "lpc.c"
    $2731 = (_i64Add(($2727|0),($2730|0),($2723|0),($2724|0))|0); //@line 1274 "lpc.c"
    $2732 = tempRet0; //@line 1274 "lpc.c"
    $2733 = $13; //@line 1274 "lpc.c"
    $2734 = $2733; //@line 1274 "lpc.c"
    HEAP32[$2734>>2] = $2731; //@line 1274 "lpc.c"
    $2735 = (($2733) + 4)|0; //@line 1274 "lpc.c"
    $2736 = $2735; //@line 1274 "lpc.c"
    HEAP32[$2736>>2] = $2732; //@line 1274 "lpc.c"
    label = 67;
   }
   if ((label|0) == 67) {
    label = 0;
    $2737 = $8; //@line 1275 "lpc.c"
    $2738 = ((($2737)) + 64|0); //@line 1275 "lpc.c"
    $2739 = HEAP32[$2738>>2]|0; //@line 1275 "lpc.c"
    $2740 = ($2739|0)<(0); //@line 1275 "lpc.c"
    $2741 = $2740 << 31 >> 31; //@line 1275 "lpc.c"
    $2742 = $11; //@line 1275 "lpc.c"
    $2743 = $12; //@line 1275 "lpc.c"
    $2744 = (($2743) - 17)|0; //@line 1275 "lpc.c"
    $2745 = (($2742) + ($2744<<2)|0); //@line 1275 "lpc.c"
    $2746 = HEAP32[$2745>>2]|0; //@line 1275 "lpc.c"
    $2747 = ($2746|0)<(0); //@line 1275 "lpc.c"
    $2748 = $2747 << 31 >> 31; //@line 1275 "lpc.c"
    $2749 = (___muldi3(($2739|0),($2741|0),($2746|0),($2748|0))|0); //@line 1275 "lpc.c"
    $2750 = tempRet0; //@line 1275 "lpc.c"
    $2751 = $13; //@line 1275 "lpc.c"
    $2752 = $2751; //@line 1275 "lpc.c"
    $2753 = HEAP32[$2752>>2]|0; //@line 1275 "lpc.c"
    $2754 = (($2751) + 4)|0; //@line 1275 "lpc.c"
    $2755 = $2754; //@line 1275 "lpc.c"
    $2756 = HEAP32[$2755>>2]|0; //@line 1275 "lpc.c"
    $2757 = (_i64Add(($2753|0),($2756|0),($2749|0),($2750|0))|0); //@line 1275 "lpc.c"
    $2758 = tempRet0; //@line 1275 "lpc.c"
    $2759 = $13; //@line 1275 "lpc.c"
    $2760 = $2759; //@line 1275 "lpc.c"
    HEAP32[$2760>>2] = $2757; //@line 1275 "lpc.c"
    $2761 = (($2759) + 4)|0; //@line 1275 "lpc.c"
    $2762 = $2761; //@line 1275 "lpc.c"
    HEAP32[$2762>>2] = $2758; //@line 1275 "lpc.c"
    label = 68;
   }
   if ((label|0) == 68) {
    label = 0;
    $2763 = $8; //@line 1276 "lpc.c"
    $2764 = ((($2763)) + 60|0); //@line 1276 "lpc.c"
    $2765 = HEAP32[$2764>>2]|0; //@line 1276 "lpc.c"
    $2766 = ($2765|0)<(0); //@line 1276 "lpc.c"
    $2767 = $2766 << 31 >> 31; //@line 1276 "lpc.c"
    $2768 = $11; //@line 1276 "lpc.c"
    $2769 = $12; //@line 1276 "lpc.c"
    $2770 = (($2769) - 16)|0; //@line 1276 "lpc.c"
    $2771 = (($2768) + ($2770<<2)|0); //@line 1276 "lpc.c"
    $2772 = HEAP32[$2771>>2]|0; //@line 1276 "lpc.c"
    $2773 = ($2772|0)<(0); //@line 1276 "lpc.c"
    $2774 = $2773 << 31 >> 31; //@line 1276 "lpc.c"
    $2775 = (___muldi3(($2765|0),($2767|0),($2772|0),($2774|0))|0); //@line 1276 "lpc.c"
    $2776 = tempRet0; //@line 1276 "lpc.c"
    $2777 = $13; //@line 1276 "lpc.c"
    $2778 = $2777; //@line 1276 "lpc.c"
    $2779 = HEAP32[$2778>>2]|0; //@line 1276 "lpc.c"
    $2780 = (($2777) + 4)|0; //@line 1276 "lpc.c"
    $2781 = $2780; //@line 1276 "lpc.c"
    $2782 = HEAP32[$2781>>2]|0; //@line 1276 "lpc.c"
    $2783 = (_i64Add(($2779|0),($2782|0),($2775|0),($2776|0))|0); //@line 1276 "lpc.c"
    $2784 = tempRet0; //@line 1276 "lpc.c"
    $2785 = $13; //@line 1276 "lpc.c"
    $2786 = $2785; //@line 1276 "lpc.c"
    HEAP32[$2786>>2] = $2783; //@line 1276 "lpc.c"
    $2787 = (($2785) + 4)|0; //@line 1276 "lpc.c"
    $2788 = $2787; //@line 1276 "lpc.c"
    HEAP32[$2788>>2] = $2784; //@line 1276 "lpc.c"
    label = 69;
   }
   if ((label|0) == 69) {
    label = 0;
    $2789 = $8; //@line 1277 "lpc.c"
    $2790 = ((($2789)) + 56|0); //@line 1277 "lpc.c"
    $2791 = HEAP32[$2790>>2]|0; //@line 1277 "lpc.c"
    $2792 = ($2791|0)<(0); //@line 1277 "lpc.c"
    $2793 = $2792 << 31 >> 31; //@line 1277 "lpc.c"
    $2794 = $11; //@line 1277 "lpc.c"
    $2795 = $12; //@line 1277 "lpc.c"
    $2796 = (($2795) - 15)|0; //@line 1277 "lpc.c"
    $2797 = (($2794) + ($2796<<2)|0); //@line 1277 "lpc.c"
    $2798 = HEAP32[$2797>>2]|0; //@line 1277 "lpc.c"
    $2799 = ($2798|0)<(0); //@line 1277 "lpc.c"
    $2800 = $2799 << 31 >> 31; //@line 1277 "lpc.c"
    $2801 = (___muldi3(($2791|0),($2793|0),($2798|0),($2800|0))|0); //@line 1277 "lpc.c"
    $2802 = tempRet0; //@line 1277 "lpc.c"
    $2803 = $13; //@line 1277 "lpc.c"
    $2804 = $2803; //@line 1277 "lpc.c"
    $2805 = HEAP32[$2804>>2]|0; //@line 1277 "lpc.c"
    $2806 = (($2803) + 4)|0; //@line 1277 "lpc.c"
    $2807 = $2806; //@line 1277 "lpc.c"
    $2808 = HEAP32[$2807>>2]|0; //@line 1277 "lpc.c"
    $2809 = (_i64Add(($2805|0),($2808|0),($2801|0),($2802|0))|0); //@line 1277 "lpc.c"
    $2810 = tempRet0; //@line 1277 "lpc.c"
    $2811 = $13; //@line 1277 "lpc.c"
    $2812 = $2811; //@line 1277 "lpc.c"
    HEAP32[$2812>>2] = $2809; //@line 1277 "lpc.c"
    $2813 = (($2811) + 4)|0; //@line 1277 "lpc.c"
    $2814 = $2813; //@line 1277 "lpc.c"
    HEAP32[$2814>>2] = $2810; //@line 1277 "lpc.c"
    label = 70;
   }
   if ((label|0) == 70) {
    label = 0;
    $2815 = $8; //@line 1278 "lpc.c"
    $2816 = ((($2815)) + 52|0); //@line 1278 "lpc.c"
    $2817 = HEAP32[$2816>>2]|0; //@line 1278 "lpc.c"
    $2818 = ($2817|0)<(0); //@line 1278 "lpc.c"
    $2819 = $2818 << 31 >> 31; //@line 1278 "lpc.c"
    $2820 = $11; //@line 1278 "lpc.c"
    $2821 = $12; //@line 1278 "lpc.c"
    $2822 = (($2821) - 14)|0; //@line 1278 "lpc.c"
    $2823 = (($2820) + ($2822<<2)|0); //@line 1278 "lpc.c"
    $2824 = HEAP32[$2823>>2]|0; //@line 1278 "lpc.c"
    $2825 = ($2824|0)<(0); //@line 1278 "lpc.c"
    $2826 = $2825 << 31 >> 31; //@line 1278 "lpc.c"
    $2827 = (___muldi3(($2817|0),($2819|0),($2824|0),($2826|0))|0); //@line 1278 "lpc.c"
    $2828 = tempRet0; //@line 1278 "lpc.c"
    $2829 = $13; //@line 1278 "lpc.c"
    $2830 = $2829; //@line 1278 "lpc.c"
    $2831 = HEAP32[$2830>>2]|0; //@line 1278 "lpc.c"
    $2832 = (($2829) + 4)|0; //@line 1278 "lpc.c"
    $2833 = $2832; //@line 1278 "lpc.c"
    $2834 = HEAP32[$2833>>2]|0; //@line 1278 "lpc.c"
    $2835 = (_i64Add(($2831|0),($2834|0),($2827|0),($2828|0))|0); //@line 1278 "lpc.c"
    $2836 = tempRet0; //@line 1278 "lpc.c"
    $2837 = $13; //@line 1278 "lpc.c"
    $2838 = $2837; //@line 1278 "lpc.c"
    HEAP32[$2838>>2] = $2835; //@line 1278 "lpc.c"
    $2839 = (($2837) + 4)|0; //@line 1278 "lpc.c"
    $2840 = $2839; //@line 1278 "lpc.c"
    HEAP32[$2840>>2] = $2836; //@line 1278 "lpc.c"
    label = 71;
   }
   if ((label|0) == 71) {
    label = 0;
    $2841 = $8; //@line 1279 "lpc.c"
    $2842 = ((($2841)) + 48|0); //@line 1279 "lpc.c"
    $2843 = HEAP32[$2842>>2]|0; //@line 1279 "lpc.c"
    $2844 = ($2843|0)<(0); //@line 1279 "lpc.c"
    $2845 = $2844 << 31 >> 31; //@line 1279 "lpc.c"
    $2846 = $11; //@line 1279 "lpc.c"
    $2847 = $12; //@line 1279 "lpc.c"
    $2848 = (($2847) - 13)|0; //@line 1279 "lpc.c"
    $2849 = (($2846) + ($2848<<2)|0); //@line 1279 "lpc.c"
    $2850 = HEAP32[$2849>>2]|0; //@line 1279 "lpc.c"
    $2851 = ($2850|0)<(0); //@line 1279 "lpc.c"
    $2852 = $2851 << 31 >> 31; //@line 1279 "lpc.c"
    $2853 = (___muldi3(($2843|0),($2845|0),($2850|0),($2852|0))|0); //@line 1279 "lpc.c"
    $2854 = tempRet0; //@line 1279 "lpc.c"
    $2855 = $13; //@line 1279 "lpc.c"
    $2856 = $2855; //@line 1279 "lpc.c"
    $2857 = HEAP32[$2856>>2]|0; //@line 1279 "lpc.c"
    $2858 = (($2855) + 4)|0; //@line 1279 "lpc.c"
    $2859 = $2858; //@line 1279 "lpc.c"
    $2860 = HEAP32[$2859>>2]|0; //@line 1279 "lpc.c"
    $2861 = (_i64Add(($2857|0),($2860|0),($2853|0),($2854|0))|0); //@line 1279 "lpc.c"
    $2862 = tempRet0; //@line 1279 "lpc.c"
    $2863 = $13; //@line 1279 "lpc.c"
    $2864 = $2863; //@line 1279 "lpc.c"
    HEAP32[$2864>>2] = $2861; //@line 1279 "lpc.c"
    $2865 = (($2863) + 4)|0; //@line 1279 "lpc.c"
    $2866 = $2865; //@line 1279 "lpc.c"
    HEAP32[$2866>>2] = $2862; //@line 1279 "lpc.c"
    $2867 = $8; //@line 1280 "lpc.c"
    $2868 = ((($2867)) + 44|0); //@line 1280 "lpc.c"
    $2869 = HEAP32[$2868>>2]|0; //@line 1280 "lpc.c"
    $2870 = ($2869|0)<(0); //@line 1280 "lpc.c"
    $2871 = $2870 << 31 >> 31; //@line 1280 "lpc.c"
    $2872 = $11; //@line 1280 "lpc.c"
    $2873 = $12; //@line 1280 "lpc.c"
    $2874 = (($2873) - 12)|0; //@line 1280 "lpc.c"
    $2875 = (($2872) + ($2874<<2)|0); //@line 1280 "lpc.c"
    $2876 = HEAP32[$2875>>2]|0; //@line 1280 "lpc.c"
    $2877 = ($2876|0)<(0); //@line 1280 "lpc.c"
    $2878 = $2877 << 31 >> 31; //@line 1280 "lpc.c"
    $2879 = (___muldi3(($2869|0),($2871|0),($2876|0),($2878|0))|0); //@line 1280 "lpc.c"
    $2880 = tempRet0; //@line 1280 "lpc.c"
    $2881 = $13; //@line 1280 "lpc.c"
    $2882 = $2881; //@line 1280 "lpc.c"
    $2883 = HEAP32[$2882>>2]|0; //@line 1280 "lpc.c"
    $2884 = (($2881) + 4)|0; //@line 1280 "lpc.c"
    $2885 = $2884; //@line 1280 "lpc.c"
    $2886 = HEAP32[$2885>>2]|0; //@line 1280 "lpc.c"
    $2887 = (_i64Add(($2883|0),($2886|0),($2879|0),($2880|0))|0); //@line 1280 "lpc.c"
    $2888 = tempRet0; //@line 1280 "lpc.c"
    $2889 = $13; //@line 1280 "lpc.c"
    $2890 = $2889; //@line 1280 "lpc.c"
    HEAP32[$2890>>2] = $2887; //@line 1280 "lpc.c"
    $2891 = (($2889) + 4)|0; //@line 1280 "lpc.c"
    $2892 = $2891; //@line 1280 "lpc.c"
    HEAP32[$2892>>2] = $2888; //@line 1280 "lpc.c"
    $2893 = $8; //@line 1281 "lpc.c"
    $2894 = ((($2893)) + 40|0); //@line 1281 "lpc.c"
    $2895 = HEAP32[$2894>>2]|0; //@line 1281 "lpc.c"
    $2896 = ($2895|0)<(0); //@line 1281 "lpc.c"
    $2897 = $2896 << 31 >> 31; //@line 1281 "lpc.c"
    $2898 = $11; //@line 1281 "lpc.c"
    $2899 = $12; //@line 1281 "lpc.c"
    $2900 = (($2899) - 11)|0; //@line 1281 "lpc.c"
    $2901 = (($2898) + ($2900<<2)|0); //@line 1281 "lpc.c"
    $2902 = HEAP32[$2901>>2]|0; //@line 1281 "lpc.c"
    $2903 = ($2902|0)<(0); //@line 1281 "lpc.c"
    $2904 = $2903 << 31 >> 31; //@line 1281 "lpc.c"
    $2905 = (___muldi3(($2895|0),($2897|0),($2902|0),($2904|0))|0); //@line 1281 "lpc.c"
    $2906 = tempRet0; //@line 1281 "lpc.c"
    $2907 = $13; //@line 1281 "lpc.c"
    $2908 = $2907; //@line 1281 "lpc.c"
    $2909 = HEAP32[$2908>>2]|0; //@line 1281 "lpc.c"
    $2910 = (($2907) + 4)|0; //@line 1281 "lpc.c"
    $2911 = $2910; //@line 1281 "lpc.c"
    $2912 = HEAP32[$2911>>2]|0; //@line 1281 "lpc.c"
    $2913 = (_i64Add(($2909|0),($2912|0),($2905|0),($2906|0))|0); //@line 1281 "lpc.c"
    $2914 = tempRet0; //@line 1281 "lpc.c"
    $2915 = $13; //@line 1281 "lpc.c"
    $2916 = $2915; //@line 1281 "lpc.c"
    HEAP32[$2916>>2] = $2913; //@line 1281 "lpc.c"
    $2917 = (($2915) + 4)|0; //@line 1281 "lpc.c"
    $2918 = $2917; //@line 1281 "lpc.c"
    HEAP32[$2918>>2] = $2914; //@line 1281 "lpc.c"
    $2919 = $8; //@line 1282 "lpc.c"
    $2920 = ((($2919)) + 36|0); //@line 1282 "lpc.c"
    $2921 = HEAP32[$2920>>2]|0; //@line 1282 "lpc.c"
    $2922 = ($2921|0)<(0); //@line 1282 "lpc.c"
    $2923 = $2922 << 31 >> 31; //@line 1282 "lpc.c"
    $2924 = $11; //@line 1282 "lpc.c"
    $2925 = $12; //@line 1282 "lpc.c"
    $2926 = (($2925) - 10)|0; //@line 1282 "lpc.c"
    $2927 = (($2924) + ($2926<<2)|0); //@line 1282 "lpc.c"
    $2928 = HEAP32[$2927>>2]|0; //@line 1282 "lpc.c"
    $2929 = ($2928|0)<(0); //@line 1282 "lpc.c"
    $2930 = $2929 << 31 >> 31; //@line 1282 "lpc.c"
    $2931 = (___muldi3(($2921|0),($2923|0),($2928|0),($2930|0))|0); //@line 1282 "lpc.c"
    $2932 = tempRet0; //@line 1282 "lpc.c"
    $2933 = $13; //@line 1282 "lpc.c"
    $2934 = $2933; //@line 1282 "lpc.c"
    $2935 = HEAP32[$2934>>2]|0; //@line 1282 "lpc.c"
    $2936 = (($2933) + 4)|0; //@line 1282 "lpc.c"
    $2937 = $2936; //@line 1282 "lpc.c"
    $2938 = HEAP32[$2937>>2]|0; //@line 1282 "lpc.c"
    $2939 = (_i64Add(($2935|0),($2938|0),($2931|0),($2932|0))|0); //@line 1282 "lpc.c"
    $2940 = tempRet0; //@line 1282 "lpc.c"
    $2941 = $13; //@line 1282 "lpc.c"
    $2942 = $2941; //@line 1282 "lpc.c"
    HEAP32[$2942>>2] = $2939; //@line 1282 "lpc.c"
    $2943 = (($2941) + 4)|0; //@line 1282 "lpc.c"
    $2944 = $2943; //@line 1282 "lpc.c"
    HEAP32[$2944>>2] = $2940; //@line 1282 "lpc.c"
    $2945 = $8; //@line 1283 "lpc.c"
    $2946 = ((($2945)) + 32|0); //@line 1283 "lpc.c"
    $2947 = HEAP32[$2946>>2]|0; //@line 1283 "lpc.c"
    $2948 = ($2947|0)<(0); //@line 1283 "lpc.c"
    $2949 = $2948 << 31 >> 31; //@line 1283 "lpc.c"
    $2950 = $11; //@line 1283 "lpc.c"
    $2951 = $12; //@line 1283 "lpc.c"
    $2952 = (($2951) - 9)|0; //@line 1283 "lpc.c"
    $2953 = (($2950) + ($2952<<2)|0); //@line 1283 "lpc.c"
    $2954 = HEAP32[$2953>>2]|0; //@line 1283 "lpc.c"
    $2955 = ($2954|0)<(0); //@line 1283 "lpc.c"
    $2956 = $2955 << 31 >> 31; //@line 1283 "lpc.c"
    $2957 = (___muldi3(($2947|0),($2949|0),($2954|0),($2956|0))|0); //@line 1283 "lpc.c"
    $2958 = tempRet0; //@line 1283 "lpc.c"
    $2959 = $13; //@line 1283 "lpc.c"
    $2960 = $2959; //@line 1283 "lpc.c"
    $2961 = HEAP32[$2960>>2]|0; //@line 1283 "lpc.c"
    $2962 = (($2959) + 4)|0; //@line 1283 "lpc.c"
    $2963 = $2962; //@line 1283 "lpc.c"
    $2964 = HEAP32[$2963>>2]|0; //@line 1283 "lpc.c"
    $2965 = (_i64Add(($2961|0),($2964|0),($2957|0),($2958|0))|0); //@line 1283 "lpc.c"
    $2966 = tempRet0; //@line 1283 "lpc.c"
    $2967 = $13; //@line 1283 "lpc.c"
    $2968 = $2967; //@line 1283 "lpc.c"
    HEAP32[$2968>>2] = $2965; //@line 1283 "lpc.c"
    $2969 = (($2967) + 4)|0; //@line 1283 "lpc.c"
    $2970 = $2969; //@line 1283 "lpc.c"
    HEAP32[$2970>>2] = $2966; //@line 1283 "lpc.c"
    $2971 = $8; //@line 1284 "lpc.c"
    $2972 = ((($2971)) + 28|0); //@line 1284 "lpc.c"
    $2973 = HEAP32[$2972>>2]|0; //@line 1284 "lpc.c"
    $2974 = ($2973|0)<(0); //@line 1284 "lpc.c"
    $2975 = $2974 << 31 >> 31; //@line 1284 "lpc.c"
    $2976 = $11; //@line 1284 "lpc.c"
    $2977 = $12; //@line 1284 "lpc.c"
    $2978 = (($2977) - 8)|0; //@line 1284 "lpc.c"
    $2979 = (($2976) + ($2978<<2)|0); //@line 1284 "lpc.c"
    $2980 = HEAP32[$2979>>2]|0; //@line 1284 "lpc.c"
    $2981 = ($2980|0)<(0); //@line 1284 "lpc.c"
    $2982 = $2981 << 31 >> 31; //@line 1284 "lpc.c"
    $2983 = (___muldi3(($2973|0),($2975|0),($2980|0),($2982|0))|0); //@line 1284 "lpc.c"
    $2984 = tempRet0; //@line 1284 "lpc.c"
    $2985 = $13; //@line 1284 "lpc.c"
    $2986 = $2985; //@line 1284 "lpc.c"
    $2987 = HEAP32[$2986>>2]|0; //@line 1284 "lpc.c"
    $2988 = (($2985) + 4)|0; //@line 1284 "lpc.c"
    $2989 = $2988; //@line 1284 "lpc.c"
    $2990 = HEAP32[$2989>>2]|0; //@line 1284 "lpc.c"
    $2991 = (_i64Add(($2987|0),($2990|0),($2983|0),($2984|0))|0); //@line 1284 "lpc.c"
    $2992 = tempRet0; //@line 1284 "lpc.c"
    $2993 = $13; //@line 1284 "lpc.c"
    $2994 = $2993; //@line 1284 "lpc.c"
    HEAP32[$2994>>2] = $2991; //@line 1284 "lpc.c"
    $2995 = (($2993) + 4)|0; //@line 1284 "lpc.c"
    $2996 = $2995; //@line 1284 "lpc.c"
    HEAP32[$2996>>2] = $2992; //@line 1284 "lpc.c"
    $2997 = $8; //@line 1285 "lpc.c"
    $2998 = ((($2997)) + 24|0); //@line 1285 "lpc.c"
    $2999 = HEAP32[$2998>>2]|0; //@line 1285 "lpc.c"
    $3000 = ($2999|0)<(0); //@line 1285 "lpc.c"
    $3001 = $3000 << 31 >> 31; //@line 1285 "lpc.c"
    $3002 = $11; //@line 1285 "lpc.c"
    $3003 = $12; //@line 1285 "lpc.c"
    $3004 = (($3003) - 7)|0; //@line 1285 "lpc.c"
    $3005 = (($3002) + ($3004<<2)|0); //@line 1285 "lpc.c"
    $3006 = HEAP32[$3005>>2]|0; //@line 1285 "lpc.c"
    $3007 = ($3006|0)<(0); //@line 1285 "lpc.c"
    $3008 = $3007 << 31 >> 31; //@line 1285 "lpc.c"
    $3009 = (___muldi3(($2999|0),($3001|0),($3006|0),($3008|0))|0); //@line 1285 "lpc.c"
    $3010 = tempRet0; //@line 1285 "lpc.c"
    $3011 = $13; //@line 1285 "lpc.c"
    $3012 = $3011; //@line 1285 "lpc.c"
    $3013 = HEAP32[$3012>>2]|0; //@line 1285 "lpc.c"
    $3014 = (($3011) + 4)|0; //@line 1285 "lpc.c"
    $3015 = $3014; //@line 1285 "lpc.c"
    $3016 = HEAP32[$3015>>2]|0; //@line 1285 "lpc.c"
    $3017 = (_i64Add(($3013|0),($3016|0),($3009|0),($3010|0))|0); //@line 1285 "lpc.c"
    $3018 = tempRet0; //@line 1285 "lpc.c"
    $3019 = $13; //@line 1285 "lpc.c"
    $3020 = $3019; //@line 1285 "lpc.c"
    HEAP32[$3020>>2] = $3017; //@line 1285 "lpc.c"
    $3021 = (($3019) + 4)|0; //@line 1285 "lpc.c"
    $3022 = $3021; //@line 1285 "lpc.c"
    HEAP32[$3022>>2] = $3018; //@line 1285 "lpc.c"
    $3023 = $8; //@line 1286 "lpc.c"
    $3024 = ((($3023)) + 20|0); //@line 1286 "lpc.c"
    $3025 = HEAP32[$3024>>2]|0; //@line 1286 "lpc.c"
    $3026 = ($3025|0)<(0); //@line 1286 "lpc.c"
    $3027 = $3026 << 31 >> 31; //@line 1286 "lpc.c"
    $3028 = $11; //@line 1286 "lpc.c"
    $3029 = $12; //@line 1286 "lpc.c"
    $3030 = (($3029) - 6)|0; //@line 1286 "lpc.c"
    $3031 = (($3028) + ($3030<<2)|0); //@line 1286 "lpc.c"
    $3032 = HEAP32[$3031>>2]|0; //@line 1286 "lpc.c"
    $3033 = ($3032|0)<(0); //@line 1286 "lpc.c"
    $3034 = $3033 << 31 >> 31; //@line 1286 "lpc.c"
    $3035 = (___muldi3(($3025|0),($3027|0),($3032|0),($3034|0))|0); //@line 1286 "lpc.c"
    $3036 = tempRet0; //@line 1286 "lpc.c"
    $3037 = $13; //@line 1286 "lpc.c"
    $3038 = $3037; //@line 1286 "lpc.c"
    $3039 = HEAP32[$3038>>2]|0; //@line 1286 "lpc.c"
    $3040 = (($3037) + 4)|0; //@line 1286 "lpc.c"
    $3041 = $3040; //@line 1286 "lpc.c"
    $3042 = HEAP32[$3041>>2]|0; //@line 1286 "lpc.c"
    $3043 = (_i64Add(($3039|0),($3042|0),($3035|0),($3036|0))|0); //@line 1286 "lpc.c"
    $3044 = tempRet0; //@line 1286 "lpc.c"
    $3045 = $13; //@line 1286 "lpc.c"
    $3046 = $3045; //@line 1286 "lpc.c"
    HEAP32[$3046>>2] = $3043; //@line 1286 "lpc.c"
    $3047 = (($3045) + 4)|0; //@line 1286 "lpc.c"
    $3048 = $3047; //@line 1286 "lpc.c"
    HEAP32[$3048>>2] = $3044; //@line 1286 "lpc.c"
    $3049 = $8; //@line 1287 "lpc.c"
    $3050 = ((($3049)) + 16|0); //@line 1287 "lpc.c"
    $3051 = HEAP32[$3050>>2]|0; //@line 1287 "lpc.c"
    $3052 = ($3051|0)<(0); //@line 1287 "lpc.c"
    $3053 = $3052 << 31 >> 31; //@line 1287 "lpc.c"
    $3054 = $11; //@line 1287 "lpc.c"
    $3055 = $12; //@line 1287 "lpc.c"
    $3056 = (($3055) - 5)|0; //@line 1287 "lpc.c"
    $3057 = (($3054) + ($3056<<2)|0); //@line 1287 "lpc.c"
    $3058 = HEAP32[$3057>>2]|0; //@line 1287 "lpc.c"
    $3059 = ($3058|0)<(0); //@line 1287 "lpc.c"
    $3060 = $3059 << 31 >> 31; //@line 1287 "lpc.c"
    $3061 = (___muldi3(($3051|0),($3053|0),($3058|0),($3060|0))|0); //@line 1287 "lpc.c"
    $3062 = tempRet0; //@line 1287 "lpc.c"
    $3063 = $13; //@line 1287 "lpc.c"
    $3064 = $3063; //@line 1287 "lpc.c"
    $3065 = HEAP32[$3064>>2]|0; //@line 1287 "lpc.c"
    $3066 = (($3063) + 4)|0; //@line 1287 "lpc.c"
    $3067 = $3066; //@line 1287 "lpc.c"
    $3068 = HEAP32[$3067>>2]|0; //@line 1287 "lpc.c"
    $3069 = (_i64Add(($3065|0),($3068|0),($3061|0),($3062|0))|0); //@line 1287 "lpc.c"
    $3070 = tempRet0; //@line 1287 "lpc.c"
    $3071 = $13; //@line 1287 "lpc.c"
    $3072 = $3071; //@line 1287 "lpc.c"
    HEAP32[$3072>>2] = $3069; //@line 1287 "lpc.c"
    $3073 = (($3071) + 4)|0; //@line 1287 "lpc.c"
    $3074 = $3073; //@line 1287 "lpc.c"
    HEAP32[$3074>>2] = $3070; //@line 1287 "lpc.c"
    $3075 = $8; //@line 1288 "lpc.c"
    $3076 = ((($3075)) + 12|0); //@line 1288 "lpc.c"
    $3077 = HEAP32[$3076>>2]|0; //@line 1288 "lpc.c"
    $3078 = ($3077|0)<(0); //@line 1288 "lpc.c"
    $3079 = $3078 << 31 >> 31; //@line 1288 "lpc.c"
    $3080 = $11; //@line 1288 "lpc.c"
    $3081 = $12; //@line 1288 "lpc.c"
    $3082 = (($3081) - 4)|0; //@line 1288 "lpc.c"
    $3083 = (($3080) + ($3082<<2)|0); //@line 1288 "lpc.c"
    $3084 = HEAP32[$3083>>2]|0; //@line 1288 "lpc.c"
    $3085 = ($3084|0)<(0); //@line 1288 "lpc.c"
    $3086 = $3085 << 31 >> 31; //@line 1288 "lpc.c"
    $3087 = (___muldi3(($3077|0),($3079|0),($3084|0),($3086|0))|0); //@line 1288 "lpc.c"
    $3088 = tempRet0; //@line 1288 "lpc.c"
    $3089 = $13; //@line 1288 "lpc.c"
    $3090 = $3089; //@line 1288 "lpc.c"
    $3091 = HEAP32[$3090>>2]|0; //@line 1288 "lpc.c"
    $3092 = (($3089) + 4)|0; //@line 1288 "lpc.c"
    $3093 = $3092; //@line 1288 "lpc.c"
    $3094 = HEAP32[$3093>>2]|0; //@line 1288 "lpc.c"
    $3095 = (_i64Add(($3091|0),($3094|0),($3087|0),($3088|0))|0); //@line 1288 "lpc.c"
    $3096 = tempRet0; //@line 1288 "lpc.c"
    $3097 = $13; //@line 1288 "lpc.c"
    $3098 = $3097; //@line 1288 "lpc.c"
    HEAP32[$3098>>2] = $3095; //@line 1288 "lpc.c"
    $3099 = (($3097) + 4)|0; //@line 1288 "lpc.c"
    $3100 = $3099; //@line 1288 "lpc.c"
    HEAP32[$3100>>2] = $3096; //@line 1288 "lpc.c"
    $3101 = $8; //@line 1289 "lpc.c"
    $3102 = ((($3101)) + 8|0); //@line 1289 "lpc.c"
    $3103 = HEAP32[$3102>>2]|0; //@line 1289 "lpc.c"
    $3104 = ($3103|0)<(0); //@line 1289 "lpc.c"
    $3105 = $3104 << 31 >> 31; //@line 1289 "lpc.c"
    $3106 = $11; //@line 1289 "lpc.c"
    $3107 = $12; //@line 1289 "lpc.c"
    $3108 = (($3107) - 3)|0; //@line 1289 "lpc.c"
    $3109 = (($3106) + ($3108<<2)|0); //@line 1289 "lpc.c"
    $3110 = HEAP32[$3109>>2]|0; //@line 1289 "lpc.c"
    $3111 = ($3110|0)<(0); //@line 1289 "lpc.c"
    $3112 = $3111 << 31 >> 31; //@line 1289 "lpc.c"
    $3113 = (___muldi3(($3103|0),($3105|0),($3110|0),($3112|0))|0); //@line 1289 "lpc.c"
    $3114 = tempRet0; //@line 1289 "lpc.c"
    $3115 = $13; //@line 1289 "lpc.c"
    $3116 = $3115; //@line 1289 "lpc.c"
    $3117 = HEAP32[$3116>>2]|0; //@line 1289 "lpc.c"
    $3118 = (($3115) + 4)|0; //@line 1289 "lpc.c"
    $3119 = $3118; //@line 1289 "lpc.c"
    $3120 = HEAP32[$3119>>2]|0; //@line 1289 "lpc.c"
    $3121 = (_i64Add(($3117|0),($3120|0),($3113|0),($3114|0))|0); //@line 1289 "lpc.c"
    $3122 = tempRet0; //@line 1289 "lpc.c"
    $3123 = $13; //@line 1289 "lpc.c"
    $3124 = $3123; //@line 1289 "lpc.c"
    HEAP32[$3124>>2] = $3121; //@line 1289 "lpc.c"
    $3125 = (($3123) + 4)|0; //@line 1289 "lpc.c"
    $3126 = $3125; //@line 1289 "lpc.c"
    HEAP32[$3126>>2] = $3122; //@line 1289 "lpc.c"
    $3127 = $8; //@line 1290 "lpc.c"
    $3128 = ((($3127)) + 4|0); //@line 1290 "lpc.c"
    $3129 = HEAP32[$3128>>2]|0; //@line 1290 "lpc.c"
    $3130 = ($3129|0)<(0); //@line 1290 "lpc.c"
    $3131 = $3130 << 31 >> 31; //@line 1290 "lpc.c"
    $3132 = $11; //@line 1290 "lpc.c"
    $3133 = $12; //@line 1290 "lpc.c"
    $3134 = (($3133) - 2)|0; //@line 1290 "lpc.c"
    $3135 = (($3132) + ($3134<<2)|0); //@line 1290 "lpc.c"
    $3136 = HEAP32[$3135>>2]|0; //@line 1290 "lpc.c"
    $3137 = ($3136|0)<(0); //@line 1290 "lpc.c"
    $3138 = $3137 << 31 >> 31; //@line 1290 "lpc.c"
    $3139 = (___muldi3(($3129|0),($3131|0),($3136|0),($3138|0))|0); //@line 1290 "lpc.c"
    $3140 = tempRet0; //@line 1290 "lpc.c"
    $3141 = $13; //@line 1290 "lpc.c"
    $3142 = $3141; //@line 1290 "lpc.c"
    $3143 = HEAP32[$3142>>2]|0; //@line 1290 "lpc.c"
    $3144 = (($3141) + 4)|0; //@line 1290 "lpc.c"
    $3145 = $3144; //@line 1290 "lpc.c"
    $3146 = HEAP32[$3145>>2]|0; //@line 1290 "lpc.c"
    $3147 = (_i64Add(($3143|0),($3146|0),($3139|0),($3140|0))|0); //@line 1290 "lpc.c"
    $3148 = tempRet0; //@line 1290 "lpc.c"
    $3149 = $13; //@line 1290 "lpc.c"
    $3150 = $3149; //@line 1290 "lpc.c"
    HEAP32[$3150>>2] = $3147; //@line 1290 "lpc.c"
    $3151 = (($3149) + 4)|0; //@line 1290 "lpc.c"
    $3152 = $3151; //@line 1290 "lpc.c"
    HEAP32[$3152>>2] = $3148; //@line 1290 "lpc.c"
    $3153 = $8; //@line 1291 "lpc.c"
    $3154 = HEAP32[$3153>>2]|0; //@line 1291 "lpc.c"
    $3155 = ($3154|0)<(0); //@line 1291 "lpc.c"
    $3156 = $3155 << 31 >> 31; //@line 1291 "lpc.c"
    $3157 = $11; //@line 1291 "lpc.c"
    $3158 = $12; //@line 1291 "lpc.c"
    $3159 = (($3158) - 1)|0; //@line 1291 "lpc.c"
    $3160 = (($3157) + ($3159<<2)|0); //@line 1291 "lpc.c"
    $3161 = HEAP32[$3160>>2]|0; //@line 1291 "lpc.c"
    $3162 = ($3161|0)<(0); //@line 1291 "lpc.c"
    $3163 = $3162 << 31 >> 31; //@line 1291 "lpc.c"
    $3164 = (___muldi3(($3154|0),($3156|0),($3161|0),($3163|0))|0); //@line 1291 "lpc.c"
    $3165 = tempRet0; //@line 1291 "lpc.c"
    $3166 = $13; //@line 1291 "lpc.c"
    $3167 = $3166; //@line 1291 "lpc.c"
    $3168 = HEAP32[$3167>>2]|0; //@line 1291 "lpc.c"
    $3169 = (($3166) + 4)|0; //@line 1291 "lpc.c"
    $3170 = $3169; //@line 1291 "lpc.c"
    $3171 = HEAP32[$3170>>2]|0; //@line 1291 "lpc.c"
    $3172 = (_i64Add(($3168|0),($3171|0),($3164|0),($3165|0))|0); //@line 1291 "lpc.c"
    $3173 = tempRet0; //@line 1291 "lpc.c"
    $3174 = $13; //@line 1291 "lpc.c"
    $3175 = $3174; //@line 1291 "lpc.c"
    HEAP32[$3175>>2] = $3172; //@line 1291 "lpc.c"
    $3176 = (($3174) + 4)|0; //@line 1291 "lpc.c"
    $3177 = $3176; //@line 1291 "lpc.c"
    HEAP32[$3177>>2] = $3173; //@line 1291 "lpc.c"
   }
   $3178 = $6; //@line 1293 "lpc.c"
   $3179 = $12; //@line 1293 "lpc.c"
   $3180 = (($3178) + ($3179<<2)|0); //@line 1293 "lpc.c"
   $3181 = HEAP32[$3180>>2]|0; //@line 1293 "lpc.c"
   $3182 = $13; //@line 1293 "lpc.c"
   $3183 = $3182; //@line 1293 "lpc.c"
   $3184 = HEAP32[$3183>>2]|0; //@line 1293 "lpc.c"
   $3185 = (($3182) + 4)|0; //@line 1293 "lpc.c"
   $3186 = $3185; //@line 1293 "lpc.c"
   $3187 = HEAP32[$3186>>2]|0; //@line 1293 "lpc.c"
   $3188 = $10; //@line 1293 "lpc.c"
   $3189 = (_bitshift64Ashr(($3184|0),($3187|0),($3188|0))|0); //@line 1293 "lpc.c"
   $3190 = tempRet0; //@line 1293 "lpc.c"
   $3191 = (($3181) + ($3189))|0; //@line 1293 "lpc.c"
   $3192 = $11; //@line 1293 "lpc.c"
   $3193 = $12; //@line 1293 "lpc.c"
   $3194 = (($3192) + ($3193<<2)|0); //@line 1293 "lpc.c"
   HEAP32[$3194>>2] = $3191; //@line 1293 "lpc.c"
   $3195 = $12; //@line 1257 "lpc.c"
   $3196 = (($3195) + 1)|0; //@line 1257 "lpc.c"
   $12 = $3196; //@line 1257 "lpc.c"
  }
  STACKTOP = sp;return; //@line 1296 "lpc.c"
 }
 $16 = $9; //@line 1090 "lpc.c"
 $17 = ($16>>>0)>(8); //@line 1090 "lpc.c"
 $18 = $9;
 if ($17) {
  $19 = ($18>>>0)>(10); //@line 1091 "lpc.c"
  $20 = $9;
  if ($19) {
   $21 = ($20|0)==(12); //@line 1092 "lpc.c"
   $12 = 0;
   if ($21) {
    while(1) {
     $22 = $12; //@line 1093 "lpc.c"
     $23 = $7; //@line 1093 "lpc.c"
     $24 = ($22|0)<($23|0); //@line 1093 "lpc.c"
     if (!($24)) {
      break;
     }
     $25 = $13; //@line 1094 "lpc.c"
     $26 = $25; //@line 1094 "lpc.c"
     HEAP32[$26>>2] = 0; //@line 1094 "lpc.c"
     $27 = (($25) + 4)|0; //@line 1094 "lpc.c"
     $28 = $27; //@line 1094 "lpc.c"
     HEAP32[$28>>2] = 0; //@line 1094 "lpc.c"
     $29 = $8; //@line 1095 "lpc.c"
     $30 = ((($29)) + 44|0); //@line 1095 "lpc.c"
     $31 = HEAP32[$30>>2]|0; //@line 1095 "lpc.c"
     $32 = ($31|0)<(0); //@line 1095 "lpc.c"
     $33 = $32 << 31 >> 31; //@line 1095 "lpc.c"
     $34 = $11; //@line 1095 "lpc.c"
     $35 = $12; //@line 1095 "lpc.c"
     $36 = (($35) - 12)|0; //@line 1095 "lpc.c"
     $37 = (($34) + ($36<<2)|0); //@line 1095 "lpc.c"
     $38 = HEAP32[$37>>2]|0; //@line 1095 "lpc.c"
     $39 = ($38|0)<(0); //@line 1095 "lpc.c"
     $40 = $39 << 31 >> 31; //@line 1095 "lpc.c"
     $41 = (___muldi3(($31|0),($33|0),($38|0),($40|0))|0); //@line 1095 "lpc.c"
     $42 = tempRet0; //@line 1095 "lpc.c"
     $43 = $13; //@line 1095 "lpc.c"
     $44 = $43; //@line 1095 "lpc.c"
     $45 = HEAP32[$44>>2]|0; //@line 1095 "lpc.c"
     $46 = (($43) + 4)|0; //@line 1095 "lpc.c"
     $47 = $46; //@line 1095 "lpc.c"
     $48 = HEAP32[$47>>2]|0; //@line 1095 "lpc.c"
     $49 = (_i64Add(($45|0),($48|0),($41|0),($42|0))|0); //@line 1095 "lpc.c"
     $50 = tempRet0; //@line 1095 "lpc.c"
     $51 = $13; //@line 1095 "lpc.c"
     $52 = $51; //@line 1095 "lpc.c"
     HEAP32[$52>>2] = $49; //@line 1095 "lpc.c"
     $53 = (($51) + 4)|0; //@line 1095 "lpc.c"
     $54 = $53; //@line 1095 "lpc.c"
     HEAP32[$54>>2] = $50; //@line 1095 "lpc.c"
     $55 = $8; //@line 1096 "lpc.c"
     $56 = ((($55)) + 40|0); //@line 1096 "lpc.c"
     $57 = HEAP32[$56>>2]|0; //@line 1096 "lpc.c"
     $58 = ($57|0)<(0); //@line 1096 "lpc.c"
     $59 = $58 << 31 >> 31; //@line 1096 "lpc.c"
     $60 = $11; //@line 1096 "lpc.c"
     $61 = $12; //@line 1096 "lpc.c"
     $62 = (($61) - 11)|0; //@line 1096 "lpc.c"
     $63 = (($60) + ($62<<2)|0); //@line 1096 "lpc.c"
     $64 = HEAP32[$63>>2]|0; //@line 1096 "lpc.c"
     $65 = ($64|0)<(0); //@line 1096 "lpc.c"
     $66 = $65 << 31 >> 31; //@line 1096 "lpc.c"
     $67 = (___muldi3(($57|0),($59|0),($64|0),($66|0))|0); //@line 1096 "lpc.c"
     $68 = tempRet0; //@line 1096 "lpc.c"
     $69 = $13; //@line 1096 "lpc.c"
     $70 = $69; //@line 1096 "lpc.c"
     $71 = HEAP32[$70>>2]|0; //@line 1096 "lpc.c"
     $72 = (($69) + 4)|0; //@line 1096 "lpc.c"
     $73 = $72; //@line 1096 "lpc.c"
     $74 = HEAP32[$73>>2]|0; //@line 1096 "lpc.c"
     $75 = (_i64Add(($71|0),($74|0),($67|0),($68|0))|0); //@line 1096 "lpc.c"
     $76 = tempRet0; //@line 1096 "lpc.c"
     $77 = $13; //@line 1096 "lpc.c"
     $78 = $77; //@line 1096 "lpc.c"
     HEAP32[$78>>2] = $75; //@line 1096 "lpc.c"
     $79 = (($77) + 4)|0; //@line 1096 "lpc.c"
     $80 = $79; //@line 1096 "lpc.c"
     HEAP32[$80>>2] = $76; //@line 1096 "lpc.c"
     $81 = $8; //@line 1097 "lpc.c"
     $82 = ((($81)) + 36|0); //@line 1097 "lpc.c"
     $83 = HEAP32[$82>>2]|0; //@line 1097 "lpc.c"
     $84 = ($83|0)<(0); //@line 1097 "lpc.c"
     $85 = $84 << 31 >> 31; //@line 1097 "lpc.c"
     $86 = $11; //@line 1097 "lpc.c"
     $87 = $12; //@line 1097 "lpc.c"
     $88 = (($87) - 10)|0; //@line 1097 "lpc.c"
     $89 = (($86) + ($88<<2)|0); //@line 1097 "lpc.c"
     $90 = HEAP32[$89>>2]|0; //@line 1097 "lpc.c"
     $91 = ($90|0)<(0); //@line 1097 "lpc.c"
     $92 = $91 << 31 >> 31; //@line 1097 "lpc.c"
     $93 = (___muldi3(($83|0),($85|0),($90|0),($92|0))|0); //@line 1097 "lpc.c"
     $94 = tempRet0; //@line 1097 "lpc.c"
     $95 = $13; //@line 1097 "lpc.c"
     $96 = $95; //@line 1097 "lpc.c"
     $97 = HEAP32[$96>>2]|0; //@line 1097 "lpc.c"
     $98 = (($95) + 4)|0; //@line 1097 "lpc.c"
     $99 = $98; //@line 1097 "lpc.c"
     $100 = HEAP32[$99>>2]|0; //@line 1097 "lpc.c"
     $101 = (_i64Add(($97|0),($100|0),($93|0),($94|0))|0); //@line 1097 "lpc.c"
     $102 = tempRet0; //@line 1097 "lpc.c"
     $103 = $13; //@line 1097 "lpc.c"
     $104 = $103; //@line 1097 "lpc.c"
     HEAP32[$104>>2] = $101; //@line 1097 "lpc.c"
     $105 = (($103) + 4)|0; //@line 1097 "lpc.c"
     $106 = $105; //@line 1097 "lpc.c"
     HEAP32[$106>>2] = $102; //@line 1097 "lpc.c"
     $107 = $8; //@line 1098 "lpc.c"
     $108 = ((($107)) + 32|0); //@line 1098 "lpc.c"
     $109 = HEAP32[$108>>2]|0; //@line 1098 "lpc.c"
     $110 = ($109|0)<(0); //@line 1098 "lpc.c"
     $111 = $110 << 31 >> 31; //@line 1098 "lpc.c"
     $112 = $11; //@line 1098 "lpc.c"
     $113 = $12; //@line 1098 "lpc.c"
     $114 = (($113) - 9)|0; //@line 1098 "lpc.c"
     $115 = (($112) + ($114<<2)|0); //@line 1098 "lpc.c"
     $116 = HEAP32[$115>>2]|0; //@line 1098 "lpc.c"
     $117 = ($116|0)<(0); //@line 1098 "lpc.c"
     $118 = $117 << 31 >> 31; //@line 1098 "lpc.c"
     $119 = (___muldi3(($109|0),($111|0),($116|0),($118|0))|0); //@line 1098 "lpc.c"
     $120 = tempRet0; //@line 1098 "lpc.c"
     $121 = $13; //@line 1098 "lpc.c"
     $122 = $121; //@line 1098 "lpc.c"
     $123 = HEAP32[$122>>2]|0; //@line 1098 "lpc.c"
     $124 = (($121) + 4)|0; //@line 1098 "lpc.c"
     $125 = $124; //@line 1098 "lpc.c"
     $126 = HEAP32[$125>>2]|0; //@line 1098 "lpc.c"
     $127 = (_i64Add(($123|0),($126|0),($119|0),($120|0))|0); //@line 1098 "lpc.c"
     $128 = tempRet0; //@line 1098 "lpc.c"
     $129 = $13; //@line 1098 "lpc.c"
     $130 = $129; //@line 1098 "lpc.c"
     HEAP32[$130>>2] = $127; //@line 1098 "lpc.c"
     $131 = (($129) + 4)|0; //@line 1098 "lpc.c"
     $132 = $131; //@line 1098 "lpc.c"
     HEAP32[$132>>2] = $128; //@line 1098 "lpc.c"
     $133 = $8; //@line 1099 "lpc.c"
     $134 = ((($133)) + 28|0); //@line 1099 "lpc.c"
     $135 = HEAP32[$134>>2]|0; //@line 1099 "lpc.c"
     $136 = ($135|0)<(0); //@line 1099 "lpc.c"
     $137 = $136 << 31 >> 31; //@line 1099 "lpc.c"
     $138 = $11; //@line 1099 "lpc.c"
     $139 = $12; //@line 1099 "lpc.c"
     $140 = (($139) - 8)|0; //@line 1099 "lpc.c"
     $141 = (($138) + ($140<<2)|0); //@line 1099 "lpc.c"
     $142 = HEAP32[$141>>2]|0; //@line 1099 "lpc.c"
     $143 = ($142|0)<(0); //@line 1099 "lpc.c"
     $144 = $143 << 31 >> 31; //@line 1099 "lpc.c"
     $145 = (___muldi3(($135|0),($137|0),($142|0),($144|0))|0); //@line 1099 "lpc.c"
     $146 = tempRet0; //@line 1099 "lpc.c"
     $147 = $13; //@line 1099 "lpc.c"
     $148 = $147; //@line 1099 "lpc.c"
     $149 = HEAP32[$148>>2]|0; //@line 1099 "lpc.c"
     $150 = (($147) + 4)|0; //@line 1099 "lpc.c"
     $151 = $150; //@line 1099 "lpc.c"
     $152 = HEAP32[$151>>2]|0; //@line 1099 "lpc.c"
     $153 = (_i64Add(($149|0),($152|0),($145|0),($146|0))|0); //@line 1099 "lpc.c"
     $154 = tempRet0; //@line 1099 "lpc.c"
     $155 = $13; //@line 1099 "lpc.c"
     $156 = $155; //@line 1099 "lpc.c"
     HEAP32[$156>>2] = $153; //@line 1099 "lpc.c"
     $157 = (($155) + 4)|0; //@line 1099 "lpc.c"
     $158 = $157; //@line 1099 "lpc.c"
     HEAP32[$158>>2] = $154; //@line 1099 "lpc.c"
     $159 = $8; //@line 1100 "lpc.c"
     $160 = ((($159)) + 24|0); //@line 1100 "lpc.c"
     $161 = HEAP32[$160>>2]|0; //@line 1100 "lpc.c"
     $162 = ($161|0)<(0); //@line 1100 "lpc.c"
     $163 = $162 << 31 >> 31; //@line 1100 "lpc.c"
     $164 = $11; //@line 1100 "lpc.c"
     $165 = $12; //@line 1100 "lpc.c"
     $166 = (($165) - 7)|0; //@line 1100 "lpc.c"
     $167 = (($164) + ($166<<2)|0); //@line 1100 "lpc.c"
     $168 = HEAP32[$167>>2]|0; //@line 1100 "lpc.c"
     $169 = ($168|0)<(0); //@line 1100 "lpc.c"
     $170 = $169 << 31 >> 31; //@line 1100 "lpc.c"
     $171 = (___muldi3(($161|0),($163|0),($168|0),($170|0))|0); //@line 1100 "lpc.c"
     $172 = tempRet0; //@line 1100 "lpc.c"
     $173 = $13; //@line 1100 "lpc.c"
     $174 = $173; //@line 1100 "lpc.c"
     $175 = HEAP32[$174>>2]|0; //@line 1100 "lpc.c"
     $176 = (($173) + 4)|0; //@line 1100 "lpc.c"
     $177 = $176; //@line 1100 "lpc.c"
     $178 = HEAP32[$177>>2]|0; //@line 1100 "lpc.c"
     $179 = (_i64Add(($175|0),($178|0),($171|0),($172|0))|0); //@line 1100 "lpc.c"
     $180 = tempRet0; //@line 1100 "lpc.c"
     $181 = $13; //@line 1100 "lpc.c"
     $182 = $181; //@line 1100 "lpc.c"
     HEAP32[$182>>2] = $179; //@line 1100 "lpc.c"
     $183 = (($181) + 4)|0; //@line 1100 "lpc.c"
     $184 = $183; //@line 1100 "lpc.c"
     HEAP32[$184>>2] = $180; //@line 1100 "lpc.c"
     $185 = $8; //@line 1101 "lpc.c"
     $186 = ((($185)) + 20|0); //@line 1101 "lpc.c"
     $187 = HEAP32[$186>>2]|0; //@line 1101 "lpc.c"
     $188 = ($187|0)<(0); //@line 1101 "lpc.c"
     $189 = $188 << 31 >> 31; //@line 1101 "lpc.c"
     $190 = $11; //@line 1101 "lpc.c"
     $191 = $12; //@line 1101 "lpc.c"
     $192 = (($191) - 6)|0; //@line 1101 "lpc.c"
     $193 = (($190) + ($192<<2)|0); //@line 1101 "lpc.c"
     $194 = HEAP32[$193>>2]|0; //@line 1101 "lpc.c"
     $195 = ($194|0)<(0); //@line 1101 "lpc.c"
     $196 = $195 << 31 >> 31; //@line 1101 "lpc.c"
     $197 = (___muldi3(($187|0),($189|0),($194|0),($196|0))|0); //@line 1101 "lpc.c"
     $198 = tempRet0; //@line 1101 "lpc.c"
     $199 = $13; //@line 1101 "lpc.c"
     $200 = $199; //@line 1101 "lpc.c"
     $201 = HEAP32[$200>>2]|0; //@line 1101 "lpc.c"
     $202 = (($199) + 4)|0; //@line 1101 "lpc.c"
     $203 = $202; //@line 1101 "lpc.c"
     $204 = HEAP32[$203>>2]|0; //@line 1101 "lpc.c"
     $205 = (_i64Add(($201|0),($204|0),($197|0),($198|0))|0); //@line 1101 "lpc.c"
     $206 = tempRet0; //@line 1101 "lpc.c"
     $207 = $13; //@line 1101 "lpc.c"
     $208 = $207; //@line 1101 "lpc.c"
     HEAP32[$208>>2] = $205; //@line 1101 "lpc.c"
     $209 = (($207) + 4)|0; //@line 1101 "lpc.c"
     $210 = $209; //@line 1101 "lpc.c"
     HEAP32[$210>>2] = $206; //@line 1101 "lpc.c"
     $211 = $8; //@line 1102 "lpc.c"
     $212 = ((($211)) + 16|0); //@line 1102 "lpc.c"
     $213 = HEAP32[$212>>2]|0; //@line 1102 "lpc.c"
     $214 = ($213|0)<(0); //@line 1102 "lpc.c"
     $215 = $214 << 31 >> 31; //@line 1102 "lpc.c"
     $216 = $11; //@line 1102 "lpc.c"
     $217 = $12; //@line 1102 "lpc.c"
     $218 = (($217) - 5)|0; //@line 1102 "lpc.c"
     $219 = (($216) + ($218<<2)|0); //@line 1102 "lpc.c"
     $220 = HEAP32[$219>>2]|0; //@line 1102 "lpc.c"
     $221 = ($220|0)<(0); //@line 1102 "lpc.c"
     $222 = $221 << 31 >> 31; //@line 1102 "lpc.c"
     $223 = (___muldi3(($213|0),($215|0),($220|0),($222|0))|0); //@line 1102 "lpc.c"
     $224 = tempRet0; //@line 1102 "lpc.c"
     $225 = $13; //@line 1102 "lpc.c"
     $226 = $225; //@line 1102 "lpc.c"
     $227 = HEAP32[$226>>2]|0; //@line 1102 "lpc.c"
     $228 = (($225) + 4)|0; //@line 1102 "lpc.c"
     $229 = $228; //@line 1102 "lpc.c"
     $230 = HEAP32[$229>>2]|0; //@line 1102 "lpc.c"
     $231 = (_i64Add(($227|0),($230|0),($223|0),($224|0))|0); //@line 1102 "lpc.c"
     $232 = tempRet0; //@line 1102 "lpc.c"
     $233 = $13; //@line 1102 "lpc.c"
     $234 = $233; //@line 1102 "lpc.c"
     HEAP32[$234>>2] = $231; //@line 1102 "lpc.c"
     $235 = (($233) + 4)|0; //@line 1102 "lpc.c"
     $236 = $235; //@line 1102 "lpc.c"
     HEAP32[$236>>2] = $232; //@line 1102 "lpc.c"
     $237 = $8; //@line 1103 "lpc.c"
     $238 = ((($237)) + 12|0); //@line 1103 "lpc.c"
     $239 = HEAP32[$238>>2]|0; //@line 1103 "lpc.c"
     $240 = ($239|0)<(0); //@line 1103 "lpc.c"
     $241 = $240 << 31 >> 31; //@line 1103 "lpc.c"
     $242 = $11; //@line 1103 "lpc.c"
     $243 = $12; //@line 1103 "lpc.c"
     $244 = (($243) - 4)|0; //@line 1103 "lpc.c"
     $245 = (($242) + ($244<<2)|0); //@line 1103 "lpc.c"
     $246 = HEAP32[$245>>2]|0; //@line 1103 "lpc.c"
     $247 = ($246|0)<(0); //@line 1103 "lpc.c"
     $248 = $247 << 31 >> 31; //@line 1103 "lpc.c"
     $249 = (___muldi3(($239|0),($241|0),($246|0),($248|0))|0); //@line 1103 "lpc.c"
     $250 = tempRet0; //@line 1103 "lpc.c"
     $251 = $13; //@line 1103 "lpc.c"
     $252 = $251; //@line 1103 "lpc.c"
     $253 = HEAP32[$252>>2]|0; //@line 1103 "lpc.c"
     $254 = (($251) + 4)|0; //@line 1103 "lpc.c"
     $255 = $254; //@line 1103 "lpc.c"
     $256 = HEAP32[$255>>2]|0; //@line 1103 "lpc.c"
     $257 = (_i64Add(($253|0),($256|0),($249|0),($250|0))|0); //@line 1103 "lpc.c"
     $258 = tempRet0; //@line 1103 "lpc.c"
     $259 = $13; //@line 1103 "lpc.c"
     $260 = $259; //@line 1103 "lpc.c"
     HEAP32[$260>>2] = $257; //@line 1103 "lpc.c"
     $261 = (($259) + 4)|0; //@line 1103 "lpc.c"
     $262 = $261; //@line 1103 "lpc.c"
     HEAP32[$262>>2] = $258; //@line 1103 "lpc.c"
     $263 = $8; //@line 1104 "lpc.c"
     $264 = ((($263)) + 8|0); //@line 1104 "lpc.c"
     $265 = HEAP32[$264>>2]|0; //@line 1104 "lpc.c"
     $266 = ($265|0)<(0); //@line 1104 "lpc.c"
     $267 = $266 << 31 >> 31; //@line 1104 "lpc.c"
     $268 = $11; //@line 1104 "lpc.c"
     $269 = $12; //@line 1104 "lpc.c"
     $270 = (($269) - 3)|0; //@line 1104 "lpc.c"
     $271 = (($268) + ($270<<2)|0); //@line 1104 "lpc.c"
     $272 = HEAP32[$271>>2]|0; //@line 1104 "lpc.c"
     $273 = ($272|0)<(0); //@line 1104 "lpc.c"
     $274 = $273 << 31 >> 31; //@line 1104 "lpc.c"
     $275 = (___muldi3(($265|0),($267|0),($272|0),($274|0))|0); //@line 1104 "lpc.c"
     $276 = tempRet0; //@line 1104 "lpc.c"
     $277 = $13; //@line 1104 "lpc.c"
     $278 = $277; //@line 1104 "lpc.c"
     $279 = HEAP32[$278>>2]|0; //@line 1104 "lpc.c"
     $280 = (($277) + 4)|0; //@line 1104 "lpc.c"
     $281 = $280; //@line 1104 "lpc.c"
     $282 = HEAP32[$281>>2]|0; //@line 1104 "lpc.c"
     $283 = (_i64Add(($279|0),($282|0),($275|0),($276|0))|0); //@line 1104 "lpc.c"
     $284 = tempRet0; //@line 1104 "lpc.c"
     $285 = $13; //@line 1104 "lpc.c"
     $286 = $285; //@line 1104 "lpc.c"
     HEAP32[$286>>2] = $283; //@line 1104 "lpc.c"
     $287 = (($285) + 4)|0; //@line 1104 "lpc.c"
     $288 = $287; //@line 1104 "lpc.c"
     HEAP32[$288>>2] = $284; //@line 1104 "lpc.c"
     $289 = $8; //@line 1105 "lpc.c"
     $290 = ((($289)) + 4|0); //@line 1105 "lpc.c"
     $291 = HEAP32[$290>>2]|0; //@line 1105 "lpc.c"
     $292 = ($291|0)<(0); //@line 1105 "lpc.c"
     $293 = $292 << 31 >> 31; //@line 1105 "lpc.c"
     $294 = $11; //@line 1105 "lpc.c"
     $295 = $12; //@line 1105 "lpc.c"
     $296 = (($295) - 2)|0; //@line 1105 "lpc.c"
     $297 = (($294) + ($296<<2)|0); //@line 1105 "lpc.c"
     $298 = HEAP32[$297>>2]|0; //@line 1105 "lpc.c"
     $299 = ($298|0)<(0); //@line 1105 "lpc.c"
     $300 = $299 << 31 >> 31; //@line 1105 "lpc.c"
     $301 = (___muldi3(($291|0),($293|0),($298|0),($300|0))|0); //@line 1105 "lpc.c"
     $302 = tempRet0; //@line 1105 "lpc.c"
     $303 = $13; //@line 1105 "lpc.c"
     $304 = $303; //@line 1105 "lpc.c"
     $305 = HEAP32[$304>>2]|0; //@line 1105 "lpc.c"
     $306 = (($303) + 4)|0; //@line 1105 "lpc.c"
     $307 = $306; //@line 1105 "lpc.c"
     $308 = HEAP32[$307>>2]|0; //@line 1105 "lpc.c"
     $309 = (_i64Add(($305|0),($308|0),($301|0),($302|0))|0); //@line 1105 "lpc.c"
     $310 = tempRet0; //@line 1105 "lpc.c"
     $311 = $13; //@line 1105 "lpc.c"
     $312 = $311; //@line 1105 "lpc.c"
     HEAP32[$312>>2] = $309; //@line 1105 "lpc.c"
     $313 = (($311) + 4)|0; //@line 1105 "lpc.c"
     $314 = $313; //@line 1105 "lpc.c"
     HEAP32[$314>>2] = $310; //@line 1105 "lpc.c"
     $315 = $8; //@line 1106 "lpc.c"
     $316 = HEAP32[$315>>2]|0; //@line 1106 "lpc.c"
     $317 = ($316|0)<(0); //@line 1106 "lpc.c"
     $318 = $317 << 31 >> 31; //@line 1106 "lpc.c"
     $319 = $11; //@line 1106 "lpc.c"
     $320 = $12; //@line 1106 "lpc.c"
     $321 = (($320) - 1)|0; //@line 1106 "lpc.c"
     $322 = (($319) + ($321<<2)|0); //@line 1106 "lpc.c"
     $323 = HEAP32[$322>>2]|0; //@line 1106 "lpc.c"
     $324 = ($323|0)<(0); //@line 1106 "lpc.c"
     $325 = $324 << 31 >> 31; //@line 1106 "lpc.c"
     $326 = (___muldi3(($316|0),($318|0),($323|0),($325|0))|0); //@line 1106 "lpc.c"
     $327 = tempRet0; //@line 1106 "lpc.c"
     $328 = $13; //@line 1106 "lpc.c"
     $329 = $328; //@line 1106 "lpc.c"
     $330 = HEAP32[$329>>2]|0; //@line 1106 "lpc.c"
     $331 = (($328) + 4)|0; //@line 1106 "lpc.c"
     $332 = $331; //@line 1106 "lpc.c"
     $333 = HEAP32[$332>>2]|0; //@line 1106 "lpc.c"
     $334 = (_i64Add(($330|0),($333|0),($326|0),($327|0))|0); //@line 1106 "lpc.c"
     $335 = tempRet0; //@line 1106 "lpc.c"
     $336 = $13; //@line 1106 "lpc.c"
     $337 = $336; //@line 1106 "lpc.c"
     HEAP32[$337>>2] = $334; //@line 1106 "lpc.c"
     $338 = (($336) + 4)|0; //@line 1106 "lpc.c"
     $339 = $338; //@line 1106 "lpc.c"
     HEAP32[$339>>2] = $335; //@line 1106 "lpc.c"
     $340 = $6; //@line 1107 "lpc.c"
     $341 = $12; //@line 1107 "lpc.c"
     $342 = (($340) + ($341<<2)|0); //@line 1107 "lpc.c"
     $343 = HEAP32[$342>>2]|0; //@line 1107 "lpc.c"
     $344 = $13; //@line 1107 "lpc.c"
     $345 = $344; //@line 1107 "lpc.c"
     $346 = HEAP32[$345>>2]|0; //@line 1107 "lpc.c"
     $347 = (($344) + 4)|0; //@line 1107 "lpc.c"
     $348 = $347; //@line 1107 "lpc.c"
     $349 = HEAP32[$348>>2]|0; //@line 1107 "lpc.c"
     $350 = $10; //@line 1107 "lpc.c"
     $351 = (_bitshift64Ashr(($346|0),($349|0),($350|0))|0); //@line 1107 "lpc.c"
     $352 = tempRet0; //@line 1107 "lpc.c"
     $353 = (($343) + ($351))|0; //@line 1107 "lpc.c"
     $354 = $11; //@line 1107 "lpc.c"
     $355 = $12; //@line 1107 "lpc.c"
     $356 = (($354) + ($355<<2)|0); //@line 1107 "lpc.c"
     HEAP32[$356>>2] = $353; //@line 1107 "lpc.c"
     $357 = $12; //@line 1093 "lpc.c"
     $358 = (($357) + 1)|0; //@line 1093 "lpc.c"
     $12 = $358; //@line 1093 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $359 = $12; //@line 1111 "lpc.c"
     $360 = $7; //@line 1111 "lpc.c"
     $361 = ($359|0)<($360|0); //@line 1111 "lpc.c"
     if (!($361)) {
      break;
     }
     $362 = $13; //@line 1112 "lpc.c"
     $363 = $362; //@line 1112 "lpc.c"
     HEAP32[$363>>2] = 0; //@line 1112 "lpc.c"
     $364 = (($362) + 4)|0; //@line 1112 "lpc.c"
     $365 = $364; //@line 1112 "lpc.c"
     HEAP32[$365>>2] = 0; //@line 1112 "lpc.c"
     $366 = $8; //@line 1113 "lpc.c"
     $367 = ((($366)) + 40|0); //@line 1113 "lpc.c"
     $368 = HEAP32[$367>>2]|0; //@line 1113 "lpc.c"
     $369 = ($368|0)<(0); //@line 1113 "lpc.c"
     $370 = $369 << 31 >> 31; //@line 1113 "lpc.c"
     $371 = $11; //@line 1113 "lpc.c"
     $372 = $12; //@line 1113 "lpc.c"
     $373 = (($372) - 11)|0; //@line 1113 "lpc.c"
     $374 = (($371) + ($373<<2)|0); //@line 1113 "lpc.c"
     $375 = HEAP32[$374>>2]|0; //@line 1113 "lpc.c"
     $376 = ($375|0)<(0); //@line 1113 "lpc.c"
     $377 = $376 << 31 >> 31; //@line 1113 "lpc.c"
     $378 = (___muldi3(($368|0),($370|0),($375|0),($377|0))|0); //@line 1113 "lpc.c"
     $379 = tempRet0; //@line 1113 "lpc.c"
     $380 = $13; //@line 1113 "lpc.c"
     $381 = $380; //@line 1113 "lpc.c"
     $382 = HEAP32[$381>>2]|0; //@line 1113 "lpc.c"
     $383 = (($380) + 4)|0; //@line 1113 "lpc.c"
     $384 = $383; //@line 1113 "lpc.c"
     $385 = HEAP32[$384>>2]|0; //@line 1113 "lpc.c"
     $386 = (_i64Add(($382|0),($385|0),($378|0),($379|0))|0); //@line 1113 "lpc.c"
     $387 = tempRet0; //@line 1113 "lpc.c"
     $388 = $13; //@line 1113 "lpc.c"
     $389 = $388; //@line 1113 "lpc.c"
     HEAP32[$389>>2] = $386; //@line 1113 "lpc.c"
     $390 = (($388) + 4)|0; //@line 1113 "lpc.c"
     $391 = $390; //@line 1113 "lpc.c"
     HEAP32[$391>>2] = $387; //@line 1113 "lpc.c"
     $392 = $8; //@line 1114 "lpc.c"
     $393 = ((($392)) + 36|0); //@line 1114 "lpc.c"
     $394 = HEAP32[$393>>2]|0; //@line 1114 "lpc.c"
     $395 = ($394|0)<(0); //@line 1114 "lpc.c"
     $396 = $395 << 31 >> 31; //@line 1114 "lpc.c"
     $397 = $11; //@line 1114 "lpc.c"
     $398 = $12; //@line 1114 "lpc.c"
     $399 = (($398) - 10)|0; //@line 1114 "lpc.c"
     $400 = (($397) + ($399<<2)|0); //@line 1114 "lpc.c"
     $401 = HEAP32[$400>>2]|0; //@line 1114 "lpc.c"
     $402 = ($401|0)<(0); //@line 1114 "lpc.c"
     $403 = $402 << 31 >> 31; //@line 1114 "lpc.c"
     $404 = (___muldi3(($394|0),($396|0),($401|0),($403|0))|0); //@line 1114 "lpc.c"
     $405 = tempRet0; //@line 1114 "lpc.c"
     $406 = $13; //@line 1114 "lpc.c"
     $407 = $406; //@line 1114 "lpc.c"
     $408 = HEAP32[$407>>2]|0; //@line 1114 "lpc.c"
     $409 = (($406) + 4)|0; //@line 1114 "lpc.c"
     $410 = $409; //@line 1114 "lpc.c"
     $411 = HEAP32[$410>>2]|0; //@line 1114 "lpc.c"
     $412 = (_i64Add(($408|0),($411|0),($404|0),($405|0))|0); //@line 1114 "lpc.c"
     $413 = tempRet0; //@line 1114 "lpc.c"
     $414 = $13; //@line 1114 "lpc.c"
     $415 = $414; //@line 1114 "lpc.c"
     HEAP32[$415>>2] = $412; //@line 1114 "lpc.c"
     $416 = (($414) + 4)|0; //@line 1114 "lpc.c"
     $417 = $416; //@line 1114 "lpc.c"
     HEAP32[$417>>2] = $413; //@line 1114 "lpc.c"
     $418 = $8; //@line 1115 "lpc.c"
     $419 = ((($418)) + 32|0); //@line 1115 "lpc.c"
     $420 = HEAP32[$419>>2]|0; //@line 1115 "lpc.c"
     $421 = ($420|0)<(0); //@line 1115 "lpc.c"
     $422 = $421 << 31 >> 31; //@line 1115 "lpc.c"
     $423 = $11; //@line 1115 "lpc.c"
     $424 = $12; //@line 1115 "lpc.c"
     $425 = (($424) - 9)|0; //@line 1115 "lpc.c"
     $426 = (($423) + ($425<<2)|0); //@line 1115 "lpc.c"
     $427 = HEAP32[$426>>2]|0; //@line 1115 "lpc.c"
     $428 = ($427|0)<(0); //@line 1115 "lpc.c"
     $429 = $428 << 31 >> 31; //@line 1115 "lpc.c"
     $430 = (___muldi3(($420|0),($422|0),($427|0),($429|0))|0); //@line 1115 "lpc.c"
     $431 = tempRet0; //@line 1115 "lpc.c"
     $432 = $13; //@line 1115 "lpc.c"
     $433 = $432; //@line 1115 "lpc.c"
     $434 = HEAP32[$433>>2]|0; //@line 1115 "lpc.c"
     $435 = (($432) + 4)|0; //@line 1115 "lpc.c"
     $436 = $435; //@line 1115 "lpc.c"
     $437 = HEAP32[$436>>2]|0; //@line 1115 "lpc.c"
     $438 = (_i64Add(($434|0),($437|0),($430|0),($431|0))|0); //@line 1115 "lpc.c"
     $439 = tempRet0; //@line 1115 "lpc.c"
     $440 = $13; //@line 1115 "lpc.c"
     $441 = $440; //@line 1115 "lpc.c"
     HEAP32[$441>>2] = $438; //@line 1115 "lpc.c"
     $442 = (($440) + 4)|0; //@line 1115 "lpc.c"
     $443 = $442; //@line 1115 "lpc.c"
     HEAP32[$443>>2] = $439; //@line 1115 "lpc.c"
     $444 = $8; //@line 1116 "lpc.c"
     $445 = ((($444)) + 28|0); //@line 1116 "lpc.c"
     $446 = HEAP32[$445>>2]|0; //@line 1116 "lpc.c"
     $447 = ($446|0)<(0); //@line 1116 "lpc.c"
     $448 = $447 << 31 >> 31; //@line 1116 "lpc.c"
     $449 = $11; //@line 1116 "lpc.c"
     $450 = $12; //@line 1116 "lpc.c"
     $451 = (($450) - 8)|0; //@line 1116 "lpc.c"
     $452 = (($449) + ($451<<2)|0); //@line 1116 "lpc.c"
     $453 = HEAP32[$452>>2]|0; //@line 1116 "lpc.c"
     $454 = ($453|0)<(0); //@line 1116 "lpc.c"
     $455 = $454 << 31 >> 31; //@line 1116 "lpc.c"
     $456 = (___muldi3(($446|0),($448|0),($453|0),($455|0))|0); //@line 1116 "lpc.c"
     $457 = tempRet0; //@line 1116 "lpc.c"
     $458 = $13; //@line 1116 "lpc.c"
     $459 = $458; //@line 1116 "lpc.c"
     $460 = HEAP32[$459>>2]|0; //@line 1116 "lpc.c"
     $461 = (($458) + 4)|0; //@line 1116 "lpc.c"
     $462 = $461; //@line 1116 "lpc.c"
     $463 = HEAP32[$462>>2]|0; //@line 1116 "lpc.c"
     $464 = (_i64Add(($460|0),($463|0),($456|0),($457|0))|0); //@line 1116 "lpc.c"
     $465 = tempRet0; //@line 1116 "lpc.c"
     $466 = $13; //@line 1116 "lpc.c"
     $467 = $466; //@line 1116 "lpc.c"
     HEAP32[$467>>2] = $464; //@line 1116 "lpc.c"
     $468 = (($466) + 4)|0; //@line 1116 "lpc.c"
     $469 = $468; //@line 1116 "lpc.c"
     HEAP32[$469>>2] = $465; //@line 1116 "lpc.c"
     $470 = $8; //@line 1117 "lpc.c"
     $471 = ((($470)) + 24|0); //@line 1117 "lpc.c"
     $472 = HEAP32[$471>>2]|0; //@line 1117 "lpc.c"
     $473 = ($472|0)<(0); //@line 1117 "lpc.c"
     $474 = $473 << 31 >> 31; //@line 1117 "lpc.c"
     $475 = $11; //@line 1117 "lpc.c"
     $476 = $12; //@line 1117 "lpc.c"
     $477 = (($476) - 7)|0; //@line 1117 "lpc.c"
     $478 = (($475) + ($477<<2)|0); //@line 1117 "lpc.c"
     $479 = HEAP32[$478>>2]|0; //@line 1117 "lpc.c"
     $480 = ($479|0)<(0); //@line 1117 "lpc.c"
     $481 = $480 << 31 >> 31; //@line 1117 "lpc.c"
     $482 = (___muldi3(($472|0),($474|0),($479|0),($481|0))|0); //@line 1117 "lpc.c"
     $483 = tempRet0; //@line 1117 "lpc.c"
     $484 = $13; //@line 1117 "lpc.c"
     $485 = $484; //@line 1117 "lpc.c"
     $486 = HEAP32[$485>>2]|0; //@line 1117 "lpc.c"
     $487 = (($484) + 4)|0; //@line 1117 "lpc.c"
     $488 = $487; //@line 1117 "lpc.c"
     $489 = HEAP32[$488>>2]|0; //@line 1117 "lpc.c"
     $490 = (_i64Add(($486|0),($489|0),($482|0),($483|0))|0); //@line 1117 "lpc.c"
     $491 = tempRet0; //@line 1117 "lpc.c"
     $492 = $13; //@line 1117 "lpc.c"
     $493 = $492; //@line 1117 "lpc.c"
     HEAP32[$493>>2] = $490; //@line 1117 "lpc.c"
     $494 = (($492) + 4)|0; //@line 1117 "lpc.c"
     $495 = $494; //@line 1117 "lpc.c"
     HEAP32[$495>>2] = $491; //@line 1117 "lpc.c"
     $496 = $8; //@line 1118 "lpc.c"
     $497 = ((($496)) + 20|0); //@line 1118 "lpc.c"
     $498 = HEAP32[$497>>2]|0; //@line 1118 "lpc.c"
     $499 = ($498|0)<(0); //@line 1118 "lpc.c"
     $500 = $499 << 31 >> 31; //@line 1118 "lpc.c"
     $501 = $11; //@line 1118 "lpc.c"
     $502 = $12; //@line 1118 "lpc.c"
     $503 = (($502) - 6)|0; //@line 1118 "lpc.c"
     $504 = (($501) + ($503<<2)|0); //@line 1118 "lpc.c"
     $505 = HEAP32[$504>>2]|0; //@line 1118 "lpc.c"
     $506 = ($505|0)<(0); //@line 1118 "lpc.c"
     $507 = $506 << 31 >> 31; //@line 1118 "lpc.c"
     $508 = (___muldi3(($498|0),($500|0),($505|0),($507|0))|0); //@line 1118 "lpc.c"
     $509 = tempRet0; //@line 1118 "lpc.c"
     $510 = $13; //@line 1118 "lpc.c"
     $511 = $510; //@line 1118 "lpc.c"
     $512 = HEAP32[$511>>2]|0; //@line 1118 "lpc.c"
     $513 = (($510) + 4)|0; //@line 1118 "lpc.c"
     $514 = $513; //@line 1118 "lpc.c"
     $515 = HEAP32[$514>>2]|0; //@line 1118 "lpc.c"
     $516 = (_i64Add(($512|0),($515|0),($508|0),($509|0))|0); //@line 1118 "lpc.c"
     $517 = tempRet0; //@line 1118 "lpc.c"
     $518 = $13; //@line 1118 "lpc.c"
     $519 = $518; //@line 1118 "lpc.c"
     HEAP32[$519>>2] = $516; //@line 1118 "lpc.c"
     $520 = (($518) + 4)|0; //@line 1118 "lpc.c"
     $521 = $520; //@line 1118 "lpc.c"
     HEAP32[$521>>2] = $517; //@line 1118 "lpc.c"
     $522 = $8; //@line 1119 "lpc.c"
     $523 = ((($522)) + 16|0); //@line 1119 "lpc.c"
     $524 = HEAP32[$523>>2]|0; //@line 1119 "lpc.c"
     $525 = ($524|0)<(0); //@line 1119 "lpc.c"
     $526 = $525 << 31 >> 31; //@line 1119 "lpc.c"
     $527 = $11; //@line 1119 "lpc.c"
     $528 = $12; //@line 1119 "lpc.c"
     $529 = (($528) - 5)|0; //@line 1119 "lpc.c"
     $530 = (($527) + ($529<<2)|0); //@line 1119 "lpc.c"
     $531 = HEAP32[$530>>2]|0; //@line 1119 "lpc.c"
     $532 = ($531|0)<(0); //@line 1119 "lpc.c"
     $533 = $532 << 31 >> 31; //@line 1119 "lpc.c"
     $534 = (___muldi3(($524|0),($526|0),($531|0),($533|0))|0); //@line 1119 "lpc.c"
     $535 = tempRet0; //@line 1119 "lpc.c"
     $536 = $13; //@line 1119 "lpc.c"
     $537 = $536; //@line 1119 "lpc.c"
     $538 = HEAP32[$537>>2]|0; //@line 1119 "lpc.c"
     $539 = (($536) + 4)|0; //@line 1119 "lpc.c"
     $540 = $539; //@line 1119 "lpc.c"
     $541 = HEAP32[$540>>2]|0; //@line 1119 "lpc.c"
     $542 = (_i64Add(($538|0),($541|0),($534|0),($535|0))|0); //@line 1119 "lpc.c"
     $543 = tempRet0; //@line 1119 "lpc.c"
     $544 = $13; //@line 1119 "lpc.c"
     $545 = $544; //@line 1119 "lpc.c"
     HEAP32[$545>>2] = $542; //@line 1119 "lpc.c"
     $546 = (($544) + 4)|0; //@line 1119 "lpc.c"
     $547 = $546; //@line 1119 "lpc.c"
     HEAP32[$547>>2] = $543; //@line 1119 "lpc.c"
     $548 = $8; //@line 1120 "lpc.c"
     $549 = ((($548)) + 12|0); //@line 1120 "lpc.c"
     $550 = HEAP32[$549>>2]|0; //@line 1120 "lpc.c"
     $551 = ($550|0)<(0); //@line 1120 "lpc.c"
     $552 = $551 << 31 >> 31; //@line 1120 "lpc.c"
     $553 = $11; //@line 1120 "lpc.c"
     $554 = $12; //@line 1120 "lpc.c"
     $555 = (($554) - 4)|0; //@line 1120 "lpc.c"
     $556 = (($553) + ($555<<2)|0); //@line 1120 "lpc.c"
     $557 = HEAP32[$556>>2]|0; //@line 1120 "lpc.c"
     $558 = ($557|0)<(0); //@line 1120 "lpc.c"
     $559 = $558 << 31 >> 31; //@line 1120 "lpc.c"
     $560 = (___muldi3(($550|0),($552|0),($557|0),($559|0))|0); //@line 1120 "lpc.c"
     $561 = tempRet0; //@line 1120 "lpc.c"
     $562 = $13; //@line 1120 "lpc.c"
     $563 = $562; //@line 1120 "lpc.c"
     $564 = HEAP32[$563>>2]|0; //@line 1120 "lpc.c"
     $565 = (($562) + 4)|0; //@line 1120 "lpc.c"
     $566 = $565; //@line 1120 "lpc.c"
     $567 = HEAP32[$566>>2]|0; //@line 1120 "lpc.c"
     $568 = (_i64Add(($564|0),($567|0),($560|0),($561|0))|0); //@line 1120 "lpc.c"
     $569 = tempRet0; //@line 1120 "lpc.c"
     $570 = $13; //@line 1120 "lpc.c"
     $571 = $570; //@line 1120 "lpc.c"
     HEAP32[$571>>2] = $568; //@line 1120 "lpc.c"
     $572 = (($570) + 4)|0; //@line 1120 "lpc.c"
     $573 = $572; //@line 1120 "lpc.c"
     HEAP32[$573>>2] = $569; //@line 1120 "lpc.c"
     $574 = $8; //@line 1121 "lpc.c"
     $575 = ((($574)) + 8|0); //@line 1121 "lpc.c"
     $576 = HEAP32[$575>>2]|0; //@line 1121 "lpc.c"
     $577 = ($576|0)<(0); //@line 1121 "lpc.c"
     $578 = $577 << 31 >> 31; //@line 1121 "lpc.c"
     $579 = $11; //@line 1121 "lpc.c"
     $580 = $12; //@line 1121 "lpc.c"
     $581 = (($580) - 3)|0; //@line 1121 "lpc.c"
     $582 = (($579) + ($581<<2)|0); //@line 1121 "lpc.c"
     $583 = HEAP32[$582>>2]|0; //@line 1121 "lpc.c"
     $584 = ($583|0)<(0); //@line 1121 "lpc.c"
     $585 = $584 << 31 >> 31; //@line 1121 "lpc.c"
     $586 = (___muldi3(($576|0),($578|0),($583|0),($585|0))|0); //@line 1121 "lpc.c"
     $587 = tempRet0; //@line 1121 "lpc.c"
     $588 = $13; //@line 1121 "lpc.c"
     $589 = $588; //@line 1121 "lpc.c"
     $590 = HEAP32[$589>>2]|0; //@line 1121 "lpc.c"
     $591 = (($588) + 4)|0; //@line 1121 "lpc.c"
     $592 = $591; //@line 1121 "lpc.c"
     $593 = HEAP32[$592>>2]|0; //@line 1121 "lpc.c"
     $594 = (_i64Add(($590|0),($593|0),($586|0),($587|0))|0); //@line 1121 "lpc.c"
     $595 = tempRet0; //@line 1121 "lpc.c"
     $596 = $13; //@line 1121 "lpc.c"
     $597 = $596; //@line 1121 "lpc.c"
     HEAP32[$597>>2] = $594; //@line 1121 "lpc.c"
     $598 = (($596) + 4)|0; //@line 1121 "lpc.c"
     $599 = $598; //@line 1121 "lpc.c"
     HEAP32[$599>>2] = $595; //@line 1121 "lpc.c"
     $600 = $8; //@line 1122 "lpc.c"
     $601 = ((($600)) + 4|0); //@line 1122 "lpc.c"
     $602 = HEAP32[$601>>2]|0; //@line 1122 "lpc.c"
     $603 = ($602|0)<(0); //@line 1122 "lpc.c"
     $604 = $603 << 31 >> 31; //@line 1122 "lpc.c"
     $605 = $11; //@line 1122 "lpc.c"
     $606 = $12; //@line 1122 "lpc.c"
     $607 = (($606) - 2)|0; //@line 1122 "lpc.c"
     $608 = (($605) + ($607<<2)|0); //@line 1122 "lpc.c"
     $609 = HEAP32[$608>>2]|0; //@line 1122 "lpc.c"
     $610 = ($609|0)<(0); //@line 1122 "lpc.c"
     $611 = $610 << 31 >> 31; //@line 1122 "lpc.c"
     $612 = (___muldi3(($602|0),($604|0),($609|0),($611|0))|0); //@line 1122 "lpc.c"
     $613 = tempRet0; //@line 1122 "lpc.c"
     $614 = $13; //@line 1122 "lpc.c"
     $615 = $614; //@line 1122 "lpc.c"
     $616 = HEAP32[$615>>2]|0; //@line 1122 "lpc.c"
     $617 = (($614) + 4)|0; //@line 1122 "lpc.c"
     $618 = $617; //@line 1122 "lpc.c"
     $619 = HEAP32[$618>>2]|0; //@line 1122 "lpc.c"
     $620 = (_i64Add(($616|0),($619|0),($612|0),($613|0))|0); //@line 1122 "lpc.c"
     $621 = tempRet0; //@line 1122 "lpc.c"
     $622 = $13; //@line 1122 "lpc.c"
     $623 = $622; //@line 1122 "lpc.c"
     HEAP32[$623>>2] = $620; //@line 1122 "lpc.c"
     $624 = (($622) + 4)|0; //@line 1122 "lpc.c"
     $625 = $624; //@line 1122 "lpc.c"
     HEAP32[$625>>2] = $621; //@line 1122 "lpc.c"
     $626 = $8; //@line 1123 "lpc.c"
     $627 = HEAP32[$626>>2]|0; //@line 1123 "lpc.c"
     $628 = ($627|0)<(0); //@line 1123 "lpc.c"
     $629 = $628 << 31 >> 31; //@line 1123 "lpc.c"
     $630 = $11; //@line 1123 "lpc.c"
     $631 = $12; //@line 1123 "lpc.c"
     $632 = (($631) - 1)|0; //@line 1123 "lpc.c"
     $633 = (($630) + ($632<<2)|0); //@line 1123 "lpc.c"
     $634 = HEAP32[$633>>2]|0; //@line 1123 "lpc.c"
     $635 = ($634|0)<(0); //@line 1123 "lpc.c"
     $636 = $635 << 31 >> 31; //@line 1123 "lpc.c"
     $637 = (___muldi3(($627|0),($629|0),($634|0),($636|0))|0); //@line 1123 "lpc.c"
     $638 = tempRet0; //@line 1123 "lpc.c"
     $639 = $13; //@line 1123 "lpc.c"
     $640 = $639; //@line 1123 "lpc.c"
     $641 = HEAP32[$640>>2]|0; //@line 1123 "lpc.c"
     $642 = (($639) + 4)|0; //@line 1123 "lpc.c"
     $643 = $642; //@line 1123 "lpc.c"
     $644 = HEAP32[$643>>2]|0; //@line 1123 "lpc.c"
     $645 = (_i64Add(($641|0),($644|0),($637|0),($638|0))|0); //@line 1123 "lpc.c"
     $646 = tempRet0; //@line 1123 "lpc.c"
     $647 = $13; //@line 1123 "lpc.c"
     $648 = $647; //@line 1123 "lpc.c"
     HEAP32[$648>>2] = $645; //@line 1123 "lpc.c"
     $649 = (($647) + 4)|0; //@line 1123 "lpc.c"
     $650 = $649; //@line 1123 "lpc.c"
     HEAP32[$650>>2] = $646; //@line 1123 "lpc.c"
     $651 = $6; //@line 1124 "lpc.c"
     $652 = $12; //@line 1124 "lpc.c"
     $653 = (($651) + ($652<<2)|0); //@line 1124 "lpc.c"
     $654 = HEAP32[$653>>2]|0; //@line 1124 "lpc.c"
     $655 = $13; //@line 1124 "lpc.c"
     $656 = $655; //@line 1124 "lpc.c"
     $657 = HEAP32[$656>>2]|0; //@line 1124 "lpc.c"
     $658 = (($655) + 4)|0; //@line 1124 "lpc.c"
     $659 = $658; //@line 1124 "lpc.c"
     $660 = HEAP32[$659>>2]|0; //@line 1124 "lpc.c"
     $661 = $10; //@line 1124 "lpc.c"
     $662 = (_bitshift64Ashr(($657|0),($660|0),($661|0))|0); //@line 1124 "lpc.c"
     $663 = tempRet0; //@line 1124 "lpc.c"
     $664 = (($654) + ($662))|0; //@line 1124 "lpc.c"
     $665 = $11; //@line 1124 "lpc.c"
     $666 = $12; //@line 1124 "lpc.c"
     $667 = (($665) + ($666<<2)|0); //@line 1124 "lpc.c"
     HEAP32[$667>>2] = $664; //@line 1124 "lpc.c"
     $668 = $12; //@line 1111 "lpc.c"
     $669 = (($668) + 1)|0; //@line 1111 "lpc.c"
     $12 = $669; //@line 1111 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  } else {
   $670 = ($20|0)==(10); //@line 1129 "lpc.c"
   $12 = 0;
   if ($670) {
    while(1) {
     $671 = $12; //@line 1130 "lpc.c"
     $672 = $7; //@line 1130 "lpc.c"
     $673 = ($671|0)<($672|0); //@line 1130 "lpc.c"
     if (!($673)) {
      break;
     }
     $674 = $13; //@line 1131 "lpc.c"
     $675 = $674; //@line 1131 "lpc.c"
     HEAP32[$675>>2] = 0; //@line 1131 "lpc.c"
     $676 = (($674) + 4)|0; //@line 1131 "lpc.c"
     $677 = $676; //@line 1131 "lpc.c"
     HEAP32[$677>>2] = 0; //@line 1131 "lpc.c"
     $678 = $8; //@line 1132 "lpc.c"
     $679 = ((($678)) + 36|0); //@line 1132 "lpc.c"
     $680 = HEAP32[$679>>2]|0; //@line 1132 "lpc.c"
     $681 = ($680|0)<(0); //@line 1132 "lpc.c"
     $682 = $681 << 31 >> 31; //@line 1132 "lpc.c"
     $683 = $11; //@line 1132 "lpc.c"
     $684 = $12; //@line 1132 "lpc.c"
     $685 = (($684) - 10)|0; //@line 1132 "lpc.c"
     $686 = (($683) + ($685<<2)|0); //@line 1132 "lpc.c"
     $687 = HEAP32[$686>>2]|0; //@line 1132 "lpc.c"
     $688 = ($687|0)<(0); //@line 1132 "lpc.c"
     $689 = $688 << 31 >> 31; //@line 1132 "lpc.c"
     $690 = (___muldi3(($680|0),($682|0),($687|0),($689|0))|0); //@line 1132 "lpc.c"
     $691 = tempRet0; //@line 1132 "lpc.c"
     $692 = $13; //@line 1132 "lpc.c"
     $693 = $692; //@line 1132 "lpc.c"
     $694 = HEAP32[$693>>2]|0; //@line 1132 "lpc.c"
     $695 = (($692) + 4)|0; //@line 1132 "lpc.c"
     $696 = $695; //@line 1132 "lpc.c"
     $697 = HEAP32[$696>>2]|0; //@line 1132 "lpc.c"
     $698 = (_i64Add(($694|0),($697|0),($690|0),($691|0))|0); //@line 1132 "lpc.c"
     $699 = tempRet0; //@line 1132 "lpc.c"
     $700 = $13; //@line 1132 "lpc.c"
     $701 = $700; //@line 1132 "lpc.c"
     HEAP32[$701>>2] = $698; //@line 1132 "lpc.c"
     $702 = (($700) + 4)|0; //@line 1132 "lpc.c"
     $703 = $702; //@line 1132 "lpc.c"
     HEAP32[$703>>2] = $699; //@line 1132 "lpc.c"
     $704 = $8; //@line 1133 "lpc.c"
     $705 = ((($704)) + 32|0); //@line 1133 "lpc.c"
     $706 = HEAP32[$705>>2]|0; //@line 1133 "lpc.c"
     $707 = ($706|0)<(0); //@line 1133 "lpc.c"
     $708 = $707 << 31 >> 31; //@line 1133 "lpc.c"
     $709 = $11; //@line 1133 "lpc.c"
     $710 = $12; //@line 1133 "lpc.c"
     $711 = (($710) - 9)|0; //@line 1133 "lpc.c"
     $712 = (($709) + ($711<<2)|0); //@line 1133 "lpc.c"
     $713 = HEAP32[$712>>2]|0; //@line 1133 "lpc.c"
     $714 = ($713|0)<(0); //@line 1133 "lpc.c"
     $715 = $714 << 31 >> 31; //@line 1133 "lpc.c"
     $716 = (___muldi3(($706|0),($708|0),($713|0),($715|0))|0); //@line 1133 "lpc.c"
     $717 = tempRet0; //@line 1133 "lpc.c"
     $718 = $13; //@line 1133 "lpc.c"
     $719 = $718; //@line 1133 "lpc.c"
     $720 = HEAP32[$719>>2]|0; //@line 1133 "lpc.c"
     $721 = (($718) + 4)|0; //@line 1133 "lpc.c"
     $722 = $721; //@line 1133 "lpc.c"
     $723 = HEAP32[$722>>2]|0; //@line 1133 "lpc.c"
     $724 = (_i64Add(($720|0),($723|0),($716|0),($717|0))|0); //@line 1133 "lpc.c"
     $725 = tempRet0; //@line 1133 "lpc.c"
     $726 = $13; //@line 1133 "lpc.c"
     $727 = $726; //@line 1133 "lpc.c"
     HEAP32[$727>>2] = $724; //@line 1133 "lpc.c"
     $728 = (($726) + 4)|0; //@line 1133 "lpc.c"
     $729 = $728; //@line 1133 "lpc.c"
     HEAP32[$729>>2] = $725; //@line 1133 "lpc.c"
     $730 = $8; //@line 1134 "lpc.c"
     $731 = ((($730)) + 28|0); //@line 1134 "lpc.c"
     $732 = HEAP32[$731>>2]|0; //@line 1134 "lpc.c"
     $733 = ($732|0)<(0); //@line 1134 "lpc.c"
     $734 = $733 << 31 >> 31; //@line 1134 "lpc.c"
     $735 = $11; //@line 1134 "lpc.c"
     $736 = $12; //@line 1134 "lpc.c"
     $737 = (($736) - 8)|0; //@line 1134 "lpc.c"
     $738 = (($735) + ($737<<2)|0); //@line 1134 "lpc.c"
     $739 = HEAP32[$738>>2]|0; //@line 1134 "lpc.c"
     $740 = ($739|0)<(0); //@line 1134 "lpc.c"
     $741 = $740 << 31 >> 31; //@line 1134 "lpc.c"
     $742 = (___muldi3(($732|0),($734|0),($739|0),($741|0))|0); //@line 1134 "lpc.c"
     $743 = tempRet0; //@line 1134 "lpc.c"
     $744 = $13; //@line 1134 "lpc.c"
     $745 = $744; //@line 1134 "lpc.c"
     $746 = HEAP32[$745>>2]|0; //@line 1134 "lpc.c"
     $747 = (($744) + 4)|0; //@line 1134 "lpc.c"
     $748 = $747; //@line 1134 "lpc.c"
     $749 = HEAP32[$748>>2]|0; //@line 1134 "lpc.c"
     $750 = (_i64Add(($746|0),($749|0),($742|0),($743|0))|0); //@line 1134 "lpc.c"
     $751 = tempRet0; //@line 1134 "lpc.c"
     $752 = $13; //@line 1134 "lpc.c"
     $753 = $752; //@line 1134 "lpc.c"
     HEAP32[$753>>2] = $750; //@line 1134 "lpc.c"
     $754 = (($752) + 4)|0; //@line 1134 "lpc.c"
     $755 = $754; //@line 1134 "lpc.c"
     HEAP32[$755>>2] = $751; //@line 1134 "lpc.c"
     $756 = $8; //@line 1135 "lpc.c"
     $757 = ((($756)) + 24|0); //@line 1135 "lpc.c"
     $758 = HEAP32[$757>>2]|0; //@line 1135 "lpc.c"
     $759 = ($758|0)<(0); //@line 1135 "lpc.c"
     $760 = $759 << 31 >> 31; //@line 1135 "lpc.c"
     $761 = $11; //@line 1135 "lpc.c"
     $762 = $12; //@line 1135 "lpc.c"
     $763 = (($762) - 7)|0; //@line 1135 "lpc.c"
     $764 = (($761) + ($763<<2)|0); //@line 1135 "lpc.c"
     $765 = HEAP32[$764>>2]|0; //@line 1135 "lpc.c"
     $766 = ($765|0)<(0); //@line 1135 "lpc.c"
     $767 = $766 << 31 >> 31; //@line 1135 "lpc.c"
     $768 = (___muldi3(($758|0),($760|0),($765|0),($767|0))|0); //@line 1135 "lpc.c"
     $769 = tempRet0; //@line 1135 "lpc.c"
     $770 = $13; //@line 1135 "lpc.c"
     $771 = $770; //@line 1135 "lpc.c"
     $772 = HEAP32[$771>>2]|0; //@line 1135 "lpc.c"
     $773 = (($770) + 4)|0; //@line 1135 "lpc.c"
     $774 = $773; //@line 1135 "lpc.c"
     $775 = HEAP32[$774>>2]|0; //@line 1135 "lpc.c"
     $776 = (_i64Add(($772|0),($775|0),($768|0),($769|0))|0); //@line 1135 "lpc.c"
     $777 = tempRet0; //@line 1135 "lpc.c"
     $778 = $13; //@line 1135 "lpc.c"
     $779 = $778; //@line 1135 "lpc.c"
     HEAP32[$779>>2] = $776; //@line 1135 "lpc.c"
     $780 = (($778) + 4)|0; //@line 1135 "lpc.c"
     $781 = $780; //@line 1135 "lpc.c"
     HEAP32[$781>>2] = $777; //@line 1135 "lpc.c"
     $782 = $8; //@line 1136 "lpc.c"
     $783 = ((($782)) + 20|0); //@line 1136 "lpc.c"
     $784 = HEAP32[$783>>2]|0; //@line 1136 "lpc.c"
     $785 = ($784|0)<(0); //@line 1136 "lpc.c"
     $786 = $785 << 31 >> 31; //@line 1136 "lpc.c"
     $787 = $11; //@line 1136 "lpc.c"
     $788 = $12; //@line 1136 "lpc.c"
     $789 = (($788) - 6)|0; //@line 1136 "lpc.c"
     $790 = (($787) + ($789<<2)|0); //@line 1136 "lpc.c"
     $791 = HEAP32[$790>>2]|0; //@line 1136 "lpc.c"
     $792 = ($791|0)<(0); //@line 1136 "lpc.c"
     $793 = $792 << 31 >> 31; //@line 1136 "lpc.c"
     $794 = (___muldi3(($784|0),($786|0),($791|0),($793|0))|0); //@line 1136 "lpc.c"
     $795 = tempRet0; //@line 1136 "lpc.c"
     $796 = $13; //@line 1136 "lpc.c"
     $797 = $796; //@line 1136 "lpc.c"
     $798 = HEAP32[$797>>2]|0; //@line 1136 "lpc.c"
     $799 = (($796) + 4)|0; //@line 1136 "lpc.c"
     $800 = $799; //@line 1136 "lpc.c"
     $801 = HEAP32[$800>>2]|0; //@line 1136 "lpc.c"
     $802 = (_i64Add(($798|0),($801|0),($794|0),($795|0))|0); //@line 1136 "lpc.c"
     $803 = tempRet0; //@line 1136 "lpc.c"
     $804 = $13; //@line 1136 "lpc.c"
     $805 = $804; //@line 1136 "lpc.c"
     HEAP32[$805>>2] = $802; //@line 1136 "lpc.c"
     $806 = (($804) + 4)|0; //@line 1136 "lpc.c"
     $807 = $806; //@line 1136 "lpc.c"
     HEAP32[$807>>2] = $803; //@line 1136 "lpc.c"
     $808 = $8; //@line 1137 "lpc.c"
     $809 = ((($808)) + 16|0); //@line 1137 "lpc.c"
     $810 = HEAP32[$809>>2]|0; //@line 1137 "lpc.c"
     $811 = ($810|0)<(0); //@line 1137 "lpc.c"
     $812 = $811 << 31 >> 31; //@line 1137 "lpc.c"
     $813 = $11; //@line 1137 "lpc.c"
     $814 = $12; //@line 1137 "lpc.c"
     $815 = (($814) - 5)|0; //@line 1137 "lpc.c"
     $816 = (($813) + ($815<<2)|0); //@line 1137 "lpc.c"
     $817 = HEAP32[$816>>2]|0; //@line 1137 "lpc.c"
     $818 = ($817|0)<(0); //@line 1137 "lpc.c"
     $819 = $818 << 31 >> 31; //@line 1137 "lpc.c"
     $820 = (___muldi3(($810|0),($812|0),($817|0),($819|0))|0); //@line 1137 "lpc.c"
     $821 = tempRet0; //@line 1137 "lpc.c"
     $822 = $13; //@line 1137 "lpc.c"
     $823 = $822; //@line 1137 "lpc.c"
     $824 = HEAP32[$823>>2]|0; //@line 1137 "lpc.c"
     $825 = (($822) + 4)|0; //@line 1137 "lpc.c"
     $826 = $825; //@line 1137 "lpc.c"
     $827 = HEAP32[$826>>2]|0; //@line 1137 "lpc.c"
     $828 = (_i64Add(($824|0),($827|0),($820|0),($821|0))|0); //@line 1137 "lpc.c"
     $829 = tempRet0; //@line 1137 "lpc.c"
     $830 = $13; //@line 1137 "lpc.c"
     $831 = $830; //@line 1137 "lpc.c"
     HEAP32[$831>>2] = $828; //@line 1137 "lpc.c"
     $832 = (($830) + 4)|0; //@line 1137 "lpc.c"
     $833 = $832; //@line 1137 "lpc.c"
     HEAP32[$833>>2] = $829; //@line 1137 "lpc.c"
     $834 = $8; //@line 1138 "lpc.c"
     $835 = ((($834)) + 12|0); //@line 1138 "lpc.c"
     $836 = HEAP32[$835>>2]|0; //@line 1138 "lpc.c"
     $837 = ($836|0)<(0); //@line 1138 "lpc.c"
     $838 = $837 << 31 >> 31; //@line 1138 "lpc.c"
     $839 = $11; //@line 1138 "lpc.c"
     $840 = $12; //@line 1138 "lpc.c"
     $841 = (($840) - 4)|0; //@line 1138 "lpc.c"
     $842 = (($839) + ($841<<2)|0); //@line 1138 "lpc.c"
     $843 = HEAP32[$842>>2]|0; //@line 1138 "lpc.c"
     $844 = ($843|0)<(0); //@line 1138 "lpc.c"
     $845 = $844 << 31 >> 31; //@line 1138 "lpc.c"
     $846 = (___muldi3(($836|0),($838|0),($843|0),($845|0))|0); //@line 1138 "lpc.c"
     $847 = tempRet0; //@line 1138 "lpc.c"
     $848 = $13; //@line 1138 "lpc.c"
     $849 = $848; //@line 1138 "lpc.c"
     $850 = HEAP32[$849>>2]|0; //@line 1138 "lpc.c"
     $851 = (($848) + 4)|0; //@line 1138 "lpc.c"
     $852 = $851; //@line 1138 "lpc.c"
     $853 = HEAP32[$852>>2]|0; //@line 1138 "lpc.c"
     $854 = (_i64Add(($850|0),($853|0),($846|0),($847|0))|0); //@line 1138 "lpc.c"
     $855 = tempRet0; //@line 1138 "lpc.c"
     $856 = $13; //@line 1138 "lpc.c"
     $857 = $856; //@line 1138 "lpc.c"
     HEAP32[$857>>2] = $854; //@line 1138 "lpc.c"
     $858 = (($856) + 4)|0; //@line 1138 "lpc.c"
     $859 = $858; //@line 1138 "lpc.c"
     HEAP32[$859>>2] = $855; //@line 1138 "lpc.c"
     $860 = $8; //@line 1139 "lpc.c"
     $861 = ((($860)) + 8|0); //@line 1139 "lpc.c"
     $862 = HEAP32[$861>>2]|0; //@line 1139 "lpc.c"
     $863 = ($862|0)<(0); //@line 1139 "lpc.c"
     $864 = $863 << 31 >> 31; //@line 1139 "lpc.c"
     $865 = $11; //@line 1139 "lpc.c"
     $866 = $12; //@line 1139 "lpc.c"
     $867 = (($866) - 3)|0; //@line 1139 "lpc.c"
     $868 = (($865) + ($867<<2)|0); //@line 1139 "lpc.c"
     $869 = HEAP32[$868>>2]|0; //@line 1139 "lpc.c"
     $870 = ($869|0)<(0); //@line 1139 "lpc.c"
     $871 = $870 << 31 >> 31; //@line 1139 "lpc.c"
     $872 = (___muldi3(($862|0),($864|0),($869|0),($871|0))|0); //@line 1139 "lpc.c"
     $873 = tempRet0; //@line 1139 "lpc.c"
     $874 = $13; //@line 1139 "lpc.c"
     $875 = $874; //@line 1139 "lpc.c"
     $876 = HEAP32[$875>>2]|0; //@line 1139 "lpc.c"
     $877 = (($874) + 4)|0; //@line 1139 "lpc.c"
     $878 = $877; //@line 1139 "lpc.c"
     $879 = HEAP32[$878>>2]|0; //@line 1139 "lpc.c"
     $880 = (_i64Add(($876|0),($879|0),($872|0),($873|0))|0); //@line 1139 "lpc.c"
     $881 = tempRet0; //@line 1139 "lpc.c"
     $882 = $13; //@line 1139 "lpc.c"
     $883 = $882; //@line 1139 "lpc.c"
     HEAP32[$883>>2] = $880; //@line 1139 "lpc.c"
     $884 = (($882) + 4)|0; //@line 1139 "lpc.c"
     $885 = $884; //@line 1139 "lpc.c"
     HEAP32[$885>>2] = $881; //@line 1139 "lpc.c"
     $886 = $8; //@line 1140 "lpc.c"
     $887 = ((($886)) + 4|0); //@line 1140 "lpc.c"
     $888 = HEAP32[$887>>2]|0; //@line 1140 "lpc.c"
     $889 = ($888|0)<(0); //@line 1140 "lpc.c"
     $890 = $889 << 31 >> 31; //@line 1140 "lpc.c"
     $891 = $11; //@line 1140 "lpc.c"
     $892 = $12; //@line 1140 "lpc.c"
     $893 = (($892) - 2)|0; //@line 1140 "lpc.c"
     $894 = (($891) + ($893<<2)|0); //@line 1140 "lpc.c"
     $895 = HEAP32[$894>>2]|0; //@line 1140 "lpc.c"
     $896 = ($895|0)<(0); //@line 1140 "lpc.c"
     $897 = $896 << 31 >> 31; //@line 1140 "lpc.c"
     $898 = (___muldi3(($888|0),($890|0),($895|0),($897|0))|0); //@line 1140 "lpc.c"
     $899 = tempRet0; //@line 1140 "lpc.c"
     $900 = $13; //@line 1140 "lpc.c"
     $901 = $900; //@line 1140 "lpc.c"
     $902 = HEAP32[$901>>2]|0; //@line 1140 "lpc.c"
     $903 = (($900) + 4)|0; //@line 1140 "lpc.c"
     $904 = $903; //@line 1140 "lpc.c"
     $905 = HEAP32[$904>>2]|0; //@line 1140 "lpc.c"
     $906 = (_i64Add(($902|0),($905|0),($898|0),($899|0))|0); //@line 1140 "lpc.c"
     $907 = tempRet0; //@line 1140 "lpc.c"
     $908 = $13; //@line 1140 "lpc.c"
     $909 = $908; //@line 1140 "lpc.c"
     HEAP32[$909>>2] = $906; //@line 1140 "lpc.c"
     $910 = (($908) + 4)|0; //@line 1140 "lpc.c"
     $911 = $910; //@line 1140 "lpc.c"
     HEAP32[$911>>2] = $907; //@line 1140 "lpc.c"
     $912 = $8; //@line 1141 "lpc.c"
     $913 = HEAP32[$912>>2]|0; //@line 1141 "lpc.c"
     $914 = ($913|0)<(0); //@line 1141 "lpc.c"
     $915 = $914 << 31 >> 31; //@line 1141 "lpc.c"
     $916 = $11; //@line 1141 "lpc.c"
     $917 = $12; //@line 1141 "lpc.c"
     $918 = (($917) - 1)|0; //@line 1141 "lpc.c"
     $919 = (($916) + ($918<<2)|0); //@line 1141 "lpc.c"
     $920 = HEAP32[$919>>2]|0; //@line 1141 "lpc.c"
     $921 = ($920|0)<(0); //@line 1141 "lpc.c"
     $922 = $921 << 31 >> 31; //@line 1141 "lpc.c"
     $923 = (___muldi3(($913|0),($915|0),($920|0),($922|0))|0); //@line 1141 "lpc.c"
     $924 = tempRet0; //@line 1141 "lpc.c"
     $925 = $13; //@line 1141 "lpc.c"
     $926 = $925; //@line 1141 "lpc.c"
     $927 = HEAP32[$926>>2]|0; //@line 1141 "lpc.c"
     $928 = (($925) + 4)|0; //@line 1141 "lpc.c"
     $929 = $928; //@line 1141 "lpc.c"
     $930 = HEAP32[$929>>2]|0; //@line 1141 "lpc.c"
     $931 = (_i64Add(($927|0),($930|0),($923|0),($924|0))|0); //@line 1141 "lpc.c"
     $932 = tempRet0; //@line 1141 "lpc.c"
     $933 = $13; //@line 1141 "lpc.c"
     $934 = $933; //@line 1141 "lpc.c"
     HEAP32[$934>>2] = $931; //@line 1141 "lpc.c"
     $935 = (($933) + 4)|0; //@line 1141 "lpc.c"
     $936 = $935; //@line 1141 "lpc.c"
     HEAP32[$936>>2] = $932; //@line 1141 "lpc.c"
     $937 = $6; //@line 1142 "lpc.c"
     $938 = $12; //@line 1142 "lpc.c"
     $939 = (($937) + ($938<<2)|0); //@line 1142 "lpc.c"
     $940 = HEAP32[$939>>2]|0; //@line 1142 "lpc.c"
     $941 = $13; //@line 1142 "lpc.c"
     $942 = $941; //@line 1142 "lpc.c"
     $943 = HEAP32[$942>>2]|0; //@line 1142 "lpc.c"
     $944 = (($941) + 4)|0; //@line 1142 "lpc.c"
     $945 = $944; //@line 1142 "lpc.c"
     $946 = HEAP32[$945>>2]|0; //@line 1142 "lpc.c"
     $947 = $10; //@line 1142 "lpc.c"
     $948 = (_bitshift64Ashr(($943|0),($946|0),($947|0))|0); //@line 1142 "lpc.c"
     $949 = tempRet0; //@line 1142 "lpc.c"
     $950 = (($940) + ($948))|0; //@line 1142 "lpc.c"
     $951 = $11; //@line 1142 "lpc.c"
     $952 = $12; //@line 1142 "lpc.c"
     $953 = (($951) + ($952<<2)|0); //@line 1142 "lpc.c"
     HEAP32[$953>>2] = $950; //@line 1142 "lpc.c"
     $954 = $12; //@line 1130 "lpc.c"
     $955 = (($954) + 1)|0; //@line 1130 "lpc.c"
     $12 = $955; //@line 1130 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $956 = $12; //@line 1146 "lpc.c"
     $957 = $7; //@line 1146 "lpc.c"
     $958 = ($956|0)<($957|0); //@line 1146 "lpc.c"
     if (!($958)) {
      break;
     }
     $959 = $13; //@line 1147 "lpc.c"
     $960 = $959; //@line 1147 "lpc.c"
     HEAP32[$960>>2] = 0; //@line 1147 "lpc.c"
     $961 = (($959) + 4)|0; //@line 1147 "lpc.c"
     $962 = $961; //@line 1147 "lpc.c"
     HEAP32[$962>>2] = 0; //@line 1147 "lpc.c"
     $963 = $8; //@line 1148 "lpc.c"
     $964 = ((($963)) + 32|0); //@line 1148 "lpc.c"
     $965 = HEAP32[$964>>2]|0; //@line 1148 "lpc.c"
     $966 = ($965|0)<(0); //@line 1148 "lpc.c"
     $967 = $966 << 31 >> 31; //@line 1148 "lpc.c"
     $968 = $11; //@line 1148 "lpc.c"
     $969 = $12; //@line 1148 "lpc.c"
     $970 = (($969) - 9)|0; //@line 1148 "lpc.c"
     $971 = (($968) + ($970<<2)|0); //@line 1148 "lpc.c"
     $972 = HEAP32[$971>>2]|0; //@line 1148 "lpc.c"
     $973 = ($972|0)<(0); //@line 1148 "lpc.c"
     $974 = $973 << 31 >> 31; //@line 1148 "lpc.c"
     $975 = (___muldi3(($965|0),($967|0),($972|0),($974|0))|0); //@line 1148 "lpc.c"
     $976 = tempRet0; //@line 1148 "lpc.c"
     $977 = $13; //@line 1148 "lpc.c"
     $978 = $977; //@line 1148 "lpc.c"
     $979 = HEAP32[$978>>2]|0; //@line 1148 "lpc.c"
     $980 = (($977) + 4)|0; //@line 1148 "lpc.c"
     $981 = $980; //@line 1148 "lpc.c"
     $982 = HEAP32[$981>>2]|0; //@line 1148 "lpc.c"
     $983 = (_i64Add(($979|0),($982|0),($975|0),($976|0))|0); //@line 1148 "lpc.c"
     $984 = tempRet0; //@line 1148 "lpc.c"
     $985 = $13; //@line 1148 "lpc.c"
     $986 = $985; //@line 1148 "lpc.c"
     HEAP32[$986>>2] = $983; //@line 1148 "lpc.c"
     $987 = (($985) + 4)|0; //@line 1148 "lpc.c"
     $988 = $987; //@line 1148 "lpc.c"
     HEAP32[$988>>2] = $984; //@line 1148 "lpc.c"
     $989 = $8; //@line 1149 "lpc.c"
     $990 = ((($989)) + 28|0); //@line 1149 "lpc.c"
     $991 = HEAP32[$990>>2]|0; //@line 1149 "lpc.c"
     $992 = ($991|0)<(0); //@line 1149 "lpc.c"
     $993 = $992 << 31 >> 31; //@line 1149 "lpc.c"
     $994 = $11; //@line 1149 "lpc.c"
     $995 = $12; //@line 1149 "lpc.c"
     $996 = (($995) - 8)|0; //@line 1149 "lpc.c"
     $997 = (($994) + ($996<<2)|0); //@line 1149 "lpc.c"
     $998 = HEAP32[$997>>2]|0; //@line 1149 "lpc.c"
     $999 = ($998|0)<(0); //@line 1149 "lpc.c"
     $1000 = $999 << 31 >> 31; //@line 1149 "lpc.c"
     $1001 = (___muldi3(($991|0),($993|0),($998|0),($1000|0))|0); //@line 1149 "lpc.c"
     $1002 = tempRet0; //@line 1149 "lpc.c"
     $1003 = $13; //@line 1149 "lpc.c"
     $1004 = $1003; //@line 1149 "lpc.c"
     $1005 = HEAP32[$1004>>2]|0; //@line 1149 "lpc.c"
     $1006 = (($1003) + 4)|0; //@line 1149 "lpc.c"
     $1007 = $1006; //@line 1149 "lpc.c"
     $1008 = HEAP32[$1007>>2]|0; //@line 1149 "lpc.c"
     $1009 = (_i64Add(($1005|0),($1008|0),($1001|0),($1002|0))|0); //@line 1149 "lpc.c"
     $1010 = tempRet0; //@line 1149 "lpc.c"
     $1011 = $13; //@line 1149 "lpc.c"
     $1012 = $1011; //@line 1149 "lpc.c"
     HEAP32[$1012>>2] = $1009; //@line 1149 "lpc.c"
     $1013 = (($1011) + 4)|0; //@line 1149 "lpc.c"
     $1014 = $1013; //@line 1149 "lpc.c"
     HEAP32[$1014>>2] = $1010; //@line 1149 "lpc.c"
     $1015 = $8; //@line 1150 "lpc.c"
     $1016 = ((($1015)) + 24|0); //@line 1150 "lpc.c"
     $1017 = HEAP32[$1016>>2]|0; //@line 1150 "lpc.c"
     $1018 = ($1017|0)<(0); //@line 1150 "lpc.c"
     $1019 = $1018 << 31 >> 31; //@line 1150 "lpc.c"
     $1020 = $11; //@line 1150 "lpc.c"
     $1021 = $12; //@line 1150 "lpc.c"
     $1022 = (($1021) - 7)|0; //@line 1150 "lpc.c"
     $1023 = (($1020) + ($1022<<2)|0); //@line 1150 "lpc.c"
     $1024 = HEAP32[$1023>>2]|0; //@line 1150 "lpc.c"
     $1025 = ($1024|0)<(0); //@line 1150 "lpc.c"
     $1026 = $1025 << 31 >> 31; //@line 1150 "lpc.c"
     $1027 = (___muldi3(($1017|0),($1019|0),($1024|0),($1026|0))|0); //@line 1150 "lpc.c"
     $1028 = tempRet0; //@line 1150 "lpc.c"
     $1029 = $13; //@line 1150 "lpc.c"
     $1030 = $1029; //@line 1150 "lpc.c"
     $1031 = HEAP32[$1030>>2]|0; //@line 1150 "lpc.c"
     $1032 = (($1029) + 4)|0; //@line 1150 "lpc.c"
     $1033 = $1032; //@line 1150 "lpc.c"
     $1034 = HEAP32[$1033>>2]|0; //@line 1150 "lpc.c"
     $1035 = (_i64Add(($1031|0),($1034|0),($1027|0),($1028|0))|0); //@line 1150 "lpc.c"
     $1036 = tempRet0; //@line 1150 "lpc.c"
     $1037 = $13; //@line 1150 "lpc.c"
     $1038 = $1037; //@line 1150 "lpc.c"
     HEAP32[$1038>>2] = $1035; //@line 1150 "lpc.c"
     $1039 = (($1037) + 4)|0; //@line 1150 "lpc.c"
     $1040 = $1039; //@line 1150 "lpc.c"
     HEAP32[$1040>>2] = $1036; //@line 1150 "lpc.c"
     $1041 = $8; //@line 1151 "lpc.c"
     $1042 = ((($1041)) + 20|0); //@line 1151 "lpc.c"
     $1043 = HEAP32[$1042>>2]|0; //@line 1151 "lpc.c"
     $1044 = ($1043|0)<(0); //@line 1151 "lpc.c"
     $1045 = $1044 << 31 >> 31; //@line 1151 "lpc.c"
     $1046 = $11; //@line 1151 "lpc.c"
     $1047 = $12; //@line 1151 "lpc.c"
     $1048 = (($1047) - 6)|0; //@line 1151 "lpc.c"
     $1049 = (($1046) + ($1048<<2)|0); //@line 1151 "lpc.c"
     $1050 = HEAP32[$1049>>2]|0; //@line 1151 "lpc.c"
     $1051 = ($1050|0)<(0); //@line 1151 "lpc.c"
     $1052 = $1051 << 31 >> 31; //@line 1151 "lpc.c"
     $1053 = (___muldi3(($1043|0),($1045|0),($1050|0),($1052|0))|0); //@line 1151 "lpc.c"
     $1054 = tempRet0; //@line 1151 "lpc.c"
     $1055 = $13; //@line 1151 "lpc.c"
     $1056 = $1055; //@line 1151 "lpc.c"
     $1057 = HEAP32[$1056>>2]|0; //@line 1151 "lpc.c"
     $1058 = (($1055) + 4)|0; //@line 1151 "lpc.c"
     $1059 = $1058; //@line 1151 "lpc.c"
     $1060 = HEAP32[$1059>>2]|0; //@line 1151 "lpc.c"
     $1061 = (_i64Add(($1057|0),($1060|0),($1053|0),($1054|0))|0); //@line 1151 "lpc.c"
     $1062 = tempRet0; //@line 1151 "lpc.c"
     $1063 = $13; //@line 1151 "lpc.c"
     $1064 = $1063; //@line 1151 "lpc.c"
     HEAP32[$1064>>2] = $1061; //@line 1151 "lpc.c"
     $1065 = (($1063) + 4)|0; //@line 1151 "lpc.c"
     $1066 = $1065; //@line 1151 "lpc.c"
     HEAP32[$1066>>2] = $1062; //@line 1151 "lpc.c"
     $1067 = $8; //@line 1152 "lpc.c"
     $1068 = ((($1067)) + 16|0); //@line 1152 "lpc.c"
     $1069 = HEAP32[$1068>>2]|0; //@line 1152 "lpc.c"
     $1070 = ($1069|0)<(0); //@line 1152 "lpc.c"
     $1071 = $1070 << 31 >> 31; //@line 1152 "lpc.c"
     $1072 = $11; //@line 1152 "lpc.c"
     $1073 = $12; //@line 1152 "lpc.c"
     $1074 = (($1073) - 5)|0; //@line 1152 "lpc.c"
     $1075 = (($1072) + ($1074<<2)|0); //@line 1152 "lpc.c"
     $1076 = HEAP32[$1075>>2]|0; //@line 1152 "lpc.c"
     $1077 = ($1076|0)<(0); //@line 1152 "lpc.c"
     $1078 = $1077 << 31 >> 31; //@line 1152 "lpc.c"
     $1079 = (___muldi3(($1069|0),($1071|0),($1076|0),($1078|0))|0); //@line 1152 "lpc.c"
     $1080 = tempRet0; //@line 1152 "lpc.c"
     $1081 = $13; //@line 1152 "lpc.c"
     $1082 = $1081; //@line 1152 "lpc.c"
     $1083 = HEAP32[$1082>>2]|0; //@line 1152 "lpc.c"
     $1084 = (($1081) + 4)|0; //@line 1152 "lpc.c"
     $1085 = $1084; //@line 1152 "lpc.c"
     $1086 = HEAP32[$1085>>2]|0; //@line 1152 "lpc.c"
     $1087 = (_i64Add(($1083|0),($1086|0),($1079|0),($1080|0))|0); //@line 1152 "lpc.c"
     $1088 = tempRet0; //@line 1152 "lpc.c"
     $1089 = $13; //@line 1152 "lpc.c"
     $1090 = $1089; //@line 1152 "lpc.c"
     HEAP32[$1090>>2] = $1087; //@line 1152 "lpc.c"
     $1091 = (($1089) + 4)|0; //@line 1152 "lpc.c"
     $1092 = $1091; //@line 1152 "lpc.c"
     HEAP32[$1092>>2] = $1088; //@line 1152 "lpc.c"
     $1093 = $8; //@line 1153 "lpc.c"
     $1094 = ((($1093)) + 12|0); //@line 1153 "lpc.c"
     $1095 = HEAP32[$1094>>2]|0; //@line 1153 "lpc.c"
     $1096 = ($1095|0)<(0); //@line 1153 "lpc.c"
     $1097 = $1096 << 31 >> 31; //@line 1153 "lpc.c"
     $1098 = $11; //@line 1153 "lpc.c"
     $1099 = $12; //@line 1153 "lpc.c"
     $1100 = (($1099) - 4)|0; //@line 1153 "lpc.c"
     $1101 = (($1098) + ($1100<<2)|0); //@line 1153 "lpc.c"
     $1102 = HEAP32[$1101>>2]|0; //@line 1153 "lpc.c"
     $1103 = ($1102|0)<(0); //@line 1153 "lpc.c"
     $1104 = $1103 << 31 >> 31; //@line 1153 "lpc.c"
     $1105 = (___muldi3(($1095|0),($1097|0),($1102|0),($1104|0))|0); //@line 1153 "lpc.c"
     $1106 = tempRet0; //@line 1153 "lpc.c"
     $1107 = $13; //@line 1153 "lpc.c"
     $1108 = $1107; //@line 1153 "lpc.c"
     $1109 = HEAP32[$1108>>2]|0; //@line 1153 "lpc.c"
     $1110 = (($1107) + 4)|0; //@line 1153 "lpc.c"
     $1111 = $1110; //@line 1153 "lpc.c"
     $1112 = HEAP32[$1111>>2]|0; //@line 1153 "lpc.c"
     $1113 = (_i64Add(($1109|0),($1112|0),($1105|0),($1106|0))|0); //@line 1153 "lpc.c"
     $1114 = tempRet0; //@line 1153 "lpc.c"
     $1115 = $13; //@line 1153 "lpc.c"
     $1116 = $1115; //@line 1153 "lpc.c"
     HEAP32[$1116>>2] = $1113; //@line 1153 "lpc.c"
     $1117 = (($1115) + 4)|0; //@line 1153 "lpc.c"
     $1118 = $1117; //@line 1153 "lpc.c"
     HEAP32[$1118>>2] = $1114; //@line 1153 "lpc.c"
     $1119 = $8; //@line 1154 "lpc.c"
     $1120 = ((($1119)) + 8|0); //@line 1154 "lpc.c"
     $1121 = HEAP32[$1120>>2]|0; //@line 1154 "lpc.c"
     $1122 = ($1121|0)<(0); //@line 1154 "lpc.c"
     $1123 = $1122 << 31 >> 31; //@line 1154 "lpc.c"
     $1124 = $11; //@line 1154 "lpc.c"
     $1125 = $12; //@line 1154 "lpc.c"
     $1126 = (($1125) - 3)|0; //@line 1154 "lpc.c"
     $1127 = (($1124) + ($1126<<2)|0); //@line 1154 "lpc.c"
     $1128 = HEAP32[$1127>>2]|0; //@line 1154 "lpc.c"
     $1129 = ($1128|0)<(0); //@line 1154 "lpc.c"
     $1130 = $1129 << 31 >> 31; //@line 1154 "lpc.c"
     $1131 = (___muldi3(($1121|0),($1123|0),($1128|0),($1130|0))|0); //@line 1154 "lpc.c"
     $1132 = tempRet0; //@line 1154 "lpc.c"
     $1133 = $13; //@line 1154 "lpc.c"
     $1134 = $1133; //@line 1154 "lpc.c"
     $1135 = HEAP32[$1134>>2]|0; //@line 1154 "lpc.c"
     $1136 = (($1133) + 4)|0; //@line 1154 "lpc.c"
     $1137 = $1136; //@line 1154 "lpc.c"
     $1138 = HEAP32[$1137>>2]|0; //@line 1154 "lpc.c"
     $1139 = (_i64Add(($1135|0),($1138|0),($1131|0),($1132|0))|0); //@line 1154 "lpc.c"
     $1140 = tempRet0; //@line 1154 "lpc.c"
     $1141 = $13; //@line 1154 "lpc.c"
     $1142 = $1141; //@line 1154 "lpc.c"
     HEAP32[$1142>>2] = $1139; //@line 1154 "lpc.c"
     $1143 = (($1141) + 4)|0; //@line 1154 "lpc.c"
     $1144 = $1143; //@line 1154 "lpc.c"
     HEAP32[$1144>>2] = $1140; //@line 1154 "lpc.c"
     $1145 = $8; //@line 1155 "lpc.c"
     $1146 = ((($1145)) + 4|0); //@line 1155 "lpc.c"
     $1147 = HEAP32[$1146>>2]|0; //@line 1155 "lpc.c"
     $1148 = ($1147|0)<(0); //@line 1155 "lpc.c"
     $1149 = $1148 << 31 >> 31; //@line 1155 "lpc.c"
     $1150 = $11; //@line 1155 "lpc.c"
     $1151 = $12; //@line 1155 "lpc.c"
     $1152 = (($1151) - 2)|0; //@line 1155 "lpc.c"
     $1153 = (($1150) + ($1152<<2)|0); //@line 1155 "lpc.c"
     $1154 = HEAP32[$1153>>2]|0; //@line 1155 "lpc.c"
     $1155 = ($1154|0)<(0); //@line 1155 "lpc.c"
     $1156 = $1155 << 31 >> 31; //@line 1155 "lpc.c"
     $1157 = (___muldi3(($1147|0),($1149|0),($1154|0),($1156|0))|0); //@line 1155 "lpc.c"
     $1158 = tempRet0; //@line 1155 "lpc.c"
     $1159 = $13; //@line 1155 "lpc.c"
     $1160 = $1159; //@line 1155 "lpc.c"
     $1161 = HEAP32[$1160>>2]|0; //@line 1155 "lpc.c"
     $1162 = (($1159) + 4)|0; //@line 1155 "lpc.c"
     $1163 = $1162; //@line 1155 "lpc.c"
     $1164 = HEAP32[$1163>>2]|0; //@line 1155 "lpc.c"
     $1165 = (_i64Add(($1161|0),($1164|0),($1157|0),($1158|0))|0); //@line 1155 "lpc.c"
     $1166 = tempRet0; //@line 1155 "lpc.c"
     $1167 = $13; //@line 1155 "lpc.c"
     $1168 = $1167; //@line 1155 "lpc.c"
     HEAP32[$1168>>2] = $1165; //@line 1155 "lpc.c"
     $1169 = (($1167) + 4)|0; //@line 1155 "lpc.c"
     $1170 = $1169; //@line 1155 "lpc.c"
     HEAP32[$1170>>2] = $1166; //@line 1155 "lpc.c"
     $1171 = $8; //@line 1156 "lpc.c"
     $1172 = HEAP32[$1171>>2]|0; //@line 1156 "lpc.c"
     $1173 = ($1172|0)<(0); //@line 1156 "lpc.c"
     $1174 = $1173 << 31 >> 31; //@line 1156 "lpc.c"
     $1175 = $11; //@line 1156 "lpc.c"
     $1176 = $12; //@line 1156 "lpc.c"
     $1177 = (($1176) - 1)|0; //@line 1156 "lpc.c"
     $1178 = (($1175) + ($1177<<2)|0); //@line 1156 "lpc.c"
     $1179 = HEAP32[$1178>>2]|0; //@line 1156 "lpc.c"
     $1180 = ($1179|0)<(0); //@line 1156 "lpc.c"
     $1181 = $1180 << 31 >> 31; //@line 1156 "lpc.c"
     $1182 = (___muldi3(($1172|0),($1174|0),($1179|0),($1181|0))|0); //@line 1156 "lpc.c"
     $1183 = tempRet0; //@line 1156 "lpc.c"
     $1184 = $13; //@line 1156 "lpc.c"
     $1185 = $1184; //@line 1156 "lpc.c"
     $1186 = HEAP32[$1185>>2]|0; //@line 1156 "lpc.c"
     $1187 = (($1184) + 4)|0; //@line 1156 "lpc.c"
     $1188 = $1187; //@line 1156 "lpc.c"
     $1189 = HEAP32[$1188>>2]|0; //@line 1156 "lpc.c"
     $1190 = (_i64Add(($1186|0),($1189|0),($1182|0),($1183|0))|0); //@line 1156 "lpc.c"
     $1191 = tempRet0; //@line 1156 "lpc.c"
     $1192 = $13; //@line 1156 "lpc.c"
     $1193 = $1192; //@line 1156 "lpc.c"
     HEAP32[$1193>>2] = $1190; //@line 1156 "lpc.c"
     $1194 = (($1192) + 4)|0; //@line 1156 "lpc.c"
     $1195 = $1194; //@line 1156 "lpc.c"
     HEAP32[$1195>>2] = $1191; //@line 1156 "lpc.c"
     $1196 = $6; //@line 1157 "lpc.c"
     $1197 = $12; //@line 1157 "lpc.c"
     $1198 = (($1196) + ($1197<<2)|0); //@line 1157 "lpc.c"
     $1199 = HEAP32[$1198>>2]|0; //@line 1157 "lpc.c"
     $1200 = $13; //@line 1157 "lpc.c"
     $1201 = $1200; //@line 1157 "lpc.c"
     $1202 = HEAP32[$1201>>2]|0; //@line 1157 "lpc.c"
     $1203 = (($1200) + 4)|0; //@line 1157 "lpc.c"
     $1204 = $1203; //@line 1157 "lpc.c"
     $1205 = HEAP32[$1204>>2]|0; //@line 1157 "lpc.c"
     $1206 = $10; //@line 1157 "lpc.c"
     $1207 = (_bitshift64Ashr(($1202|0),($1205|0),($1206|0))|0); //@line 1157 "lpc.c"
     $1208 = tempRet0; //@line 1157 "lpc.c"
     $1209 = (($1199) + ($1207))|0; //@line 1157 "lpc.c"
     $1210 = $11; //@line 1157 "lpc.c"
     $1211 = $12; //@line 1157 "lpc.c"
     $1212 = (($1210) + ($1211<<2)|0); //@line 1157 "lpc.c"
     HEAP32[$1212>>2] = $1209; //@line 1157 "lpc.c"
     $1213 = $12; //@line 1146 "lpc.c"
     $1214 = (($1213) + 1)|0; //@line 1146 "lpc.c"
     $12 = $1214; //@line 1146 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  }
 }
 $1215 = ($18>>>0)>(4); //@line 1162 "lpc.c"
 $1216 = $9;
 if ($1215) {
  $1217 = ($1216>>>0)>(6); //@line 1163 "lpc.c"
  $1218 = $9;
  if ($1217) {
   $1219 = ($1218|0)==(8); //@line 1164 "lpc.c"
   $12 = 0;
   if ($1219) {
    while(1) {
     $1220 = $12; //@line 1165 "lpc.c"
     $1221 = $7; //@line 1165 "lpc.c"
     $1222 = ($1220|0)<($1221|0); //@line 1165 "lpc.c"
     if (!($1222)) {
      break;
     }
     $1223 = $13; //@line 1166 "lpc.c"
     $1224 = $1223; //@line 1166 "lpc.c"
     HEAP32[$1224>>2] = 0; //@line 1166 "lpc.c"
     $1225 = (($1223) + 4)|0; //@line 1166 "lpc.c"
     $1226 = $1225; //@line 1166 "lpc.c"
     HEAP32[$1226>>2] = 0; //@line 1166 "lpc.c"
     $1227 = $8; //@line 1167 "lpc.c"
     $1228 = ((($1227)) + 28|0); //@line 1167 "lpc.c"
     $1229 = HEAP32[$1228>>2]|0; //@line 1167 "lpc.c"
     $1230 = ($1229|0)<(0); //@line 1167 "lpc.c"
     $1231 = $1230 << 31 >> 31; //@line 1167 "lpc.c"
     $1232 = $11; //@line 1167 "lpc.c"
     $1233 = $12; //@line 1167 "lpc.c"
     $1234 = (($1233) - 8)|0; //@line 1167 "lpc.c"
     $1235 = (($1232) + ($1234<<2)|0); //@line 1167 "lpc.c"
     $1236 = HEAP32[$1235>>2]|0; //@line 1167 "lpc.c"
     $1237 = ($1236|0)<(0); //@line 1167 "lpc.c"
     $1238 = $1237 << 31 >> 31; //@line 1167 "lpc.c"
     $1239 = (___muldi3(($1229|0),($1231|0),($1236|0),($1238|0))|0); //@line 1167 "lpc.c"
     $1240 = tempRet0; //@line 1167 "lpc.c"
     $1241 = $13; //@line 1167 "lpc.c"
     $1242 = $1241; //@line 1167 "lpc.c"
     $1243 = HEAP32[$1242>>2]|0; //@line 1167 "lpc.c"
     $1244 = (($1241) + 4)|0; //@line 1167 "lpc.c"
     $1245 = $1244; //@line 1167 "lpc.c"
     $1246 = HEAP32[$1245>>2]|0; //@line 1167 "lpc.c"
     $1247 = (_i64Add(($1243|0),($1246|0),($1239|0),($1240|0))|0); //@line 1167 "lpc.c"
     $1248 = tempRet0; //@line 1167 "lpc.c"
     $1249 = $13; //@line 1167 "lpc.c"
     $1250 = $1249; //@line 1167 "lpc.c"
     HEAP32[$1250>>2] = $1247; //@line 1167 "lpc.c"
     $1251 = (($1249) + 4)|0; //@line 1167 "lpc.c"
     $1252 = $1251; //@line 1167 "lpc.c"
     HEAP32[$1252>>2] = $1248; //@line 1167 "lpc.c"
     $1253 = $8; //@line 1168 "lpc.c"
     $1254 = ((($1253)) + 24|0); //@line 1168 "lpc.c"
     $1255 = HEAP32[$1254>>2]|0; //@line 1168 "lpc.c"
     $1256 = ($1255|0)<(0); //@line 1168 "lpc.c"
     $1257 = $1256 << 31 >> 31; //@line 1168 "lpc.c"
     $1258 = $11; //@line 1168 "lpc.c"
     $1259 = $12; //@line 1168 "lpc.c"
     $1260 = (($1259) - 7)|0; //@line 1168 "lpc.c"
     $1261 = (($1258) + ($1260<<2)|0); //@line 1168 "lpc.c"
     $1262 = HEAP32[$1261>>2]|0; //@line 1168 "lpc.c"
     $1263 = ($1262|0)<(0); //@line 1168 "lpc.c"
     $1264 = $1263 << 31 >> 31; //@line 1168 "lpc.c"
     $1265 = (___muldi3(($1255|0),($1257|0),($1262|0),($1264|0))|0); //@line 1168 "lpc.c"
     $1266 = tempRet0; //@line 1168 "lpc.c"
     $1267 = $13; //@line 1168 "lpc.c"
     $1268 = $1267; //@line 1168 "lpc.c"
     $1269 = HEAP32[$1268>>2]|0; //@line 1168 "lpc.c"
     $1270 = (($1267) + 4)|0; //@line 1168 "lpc.c"
     $1271 = $1270; //@line 1168 "lpc.c"
     $1272 = HEAP32[$1271>>2]|0; //@line 1168 "lpc.c"
     $1273 = (_i64Add(($1269|0),($1272|0),($1265|0),($1266|0))|0); //@line 1168 "lpc.c"
     $1274 = tempRet0; //@line 1168 "lpc.c"
     $1275 = $13; //@line 1168 "lpc.c"
     $1276 = $1275; //@line 1168 "lpc.c"
     HEAP32[$1276>>2] = $1273; //@line 1168 "lpc.c"
     $1277 = (($1275) + 4)|0; //@line 1168 "lpc.c"
     $1278 = $1277; //@line 1168 "lpc.c"
     HEAP32[$1278>>2] = $1274; //@line 1168 "lpc.c"
     $1279 = $8; //@line 1169 "lpc.c"
     $1280 = ((($1279)) + 20|0); //@line 1169 "lpc.c"
     $1281 = HEAP32[$1280>>2]|0; //@line 1169 "lpc.c"
     $1282 = ($1281|0)<(0); //@line 1169 "lpc.c"
     $1283 = $1282 << 31 >> 31; //@line 1169 "lpc.c"
     $1284 = $11; //@line 1169 "lpc.c"
     $1285 = $12; //@line 1169 "lpc.c"
     $1286 = (($1285) - 6)|0; //@line 1169 "lpc.c"
     $1287 = (($1284) + ($1286<<2)|0); //@line 1169 "lpc.c"
     $1288 = HEAP32[$1287>>2]|0; //@line 1169 "lpc.c"
     $1289 = ($1288|0)<(0); //@line 1169 "lpc.c"
     $1290 = $1289 << 31 >> 31; //@line 1169 "lpc.c"
     $1291 = (___muldi3(($1281|0),($1283|0),($1288|0),($1290|0))|0); //@line 1169 "lpc.c"
     $1292 = tempRet0; //@line 1169 "lpc.c"
     $1293 = $13; //@line 1169 "lpc.c"
     $1294 = $1293; //@line 1169 "lpc.c"
     $1295 = HEAP32[$1294>>2]|0; //@line 1169 "lpc.c"
     $1296 = (($1293) + 4)|0; //@line 1169 "lpc.c"
     $1297 = $1296; //@line 1169 "lpc.c"
     $1298 = HEAP32[$1297>>2]|0; //@line 1169 "lpc.c"
     $1299 = (_i64Add(($1295|0),($1298|0),($1291|0),($1292|0))|0); //@line 1169 "lpc.c"
     $1300 = tempRet0; //@line 1169 "lpc.c"
     $1301 = $13; //@line 1169 "lpc.c"
     $1302 = $1301; //@line 1169 "lpc.c"
     HEAP32[$1302>>2] = $1299; //@line 1169 "lpc.c"
     $1303 = (($1301) + 4)|0; //@line 1169 "lpc.c"
     $1304 = $1303; //@line 1169 "lpc.c"
     HEAP32[$1304>>2] = $1300; //@line 1169 "lpc.c"
     $1305 = $8; //@line 1170 "lpc.c"
     $1306 = ((($1305)) + 16|0); //@line 1170 "lpc.c"
     $1307 = HEAP32[$1306>>2]|0; //@line 1170 "lpc.c"
     $1308 = ($1307|0)<(0); //@line 1170 "lpc.c"
     $1309 = $1308 << 31 >> 31; //@line 1170 "lpc.c"
     $1310 = $11; //@line 1170 "lpc.c"
     $1311 = $12; //@line 1170 "lpc.c"
     $1312 = (($1311) - 5)|0; //@line 1170 "lpc.c"
     $1313 = (($1310) + ($1312<<2)|0); //@line 1170 "lpc.c"
     $1314 = HEAP32[$1313>>2]|0; //@line 1170 "lpc.c"
     $1315 = ($1314|0)<(0); //@line 1170 "lpc.c"
     $1316 = $1315 << 31 >> 31; //@line 1170 "lpc.c"
     $1317 = (___muldi3(($1307|0),($1309|0),($1314|0),($1316|0))|0); //@line 1170 "lpc.c"
     $1318 = tempRet0; //@line 1170 "lpc.c"
     $1319 = $13; //@line 1170 "lpc.c"
     $1320 = $1319; //@line 1170 "lpc.c"
     $1321 = HEAP32[$1320>>2]|0; //@line 1170 "lpc.c"
     $1322 = (($1319) + 4)|0; //@line 1170 "lpc.c"
     $1323 = $1322; //@line 1170 "lpc.c"
     $1324 = HEAP32[$1323>>2]|0; //@line 1170 "lpc.c"
     $1325 = (_i64Add(($1321|0),($1324|0),($1317|0),($1318|0))|0); //@line 1170 "lpc.c"
     $1326 = tempRet0; //@line 1170 "lpc.c"
     $1327 = $13; //@line 1170 "lpc.c"
     $1328 = $1327; //@line 1170 "lpc.c"
     HEAP32[$1328>>2] = $1325; //@line 1170 "lpc.c"
     $1329 = (($1327) + 4)|0; //@line 1170 "lpc.c"
     $1330 = $1329; //@line 1170 "lpc.c"
     HEAP32[$1330>>2] = $1326; //@line 1170 "lpc.c"
     $1331 = $8; //@line 1171 "lpc.c"
     $1332 = ((($1331)) + 12|0); //@line 1171 "lpc.c"
     $1333 = HEAP32[$1332>>2]|0; //@line 1171 "lpc.c"
     $1334 = ($1333|0)<(0); //@line 1171 "lpc.c"
     $1335 = $1334 << 31 >> 31; //@line 1171 "lpc.c"
     $1336 = $11; //@line 1171 "lpc.c"
     $1337 = $12; //@line 1171 "lpc.c"
     $1338 = (($1337) - 4)|0; //@line 1171 "lpc.c"
     $1339 = (($1336) + ($1338<<2)|0); //@line 1171 "lpc.c"
     $1340 = HEAP32[$1339>>2]|0; //@line 1171 "lpc.c"
     $1341 = ($1340|0)<(0); //@line 1171 "lpc.c"
     $1342 = $1341 << 31 >> 31; //@line 1171 "lpc.c"
     $1343 = (___muldi3(($1333|0),($1335|0),($1340|0),($1342|0))|0); //@line 1171 "lpc.c"
     $1344 = tempRet0; //@line 1171 "lpc.c"
     $1345 = $13; //@line 1171 "lpc.c"
     $1346 = $1345; //@line 1171 "lpc.c"
     $1347 = HEAP32[$1346>>2]|0; //@line 1171 "lpc.c"
     $1348 = (($1345) + 4)|0; //@line 1171 "lpc.c"
     $1349 = $1348; //@line 1171 "lpc.c"
     $1350 = HEAP32[$1349>>2]|0; //@line 1171 "lpc.c"
     $1351 = (_i64Add(($1347|0),($1350|0),($1343|0),($1344|0))|0); //@line 1171 "lpc.c"
     $1352 = tempRet0; //@line 1171 "lpc.c"
     $1353 = $13; //@line 1171 "lpc.c"
     $1354 = $1353; //@line 1171 "lpc.c"
     HEAP32[$1354>>2] = $1351; //@line 1171 "lpc.c"
     $1355 = (($1353) + 4)|0; //@line 1171 "lpc.c"
     $1356 = $1355; //@line 1171 "lpc.c"
     HEAP32[$1356>>2] = $1352; //@line 1171 "lpc.c"
     $1357 = $8; //@line 1172 "lpc.c"
     $1358 = ((($1357)) + 8|0); //@line 1172 "lpc.c"
     $1359 = HEAP32[$1358>>2]|0; //@line 1172 "lpc.c"
     $1360 = ($1359|0)<(0); //@line 1172 "lpc.c"
     $1361 = $1360 << 31 >> 31; //@line 1172 "lpc.c"
     $1362 = $11; //@line 1172 "lpc.c"
     $1363 = $12; //@line 1172 "lpc.c"
     $1364 = (($1363) - 3)|0; //@line 1172 "lpc.c"
     $1365 = (($1362) + ($1364<<2)|0); //@line 1172 "lpc.c"
     $1366 = HEAP32[$1365>>2]|0; //@line 1172 "lpc.c"
     $1367 = ($1366|0)<(0); //@line 1172 "lpc.c"
     $1368 = $1367 << 31 >> 31; //@line 1172 "lpc.c"
     $1369 = (___muldi3(($1359|0),($1361|0),($1366|0),($1368|0))|0); //@line 1172 "lpc.c"
     $1370 = tempRet0; //@line 1172 "lpc.c"
     $1371 = $13; //@line 1172 "lpc.c"
     $1372 = $1371; //@line 1172 "lpc.c"
     $1373 = HEAP32[$1372>>2]|0; //@line 1172 "lpc.c"
     $1374 = (($1371) + 4)|0; //@line 1172 "lpc.c"
     $1375 = $1374; //@line 1172 "lpc.c"
     $1376 = HEAP32[$1375>>2]|0; //@line 1172 "lpc.c"
     $1377 = (_i64Add(($1373|0),($1376|0),($1369|0),($1370|0))|0); //@line 1172 "lpc.c"
     $1378 = tempRet0; //@line 1172 "lpc.c"
     $1379 = $13; //@line 1172 "lpc.c"
     $1380 = $1379; //@line 1172 "lpc.c"
     HEAP32[$1380>>2] = $1377; //@line 1172 "lpc.c"
     $1381 = (($1379) + 4)|0; //@line 1172 "lpc.c"
     $1382 = $1381; //@line 1172 "lpc.c"
     HEAP32[$1382>>2] = $1378; //@line 1172 "lpc.c"
     $1383 = $8; //@line 1173 "lpc.c"
     $1384 = ((($1383)) + 4|0); //@line 1173 "lpc.c"
     $1385 = HEAP32[$1384>>2]|0; //@line 1173 "lpc.c"
     $1386 = ($1385|0)<(0); //@line 1173 "lpc.c"
     $1387 = $1386 << 31 >> 31; //@line 1173 "lpc.c"
     $1388 = $11; //@line 1173 "lpc.c"
     $1389 = $12; //@line 1173 "lpc.c"
     $1390 = (($1389) - 2)|0; //@line 1173 "lpc.c"
     $1391 = (($1388) + ($1390<<2)|0); //@line 1173 "lpc.c"
     $1392 = HEAP32[$1391>>2]|0; //@line 1173 "lpc.c"
     $1393 = ($1392|0)<(0); //@line 1173 "lpc.c"
     $1394 = $1393 << 31 >> 31; //@line 1173 "lpc.c"
     $1395 = (___muldi3(($1385|0),($1387|0),($1392|0),($1394|0))|0); //@line 1173 "lpc.c"
     $1396 = tempRet0; //@line 1173 "lpc.c"
     $1397 = $13; //@line 1173 "lpc.c"
     $1398 = $1397; //@line 1173 "lpc.c"
     $1399 = HEAP32[$1398>>2]|0; //@line 1173 "lpc.c"
     $1400 = (($1397) + 4)|0; //@line 1173 "lpc.c"
     $1401 = $1400; //@line 1173 "lpc.c"
     $1402 = HEAP32[$1401>>2]|0; //@line 1173 "lpc.c"
     $1403 = (_i64Add(($1399|0),($1402|0),($1395|0),($1396|0))|0); //@line 1173 "lpc.c"
     $1404 = tempRet0; //@line 1173 "lpc.c"
     $1405 = $13; //@line 1173 "lpc.c"
     $1406 = $1405; //@line 1173 "lpc.c"
     HEAP32[$1406>>2] = $1403; //@line 1173 "lpc.c"
     $1407 = (($1405) + 4)|0; //@line 1173 "lpc.c"
     $1408 = $1407; //@line 1173 "lpc.c"
     HEAP32[$1408>>2] = $1404; //@line 1173 "lpc.c"
     $1409 = $8; //@line 1174 "lpc.c"
     $1410 = HEAP32[$1409>>2]|0; //@line 1174 "lpc.c"
     $1411 = ($1410|0)<(0); //@line 1174 "lpc.c"
     $1412 = $1411 << 31 >> 31; //@line 1174 "lpc.c"
     $1413 = $11; //@line 1174 "lpc.c"
     $1414 = $12; //@line 1174 "lpc.c"
     $1415 = (($1414) - 1)|0; //@line 1174 "lpc.c"
     $1416 = (($1413) + ($1415<<2)|0); //@line 1174 "lpc.c"
     $1417 = HEAP32[$1416>>2]|0; //@line 1174 "lpc.c"
     $1418 = ($1417|0)<(0); //@line 1174 "lpc.c"
     $1419 = $1418 << 31 >> 31; //@line 1174 "lpc.c"
     $1420 = (___muldi3(($1410|0),($1412|0),($1417|0),($1419|0))|0); //@line 1174 "lpc.c"
     $1421 = tempRet0; //@line 1174 "lpc.c"
     $1422 = $13; //@line 1174 "lpc.c"
     $1423 = $1422; //@line 1174 "lpc.c"
     $1424 = HEAP32[$1423>>2]|0; //@line 1174 "lpc.c"
     $1425 = (($1422) + 4)|0; //@line 1174 "lpc.c"
     $1426 = $1425; //@line 1174 "lpc.c"
     $1427 = HEAP32[$1426>>2]|0; //@line 1174 "lpc.c"
     $1428 = (_i64Add(($1424|0),($1427|0),($1420|0),($1421|0))|0); //@line 1174 "lpc.c"
     $1429 = tempRet0; //@line 1174 "lpc.c"
     $1430 = $13; //@line 1174 "lpc.c"
     $1431 = $1430; //@line 1174 "lpc.c"
     HEAP32[$1431>>2] = $1428; //@line 1174 "lpc.c"
     $1432 = (($1430) + 4)|0; //@line 1174 "lpc.c"
     $1433 = $1432; //@line 1174 "lpc.c"
     HEAP32[$1433>>2] = $1429; //@line 1174 "lpc.c"
     $1434 = $6; //@line 1175 "lpc.c"
     $1435 = $12; //@line 1175 "lpc.c"
     $1436 = (($1434) + ($1435<<2)|0); //@line 1175 "lpc.c"
     $1437 = HEAP32[$1436>>2]|0; //@line 1175 "lpc.c"
     $1438 = $13; //@line 1175 "lpc.c"
     $1439 = $1438; //@line 1175 "lpc.c"
     $1440 = HEAP32[$1439>>2]|0; //@line 1175 "lpc.c"
     $1441 = (($1438) + 4)|0; //@line 1175 "lpc.c"
     $1442 = $1441; //@line 1175 "lpc.c"
     $1443 = HEAP32[$1442>>2]|0; //@line 1175 "lpc.c"
     $1444 = $10; //@line 1175 "lpc.c"
     $1445 = (_bitshift64Ashr(($1440|0),($1443|0),($1444|0))|0); //@line 1175 "lpc.c"
     $1446 = tempRet0; //@line 1175 "lpc.c"
     $1447 = (($1437) + ($1445))|0; //@line 1175 "lpc.c"
     $1448 = $11; //@line 1175 "lpc.c"
     $1449 = $12; //@line 1175 "lpc.c"
     $1450 = (($1448) + ($1449<<2)|0); //@line 1175 "lpc.c"
     HEAP32[$1450>>2] = $1447; //@line 1175 "lpc.c"
     $1451 = $12; //@line 1165 "lpc.c"
     $1452 = (($1451) + 1)|0; //@line 1165 "lpc.c"
     $12 = $1452; //@line 1165 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $1453 = $12; //@line 1179 "lpc.c"
     $1454 = $7; //@line 1179 "lpc.c"
     $1455 = ($1453|0)<($1454|0); //@line 1179 "lpc.c"
     if (!($1455)) {
      break;
     }
     $1456 = $13; //@line 1180 "lpc.c"
     $1457 = $1456; //@line 1180 "lpc.c"
     HEAP32[$1457>>2] = 0; //@line 1180 "lpc.c"
     $1458 = (($1456) + 4)|0; //@line 1180 "lpc.c"
     $1459 = $1458; //@line 1180 "lpc.c"
     HEAP32[$1459>>2] = 0; //@line 1180 "lpc.c"
     $1460 = $8; //@line 1181 "lpc.c"
     $1461 = ((($1460)) + 24|0); //@line 1181 "lpc.c"
     $1462 = HEAP32[$1461>>2]|0; //@line 1181 "lpc.c"
     $1463 = ($1462|0)<(0); //@line 1181 "lpc.c"
     $1464 = $1463 << 31 >> 31; //@line 1181 "lpc.c"
     $1465 = $11; //@line 1181 "lpc.c"
     $1466 = $12; //@line 1181 "lpc.c"
     $1467 = (($1466) - 7)|0; //@line 1181 "lpc.c"
     $1468 = (($1465) + ($1467<<2)|0); //@line 1181 "lpc.c"
     $1469 = HEAP32[$1468>>2]|0; //@line 1181 "lpc.c"
     $1470 = ($1469|0)<(0); //@line 1181 "lpc.c"
     $1471 = $1470 << 31 >> 31; //@line 1181 "lpc.c"
     $1472 = (___muldi3(($1462|0),($1464|0),($1469|0),($1471|0))|0); //@line 1181 "lpc.c"
     $1473 = tempRet0; //@line 1181 "lpc.c"
     $1474 = $13; //@line 1181 "lpc.c"
     $1475 = $1474; //@line 1181 "lpc.c"
     $1476 = HEAP32[$1475>>2]|0; //@line 1181 "lpc.c"
     $1477 = (($1474) + 4)|0; //@line 1181 "lpc.c"
     $1478 = $1477; //@line 1181 "lpc.c"
     $1479 = HEAP32[$1478>>2]|0; //@line 1181 "lpc.c"
     $1480 = (_i64Add(($1476|0),($1479|0),($1472|0),($1473|0))|0); //@line 1181 "lpc.c"
     $1481 = tempRet0; //@line 1181 "lpc.c"
     $1482 = $13; //@line 1181 "lpc.c"
     $1483 = $1482; //@line 1181 "lpc.c"
     HEAP32[$1483>>2] = $1480; //@line 1181 "lpc.c"
     $1484 = (($1482) + 4)|0; //@line 1181 "lpc.c"
     $1485 = $1484; //@line 1181 "lpc.c"
     HEAP32[$1485>>2] = $1481; //@line 1181 "lpc.c"
     $1486 = $8; //@line 1182 "lpc.c"
     $1487 = ((($1486)) + 20|0); //@line 1182 "lpc.c"
     $1488 = HEAP32[$1487>>2]|0; //@line 1182 "lpc.c"
     $1489 = ($1488|0)<(0); //@line 1182 "lpc.c"
     $1490 = $1489 << 31 >> 31; //@line 1182 "lpc.c"
     $1491 = $11; //@line 1182 "lpc.c"
     $1492 = $12; //@line 1182 "lpc.c"
     $1493 = (($1492) - 6)|0; //@line 1182 "lpc.c"
     $1494 = (($1491) + ($1493<<2)|0); //@line 1182 "lpc.c"
     $1495 = HEAP32[$1494>>2]|0; //@line 1182 "lpc.c"
     $1496 = ($1495|0)<(0); //@line 1182 "lpc.c"
     $1497 = $1496 << 31 >> 31; //@line 1182 "lpc.c"
     $1498 = (___muldi3(($1488|0),($1490|0),($1495|0),($1497|0))|0); //@line 1182 "lpc.c"
     $1499 = tempRet0; //@line 1182 "lpc.c"
     $1500 = $13; //@line 1182 "lpc.c"
     $1501 = $1500; //@line 1182 "lpc.c"
     $1502 = HEAP32[$1501>>2]|0; //@line 1182 "lpc.c"
     $1503 = (($1500) + 4)|0; //@line 1182 "lpc.c"
     $1504 = $1503; //@line 1182 "lpc.c"
     $1505 = HEAP32[$1504>>2]|0; //@line 1182 "lpc.c"
     $1506 = (_i64Add(($1502|0),($1505|0),($1498|0),($1499|0))|0); //@line 1182 "lpc.c"
     $1507 = tempRet0; //@line 1182 "lpc.c"
     $1508 = $13; //@line 1182 "lpc.c"
     $1509 = $1508; //@line 1182 "lpc.c"
     HEAP32[$1509>>2] = $1506; //@line 1182 "lpc.c"
     $1510 = (($1508) + 4)|0; //@line 1182 "lpc.c"
     $1511 = $1510; //@line 1182 "lpc.c"
     HEAP32[$1511>>2] = $1507; //@line 1182 "lpc.c"
     $1512 = $8; //@line 1183 "lpc.c"
     $1513 = ((($1512)) + 16|0); //@line 1183 "lpc.c"
     $1514 = HEAP32[$1513>>2]|0; //@line 1183 "lpc.c"
     $1515 = ($1514|0)<(0); //@line 1183 "lpc.c"
     $1516 = $1515 << 31 >> 31; //@line 1183 "lpc.c"
     $1517 = $11; //@line 1183 "lpc.c"
     $1518 = $12; //@line 1183 "lpc.c"
     $1519 = (($1518) - 5)|0; //@line 1183 "lpc.c"
     $1520 = (($1517) + ($1519<<2)|0); //@line 1183 "lpc.c"
     $1521 = HEAP32[$1520>>2]|0; //@line 1183 "lpc.c"
     $1522 = ($1521|0)<(0); //@line 1183 "lpc.c"
     $1523 = $1522 << 31 >> 31; //@line 1183 "lpc.c"
     $1524 = (___muldi3(($1514|0),($1516|0),($1521|0),($1523|0))|0); //@line 1183 "lpc.c"
     $1525 = tempRet0; //@line 1183 "lpc.c"
     $1526 = $13; //@line 1183 "lpc.c"
     $1527 = $1526; //@line 1183 "lpc.c"
     $1528 = HEAP32[$1527>>2]|0; //@line 1183 "lpc.c"
     $1529 = (($1526) + 4)|0; //@line 1183 "lpc.c"
     $1530 = $1529; //@line 1183 "lpc.c"
     $1531 = HEAP32[$1530>>2]|0; //@line 1183 "lpc.c"
     $1532 = (_i64Add(($1528|0),($1531|0),($1524|0),($1525|0))|0); //@line 1183 "lpc.c"
     $1533 = tempRet0; //@line 1183 "lpc.c"
     $1534 = $13; //@line 1183 "lpc.c"
     $1535 = $1534; //@line 1183 "lpc.c"
     HEAP32[$1535>>2] = $1532; //@line 1183 "lpc.c"
     $1536 = (($1534) + 4)|0; //@line 1183 "lpc.c"
     $1537 = $1536; //@line 1183 "lpc.c"
     HEAP32[$1537>>2] = $1533; //@line 1183 "lpc.c"
     $1538 = $8; //@line 1184 "lpc.c"
     $1539 = ((($1538)) + 12|0); //@line 1184 "lpc.c"
     $1540 = HEAP32[$1539>>2]|0; //@line 1184 "lpc.c"
     $1541 = ($1540|0)<(0); //@line 1184 "lpc.c"
     $1542 = $1541 << 31 >> 31; //@line 1184 "lpc.c"
     $1543 = $11; //@line 1184 "lpc.c"
     $1544 = $12; //@line 1184 "lpc.c"
     $1545 = (($1544) - 4)|0; //@line 1184 "lpc.c"
     $1546 = (($1543) + ($1545<<2)|0); //@line 1184 "lpc.c"
     $1547 = HEAP32[$1546>>2]|0; //@line 1184 "lpc.c"
     $1548 = ($1547|0)<(0); //@line 1184 "lpc.c"
     $1549 = $1548 << 31 >> 31; //@line 1184 "lpc.c"
     $1550 = (___muldi3(($1540|0),($1542|0),($1547|0),($1549|0))|0); //@line 1184 "lpc.c"
     $1551 = tempRet0; //@line 1184 "lpc.c"
     $1552 = $13; //@line 1184 "lpc.c"
     $1553 = $1552; //@line 1184 "lpc.c"
     $1554 = HEAP32[$1553>>2]|0; //@line 1184 "lpc.c"
     $1555 = (($1552) + 4)|0; //@line 1184 "lpc.c"
     $1556 = $1555; //@line 1184 "lpc.c"
     $1557 = HEAP32[$1556>>2]|0; //@line 1184 "lpc.c"
     $1558 = (_i64Add(($1554|0),($1557|0),($1550|0),($1551|0))|0); //@line 1184 "lpc.c"
     $1559 = tempRet0; //@line 1184 "lpc.c"
     $1560 = $13; //@line 1184 "lpc.c"
     $1561 = $1560; //@line 1184 "lpc.c"
     HEAP32[$1561>>2] = $1558; //@line 1184 "lpc.c"
     $1562 = (($1560) + 4)|0; //@line 1184 "lpc.c"
     $1563 = $1562; //@line 1184 "lpc.c"
     HEAP32[$1563>>2] = $1559; //@line 1184 "lpc.c"
     $1564 = $8; //@line 1185 "lpc.c"
     $1565 = ((($1564)) + 8|0); //@line 1185 "lpc.c"
     $1566 = HEAP32[$1565>>2]|0; //@line 1185 "lpc.c"
     $1567 = ($1566|0)<(0); //@line 1185 "lpc.c"
     $1568 = $1567 << 31 >> 31; //@line 1185 "lpc.c"
     $1569 = $11; //@line 1185 "lpc.c"
     $1570 = $12; //@line 1185 "lpc.c"
     $1571 = (($1570) - 3)|0; //@line 1185 "lpc.c"
     $1572 = (($1569) + ($1571<<2)|0); //@line 1185 "lpc.c"
     $1573 = HEAP32[$1572>>2]|0; //@line 1185 "lpc.c"
     $1574 = ($1573|0)<(0); //@line 1185 "lpc.c"
     $1575 = $1574 << 31 >> 31; //@line 1185 "lpc.c"
     $1576 = (___muldi3(($1566|0),($1568|0),($1573|0),($1575|0))|0); //@line 1185 "lpc.c"
     $1577 = tempRet0; //@line 1185 "lpc.c"
     $1578 = $13; //@line 1185 "lpc.c"
     $1579 = $1578; //@line 1185 "lpc.c"
     $1580 = HEAP32[$1579>>2]|0; //@line 1185 "lpc.c"
     $1581 = (($1578) + 4)|0; //@line 1185 "lpc.c"
     $1582 = $1581; //@line 1185 "lpc.c"
     $1583 = HEAP32[$1582>>2]|0; //@line 1185 "lpc.c"
     $1584 = (_i64Add(($1580|0),($1583|0),($1576|0),($1577|0))|0); //@line 1185 "lpc.c"
     $1585 = tempRet0; //@line 1185 "lpc.c"
     $1586 = $13; //@line 1185 "lpc.c"
     $1587 = $1586; //@line 1185 "lpc.c"
     HEAP32[$1587>>2] = $1584; //@line 1185 "lpc.c"
     $1588 = (($1586) + 4)|0; //@line 1185 "lpc.c"
     $1589 = $1588; //@line 1185 "lpc.c"
     HEAP32[$1589>>2] = $1585; //@line 1185 "lpc.c"
     $1590 = $8; //@line 1186 "lpc.c"
     $1591 = ((($1590)) + 4|0); //@line 1186 "lpc.c"
     $1592 = HEAP32[$1591>>2]|0; //@line 1186 "lpc.c"
     $1593 = ($1592|0)<(0); //@line 1186 "lpc.c"
     $1594 = $1593 << 31 >> 31; //@line 1186 "lpc.c"
     $1595 = $11; //@line 1186 "lpc.c"
     $1596 = $12; //@line 1186 "lpc.c"
     $1597 = (($1596) - 2)|0; //@line 1186 "lpc.c"
     $1598 = (($1595) + ($1597<<2)|0); //@line 1186 "lpc.c"
     $1599 = HEAP32[$1598>>2]|0; //@line 1186 "lpc.c"
     $1600 = ($1599|0)<(0); //@line 1186 "lpc.c"
     $1601 = $1600 << 31 >> 31; //@line 1186 "lpc.c"
     $1602 = (___muldi3(($1592|0),($1594|0),($1599|0),($1601|0))|0); //@line 1186 "lpc.c"
     $1603 = tempRet0; //@line 1186 "lpc.c"
     $1604 = $13; //@line 1186 "lpc.c"
     $1605 = $1604; //@line 1186 "lpc.c"
     $1606 = HEAP32[$1605>>2]|0; //@line 1186 "lpc.c"
     $1607 = (($1604) + 4)|0; //@line 1186 "lpc.c"
     $1608 = $1607; //@line 1186 "lpc.c"
     $1609 = HEAP32[$1608>>2]|0; //@line 1186 "lpc.c"
     $1610 = (_i64Add(($1606|0),($1609|0),($1602|0),($1603|0))|0); //@line 1186 "lpc.c"
     $1611 = tempRet0; //@line 1186 "lpc.c"
     $1612 = $13; //@line 1186 "lpc.c"
     $1613 = $1612; //@line 1186 "lpc.c"
     HEAP32[$1613>>2] = $1610; //@line 1186 "lpc.c"
     $1614 = (($1612) + 4)|0; //@line 1186 "lpc.c"
     $1615 = $1614; //@line 1186 "lpc.c"
     HEAP32[$1615>>2] = $1611; //@line 1186 "lpc.c"
     $1616 = $8; //@line 1187 "lpc.c"
     $1617 = HEAP32[$1616>>2]|0; //@line 1187 "lpc.c"
     $1618 = ($1617|0)<(0); //@line 1187 "lpc.c"
     $1619 = $1618 << 31 >> 31; //@line 1187 "lpc.c"
     $1620 = $11; //@line 1187 "lpc.c"
     $1621 = $12; //@line 1187 "lpc.c"
     $1622 = (($1621) - 1)|0; //@line 1187 "lpc.c"
     $1623 = (($1620) + ($1622<<2)|0); //@line 1187 "lpc.c"
     $1624 = HEAP32[$1623>>2]|0; //@line 1187 "lpc.c"
     $1625 = ($1624|0)<(0); //@line 1187 "lpc.c"
     $1626 = $1625 << 31 >> 31; //@line 1187 "lpc.c"
     $1627 = (___muldi3(($1617|0),($1619|0),($1624|0),($1626|0))|0); //@line 1187 "lpc.c"
     $1628 = tempRet0; //@line 1187 "lpc.c"
     $1629 = $13; //@line 1187 "lpc.c"
     $1630 = $1629; //@line 1187 "lpc.c"
     $1631 = HEAP32[$1630>>2]|0; //@line 1187 "lpc.c"
     $1632 = (($1629) + 4)|0; //@line 1187 "lpc.c"
     $1633 = $1632; //@line 1187 "lpc.c"
     $1634 = HEAP32[$1633>>2]|0; //@line 1187 "lpc.c"
     $1635 = (_i64Add(($1631|0),($1634|0),($1627|0),($1628|0))|0); //@line 1187 "lpc.c"
     $1636 = tempRet0; //@line 1187 "lpc.c"
     $1637 = $13; //@line 1187 "lpc.c"
     $1638 = $1637; //@line 1187 "lpc.c"
     HEAP32[$1638>>2] = $1635; //@line 1187 "lpc.c"
     $1639 = (($1637) + 4)|0; //@line 1187 "lpc.c"
     $1640 = $1639; //@line 1187 "lpc.c"
     HEAP32[$1640>>2] = $1636; //@line 1187 "lpc.c"
     $1641 = $6; //@line 1188 "lpc.c"
     $1642 = $12; //@line 1188 "lpc.c"
     $1643 = (($1641) + ($1642<<2)|0); //@line 1188 "lpc.c"
     $1644 = HEAP32[$1643>>2]|0; //@line 1188 "lpc.c"
     $1645 = $13; //@line 1188 "lpc.c"
     $1646 = $1645; //@line 1188 "lpc.c"
     $1647 = HEAP32[$1646>>2]|0; //@line 1188 "lpc.c"
     $1648 = (($1645) + 4)|0; //@line 1188 "lpc.c"
     $1649 = $1648; //@line 1188 "lpc.c"
     $1650 = HEAP32[$1649>>2]|0; //@line 1188 "lpc.c"
     $1651 = $10; //@line 1188 "lpc.c"
     $1652 = (_bitshift64Ashr(($1647|0),($1650|0),($1651|0))|0); //@line 1188 "lpc.c"
     $1653 = tempRet0; //@line 1188 "lpc.c"
     $1654 = (($1644) + ($1652))|0; //@line 1188 "lpc.c"
     $1655 = $11; //@line 1188 "lpc.c"
     $1656 = $12; //@line 1188 "lpc.c"
     $1657 = (($1655) + ($1656<<2)|0); //@line 1188 "lpc.c"
     HEAP32[$1657>>2] = $1654; //@line 1188 "lpc.c"
     $1658 = $12; //@line 1179 "lpc.c"
     $1659 = (($1658) + 1)|0; //@line 1179 "lpc.c"
     $12 = $1659; //@line 1179 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  } else {
   $1660 = ($1218|0)==(6); //@line 1193 "lpc.c"
   $12 = 0;
   if ($1660) {
    while(1) {
     $1661 = $12; //@line 1194 "lpc.c"
     $1662 = $7; //@line 1194 "lpc.c"
     $1663 = ($1661|0)<($1662|0); //@line 1194 "lpc.c"
     if (!($1663)) {
      break;
     }
     $1664 = $13; //@line 1195 "lpc.c"
     $1665 = $1664; //@line 1195 "lpc.c"
     HEAP32[$1665>>2] = 0; //@line 1195 "lpc.c"
     $1666 = (($1664) + 4)|0; //@line 1195 "lpc.c"
     $1667 = $1666; //@line 1195 "lpc.c"
     HEAP32[$1667>>2] = 0; //@line 1195 "lpc.c"
     $1668 = $8; //@line 1196 "lpc.c"
     $1669 = ((($1668)) + 20|0); //@line 1196 "lpc.c"
     $1670 = HEAP32[$1669>>2]|0; //@line 1196 "lpc.c"
     $1671 = ($1670|0)<(0); //@line 1196 "lpc.c"
     $1672 = $1671 << 31 >> 31; //@line 1196 "lpc.c"
     $1673 = $11; //@line 1196 "lpc.c"
     $1674 = $12; //@line 1196 "lpc.c"
     $1675 = (($1674) - 6)|0; //@line 1196 "lpc.c"
     $1676 = (($1673) + ($1675<<2)|0); //@line 1196 "lpc.c"
     $1677 = HEAP32[$1676>>2]|0; //@line 1196 "lpc.c"
     $1678 = ($1677|0)<(0); //@line 1196 "lpc.c"
     $1679 = $1678 << 31 >> 31; //@line 1196 "lpc.c"
     $1680 = (___muldi3(($1670|0),($1672|0),($1677|0),($1679|0))|0); //@line 1196 "lpc.c"
     $1681 = tempRet0; //@line 1196 "lpc.c"
     $1682 = $13; //@line 1196 "lpc.c"
     $1683 = $1682; //@line 1196 "lpc.c"
     $1684 = HEAP32[$1683>>2]|0; //@line 1196 "lpc.c"
     $1685 = (($1682) + 4)|0; //@line 1196 "lpc.c"
     $1686 = $1685; //@line 1196 "lpc.c"
     $1687 = HEAP32[$1686>>2]|0; //@line 1196 "lpc.c"
     $1688 = (_i64Add(($1684|0),($1687|0),($1680|0),($1681|0))|0); //@line 1196 "lpc.c"
     $1689 = tempRet0; //@line 1196 "lpc.c"
     $1690 = $13; //@line 1196 "lpc.c"
     $1691 = $1690; //@line 1196 "lpc.c"
     HEAP32[$1691>>2] = $1688; //@line 1196 "lpc.c"
     $1692 = (($1690) + 4)|0; //@line 1196 "lpc.c"
     $1693 = $1692; //@line 1196 "lpc.c"
     HEAP32[$1693>>2] = $1689; //@line 1196 "lpc.c"
     $1694 = $8; //@line 1197 "lpc.c"
     $1695 = ((($1694)) + 16|0); //@line 1197 "lpc.c"
     $1696 = HEAP32[$1695>>2]|0; //@line 1197 "lpc.c"
     $1697 = ($1696|0)<(0); //@line 1197 "lpc.c"
     $1698 = $1697 << 31 >> 31; //@line 1197 "lpc.c"
     $1699 = $11; //@line 1197 "lpc.c"
     $1700 = $12; //@line 1197 "lpc.c"
     $1701 = (($1700) - 5)|0; //@line 1197 "lpc.c"
     $1702 = (($1699) + ($1701<<2)|0); //@line 1197 "lpc.c"
     $1703 = HEAP32[$1702>>2]|0; //@line 1197 "lpc.c"
     $1704 = ($1703|0)<(0); //@line 1197 "lpc.c"
     $1705 = $1704 << 31 >> 31; //@line 1197 "lpc.c"
     $1706 = (___muldi3(($1696|0),($1698|0),($1703|0),($1705|0))|0); //@line 1197 "lpc.c"
     $1707 = tempRet0; //@line 1197 "lpc.c"
     $1708 = $13; //@line 1197 "lpc.c"
     $1709 = $1708; //@line 1197 "lpc.c"
     $1710 = HEAP32[$1709>>2]|0; //@line 1197 "lpc.c"
     $1711 = (($1708) + 4)|0; //@line 1197 "lpc.c"
     $1712 = $1711; //@line 1197 "lpc.c"
     $1713 = HEAP32[$1712>>2]|0; //@line 1197 "lpc.c"
     $1714 = (_i64Add(($1710|0),($1713|0),($1706|0),($1707|0))|0); //@line 1197 "lpc.c"
     $1715 = tempRet0; //@line 1197 "lpc.c"
     $1716 = $13; //@line 1197 "lpc.c"
     $1717 = $1716; //@line 1197 "lpc.c"
     HEAP32[$1717>>2] = $1714; //@line 1197 "lpc.c"
     $1718 = (($1716) + 4)|0; //@line 1197 "lpc.c"
     $1719 = $1718; //@line 1197 "lpc.c"
     HEAP32[$1719>>2] = $1715; //@line 1197 "lpc.c"
     $1720 = $8; //@line 1198 "lpc.c"
     $1721 = ((($1720)) + 12|0); //@line 1198 "lpc.c"
     $1722 = HEAP32[$1721>>2]|0; //@line 1198 "lpc.c"
     $1723 = ($1722|0)<(0); //@line 1198 "lpc.c"
     $1724 = $1723 << 31 >> 31; //@line 1198 "lpc.c"
     $1725 = $11; //@line 1198 "lpc.c"
     $1726 = $12; //@line 1198 "lpc.c"
     $1727 = (($1726) - 4)|0; //@line 1198 "lpc.c"
     $1728 = (($1725) + ($1727<<2)|0); //@line 1198 "lpc.c"
     $1729 = HEAP32[$1728>>2]|0; //@line 1198 "lpc.c"
     $1730 = ($1729|0)<(0); //@line 1198 "lpc.c"
     $1731 = $1730 << 31 >> 31; //@line 1198 "lpc.c"
     $1732 = (___muldi3(($1722|0),($1724|0),($1729|0),($1731|0))|0); //@line 1198 "lpc.c"
     $1733 = tempRet0; //@line 1198 "lpc.c"
     $1734 = $13; //@line 1198 "lpc.c"
     $1735 = $1734; //@line 1198 "lpc.c"
     $1736 = HEAP32[$1735>>2]|0; //@line 1198 "lpc.c"
     $1737 = (($1734) + 4)|0; //@line 1198 "lpc.c"
     $1738 = $1737; //@line 1198 "lpc.c"
     $1739 = HEAP32[$1738>>2]|0; //@line 1198 "lpc.c"
     $1740 = (_i64Add(($1736|0),($1739|0),($1732|0),($1733|0))|0); //@line 1198 "lpc.c"
     $1741 = tempRet0; //@line 1198 "lpc.c"
     $1742 = $13; //@line 1198 "lpc.c"
     $1743 = $1742; //@line 1198 "lpc.c"
     HEAP32[$1743>>2] = $1740; //@line 1198 "lpc.c"
     $1744 = (($1742) + 4)|0; //@line 1198 "lpc.c"
     $1745 = $1744; //@line 1198 "lpc.c"
     HEAP32[$1745>>2] = $1741; //@line 1198 "lpc.c"
     $1746 = $8; //@line 1199 "lpc.c"
     $1747 = ((($1746)) + 8|0); //@line 1199 "lpc.c"
     $1748 = HEAP32[$1747>>2]|0; //@line 1199 "lpc.c"
     $1749 = ($1748|0)<(0); //@line 1199 "lpc.c"
     $1750 = $1749 << 31 >> 31; //@line 1199 "lpc.c"
     $1751 = $11; //@line 1199 "lpc.c"
     $1752 = $12; //@line 1199 "lpc.c"
     $1753 = (($1752) - 3)|0; //@line 1199 "lpc.c"
     $1754 = (($1751) + ($1753<<2)|0); //@line 1199 "lpc.c"
     $1755 = HEAP32[$1754>>2]|0; //@line 1199 "lpc.c"
     $1756 = ($1755|0)<(0); //@line 1199 "lpc.c"
     $1757 = $1756 << 31 >> 31; //@line 1199 "lpc.c"
     $1758 = (___muldi3(($1748|0),($1750|0),($1755|0),($1757|0))|0); //@line 1199 "lpc.c"
     $1759 = tempRet0; //@line 1199 "lpc.c"
     $1760 = $13; //@line 1199 "lpc.c"
     $1761 = $1760; //@line 1199 "lpc.c"
     $1762 = HEAP32[$1761>>2]|0; //@line 1199 "lpc.c"
     $1763 = (($1760) + 4)|0; //@line 1199 "lpc.c"
     $1764 = $1763; //@line 1199 "lpc.c"
     $1765 = HEAP32[$1764>>2]|0; //@line 1199 "lpc.c"
     $1766 = (_i64Add(($1762|0),($1765|0),($1758|0),($1759|0))|0); //@line 1199 "lpc.c"
     $1767 = tempRet0; //@line 1199 "lpc.c"
     $1768 = $13; //@line 1199 "lpc.c"
     $1769 = $1768; //@line 1199 "lpc.c"
     HEAP32[$1769>>2] = $1766; //@line 1199 "lpc.c"
     $1770 = (($1768) + 4)|0; //@line 1199 "lpc.c"
     $1771 = $1770; //@line 1199 "lpc.c"
     HEAP32[$1771>>2] = $1767; //@line 1199 "lpc.c"
     $1772 = $8; //@line 1200 "lpc.c"
     $1773 = ((($1772)) + 4|0); //@line 1200 "lpc.c"
     $1774 = HEAP32[$1773>>2]|0; //@line 1200 "lpc.c"
     $1775 = ($1774|0)<(0); //@line 1200 "lpc.c"
     $1776 = $1775 << 31 >> 31; //@line 1200 "lpc.c"
     $1777 = $11; //@line 1200 "lpc.c"
     $1778 = $12; //@line 1200 "lpc.c"
     $1779 = (($1778) - 2)|0; //@line 1200 "lpc.c"
     $1780 = (($1777) + ($1779<<2)|0); //@line 1200 "lpc.c"
     $1781 = HEAP32[$1780>>2]|0; //@line 1200 "lpc.c"
     $1782 = ($1781|0)<(0); //@line 1200 "lpc.c"
     $1783 = $1782 << 31 >> 31; //@line 1200 "lpc.c"
     $1784 = (___muldi3(($1774|0),($1776|0),($1781|0),($1783|0))|0); //@line 1200 "lpc.c"
     $1785 = tempRet0; //@line 1200 "lpc.c"
     $1786 = $13; //@line 1200 "lpc.c"
     $1787 = $1786; //@line 1200 "lpc.c"
     $1788 = HEAP32[$1787>>2]|0; //@line 1200 "lpc.c"
     $1789 = (($1786) + 4)|0; //@line 1200 "lpc.c"
     $1790 = $1789; //@line 1200 "lpc.c"
     $1791 = HEAP32[$1790>>2]|0; //@line 1200 "lpc.c"
     $1792 = (_i64Add(($1788|0),($1791|0),($1784|0),($1785|0))|0); //@line 1200 "lpc.c"
     $1793 = tempRet0; //@line 1200 "lpc.c"
     $1794 = $13; //@line 1200 "lpc.c"
     $1795 = $1794; //@line 1200 "lpc.c"
     HEAP32[$1795>>2] = $1792; //@line 1200 "lpc.c"
     $1796 = (($1794) + 4)|0; //@line 1200 "lpc.c"
     $1797 = $1796; //@line 1200 "lpc.c"
     HEAP32[$1797>>2] = $1793; //@line 1200 "lpc.c"
     $1798 = $8; //@line 1201 "lpc.c"
     $1799 = HEAP32[$1798>>2]|0; //@line 1201 "lpc.c"
     $1800 = ($1799|0)<(0); //@line 1201 "lpc.c"
     $1801 = $1800 << 31 >> 31; //@line 1201 "lpc.c"
     $1802 = $11; //@line 1201 "lpc.c"
     $1803 = $12; //@line 1201 "lpc.c"
     $1804 = (($1803) - 1)|0; //@line 1201 "lpc.c"
     $1805 = (($1802) + ($1804<<2)|0); //@line 1201 "lpc.c"
     $1806 = HEAP32[$1805>>2]|0; //@line 1201 "lpc.c"
     $1807 = ($1806|0)<(0); //@line 1201 "lpc.c"
     $1808 = $1807 << 31 >> 31; //@line 1201 "lpc.c"
     $1809 = (___muldi3(($1799|0),($1801|0),($1806|0),($1808|0))|0); //@line 1201 "lpc.c"
     $1810 = tempRet0; //@line 1201 "lpc.c"
     $1811 = $13; //@line 1201 "lpc.c"
     $1812 = $1811; //@line 1201 "lpc.c"
     $1813 = HEAP32[$1812>>2]|0; //@line 1201 "lpc.c"
     $1814 = (($1811) + 4)|0; //@line 1201 "lpc.c"
     $1815 = $1814; //@line 1201 "lpc.c"
     $1816 = HEAP32[$1815>>2]|0; //@line 1201 "lpc.c"
     $1817 = (_i64Add(($1813|0),($1816|0),($1809|0),($1810|0))|0); //@line 1201 "lpc.c"
     $1818 = tempRet0; //@line 1201 "lpc.c"
     $1819 = $13; //@line 1201 "lpc.c"
     $1820 = $1819; //@line 1201 "lpc.c"
     HEAP32[$1820>>2] = $1817; //@line 1201 "lpc.c"
     $1821 = (($1819) + 4)|0; //@line 1201 "lpc.c"
     $1822 = $1821; //@line 1201 "lpc.c"
     HEAP32[$1822>>2] = $1818; //@line 1201 "lpc.c"
     $1823 = $6; //@line 1202 "lpc.c"
     $1824 = $12; //@line 1202 "lpc.c"
     $1825 = (($1823) + ($1824<<2)|0); //@line 1202 "lpc.c"
     $1826 = HEAP32[$1825>>2]|0; //@line 1202 "lpc.c"
     $1827 = $13; //@line 1202 "lpc.c"
     $1828 = $1827; //@line 1202 "lpc.c"
     $1829 = HEAP32[$1828>>2]|0; //@line 1202 "lpc.c"
     $1830 = (($1827) + 4)|0; //@line 1202 "lpc.c"
     $1831 = $1830; //@line 1202 "lpc.c"
     $1832 = HEAP32[$1831>>2]|0; //@line 1202 "lpc.c"
     $1833 = $10; //@line 1202 "lpc.c"
     $1834 = (_bitshift64Ashr(($1829|0),($1832|0),($1833|0))|0); //@line 1202 "lpc.c"
     $1835 = tempRet0; //@line 1202 "lpc.c"
     $1836 = (($1826) + ($1834))|0; //@line 1202 "lpc.c"
     $1837 = $11; //@line 1202 "lpc.c"
     $1838 = $12; //@line 1202 "lpc.c"
     $1839 = (($1837) + ($1838<<2)|0); //@line 1202 "lpc.c"
     HEAP32[$1839>>2] = $1836; //@line 1202 "lpc.c"
     $1840 = $12; //@line 1194 "lpc.c"
     $1841 = (($1840) + 1)|0; //@line 1194 "lpc.c"
     $12 = $1841; //@line 1194 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $1842 = $12; //@line 1206 "lpc.c"
     $1843 = $7; //@line 1206 "lpc.c"
     $1844 = ($1842|0)<($1843|0); //@line 1206 "lpc.c"
     if (!($1844)) {
      break;
     }
     $1845 = $13; //@line 1207 "lpc.c"
     $1846 = $1845; //@line 1207 "lpc.c"
     HEAP32[$1846>>2] = 0; //@line 1207 "lpc.c"
     $1847 = (($1845) + 4)|0; //@line 1207 "lpc.c"
     $1848 = $1847; //@line 1207 "lpc.c"
     HEAP32[$1848>>2] = 0; //@line 1207 "lpc.c"
     $1849 = $8; //@line 1208 "lpc.c"
     $1850 = ((($1849)) + 16|0); //@line 1208 "lpc.c"
     $1851 = HEAP32[$1850>>2]|0; //@line 1208 "lpc.c"
     $1852 = ($1851|0)<(0); //@line 1208 "lpc.c"
     $1853 = $1852 << 31 >> 31; //@line 1208 "lpc.c"
     $1854 = $11; //@line 1208 "lpc.c"
     $1855 = $12; //@line 1208 "lpc.c"
     $1856 = (($1855) - 5)|0; //@line 1208 "lpc.c"
     $1857 = (($1854) + ($1856<<2)|0); //@line 1208 "lpc.c"
     $1858 = HEAP32[$1857>>2]|0; //@line 1208 "lpc.c"
     $1859 = ($1858|0)<(0); //@line 1208 "lpc.c"
     $1860 = $1859 << 31 >> 31; //@line 1208 "lpc.c"
     $1861 = (___muldi3(($1851|0),($1853|0),($1858|0),($1860|0))|0); //@line 1208 "lpc.c"
     $1862 = tempRet0; //@line 1208 "lpc.c"
     $1863 = $13; //@line 1208 "lpc.c"
     $1864 = $1863; //@line 1208 "lpc.c"
     $1865 = HEAP32[$1864>>2]|0; //@line 1208 "lpc.c"
     $1866 = (($1863) + 4)|0; //@line 1208 "lpc.c"
     $1867 = $1866; //@line 1208 "lpc.c"
     $1868 = HEAP32[$1867>>2]|0; //@line 1208 "lpc.c"
     $1869 = (_i64Add(($1865|0),($1868|0),($1861|0),($1862|0))|0); //@line 1208 "lpc.c"
     $1870 = tempRet0; //@line 1208 "lpc.c"
     $1871 = $13; //@line 1208 "lpc.c"
     $1872 = $1871; //@line 1208 "lpc.c"
     HEAP32[$1872>>2] = $1869; //@line 1208 "lpc.c"
     $1873 = (($1871) + 4)|0; //@line 1208 "lpc.c"
     $1874 = $1873; //@line 1208 "lpc.c"
     HEAP32[$1874>>2] = $1870; //@line 1208 "lpc.c"
     $1875 = $8; //@line 1209 "lpc.c"
     $1876 = ((($1875)) + 12|0); //@line 1209 "lpc.c"
     $1877 = HEAP32[$1876>>2]|0; //@line 1209 "lpc.c"
     $1878 = ($1877|0)<(0); //@line 1209 "lpc.c"
     $1879 = $1878 << 31 >> 31; //@line 1209 "lpc.c"
     $1880 = $11; //@line 1209 "lpc.c"
     $1881 = $12; //@line 1209 "lpc.c"
     $1882 = (($1881) - 4)|0; //@line 1209 "lpc.c"
     $1883 = (($1880) + ($1882<<2)|0); //@line 1209 "lpc.c"
     $1884 = HEAP32[$1883>>2]|0; //@line 1209 "lpc.c"
     $1885 = ($1884|0)<(0); //@line 1209 "lpc.c"
     $1886 = $1885 << 31 >> 31; //@line 1209 "lpc.c"
     $1887 = (___muldi3(($1877|0),($1879|0),($1884|0),($1886|0))|0); //@line 1209 "lpc.c"
     $1888 = tempRet0; //@line 1209 "lpc.c"
     $1889 = $13; //@line 1209 "lpc.c"
     $1890 = $1889; //@line 1209 "lpc.c"
     $1891 = HEAP32[$1890>>2]|0; //@line 1209 "lpc.c"
     $1892 = (($1889) + 4)|0; //@line 1209 "lpc.c"
     $1893 = $1892; //@line 1209 "lpc.c"
     $1894 = HEAP32[$1893>>2]|0; //@line 1209 "lpc.c"
     $1895 = (_i64Add(($1891|0),($1894|0),($1887|0),($1888|0))|0); //@line 1209 "lpc.c"
     $1896 = tempRet0; //@line 1209 "lpc.c"
     $1897 = $13; //@line 1209 "lpc.c"
     $1898 = $1897; //@line 1209 "lpc.c"
     HEAP32[$1898>>2] = $1895; //@line 1209 "lpc.c"
     $1899 = (($1897) + 4)|0; //@line 1209 "lpc.c"
     $1900 = $1899; //@line 1209 "lpc.c"
     HEAP32[$1900>>2] = $1896; //@line 1209 "lpc.c"
     $1901 = $8; //@line 1210 "lpc.c"
     $1902 = ((($1901)) + 8|0); //@line 1210 "lpc.c"
     $1903 = HEAP32[$1902>>2]|0; //@line 1210 "lpc.c"
     $1904 = ($1903|0)<(0); //@line 1210 "lpc.c"
     $1905 = $1904 << 31 >> 31; //@line 1210 "lpc.c"
     $1906 = $11; //@line 1210 "lpc.c"
     $1907 = $12; //@line 1210 "lpc.c"
     $1908 = (($1907) - 3)|0; //@line 1210 "lpc.c"
     $1909 = (($1906) + ($1908<<2)|0); //@line 1210 "lpc.c"
     $1910 = HEAP32[$1909>>2]|0; //@line 1210 "lpc.c"
     $1911 = ($1910|0)<(0); //@line 1210 "lpc.c"
     $1912 = $1911 << 31 >> 31; //@line 1210 "lpc.c"
     $1913 = (___muldi3(($1903|0),($1905|0),($1910|0),($1912|0))|0); //@line 1210 "lpc.c"
     $1914 = tempRet0; //@line 1210 "lpc.c"
     $1915 = $13; //@line 1210 "lpc.c"
     $1916 = $1915; //@line 1210 "lpc.c"
     $1917 = HEAP32[$1916>>2]|0; //@line 1210 "lpc.c"
     $1918 = (($1915) + 4)|0; //@line 1210 "lpc.c"
     $1919 = $1918; //@line 1210 "lpc.c"
     $1920 = HEAP32[$1919>>2]|0; //@line 1210 "lpc.c"
     $1921 = (_i64Add(($1917|0),($1920|0),($1913|0),($1914|0))|0); //@line 1210 "lpc.c"
     $1922 = tempRet0; //@line 1210 "lpc.c"
     $1923 = $13; //@line 1210 "lpc.c"
     $1924 = $1923; //@line 1210 "lpc.c"
     HEAP32[$1924>>2] = $1921; //@line 1210 "lpc.c"
     $1925 = (($1923) + 4)|0; //@line 1210 "lpc.c"
     $1926 = $1925; //@line 1210 "lpc.c"
     HEAP32[$1926>>2] = $1922; //@line 1210 "lpc.c"
     $1927 = $8; //@line 1211 "lpc.c"
     $1928 = ((($1927)) + 4|0); //@line 1211 "lpc.c"
     $1929 = HEAP32[$1928>>2]|0; //@line 1211 "lpc.c"
     $1930 = ($1929|0)<(0); //@line 1211 "lpc.c"
     $1931 = $1930 << 31 >> 31; //@line 1211 "lpc.c"
     $1932 = $11; //@line 1211 "lpc.c"
     $1933 = $12; //@line 1211 "lpc.c"
     $1934 = (($1933) - 2)|0; //@line 1211 "lpc.c"
     $1935 = (($1932) + ($1934<<2)|0); //@line 1211 "lpc.c"
     $1936 = HEAP32[$1935>>2]|0; //@line 1211 "lpc.c"
     $1937 = ($1936|0)<(0); //@line 1211 "lpc.c"
     $1938 = $1937 << 31 >> 31; //@line 1211 "lpc.c"
     $1939 = (___muldi3(($1929|0),($1931|0),($1936|0),($1938|0))|0); //@line 1211 "lpc.c"
     $1940 = tempRet0; //@line 1211 "lpc.c"
     $1941 = $13; //@line 1211 "lpc.c"
     $1942 = $1941; //@line 1211 "lpc.c"
     $1943 = HEAP32[$1942>>2]|0; //@line 1211 "lpc.c"
     $1944 = (($1941) + 4)|0; //@line 1211 "lpc.c"
     $1945 = $1944; //@line 1211 "lpc.c"
     $1946 = HEAP32[$1945>>2]|0; //@line 1211 "lpc.c"
     $1947 = (_i64Add(($1943|0),($1946|0),($1939|0),($1940|0))|0); //@line 1211 "lpc.c"
     $1948 = tempRet0; //@line 1211 "lpc.c"
     $1949 = $13; //@line 1211 "lpc.c"
     $1950 = $1949; //@line 1211 "lpc.c"
     HEAP32[$1950>>2] = $1947; //@line 1211 "lpc.c"
     $1951 = (($1949) + 4)|0; //@line 1211 "lpc.c"
     $1952 = $1951; //@line 1211 "lpc.c"
     HEAP32[$1952>>2] = $1948; //@line 1211 "lpc.c"
     $1953 = $8; //@line 1212 "lpc.c"
     $1954 = HEAP32[$1953>>2]|0; //@line 1212 "lpc.c"
     $1955 = ($1954|0)<(0); //@line 1212 "lpc.c"
     $1956 = $1955 << 31 >> 31; //@line 1212 "lpc.c"
     $1957 = $11; //@line 1212 "lpc.c"
     $1958 = $12; //@line 1212 "lpc.c"
     $1959 = (($1958) - 1)|0; //@line 1212 "lpc.c"
     $1960 = (($1957) + ($1959<<2)|0); //@line 1212 "lpc.c"
     $1961 = HEAP32[$1960>>2]|0; //@line 1212 "lpc.c"
     $1962 = ($1961|0)<(0); //@line 1212 "lpc.c"
     $1963 = $1962 << 31 >> 31; //@line 1212 "lpc.c"
     $1964 = (___muldi3(($1954|0),($1956|0),($1961|0),($1963|0))|0); //@line 1212 "lpc.c"
     $1965 = tempRet0; //@line 1212 "lpc.c"
     $1966 = $13; //@line 1212 "lpc.c"
     $1967 = $1966; //@line 1212 "lpc.c"
     $1968 = HEAP32[$1967>>2]|0; //@line 1212 "lpc.c"
     $1969 = (($1966) + 4)|0; //@line 1212 "lpc.c"
     $1970 = $1969; //@line 1212 "lpc.c"
     $1971 = HEAP32[$1970>>2]|0; //@line 1212 "lpc.c"
     $1972 = (_i64Add(($1968|0),($1971|0),($1964|0),($1965|0))|0); //@line 1212 "lpc.c"
     $1973 = tempRet0; //@line 1212 "lpc.c"
     $1974 = $13; //@line 1212 "lpc.c"
     $1975 = $1974; //@line 1212 "lpc.c"
     HEAP32[$1975>>2] = $1972; //@line 1212 "lpc.c"
     $1976 = (($1974) + 4)|0; //@line 1212 "lpc.c"
     $1977 = $1976; //@line 1212 "lpc.c"
     HEAP32[$1977>>2] = $1973; //@line 1212 "lpc.c"
     $1978 = $6; //@line 1213 "lpc.c"
     $1979 = $12; //@line 1213 "lpc.c"
     $1980 = (($1978) + ($1979<<2)|0); //@line 1213 "lpc.c"
     $1981 = HEAP32[$1980>>2]|0; //@line 1213 "lpc.c"
     $1982 = $13; //@line 1213 "lpc.c"
     $1983 = $1982; //@line 1213 "lpc.c"
     $1984 = HEAP32[$1983>>2]|0; //@line 1213 "lpc.c"
     $1985 = (($1982) + 4)|0; //@line 1213 "lpc.c"
     $1986 = $1985; //@line 1213 "lpc.c"
     $1987 = HEAP32[$1986>>2]|0; //@line 1213 "lpc.c"
     $1988 = $10; //@line 1213 "lpc.c"
     $1989 = (_bitshift64Ashr(($1984|0),($1987|0),($1988|0))|0); //@line 1213 "lpc.c"
     $1990 = tempRet0; //@line 1213 "lpc.c"
     $1991 = (($1981) + ($1989))|0; //@line 1213 "lpc.c"
     $1992 = $11; //@line 1213 "lpc.c"
     $1993 = $12; //@line 1213 "lpc.c"
     $1994 = (($1992) + ($1993<<2)|0); //@line 1213 "lpc.c"
     HEAP32[$1994>>2] = $1991; //@line 1213 "lpc.c"
     $1995 = $12; //@line 1206 "lpc.c"
     $1996 = (($1995) + 1)|0; //@line 1206 "lpc.c"
     $12 = $1996; //@line 1206 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  }
 } else {
  $1997 = ($1216>>>0)>(2); //@line 1219 "lpc.c"
  $1998 = $9;
  if ($1997) {
   $1999 = ($1998|0)==(4); //@line 1220 "lpc.c"
   $12 = 0;
   if ($1999) {
    while(1) {
     $2000 = $12; //@line 1221 "lpc.c"
     $2001 = $7; //@line 1221 "lpc.c"
     $2002 = ($2000|0)<($2001|0); //@line 1221 "lpc.c"
     if (!($2002)) {
      break;
     }
     $2003 = $13; //@line 1222 "lpc.c"
     $2004 = $2003; //@line 1222 "lpc.c"
     HEAP32[$2004>>2] = 0; //@line 1222 "lpc.c"
     $2005 = (($2003) + 4)|0; //@line 1222 "lpc.c"
     $2006 = $2005; //@line 1222 "lpc.c"
     HEAP32[$2006>>2] = 0; //@line 1222 "lpc.c"
     $2007 = $8; //@line 1223 "lpc.c"
     $2008 = ((($2007)) + 12|0); //@line 1223 "lpc.c"
     $2009 = HEAP32[$2008>>2]|0; //@line 1223 "lpc.c"
     $2010 = ($2009|0)<(0); //@line 1223 "lpc.c"
     $2011 = $2010 << 31 >> 31; //@line 1223 "lpc.c"
     $2012 = $11; //@line 1223 "lpc.c"
     $2013 = $12; //@line 1223 "lpc.c"
     $2014 = (($2013) - 4)|0; //@line 1223 "lpc.c"
     $2015 = (($2012) + ($2014<<2)|0); //@line 1223 "lpc.c"
     $2016 = HEAP32[$2015>>2]|0; //@line 1223 "lpc.c"
     $2017 = ($2016|0)<(0); //@line 1223 "lpc.c"
     $2018 = $2017 << 31 >> 31; //@line 1223 "lpc.c"
     $2019 = (___muldi3(($2009|0),($2011|0),($2016|0),($2018|0))|0); //@line 1223 "lpc.c"
     $2020 = tempRet0; //@line 1223 "lpc.c"
     $2021 = $13; //@line 1223 "lpc.c"
     $2022 = $2021; //@line 1223 "lpc.c"
     $2023 = HEAP32[$2022>>2]|0; //@line 1223 "lpc.c"
     $2024 = (($2021) + 4)|0; //@line 1223 "lpc.c"
     $2025 = $2024; //@line 1223 "lpc.c"
     $2026 = HEAP32[$2025>>2]|0; //@line 1223 "lpc.c"
     $2027 = (_i64Add(($2023|0),($2026|0),($2019|0),($2020|0))|0); //@line 1223 "lpc.c"
     $2028 = tempRet0; //@line 1223 "lpc.c"
     $2029 = $13; //@line 1223 "lpc.c"
     $2030 = $2029; //@line 1223 "lpc.c"
     HEAP32[$2030>>2] = $2027; //@line 1223 "lpc.c"
     $2031 = (($2029) + 4)|0; //@line 1223 "lpc.c"
     $2032 = $2031; //@line 1223 "lpc.c"
     HEAP32[$2032>>2] = $2028; //@line 1223 "lpc.c"
     $2033 = $8; //@line 1224 "lpc.c"
     $2034 = ((($2033)) + 8|0); //@line 1224 "lpc.c"
     $2035 = HEAP32[$2034>>2]|0; //@line 1224 "lpc.c"
     $2036 = ($2035|0)<(0); //@line 1224 "lpc.c"
     $2037 = $2036 << 31 >> 31; //@line 1224 "lpc.c"
     $2038 = $11; //@line 1224 "lpc.c"
     $2039 = $12; //@line 1224 "lpc.c"
     $2040 = (($2039) - 3)|0; //@line 1224 "lpc.c"
     $2041 = (($2038) + ($2040<<2)|0); //@line 1224 "lpc.c"
     $2042 = HEAP32[$2041>>2]|0; //@line 1224 "lpc.c"
     $2043 = ($2042|0)<(0); //@line 1224 "lpc.c"
     $2044 = $2043 << 31 >> 31; //@line 1224 "lpc.c"
     $2045 = (___muldi3(($2035|0),($2037|0),($2042|0),($2044|0))|0); //@line 1224 "lpc.c"
     $2046 = tempRet0; //@line 1224 "lpc.c"
     $2047 = $13; //@line 1224 "lpc.c"
     $2048 = $2047; //@line 1224 "lpc.c"
     $2049 = HEAP32[$2048>>2]|0; //@line 1224 "lpc.c"
     $2050 = (($2047) + 4)|0; //@line 1224 "lpc.c"
     $2051 = $2050; //@line 1224 "lpc.c"
     $2052 = HEAP32[$2051>>2]|0; //@line 1224 "lpc.c"
     $2053 = (_i64Add(($2049|0),($2052|0),($2045|0),($2046|0))|0); //@line 1224 "lpc.c"
     $2054 = tempRet0; //@line 1224 "lpc.c"
     $2055 = $13; //@line 1224 "lpc.c"
     $2056 = $2055; //@line 1224 "lpc.c"
     HEAP32[$2056>>2] = $2053; //@line 1224 "lpc.c"
     $2057 = (($2055) + 4)|0; //@line 1224 "lpc.c"
     $2058 = $2057; //@line 1224 "lpc.c"
     HEAP32[$2058>>2] = $2054; //@line 1224 "lpc.c"
     $2059 = $8; //@line 1225 "lpc.c"
     $2060 = ((($2059)) + 4|0); //@line 1225 "lpc.c"
     $2061 = HEAP32[$2060>>2]|0; //@line 1225 "lpc.c"
     $2062 = ($2061|0)<(0); //@line 1225 "lpc.c"
     $2063 = $2062 << 31 >> 31; //@line 1225 "lpc.c"
     $2064 = $11; //@line 1225 "lpc.c"
     $2065 = $12; //@line 1225 "lpc.c"
     $2066 = (($2065) - 2)|0; //@line 1225 "lpc.c"
     $2067 = (($2064) + ($2066<<2)|0); //@line 1225 "lpc.c"
     $2068 = HEAP32[$2067>>2]|0; //@line 1225 "lpc.c"
     $2069 = ($2068|0)<(0); //@line 1225 "lpc.c"
     $2070 = $2069 << 31 >> 31; //@line 1225 "lpc.c"
     $2071 = (___muldi3(($2061|0),($2063|0),($2068|0),($2070|0))|0); //@line 1225 "lpc.c"
     $2072 = tempRet0; //@line 1225 "lpc.c"
     $2073 = $13; //@line 1225 "lpc.c"
     $2074 = $2073; //@line 1225 "lpc.c"
     $2075 = HEAP32[$2074>>2]|0; //@line 1225 "lpc.c"
     $2076 = (($2073) + 4)|0; //@line 1225 "lpc.c"
     $2077 = $2076; //@line 1225 "lpc.c"
     $2078 = HEAP32[$2077>>2]|0; //@line 1225 "lpc.c"
     $2079 = (_i64Add(($2075|0),($2078|0),($2071|0),($2072|0))|0); //@line 1225 "lpc.c"
     $2080 = tempRet0; //@line 1225 "lpc.c"
     $2081 = $13; //@line 1225 "lpc.c"
     $2082 = $2081; //@line 1225 "lpc.c"
     HEAP32[$2082>>2] = $2079; //@line 1225 "lpc.c"
     $2083 = (($2081) + 4)|0; //@line 1225 "lpc.c"
     $2084 = $2083; //@line 1225 "lpc.c"
     HEAP32[$2084>>2] = $2080; //@line 1225 "lpc.c"
     $2085 = $8; //@line 1226 "lpc.c"
     $2086 = HEAP32[$2085>>2]|0; //@line 1226 "lpc.c"
     $2087 = ($2086|0)<(0); //@line 1226 "lpc.c"
     $2088 = $2087 << 31 >> 31; //@line 1226 "lpc.c"
     $2089 = $11; //@line 1226 "lpc.c"
     $2090 = $12; //@line 1226 "lpc.c"
     $2091 = (($2090) - 1)|0; //@line 1226 "lpc.c"
     $2092 = (($2089) + ($2091<<2)|0); //@line 1226 "lpc.c"
     $2093 = HEAP32[$2092>>2]|0; //@line 1226 "lpc.c"
     $2094 = ($2093|0)<(0); //@line 1226 "lpc.c"
     $2095 = $2094 << 31 >> 31; //@line 1226 "lpc.c"
     $2096 = (___muldi3(($2086|0),($2088|0),($2093|0),($2095|0))|0); //@line 1226 "lpc.c"
     $2097 = tempRet0; //@line 1226 "lpc.c"
     $2098 = $13; //@line 1226 "lpc.c"
     $2099 = $2098; //@line 1226 "lpc.c"
     $2100 = HEAP32[$2099>>2]|0; //@line 1226 "lpc.c"
     $2101 = (($2098) + 4)|0; //@line 1226 "lpc.c"
     $2102 = $2101; //@line 1226 "lpc.c"
     $2103 = HEAP32[$2102>>2]|0; //@line 1226 "lpc.c"
     $2104 = (_i64Add(($2100|0),($2103|0),($2096|0),($2097|0))|0); //@line 1226 "lpc.c"
     $2105 = tempRet0; //@line 1226 "lpc.c"
     $2106 = $13; //@line 1226 "lpc.c"
     $2107 = $2106; //@line 1226 "lpc.c"
     HEAP32[$2107>>2] = $2104; //@line 1226 "lpc.c"
     $2108 = (($2106) + 4)|0; //@line 1226 "lpc.c"
     $2109 = $2108; //@line 1226 "lpc.c"
     HEAP32[$2109>>2] = $2105; //@line 1226 "lpc.c"
     $2110 = $6; //@line 1227 "lpc.c"
     $2111 = $12; //@line 1227 "lpc.c"
     $2112 = (($2110) + ($2111<<2)|0); //@line 1227 "lpc.c"
     $2113 = HEAP32[$2112>>2]|0; //@line 1227 "lpc.c"
     $2114 = $13; //@line 1227 "lpc.c"
     $2115 = $2114; //@line 1227 "lpc.c"
     $2116 = HEAP32[$2115>>2]|0; //@line 1227 "lpc.c"
     $2117 = (($2114) + 4)|0; //@line 1227 "lpc.c"
     $2118 = $2117; //@line 1227 "lpc.c"
     $2119 = HEAP32[$2118>>2]|0; //@line 1227 "lpc.c"
     $2120 = $10; //@line 1227 "lpc.c"
     $2121 = (_bitshift64Ashr(($2116|0),($2119|0),($2120|0))|0); //@line 1227 "lpc.c"
     $2122 = tempRet0; //@line 1227 "lpc.c"
     $2123 = (($2113) + ($2121))|0; //@line 1227 "lpc.c"
     $2124 = $11; //@line 1227 "lpc.c"
     $2125 = $12; //@line 1227 "lpc.c"
     $2126 = (($2124) + ($2125<<2)|0); //@line 1227 "lpc.c"
     HEAP32[$2126>>2] = $2123; //@line 1227 "lpc.c"
     $2127 = $12; //@line 1221 "lpc.c"
     $2128 = (($2127) + 1)|0; //@line 1221 "lpc.c"
     $12 = $2128; //@line 1221 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $2129 = $12; //@line 1231 "lpc.c"
     $2130 = $7; //@line 1231 "lpc.c"
     $2131 = ($2129|0)<($2130|0); //@line 1231 "lpc.c"
     if (!($2131)) {
      break;
     }
     $2132 = $13; //@line 1232 "lpc.c"
     $2133 = $2132; //@line 1232 "lpc.c"
     HEAP32[$2133>>2] = 0; //@line 1232 "lpc.c"
     $2134 = (($2132) + 4)|0; //@line 1232 "lpc.c"
     $2135 = $2134; //@line 1232 "lpc.c"
     HEAP32[$2135>>2] = 0; //@line 1232 "lpc.c"
     $2136 = $8; //@line 1233 "lpc.c"
     $2137 = ((($2136)) + 8|0); //@line 1233 "lpc.c"
     $2138 = HEAP32[$2137>>2]|0; //@line 1233 "lpc.c"
     $2139 = ($2138|0)<(0); //@line 1233 "lpc.c"
     $2140 = $2139 << 31 >> 31; //@line 1233 "lpc.c"
     $2141 = $11; //@line 1233 "lpc.c"
     $2142 = $12; //@line 1233 "lpc.c"
     $2143 = (($2142) - 3)|0; //@line 1233 "lpc.c"
     $2144 = (($2141) + ($2143<<2)|0); //@line 1233 "lpc.c"
     $2145 = HEAP32[$2144>>2]|0; //@line 1233 "lpc.c"
     $2146 = ($2145|0)<(0); //@line 1233 "lpc.c"
     $2147 = $2146 << 31 >> 31; //@line 1233 "lpc.c"
     $2148 = (___muldi3(($2138|0),($2140|0),($2145|0),($2147|0))|0); //@line 1233 "lpc.c"
     $2149 = tempRet0; //@line 1233 "lpc.c"
     $2150 = $13; //@line 1233 "lpc.c"
     $2151 = $2150; //@line 1233 "lpc.c"
     $2152 = HEAP32[$2151>>2]|0; //@line 1233 "lpc.c"
     $2153 = (($2150) + 4)|0; //@line 1233 "lpc.c"
     $2154 = $2153; //@line 1233 "lpc.c"
     $2155 = HEAP32[$2154>>2]|0; //@line 1233 "lpc.c"
     $2156 = (_i64Add(($2152|0),($2155|0),($2148|0),($2149|0))|0); //@line 1233 "lpc.c"
     $2157 = tempRet0; //@line 1233 "lpc.c"
     $2158 = $13; //@line 1233 "lpc.c"
     $2159 = $2158; //@line 1233 "lpc.c"
     HEAP32[$2159>>2] = $2156; //@line 1233 "lpc.c"
     $2160 = (($2158) + 4)|0; //@line 1233 "lpc.c"
     $2161 = $2160; //@line 1233 "lpc.c"
     HEAP32[$2161>>2] = $2157; //@line 1233 "lpc.c"
     $2162 = $8; //@line 1234 "lpc.c"
     $2163 = ((($2162)) + 4|0); //@line 1234 "lpc.c"
     $2164 = HEAP32[$2163>>2]|0; //@line 1234 "lpc.c"
     $2165 = ($2164|0)<(0); //@line 1234 "lpc.c"
     $2166 = $2165 << 31 >> 31; //@line 1234 "lpc.c"
     $2167 = $11; //@line 1234 "lpc.c"
     $2168 = $12; //@line 1234 "lpc.c"
     $2169 = (($2168) - 2)|0; //@line 1234 "lpc.c"
     $2170 = (($2167) + ($2169<<2)|0); //@line 1234 "lpc.c"
     $2171 = HEAP32[$2170>>2]|0; //@line 1234 "lpc.c"
     $2172 = ($2171|0)<(0); //@line 1234 "lpc.c"
     $2173 = $2172 << 31 >> 31; //@line 1234 "lpc.c"
     $2174 = (___muldi3(($2164|0),($2166|0),($2171|0),($2173|0))|0); //@line 1234 "lpc.c"
     $2175 = tempRet0; //@line 1234 "lpc.c"
     $2176 = $13; //@line 1234 "lpc.c"
     $2177 = $2176; //@line 1234 "lpc.c"
     $2178 = HEAP32[$2177>>2]|0; //@line 1234 "lpc.c"
     $2179 = (($2176) + 4)|0; //@line 1234 "lpc.c"
     $2180 = $2179; //@line 1234 "lpc.c"
     $2181 = HEAP32[$2180>>2]|0; //@line 1234 "lpc.c"
     $2182 = (_i64Add(($2178|0),($2181|0),($2174|0),($2175|0))|0); //@line 1234 "lpc.c"
     $2183 = tempRet0; //@line 1234 "lpc.c"
     $2184 = $13; //@line 1234 "lpc.c"
     $2185 = $2184; //@line 1234 "lpc.c"
     HEAP32[$2185>>2] = $2182; //@line 1234 "lpc.c"
     $2186 = (($2184) + 4)|0; //@line 1234 "lpc.c"
     $2187 = $2186; //@line 1234 "lpc.c"
     HEAP32[$2187>>2] = $2183; //@line 1234 "lpc.c"
     $2188 = $8; //@line 1235 "lpc.c"
     $2189 = HEAP32[$2188>>2]|0; //@line 1235 "lpc.c"
     $2190 = ($2189|0)<(0); //@line 1235 "lpc.c"
     $2191 = $2190 << 31 >> 31; //@line 1235 "lpc.c"
     $2192 = $11; //@line 1235 "lpc.c"
     $2193 = $12; //@line 1235 "lpc.c"
     $2194 = (($2193) - 1)|0; //@line 1235 "lpc.c"
     $2195 = (($2192) + ($2194<<2)|0); //@line 1235 "lpc.c"
     $2196 = HEAP32[$2195>>2]|0; //@line 1235 "lpc.c"
     $2197 = ($2196|0)<(0); //@line 1235 "lpc.c"
     $2198 = $2197 << 31 >> 31; //@line 1235 "lpc.c"
     $2199 = (___muldi3(($2189|0),($2191|0),($2196|0),($2198|0))|0); //@line 1235 "lpc.c"
     $2200 = tempRet0; //@line 1235 "lpc.c"
     $2201 = $13; //@line 1235 "lpc.c"
     $2202 = $2201; //@line 1235 "lpc.c"
     $2203 = HEAP32[$2202>>2]|0; //@line 1235 "lpc.c"
     $2204 = (($2201) + 4)|0; //@line 1235 "lpc.c"
     $2205 = $2204; //@line 1235 "lpc.c"
     $2206 = HEAP32[$2205>>2]|0; //@line 1235 "lpc.c"
     $2207 = (_i64Add(($2203|0),($2206|0),($2199|0),($2200|0))|0); //@line 1235 "lpc.c"
     $2208 = tempRet0; //@line 1235 "lpc.c"
     $2209 = $13; //@line 1235 "lpc.c"
     $2210 = $2209; //@line 1235 "lpc.c"
     HEAP32[$2210>>2] = $2207; //@line 1235 "lpc.c"
     $2211 = (($2209) + 4)|0; //@line 1235 "lpc.c"
     $2212 = $2211; //@line 1235 "lpc.c"
     HEAP32[$2212>>2] = $2208; //@line 1235 "lpc.c"
     $2213 = $6; //@line 1236 "lpc.c"
     $2214 = $12; //@line 1236 "lpc.c"
     $2215 = (($2213) + ($2214<<2)|0); //@line 1236 "lpc.c"
     $2216 = HEAP32[$2215>>2]|0; //@line 1236 "lpc.c"
     $2217 = $13; //@line 1236 "lpc.c"
     $2218 = $2217; //@line 1236 "lpc.c"
     $2219 = HEAP32[$2218>>2]|0; //@line 1236 "lpc.c"
     $2220 = (($2217) + 4)|0; //@line 1236 "lpc.c"
     $2221 = $2220; //@line 1236 "lpc.c"
     $2222 = HEAP32[$2221>>2]|0; //@line 1236 "lpc.c"
     $2223 = $10; //@line 1236 "lpc.c"
     $2224 = (_bitshift64Ashr(($2219|0),($2222|0),($2223|0))|0); //@line 1236 "lpc.c"
     $2225 = tempRet0; //@line 1236 "lpc.c"
     $2226 = (($2216) + ($2224))|0; //@line 1236 "lpc.c"
     $2227 = $11; //@line 1236 "lpc.c"
     $2228 = $12; //@line 1236 "lpc.c"
     $2229 = (($2227) + ($2228<<2)|0); //@line 1236 "lpc.c"
     HEAP32[$2229>>2] = $2226; //@line 1236 "lpc.c"
     $2230 = $12; //@line 1231 "lpc.c"
     $2231 = (($2230) + 1)|0; //@line 1231 "lpc.c"
     $12 = $2231; //@line 1231 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  } else {
   $2232 = ($1998|0)==(2); //@line 1241 "lpc.c"
   $12 = 0;
   if ($2232) {
    while(1) {
     $2233 = $12; //@line 1242 "lpc.c"
     $2234 = $7; //@line 1242 "lpc.c"
     $2235 = ($2233|0)<($2234|0); //@line 1242 "lpc.c"
     if (!($2235)) {
      break;
     }
     $2236 = $13; //@line 1243 "lpc.c"
     $2237 = $2236; //@line 1243 "lpc.c"
     HEAP32[$2237>>2] = 0; //@line 1243 "lpc.c"
     $2238 = (($2236) + 4)|0; //@line 1243 "lpc.c"
     $2239 = $2238; //@line 1243 "lpc.c"
     HEAP32[$2239>>2] = 0; //@line 1243 "lpc.c"
     $2240 = $8; //@line 1244 "lpc.c"
     $2241 = ((($2240)) + 4|0); //@line 1244 "lpc.c"
     $2242 = HEAP32[$2241>>2]|0; //@line 1244 "lpc.c"
     $2243 = ($2242|0)<(0); //@line 1244 "lpc.c"
     $2244 = $2243 << 31 >> 31; //@line 1244 "lpc.c"
     $2245 = $11; //@line 1244 "lpc.c"
     $2246 = $12; //@line 1244 "lpc.c"
     $2247 = (($2246) - 2)|0; //@line 1244 "lpc.c"
     $2248 = (($2245) + ($2247<<2)|0); //@line 1244 "lpc.c"
     $2249 = HEAP32[$2248>>2]|0; //@line 1244 "lpc.c"
     $2250 = ($2249|0)<(0); //@line 1244 "lpc.c"
     $2251 = $2250 << 31 >> 31; //@line 1244 "lpc.c"
     $2252 = (___muldi3(($2242|0),($2244|0),($2249|0),($2251|0))|0); //@line 1244 "lpc.c"
     $2253 = tempRet0; //@line 1244 "lpc.c"
     $2254 = $13; //@line 1244 "lpc.c"
     $2255 = $2254; //@line 1244 "lpc.c"
     $2256 = HEAP32[$2255>>2]|0; //@line 1244 "lpc.c"
     $2257 = (($2254) + 4)|0; //@line 1244 "lpc.c"
     $2258 = $2257; //@line 1244 "lpc.c"
     $2259 = HEAP32[$2258>>2]|0; //@line 1244 "lpc.c"
     $2260 = (_i64Add(($2256|0),($2259|0),($2252|0),($2253|0))|0); //@line 1244 "lpc.c"
     $2261 = tempRet0; //@line 1244 "lpc.c"
     $2262 = $13; //@line 1244 "lpc.c"
     $2263 = $2262; //@line 1244 "lpc.c"
     HEAP32[$2263>>2] = $2260; //@line 1244 "lpc.c"
     $2264 = (($2262) + 4)|0; //@line 1244 "lpc.c"
     $2265 = $2264; //@line 1244 "lpc.c"
     HEAP32[$2265>>2] = $2261; //@line 1244 "lpc.c"
     $2266 = $8; //@line 1245 "lpc.c"
     $2267 = HEAP32[$2266>>2]|0; //@line 1245 "lpc.c"
     $2268 = ($2267|0)<(0); //@line 1245 "lpc.c"
     $2269 = $2268 << 31 >> 31; //@line 1245 "lpc.c"
     $2270 = $11; //@line 1245 "lpc.c"
     $2271 = $12; //@line 1245 "lpc.c"
     $2272 = (($2271) - 1)|0; //@line 1245 "lpc.c"
     $2273 = (($2270) + ($2272<<2)|0); //@line 1245 "lpc.c"
     $2274 = HEAP32[$2273>>2]|0; //@line 1245 "lpc.c"
     $2275 = ($2274|0)<(0); //@line 1245 "lpc.c"
     $2276 = $2275 << 31 >> 31; //@line 1245 "lpc.c"
     $2277 = (___muldi3(($2267|0),($2269|0),($2274|0),($2276|0))|0); //@line 1245 "lpc.c"
     $2278 = tempRet0; //@line 1245 "lpc.c"
     $2279 = $13; //@line 1245 "lpc.c"
     $2280 = $2279; //@line 1245 "lpc.c"
     $2281 = HEAP32[$2280>>2]|0; //@line 1245 "lpc.c"
     $2282 = (($2279) + 4)|0; //@line 1245 "lpc.c"
     $2283 = $2282; //@line 1245 "lpc.c"
     $2284 = HEAP32[$2283>>2]|0; //@line 1245 "lpc.c"
     $2285 = (_i64Add(($2281|0),($2284|0),($2277|0),($2278|0))|0); //@line 1245 "lpc.c"
     $2286 = tempRet0; //@line 1245 "lpc.c"
     $2287 = $13; //@line 1245 "lpc.c"
     $2288 = $2287; //@line 1245 "lpc.c"
     HEAP32[$2288>>2] = $2285; //@line 1245 "lpc.c"
     $2289 = (($2287) + 4)|0; //@line 1245 "lpc.c"
     $2290 = $2289; //@line 1245 "lpc.c"
     HEAP32[$2290>>2] = $2286; //@line 1245 "lpc.c"
     $2291 = $6; //@line 1246 "lpc.c"
     $2292 = $12; //@line 1246 "lpc.c"
     $2293 = (($2291) + ($2292<<2)|0); //@line 1246 "lpc.c"
     $2294 = HEAP32[$2293>>2]|0; //@line 1246 "lpc.c"
     $2295 = $13; //@line 1246 "lpc.c"
     $2296 = $2295; //@line 1246 "lpc.c"
     $2297 = HEAP32[$2296>>2]|0; //@line 1246 "lpc.c"
     $2298 = (($2295) + 4)|0; //@line 1246 "lpc.c"
     $2299 = $2298; //@line 1246 "lpc.c"
     $2300 = HEAP32[$2299>>2]|0; //@line 1246 "lpc.c"
     $2301 = $10; //@line 1246 "lpc.c"
     $2302 = (_bitshift64Ashr(($2297|0),($2300|0),($2301|0))|0); //@line 1246 "lpc.c"
     $2303 = tempRet0; //@line 1246 "lpc.c"
     $2304 = (($2294) + ($2302))|0; //@line 1246 "lpc.c"
     $2305 = $11; //@line 1246 "lpc.c"
     $2306 = $12; //@line 1246 "lpc.c"
     $2307 = (($2305) + ($2306<<2)|0); //@line 1246 "lpc.c"
     HEAP32[$2307>>2] = $2304; //@line 1246 "lpc.c"
     $2308 = $12; //@line 1242 "lpc.c"
     $2309 = (($2308) + 1)|0; //@line 1242 "lpc.c"
     $12 = $2309; //@line 1242 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   } else {
    while(1) {
     $2310 = $12; //@line 1250 "lpc.c"
     $2311 = $7; //@line 1250 "lpc.c"
     $2312 = ($2310|0)<($2311|0); //@line 1250 "lpc.c"
     if (!($2312)) {
      break;
     }
     $2313 = $6; //@line 1251 "lpc.c"
     $2314 = $12; //@line 1251 "lpc.c"
     $2315 = (($2313) + ($2314<<2)|0); //@line 1251 "lpc.c"
     $2316 = HEAP32[$2315>>2]|0; //@line 1251 "lpc.c"
     $2317 = $8; //@line 1251 "lpc.c"
     $2318 = HEAP32[$2317>>2]|0; //@line 1251 "lpc.c"
     $2319 = ($2318|0)<(0); //@line 1251 "lpc.c"
     $2320 = $2319 << 31 >> 31; //@line 1251 "lpc.c"
     $2321 = $11; //@line 1251 "lpc.c"
     $2322 = $12; //@line 1251 "lpc.c"
     $2323 = (($2322) - 1)|0; //@line 1251 "lpc.c"
     $2324 = (($2321) + ($2323<<2)|0); //@line 1251 "lpc.c"
     $2325 = HEAP32[$2324>>2]|0; //@line 1251 "lpc.c"
     $2326 = ($2325|0)<(0); //@line 1251 "lpc.c"
     $2327 = $2326 << 31 >> 31; //@line 1251 "lpc.c"
     $2328 = (___muldi3(($2318|0),($2320|0),($2325|0),($2327|0))|0); //@line 1251 "lpc.c"
     $2329 = tempRet0; //@line 1251 "lpc.c"
     $2330 = $10; //@line 1251 "lpc.c"
     $2331 = (_bitshift64Ashr(($2328|0),($2329|0),($2330|0))|0); //@line 1251 "lpc.c"
     $2332 = tempRet0; //@line 1251 "lpc.c"
     $2333 = (($2316) + ($2331))|0; //@line 1251 "lpc.c"
     $2334 = $11; //@line 1251 "lpc.c"
     $2335 = $12; //@line 1251 "lpc.c"
     $2336 = (($2334) + ($2335<<2)|0); //@line 1251 "lpc.c"
     HEAP32[$2336>>2] = $2333; //@line 1251 "lpc.c"
     $2337 = $12; //@line 1250 "lpc.c"
     $2338 = (($2337) + 1)|0; //@line 1250 "lpc.c"
     $12 = $2338; //@line 1250 "lpc.c"
    }
    STACKTOP = sp;return; //@line 1296 "lpc.c"
   }
  }
 }
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 1311 "lpc.c"
 $6 = (+($5>>>0)); //@line 1311 "lpc.c"
 $7 = 0.5 / $6; //@line 1311 "lpc.c"
 $4 = $7; //@line 1311 "lpc.c"
 $8 = $2; //@line 1313 "lpc.c"
 $9 = $4; //@line 1313 "lpc.c"
 $10 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($8,$9)); //@line 1313 "lpc.c"
 STACKTOP = sp;return (+$10); //@line 1313 "lpc.c"
}
function _FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $3; //@line 1318 "lpc.c"
 $7 = $6 > 0.0; //@line 1318 "lpc.c"
 do {
  if ($7) {
   $8 = $4; //@line 1319 "lpc.c"
   $9 = $3; //@line 1319 "lpc.c"
   $10 = $8 * $9; //@line 1319 "lpc.c"
   $11 = (+Math_log((+$10))); //@line 1319 "lpc.c"
   $12 = 0.5 * $11; //@line 1319 "lpc.c"
   $13 = $12 / 0.69314718055994529; //@line 1319 "lpc.c"
   $5 = $13; //@line 1319 "lpc.c"
   $14 = $5; //@line 1320 "lpc.c"
   $15 = $14 >= 0.0; //@line 1320 "lpc.c"
   if ($15) {
    $16 = $5; //@line 1321 "lpc.c"
    $2 = $16; //@line 1321 "lpc.c"
    break;
   } else {
    $2 = 0.0; //@line 1323 "lpc.c"
    break;
   }
  } else {
   $17 = $3; //@line 1325 "lpc.c"
   $18 = $17 < 0.0; //@line 1325 "lpc.c"
   if ($18) {
    $2 = 1.0000000000000001E+32; //@line 1326 "lpc.c"
    break;
   } else {
    $2 = 0.0; //@line 1329 "lpc.c"
    break;
   }
  }
 } while(0);
 $19 = $2; //@line 1331 "lpc.c"
 STACKTOP = sp;return (+$19); //@line 1331 "lpc.c"
}
function _FLAC__lpc_compute_best_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $6; //@line 1341 "lpc.c"
 $15 = (+($14>>>0)); //@line 1341 "lpc.c"
 $16 = 0.5 / $15; //@line 1341 "lpc.c"
 $13 = $16; //@line 1341 "lpc.c"
 $10 = 0; //@line 1343 "lpc.c"
 $12 = 4294967295.0; //@line 1344 "lpc.c"
 $9 = 0; //@line 1346 "lpc.c"
 $8 = 1; //@line 1346 "lpc.c"
 while(1) {
  $17 = $9; //@line 1346 "lpc.c"
  $18 = $5; //@line 1346 "lpc.c"
  $19 = ($17>>>0)<($18>>>0); //@line 1346 "lpc.c"
  if (!($19)) {
   break;
  }
  $20 = $4; //@line 1347 "lpc.c"
  $21 = $9; //@line 1347 "lpc.c"
  $22 = (($20) + ($21<<3)|0); //@line 1347 "lpc.c"
  $23 = +HEAPF64[$22>>3]; //@line 1347 "lpc.c"
  $24 = $13; //@line 1347 "lpc.c"
  $25 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample_with_error_scale($23,$24)); //@line 1347 "lpc.c"
  $26 = $6; //@line 1347 "lpc.c"
  $27 = $8; //@line 1347 "lpc.c"
  $28 = (($26) - ($27))|0; //@line 1347 "lpc.c"
  $29 = (+($28>>>0)); //@line 1347 "lpc.c"
  $30 = $25 * $29; //@line 1347 "lpc.c"
  $31 = $8; //@line 1347 "lpc.c"
  $32 = $7; //@line 1347 "lpc.c"
  $33 = Math_imul($31, $32)|0; //@line 1347 "lpc.c"
  $34 = (+($33>>>0)); //@line 1347 "lpc.c"
  $35 = $30 + $34; //@line 1347 "lpc.c"
  $11 = $35; //@line 1347 "lpc.c"
  $36 = $11; //@line 1348 "lpc.c"
  $37 = $12; //@line 1348 "lpc.c"
  $38 = $36 < $37; //@line 1348 "lpc.c"
  if ($38) {
   $39 = $9; //@line 1349 "lpc.c"
   $10 = $39; //@line 1349 "lpc.c"
   $40 = $11; //@line 1350 "lpc.c"
   $12 = $40; //@line 1350 "lpc.c"
  }
  $41 = $9; //@line 1346 "lpc.c"
  $42 = (($41) + 1)|0; //@line 1346 "lpc.c"
  $9 = $42; //@line 1346 "lpc.c"
  $43 = $8; //@line 1346 "lpc.c"
  $44 = (($43) + 1)|0; //@line 1346 "lpc.c"
  $8 = $44; //@line 1346 "lpc.c"
 }
 $45 = $10; //@line 1354 "lpc.c"
 $46 = (($45) + 1)|0; //@line 1354 "lpc.c"
 STACKTOP = sp;return ($46|0); //@line 1354 "lpc.c"
}
function _FLAC__MD5Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 219 "md5.c"
 $3 = ((($2)) + 64|0); //@line 219 "md5.c"
 HEAP32[$3>>2] = 1732584193; //@line 219 "md5.c"
 $4 = $1; //@line 220 "md5.c"
 $5 = ((($4)) + 64|0); //@line 220 "md5.c"
 $6 = ((($5)) + 4|0); //@line 220 "md5.c"
 HEAP32[$6>>2] = -271733879; //@line 220 "md5.c"
 $7 = $1; //@line 221 "md5.c"
 $8 = ((($7)) + 64|0); //@line 221 "md5.c"
 $9 = ((($8)) + 8|0); //@line 221 "md5.c"
 HEAP32[$9>>2] = -1732584194; //@line 221 "md5.c"
 $10 = $1; //@line 222 "md5.c"
 $11 = ((($10)) + 64|0); //@line 222 "md5.c"
 $12 = ((($11)) + 12|0); //@line 222 "md5.c"
 HEAP32[$12>>2] = 271733878; //@line 222 "md5.c"
 $13 = $1; //@line 224 "md5.c"
 $14 = ((($13)) + 80|0); //@line 224 "md5.c"
 HEAP32[$14>>2] = 0; //@line 224 "md5.c"
 $15 = $1; //@line 225 "md5.c"
 $16 = ((($15)) + 80|0); //@line 225 "md5.c"
 $17 = ((($16)) + 4|0); //@line 225 "md5.c"
 HEAP32[$17>>2] = 0; //@line 225 "md5.c"
 $18 = $1; //@line 227 "md5.c"
 $19 = ((($18)) + 88|0); //@line 227 "md5.c"
 HEAP32[$19>>2] = 0; //@line 227 "md5.c"
 $20 = $1; //@line 228 "md5.c"
 $21 = ((($20)) + 92|0); //@line 228 "md5.c"
 HEAP32[$21>>2] = 0; //@line 228 "md5.c"
 STACKTOP = sp;return; //@line 229 "md5.c"
}
function _FLAC__MD5Final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 237 "md5.c"
 $7 = ((($6)) + 80|0); //@line 237 "md5.c"
 $8 = HEAP32[$7>>2]|0; //@line 237 "md5.c"
 $9 = $8 & 63; //@line 237 "md5.c"
 $4 = $9; //@line 237 "md5.c"
 $10 = $3; //@line 238 "md5.c"
 $11 = $4; //@line 238 "md5.c"
 $12 = (($10) + ($11)|0); //@line 238 "md5.c"
 $5 = $12; //@line 238 "md5.c"
 $13 = $5; //@line 241 "md5.c"
 $14 = ((($13)) + 1|0); //@line 241 "md5.c"
 $5 = $14; //@line 241 "md5.c"
 HEAP8[$13>>0] = -128; //@line 241 "md5.c"
 $15 = $4; //@line 244 "md5.c"
 $16 = (55 - ($15))|0; //@line 244 "md5.c"
 $4 = $16; //@line 244 "md5.c"
 $17 = $4; //@line 246 "md5.c"
 $18 = ($17|0)<(0); //@line 246 "md5.c"
 if ($18) {
  $19 = $5; //@line 247 "md5.c"
  $20 = $4; //@line 247 "md5.c"
  $21 = (($20) + 8)|0; //@line 247 "md5.c"
  _memset(($19|0),0,($21|0))|0; //@line 247 "md5.c"
  $22 = $3; //@line 249 "md5.c"
  $23 = ((($22)) + 64|0); //@line 249 "md5.c"
  $24 = $3; //@line 249 "md5.c"
  _FLAC__MD5Transform($23,$24); //@line 249 "md5.c"
  $25 = $3; //@line 250 "md5.c"
  $5 = $25; //@line 250 "md5.c"
  $4 = 56; //@line 251 "md5.c"
 }
 $26 = $5; //@line 253 "md5.c"
 $27 = $4; //@line 253 "md5.c"
 _memset(($26|0),0,($27|0))|0; //@line 253 "md5.c"
 $28 = $3; //@line 257 "md5.c"
 $29 = ((($28)) + 80|0); //@line 257 "md5.c"
 $30 = HEAP32[$29>>2]|0; //@line 257 "md5.c"
 $31 = $30 << 3; //@line 257 "md5.c"
 $32 = $3; //@line 257 "md5.c"
 $33 = ((($32)) + 56|0); //@line 257 "md5.c"
 HEAP32[$33>>2] = $31; //@line 257 "md5.c"
 $34 = $3; //@line 258 "md5.c"
 $35 = ((($34)) + 80|0); //@line 258 "md5.c"
 $36 = ((($35)) + 4|0); //@line 258 "md5.c"
 $37 = HEAP32[$36>>2]|0; //@line 258 "md5.c"
 $38 = $37 << 3; //@line 258 "md5.c"
 $39 = $3; //@line 258 "md5.c"
 $40 = ((($39)) + 80|0); //@line 258 "md5.c"
 $41 = HEAP32[$40>>2]|0; //@line 258 "md5.c"
 $42 = $41 >>> 29; //@line 258 "md5.c"
 $43 = $38 | $42; //@line 258 "md5.c"
 $44 = $3; //@line 258 "md5.c"
 $45 = ((($44)) + 60|0); //@line 258 "md5.c"
 HEAP32[$45>>2] = $43; //@line 258 "md5.c"
 $46 = $3; //@line 259 "md5.c"
 $47 = ((($46)) + 64|0); //@line 259 "md5.c"
 $48 = $3; //@line 259 "md5.c"
 _FLAC__MD5Transform($47,$48); //@line 259 "md5.c"
 $49 = $2; //@line 262 "md5.c"
 $50 = $3; //@line 262 "md5.c"
 $51 = ((($50)) + 64|0); //@line 262 "md5.c"
 dest=$49; src=$51; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 262 "md5.c"
 $52 = $3; //@line 263 "md5.c"
 $53 = ((($52)) + 88|0); //@line 263 "md5.c"
 $54 = HEAP32[$53>>2]|0; //@line 263 "md5.c"
 $55 = (0|0)!=($54|0); //@line 263 "md5.c"
 if (!($55)) {
  $63 = $3; //@line 268 "md5.c"
  dest=$63; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 268 "md5.c"
  STACKTOP = sp;return; //@line 269 "md5.c"
 }
 $56 = $3; //@line 264 "md5.c"
 $57 = ((($56)) + 88|0); //@line 264 "md5.c"
 $58 = HEAP32[$57>>2]|0; //@line 264 "md5.c"
 _free($58); //@line 264 "md5.c"
 $59 = $3; //@line 265 "md5.c"
 $60 = ((($59)) + 88|0); //@line 265 "md5.c"
 HEAP32[$60>>2] = 0; //@line 265 "md5.c"
 $61 = $3; //@line 266 "md5.c"
 $62 = ((($61)) + 92|0); //@line 266 "md5.c"
 HEAP32[$62>>2] = 0; //@line 266 "md5.c"
 $63 = $3; //@line 268 "md5.c"
 dest=$63; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0)); //@line 268 "md5.c"
 STACKTOP = sp;return; //@line 269 "md5.c"
}
function _FLAC__MD5Transform($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2; //@line 58 "md5.c"
 $9 = HEAP32[$8>>2]|0; //@line 58 "md5.c"
 $4 = $9; //@line 58 "md5.c"
 $10 = $2; //@line 59 "md5.c"
 $11 = ((($10)) + 4|0); //@line 59 "md5.c"
 $12 = HEAP32[$11>>2]|0; //@line 59 "md5.c"
 $5 = $12; //@line 59 "md5.c"
 $13 = $2; //@line 60 "md5.c"
 $14 = ((($13)) + 8|0); //@line 60 "md5.c"
 $15 = HEAP32[$14>>2]|0; //@line 60 "md5.c"
 $6 = $15; //@line 60 "md5.c"
 $16 = $2; //@line 61 "md5.c"
 $17 = ((($16)) + 12|0); //@line 61 "md5.c"
 $18 = HEAP32[$17>>2]|0; //@line 61 "md5.c"
 $7 = $18; //@line 61 "md5.c"
 $19 = $7; //@line 63 "md5.c"
 $20 = $5; //@line 63 "md5.c"
 $21 = $6; //@line 63 "md5.c"
 $22 = $7; //@line 63 "md5.c"
 $23 = $21 ^ $22; //@line 63 "md5.c"
 $24 = $20 & $23; //@line 63 "md5.c"
 $25 = $19 ^ $24; //@line 63 "md5.c"
 $26 = $3; //@line 63 "md5.c"
 $27 = HEAP32[$26>>2]|0; //@line 63 "md5.c"
 $28 = (($25) + ($27))|0; //@line 63 "md5.c"
 $29 = (($28) + -680876936)|0; //@line 63 "md5.c"
 $30 = $4; //@line 63 "md5.c"
 $31 = (($30) + ($29))|0; //@line 63 "md5.c"
 $4 = $31; //@line 63 "md5.c"
 $32 = $4; //@line 63 "md5.c"
 $33 = $32 << 7; //@line 63 "md5.c"
 $34 = $4; //@line 63 "md5.c"
 $35 = $34 >>> 25; //@line 63 "md5.c"
 $36 = $33 | $35; //@line 63 "md5.c"
 $37 = $5; //@line 63 "md5.c"
 $38 = (($36) + ($37))|0; //@line 63 "md5.c"
 $4 = $38; //@line 63 "md5.c"
 $39 = $6; //@line 64 "md5.c"
 $40 = $4; //@line 64 "md5.c"
 $41 = $5; //@line 64 "md5.c"
 $42 = $6; //@line 64 "md5.c"
 $43 = $41 ^ $42; //@line 64 "md5.c"
 $44 = $40 & $43; //@line 64 "md5.c"
 $45 = $39 ^ $44; //@line 64 "md5.c"
 $46 = $3; //@line 64 "md5.c"
 $47 = ((($46)) + 4|0); //@line 64 "md5.c"
 $48 = HEAP32[$47>>2]|0; //@line 64 "md5.c"
 $49 = (($45) + ($48))|0; //@line 64 "md5.c"
 $50 = (($49) + -389564586)|0; //@line 64 "md5.c"
 $51 = $7; //@line 64 "md5.c"
 $52 = (($51) + ($50))|0; //@line 64 "md5.c"
 $7 = $52; //@line 64 "md5.c"
 $53 = $7; //@line 64 "md5.c"
 $54 = $53 << 12; //@line 64 "md5.c"
 $55 = $7; //@line 64 "md5.c"
 $56 = $55 >>> 20; //@line 64 "md5.c"
 $57 = $54 | $56; //@line 64 "md5.c"
 $58 = $4; //@line 64 "md5.c"
 $59 = (($57) + ($58))|0; //@line 64 "md5.c"
 $7 = $59; //@line 64 "md5.c"
 $60 = $5; //@line 65 "md5.c"
 $61 = $7; //@line 65 "md5.c"
 $62 = $4; //@line 65 "md5.c"
 $63 = $5; //@line 65 "md5.c"
 $64 = $62 ^ $63; //@line 65 "md5.c"
 $65 = $61 & $64; //@line 65 "md5.c"
 $66 = $60 ^ $65; //@line 65 "md5.c"
 $67 = $3; //@line 65 "md5.c"
 $68 = ((($67)) + 8|0); //@line 65 "md5.c"
 $69 = HEAP32[$68>>2]|0; //@line 65 "md5.c"
 $70 = (($66) + ($69))|0; //@line 65 "md5.c"
 $71 = (($70) + 606105819)|0; //@line 65 "md5.c"
 $72 = $6; //@line 65 "md5.c"
 $73 = (($72) + ($71))|0; //@line 65 "md5.c"
 $6 = $73; //@line 65 "md5.c"
 $74 = $6; //@line 65 "md5.c"
 $75 = $74 << 17; //@line 65 "md5.c"
 $76 = $6; //@line 65 "md5.c"
 $77 = $76 >>> 15; //@line 65 "md5.c"
 $78 = $75 | $77; //@line 65 "md5.c"
 $79 = $7; //@line 65 "md5.c"
 $80 = (($78) + ($79))|0; //@line 65 "md5.c"
 $6 = $80; //@line 65 "md5.c"
 $81 = $4; //@line 66 "md5.c"
 $82 = $6; //@line 66 "md5.c"
 $83 = $7; //@line 66 "md5.c"
 $84 = $4; //@line 66 "md5.c"
 $85 = $83 ^ $84; //@line 66 "md5.c"
 $86 = $82 & $85; //@line 66 "md5.c"
 $87 = $81 ^ $86; //@line 66 "md5.c"
 $88 = $3; //@line 66 "md5.c"
 $89 = ((($88)) + 12|0); //@line 66 "md5.c"
 $90 = HEAP32[$89>>2]|0; //@line 66 "md5.c"
 $91 = (($87) + ($90))|0; //@line 66 "md5.c"
 $92 = (($91) + -1044525330)|0; //@line 66 "md5.c"
 $93 = $5; //@line 66 "md5.c"
 $94 = (($93) + ($92))|0; //@line 66 "md5.c"
 $5 = $94; //@line 66 "md5.c"
 $95 = $5; //@line 66 "md5.c"
 $96 = $95 << 22; //@line 66 "md5.c"
 $97 = $5; //@line 66 "md5.c"
 $98 = $97 >>> 10; //@line 66 "md5.c"
 $99 = $96 | $98; //@line 66 "md5.c"
 $100 = $6; //@line 66 "md5.c"
 $101 = (($99) + ($100))|0; //@line 66 "md5.c"
 $5 = $101; //@line 66 "md5.c"
 $102 = $7; //@line 67 "md5.c"
 $103 = $5; //@line 67 "md5.c"
 $104 = $6; //@line 67 "md5.c"
 $105 = $7; //@line 67 "md5.c"
 $106 = $104 ^ $105; //@line 67 "md5.c"
 $107 = $103 & $106; //@line 67 "md5.c"
 $108 = $102 ^ $107; //@line 67 "md5.c"
 $109 = $3; //@line 67 "md5.c"
 $110 = ((($109)) + 16|0); //@line 67 "md5.c"
 $111 = HEAP32[$110>>2]|0; //@line 67 "md5.c"
 $112 = (($108) + ($111))|0; //@line 67 "md5.c"
 $113 = (($112) + -176418897)|0; //@line 67 "md5.c"
 $114 = $4; //@line 67 "md5.c"
 $115 = (($114) + ($113))|0; //@line 67 "md5.c"
 $4 = $115; //@line 67 "md5.c"
 $116 = $4; //@line 67 "md5.c"
 $117 = $116 << 7; //@line 67 "md5.c"
 $118 = $4; //@line 67 "md5.c"
 $119 = $118 >>> 25; //@line 67 "md5.c"
 $120 = $117 | $119; //@line 67 "md5.c"
 $121 = $5; //@line 67 "md5.c"
 $122 = (($120) + ($121))|0; //@line 67 "md5.c"
 $4 = $122; //@line 67 "md5.c"
 $123 = $6; //@line 68 "md5.c"
 $124 = $4; //@line 68 "md5.c"
 $125 = $5; //@line 68 "md5.c"
 $126 = $6; //@line 68 "md5.c"
 $127 = $125 ^ $126; //@line 68 "md5.c"
 $128 = $124 & $127; //@line 68 "md5.c"
 $129 = $123 ^ $128; //@line 68 "md5.c"
 $130 = $3; //@line 68 "md5.c"
 $131 = ((($130)) + 20|0); //@line 68 "md5.c"
 $132 = HEAP32[$131>>2]|0; //@line 68 "md5.c"
 $133 = (($129) + ($132))|0; //@line 68 "md5.c"
 $134 = (($133) + 1200080426)|0; //@line 68 "md5.c"
 $135 = $7; //@line 68 "md5.c"
 $136 = (($135) + ($134))|0; //@line 68 "md5.c"
 $7 = $136; //@line 68 "md5.c"
 $137 = $7; //@line 68 "md5.c"
 $138 = $137 << 12; //@line 68 "md5.c"
 $139 = $7; //@line 68 "md5.c"
 $140 = $139 >>> 20; //@line 68 "md5.c"
 $141 = $138 | $140; //@line 68 "md5.c"
 $142 = $4; //@line 68 "md5.c"
 $143 = (($141) + ($142))|0; //@line 68 "md5.c"
 $7 = $143; //@line 68 "md5.c"
 $144 = $5; //@line 69 "md5.c"
 $145 = $7; //@line 69 "md5.c"
 $146 = $4; //@line 69 "md5.c"
 $147 = $5; //@line 69 "md5.c"
 $148 = $146 ^ $147; //@line 69 "md5.c"
 $149 = $145 & $148; //@line 69 "md5.c"
 $150 = $144 ^ $149; //@line 69 "md5.c"
 $151 = $3; //@line 69 "md5.c"
 $152 = ((($151)) + 24|0); //@line 69 "md5.c"
 $153 = HEAP32[$152>>2]|0; //@line 69 "md5.c"
 $154 = (($150) + ($153))|0; //@line 69 "md5.c"
 $155 = (($154) + -1473231341)|0; //@line 69 "md5.c"
 $156 = $6; //@line 69 "md5.c"
 $157 = (($156) + ($155))|0; //@line 69 "md5.c"
 $6 = $157; //@line 69 "md5.c"
 $158 = $6; //@line 69 "md5.c"
 $159 = $158 << 17; //@line 69 "md5.c"
 $160 = $6; //@line 69 "md5.c"
 $161 = $160 >>> 15; //@line 69 "md5.c"
 $162 = $159 | $161; //@line 69 "md5.c"
 $163 = $7; //@line 69 "md5.c"
 $164 = (($162) + ($163))|0; //@line 69 "md5.c"
 $6 = $164; //@line 69 "md5.c"
 $165 = $4; //@line 70 "md5.c"
 $166 = $6; //@line 70 "md5.c"
 $167 = $7; //@line 70 "md5.c"
 $168 = $4; //@line 70 "md5.c"
 $169 = $167 ^ $168; //@line 70 "md5.c"
 $170 = $166 & $169; //@line 70 "md5.c"
 $171 = $165 ^ $170; //@line 70 "md5.c"
 $172 = $3; //@line 70 "md5.c"
 $173 = ((($172)) + 28|0); //@line 70 "md5.c"
 $174 = HEAP32[$173>>2]|0; //@line 70 "md5.c"
 $175 = (($171) + ($174))|0; //@line 70 "md5.c"
 $176 = (($175) + -45705983)|0; //@line 70 "md5.c"
 $177 = $5; //@line 70 "md5.c"
 $178 = (($177) + ($176))|0; //@line 70 "md5.c"
 $5 = $178; //@line 70 "md5.c"
 $179 = $5; //@line 70 "md5.c"
 $180 = $179 << 22; //@line 70 "md5.c"
 $181 = $5; //@line 70 "md5.c"
 $182 = $181 >>> 10; //@line 70 "md5.c"
 $183 = $180 | $182; //@line 70 "md5.c"
 $184 = $6; //@line 70 "md5.c"
 $185 = (($183) + ($184))|0; //@line 70 "md5.c"
 $5 = $185; //@line 70 "md5.c"
 $186 = $7; //@line 71 "md5.c"
 $187 = $5; //@line 71 "md5.c"
 $188 = $6; //@line 71 "md5.c"
 $189 = $7; //@line 71 "md5.c"
 $190 = $188 ^ $189; //@line 71 "md5.c"
 $191 = $187 & $190; //@line 71 "md5.c"
 $192 = $186 ^ $191; //@line 71 "md5.c"
 $193 = $3; //@line 71 "md5.c"
 $194 = ((($193)) + 32|0); //@line 71 "md5.c"
 $195 = HEAP32[$194>>2]|0; //@line 71 "md5.c"
 $196 = (($192) + ($195))|0; //@line 71 "md5.c"
 $197 = (($196) + 1770035416)|0; //@line 71 "md5.c"
 $198 = $4; //@line 71 "md5.c"
 $199 = (($198) + ($197))|0; //@line 71 "md5.c"
 $4 = $199; //@line 71 "md5.c"
 $200 = $4; //@line 71 "md5.c"
 $201 = $200 << 7; //@line 71 "md5.c"
 $202 = $4; //@line 71 "md5.c"
 $203 = $202 >>> 25; //@line 71 "md5.c"
 $204 = $201 | $203; //@line 71 "md5.c"
 $205 = $5; //@line 71 "md5.c"
 $206 = (($204) + ($205))|0; //@line 71 "md5.c"
 $4 = $206; //@line 71 "md5.c"
 $207 = $6; //@line 72 "md5.c"
 $208 = $4; //@line 72 "md5.c"
 $209 = $5; //@line 72 "md5.c"
 $210 = $6; //@line 72 "md5.c"
 $211 = $209 ^ $210; //@line 72 "md5.c"
 $212 = $208 & $211; //@line 72 "md5.c"
 $213 = $207 ^ $212; //@line 72 "md5.c"
 $214 = $3; //@line 72 "md5.c"
 $215 = ((($214)) + 36|0); //@line 72 "md5.c"
 $216 = HEAP32[$215>>2]|0; //@line 72 "md5.c"
 $217 = (($213) + ($216))|0; //@line 72 "md5.c"
 $218 = (($217) + -1958414417)|0; //@line 72 "md5.c"
 $219 = $7; //@line 72 "md5.c"
 $220 = (($219) + ($218))|0; //@line 72 "md5.c"
 $7 = $220; //@line 72 "md5.c"
 $221 = $7; //@line 72 "md5.c"
 $222 = $221 << 12; //@line 72 "md5.c"
 $223 = $7; //@line 72 "md5.c"
 $224 = $223 >>> 20; //@line 72 "md5.c"
 $225 = $222 | $224; //@line 72 "md5.c"
 $226 = $4; //@line 72 "md5.c"
 $227 = (($225) + ($226))|0; //@line 72 "md5.c"
 $7 = $227; //@line 72 "md5.c"
 $228 = $5; //@line 73 "md5.c"
 $229 = $7; //@line 73 "md5.c"
 $230 = $4; //@line 73 "md5.c"
 $231 = $5; //@line 73 "md5.c"
 $232 = $230 ^ $231; //@line 73 "md5.c"
 $233 = $229 & $232; //@line 73 "md5.c"
 $234 = $228 ^ $233; //@line 73 "md5.c"
 $235 = $3; //@line 73 "md5.c"
 $236 = ((($235)) + 40|0); //@line 73 "md5.c"
 $237 = HEAP32[$236>>2]|0; //@line 73 "md5.c"
 $238 = (($234) + ($237))|0; //@line 73 "md5.c"
 $239 = (($238) + -42063)|0; //@line 73 "md5.c"
 $240 = $6; //@line 73 "md5.c"
 $241 = (($240) + ($239))|0; //@line 73 "md5.c"
 $6 = $241; //@line 73 "md5.c"
 $242 = $6; //@line 73 "md5.c"
 $243 = $242 << 17; //@line 73 "md5.c"
 $244 = $6; //@line 73 "md5.c"
 $245 = $244 >>> 15; //@line 73 "md5.c"
 $246 = $243 | $245; //@line 73 "md5.c"
 $247 = $7; //@line 73 "md5.c"
 $248 = (($246) + ($247))|0; //@line 73 "md5.c"
 $6 = $248; //@line 73 "md5.c"
 $249 = $4; //@line 74 "md5.c"
 $250 = $6; //@line 74 "md5.c"
 $251 = $7; //@line 74 "md5.c"
 $252 = $4; //@line 74 "md5.c"
 $253 = $251 ^ $252; //@line 74 "md5.c"
 $254 = $250 & $253; //@line 74 "md5.c"
 $255 = $249 ^ $254; //@line 74 "md5.c"
 $256 = $3; //@line 74 "md5.c"
 $257 = ((($256)) + 44|0); //@line 74 "md5.c"
 $258 = HEAP32[$257>>2]|0; //@line 74 "md5.c"
 $259 = (($255) + ($258))|0; //@line 74 "md5.c"
 $260 = (($259) + -1990404162)|0; //@line 74 "md5.c"
 $261 = $5; //@line 74 "md5.c"
 $262 = (($261) + ($260))|0; //@line 74 "md5.c"
 $5 = $262; //@line 74 "md5.c"
 $263 = $5; //@line 74 "md5.c"
 $264 = $263 << 22; //@line 74 "md5.c"
 $265 = $5; //@line 74 "md5.c"
 $266 = $265 >>> 10; //@line 74 "md5.c"
 $267 = $264 | $266; //@line 74 "md5.c"
 $268 = $6; //@line 74 "md5.c"
 $269 = (($267) + ($268))|0; //@line 74 "md5.c"
 $5 = $269; //@line 74 "md5.c"
 $270 = $7; //@line 75 "md5.c"
 $271 = $5; //@line 75 "md5.c"
 $272 = $6; //@line 75 "md5.c"
 $273 = $7; //@line 75 "md5.c"
 $274 = $272 ^ $273; //@line 75 "md5.c"
 $275 = $271 & $274; //@line 75 "md5.c"
 $276 = $270 ^ $275; //@line 75 "md5.c"
 $277 = $3; //@line 75 "md5.c"
 $278 = ((($277)) + 48|0); //@line 75 "md5.c"
 $279 = HEAP32[$278>>2]|0; //@line 75 "md5.c"
 $280 = (($276) + ($279))|0; //@line 75 "md5.c"
 $281 = (($280) + 1804603682)|0; //@line 75 "md5.c"
 $282 = $4; //@line 75 "md5.c"
 $283 = (($282) + ($281))|0; //@line 75 "md5.c"
 $4 = $283; //@line 75 "md5.c"
 $284 = $4; //@line 75 "md5.c"
 $285 = $284 << 7; //@line 75 "md5.c"
 $286 = $4; //@line 75 "md5.c"
 $287 = $286 >>> 25; //@line 75 "md5.c"
 $288 = $285 | $287; //@line 75 "md5.c"
 $289 = $5; //@line 75 "md5.c"
 $290 = (($288) + ($289))|0; //@line 75 "md5.c"
 $4 = $290; //@line 75 "md5.c"
 $291 = $6; //@line 76 "md5.c"
 $292 = $4; //@line 76 "md5.c"
 $293 = $5; //@line 76 "md5.c"
 $294 = $6; //@line 76 "md5.c"
 $295 = $293 ^ $294; //@line 76 "md5.c"
 $296 = $292 & $295; //@line 76 "md5.c"
 $297 = $291 ^ $296; //@line 76 "md5.c"
 $298 = $3; //@line 76 "md5.c"
 $299 = ((($298)) + 52|0); //@line 76 "md5.c"
 $300 = HEAP32[$299>>2]|0; //@line 76 "md5.c"
 $301 = (($297) + ($300))|0; //@line 76 "md5.c"
 $302 = (($301) + -40341101)|0; //@line 76 "md5.c"
 $303 = $7; //@line 76 "md5.c"
 $304 = (($303) + ($302))|0; //@line 76 "md5.c"
 $7 = $304; //@line 76 "md5.c"
 $305 = $7; //@line 76 "md5.c"
 $306 = $305 << 12; //@line 76 "md5.c"
 $307 = $7; //@line 76 "md5.c"
 $308 = $307 >>> 20; //@line 76 "md5.c"
 $309 = $306 | $308; //@line 76 "md5.c"
 $310 = $4; //@line 76 "md5.c"
 $311 = (($309) + ($310))|0; //@line 76 "md5.c"
 $7 = $311; //@line 76 "md5.c"
 $312 = $5; //@line 77 "md5.c"
 $313 = $7; //@line 77 "md5.c"
 $314 = $4; //@line 77 "md5.c"
 $315 = $5; //@line 77 "md5.c"
 $316 = $314 ^ $315; //@line 77 "md5.c"
 $317 = $313 & $316; //@line 77 "md5.c"
 $318 = $312 ^ $317; //@line 77 "md5.c"
 $319 = $3; //@line 77 "md5.c"
 $320 = ((($319)) + 56|0); //@line 77 "md5.c"
 $321 = HEAP32[$320>>2]|0; //@line 77 "md5.c"
 $322 = (($318) + ($321))|0; //@line 77 "md5.c"
 $323 = (($322) + -1502002290)|0; //@line 77 "md5.c"
 $324 = $6; //@line 77 "md5.c"
 $325 = (($324) + ($323))|0; //@line 77 "md5.c"
 $6 = $325; //@line 77 "md5.c"
 $326 = $6; //@line 77 "md5.c"
 $327 = $326 << 17; //@line 77 "md5.c"
 $328 = $6; //@line 77 "md5.c"
 $329 = $328 >>> 15; //@line 77 "md5.c"
 $330 = $327 | $329; //@line 77 "md5.c"
 $331 = $7; //@line 77 "md5.c"
 $332 = (($330) + ($331))|0; //@line 77 "md5.c"
 $6 = $332; //@line 77 "md5.c"
 $333 = $4; //@line 78 "md5.c"
 $334 = $6; //@line 78 "md5.c"
 $335 = $7; //@line 78 "md5.c"
 $336 = $4; //@line 78 "md5.c"
 $337 = $335 ^ $336; //@line 78 "md5.c"
 $338 = $334 & $337; //@line 78 "md5.c"
 $339 = $333 ^ $338; //@line 78 "md5.c"
 $340 = $3; //@line 78 "md5.c"
 $341 = ((($340)) + 60|0); //@line 78 "md5.c"
 $342 = HEAP32[$341>>2]|0; //@line 78 "md5.c"
 $343 = (($339) + ($342))|0; //@line 78 "md5.c"
 $344 = (($343) + 1236535329)|0; //@line 78 "md5.c"
 $345 = $5; //@line 78 "md5.c"
 $346 = (($345) + ($344))|0; //@line 78 "md5.c"
 $5 = $346; //@line 78 "md5.c"
 $347 = $5; //@line 78 "md5.c"
 $348 = $347 << 22; //@line 78 "md5.c"
 $349 = $5; //@line 78 "md5.c"
 $350 = $349 >>> 10; //@line 78 "md5.c"
 $351 = $348 | $350; //@line 78 "md5.c"
 $352 = $6; //@line 78 "md5.c"
 $353 = (($351) + ($352))|0; //@line 78 "md5.c"
 $5 = $353; //@line 78 "md5.c"
 $354 = $6; //@line 80 "md5.c"
 $355 = $7; //@line 80 "md5.c"
 $356 = $5; //@line 80 "md5.c"
 $357 = $6; //@line 80 "md5.c"
 $358 = $356 ^ $357; //@line 80 "md5.c"
 $359 = $355 & $358; //@line 80 "md5.c"
 $360 = $354 ^ $359; //@line 80 "md5.c"
 $361 = $3; //@line 80 "md5.c"
 $362 = ((($361)) + 4|0); //@line 80 "md5.c"
 $363 = HEAP32[$362>>2]|0; //@line 80 "md5.c"
 $364 = (($360) + ($363))|0; //@line 80 "md5.c"
 $365 = (($364) + -165796510)|0; //@line 80 "md5.c"
 $366 = $4; //@line 80 "md5.c"
 $367 = (($366) + ($365))|0; //@line 80 "md5.c"
 $4 = $367; //@line 80 "md5.c"
 $368 = $4; //@line 80 "md5.c"
 $369 = $368 << 5; //@line 80 "md5.c"
 $370 = $4; //@line 80 "md5.c"
 $371 = $370 >>> 27; //@line 80 "md5.c"
 $372 = $369 | $371; //@line 80 "md5.c"
 $373 = $5; //@line 80 "md5.c"
 $374 = (($372) + ($373))|0; //@line 80 "md5.c"
 $4 = $374; //@line 80 "md5.c"
 $375 = $5; //@line 81 "md5.c"
 $376 = $6; //@line 81 "md5.c"
 $377 = $4; //@line 81 "md5.c"
 $378 = $5; //@line 81 "md5.c"
 $379 = $377 ^ $378; //@line 81 "md5.c"
 $380 = $376 & $379; //@line 81 "md5.c"
 $381 = $375 ^ $380; //@line 81 "md5.c"
 $382 = $3; //@line 81 "md5.c"
 $383 = ((($382)) + 24|0); //@line 81 "md5.c"
 $384 = HEAP32[$383>>2]|0; //@line 81 "md5.c"
 $385 = (($381) + ($384))|0; //@line 81 "md5.c"
 $386 = (($385) + -1069501632)|0; //@line 81 "md5.c"
 $387 = $7; //@line 81 "md5.c"
 $388 = (($387) + ($386))|0; //@line 81 "md5.c"
 $7 = $388; //@line 81 "md5.c"
 $389 = $7; //@line 81 "md5.c"
 $390 = $389 << 9; //@line 81 "md5.c"
 $391 = $7; //@line 81 "md5.c"
 $392 = $391 >>> 23; //@line 81 "md5.c"
 $393 = $390 | $392; //@line 81 "md5.c"
 $394 = $4; //@line 81 "md5.c"
 $395 = (($393) + ($394))|0; //@line 81 "md5.c"
 $7 = $395; //@line 81 "md5.c"
 $396 = $4; //@line 82 "md5.c"
 $397 = $5; //@line 82 "md5.c"
 $398 = $7; //@line 82 "md5.c"
 $399 = $4; //@line 82 "md5.c"
 $400 = $398 ^ $399; //@line 82 "md5.c"
 $401 = $397 & $400; //@line 82 "md5.c"
 $402 = $396 ^ $401; //@line 82 "md5.c"
 $403 = $3; //@line 82 "md5.c"
 $404 = ((($403)) + 44|0); //@line 82 "md5.c"
 $405 = HEAP32[$404>>2]|0; //@line 82 "md5.c"
 $406 = (($402) + ($405))|0; //@line 82 "md5.c"
 $407 = (($406) + 643717713)|0; //@line 82 "md5.c"
 $408 = $6; //@line 82 "md5.c"
 $409 = (($408) + ($407))|0; //@line 82 "md5.c"
 $6 = $409; //@line 82 "md5.c"
 $410 = $6; //@line 82 "md5.c"
 $411 = $410 << 14; //@line 82 "md5.c"
 $412 = $6; //@line 82 "md5.c"
 $413 = $412 >>> 18; //@line 82 "md5.c"
 $414 = $411 | $413; //@line 82 "md5.c"
 $415 = $7; //@line 82 "md5.c"
 $416 = (($414) + ($415))|0; //@line 82 "md5.c"
 $6 = $416; //@line 82 "md5.c"
 $417 = $7; //@line 83 "md5.c"
 $418 = $4; //@line 83 "md5.c"
 $419 = $6; //@line 83 "md5.c"
 $420 = $7; //@line 83 "md5.c"
 $421 = $419 ^ $420; //@line 83 "md5.c"
 $422 = $418 & $421; //@line 83 "md5.c"
 $423 = $417 ^ $422; //@line 83 "md5.c"
 $424 = $3; //@line 83 "md5.c"
 $425 = HEAP32[$424>>2]|0; //@line 83 "md5.c"
 $426 = (($423) + ($425))|0; //@line 83 "md5.c"
 $427 = (($426) + -373897302)|0; //@line 83 "md5.c"
 $428 = $5; //@line 83 "md5.c"
 $429 = (($428) + ($427))|0; //@line 83 "md5.c"
 $5 = $429; //@line 83 "md5.c"
 $430 = $5; //@line 83 "md5.c"
 $431 = $430 << 20; //@line 83 "md5.c"
 $432 = $5; //@line 83 "md5.c"
 $433 = $432 >>> 12; //@line 83 "md5.c"
 $434 = $431 | $433; //@line 83 "md5.c"
 $435 = $6; //@line 83 "md5.c"
 $436 = (($434) + ($435))|0; //@line 83 "md5.c"
 $5 = $436; //@line 83 "md5.c"
 $437 = $6; //@line 84 "md5.c"
 $438 = $7; //@line 84 "md5.c"
 $439 = $5; //@line 84 "md5.c"
 $440 = $6; //@line 84 "md5.c"
 $441 = $439 ^ $440; //@line 84 "md5.c"
 $442 = $438 & $441; //@line 84 "md5.c"
 $443 = $437 ^ $442; //@line 84 "md5.c"
 $444 = $3; //@line 84 "md5.c"
 $445 = ((($444)) + 20|0); //@line 84 "md5.c"
 $446 = HEAP32[$445>>2]|0; //@line 84 "md5.c"
 $447 = (($443) + ($446))|0; //@line 84 "md5.c"
 $448 = (($447) + -701558691)|0; //@line 84 "md5.c"
 $449 = $4; //@line 84 "md5.c"
 $450 = (($449) + ($448))|0; //@line 84 "md5.c"
 $4 = $450; //@line 84 "md5.c"
 $451 = $4; //@line 84 "md5.c"
 $452 = $451 << 5; //@line 84 "md5.c"
 $453 = $4; //@line 84 "md5.c"
 $454 = $453 >>> 27; //@line 84 "md5.c"
 $455 = $452 | $454; //@line 84 "md5.c"
 $456 = $5; //@line 84 "md5.c"
 $457 = (($455) + ($456))|0; //@line 84 "md5.c"
 $4 = $457; //@line 84 "md5.c"
 $458 = $5; //@line 85 "md5.c"
 $459 = $6; //@line 85 "md5.c"
 $460 = $4; //@line 85 "md5.c"
 $461 = $5; //@line 85 "md5.c"
 $462 = $460 ^ $461; //@line 85 "md5.c"
 $463 = $459 & $462; //@line 85 "md5.c"
 $464 = $458 ^ $463; //@line 85 "md5.c"
 $465 = $3; //@line 85 "md5.c"
 $466 = ((($465)) + 40|0); //@line 85 "md5.c"
 $467 = HEAP32[$466>>2]|0; //@line 85 "md5.c"
 $468 = (($464) + ($467))|0; //@line 85 "md5.c"
 $469 = (($468) + 38016083)|0; //@line 85 "md5.c"
 $470 = $7; //@line 85 "md5.c"
 $471 = (($470) + ($469))|0; //@line 85 "md5.c"
 $7 = $471; //@line 85 "md5.c"
 $472 = $7; //@line 85 "md5.c"
 $473 = $472 << 9; //@line 85 "md5.c"
 $474 = $7; //@line 85 "md5.c"
 $475 = $474 >>> 23; //@line 85 "md5.c"
 $476 = $473 | $475; //@line 85 "md5.c"
 $477 = $4; //@line 85 "md5.c"
 $478 = (($476) + ($477))|0; //@line 85 "md5.c"
 $7 = $478; //@line 85 "md5.c"
 $479 = $4; //@line 86 "md5.c"
 $480 = $5; //@line 86 "md5.c"
 $481 = $7; //@line 86 "md5.c"
 $482 = $4; //@line 86 "md5.c"
 $483 = $481 ^ $482; //@line 86 "md5.c"
 $484 = $480 & $483; //@line 86 "md5.c"
 $485 = $479 ^ $484; //@line 86 "md5.c"
 $486 = $3; //@line 86 "md5.c"
 $487 = ((($486)) + 60|0); //@line 86 "md5.c"
 $488 = HEAP32[$487>>2]|0; //@line 86 "md5.c"
 $489 = (($485) + ($488))|0; //@line 86 "md5.c"
 $490 = (($489) + -660478335)|0; //@line 86 "md5.c"
 $491 = $6; //@line 86 "md5.c"
 $492 = (($491) + ($490))|0; //@line 86 "md5.c"
 $6 = $492; //@line 86 "md5.c"
 $493 = $6; //@line 86 "md5.c"
 $494 = $493 << 14; //@line 86 "md5.c"
 $495 = $6; //@line 86 "md5.c"
 $496 = $495 >>> 18; //@line 86 "md5.c"
 $497 = $494 | $496; //@line 86 "md5.c"
 $498 = $7; //@line 86 "md5.c"
 $499 = (($497) + ($498))|0; //@line 86 "md5.c"
 $6 = $499; //@line 86 "md5.c"
 $500 = $7; //@line 87 "md5.c"
 $501 = $4; //@line 87 "md5.c"
 $502 = $6; //@line 87 "md5.c"
 $503 = $7; //@line 87 "md5.c"
 $504 = $502 ^ $503; //@line 87 "md5.c"
 $505 = $501 & $504; //@line 87 "md5.c"
 $506 = $500 ^ $505; //@line 87 "md5.c"
 $507 = $3; //@line 87 "md5.c"
 $508 = ((($507)) + 16|0); //@line 87 "md5.c"
 $509 = HEAP32[$508>>2]|0; //@line 87 "md5.c"
 $510 = (($506) + ($509))|0; //@line 87 "md5.c"
 $511 = (($510) + -405537848)|0; //@line 87 "md5.c"
 $512 = $5; //@line 87 "md5.c"
 $513 = (($512) + ($511))|0; //@line 87 "md5.c"
 $5 = $513; //@line 87 "md5.c"
 $514 = $5; //@line 87 "md5.c"
 $515 = $514 << 20; //@line 87 "md5.c"
 $516 = $5; //@line 87 "md5.c"
 $517 = $516 >>> 12; //@line 87 "md5.c"
 $518 = $515 | $517; //@line 87 "md5.c"
 $519 = $6; //@line 87 "md5.c"
 $520 = (($518) + ($519))|0; //@line 87 "md5.c"
 $5 = $520; //@line 87 "md5.c"
 $521 = $6; //@line 88 "md5.c"
 $522 = $7; //@line 88 "md5.c"
 $523 = $5; //@line 88 "md5.c"
 $524 = $6; //@line 88 "md5.c"
 $525 = $523 ^ $524; //@line 88 "md5.c"
 $526 = $522 & $525; //@line 88 "md5.c"
 $527 = $521 ^ $526; //@line 88 "md5.c"
 $528 = $3; //@line 88 "md5.c"
 $529 = ((($528)) + 36|0); //@line 88 "md5.c"
 $530 = HEAP32[$529>>2]|0; //@line 88 "md5.c"
 $531 = (($527) + ($530))|0; //@line 88 "md5.c"
 $532 = (($531) + 568446438)|0; //@line 88 "md5.c"
 $533 = $4; //@line 88 "md5.c"
 $534 = (($533) + ($532))|0; //@line 88 "md5.c"
 $4 = $534; //@line 88 "md5.c"
 $535 = $4; //@line 88 "md5.c"
 $536 = $535 << 5; //@line 88 "md5.c"
 $537 = $4; //@line 88 "md5.c"
 $538 = $537 >>> 27; //@line 88 "md5.c"
 $539 = $536 | $538; //@line 88 "md5.c"
 $540 = $5; //@line 88 "md5.c"
 $541 = (($539) + ($540))|0; //@line 88 "md5.c"
 $4 = $541; //@line 88 "md5.c"
 $542 = $5; //@line 89 "md5.c"
 $543 = $6; //@line 89 "md5.c"
 $544 = $4; //@line 89 "md5.c"
 $545 = $5; //@line 89 "md5.c"
 $546 = $544 ^ $545; //@line 89 "md5.c"
 $547 = $543 & $546; //@line 89 "md5.c"
 $548 = $542 ^ $547; //@line 89 "md5.c"
 $549 = $3; //@line 89 "md5.c"
 $550 = ((($549)) + 56|0); //@line 89 "md5.c"
 $551 = HEAP32[$550>>2]|0; //@line 89 "md5.c"
 $552 = (($548) + ($551))|0; //@line 89 "md5.c"
 $553 = (($552) + -1019803690)|0; //@line 89 "md5.c"
 $554 = $7; //@line 89 "md5.c"
 $555 = (($554) + ($553))|0; //@line 89 "md5.c"
 $7 = $555; //@line 89 "md5.c"
 $556 = $7; //@line 89 "md5.c"
 $557 = $556 << 9; //@line 89 "md5.c"
 $558 = $7; //@line 89 "md5.c"
 $559 = $558 >>> 23; //@line 89 "md5.c"
 $560 = $557 | $559; //@line 89 "md5.c"
 $561 = $4; //@line 89 "md5.c"
 $562 = (($560) + ($561))|0; //@line 89 "md5.c"
 $7 = $562; //@line 89 "md5.c"
 $563 = $4; //@line 90 "md5.c"
 $564 = $5; //@line 90 "md5.c"
 $565 = $7; //@line 90 "md5.c"
 $566 = $4; //@line 90 "md5.c"
 $567 = $565 ^ $566; //@line 90 "md5.c"
 $568 = $564 & $567; //@line 90 "md5.c"
 $569 = $563 ^ $568; //@line 90 "md5.c"
 $570 = $3; //@line 90 "md5.c"
 $571 = ((($570)) + 12|0); //@line 90 "md5.c"
 $572 = HEAP32[$571>>2]|0; //@line 90 "md5.c"
 $573 = (($569) + ($572))|0; //@line 90 "md5.c"
 $574 = (($573) + -187363961)|0; //@line 90 "md5.c"
 $575 = $6; //@line 90 "md5.c"
 $576 = (($575) + ($574))|0; //@line 90 "md5.c"
 $6 = $576; //@line 90 "md5.c"
 $577 = $6; //@line 90 "md5.c"
 $578 = $577 << 14; //@line 90 "md5.c"
 $579 = $6; //@line 90 "md5.c"
 $580 = $579 >>> 18; //@line 90 "md5.c"
 $581 = $578 | $580; //@line 90 "md5.c"
 $582 = $7; //@line 90 "md5.c"
 $583 = (($581) + ($582))|0; //@line 90 "md5.c"
 $6 = $583; //@line 90 "md5.c"
 $584 = $7; //@line 91 "md5.c"
 $585 = $4; //@line 91 "md5.c"
 $586 = $6; //@line 91 "md5.c"
 $587 = $7; //@line 91 "md5.c"
 $588 = $586 ^ $587; //@line 91 "md5.c"
 $589 = $585 & $588; //@line 91 "md5.c"
 $590 = $584 ^ $589; //@line 91 "md5.c"
 $591 = $3; //@line 91 "md5.c"
 $592 = ((($591)) + 32|0); //@line 91 "md5.c"
 $593 = HEAP32[$592>>2]|0; //@line 91 "md5.c"
 $594 = (($590) + ($593))|0; //@line 91 "md5.c"
 $595 = (($594) + 1163531501)|0; //@line 91 "md5.c"
 $596 = $5; //@line 91 "md5.c"
 $597 = (($596) + ($595))|0; //@line 91 "md5.c"
 $5 = $597; //@line 91 "md5.c"
 $598 = $5; //@line 91 "md5.c"
 $599 = $598 << 20; //@line 91 "md5.c"
 $600 = $5; //@line 91 "md5.c"
 $601 = $600 >>> 12; //@line 91 "md5.c"
 $602 = $599 | $601; //@line 91 "md5.c"
 $603 = $6; //@line 91 "md5.c"
 $604 = (($602) + ($603))|0; //@line 91 "md5.c"
 $5 = $604; //@line 91 "md5.c"
 $605 = $6; //@line 92 "md5.c"
 $606 = $7; //@line 92 "md5.c"
 $607 = $5; //@line 92 "md5.c"
 $608 = $6; //@line 92 "md5.c"
 $609 = $607 ^ $608; //@line 92 "md5.c"
 $610 = $606 & $609; //@line 92 "md5.c"
 $611 = $605 ^ $610; //@line 92 "md5.c"
 $612 = $3; //@line 92 "md5.c"
 $613 = ((($612)) + 52|0); //@line 92 "md5.c"
 $614 = HEAP32[$613>>2]|0; //@line 92 "md5.c"
 $615 = (($611) + ($614))|0; //@line 92 "md5.c"
 $616 = (($615) + -1444681467)|0; //@line 92 "md5.c"
 $617 = $4; //@line 92 "md5.c"
 $618 = (($617) + ($616))|0; //@line 92 "md5.c"
 $4 = $618; //@line 92 "md5.c"
 $619 = $4; //@line 92 "md5.c"
 $620 = $619 << 5; //@line 92 "md5.c"
 $621 = $4; //@line 92 "md5.c"
 $622 = $621 >>> 27; //@line 92 "md5.c"
 $623 = $620 | $622; //@line 92 "md5.c"
 $624 = $5; //@line 92 "md5.c"
 $625 = (($623) + ($624))|0; //@line 92 "md5.c"
 $4 = $625; //@line 92 "md5.c"
 $626 = $5; //@line 93 "md5.c"
 $627 = $6; //@line 93 "md5.c"
 $628 = $4; //@line 93 "md5.c"
 $629 = $5; //@line 93 "md5.c"
 $630 = $628 ^ $629; //@line 93 "md5.c"
 $631 = $627 & $630; //@line 93 "md5.c"
 $632 = $626 ^ $631; //@line 93 "md5.c"
 $633 = $3; //@line 93 "md5.c"
 $634 = ((($633)) + 8|0); //@line 93 "md5.c"
 $635 = HEAP32[$634>>2]|0; //@line 93 "md5.c"
 $636 = (($632) + ($635))|0; //@line 93 "md5.c"
 $637 = (($636) + -51403784)|0; //@line 93 "md5.c"
 $638 = $7; //@line 93 "md5.c"
 $639 = (($638) + ($637))|0; //@line 93 "md5.c"
 $7 = $639; //@line 93 "md5.c"
 $640 = $7; //@line 93 "md5.c"
 $641 = $640 << 9; //@line 93 "md5.c"
 $642 = $7; //@line 93 "md5.c"
 $643 = $642 >>> 23; //@line 93 "md5.c"
 $644 = $641 | $643; //@line 93 "md5.c"
 $645 = $4; //@line 93 "md5.c"
 $646 = (($644) + ($645))|0; //@line 93 "md5.c"
 $7 = $646; //@line 93 "md5.c"
 $647 = $4; //@line 94 "md5.c"
 $648 = $5; //@line 94 "md5.c"
 $649 = $7; //@line 94 "md5.c"
 $650 = $4; //@line 94 "md5.c"
 $651 = $649 ^ $650; //@line 94 "md5.c"
 $652 = $648 & $651; //@line 94 "md5.c"
 $653 = $647 ^ $652; //@line 94 "md5.c"
 $654 = $3; //@line 94 "md5.c"
 $655 = ((($654)) + 28|0); //@line 94 "md5.c"
 $656 = HEAP32[$655>>2]|0; //@line 94 "md5.c"
 $657 = (($653) + ($656))|0; //@line 94 "md5.c"
 $658 = (($657) + 1735328473)|0; //@line 94 "md5.c"
 $659 = $6; //@line 94 "md5.c"
 $660 = (($659) + ($658))|0; //@line 94 "md5.c"
 $6 = $660; //@line 94 "md5.c"
 $661 = $6; //@line 94 "md5.c"
 $662 = $661 << 14; //@line 94 "md5.c"
 $663 = $6; //@line 94 "md5.c"
 $664 = $663 >>> 18; //@line 94 "md5.c"
 $665 = $662 | $664; //@line 94 "md5.c"
 $666 = $7; //@line 94 "md5.c"
 $667 = (($665) + ($666))|0; //@line 94 "md5.c"
 $6 = $667; //@line 94 "md5.c"
 $668 = $7; //@line 95 "md5.c"
 $669 = $4; //@line 95 "md5.c"
 $670 = $6; //@line 95 "md5.c"
 $671 = $7; //@line 95 "md5.c"
 $672 = $670 ^ $671; //@line 95 "md5.c"
 $673 = $669 & $672; //@line 95 "md5.c"
 $674 = $668 ^ $673; //@line 95 "md5.c"
 $675 = $3; //@line 95 "md5.c"
 $676 = ((($675)) + 48|0); //@line 95 "md5.c"
 $677 = HEAP32[$676>>2]|0; //@line 95 "md5.c"
 $678 = (($674) + ($677))|0; //@line 95 "md5.c"
 $679 = (($678) + -1926607734)|0; //@line 95 "md5.c"
 $680 = $5; //@line 95 "md5.c"
 $681 = (($680) + ($679))|0; //@line 95 "md5.c"
 $5 = $681; //@line 95 "md5.c"
 $682 = $5; //@line 95 "md5.c"
 $683 = $682 << 20; //@line 95 "md5.c"
 $684 = $5; //@line 95 "md5.c"
 $685 = $684 >>> 12; //@line 95 "md5.c"
 $686 = $683 | $685; //@line 95 "md5.c"
 $687 = $6; //@line 95 "md5.c"
 $688 = (($686) + ($687))|0; //@line 95 "md5.c"
 $5 = $688; //@line 95 "md5.c"
 $689 = $5; //@line 97 "md5.c"
 $690 = $6; //@line 97 "md5.c"
 $691 = $689 ^ $690; //@line 97 "md5.c"
 $692 = $7; //@line 97 "md5.c"
 $693 = $691 ^ $692; //@line 97 "md5.c"
 $694 = $3; //@line 97 "md5.c"
 $695 = ((($694)) + 20|0); //@line 97 "md5.c"
 $696 = HEAP32[$695>>2]|0; //@line 97 "md5.c"
 $697 = (($693) + ($696))|0; //@line 97 "md5.c"
 $698 = (($697) + -378558)|0; //@line 97 "md5.c"
 $699 = $4; //@line 97 "md5.c"
 $700 = (($699) + ($698))|0; //@line 97 "md5.c"
 $4 = $700; //@line 97 "md5.c"
 $701 = $4; //@line 97 "md5.c"
 $702 = $701 << 4; //@line 97 "md5.c"
 $703 = $4; //@line 97 "md5.c"
 $704 = $703 >>> 28; //@line 97 "md5.c"
 $705 = $702 | $704; //@line 97 "md5.c"
 $706 = $5; //@line 97 "md5.c"
 $707 = (($705) + ($706))|0; //@line 97 "md5.c"
 $4 = $707; //@line 97 "md5.c"
 $708 = $4; //@line 98 "md5.c"
 $709 = $5; //@line 98 "md5.c"
 $710 = $708 ^ $709; //@line 98 "md5.c"
 $711 = $6; //@line 98 "md5.c"
 $712 = $710 ^ $711; //@line 98 "md5.c"
 $713 = $3; //@line 98 "md5.c"
 $714 = ((($713)) + 32|0); //@line 98 "md5.c"
 $715 = HEAP32[$714>>2]|0; //@line 98 "md5.c"
 $716 = (($712) + ($715))|0; //@line 98 "md5.c"
 $717 = (($716) + -2022574463)|0; //@line 98 "md5.c"
 $718 = $7; //@line 98 "md5.c"
 $719 = (($718) + ($717))|0; //@line 98 "md5.c"
 $7 = $719; //@line 98 "md5.c"
 $720 = $7; //@line 98 "md5.c"
 $721 = $720 << 11; //@line 98 "md5.c"
 $722 = $7; //@line 98 "md5.c"
 $723 = $722 >>> 21; //@line 98 "md5.c"
 $724 = $721 | $723; //@line 98 "md5.c"
 $725 = $4; //@line 98 "md5.c"
 $726 = (($724) + ($725))|0; //@line 98 "md5.c"
 $7 = $726; //@line 98 "md5.c"
 $727 = $7; //@line 99 "md5.c"
 $728 = $4; //@line 99 "md5.c"
 $729 = $727 ^ $728; //@line 99 "md5.c"
 $730 = $5; //@line 99 "md5.c"
 $731 = $729 ^ $730; //@line 99 "md5.c"
 $732 = $3; //@line 99 "md5.c"
 $733 = ((($732)) + 44|0); //@line 99 "md5.c"
 $734 = HEAP32[$733>>2]|0; //@line 99 "md5.c"
 $735 = (($731) + ($734))|0; //@line 99 "md5.c"
 $736 = (($735) + 1839030562)|0; //@line 99 "md5.c"
 $737 = $6; //@line 99 "md5.c"
 $738 = (($737) + ($736))|0; //@line 99 "md5.c"
 $6 = $738; //@line 99 "md5.c"
 $739 = $6; //@line 99 "md5.c"
 $740 = $739 << 16; //@line 99 "md5.c"
 $741 = $6; //@line 99 "md5.c"
 $742 = $741 >>> 16; //@line 99 "md5.c"
 $743 = $740 | $742; //@line 99 "md5.c"
 $744 = $7; //@line 99 "md5.c"
 $745 = (($743) + ($744))|0; //@line 99 "md5.c"
 $6 = $745; //@line 99 "md5.c"
 $746 = $6; //@line 100 "md5.c"
 $747 = $7; //@line 100 "md5.c"
 $748 = $746 ^ $747; //@line 100 "md5.c"
 $749 = $4; //@line 100 "md5.c"
 $750 = $748 ^ $749; //@line 100 "md5.c"
 $751 = $3; //@line 100 "md5.c"
 $752 = ((($751)) + 56|0); //@line 100 "md5.c"
 $753 = HEAP32[$752>>2]|0; //@line 100 "md5.c"
 $754 = (($750) + ($753))|0; //@line 100 "md5.c"
 $755 = (($754) + -35309556)|0; //@line 100 "md5.c"
 $756 = $5; //@line 100 "md5.c"
 $757 = (($756) + ($755))|0; //@line 100 "md5.c"
 $5 = $757; //@line 100 "md5.c"
 $758 = $5; //@line 100 "md5.c"
 $759 = $758 << 23; //@line 100 "md5.c"
 $760 = $5; //@line 100 "md5.c"
 $761 = $760 >>> 9; //@line 100 "md5.c"
 $762 = $759 | $761; //@line 100 "md5.c"
 $763 = $6; //@line 100 "md5.c"
 $764 = (($762) + ($763))|0; //@line 100 "md5.c"
 $5 = $764; //@line 100 "md5.c"
 $765 = $5; //@line 101 "md5.c"
 $766 = $6; //@line 101 "md5.c"
 $767 = $765 ^ $766; //@line 101 "md5.c"
 $768 = $7; //@line 101 "md5.c"
 $769 = $767 ^ $768; //@line 101 "md5.c"
 $770 = $3; //@line 101 "md5.c"
 $771 = ((($770)) + 4|0); //@line 101 "md5.c"
 $772 = HEAP32[$771>>2]|0; //@line 101 "md5.c"
 $773 = (($769) + ($772))|0; //@line 101 "md5.c"
 $774 = (($773) + -1530992060)|0; //@line 101 "md5.c"
 $775 = $4; //@line 101 "md5.c"
 $776 = (($775) + ($774))|0; //@line 101 "md5.c"
 $4 = $776; //@line 101 "md5.c"
 $777 = $4; //@line 101 "md5.c"
 $778 = $777 << 4; //@line 101 "md5.c"
 $779 = $4; //@line 101 "md5.c"
 $780 = $779 >>> 28; //@line 101 "md5.c"
 $781 = $778 | $780; //@line 101 "md5.c"
 $782 = $5; //@line 101 "md5.c"
 $783 = (($781) + ($782))|0; //@line 101 "md5.c"
 $4 = $783; //@line 101 "md5.c"
 $784 = $4; //@line 102 "md5.c"
 $785 = $5; //@line 102 "md5.c"
 $786 = $784 ^ $785; //@line 102 "md5.c"
 $787 = $6; //@line 102 "md5.c"
 $788 = $786 ^ $787; //@line 102 "md5.c"
 $789 = $3; //@line 102 "md5.c"
 $790 = ((($789)) + 16|0); //@line 102 "md5.c"
 $791 = HEAP32[$790>>2]|0; //@line 102 "md5.c"
 $792 = (($788) + ($791))|0; //@line 102 "md5.c"
 $793 = (($792) + 1272893353)|0; //@line 102 "md5.c"
 $794 = $7; //@line 102 "md5.c"
 $795 = (($794) + ($793))|0; //@line 102 "md5.c"
 $7 = $795; //@line 102 "md5.c"
 $796 = $7; //@line 102 "md5.c"
 $797 = $796 << 11; //@line 102 "md5.c"
 $798 = $7; //@line 102 "md5.c"
 $799 = $798 >>> 21; //@line 102 "md5.c"
 $800 = $797 | $799; //@line 102 "md5.c"
 $801 = $4; //@line 102 "md5.c"
 $802 = (($800) + ($801))|0; //@line 102 "md5.c"
 $7 = $802; //@line 102 "md5.c"
 $803 = $7; //@line 103 "md5.c"
 $804 = $4; //@line 103 "md5.c"
 $805 = $803 ^ $804; //@line 103 "md5.c"
 $806 = $5; //@line 103 "md5.c"
 $807 = $805 ^ $806; //@line 103 "md5.c"
 $808 = $3; //@line 103 "md5.c"
 $809 = ((($808)) + 28|0); //@line 103 "md5.c"
 $810 = HEAP32[$809>>2]|0; //@line 103 "md5.c"
 $811 = (($807) + ($810))|0; //@line 103 "md5.c"
 $812 = (($811) + -155497632)|0; //@line 103 "md5.c"
 $813 = $6; //@line 103 "md5.c"
 $814 = (($813) + ($812))|0; //@line 103 "md5.c"
 $6 = $814; //@line 103 "md5.c"
 $815 = $6; //@line 103 "md5.c"
 $816 = $815 << 16; //@line 103 "md5.c"
 $817 = $6; //@line 103 "md5.c"
 $818 = $817 >>> 16; //@line 103 "md5.c"
 $819 = $816 | $818; //@line 103 "md5.c"
 $820 = $7; //@line 103 "md5.c"
 $821 = (($819) + ($820))|0; //@line 103 "md5.c"
 $6 = $821; //@line 103 "md5.c"
 $822 = $6; //@line 104 "md5.c"
 $823 = $7; //@line 104 "md5.c"
 $824 = $822 ^ $823; //@line 104 "md5.c"
 $825 = $4; //@line 104 "md5.c"
 $826 = $824 ^ $825; //@line 104 "md5.c"
 $827 = $3; //@line 104 "md5.c"
 $828 = ((($827)) + 40|0); //@line 104 "md5.c"
 $829 = HEAP32[$828>>2]|0; //@line 104 "md5.c"
 $830 = (($826) + ($829))|0; //@line 104 "md5.c"
 $831 = (($830) + -1094730640)|0; //@line 104 "md5.c"
 $832 = $5; //@line 104 "md5.c"
 $833 = (($832) + ($831))|0; //@line 104 "md5.c"
 $5 = $833; //@line 104 "md5.c"
 $834 = $5; //@line 104 "md5.c"
 $835 = $834 << 23; //@line 104 "md5.c"
 $836 = $5; //@line 104 "md5.c"
 $837 = $836 >>> 9; //@line 104 "md5.c"
 $838 = $835 | $837; //@line 104 "md5.c"
 $839 = $6; //@line 104 "md5.c"
 $840 = (($838) + ($839))|0; //@line 104 "md5.c"
 $5 = $840; //@line 104 "md5.c"
 $841 = $5; //@line 105 "md5.c"
 $842 = $6; //@line 105 "md5.c"
 $843 = $841 ^ $842; //@line 105 "md5.c"
 $844 = $7; //@line 105 "md5.c"
 $845 = $843 ^ $844; //@line 105 "md5.c"
 $846 = $3; //@line 105 "md5.c"
 $847 = ((($846)) + 52|0); //@line 105 "md5.c"
 $848 = HEAP32[$847>>2]|0; //@line 105 "md5.c"
 $849 = (($845) + ($848))|0; //@line 105 "md5.c"
 $850 = (($849) + 681279174)|0; //@line 105 "md5.c"
 $851 = $4; //@line 105 "md5.c"
 $852 = (($851) + ($850))|0; //@line 105 "md5.c"
 $4 = $852; //@line 105 "md5.c"
 $853 = $4; //@line 105 "md5.c"
 $854 = $853 << 4; //@line 105 "md5.c"
 $855 = $4; //@line 105 "md5.c"
 $856 = $855 >>> 28; //@line 105 "md5.c"
 $857 = $854 | $856; //@line 105 "md5.c"
 $858 = $5; //@line 105 "md5.c"
 $859 = (($857) + ($858))|0; //@line 105 "md5.c"
 $4 = $859; //@line 105 "md5.c"
 $860 = $4; //@line 106 "md5.c"
 $861 = $5; //@line 106 "md5.c"
 $862 = $860 ^ $861; //@line 106 "md5.c"
 $863 = $6; //@line 106 "md5.c"
 $864 = $862 ^ $863; //@line 106 "md5.c"
 $865 = $3; //@line 106 "md5.c"
 $866 = HEAP32[$865>>2]|0; //@line 106 "md5.c"
 $867 = (($864) + ($866))|0; //@line 106 "md5.c"
 $868 = (($867) + -358537222)|0; //@line 106 "md5.c"
 $869 = $7; //@line 106 "md5.c"
 $870 = (($869) + ($868))|0; //@line 106 "md5.c"
 $7 = $870; //@line 106 "md5.c"
 $871 = $7; //@line 106 "md5.c"
 $872 = $871 << 11; //@line 106 "md5.c"
 $873 = $7; //@line 106 "md5.c"
 $874 = $873 >>> 21; //@line 106 "md5.c"
 $875 = $872 | $874; //@line 106 "md5.c"
 $876 = $4; //@line 106 "md5.c"
 $877 = (($875) + ($876))|0; //@line 106 "md5.c"
 $7 = $877; //@line 106 "md5.c"
 $878 = $7; //@line 107 "md5.c"
 $879 = $4; //@line 107 "md5.c"
 $880 = $878 ^ $879; //@line 107 "md5.c"
 $881 = $5; //@line 107 "md5.c"
 $882 = $880 ^ $881; //@line 107 "md5.c"
 $883 = $3; //@line 107 "md5.c"
 $884 = ((($883)) + 12|0); //@line 107 "md5.c"
 $885 = HEAP32[$884>>2]|0; //@line 107 "md5.c"
 $886 = (($882) + ($885))|0; //@line 107 "md5.c"
 $887 = (($886) + -722521979)|0; //@line 107 "md5.c"
 $888 = $6; //@line 107 "md5.c"
 $889 = (($888) + ($887))|0; //@line 107 "md5.c"
 $6 = $889; //@line 107 "md5.c"
 $890 = $6; //@line 107 "md5.c"
 $891 = $890 << 16; //@line 107 "md5.c"
 $892 = $6; //@line 107 "md5.c"
 $893 = $892 >>> 16; //@line 107 "md5.c"
 $894 = $891 | $893; //@line 107 "md5.c"
 $895 = $7; //@line 107 "md5.c"
 $896 = (($894) + ($895))|0; //@line 107 "md5.c"
 $6 = $896; //@line 107 "md5.c"
 $897 = $6; //@line 108 "md5.c"
 $898 = $7; //@line 108 "md5.c"
 $899 = $897 ^ $898; //@line 108 "md5.c"
 $900 = $4; //@line 108 "md5.c"
 $901 = $899 ^ $900; //@line 108 "md5.c"
 $902 = $3; //@line 108 "md5.c"
 $903 = ((($902)) + 24|0); //@line 108 "md5.c"
 $904 = HEAP32[$903>>2]|0; //@line 108 "md5.c"
 $905 = (($901) + ($904))|0; //@line 108 "md5.c"
 $906 = (($905) + 76029189)|0; //@line 108 "md5.c"
 $907 = $5; //@line 108 "md5.c"
 $908 = (($907) + ($906))|0; //@line 108 "md5.c"
 $5 = $908; //@line 108 "md5.c"
 $909 = $5; //@line 108 "md5.c"
 $910 = $909 << 23; //@line 108 "md5.c"
 $911 = $5; //@line 108 "md5.c"
 $912 = $911 >>> 9; //@line 108 "md5.c"
 $913 = $910 | $912; //@line 108 "md5.c"
 $914 = $6; //@line 108 "md5.c"
 $915 = (($913) + ($914))|0; //@line 108 "md5.c"
 $5 = $915; //@line 108 "md5.c"
 $916 = $5; //@line 109 "md5.c"
 $917 = $6; //@line 109 "md5.c"
 $918 = $916 ^ $917; //@line 109 "md5.c"
 $919 = $7; //@line 109 "md5.c"
 $920 = $918 ^ $919; //@line 109 "md5.c"
 $921 = $3; //@line 109 "md5.c"
 $922 = ((($921)) + 36|0); //@line 109 "md5.c"
 $923 = HEAP32[$922>>2]|0; //@line 109 "md5.c"
 $924 = (($920) + ($923))|0; //@line 109 "md5.c"
 $925 = (($924) + -640364487)|0; //@line 109 "md5.c"
 $926 = $4; //@line 109 "md5.c"
 $927 = (($926) + ($925))|0; //@line 109 "md5.c"
 $4 = $927; //@line 109 "md5.c"
 $928 = $4; //@line 109 "md5.c"
 $929 = $928 << 4; //@line 109 "md5.c"
 $930 = $4; //@line 109 "md5.c"
 $931 = $930 >>> 28; //@line 109 "md5.c"
 $932 = $929 | $931; //@line 109 "md5.c"
 $933 = $5; //@line 109 "md5.c"
 $934 = (($932) + ($933))|0; //@line 109 "md5.c"
 $4 = $934; //@line 109 "md5.c"
 $935 = $4; //@line 110 "md5.c"
 $936 = $5; //@line 110 "md5.c"
 $937 = $935 ^ $936; //@line 110 "md5.c"
 $938 = $6; //@line 110 "md5.c"
 $939 = $937 ^ $938; //@line 110 "md5.c"
 $940 = $3; //@line 110 "md5.c"
 $941 = ((($940)) + 48|0); //@line 110 "md5.c"
 $942 = HEAP32[$941>>2]|0; //@line 110 "md5.c"
 $943 = (($939) + ($942))|0; //@line 110 "md5.c"
 $944 = (($943) + -421815835)|0; //@line 110 "md5.c"
 $945 = $7; //@line 110 "md5.c"
 $946 = (($945) + ($944))|0; //@line 110 "md5.c"
 $7 = $946; //@line 110 "md5.c"
 $947 = $7; //@line 110 "md5.c"
 $948 = $947 << 11; //@line 110 "md5.c"
 $949 = $7; //@line 110 "md5.c"
 $950 = $949 >>> 21; //@line 110 "md5.c"
 $951 = $948 | $950; //@line 110 "md5.c"
 $952 = $4; //@line 110 "md5.c"
 $953 = (($951) + ($952))|0; //@line 110 "md5.c"
 $7 = $953; //@line 110 "md5.c"
 $954 = $7; //@line 111 "md5.c"
 $955 = $4; //@line 111 "md5.c"
 $956 = $954 ^ $955; //@line 111 "md5.c"
 $957 = $5; //@line 111 "md5.c"
 $958 = $956 ^ $957; //@line 111 "md5.c"
 $959 = $3; //@line 111 "md5.c"
 $960 = ((($959)) + 60|0); //@line 111 "md5.c"
 $961 = HEAP32[$960>>2]|0; //@line 111 "md5.c"
 $962 = (($958) + ($961))|0; //@line 111 "md5.c"
 $963 = (($962) + 530742520)|0; //@line 111 "md5.c"
 $964 = $6; //@line 111 "md5.c"
 $965 = (($964) + ($963))|0; //@line 111 "md5.c"
 $6 = $965; //@line 111 "md5.c"
 $966 = $6; //@line 111 "md5.c"
 $967 = $966 << 16; //@line 111 "md5.c"
 $968 = $6; //@line 111 "md5.c"
 $969 = $968 >>> 16; //@line 111 "md5.c"
 $970 = $967 | $969; //@line 111 "md5.c"
 $971 = $7; //@line 111 "md5.c"
 $972 = (($970) + ($971))|0; //@line 111 "md5.c"
 $6 = $972; //@line 111 "md5.c"
 $973 = $6; //@line 112 "md5.c"
 $974 = $7; //@line 112 "md5.c"
 $975 = $973 ^ $974; //@line 112 "md5.c"
 $976 = $4; //@line 112 "md5.c"
 $977 = $975 ^ $976; //@line 112 "md5.c"
 $978 = $3; //@line 112 "md5.c"
 $979 = ((($978)) + 8|0); //@line 112 "md5.c"
 $980 = HEAP32[$979>>2]|0; //@line 112 "md5.c"
 $981 = (($977) + ($980))|0; //@line 112 "md5.c"
 $982 = (($981) + -995338651)|0; //@line 112 "md5.c"
 $983 = $5; //@line 112 "md5.c"
 $984 = (($983) + ($982))|0; //@line 112 "md5.c"
 $5 = $984; //@line 112 "md5.c"
 $985 = $5; //@line 112 "md5.c"
 $986 = $985 << 23; //@line 112 "md5.c"
 $987 = $5; //@line 112 "md5.c"
 $988 = $987 >>> 9; //@line 112 "md5.c"
 $989 = $986 | $988; //@line 112 "md5.c"
 $990 = $6; //@line 112 "md5.c"
 $991 = (($989) + ($990))|0; //@line 112 "md5.c"
 $5 = $991; //@line 112 "md5.c"
 $992 = $6; //@line 114 "md5.c"
 $993 = $5; //@line 114 "md5.c"
 $994 = $7; //@line 114 "md5.c"
 $995 = $994 ^ -1; //@line 114 "md5.c"
 $996 = $993 | $995; //@line 114 "md5.c"
 $997 = $992 ^ $996; //@line 114 "md5.c"
 $998 = $3; //@line 114 "md5.c"
 $999 = HEAP32[$998>>2]|0; //@line 114 "md5.c"
 $1000 = (($997) + ($999))|0; //@line 114 "md5.c"
 $1001 = (($1000) + -198630844)|0; //@line 114 "md5.c"
 $1002 = $4; //@line 114 "md5.c"
 $1003 = (($1002) + ($1001))|0; //@line 114 "md5.c"
 $4 = $1003; //@line 114 "md5.c"
 $1004 = $4; //@line 114 "md5.c"
 $1005 = $1004 << 6; //@line 114 "md5.c"
 $1006 = $4; //@line 114 "md5.c"
 $1007 = $1006 >>> 26; //@line 114 "md5.c"
 $1008 = $1005 | $1007; //@line 114 "md5.c"
 $1009 = $5; //@line 114 "md5.c"
 $1010 = (($1008) + ($1009))|0; //@line 114 "md5.c"
 $4 = $1010; //@line 114 "md5.c"
 $1011 = $5; //@line 115 "md5.c"
 $1012 = $4; //@line 115 "md5.c"
 $1013 = $6; //@line 115 "md5.c"
 $1014 = $1013 ^ -1; //@line 115 "md5.c"
 $1015 = $1012 | $1014; //@line 115 "md5.c"
 $1016 = $1011 ^ $1015; //@line 115 "md5.c"
 $1017 = $3; //@line 115 "md5.c"
 $1018 = ((($1017)) + 28|0); //@line 115 "md5.c"
 $1019 = HEAP32[$1018>>2]|0; //@line 115 "md5.c"
 $1020 = (($1016) + ($1019))|0; //@line 115 "md5.c"
 $1021 = (($1020) + 1126891415)|0; //@line 115 "md5.c"
 $1022 = $7; //@line 115 "md5.c"
 $1023 = (($1022) + ($1021))|0; //@line 115 "md5.c"
 $7 = $1023; //@line 115 "md5.c"
 $1024 = $7; //@line 115 "md5.c"
 $1025 = $1024 << 10; //@line 115 "md5.c"
 $1026 = $7; //@line 115 "md5.c"
 $1027 = $1026 >>> 22; //@line 115 "md5.c"
 $1028 = $1025 | $1027; //@line 115 "md5.c"
 $1029 = $4; //@line 115 "md5.c"
 $1030 = (($1028) + ($1029))|0; //@line 115 "md5.c"
 $7 = $1030; //@line 115 "md5.c"
 $1031 = $4; //@line 116 "md5.c"
 $1032 = $7; //@line 116 "md5.c"
 $1033 = $5; //@line 116 "md5.c"
 $1034 = $1033 ^ -1; //@line 116 "md5.c"
 $1035 = $1032 | $1034; //@line 116 "md5.c"
 $1036 = $1031 ^ $1035; //@line 116 "md5.c"
 $1037 = $3; //@line 116 "md5.c"
 $1038 = ((($1037)) + 56|0); //@line 116 "md5.c"
 $1039 = HEAP32[$1038>>2]|0; //@line 116 "md5.c"
 $1040 = (($1036) + ($1039))|0; //@line 116 "md5.c"
 $1041 = (($1040) + -1416354905)|0; //@line 116 "md5.c"
 $1042 = $6; //@line 116 "md5.c"
 $1043 = (($1042) + ($1041))|0; //@line 116 "md5.c"
 $6 = $1043; //@line 116 "md5.c"
 $1044 = $6; //@line 116 "md5.c"
 $1045 = $1044 << 15; //@line 116 "md5.c"
 $1046 = $6; //@line 116 "md5.c"
 $1047 = $1046 >>> 17; //@line 116 "md5.c"
 $1048 = $1045 | $1047; //@line 116 "md5.c"
 $1049 = $7; //@line 116 "md5.c"
 $1050 = (($1048) + ($1049))|0; //@line 116 "md5.c"
 $6 = $1050; //@line 116 "md5.c"
 $1051 = $7; //@line 117 "md5.c"
 $1052 = $6; //@line 117 "md5.c"
 $1053 = $4; //@line 117 "md5.c"
 $1054 = $1053 ^ -1; //@line 117 "md5.c"
 $1055 = $1052 | $1054; //@line 117 "md5.c"
 $1056 = $1051 ^ $1055; //@line 117 "md5.c"
 $1057 = $3; //@line 117 "md5.c"
 $1058 = ((($1057)) + 20|0); //@line 117 "md5.c"
 $1059 = HEAP32[$1058>>2]|0; //@line 117 "md5.c"
 $1060 = (($1056) + ($1059))|0; //@line 117 "md5.c"
 $1061 = (($1060) + -57434055)|0; //@line 117 "md5.c"
 $1062 = $5; //@line 117 "md5.c"
 $1063 = (($1062) + ($1061))|0; //@line 117 "md5.c"
 $5 = $1063; //@line 117 "md5.c"
 $1064 = $5; //@line 117 "md5.c"
 $1065 = $1064 << 21; //@line 117 "md5.c"
 $1066 = $5; //@line 117 "md5.c"
 $1067 = $1066 >>> 11; //@line 117 "md5.c"
 $1068 = $1065 | $1067; //@line 117 "md5.c"
 $1069 = $6; //@line 117 "md5.c"
 $1070 = (($1068) + ($1069))|0; //@line 117 "md5.c"
 $5 = $1070; //@line 117 "md5.c"
 $1071 = $6; //@line 118 "md5.c"
 $1072 = $5; //@line 118 "md5.c"
 $1073 = $7; //@line 118 "md5.c"
 $1074 = $1073 ^ -1; //@line 118 "md5.c"
 $1075 = $1072 | $1074; //@line 118 "md5.c"
 $1076 = $1071 ^ $1075; //@line 118 "md5.c"
 $1077 = $3; //@line 118 "md5.c"
 $1078 = ((($1077)) + 48|0); //@line 118 "md5.c"
 $1079 = HEAP32[$1078>>2]|0; //@line 118 "md5.c"
 $1080 = (($1076) + ($1079))|0; //@line 118 "md5.c"
 $1081 = (($1080) + 1700485571)|0; //@line 118 "md5.c"
 $1082 = $4; //@line 118 "md5.c"
 $1083 = (($1082) + ($1081))|0; //@line 118 "md5.c"
 $4 = $1083; //@line 118 "md5.c"
 $1084 = $4; //@line 118 "md5.c"
 $1085 = $1084 << 6; //@line 118 "md5.c"
 $1086 = $4; //@line 118 "md5.c"
 $1087 = $1086 >>> 26; //@line 118 "md5.c"
 $1088 = $1085 | $1087; //@line 118 "md5.c"
 $1089 = $5; //@line 118 "md5.c"
 $1090 = (($1088) + ($1089))|0; //@line 118 "md5.c"
 $4 = $1090; //@line 118 "md5.c"
 $1091 = $5; //@line 119 "md5.c"
 $1092 = $4; //@line 119 "md5.c"
 $1093 = $6; //@line 119 "md5.c"
 $1094 = $1093 ^ -1; //@line 119 "md5.c"
 $1095 = $1092 | $1094; //@line 119 "md5.c"
 $1096 = $1091 ^ $1095; //@line 119 "md5.c"
 $1097 = $3; //@line 119 "md5.c"
 $1098 = ((($1097)) + 12|0); //@line 119 "md5.c"
 $1099 = HEAP32[$1098>>2]|0; //@line 119 "md5.c"
 $1100 = (($1096) + ($1099))|0; //@line 119 "md5.c"
 $1101 = (($1100) + -1894986606)|0; //@line 119 "md5.c"
 $1102 = $7; //@line 119 "md5.c"
 $1103 = (($1102) + ($1101))|0; //@line 119 "md5.c"
 $7 = $1103; //@line 119 "md5.c"
 $1104 = $7; //@line 119 "md5.c"
 $1105 = $1104 << 10; //@line 119 "md5.c"
 $1106 = $7; //@line 119 "md5.c"
 $1107 = $1106 >>> 22; //@line 119 "md5.c"
 $1108 = $1105 | $1107; //@line 119 "md5.c"
 $1109 = $4; //@line 119 "md5.c"
 $1110 = (($1108) + ($1109))|0; //@line 119 "md5.c"
 $7 = $1110; //@line 119 "md5.c"
 $1111 = $4; //@line 120 "md5.c"
 $1112 = $7; //@line 120 "md5.c"
 $1113 = $5; //@line 120 "md5.c"
 $1114 = $1113 ^ -1; //@line 120 "md5.c"
 $1115 = $1112 | $1114; //@line 120 "md5.c"
 $1116 = $1111 ^ $1115; //@line 120 "md5.c"
 $1117 = $3; //@line 120 "md5.c"
 $1118 = ((($1117)) + 40|0); //@line 120 "md5.c"
 $1119 = HEAP32[$1118>>2]|0; //@line 120 "md5.c"
 $1120 = (($1116) + ($1119))|0; //@line 120 "md5.c"
 $1121 = (($1120) + -1051523)|0; //@line 120 "md5.c"
 $1122 = $6; //@line 120 "md5.c"
 $1123 = (($1122) + ($1121))|0; //@line 120 "md5.c"
 $6 = $1123; //@line 120 "md5.c"
 $1124 = $6; //@line 120 "md5.c"
 $1125 = $1124 << 15; //@line 120 "md5.c"
 $1126 = $6; //@line 120 "md5.c"
 $1127 = $1126 >>> 17; //@line 120 "md5.c"
 $1128 = $1125 | $1127; //@line 120 "md5.c"
 $1129 = $7; //@line 120 "md5.c"
 $1130 = (($1128) + ($1129))|0; //@line 120 "md5.c"
 $6 = $1130; //@line 120 "md5.c"
 $1131 = $7; //@line 121 "md5.c"
 $1132 = $6; //@line 121 "md5.c"
 $1133 = $4; //@line 121 "md5.c"
 $1134 = $1133 ^ -1; //@line 121 "md5.c"
 $1135 = $1132 | $1134; //@line 121 "md5.c"
 $1136 = $1131 ^ $1135; //@line 121 "md5.c"
 $1137 = $3; //@line 121 "md5.c"
 $1138 = ((($1137)) + 4|0); //@line 121 "md5.c"
 $1139 = HEAP32[$1138>>2]|0; //@line 121 "md5.c"
 $1140 = (($1136) + ($1139))|0; //@line 121 "md5.c"
 $1141 = (($1140) + -2054922799)|0; //@line 121 "md5.c"
 $1142 = $5; //@line 121 "md5.c"
 $1143 = (($1142) + ($1141))|0; //@line 121 "md5.c"
 $5 = $1143; //@line 121 "md5.c"
 $1144 = $5; //@line 121 "md5.c"
 $1145 = $1144 << 21; //@line 121 "md5.c"
 $1146 = $5; //@line 121 "md5.c"
 $1147 = $1146 >>> 11; //@line 121 "md5.c"
 $1148 = $1145 | $1147; //@line 121 "md5.c"
 $1149 = $6; //@line 121 "md5.c"
 $1150 = (($1148) + ($1149))|0; //@line 121 "md5.c"
 $5 = $1150; //@line 121 "md5.c"
 $1151 = $6; //@line 122 "md5.c"
 $1152 = $5; //@line 122 "md5.c"
 $1153 = $7; //@line 122 "md5.c"
 $1154 = $1153 ^ -1; //@line 122 "md5.c"
 $1155 = $1152 | $1154; //@line 122 "md5.c"
 $1156 = $1151 ^ $1155; //@line 122 "md5.c"
 $1157 = $3; //@line 122 "md5.c"
 $1158 = ((($1157)) + 32|0); //@line 122 "md5.c"
 $1159 = HEAP32[$1158>>2]|0; //@line 122 "md5.c"
 $1160 = (($1156) + ($1159))|0; //@line 122 "md5.c"
 $1161 = (($1160) + 1873313359)|0; //@line 122 "md5.c"
 $1162 = $4; //@line 122 "md5.c"
 $1163 = (($1162) + ($1161))|0; //@line 122 "md5.c"
 $4 = $1163; //@line 122 "md5.c"
 $1164 = $4; //@line 122 "md5.c"
 $1165 = $1164 << 6; //@line 122 "md5.c"
 $1166 = $4; //@line 122 "md5.c"
 $1167 = $1166 >>> 26; //@line 122 "md5.c"
 $1168 = $1165 | $1167; //@line 122 "md5.c"
 $1169 = $5; //@line 122 "md5.c"
 $1170 = (($1168) + ($1169))|0; //@line 122 "md5.c"
 $4 = $1170; //@line 122 "md5.c"
 $1171 = $5; //@line 123 "md5.c"
 $1172 = $4; //@line 123 "md5.c"
 $1173 = $6; //@line 123 "md5.c"
 $1174 = $1173 ^ -1; //@line 123 "md5.c"
 $1175 = $1172 | $1174; //@line 123 "md5.c"
 $1176 = $1171 ^ $1175; //@line 123 "md5.c"
 $1177 = $3; //@line 123 "md5.c"
 $1178 = ((($1177)) + 60|0); //@line 123 "md5.c"
 $1179 = HEAP32[$1178>>2]|0; //@line 123 "md5.c"
 $1180 = (($1176) + ($1179))|0; //@line 123 "md5.c"
 $1181 = (($1180) + -30611744)|0; //@line 123 "md5.c"
 $1182 = $7; //@line 123 "md5.c"
 $1183 = (($1182) + ($1181))|0; //@line 123 "md5.c"
 $7 = $1183; //@line 123 "md5.c"
 $1184 = $7; //@line 123 "md5.c"
 $1185 = $1184 << 10; //@line 123 "md5.c"
 $1186 = $7; //@line 123 "md5.c"
 $1187 = $1186 >>> 22; //@line 123 "md5.c"
 $1188 = $1185 | $1187; //@line 123 "md5.c"
 $1189 = $4; //@line 123 "md5.c"
 $1190 = (($1188) + ($1189))|0; //@line 123 "md5.c"
 $7 = $1190; //@line 123 "md5.c"
 $1191 = $4; //@line 124 "md5.c"
 $1192 = $7; //@line 124 "md5.c"
 $1193 = $5; //@line 124 "md5.c"
 $1194 = $1193 ^ -1; //@line 124 "md5.c"
 $1195 = $1192 | $1194; //@line 124 "md5.c"
 $1196 = $1191 ^ $1195; //@line 124 "md5.c"
 $1197 = $3; //@line 124 "md5.c"
 $1198 = ((($1197)) + 24|0); //@line 124 "md5.c"
 $1199 = HEAP32[$1198>>2]|0; //@line 124 "md5.c"
 $1200 = (($1196) + ($1199))|0; //@line 124 "md5.c"
 $1201 = (($1200) + -1560198380)|0; //@line 124 "md5.c"
 $1202 = $6; //@line 124 "md5.c"
 $1203 = (($1202) + ($1201))|0; //@line 124 "md5.c"
 $6 = $1203; //@line 124 "md5.c"
 $1204 = $6; //@line 124 "md5.c"
 $1205 = $1204 << 15; //@line 124 "md5.c"
 $1206 = $6; //@line 124 "md5.c"
 $1207 = $1206 >>> 17; //@line 124 "md5.c"
 $1208 = $1205 | $1207; //@line 124 "md5.c"
 $1209 = $7; //@line 124 "md5.c"
 $1210 = (($1208) + ($1209))|0; //@line 124 "md5.c"
 $6 = $1210; //@line 124 "md5.c"
 $1211 = $7; //@line 125 "md5.c"
 $1212 = $6; //@line 125 "md5.c"
 $1213 = $4; //@line 125 "md5.c"
 $1214 = $1213 ^ -1; //@line 125 "md5.c"
 $1215 = $1212 | $1214; //@line 125 "md5.c"
 $1216 = $1211 ^ $1215; //@line 125 "md5.c"
 $1217 = $3; //@line 125 "md5.c"
 $1218 = ((($1217)) + 52|0); //@line 125 "md5.c"
 $1219 = HEAP32[$1218>>2]|0; //@line 125 "md5.c"
 $1220 = (($1216) + ($1219))|0; //@line 125 "md5.c"
 $1221 = (($1220) + 1309151649)|0; //@line 125 "md5.c"
 $1222 = $5; //@line 125 "md5.c"
 $1223 = (($1222) + ($1221))|0; //@line 125 "md5.c"
 $5 = $1223; //@line 125 "md5.c"
 $1224 = $5; //@line 125 "md5.c"
 $1225 = $1224 << 21; //@line 125 "md5.c"
 $1226 = $5; //@line 125 "md5.c"
 $1227 = $1226 >>> 11; //@line 125 "md5.c"
 $1228 = $1225 | $1227; //@line 125 "md5.c"
 $1229 = $6; //@line 125 "md5.c"
 $1230 = (($1228) + ($1229))|0; //@line 125 "md5.c"
 $5 = $1230; //@line 125 "md5.c"
 $1231 = $6; //@line 126 "md5.c"
 $1232 = $5; //@line 126 "md5.c"
 $1233 = $7; //@line 126 "md5.c"
 $1234 = $1233 ^ -1; //@line 126 "md5.c"
 $1235 = $1232 | $1234; //@line 126 "md5.c"
 $1236 = $1231 ^ $1235; //@line 126 "md5.c"
 $1237 = $3; //@line 126 "md5.c"
 $1238 = ((($1237)) + 16|0); //@line 126 "md5.c"
 $1239 = HEAP32[$1238>>2]|0; //@line 126 "md5.c"
 $1240 = (($1236) + ($1239))|0; //@line 126 "md5.c"
 $1241 = (($1240) + -145523070)|0; //@line 126 "md5.c"
 $1242 = $4; //@line 126 "md5.c"
 $1243 = (($1242) + ($1241))|0; //@line 126 "md5.c"
 $4 = $1243; //@line 126 "md5.c"
 $1244 = $4; //@line 126 "md5.c"
 $1245 = $1244 << 6; //@line 126 "md5.c"
 $1246 = $4; //@line 126 "md5.c"
 $1247 = $1246 >>> 26; //@line 126 "md5.c"
 $1248 = $1245 | $1247; //@line 126 "md5.c"
 $1249 = $5; //@line 126 "md5.c"
 $1250 = (($1248) + ($1249))|0; //@line 126 "md5.c"
 $4 = $1250; //@line 126 "md5.c"
 $1251 = $5; //@line 127 "md5.c"
 $1252 = $4; //@line 127 "md5.c"
 $1253 = $6; //@line 127 "md5.c"
 $1254 = $1253 ^ -1; //@line 127 "md5.c"
 $1255 = $1252 | $1254; //@line 127 "md5.c"
 $1256 = $1251 ^ $1255; //@line 127 "md5.c"
 $1257 = $3; //@line 127 "md5.c"
 $1258 = ((($1257)) + 44|0); //@line 127 "md5.c"
 $1259 = HEAP32[$1258>>2]|0; //@line 127 "md5.c"
 $1260 = (($1256) + ($1259))|0; //@line 127 "md5.c"
 $1261 = (($1260) + -1120210379)|0; //@line 127 "md5.c"
 $1262 = $7; //@line 127 "md5.c"
 $1263 = (($1262) + ($1261))|0; //@line 127 "md5.c"
 $7 = $1263; //@line 127 "md5.c"
 $1264 = $7; //@line 127 "md5.c"
 $1265 = $1264 << 10; //@line 127 "md5.c"
 $1266 = $7; //@line 127 "md5.c"
 $1267 = $1266 >>> 22; //@line 127 "md5.c"
 $1268 = $1265 | $1267; //@line 127 "md5.c"
 $1269 = $4; //@line 127 "md5.c"
 $1270 = (($1268) + ($1269))|0; //@line 127 "md5.c"
 $7 = $1270; //@line 127 "md5.c"
 $1271 = $4; //@line 128 "md5.c"
 $1272 = $7; //@line 128 "md5.c"
 $1273 = $5; //@line 128 "md5.c"
 $1274 = $1273 ^ -1; //@line 128 "md5.c"
 $1275 = $1272 | $1274; //@line 128 "md5.c"
 $1276 = $1271 ^ $1275; //@line 128 "md5.c"
 $1277 = $3; //@line 128 "md5.c"
 $1278 = ((($1277)) + 8|0); //@line 128 "md5.c"
 $1279 = HEAP32[$1278>>2]|0; //@line 128 "md5.c"
 $1280 = (($1276) + ($1279))|0; //@line 128 "md5.c"
 $1281 = (($1280) + 718787259)|0; //@line 128 "md5.c"
 $1282 = $6; //@line 128 "md5.c"
 $1283 = (($1282) + ($1281))|0; //@line 128 "md5.c"
 $6 = $1283; //@line 128 "md5.c"
 $1284 = $6; //@line 128 "md5.c"
 $1285 = $1284 << 15; //@line 128 "md5.c"
 $1286 = $6; //@line 128 "md5.c"
 $1287 = $1286 >>> 17; //@line 128 "md5.c"
 $1288 = $1285 | $1287; //@line 128 "md5.c"
 $1289 = $7; //@line 128 "md5.c"
 $1290 = (($1288) + ($1289))|0; //@line 128 "md5.c"
 $6 = $1290; //@line 128 "md5.c"
 $1291 = $7; //@line 129 "md5.c"
 $1292 = $6; //@line 129 "md5.c"
 $1293 = $4; //@line 129 "md5.c"
 $1294 = $1293 ^ -1; //@line 129 "md5.c"
 $1295 = $1292 | $1294; //@line 129 "md5.c"
 $1296 = $1291 ^ $1295; //@line 129 "md5.c"
 $1297 = $3; //@line 129 "md5.c"
 $1298 = ((($1297)) + 36|0); //@line 129 "md5.c"
 $1299 = HEAP32[$1298>>2]|0; //@line 129 "md5.c"
 $1300 = (($1296) + ($1299))|0; //@line 129 "md5.c"
 $1301 = (($1300) + -343485551)|0; //@line 129 "md5.c"
 $1302 = $5; //@line 129 "md5.c"
 $1303 = (($1302) + ($1301))|0; //@line 129 "md5.c"
 $5 = $1303; //@line 129 "md5.c"
 $1304 = $5; //@line 129 "md5.c"
 $1305 = $1304 << 21; //@line 129 "md5.c"
 $1306 = $5; //@line 129 "md5.c"
 $1307 = $1306 >>> 11; //@line 129 "md5.c"
 $1308 = $1305 | $1307; //@line 129 "md5.c"
 $1309 = $6; //@line 129 "md5.c"
 $1310 = (($1308) + ($1309))|0; //@line 129 "md5.c"
 $5 = $1310; //@line 129 "md5.c"
 $1311 = $4; //@line 131 "md5.c"
 $1312 = $2; //@line 131 "md5.c"
 $1313 = HEAP32[$1312>>2]|0; //@line 131 "md5.c"
 $1314 = (($1313) + ($1311))|0; //@line 131 "md5.c"
 HEAP32[$1312>>2] = $1314; //@line 131 "md5.c"
 $1315 = $5; //@line 132 "md5.c"
 $1316 = $2; //@line 132 "md5.c"
 $1317 = ((($1316)) + 4|0); //@line 132 "md5.c"
 $1318 = HEAP32[$1317>>2]|0; //@line 132 "md5.c"
 $1319 = (($1318) + ($1315))|0; //@line 132 "md5.c"
 HEAP32[$1317>>2] = $1319; //@line 132 "md5.c"
 $1320 = $6; //@line 133 "md5.c"
 $1321 = $2; //@line 133 "md5.c"
 $1322 = ((($1321)) + 8|0); //@line 133 "md5.c"
 $1323 = HEAP32[$1322>>2]|0; //@line 133 "md5.c"
 $1324 = (($1323) + ($1320))|0; //@line 133 "md5.c"
 HEAP32[$1322>>2] = $1324; //@line 133 "md5.c"
 $1325 = $7; //@line 134 "md5.c"
 $1326 = $2; //@line 134 "md5.c"
 $1327 = ((($1326)) + 12|0); //@line 134 "md5.c"
 $1328 = HEAP32[$1327>>2]|0; //@line 134 "md5.c"
 $1329 = (($1328) + ($1325))|0; //@line 134 "md5.c"
 HEAP32[$1327>>2] = $1329; //@line 134 "md5.c"
 STACKTOP = sp;return; //@line 135 "md5.c"
}
function _FLAC__MD5Accumulate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $8; //@line 493 "md5.c"
 $13 = $9; //@line 493 "md5.c"
 $14 = Math_imul($12, $13)|0; //@line 493 "md5.c"
 $15 = $10; //@line 493 "md5.c"
 $16 = Math_imul($14, $15)|0; //@line 493 "md5.c"
 $11 = $16; //@line 493 "md5.c"
 $17 = $8; //@line 496 "md5.c"
 $18 = $10; //@line 496 "md5.c"
 $19 = (4294967295 / ($18>>>0))&-1; //@line 496 "md5.c"
 $20 = ($17>>>0)>($19>>>0); //@line 496 "md5.c"
 if ($20) {
  $5 = 0; //@line 497 "md5.c"
  $61 = $5; //@line 516 "md5.c"
  STACKTOP = sp;return ($61|0); //@line 516 "md5.c"
 }
 $21 = $8; //@line 498 "md5.c"
 $22 = $10; //@line 498 "md5.c"
 $23 = Math_imul($21, $22)|0; //@line 498 "md5.c"
 $24 = $9; //@line 498 "md5.c"
 $25 = (4294967295 / ($24>>>0))&-1; //@line 498 "md5.c"
 $26 = ($23>>>0)>($25>>>0); //@line 498 "md5.c"
 if ($26) {
  $5 = 0; //@line 499 "md5.c"
  $61 = $5; //@line 516 "md5.c"
  STACKTOP = sp;return ($61|0); //@line 516 "md5.c"
 }
 $27 = $6; //@line 501 "md5.c"
 $28 = ((($27)) + 92|0); //@line 501 "md5.c"
 $29 = HEAP32[$28>>2]|0; //@line 501 "md5.c"
 $30 = $11; //@line 501 "md5.c"
 $31 = ($29>>>0)<($30>>>0); //@line 501 "md5.c"
 if ($31) {
  $32 = $6; //@line 502 "md5.c"
  $33 = ((($32)) + 88|0); //@line 502 "md5.c"
  $34 = HEAP32[$33>>2]|0; //@line 502 "md5.c"
  $35 = $11; //@line 502 "md5.c"
  $36 = (_safe_realloc__26($34,$35)|0); //@line 502 "md5.c"
  $37 = $6; //@line 502 "md5.c"
  $38 = ((($37)) + 88|0); //@line 502 "md5.c"
  HEAP32[$38>>2] = $36; //@line 502 "md5.c"
  $39 = (0|0)==($36|0); //@line 502 "md5.c"
  if ($39) {
   $40 = $11; //@line 503 "md5.c"
   $41 = (_safe_malloc_($40)|0); //@line 503 "md5.c"
   $42 = $6; //@line 503 "md5.c"
   $43 = ((($42)) + 88|0); //@line 503 "md5.c"
   HEAP32[$43>>2] = $41; //@line 503 "md5.c"
   $44 = (0|0)==($41|0); //@line 503 "md5.c"
   if ($44) {
    $45 = $6; //@line 504 "md5.c"
    $46 = ((($45)) + 92|0); //@line 504 "md5.c"
    HEAP32[$46>>2] = 0; //@line 504 "md5.c"
    $5 = 0; //@line 505 "md5.c"
    $61 = $5; //@line 516 "md5.c"
    STACKTOP = sp;return ($61|0); //@line 516 "md5.c"
   }
  }
  $47 = $11; //@line 508 "md5.c"
  $48 = $6; //@line 508 "md5.c"
  $49 = ((($48)) + 92|0); //@line 508 "md5.c"
  HEAP32[$49>>2] = $47; //@line 508 "md5.c"
 }
 $50 = $6; //@line 511 "md5.c"
 $51 = ((($50)) + 88|0); //@line 511 "md5.c"
 $52 = $7; //@line 511 "md5.c"
 $53 = $8; //@line 511 "md5.c"
 $54 = $9; //@line 511 "md5.c"
 $55 = $10; //@line 511 "md5.c"
 _format_input_($51,$52,$53,$54,$55); //@line 511 "md5.c"
 $56 = $6; //@line 513 "md5.c"
 $57 = $6; //@line 513 "md5.c"
 $58 = ((($57)) + 88|0); //@line 513 "md5.c"
 $59 = HEAP32[$58>>2]|0; //@line 513 "md5.c"
 $60 = $11; //@line 513 "md5.c"
 _FLAC__MD5Update($56,$59,$60); //@line 513 "md5.c"
 $5 = 1; //@line 515 "md5.c"
 $61 = $5; //@line 516 "md5.c"
 STACKTOP = sp;return ($61|0); //@line 516 "md5.c"
}
function _safe_realloc__26($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2; //@line 158 "../../include\share/alloc.h"
 $4 = $6; //@line 158 "../../include\share/alloc.h"
 $7 = $2; //@line 159 "../../include\share/alloc.h"
 $8 = $3; //@line 159 "../../include\share/alloc.h"
 $9 = (_realloc($7,$8)|0); //@line 159 "../../include\share/alloc.h"
 $5 = $9; //@line 159 "../../include\share/alloc.h"
 $10 = $3; //@line 160 "../../include\share/alloc.h"
 $11 = ($10>>>0)>(0); //@line 160 "../../include\share/alloc.h"
 $12 = $5; //@line 160 "../../include\share/alloc.h"
 $13 = ($12|0)==(0|0); //@line 160 "../../include\share/alloc.h"
 $or$cond = $11 & $13; //@line 160 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $15 = $5; //@line 162 "../../include\share/alloc.h"
  STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
 }
 $14 = $4; //@line 161 "../../include\share/alloc.h"
 _free($14); //@line 161 "../../include\share/alloc.h"
 $15 = $5; //@line 162 "../../include\share/alloc.h"
 STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
}
function _safe_malloc_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 72 "../../include\share/alloc.h"
 $3 = ($2|0)!=(0); //@line 72 "../../include\share/alloc.h"
 if (!($3)) {
  $4 = $1; //@line 73 "../../include\share/alloc.h"
  $5 = (($4) + 1)|0; //@line 73 "../../include\share/alloc.h"
  $1 = $5; //@line 73 "../../include\share/alloc.h"
 }
 $6 = $1; //@line 74 "../../include\share/alloc.h"
 $7 = (_malloc($6)|0); //@line 74 "../../include\share/alloc.h"
 STACKTOP = sp;return ($7|0); //@line 74 "../../include\share/alloc.h"
}
function _format_input_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $5; //@line 276 "md5.c"
 $17 = HEAP32[$16>>2]|0; //@line 276 "md5.c"
 $10 = $17; //@line 276 "md5.c"
 $18 = $5; //@line 277 "md5.c"
 $19 = HEAP32[$18>>2]|0; //@line 277 "md5.c"
 $11 = $19; //@line 277 "md5.c"
 $20 = $5; //@line 278 "md5.c"
 $21 = HEAP32[$20>>2]|0; //@line 278 "md5.c"
 $12 = $21; //@line 278 "md5.c"
 $22 = $9; //@line 287 "md5.c"
 $23 = ($22*100)|0; //@line 287 "md5.c"
 $24 = $7; //@line 287 "md5.c"
 $25 = (($23) + ($24))|0; //@line 287 "md5.c"
 do {
  switch ($25|0) {
  case 101:  {
   $15 = 0; //@line 290 "md5.c"
   while(1) {
    $26 = $15; //@line 290 "md5.c"
    $27 = $8; //@line 290 "md5.c"
    $28 = ($26>>>0)<($27>>>0); //@line 290 "md5.c"
    if (!($28)) {
     break;
    }
    $29 = $6; //@line 291 "md5.c"
    $30 = HEAP32[$29>>2]|0; //@line 291 "md5.c"
    $31 = $15; //@line 291 "md5.c"
    $32 = (($30) + ($31<<2)|0); //@line 291 "md5.c"
    $33 = HEAP32[$32>>2]|0; //@line 291 "md5.c"
    $34 = $33&255; //@line 291 "md5.c"
    $35 = $10; //@line 291 "md5.c"
    $36 = ((($35)) + 1|0); //@line 291 "md5.c"
    $10 = $36; //@line 291 "md5.c"
    HEAP8[$35>>0] = $34; //@line 291 "md5.c"
    $37 = $15; //@line 290 "md5.c"
    $38 = (($37) + 1)|0; //@line 290 "md5.c"
    $15 = $38; //@line 290 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 102:  {
   $15 = 0; //@line 295 "md5.c"
   while(1) {
    $39 = $15; //@line 295 "md5.c"
    $40 = $8; //@line 295 "md5.c"
    $41 = ($39>>>0)<($40>>>0); //@line 295 "md5.c"
    if (!($41)) {
     break;
    }
    $42 = $6; //@line 296 "md5.c"
    $43 = HEAP32[$42>>2]|0; //@line 296 "md5.c"
    $44 = $15; //@line 296 "md5.c"
    $45 = (($43) + ($44<<2)|0); //@line 296 "md5.c"
    $46 = HEAP32[$45>>2]|0; //@line 296 "md5.c"
    $47 = $46&255; //@line 296 "md5.c"
    $48 = $10; //@line 296 "md5.c"
    $49 = ((($48)) + 1|0); //@line 296 "md5.c"
    $10 = $49; //@line 296 "md5.c"
    HEAP8[$48>>0] = $47; //@line 296 "md5.c"
    $50 = $6; //@line 297 "md5.c"
    $51 = ((($50)) + 4|0); //@line 297 "md5.c"
    $52 = HEAP32[$51>>2]|0; //@line 297 "md5.c"
    $53 = $15; //@line 297 "md5.c"
    $54 = (($52) + ($53<<2)|0); //@line 297 "md5.c"
    $55 = HEAP32[$54>>2]|0; //@line 297 "md5.c"
    $56 = $55&255; //@line 297 "md5.c"
    $57 = $10; //@line 297 "md5.c"
    $58 = ((($57)) + 1|0); //@line 297 "md5.c"
    $10 = $58; //@line 297 "md5.c"
    HEAP8[$57>>0] = $56; //@line 297 "md5.c"
    $59 = $15; //@line 295 "md5.c"
    $60 = (($59) + 1)|0; //@line 295 "md5.c"
    $15 = $60; //@line 295 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 104:  {
   $15 = 0; //@line 302 "md5.c"
   while(1) {
    $61 = $15; //@line 302 "md5.c"
    $62 = $8; //@line 302 "md5.c"
    $63 = ($61>>>0)<($62>>>0); //@line 302 "md5.c"
    if (!($63)) {
     break;
    }
    $64 = $6; //@line 303 "md5.c"
    $65 = HEAP32[$64>>2]|0; //@line 303 "md5.c"
    $66 = $15; //@line 303 "md5.c"
    $67 = (($65) + ($66<<2)|0); //@line 303 "md5.c"
    $68 = HEAP32[$67>>2]|0; //@line 303 "md5.c"
    $69 = $68&255; //@line 303 "md5.c"
    $70 = $10; //@line 303 "md5.c"
    $71 = ((($70)) + 1|0); //@line 303 "md5.c"
    $10 = $71; //@line 303 "md5.c"
    HEAP8[$70>>0] = $69; //@line 303 "md5.c"
    $72 = $6; //@line 304 "md5.c"
    $73 = ((($72)) + 4|0); //@line 304 "md5.c"
    $74 = HEAP32[$73>>2]|0; //@line 304 "md5.c"
    $75 = $15; //@line 304 "md5.c"
    $76 = (($74) + ($75<<2)|0); //@line 304 "md5.c"
    $77 = HEAP32[$76>>2]|0; //@line 304 "md5.c"
    $78 = $77&255; //@line 304 "md5.c"
    $79 = $10; //@line 304 "md5.c"
    $80 = ((($79)) + 1|0); //@line 304 "md5.c"
    $10 = $80; //@line 304 "md5.c"
    HEAP8[$79>>0] = $78; //@line 304 "md5.c"
    $81 = $6; //@line 305 "md5.c"
    $82 = ((($81)) + 8|0); //@line 305 "md5.c"
    $83 = HEAP32[$82>>2]|0; //@line 305 "md5.c"
    $84 = $15; //@line 305 "md5.c"
    $85 = (($83) + ($84<<2)|0); //@line 305 "md5.c"
    $86 = HEAP32[$85>>2]|0; //@line 305 "md5.c"
    $87 = $86&255; //@line 305 "md5.c"
    $88 = $10; //@line 305 "md5.c"
    $89 = ((($88)) + 1|0); //@line 305 "md5.c"
    $10 = $89; //@line 305 "md5.c"
    HEAP8[$88>>0] = $87; //@line 305 "md5.c"
    $90 = $6; //@line 306 "md5.c"
    $91 = ((($90)) + 12|0); //@line 306 "md5.c"
    $92 = HEAP32[$91>>2]|0; //@line 306 "md5.c"
    $93 = $15; //@line 306 "md5.c"
    $94 = (($92) + ($93<<2)|0); //@line 306 "md5.c"
    $95 = HEAP32[$94>>2]|0; //@line 306 "md5.c"
    $96 = $95&255; //@line 306 "md5.c"
    $97 = $10; //@line 306 "md5.c"
    $98 = ((($97)) + 1|0); //@line 306 "md5.c"
    $10 = $98; //@line 306 "md5.c"
    HEAP8[$97>>0] = $96; //@line 306 "md5.c"
    $99 = $15; //@line 302 "md5.c"
    $100 = (($99) + 1)|0; //@line 302 "md5.c"
    $15 = $100; //@line 302 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 106:  {
   $15 = 0; //@line 311 "md5.c"
   while(1) {
    $101 = $15; //@line 311 "md5.c"
    $102 = $8; //@line 311 "md5.c"
    $103 = ($101>>>0)<($102>>>0); //@line 311 "md5.c"
    if (!($103)) {
     break;
    }
    $104 = $6; //@line 312 "md5.c"
    $105 = HEAP32[$104>>2]|0; //@line 312 "md5.c"
    $106 = $15; //@line 312 "md5.c"
    $107 = (($105) + ($106<<2)|0); //@line 312 "md5.c"
    $108 = HEAP32[$107>>2]|0; //@line 312 "md5.c"
    $109 = $108&255; //@line 312 "md5.c"
    $110 = $10; //@line 312 "md5.c"
    $111 = ((($110)) + 1|0); //@line 312 "md5.c"
    $10 = $111; //@line 312 "md5.c"
    HEAP8[$110>>0] = $109; //@line 312 "md5.c"
    $112 = $6; //@line 313 "md5.c"
    $113 = ((($112)) + 4|0); //@line 313 "md5.c"
    $114 = HEAP32[$113>>2]|0; //@line 313 "md5.c"
    $115 = $15; //@line 313 "md5.c"
    $116 = (($114) + ($115<<2)|0); //@line 313 "md5.c"
    $117 = HEAP32[$116>>2]|0; //@line 313 "md5.c"
    $118 = $117&255; //@line 313 "md5.c"
    $119 = $10; //@line 313 "md5.c"
    $120 = ((($119)) + 1|0); //@line 313 "md5.c"
    $10 = $120; //@line 313 "md5.c"
    HEAP8[$119>>0] = $118; //@line 313 "md5.c"
    $121 = $6; //@line 314 "md5.c"
    $122 = ((($121)) + 8|0); //@line 314 "md5.c"
    $123 = HEAP32[$122>>2]|0; //@line 314 "md5.c"
    $124 = $15; //@line 314 "md5.c"
    $125 = (($123) + ($124<<2)|0); //@line 314 "md5.c"
    $126 = HEAP32[$125>>2]|0; //@line 314 "md5.c"
    $127 = $126&255; //@line 314 "md5.c"
    $128 = $10; //@line 314 "md5.c"
    $129 = ((($128)) + 1|0); //@line 314 "md5.c"
    $10 = $129; //@line 314 "md5.c"
    HEAP8[$128>>0] = $127; //@line 314 "md5.c"
    $130 = $6; //@line 315 "md5.c"
    $131 = ((($130)) + 12|0); //@line 315 "md5.c"
    $132 = HEAP32[$131>>2]|0; //@line 315 "md5.c"
    $133 = $15; //@line 315 "md5.c"
    $134 = (($132) + ($133<<2)|0); //@line 315 "md5.c"
    $135 = HEAP32[$134>>2]|0; //@line 315 "md5.c"
    $136 = $135&255; //@line 315 "md5.c"
    $137 = $10; //@line 315 "md5.c"
    $138 = ((($137)) + 1|0); //@line 315 "md5.c"
    $10 = $138; //@line 315 "md5.c"
    HEAP8[$137>>0] = $136; //@line 315 "md5.c"
    $139 = $6; //@line 316 "md5.c"
    $140 = ((($139)) + 16|0); //@line 316 "md5.c"
    $141 = HEAP32[$140>>2]|0; //@line 316 "md5.c"
    $142 = $15; //@line 316 "md5.c"
    $143 = (($141) + ($142<<2)|0); //@line 316 "md5.c"
    $144 = HEAP32[$143>>2]|0; //@line 316 "md5.c"
    $145 = $144&255; //@line 316 "md5.c"
    $146 = $10; //@line 316 "md5.c"
    $147 = ((($146)) + 1|0); //@line 316 "md5.c"
    $10 = $147; //@line 316 "md5.c"
    HEAP8[$146>>0] = $145; //@line 316 "md5.c"
    $148 = $6; //@line 317 "md5.c"
    $149 = ((($148)) + 20|0); //@line 317 "md5.c"
    $150 = HEAP32[$149>>2]|0; //@line 317 "md5.c"
    $151 = $15; //@line 317 "md5.c"
    $152 = (($150) + ($151<<2)|0); //@line 317 "md5.c"
    $153 = HEAP32[$152>>2]|0; //@line 317 "md5.c"
    $154 = $153&255; //@line 317 "md5.c"
    $155 = $10; //@line 317 "md5.c"
    $156 = ((($155)) + 1|0); //@line 317 "md5.c"
    $10 = $156; //@line 317 "md5.c"
    HEAP8[$155>>0] = $154; //@line 317 "md5.c"
    $157 = $15; //@line 311 "md5.c"
    $158 = (($157) + 1)|0; //@line 311 "md5.c"
    $15 = $158; //@line 311 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 108:  {
   $15 = 0; //@line 322 "md5.c"
   while(1) {
    $159 = $15; //@line 322 "md5.c"
    $160 = $8; //@line 322 "md5.c"
    $161 = ($159>>>0)<($160>>>0); //@line 322 "md5.c"
    if (!($161)) {
     break;
    }
    $162 = $6; //@line 323 "md5.c"
    $163 = HEAP32[$162>>2]|0; //@line 323 "md5.c"
    $164 = $15; //@line 323 "md5.c"
    $165 = (($163) + ($164<<2)|0); //@line 323 "md5.c"
    $166 = HEAP32[$165>>2]|0; //@line 323 "md5.c"
    $167 = $166&255; //@line 323 "md5.c"
    $168 = $10; //@line 323 "md5.c"
    $169 = ((($168)) + 1|0); //@line 323 "md5.c"
    $10 = $169; //@line 323 "md5.c"
    HEAP8[$168>>0] = $167; //@line 323 "md5.c"
    $170 = $6; //@line 324 "md5.c"
    $171 = ((($170)) + 4|0); //@line 324 "md5.c"
    $172 = HEAP32[$171>>2]|0; //@line 324 "md5.c"
    $173 = $15; //@line 324 "md5.c"
    $174 = (($172) + ($173<<2)|0); //@line 324 "md5.c"
    $175 = HEAP32[$174>>2]|0; //@line 324 "md5.c"
    $176 = $175&255; //@line 324 "md5.c"
    $177 = $10; //@line 324 "md5.c"
    $178 = ((($177)) + 1|0); //@line 324 "md5.c"
    $10 = $178; //@line 324 "md5.c"
    HEAP8[$177>>0] = $176; //@line 324 "md5.c"
    $179 = $6; //@line 325 "md5.c"
    $180 = ((($179)) + 8|0); //@line 325 "md5.c"
    $181 = HEAP32[$180>>2]|0; //@line 325 "md5.c"
    $182 = $15; //@line 325 "md5.c"
    $183 = (($181) + ($182<<2)|0); //@line 325 "md5.c"
    $184 = HEAP32[$183>>2]|0; //@line 325 "md5.c"
    $185 = $184&255; //@line 325 "md5.c"
    $186 = $10; //@line 325 "md5.c"
    $187 = ((($186)) + 1|0); //@line 325 "md5.c"
    $10 = $187; //@line 325 "md5.c"
    HEAP8[$186>>0] = $185; //@line 325 "md5.c"
    $188 = $6; //@line 326 "md5.c"
    $189 = ((($188)) + 12|0); //@line 326 "md5.c"
    $190 = HEAP32[$189>>2]|0; //@line 326 "md5.c"
    $191 = $15; //@line 326 "md5.c"
    $192 = (($190) + ($191<<2)|0); //@line 326 "md5.c"
    $193 = HEAP32[$192>>2]|0; //@line 326 "md5.c"
    $194 = $193&255; //@line 326 "md5.c"
    $195 = $10; //@line 326 "md5.c"
    $196 = ((($195)) + 1|0); //@line 326 "md5.c"
    $10 = $196; //@line 326 "md5.c"
    HEAP8[$195>>0] = $194; //@line 326 "md5.c"
    $197 = $6; //@line 327 "md5.c"
    $198 = ((($197)) + 16|0); //@line 327 "md5.c"
    $199 = HEAP32[$198>>2]|0; //@line 327 "md5.c"
    $200 = $15; //@line 327 "md5.c"
    $201 = (($199) + ($200<<2)|0); //@line 327 "md5.c"
    $202 = HEAP32[$201>>2]|0; //@line 327 "md5.c"
    $203 = $202&255; //@line 327 "md5.c"
    $204 = $10; //@line 327 "md5.c"
    $205 = ((($204)) + 1|0); //@line 327 "md5.c"
    $10 = $205; //@line 327 "md5.c"
    HEAP8[$204>>0] = $203; //@line 327 "md5.c"
    $206 = $6; //@line 328 "md5.c"
    $207 = ((($206)) + 20|0); //@line 328 "md5.c"
    $208 = HEAP32[$207>>2]|0; //@line 328 "md5.c"
    $209 = $15; //@line 328 "md5.c"
    $210 = (($208) + ($209<<2)|0); //@line 328 "md5.c"
    $211 = HEAP32[$210>>2]|0; //@line 328 "md5.c"
    $212 = $211&255; //@line 328 "md5.c"
    $213 = $10; //@line 328 "md5.c"
    $214 = ((($213)) + 1|0); //@line 328 "md5.c"
    $10 = $214; //@line 328 "md5.c"
    HEAP8[$213>>0] = $212; //@line 328 "md5.c"
    $215 = $6; //@line 329 "md5.c"
    $216 = ((($215)) + 24|0); //@line 329 "md5.c"
    $217 = HEAP32[$216>>2]|0; //@line 329 "md5.c"
    $218 = $15; //@line 329 "md5.c"
    $219 = (($217) + ($218<<2)|0); //@line 329 "md5.c"
    $220 = HEAP32[$219>>2]|0; //@line 329 "md5.c"
    $221 = $220&255; //@line 329 "md5.c"
    $222 = $10; //@line 329 "md5.c"
    $223 = ((($222)) + 1|0); //@line 329 "md5.c"
    $10 = $223; //@line 329 "md5.c"
    HEAP8[$222>>0] = $221; //@line 329 "md5.c"
    $224 = $6; //@line 330 "md5.c"
    $225 = ((($224)) + 28|0); //@line 330 "md5.c"
    $226 = HEAP32[$225>>2]|0; //@line 330 "md5.c"
    $227 = $15; //@line 330 "md5.c"
    $228 = (($226) + ($227<<2)|0); //@line 330 "md5.c"
    $229 = HEAP32[$228>>2]|0; //@line 330 "md5.c"
    $230 = $229&255; //@line 330 "md5.c"
    $231 = $10; //@line 330 "md5.c"
    $232 = ((($231)) + 1|0); //@line 330 "md5.c"
    $10 = $232; //@line 330 "md5.c"
    HEAP8[$231>>0] = $230; //@line 330 "md5.c"
    $233 = $15; //@line 322 "md5.c"
    $234 = (($233) + 1)|0; //@line 322 "md5.c"
    $15 = $234; //@line 322 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 201:  {
   $15 = 0; //@line 336 "md5.c"
   while(1) {
    $235 = $15; //@line 336 "md5.c"
    $236 = $8; //@line 336 "md5.c"
    $237 = ($235>>>0)<($236>>>0); //@line 336 "md5.c"
    if (!($237)) {
     break;
    }
    $238 = $6; //@line 337 "md5.c"
    $239 = HEAP32[$238>>2]|0; //@line 337 "md5.c"
    $240 = $15; //@line 337 "md5.c"
    $241 = (($239) + ($240<<2)|0); //@line 337 "md5.c"
    $242 = HEAP32[$241>>2]|0; //@line 337 "md5.c"
    $243 = $242&65535; //@line 337 "md5.c"
    $244 = $11; //@line 337 "md5.c"
    $245 = ((($244)) + 2|0); //@line 337 "md5.c"
    $11 = $245; //@line 337 "md5.c"
    HEAP16[$244>>1] = $243; //@line 337 "md5.c"
    $246 = $15; //@line 336 "md5.c"
    $247 = (($246) + 1)|0; //@line 336 "md5.c"
    $15 = $247; //@line 336 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 202:  {
   $15 = 0; //@line 341 "md5.c"
   while(1) {
    $248 = $15; //@line 341 "md5.c"
    $249 = $8; //@line 341 "md5.c"
    $250 = ($248>>>0)<($249>>>0); //@line 341 "md5.c"
    if (!($250)) {
     break;
    }
    $251 = $6; //@line 342 "md5.c"
    $252 = HEAP32[$251>>2]|0; //@line 342 "md5.c"
    $253 = $15; //@line 342 "md5.c"
    $254 = (($252) + ($253<<2)|0); //@line 342 "md5.c"
    $255 = HEAP32[$254>>2]|0; //@line 342 "md5.c"
    $256 = $255&65535; //@line 342 "md5.c"
    $257 = $11; //@line 342 "md5.c"
    $258 = ((($257)) + 2|0); //@line 342 "md5.c"
    $11 = $258; //@line 342 "md5.c"
    HEAP16[$257>>1] = $256; //@line 342 "md5.c"
    $259 = $6; //@line 343 "md5.c"
    $260 = ((($259)) + 4|0); //@line 343 "md5.c"
    $261 = HEAP32[$260>>2]|0; //@line 343 "md5.c"
    $262 = $15; //@line 343 "md5.c"
    $263 = (($261) + ($262<<2)|0); //@line 343 "md5.c"
    $264 = HEAP32[$263>>2]|0; //@line 343 "md5.c"
    $265 = $264&65535; //@line 343 "md5.c"
    $266 = $11; //@line 343 "md5.c"
    $267 = ((($266)) + 2|0); //@line 343 "md5.c"
    $11 = $267; //@line 343 "md5.c"
    HEAP16[$266>>1] = $265; //@line 343 "md5.c"
    $268 = $15; //@line 341 "md5.c"
    $269 = (($268) + 1)|0; //@line 341 "md5.c"
    $15 = $269; //@line 341 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 204:  {
   $15 = 0; //@line 348 "md5.c"
   while(1) {
    $270 = $15; //@line 348 "md5.c"
    $271 = $8; //@line 348 "md5.c"
    $272 = ($270>>>0)<($271>>>0); //@line 348 "md5.c"
    if (!($272)) {
     break;
    }
    $273 = $6; //@line 349 "md5.c"
    $274 = HEAP32[$273>>2]|0; //@line 349 "md5.c"
    $275 = $15; //@line 349 "md5.c"
    $276 = (($274) + ($275<<2)|0); //@line 349 "md5.c"
    $277 = HEAP32[$276>>2]|0; //@line 349 "md5.c"
    $278 = $277&65535; //@line 349 "md5.c"
    $279 = $11; //@line 349 "md5.c"
    $280 = ((($279)) + 2|0); //@line 349 "md5.c"
    $11 = $280; //@line 349 "md5.c"
    HEAP16[$279>>1] = $278; //@line 349 "md5.c"
    $281 = $6; //@line 350 "md5.c"
    $282 = ((($281)) + 4|0); //@line 350 "md5.c"
    $283 = HEAP32[$282>>2]|0; //@line 350 "md5.c"
    $284 = $15; //@line 350 "md5.c"
    $285 = (($283) + ($284<<2)|0); //@line 350 "md5.c"
    $286 = HEAP32[$285>>2]|0; //@line 350 "md5.c"
    $287 = $286&65535; //@line 350 "md5.c"
    $288 = $11; //@line 350 "md5.c"
    $289 = ((($288)) + 2|0); //@line 350 "md5.c"
    $11 = $289; //@line 350 "md5.c"
    HEAP16[$288>>1] = $287; //@line 350 "md5.c"
    $290 = $6; //@line 351 "md5.c"
    $291 = ((($290)) + 8|0); //@line 351 "md5.c"
    $292 = HEAP32[$291>>2]|0; //@line 351 "md5.c"
    $293 = $15; //@line 351 "md5.c"
    $294 = (($292) + ($293<<2)|0); //@line 351 "md5.c"
    $295 = HEAP32[$294>>2]|0; //@line 351 "md5.c"
    $296 = $295&65535; //@line 351 "md5.c"
    $297 = $11; //@line 351 "md5.c"
    $298 = ((($297)) + 2|0); //@line 351 "md5.c"
    $11 = $298; //@line 351 "md5.c"
    HEAP16[$297>>1] = $296; //@line 351 "md5.c"
    $299 = $6; //@line 352 "md5.c"
    $300 = ((($299)) + 12|0); //@line 352 "md5.c"
    $301 = HEAP32[$300>>2]|0; //@line 352 "md5.c"
    $302 = $15; //@line 352 "md5.c"
    $303 = (($301) + ($302<<2)|0); //@line 352 "md5.c"
    $304 = HEAP32[$303>>2]|0; //@line 352 "md5.c"
    $305 = $304&65535; //@line 352 "md5.c"
    $306 = $11; //@line 352 "md5.c"
    $307 = ((($306)) + 2|0); //@line 352 "md5.c"
    $11 = $307; //@line 352 "md5.c"
    HEAP16[$306>>1] = $305; //@line 352 "md5.c"
    $308 = $15; //@line 348 "md5.c"
    $309 = (($308) + 1)|0; //@line 348 "md5.c"
    $15 = $309; //@line 348 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 206:  {
   $15 = 0; //@line 357 "md5.c"
   while(1) {
    $310 = $15; //@line 357 "md5.c"
    $311 = $8; //@line 357 "md5.c"
    $312 = ($310>>>0)<($311>>>0); //@line 357 "md5.c"
    if (!($312)) {
     break;
    }
    $313 = $6; //@line 358 "md5.c"
    $314 = HEAP32[$313>>2]|0; //@line 358 "md5.c"
    $315 = $15; //@line 358 "md5.c"
    $316 = (($314) + ($315<<2)|0); //@line 358 "md5.c"
    $317 = HEAP32[$316>>2]|0; //@line 358 "md5.c"
    $318 = $317&65535; //@line 358 "md5.c"
    $319 = $11; //@line 358 "md5.c"
    $320 = ((($319)) + 2|0); //@line 358 "md5.c"
    $11 = $320; //@line 358 "md5.c"
    HEAP16[$319>>1] = $318; //@line 358 "md5.c"
    $321 = $6; //@line 359 "md5.c"
    $322 = ((($321)) + 4|0); //@line 359 "md5.c"
    $323 = HEAP32[$322>>2]|0; //@line 359 "md5.c"
    $324 = $15; //@line 359 "md5.c"
    $325 = (($323) + ($324<<2)|0); //@line 359 "md5.c"
    $326 = HEAP32[$325>>2]|0; //@line 359 "md5.c"
    $327 = $326&65535; //@line 359 "md5.c"
    $328 = $11; //@line 359 "md5.c"
    $329 = ((($328)) + 2|0); //@line 359 "md5.c"
    $11 = $329; //@line 359 "md5.c"
    HEAP16[$328>>1] = $327; //@line 359 "md5.c"
    $330 = $6; //@line 360 "md5.c"
    $331 = ((($330)) + 8|0); //@line 360 "md5.c"
    $332 = HEAP32[$331>>2]|0; //@line 360 "md5.c"
    $333 = $15; //@line 360 "md5.c"
    $334 = (($332) + ($333<<2)|0); //@line 360 "md5.c"
    $335 = HEAP32[$334>>2]|0; //@line 360 "md5.c"
    $336 = $335&65535; //@line 360 "md5.c"
    $337 = $11; //@line 360 "md5.c"
    $338 = ((($337)) + 2|0); //@line 360 "md5.c"
    $11 = $338; //@line 360 "md5.c"
    HEAP16[$337>>1] = $336; //@line 360 "md5.c"
    $339 = $6; //@line 361 "md5.c"
    $340 = ((($339)) + 12|0); //@line 361 "md5.c"
    $341 = HEAP32[$340>>2]|0; //@line 361 "md5.c"
    $342 = $15; //@line 361 "md5.c"
    $343 = (($341) + ($342<<2)|0); //@line 361 "md5.c"
    $344 = HEAP32[$343>>2]|0; //@line 361 "md5.c"
    $345 = $344&65535; //@line 361 "md5.c"
    $346 = $11; //@line 361 "md5.c"
    $347 = ((($346)) + 2|0); //@line 361 "md5.c"
    $11 = $347; //@line 361 "md5.c"
    HEAP16[$346>>1] = $345; //@line 361 "md5.c"
    $348 = $6; //@line 362 "md5.c"
    $349 = ((($348)) + 16|0); //@line 362 "md5.c"
    $350 = HEAP32[$349>>2]|0; //@line 362 "md5.c"
    $351 = $15; //@line 362 "md5.c"
    $352 = (($350) + ($351<<2)|0); //@line 362 "md5.c"
    $353 = HEAP32[$352>>2]|0; //@line 362 "md5.c"
    $354 = $353&65535; //@line 362 "md5.c"
    $355 = $11; //@line 362 "md5.c"
    $356 = ((($355)) + 2|0); //@line 362 "md5.c"
    $11 = $356; //@line 362 "md5.c"
    HEAP16[$355>>1] = $354; //@line 362 "md5.c"
    $357 = $6; //@line 363 "md5.c"
    $358 = ((($357)) + 20|0); //@line 363 "md5.c"
    $359 = HEAP32[$358>>2]|0; //@line 363 "md5.c"
    $360 = $15; //@line 363 "md5.c"
    $361 = (($359) + ($360<<2)|0); //@line 363 "md5.c"
    $362 = HEAP32[$361>>2]|0; //@line 363 "md5.c"
    $363 = $362&65535; //@line 363 "md5.c"
    $364 = $11; //@line 363 "md5.c"
    $365 = ((($364)) + 2|0); //@line 363 "md5.c"
    $11 = $365; //@line 363 "md5.c"
    HEAP16[$364>>1] = $363; //@line 363 "md5.c"
    $366 = $15; //@line 357 "md5.c"
    $367 = (($366) + 1)|0; //@line 357 "md5.c"
    $15 = $367; //@line 357 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 208:  {
   $15 = 0; //@line 368 "md5.c"
   while(1) {
    $368 = $15; //@line 368 "md5.c"
    $369 = $8; //@line 368 "md5.c"
    $370 = ($368>>>0)<($369>>>0); //@line 368 "md5.c"
    if (!($370)) {
     break;
    }
    $371 = $6; //@line 369 "md5.c"
    $372 = HEAP32[$371>>2]|0; //@line 369 "md5.c"
    $373 = $15; //@line 369 "md5.c"
    $374 = (($372) + ($373<<2)|0); //@line 369 "md5.c"
    $375 = HEAP32[$374>>2]|0; //@line 369 "md5.c"
    $376 = $375&65535; //@line 369 "md5.c"
    $377 = $11; //@line 369 "md5.c"
    $378 = ((($377)) + 2|0); //@line 369 "md5.c"
    $11 = $378; //@line 369 "md5.c"
    HEAP16[$377>>1] = $376; //@line 369 "md5.c"
    $379 = $6; //@line 370 "md5.c"
    $380 = ((($379)) + 4|0); //@line 370 "md5.c"
    $381 = HEAP32[$380>>2]|0; //@line 370 "md5.c"
    $382 = $15; //@line 370 "md5.c"
    $383 = (($381) + ($382<<2)|0); //@line 370 "md5.c"
    $384 = HEAP32[$383>>2]|0; //@line 370 "md5.c"
    $385 = $384&65535; //@line 370 "md5.c"
    $386 = $11; //@line 370 "md5.c"
    $387 = ((($386)) + 2|0); //@line 370 "md5.c"
    $11 = $387; //@line 370 "md5.c"
    HEAP16[$386>>1] = $385; //@line 370 "md5.c"
    $388 = $6; //@line 371 "md5.c"
    $389 = ((($388)) + 8|0); //@line 371 "md5.c"
    $390 = HEAP32[$389>>2]|0; //@line 371 "md5.c"
    $391 = $15; //@line 371 "md5.c"
    $392 = (($390) + ($391<<2)|0); //@line 371 "md5.c"
    $393 = HEAP32[$392>>2]|0; //@line 371 "md5.c"
    $394 = $393&65535; //@line 371 "md5.c"
    $395 = $11; //@line 371 "md5.c"
    $396 = ((($395)) + 2|0); //@line 371 "md5.c"
    $11 = $396; //@line 371 "md5.c"
    HEAP16[$395>>1] = $394; //@line 371 "md5.c"
    $397 = $6; //@line 372 "md5.c"
    $398 = ((($397)) + 12|0); //@line 372 "md5.c"
    $399 = HEAP32[$398>>2]|0; //@line 372 "md5.c"
    $400 = $15; //@line 372 "md5.c"
    $401 = (($399) + ($400<<2)|0); //@line 372 "md5.c"
    $402 = HEAP32[$401>>2]|0; //@line 372 "md5.c"
    $403 = $402&65535; //@line 372 "md5.c"
    $404 = $11; //@line 372 "md5.c"
    $405 = ((($404)) + 2|0); //@line 372 "md5.c"
    $11 = $405; //@line 372 "md5.c"
    HEAP16[$404>>1] = $403; //@line 372 "md5.c"
    $406 = $6; //@line 373 "md5.c"
    $407 = ((($406)) + 16|0); //@line 373 "md5.c"
    $408 = HEAP32[$407>>2]|0; //@line 373 "md5.c"
    $409 = $15; //@line 373 "md5.c"
    $410 = (($408) + ($409<<2)|0); //@line 373 "md5.c"
    $411 = HEAP32[$410>>2]|0; //@line 373 "md5.c"
    $412 = $411&65535; //@line 373 "md5.c"
    $413 = $11; //@line 373 "md5.c"
    $414 = ((($413)) + 2|0); //@line 373 "md5.c"
    $11 = $414; //@line 373 "md5.c"
    HEAP16[$413>>1] = $412; //@line 373 "md5.c"
    $415 = $6; //@line 374 "md5.c"
    $416 = ((($415)) + 20|0); //@line 374 "md5.c"
    $417 = HEAP32[$416>>2]|0; //@line 374 "md5.c"
    $418 = $15; //@line 374 "md5.c"
    $419 = (($417) + ($418<<2)|0); //@line 374 "md5.c"
    $420 = HEAP32[$419>>2]|0; //@line 374 "md5.c"
    $421 = $420&65535; //@line 374 "md5.c"
    $422 = $11; //@line 374 "md5.c"
    $423 = ((($422)) + 2|0); //@line 374 "md5.c"
    $11 = $423; //@line 374 "md5.c"
    HEAP16[$422>>1] = $421; //@line 374 "md5.c"
    $424 = $6; //@line 375 "md5.c"
    $425 = ((($424)) + 24|0); //@line 375 "md5.c"
    $426 = HEAP32[$425>>2]|0; //@line 375 "md5.c"
    $427 = $15; //@line 375 "md5.c"
    $428 = (($426) + ($427<<2)|0); //@line 375 "md5.c"
    $429 = HEAP32[$428>>2]|0; //@line 375 "md5.c"
    $430 = $429&65535; //@line 375 "md5.c"
    $431 = $11; //@line 375 "md5.c"
    $432 = ((($431)) + 2|0); //@line 375 "md5.c"
    $11 = $432; //@line 375 "md5.c"
    HEAP16[$431>>1] = $430; //@line 375 "md5.c"
    $433 = $6; //@line 376 "md5.c"
    $434 = ((($433)) + 28|0); //@line 376 "md5.c"
    $435 = HEAP32[$434>>2]|0; //@line 376 "md5.c"
    $436 = $15; //@line 376 "md5.c"
    $437 = (($435) + ($436<<2)|0); //@line 376 "md5.c"
    $438 = HEAP32[$437>>2]|0; //@line 376 "md5.c"
    $439 = $438&65535; //@line 376 "md5.c"
    $440 = $11; //@line 376 "md5.c"
    $441 = ((($440)) + 2|0); //@line 376 "md5.c"
    $11 = $441; //@line 376 "md5.c"
    HEAP16[$440>>1] = $439; //@line 376 "md5.c"
    $442 = $15; //@line 368 "md5.c"
    $443 = (($442) + 1)|0; //@line 368 "md5.c"
    $15 = $443; //@line 368 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 301:  {
   $15 = 0; //@line 382 "md5.c"
   while(1) {
    $444 = $15; //@line 382 "md5.c"
    $445 = $8; //@line 382 "md5.c"
    $446 = ($444>>>0)<($445>>>0); //@line 382 "md5.c"
    if (!($446)) {
     break;
    }
    $447 = $6; //@line 383 "md5.c"
    $448 = HEAP32[$447>>2]|0; //@line 383 "md5.c"
    $449 = $15; //@line 383 "md5.c"
    $450 = (($448) + ($449<<2)|0); //@line 383 "md5.c"
    $451 = HEAP32[$450>>2]|0; //@line 383 "md5.c"
    $13 = $451; //@line 383 "md5.c"
    $452 = $13; //@line 384 "md5.c"
    $453 = $452&255; //@line 384 "md5.c"
    $454 = $10; //@line 384 "md5.c"
    $455 = ((($454)) + 1|0); //@line 384 "md5.c"
    $10 = $455; //@line 384 "md5.c"
    HEAP8[$454>>0] = $453; //@line 384 "md5.c"
    $456 = $13; //@line 384 "md5.c"
    $457 = $456 >> 8; //@line 384 "md5.c"
    $13 = $457; //@line 384 "md5.c"
    $458 = $13; //@line 385 "md5.c"
    $459 = $458&255; //@line 385 "md5.c"
    $460 = $10; //@line 385 "md5.c"
    $461 = ((($460)) + 1|0); //@line 385 "md5.c"
    $10 = $461; //@line 385 "md5.c"
    HEAP8[$460>>0] = $459; //@line 385 "md5.c"
    $462 = $13; //@line 385 "md5.c"
    $463 = $462 >> 8; //@line 385 "md5.c"
    $13 = $463; //@line 385 "md5.c"
    $464 = $13; //@line 386 "md5.c"
    $465 = $464&255; //@line 386 "md5.c"
    $466 = $10; //@line 386 "md5.c"
    $467 = ((($466)) + 1|0); //@line 386 "md5.c"
    $10 = $467; //@line 386 "md5.c"
    HEAP8[$466>>0] = $465; //@line 386 "md5.c"
    $468 = $15; //@line 382 "md5.c"
    $469 = (($468) + 1)|0; //@line 382 "md5.c"
    $15 = $469; //@line 382 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 302:  {
   $15 = 0; //@line 391 "md5.c"
   while(1) {
    $470 = $15; //@line 391 "md5.c"
    $471 = $8; //@line 391 "md5.c"
    $472 = ($470>>>0)<($471>>>0); //@line 391 "md5.c"
    if (!($472)) {
     break;
    }
    $473 = $6; //@line 392 "md5.c"
    $474 = HEAP32[$473>>2]|0; //@line 392 "md5.c"
    $475 = $15; //@line 392 "md5.c"
    $476 = (($474) + ($475<<2)|0); //@line 392 "md5.c"
    $477 = HEAP32[$476>>2]|0; //@line 392 "md5.c"
    $13 = $477; //@line 392 "md5.c"
    $478 = $13; //@line 393 "md5.c"
    $479 = $478&255; //@line 393 "md5.c"
    $480 = $10; //@line 393 "md5.c"
    $481 = ((($480)) + 1|0); //@line 393 "md5.c"
    $10 = $481; //@line 393 "md5.c"
    HEAP8[$480>>0] = $479; //@line 393 "md5.c"
    $482 = $13; //@line 393 "md5.c"
    $483 = $482 >> 8; //@line 393 "md5.c"
    $13 = $483; //@line 393 "md5.c"
    $484 = $13; //@line 394 "md5.c"
    $485 = $484&255; //@line 394 "md5.c"
    $486 = $10; //@line 394 "md5.c"
    $487 = ((($486)) + 1|0); //@line 394 "md5.c"
    $10 = $487; //@line 394 "md5.c"
    HEAP8[$486>>0] = $485; //@line 394 "md5.c"
    $488 = $13; //@line 394 "md5.c"
    $489 = $488 >> 8; //@line 394 "md5.c"
    $13 = $489; //@line 394 "md5.c"
    $490 = $13; //@line 395 "md5.c"
    $491 = $490&255; //@line 395 "md5.c"
    $492 = $10; //@line 395 "md5.c"
    $493 = ((($492)) + 1|0); //@line 395 "md5.c"
    $10 = $493; //@line 395 "md5.c"
    HEAP8[$492>>0] = $491; //@line 395 "md5.c"
    $494 = $6; //@line 396 "md5.c"
    $495 = ((($494)) + 4|0); //@line 396 "md5.c"
    $496 = HEAP32[$495>>2]|0; //@line 396 "md5.c"
    $497 = $15; //@line 396 "md5.c"
    $498 = (($496) + ($497<<2)|0); //@line 396 "md5.c"
    $499 = HEAP32[$498>>2]|0; //@line 396 "md5.c"
    $13 = $499; //@line 396 "md5.c"
    $500 = $13; //@line 397 "md5.c"
    $501 = $500&255; //@line 397 "md5.c"
    $502 = $10; //@line 397 "md5.c"
    $503 = ((($502)) + 1|0); //@line 397 "md5.c"
    $10 = $503; //@line 397 "md5.c"
    HEAP8[$502>>0] = $501; //@line 397 "md5.c"
    $504 = $13; //@line 397 "md5.c"
    $505 = $504 >> 8; //@line 397 "md5.c"
    $13 = $505; //@line 397 "md5.c"
    $506 = $13; //@line 398 "md5.c"
    $507 = $506&255; //@line 398 "md5.c"
    $508 = $10; //@line 398 "md5.c"
    $509 = ((($508)) + 1|0); //@line 398 "md5.c"
    $10 = $509; //@line 398 "md5.c"
    HEAP8[$508>>0] = $507; //@line 398 "md5.c"
    $510 = $13; //@line 398 "md5.c"
    $511 = $510 >> 8; //@line 398 "md5.c"
    $13 = $511; //@line 398 "md5.c"
    $512 = $13; //@line 399 "md5.c"
    $513 = $512&255; //@line 399 "md5.c"
    $514 = $10; //@line 399 "md5.c"
    $515 = ((($514)) + 1|0); //@line 399 "md5.c"
    $10 = $515; //@line 399 "md5.c"
    HEAP8[$514>>0] = $513; //@line 399 "md5.c"
    $516 = $15; //@line 391 "md5.c"
    $517 = (($516) + 1)|0; //@line 391 "md5.c"
    $15 = $517; //@line 391 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 401:  {
   $15 = 0; //@line 405 "md5.c"
   while(1) {
    $518 = $15; //@line 405 "md5.c"
    $519 = $8; //@line 405 "md5.c"
    $520 = ($518>>>0)<($519>>>0); //@line 405 "md5.c"
    if (!($520)) {
     break;
    }
    $521 = $6; //@line 406 "md5.c"
    $522 = HEAP32[$521>>2]|0; //@line 406 "md5.c"
    $523 = $15; //@line 406 "md5.c"
    $524 = (($522) + ($523<<2)|0); //@line 406 "md5.c"
    $525 = HEAP32[$524>>2]|0; //@line 406 "md5.c"
    $526 = $12; //@line 406 "md5.c"
    $527 = ((($526)) + 4|0); //@line 406 "md5.c"
    $12 = $527; //@line 406 "md5.c"
    HEAP32[$526>>2] = $525; //@line 406 "md5.c"
    $528 = $15; //@line 405 "md5.c"
    $529 = (($528) + 1)|0; //@line 405 "md5.c"
    $15 = $529; //@line 405 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 402:  {
   $15 = 0; //@line 410 "md5.c"
   while(1) {
    $530 = $15; //@line 410 "md5.c"
    $531 = $8; //@line 410 "md5.c"
    $532 = ($530>>>0)<($531>>>0); //@line 410 "md5.c"
    if (!($532)) {
     break;
    }
    $533 = $6; //@line 411 "md5.c"
    $534 = HEAP32[$533>>2]|0; //@line 411 "md5.c"
    $535 = $15; //@line 411 "md5.c"
    $536 = (($534) + ($535<<2)|0); //@line 411 "md5.c"
    $537 = HEAP32[$536>>2]|0; //@line 411 "md5.c"
    $538 = $12; //@line 411 "md5.c"
    $539 = ((($538)) + 4|0); //@line 411 "md5.c"
    $12 = $539; //@line 411 "md5.c"
    HEAP32[$538>>2] = $537; //@line 411 "md5.c"
    $540 = $6; //@line 412 "md5.c"
    $541 = ((($540)) + 4|0); //@line 412 "md5.c"
    $542 = HEAP32[$541>>2]|0; //@line 412 "md5.c"
    $543 = $15; //@line 412 "md5.c"
    $544 = (($542) + ($543<<2)|0); //@line 412 "md5.c"
    $545 = HEAP32[$544>>2]|0; //@line 412 "md5.c"
    $546 = $12; //@line 412 "md5.c"
    $547 = ((($546)) + 4|0); //@line 412 "md5.c"
    $12 = $547; //@line 412 "md5.c"
    HEAP32[$546>>2] = $545; //@line 412 "md5.c"
    $548 = $15; //@line 410 "md5.c"
    $549 = (($548) + 1)|0; //@line 410 "md5.c"
    $15 = $549; //@line 410 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 404:  {
   $15 = 0; //@line 417 "md5.c"
   while(1) {
    $550 = $15; //@line 417 "md5.c"
    $551 = $8; //@line 417 "md5.c"
    $552 = ($550>>>0)<($551>>>0); //@line 417 "md5.c"
    if (!($552)) {
     break;
    }
    $553 = $6; //@line 418 "md5.c"
    $554 = HEAP32[$553>>2]|0; //@line 418 "md5.c"
    $555 = $15; //@line 418 "md5.c"
    $556 = (($554) + ($555<<2)|0); //@line 418 "md5.c"
    $557 = HEAP32[$556>>2]|0; //@line 418 "md5.c"
    $558 = $12; //@line 418 "md5.c"
    $559 = ((($558)) + 4|0); //@line 418 "md5.c"
    $12 = $559; //@line 418 "md5.c"
    HEAP32[$558>>2] = $557; //@line 418 "md5.c"
    $560 = $6; //@line 419 "md5.c"
    $561 = ((($560)) + 4|0); //@line 419 "md5.c"
    $562 = HEAP32[$561>>2]|0; //@line 419 "md5.c"
    $563 = $15; //@line 419 "md5.c"
    $564 = (($562) + ($563<<2)|0); //@line 419 "md5.c"
    $565 = HEAP32[$564>>2]|0; //@line 419 "md5.c"
    $566 = $12; //@line 419 "md5.c"
    $567 = ((($566)) + 4|0); //@line 419 "md5.c"
    $12 = $567; //@line 419 "md5.c"
    HEAP32[$566>>2] = $565; //@line 419 "md5.c"
    $568 = $6; //@line 420 "md5.c"
    $569 = ((($568)) + 8|0); //@line 420 "md5.c"
    $570 = HEAP32[$569>>2]|0; //@line 420 "md5.c"
    $571 = $15; //@line 420 "md5.c"
    $572 = (($570) + ($571<<2)|0); //@line 420 "md5.c"
    $573 = HEAP32[$572>>2]|0; //@line 420 "md5.c"
    $574 = $12; //@line 420 "md5.c"
    $575 = ((($574)) + 4|0); //@line 420 "md5.c"
    $12 = $575; //@line 420 "md5.c"
    HEAP32[$574>>2] = $573; //@line 420 "md5.c"
    $576 = $6; //@line 421 "md5.c"
    $577 = ((($576)) + 12|0); //@line 421 "md5.c"
    $578 = HEAP32[$577>>2]|0; //@line 421 "md5.c"
    $579 = $15; //@line 421 "md5.c"
    $580 = (($578) + ($579<<2)|0); //@line 421 "md5.c"
    $581 = HEAP32[$580>>2]|0; //@line 421 "md5.c"
    $582 = $12; //@line 421 "md5.c"
    $583 = ((($582)) + 4|0); //@line 421 "md5.c"
    $12 = $583; //@line 421 "md5.c"
    HEAP32[$582>>2] = $581; //@line 421 "md5.c"
    $584 = $15; //@line 417 "md5.c"
    $585 = (($584) + 1)|0; //@line 417 "md5.c"
    $15 = $585; //@line 417 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 406:  {
   $15 = 0; //@line 426 "md5.c"
   while(1) {
    $586 = $15; //@line 426 "md5.c"
    $587 = $8; //@line 426 "md5.c"
    $588 = ($586>>>0)<($587>>>0); //@line 426 "md5.c"
    if (!($588)) {
     break;
    }
    $589 = $6; //@line 427 "md5.c"
    $590 = HEAP32[$589>>2]|0; //@line 427 "md5.c"
    $591 = $15; //@line 427 "md5.c"
    $592 = (($590) + ($591<<2)|0); //@line 427 "md5.c"
    $593 = HEAP32[$592>>2]|0; //@line 427 "md5.c"
    $594 = $12; //@line 427 "md5.c"
    $595 = ((($594)) + 4|0); //@line 427 "md5.c"
    $12 = $595; //@line 427 "md5.c"
    HEAP32[$594>>2] = $593; //@line 427 "md5.c"
    $596 = $6; //@line 428 "md5.c"
    $597 = ((($596)) + 4|0); //@line 428 "md5.c"
    $598 = HEAP32[$597>>2]|0; //@line 428 "md5.c"
    $599 = $15; //@line 428 "md5.c"
    $600 = (($598) + ($599<<2)|0); //@line 428 "md5.c"
    $601 = HEAP32[$600>>2]|0; //@line 428 "md5.c"
    $602 = $12; //@line 428 "md5.c"
    $603 = ((($602)) + 4|0); //@line 428 "md5.c"
    $12 = $603; //@line 428 "md5.c"
    HEAP32[$602>>2] = $601; //@line 428 "md5.c"
    $604 = $6; //@line 429 "md5.c"
    $605 = ((($604)) + 8|0); //@line 429 "md5.c"
    $606 = HEAP32[$605>>2]|0; //@line 429 "md5.c"
    $607 = $15; //@line 429 "md5.c"
    $608 = (($606) + ($607<<2)|0); //@line 429 "md5.c"
    $609 = HEAP32[$608>>2]|0; //@line 429 "md5.c"
    $610 = $12; //@line 429 "md5.c"
    $611 = ((($610)) + 4|0); //@line 429 "md5.c"
    $12 = $611; //@line 429 "md5.c"
    HEAP32[$610>>2] = $609; //@line 429 "md5.c"
    $612 = $6; //@line 430 "md5.c"
    $613 = ((($612)) + 12|0); //@line 430 "md5.c"
    $614 = HEAP32[$613>>2]|0; //@line 430 "md5.c"
    $615 = $15; //@line 430 "md5.c"
    $616 = (($614) + ($615<<2)|0); //@line 430 "md5.c"
    $617 = HEAP32[$616>>2]|0; //@line 430 "md5.c"
    $618 = $12; //@line 430 "md5.c"
    $619 = ((($618)) + 4|0); //@line 430 "md5.c"
    $12 = $619; //@line 430 "md5.c"
    HEAP32[$618>>2] = $617; //@line 430 "md5.c"
    $620 = $6; //@line 431 "md5.c"
    $621 = ((($620)) + 16|0); //@line 431 "md5.c"
    $622 = HEAP32[$621>>2]|0; //@line 431 "md5.c"
    $623 = $15; //@line 431 "md5.c"
    $624 = (($622) + ($623<<2)|0); //@line 431 "md5.c"
    $625 = HEAP32[$624>>2]|0; //@line 431 "md5.c"
    $626 = $12; //@line 431 "md5.c"
    $627 = ((($626)) + 4|0); //@line 431 "md5.c"
    $12 = $627; //@line 431 "md5.c"
    HEAP32[$626>>2] = $625; //@line 431 "md5.c"
    $628 = $6; //@line 432 "md5.c"
    $629 = ((($628)) + 20|0); //@line 432 "md5.c"
    $630 = HEAP32[$629>>2]|0; //@line 432 "md5.c"
    $631 = $15; //@line 432 "md5.c"
    $632 = (($630) + ($631<<2)|0); //@line 432 "md5.c"
    $633 = HEAP32[$632>>2]|0; //@line 432 "md5.c"
    $634 = $12; //@line 432 "md5.c"
    $635 = ((($634)) + 4|0); //@line 432 "md5.c"
    $12 = $635; //@line 432 "md5.c"
    HEAP32[$634>>2] = $633; //@line 432 "md5.c"
    $636 = $15; //@line 426 "md5.c"
    $637 = (($636) + 1)|0; //@line 426 "md5.c"
    $15 = $637; //@line 426 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  case 408:  {
   $15 = 0; //@line 437 "md5.c"
   while(1) {
    $638 = $15; //@line 437 "md5.c"
    $639 = $8; //@line 437 "md5.c"
    $640 = ($638>>>0)<($639>>>0); //@line 437 "md5.c"
    if (!($640)) {
     break;
    }
    $641 = $6; //@line 438 "md5.c"
    $642 = HEAP32[$641>>2]|0; //@line 438 "md5.c"
    $643 = $15; //@line 438 "md5.c"
    $644 = (($642) + ($643<<2)|0); //@line 438 "md5.c"
    $645 = HEAP32[$644>>2]|0; //@line 438 "md5.c"
    $646 = $12; //@line 438 "md5.c"
    $647 = ((($646)) + 4|0); //@line 438 "md5.c"
    $12 = $647; //@line 438 "md5.c"
    HEAP32[$646>>2] = $645; //@line 438 "md5.c"
    $648 = $6; //@line 439 "md5.c"
    $649 = ((($648)) + 4|0); //@line 439 "md5.c"
    $650 = HEAP32[$649>>2]|0; //@line 439 "md5.c"
    $651 = $15; //@line 439 "md5.c"
    $652 = (($650) + ($651<<2)|0); //@line 439 "md5.c"
    $653 = HEAP32[$652>>2]|0; //@line 439 "md5.c"
    $654 = $12; //@line 439 "md5.c"
    $655 = ((($654)) + 4|0); //@line 439 "md5.c"
    $12 = $655; //@line 439 "md5.c"
    HEAP32[$654>>2] = $653; //@line 439 "md5.c"
    $656 = $6; //@line 440 "md5.c"
    $657 = ((($656)) + 8|0); //@line 440 "md5.c"
    $658 = HEAP32[$657>>2]|0; //@line 440 "md5.c"
    $659 = $15; //@line 440 "md5.c"
    $660 = (($658) + ($659<<2)|0); //@line 440 "md5.c"
    $661 = HEAP32[$660>>2]|0; //@line 440 "md5.c"
    $662 = $12; //@line 440 "md5.c"
    $663 = ((($662)) + 4|0); //@line 440 "md5.c"
    $12 = $663; //@line 440 "md5.c"
    HEAP32[$662>>2] = $661; //@line 440 "md5.c"
    $664 = $6; //@line 441 "md5.c"
    $665 = ((($664)) + 12|0); //@line 441 "md5.c"
    $666 = HEAP32[$665>>2]|0; //@line 441 "md5.c"
    $667 = $15; //@line 441 "md5.c"
    $668 = (($666) + ($667<<2)|0); //@line 441 "md5.c"
    $669 = HEAP32[$668>>2]|0; //@line 441 "md5.c"
    $670 = $12; //@line 441 "md5.c"
    $671 = ((($670)) + 4|0); //@line 441 "md5.c"
    $12 = $671; //@line 441 "md5.c"
    HEAP32[$670>>2] = $669; //@line 441 "md5.c"
    $672 = $6; //@line 442 "md5.c"
    $673 = ((($672)) + 16|0); //@line 442 "md5.c"
    $674 = HEAP32[$673>>2]|0; //@line 442 "md5.c"
    $675 = $15; //@line 442 "md5.c"
    $676 = (($674) + ($675<<2)|0); //@line 442 "md5.c"
    $677 = HEAP32[$676>>2]|0; //@line 442 "md5.c"
    $678 = $12; //@line 442 "md5.c"
    $679 = ((($678)) + 4|0); //@line 442 "md5.c"
    $12 = $679; //@line 442 "md5.c"
    HEAP32[$678>>2] = $677; //@line 442 "md5.c"
    $680 = $6; //@line 443 "md5.c"
    $681 = ((($680)) + 20|0); //@line 443 "md5.c"
    $682 = HEAP32[$681>>2]|0; //@line 443 "md5.c"
    $683 = $15; //@line 443 "md5.c"
    $684 = (($682) + ($683<<2)|0); //@line 443 "md5.c"
    $685 = HEAP32[$684>>2]|0; //@line 443 "md5.c"
    $686 = $12; //@line 443 "md5.c"
    $687 = ((($686)) + 4|0); //@line 443 "md5.c"
    $12 = $687; //@line 443 "md5.c"
    HEAP32[$686>>2] = $685; //@line 443 "md5.c"
    $688 = $6; //@line 444 "md5.c"
    $689 = ((($688)) + 24|0); //@line 444 "md5.c"
    $690 = HEAP32[$689>>2]|0; //@line 444 "md5.c"
    $691 = $15; //@line 444 "md5.c"
    $692 = (($690) + ($691<<2)|0); //@line 444 "md5.c"
    $693 = HEAP32[$692>>2]|0; //@line 444 "md5.c"
    $694 = $12; //@line 444 "md5.c"
    $695 = ((($694)) + 4|0); //@line 444 "md5.c"
    $12 = $695; //@line 444 "md5.c"
    HEAP32[$694>>2] = $693; //@line 444 "md5.c"
    $696 = $6; //@line 445 "md5.c"
    $697 = ((($696)) + 28|0); //@line 445 "md5.c"
    $698 = HEAP32[$697>>2]|0; //@line 445 "md5.c"
    $699 = $15; //@line 445 "md5.c"
    $700 = (($698) + ($699<<2)|0); //@line 445 "md5.c"
    $701 = HEAP32[$700>>2]|0; //@line 445 "md5.c"
    $702 = $12; //@line 445 "md5.c"
    $703 = ((($702)) + 4|0); //@line 445 "md5.c"
    $12 = $703; //@line 445 "md5.c"
    HEAP32[$702>>2] = $701; //@line 445 "md5.c"
    $704 = $15; //@line 437 "md5.c"
    $705 = (($704) + 1)|0; //@line 437 "md5.c"
    $15 = $705; //@line 437 "md5.c"
   }
   STACKTOP = sp;return; //@line 486 "md5.c"
   break;
  }
  default: {
   $706 = $9; //@line 454 "md5.c"
   switch ($706|0) {
   case 1:  {
    $15 = 0; //@line 456 "md5.c"
    while(1) {
     $707 = $15; //@line 456 "md5.c"
     $708 = $8; //@line 456 "md5.c"
     $709 = ($707>>>0)<($708>>>0); //@line 456 "md5.c"
     if (!($709)) {
      break;
     }
     $14 = 0; //@line 457 "md5.c"
     while(1) {
      $710 = $14; //@line 457 "md5.c"
      $711 = $7; //@line 457 "md5.c"
      $712 = ($710>>>0)<($711>>>0); //@line 457 "md5.c"
      if (!($712)) {
       break;
      }
      $713 = $6; //@line 458 "md5.c"
      $714 = $14; //@line 458 "md5.c"
      $715 = (($713) + ($714<<2)|0); //@line 458 "md5.c"
      $716 = HEAP32[$715>>2]|0; //@line 458 "md5.c"
      $717 = $15; //@line 458 "md5.c"
      $718 = (($716) + ($717<<2)|0); //@line 458 "md5.c"
      $719 = HEAP32[$718>>2]|0; //@line 458 "md5.c"
      $720 = $719&255; //@line 458 "md5.c"
      $721 = $10; //@line 458 "md5.c"
      $722 = ((($721)) + 1|0); //@line 458 "md5.c"
      $10 = $722; //@line 458 "md5.c"
      HEAP8[$721>>0] = $720; //@line 458 "md5.c"
      $723 = $14; //@line 457 "md5.c"
      $724 = (($723) + 1)|0; //@line 457 "md5.c"
      $14 = $724; //@line 457 "md5.c"
     }
     $725 = $15; //@line 456 "md5.c"
     $726 = (($725) + 1)|0; //@line 456 "md5.c"
     $15 = $726; //@line 456 "md5.c"
    }
    STACKTOP = sp;return; //@line 486 "md5.c"
    break;
   }
   case 2:  {
    $15 = 0; //@line 462 "md5.c"
    while(1) {
     $727 = $15; //@line 462 "md5.c"
     $728 = $8; //@line 462 "md5.c"
     $729 = ($727>>>0)<($728>>>0); //@line 462 "md5.c"
     if (!($729)) {
      break;
     }
     $14 = 0; //@line 463 "md5.c"
     while(1) {
      $730 = $14; //@line 463 "md5.c"
      $731 = $7; //@line 463 "md5.c"
      $732 = ($730>>>0)<($731>>>0); //@line 463 "md5.c"
      if (!($732)) {
       break;
      }
      $733 = $6; //@line 464 "md5.c"
      $734 = $14; //@line 464 "md5.c"
      $735 = (($733) + ($734<<2)|0); //@line 464 "md5.c"
      $736 = HEAP32[$735>>2]|0; //@line 464 "md5.c"
      $737 = $15; //@line 464 "md5.c"
      $738 = (($736) + ($737<<2)|0); //@line 464 "md5.c"
      $739 = HEAP32[$738>>2]|0; //@line 464 "md5.c"
      $740 = $739&65535; //@line 464 "md5.c"
      $741 = $11; //@line 464 "md5.c"
      $742 = ((($741)) + 2|0); //@line 464 "md5.c"
      $11 = $742; //@line 464 "md5.c"
      HEAP16[$741>>1] = $740; //@line 464 "md5.c"
      $743 = $14; //@line 463 "md5.c"
      $744 = (($743) + 1)|0; //@line 463 "md5.c"
      $14 = $744; //@line 463 "md5.c"
     }
     $745 = $15; //@line 462 "md5.c"
     $746 = (($745) + 1)|0; //@line 462 "md5.c"
     $15 = $746; //@line 462 "md5.c"
    }
    STACKTOP = sp;return; //@line 486 "md5.c"
    break;
   }
   case 3:  {
    $15 = 0; //@line 468 "md5.c"
    while(1) {
     $747 = $15; //@line 468 "md5.c"
     $748 = $8; //@line 468 "md5.c"
     $749 = ($747>>>0)<($748>>>0); //@line 468 "md5.c"
     if (!($749)) {
      break;
     }
     $14 = 0; //@line 469 "md5.c"
     while(1) {
      $750 = $14; //@line 469 "md5.c"
      $751 = $7; //@line 469 "md5.c"
      $752 = ($750>>>0)<($751>>>0); //@line 469 "md5.c"
      if (!($752)) {
       break;
      }
      $753 = $6; //@line 470 "md5.c"
      $754 = $14; //@line 470 "md5.c"
      $755 = (($753) + ($754<<2)|0); //@line 470 "md5.c"
      $756 = HEAP32[$755>>2]|0; //@line 470 "md5.c"
      $757 = $15; //@line 470 "md5.c"
      $758 = (($756) + ($757<<2)|0); //@line 470 "md5.c"
      $759 = HEAP32[$758>>2]|0; //@line 470 "md5.c"
      $13 = $759; //@line 470 "md5.c"
      $760 = $13; //@line 471 "md5.c"
      $761 = $760&255; //@line 471 "md5.c"
      $762 = $10; //@line 471 "md5.c"
      $763 = ((($762)) + 1|0); //@line 471 "md5.c"
      $10 = $763; //@line 471 "md5.c"
      HEAP8[$762>>0] = $761; //@line 471 "md5.c"
      $764 = $13; //@line 471 "md5.c"
      $765 = $764 >> 8; //@line 471 "md5.c"
      $13 = $765; //@line 471 "md5.c"
      $766 = $13; //@line 472 "md5.c"
      $767 = $766&255; //@line 472 "md5.c"
      $768 = $10; //@line 472 "md5.c"
      $769 = ((($768)) + 1|0); //@line 472 "md5.c"
      $10 = $769; //@line 472 "md5.c"
      HEAP8[$768>>0] = $767; //@line 472 "md5.c"
      $770 = $13; //@line 472 "md5.c"
      $771 = $770 >> 8; //@line 472 "md5.c"
      $13 = $771; //@line 472 "md5.c"
      $772 = $13; //@line 473 "md5.c"
      $773 = $772&255; //@line 473 "md5.c"
      $774 = $10; //@line 473 "md5.c"
      $775 = ((($774)) + 1|0); //@line 473 "md5.c"
      $10 = $775; //@line 473 "md5.c"
      HEAP8[$774>>0] = $773; //@line 473 "md5.c"
      $776 = $14; //@line 469 "md5.c"
      $777 = (($776) + 1)|0; //@line 469 "md5.c"
      $14 = $777; //@line 469 "md5.c"
     }
     $778 = $15; //@line 468 "md5.c"
     $779 = (($778) + 1)|0; //@line 468 "md5.c"
     $15 = $779; //@line 468 "md5.c"
    }
    STACKTOP = sp;return; //@line 486 "md5.c"
    break;
   }
   case 4:  {
    $15 = 0; //@line 478 "md5.c"
    while(1) {
     $780 = $15; //@line 478 "md5.c"
     $781 = $8; //@line 478 "md5.c"
     $782 = ($780>>>0)<($781>>>0); //@line 478 "md5.c"
     if (!($782)) {
      break;
     }
     $14 = 0; //@line 479 "md5.c"
     while(1) {
      $783 = $14; //@line 479 "md5.c"
      $784 = $7; //@line 479 "md5.c"
      $785 = ($783>>>0)<($784>>>0); //@line 479 "md5.c"
      if (!($785)) {
       break;
      }
      $786 = $6; //@line 480 "md5.c"
      $787 = $14; //@line 480 "md5.c"
      $788 = (($786) + ($787<<2)|0); //@line 480 "md5.c"
      $789 = HEAP32[$788>>2]|0; //@line 480 "md5.c"
      $790 = $15; //@line 480 "md5.c"
      $791 = (($789) + ($790<<2)|0); //@line 480 "md5.c"
      $792 = HEAP32[$791>>2]|0; //@line 480 "md5.c"
      $793 = $12; //@line 480 "md5.c"
      $794 = ((($793)) + 4|0); //@line 480 "md5.c"
      $12 = $794; //@line 480 "md5.c"
      HEAP32[$793>>2] = $792; //@line 480 "md5.c"
      $795 = $14; //@line 479 "md5.c"
      $796 = (($795) + 1)|0; //@line 479 "md5.c"
      $14 = $796; //@line 479 "md5.c"
     }
     $797 = $15; //@line 478 "md5.c"
     $798 = (($797) + 1)|0; //@line 478 "md5.c"
     $15 = $798; //@line 478 "md5.c"
    }
    STACKTOP = sp;return; //@line 486 "md5.c"
    break;
   }
   default: {
    STACKTOP = sp;return; //@line 486 "md5.c"
   }
   }
  }
  }
 } while(0);
}
function _FLAC__MD5Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3; //@line 184 "md5.c"
 $8 = ((($7)) + 80|0); //@line 184 "md5.c"
 $9 = HEAP32[$8>>2]|0; //@line 184 "md5.c"
 $6 = $9; //@line 184 "md5.c"
 $10 = $6; //@line 185 "md5.c"
 $11 = $5; //@line 185 "md5.c"
 $12 = (($10) + ($11))|0; //@line 185 "md5.c"
 $13 = $3; //@line 185 "md5.c"
 $14 = ((($13)) + 80|0); //@line 185 "md5.c"
 HEAP32[$14>>2] = $12; //@line 185 "md5.c"
 $15 = $6; //@line 185 "md5.c"
 $16 = ($12>>>0)<($15>>>0); //@line 185 "md5.c"
 if ($16) {
  $17 = $3; //@line 186 "md5.c"
  $18 = ((($17)) + 80|0); //@line 186 "md5.c"
  $19 = ((($18)) + 4|0); //@line 186 "md5.c"
  $20 = HEAP32[$19>>2]|0; //@line 186 "md5.c"
  $21 = (($20) + 1)|0; //@line 186 "md5.c"
  HEAP32[$19>>2] = $21; //@line 186 "md5.c"
 }
 $22 = $6; //@line 188 "md5.c"
 $23 = $22 & 63; //@line 188 "md5.c"
 $24 = (64 - ($23))|0; //@line 188 "md5.c"
 $6 = $24; //@line 188 "md5.c"
 $25 = $6; //@line 189 "md5.c"
 $26 = $5; //@line 189 "md5.c"
 $27 = ($25>>>0)>($26>>>0); //@line 189 "md5.c"
 $28 = $3;
 $29 = ((($28)) + 64|0);
 $30 = $6;
 $31 = (0 - ($30))|0;
 $32 = (($29) + ($31)|0);
 $33 = $4;
 if ($27) {
  $34 = $5; //@line 190 "md5.c"
  _memcpy(($32|0),($33|0),($34|0))|0; //@line 190 "md5.c"
  STACKTOP = sp;return; //@line 211 "md5.c"
 }
 $35 = $6; //@line 194 "md5.c"
 _memcpy(($32|0),($33|0),($35|0))|0; //@line 194 "md5.c"
 $36 = $3; //@line 196 "md5.c"
 $37 = ((($36)) + 64|0); //@line 196 "md5.c"
 $38 = $3; //@line 196 "md5.c"
 _FLAC__MD5Transform($37,$38); //@line 196 "md5.c"
 $39 = $6; //@line 197 "md5.c"
 $40 = $4; //@line 197 "md5.c"
 $41 = (($40) + ($39)|0); //@line 197 "md5.c"
 $4 = $41; //@line 197 "md5.c"
 $42 = $6; //@line 198 "md5.c"
 $43 = $5; //@line 198 "md5.c"
 $44 = (($43) - ($42))|0; //@line 198 "md5.c"
 $5 = $44; //@line 198 "md5.c"
 while(1) {
  $45 = $5; //@line 201 "md5.c"
  $46 = ($45>>>0)>=(64); //@line 201 "md5.c"
  $47 = $3;
  $48 = $4;
  if (!($46)) {
   break;
  }
  dest=$47; src=$48; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0)); //@line 202 "md5.c"
  $49 = $3; //@line 204 "md5.c"
  $50 = ((($49)) + 64|0); //@line 204 "md5.c"
  $51 = $3; //@line 204 "md5.c"
  _FLAC__MD5Transform($50,$51); //@line 204 "md5.c"
  $52 = $4; //@line 205 "md5.c"
  $53 = ((($52)) + 64|0); //@line 205 "md5.c"
  $4 = $53; //@line 205 "md5.c"
  $54 = $5; //@line 206 "md5.c"
  $55 = (($54) - 64)|0; //@line 206 "md5.c"
  $5 = $55; //@line 206 "md5.c"
 }
 $56 = $5; //@line 210 "md5.c"
 _memcpy(($47|0),($48|0),($56|0))|0; //@line 210 "md5.c"
 STACKTOP = sp;return; //@line 211 "md5.c"
}
function _FLAC__memory_alloc_aligned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2; //@line 56 "memory.c"
 $6 = (_safe_malloc__27($5)|0); //@line 56 "memory.c"
 $4 = $6; //@line 56 "memory.c"
 $7 = $4; //@line 57 "memory.c"
 $8 = $3; //@line 57 "memory.c"
 HEAP32[$8>>2] = $7; //@line 57 "memory.c"
 $9 = $4; //@line 59 "memory.c"
 STACKTOP = sp;return ($9|0); //@line 59 "memory.c"
}
function _safe_malloc__27($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 72 "../../include\share/alloc.h"
 $3 = ($2|0)!=(0); //@line 72 "../../include\share/alloc.h"
 if (!($3)) {
  $4 = $1; //@line 73 "../../include\share/alloc.h"
  $5 = (($4) + 1)|0; //@line 73 "../../include\share/alloc.h"
  $1 = $5; //@line 73 "../../include\share/alloc.h"
 }
 $6 = $1; //@line 74 "../../include\share/alloc.h"
 $7 = (_malloc($6)|0); //@line 74 "../../include\share/alloc.h"
 STACKTOP = sp;return ($7|0); //@line 74 "../../include\share/alloc.h"
}
function _FLAC__memory_alloc_aligned_int32_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 75 "memory.c"
 $10 = ($9>>>0)>(1073741823); //@line 75 "memory.c"
 if ($10) {
  $3 = 0; //@line 76 "memory.c"
  $25 = $3; //@line 89 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 89 "memory.c"
 }
 $11 = $4; //@line 78 "memory.c"
 $12 = $11<<2; //@line 78 "memory.c"
 $13 = (_FLAC__memory_alloc_aligned($12,$8)|0); //@line 78 "memory.c"
 $7 = $13; //@line 78 "memory.c"
 $14 = $7; //@line 79 "memory.c"
 $15 = (0|0)==($14|0); //@line 79 "memory.c"
 if ($15) {
  $3 = 0; //@line 80 "memory.c"
  $25 = $3; //@line 89 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 89 "memory.c"
 }
 $16 = $5; //@line 83 "memory.c"
 $17 = HEAP32[$16>>2]|0; //@line 83 "memory.c"
 $18 = ($17|0)!=(0|0); //@line 83 "memory.c"
 if ($18) {
  $19 = $5; //@line 84 "memory.c"
  $20 = HEAP32[$19>>2]|0; //@line 84 "memory.c"
  _free($20); //@line 84 "memory.c"
 }
 $21 = $7; //@line 85 "memory.c"
 $22 = $5; //@line 85 "memory.c"
 HEAP32[$22>>2] = $21; //@line 85 "memory.c"
 $23 = HEAP32[$8>>2]|0; //@line 86 "memory.c"
 $24 = $6; //@line 86 "memory.c"
 HEAP32[$24>>2] = $23; //@line 86 "memory.c"
 $3 = 1; //@line 87 "memory.c"
 $25 = $3; //@line 89 "memory.c"
 STACKTOP = sp;return ($25|0); //@line 89 "memory.c"
}
function _FLAC__memory_alloc_aligned_uint64_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 133 "memory.c"
 $10 = ($9>>>0)>(536870911); //@line 133 "memory.c"
 if ($10) {
  $3 = 0; //@line 134 "memory.c"
  $25 = $3; //@line 147 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 147 "memory.c"
 }
 $11 = $4; //@line 136 "memory.c"
 $12 = $11<<3; //@line 136 "memory.c"
 $13 = (_FLAC__memory_alloc_aligned($12,$8)|0); //@line 136 "memory.c"
 $7 = $13; //@line 136 "memory.c"
 $14 = $7; //@line 137 "memory.c"
 $15 = (0|0)==($14|0); //@line 137 "memory.c"
 if ($15) {
  $3 = 0; //@line 138 "memory.c"
  $25 = $3; //@line 147 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 147 "memory.c"
 }
 $16 = $5; //@line 141 "memory.c"
 $17 = HEAP32[$16>>2]|0; //@line 141 "memory.c"
 $18 = ($17|0)!=(0|0); //@line 141 "memory.c"
 if ($18) {
  $19 = $5; //@line 142 "memory.c"
  $20 = HEAP32[$19>>2]|0; //@line 142 "memory.c"
  _free($20); //@line 142 "memory.c"
 }
 $21 = $7; //@line 143 "memory.c"
 $22 = $5; //@line 143 "memory.c"
 HEAP32[$22>>2] = $21; //@line 143 "memory.c"
 $23 = HEAP32[$8>>2]|0; //@line 144 "memory.c"
 $24 = $6; //@line 144 "memory.c"
 HEAP32[$24>>2] = $23; //@line 144 "memory.c"
 $3 = 1; //@line 145 "memory.c"
 $25 = $3; //@line 147 "memory.c"
 STACKTOP = sp;return ($25|0); //@line 147 "memory.c"
}
function _FLAC__memory_alloc_aligned_unsigned_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 162 "memory.c"
 $10 = ($9>>>0)>(1073741823); //@line 162 "memory.c"
 if ($10) {
  $3 = 0; //@line 163 "memory.c"
  $25 = $3; //@line 176 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 176 "memory.c"
 }
 $11 = $4; //@line 165 "memory.c"
 $12 = $11<<2; //@line 165 "memory.c"
 $13 = (_FLAC__memory_alloc_aligned($12,$8)|0); //@line 165 "memory.c"
 $7 = $13; //@line 165 "memory.c"
 $14 = $7; //@line 166 "memory.c"
 $15 = (0|0)==($14|0); //@line 166 "memory.c"
 if ($15) {
  $3 = 0; //@line 167 "memory.c"
  $25 = $3; //@line 176 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 176 "memory.c"
 }
 $16 = $5; //@line 170 "memory.c"
 $17 = HEAP32[$16>>2]|0; //@line 170 "memory.c"
 $18 = ($17|0)!=(0|0); //@line 170 "memory.c"
 if ($18) {
  $19 = $5; //@line 171 "memory.c"
  $20 = HEAP32[$19>>2]|0; //@line 171 "memory.c"
  _free($20); //@line 171 "memory.c"
 }
 $21 = $7; //@line 172 "memory.c"
 $22 = $5; //@line 172 "memory.c"
 HEAP32[$22>>2] = $21; //@line 172 "memory.c"
 $23 = HEAP32[$8>>2]|0; //@line 173 "memory.c"
 $24 = $6; //@line 173 "memory.c"
 HEAP32[$24>>2] = $23; //@line 173 "memory.c"
 $3 = 1; //@line 174 "memory.c"
 $25 = $3; //@line 176 "memory.c"
 STACKTOP = sp;return ($25|0); //@line 176 "memory.c"
}
function _FLAC__memory_alloc_aligned_real_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 193 "memory.c"
 $10 = ($9>>>0)>(1073741823); //@line 193 "memory.c"
 if ($10) {
  $3 = 0; //@line 194 "memory.c"
  $25 = $3; //@line 207 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 207 "memory.c"
 }
 $11 = $4; //@line 196 "memory.c"
 $12 = $11<<2; //@line 196 "memory.c"
 $13 = (_FLAC__memory_alloc_aligned($12,$8)|0); //@line 196 "memory.c"
 $7 = $13; //@line 196 "memory.c"
 $14 = $7; //@line 197 "memory.c"
 $15 = (0|0)==($14|0); //@line 197 "memory.c"
 if ($15) {
  $3 = 0; //@line 198 "memory.c"
  $25 = $3; //@line 207 "memory.c"
  STACKTOP = sp;return ($25|0); //@line 207 "memory.c"
 }
 $16 = $5; //@line 201 "memory.c"
 $17 = HEAP32[$16>>2]|0; //@line 201 "memory.c"
 $18 = ($17|0)!=(0|0); //@line 201 "memory.c"
 if ($18) {
  $19 = $5; //@line 202 "memory.c"
  $20 = HEAP32[$19>>2]|0; //@line 202 "memory.c"
  _free($20); //@line 202 "memory.c"
 }
 $21 = $7; //@line 203 "memory.c"
 $22 = $5; //@line 203 "memory.c"
 HEAP32[$22>>2] = $21; //@line 203 "memory.c"
 $23 = HEAP32[$8>>2]|0; //@line 204 "memory.c"
 $24 = $6; //@line 204 "memory.c"
 HEAP32[$24>>2] = $23; //@line 204 "memory.c"
 $3 = 1; //@line 205 "memory.c"
 $25 = $3; //@line 207 "memory.c"
 STACKTOP = sp;return ($25|0); //@line 207 "memory.c"
}
function _safe_malloc_mul_2op_p($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 213 "memory.c"
 $6 = ($5|0)!=(0); //@line 213 "memory.c"
 $7 = $4; //@line 213 "memory.c"
 $8 = ($7|0)!=(0); //@line 213 "memory.c"
 $or$cond = $6 & $8; //@line 213 "memory.c"
 do {
  if ($or$cond) {
   $10 = $3; //@line 215 "memory.c"
   $11 = $4; //@line 215 "memory.c"
   $12 = (4294967295 / ($11>>>0))&-1; //@line 215 "memory.c"
   $13 = ($10>>>0)>($12>>>0); //@line 215 "memory.c"
   if ($13) {
    $2 = 0; //@line 216 "memory.c"
    break;
   } else {
    $14 = $3; //@line 217 "memory.c"
    $15 = $4; //@line 217 "memory.c"
    $16 = Math_imul($14, $15)|0; //@line 217 "memory.c"
    $17 = (_malloc($16)|0); //@line 217 "memory.c"
    $2 = $17; //@line 217 "memory.c"
    break;
   }
  } else {
   $9 = (_malloc(1)|0); //@line 214 "memory.c"
   $2 = $9; //@line 214 "memory.c"
  }
 } while(0);
 $18 = $2; //@line 218 "memory.c"
 STACKTOP = sp;return ($18|0); //@line 218 "memory.c"
}
function _FLAC__stream_decoder_new() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = (_calloc(1,8)|0); //@line 248 "stream_decoder.c"
 $1 = $3; //@line 248 "stream_decoder.c"
 $4 = $1; //@line 249 "stream_decoder.c"
 $5 = ($4|0)==(0|0); //@line 249 "stream_decoder.c"
 if ($5) {
  $0 = 0; //@line 250 "stream_decoder.c"
  $111 = $0; //@line 302 "stream_decoder.c"
  STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
 }
 $6 = (_calloc(1,32)|0); //@line 253 "stream_decoder.c"
 $7 = $1; //@line 253 "stream_decoder.c"
 HEAP32[$7>>2] = $6; //@line 253 "stream_decoder.c"
 $8 = $1; //@line 254 "stream_decoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 254 "stream_decoder.c"
 $10 = ($9|0)==(0|0); //@line 254 "stream_decoder.c"
 if ($10) {
  $11 = $1; //@line 255 "stream_decoder.c"
  _free($11); //@line 255 "stream_decoder.c"
  $0 = 0; //@line 256 "stream_decoder.c"
  $111 = $0; //@line 302 "stream_decoder.c"
  STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
 }
 $12 = (_calloc(1,6184)|0); //@line 259 "stream_decoder.c"
 $13 = $1; //@line 259 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 259 "stream_decoder.c"
 HEAP32[$14>>2] = $12; //@line 259 "stream_decoder.c"
 $15 = $1; //@line 260 "stream_decoder.c"
 $16 = ((($15)) + 4|0); //@line 260 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 260 "stream_decoder.c"
 $18 = ($17|0)==(0|0); //@line 260 "stream_decoder.c"
 if ($18) {
  $19 = $1; //@line 261 "stream_decoder.c"
  $20 = HEAP32[$19>>2]|0; //@line 261 "stream_decoder.c"
  _free($20); //@line 261 "stream_decoder.c"
  $21 = $1; //@line 262 "stream_decoder.c"
  _free($21); //@line 262 "stream_decoder.c"
  $0 = 0; //@line 263 "stream_decoder.c"
  $111 = $0; //@line 302 "stream_decoder.c"
  STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
 }
 $22 = (_FLAC__bitreader_new()|0); //@line 266 "stream_decoder.c"
 $23 = $1; //@line 266 "stream_decoder.c"
 $24 = ((($23)) + 4|0); //@line 266 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 266 "stream_decoder.c"
 $26 = ((($25)) + 56|0); //@line 266 "stream_decoder.c"
 HEAP32[$26>>2] = $22; //@line 266 "stream_decoder.c"
 $27 = $1; //@line 267 "stream_decoder.c"
 $28 = ((($27)) + 4|0); //@line 267 "stream_decoder.c"
 $29 = HEAP32[$28>>2]|0; //@line 267 "stream_decoder.c"
 $30 = ((($29)) + 56|0); //@line 267 "stream_decoder.c"
 $31 = HEAP32[$30>>2]|0; //@line 267 "stream_decoder.c"
 $32 = ($31|0)==(0|0); //@line 267 "stream_decoder.c"
 $33 = $1;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 if ($32) {
  _free($35); //@line 268 "stream_decoder.c"
  $36 = $1; //@line 269 "stream_decoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 269 "stream_decoder.c"
  _free($37); //@line 269 "stream_decoder.c"
  $38 = $1; //@line 270 "stream_decoder.c"
  _free($38); //@line 270 "stream_decoder.c"
  $0 = 0; //@line 271 "stream_decoder.c"
  $111 = $0; //@line 302 "stream_decoder.c"
  STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
 }
 $39 = ((($35)) + 1128|0); //@line 274 "stream_decoder.c"
 HEAP32[$39>>2] = 16; //@line 274 "stream_decoder.c"
 $40 = HEAP32[265]|0; //@line 275 "stream_decoder.c"
 $41 = (($40>>>0) / 8)&-1; //@line 275 "stream_decoder.c"
 $42 = $1; //@line 275 "stream_decoder.c"
 $43 = ((($42)) + 4|0); //@line 275 "stream_decoder.c"
 $44 = HEAP32[$43>>2]|0; //@line 275 "stream_decoder.c"
 $45 = ((($44)) + 1128|0); //@line 275 "stream_decoder.c"
 $46 = HEAP32[$45>>2]|0; //@line 275 "stream_decoder.c"
 $47 = Math_imul($41, $46)|0; //@line 275 "stream_decoder.c"
 $48 = (_malloc($47)|0); //@line 275 "stream_decoder.c"
 $49 = $1; //@line 275 "stream_decoder.c"
 $50 = ((($49)) + 4|0); //@line 275 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 275 "stream_decoder.c"
 $52 = ((($51)) + 1120|0); //@line 275 "stream_decoder.c"
 HEAP32[$52>>2] = $48; //@line 275 "stream_decoder.c"
 $53 = (0|0)==($48|0); //@line 275 "stream_decoder.c"
 if ($53) {
  $54 = $1; //@line 276 "stream_decoder.c"
  $55 = ((($54)) + 4|0); //@line 276 "stream_decoder.c"
  $56 = HEAP32[$55>>2]|0; //@line 276 "stream_decoder.c"
  $57 = ((($56)) + 56|0); //@line 276 "stream_decoder.c"
  $58 = HEAP32[$57>>2]|0; //@line 276 "stream_decoder.c"
  _FLAC__bitreader_delete($58); //@line 276 "stream_decoder.c"
  $59 = $1; //@line 277 "stream_decoder.c"
  $60 = ((($59)) + 4|0); //@line 277 "stream_decoder.c"
  $61 = HEAP32[$60>>2]|0; //@line 277 "stream_decoder.c"
  _free($61); //@line 277 "stream_decoder.c"
  $62 = $1; //@line 278 "stream_decoder.c"
  $63 = HEAP32[$62>>2]|0; //@line 278 "stream_decoder.c"
  _free($63); //@line 278 "stream_decoder.c"
  $64 = $1; //@line 279 "stream_decoder.c"
  _free($64); //@line 279 "stream_decoder.c"
  $0 = 0; //@line 280 "stream_decoder.c"
  $111 = $0; //@line 302 "stream_decoder.c"
  STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
 }
 $2 = 0; //@line 283 "stream_decoder.c"
 while(1) {
  $65 = $2; //@line 283 "stream_decoder.c"
  $66 = ($65>>>0)<(8); //@line 283 "stream_decoder.c"
  $67 = $1;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  if (!($66)) {
   break;
  }
  $70 = ((($69)) + 60|0); //@line 284 "stream_decoder.c"
  $71 = $2; //@line 284 "stream_decoder.c"
  $72 = (($70) + ($71<<2)|0); //@line 284 "stream_decoder.c"
  HEAP32[$72>>2] = 0; //@line 284 "stream_decoder.c"
  $73 = $1; //@line 285 "stream_decoder.c"
  $74 = ((($73)) + 4|0); //@line 285 "stream_decoder.c"
  $75 = HEAP32[$74>>2]|0; //@line 285 "stream_decoder.c"
  $76 = ((($75)) + 92|0); //@line 285 "stream_decoder.c"
  $77 = $2; //@line 285 "stream_decoder.c"
  $78 = (($76) + ($77<<2)|0); //@line 285 "stream_decoder.c"
  HEAP32[$78>>2] = 0; //@line 285 "stream_decoder.c"
  $79 = $1; //@line 285 "stream_decoder.c"
  $80 = ((($79)) + 4|0); //@line 285 "stream_decoder.c"
  $81 = HEAP32[$80>>2]|0; //@line 285 "stream_decoder.c"
  $82 = ((($81)) + 3616|0); //@line 285 "stream_decoder.c"
  $83 = $2; //@line 285 "stream_decoder.c"
  $84 = (($82) + ($83<<2)|0); //@line 285 "stream_decoder.c"
  HEAP32[$84>>2] = 0; //@line 285 "stream_decoder.c"
  $85 = $2; //@line 283 "stream_decoder.c"
  $86 = (($85) + 1)|0; //@line 283 "stream_decoder.c"
  $2 = $86; //@line 283 "stream_decoder.c"
 }
 $87 = ((($69)) + 220|0); //@line 288 "stream_decoder.c"
 HEAP32[$87>>2] = 0; //@line 288 "stream_decoder.c"
 $88 = $1; //@line 289 "stream_decoder.c"
 $89 = ((($88)) + 4|0); //@line 289 "stream_decoder.c"
 $90 = HEAP32[$89>>2]|0; //@line 289 "stream_decoder.c"
 $91 = ((($90)) + 224|0); //@line 289 "stream_decoder.c"
 HEAP32[$91>>2] = 0; //@line 289 "stream_decoder.c"
 $92 = $1; //@line 290 "stream_decoder.c"
 $93 = ((($92)) + 4|0); //@line 290 "stream_decoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 290 "stream_decoder.c"
 $95 = ((($94)) + 252|0); //@line 290 "stream_decoder.c"
 HEAP32[$95>>2] = 0; //@line 290 "stream_decoder.c"
 $2 = 0; //@line 292 "stream_decoder.c"
 while(1) {
  $96 = $2; //@line 292 "stream_decoder.c"
  $97 = ($96>>>0)<(8); //@line 292 "stream_decoder.c"
  $98 = $1;
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  if (!($97)) {
   break;
  }
  $101 = ((($100)) + 124|0); //@line 293 "stream_decoder.c"
  $102 = $2; //@line 293 "stream_decoder.c"
  $103 = (($101) + (($102*12)|0)|0); //@line 293 "stream_decoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($103); //@line 293 "stream_decoder.c"
  $104 = $2; //@line 292 "stream_decoder.c"
  $105 = (($104) + 1)|0; //@line 292 "stream_decoder.c"
  $2 = $105; //@line 292 "stream_decoder.c"
 }
 $106 = ((($100)) + 52|0); //@line 295 "stream_decoder.c"
 HEAP32[$106>>2] = 0; //@line 295 "stream_decoder.c"
 $107 = $1; //@line 297 "stream_decoder.c"
 _set_defaults_($107); //@line 297 "stream_decoder.c"
 $108 = $1; //@line 299 "stream_decoder.c"
 $109 = HEAP32[$108>>2]|0; //@line 299 "stream_decoder.c"
 HEAP32[$109>>2] = 9; //@line 299 "stream_decoder.c"
 $110 = $1; //@line 301 "stream_decoder.c"
 $0 = $110; //@line 301 "stream_decoder.c"
 $111 = $0; //@line 302 "stream_decoder.c"
 STACKTOP = sp;return ($111|0); //@line 302 "stream_decoder.c"
}
function _set_defaults_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1223 "stream_decoder.c"
 $3 = ((($2)) + 4|0); //@line 1223 "stream_decoder.c"
 $4 = HEAP32[$3>>2]|0; //@line 1223 "stream_decoder.c"
 HEAP32[$4>>2] = 0; //@line 1223 "stream_decoder.c"
 $5 = $1; //@line 1224 "stream_decoder.c"
 $6 = ((($5)) + 4|0); //@line 1224 "stream_decoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1224 "stream_decoder.c"
 $8 = ((($7)) + 4|0); //@line 1224 "stream_decoder.c"
 HEAP32[$8>>2] = 0; //@line 1224 "stream_decoder.c"
 $9 = $1; //@line 1225 "stream_decoder.c"
 $10 = ((($9)) + 4|0); //@line 1225 "stream_decoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 1225 "stream_decoder.c"
 $12 = ((($11)) + 8|0); //@line 1225 "stream_decoder.c"
 HEAP32[$12>>2] = 0; //@line 1225 "stream_decoder.c"
 $13 = $1; //@line 1226 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 1226 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 1226 "stream_decoder.c"
 $16 = ((($15)) + 12|0); //@line 1226 "stream_decoder.c"
 HEAP32[$16>>2] = 0; //@line 1226 "stream_decoder.c"
 $17 = $1; //@line 1227 "stream_decoder.c"
 $18 = ((($17)) + 4|0); //@line 1227 "stream_decoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 1227 "stream_decoder.c"
 $20 = ((($19)) + 16|0); //@line 1227 "stream_decoder.c"
 HEAP32[$20>>2] = 0; //@line 1227 "stream_decoder.c"
 $21 = $1; //@line 1228 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 1228 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 1228 "stream_decoder.c"
 $24 = ((($23)) + 20|0); //@line 1228 "stream_decoder.c"
 HEAP32[$24>>2] = 0; //@line 1228 "stream_decoder.c"
 $25 = $1; //@line 1229 "stream_decoder.c"
 $26 = ((($25)) + 4|0); //@line 1229 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 1229 "stream_decoder.c"
 $28 = ((($27)) + 24|0); //@line 1229 "stream_decoder.c"
 HEAP32[$28>>2] = 0; //@line 1229 "stream_decoder.c"
 $29 = $1; //@line 1230 "stream_decoder.c"
 $30 = ((($29)) + 4|0); //@line 1230 "stream_decoder.c"
 $31 = HEAP32[$30>>2]|0; //@line 1230 "stream_decoder.c"
 $32 = ((($31)) + 28|0); //@line 1230 "stream_decoder.c"
 HEAP32[$32>>2] = 0; //@line 1230 "stream_decoder.c"
 $33 = $1; //@line 1231 "stream_decoder.c"
 $34 = ((($33)) + 4|0); //@line 1231 "stream_decoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 1231 "stream_decoder.c"
 $36 = ((($35)) + 32|0); //@line 1231 "stream_decoder.c"
 HEAP32[$36>>2] = 0; //@line 1231 "stream_decoder.c"
 $37 = $1; //@line 1232 "stream_decoder.c"
 $38 = ((($37)) + 4|0); //@line 1232 "stream_decoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 1232 "stream_decoder.c"
 $40 = ((($39)) + 48|0); //@line 1232 "stream_decoder.c"
 HEAP32[$40>>2] = 0; //@line 1232 "stream_decoder.c"
 $41 = $1; //@line 1234 "stream_decoder.c"
 $42 = ((($41)) + 4|0); //@line 1234 "stream_decoder.c"
 $43 = HEAP32[$42>>2]|0; //@line 1234 "stream_decoder.c"
 $44 = ((($43)) + 608|0); //@line 1234 "stream_decoder.c"
 _memset(($44|0),0,512)|0; //@line 1234 "stream_decoder.c"
 $45 = $1; //@line 1235 "stream_decoder.c"
 $46 = ((($45)) + 4|0); //@line 1235 "stream_decoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 1235 "stream_decoder.c"
 $48 = ((($47)) + 608|0); //@line 1235 "stream_decoder.c"
 HEAP32[$48>>2] = 1; //@line 1235 "stream_decoder.c"
 $49 = $1; //@line 1236 "stream_decoder.c"
 $50 = ((($49)) + 4|0); //@line 1236 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 1236 "stream_decoder.c"
 $52 = ((($51)) + 1124|0); //@line 1236 "stream_decoder.c"
 HEAP32[$52>>2] = 0; //@line 1236 "stream_decoder.c"
 $53 = $1; //@line 1238 "stream_decoder.c"
 $54 = HEAP32[$53>>2]|0; //@line 1238 "stream_decoder.c"
 $55 = ((($54)) + 28|0); //@line 1238 "stream_decoder.c"
 HEAP32[$55>>2] = 0; //@line 1238 "stream_decoder.c"
 STACKTOP = sp;return; //@line 1243 "stream_decoder.c"
}
function _FLAC__stream_decoder_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1; //@line 308 "stream_decoder.c"
 $4 = ($3|0)==(0|0); //@line 308 "stream_decoder.c"
 if ($4) {
  STACKTOP = sp;return; //@line 328 "stream_decoder.c"
 }
 $5 = $1; //@line 315 "stream_decoder.c"
 (_FLAC__stream_decoder_finish($5)|0); //@line 315 "stream_decoder.c"
 $6 = $1; //@line 317 "stream_decoder.c"
 $7 = ((($6)) + 4|0); //@line 317 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 317 "stream_decoder.c"
 $9 = ((($8)) + 1120|0); //@line 317 "stream_decoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 317 "stream_decoder.c"
 $11 = (0|0)!=($10|0); //@line 317 "stream_decoder.c"
 if ($11) {
  $12 = $1; //@line 318 "stream_decoder.c"
  $13 = ((($12)) + 4|0); //@line 318 "stream_decoder.c"
  $14 = HEAP32[$13>>2]|0; //@line 318 "stream_decoder.c"
  $15 = ((($14)) + 1120|0); //@line 318 "stream_decoder.c"
  $16 = HEAP32[$15>>2]|0; //@line 318 "stream_decoder.c"
  _free($16); //@line 318 "stream_decoder.c"
 }
 $17 = $1; //@line 320 "stream_decoder.c"
 $18 = ((($17)) + 4|0); //@line 320 "stream_decoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 320 "stream_decoder.c"
 $20 = ((($19)) + 56|0); //@line 320 "stream_decoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 320 "stream_decoder.c"
 _FLAC__bitreader_delete($21); //@line 320 "stream_decoder.c"
 $2 = 0; //@line 322 "stream_decoder.c"
 while(1) {
  $22 = $2; //@line 322 "stream_decoder.c"
  $23 = ($22>>>0)<(8); //@line 322 "stream_decoder.c"
  $24 = $1;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  if (!($23)) {
   break;
  }
  $27 = ((($26)) + 124|0); //@line 323 "stream_decoder.c"
  $28 = $2; //@line 323 "stream_decoder.c"
  $29 = (($27) + (($28*12)|0)|0); //@line 323 "stream_decoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($29); //@line 323 "stream_decoder.c"
  $30 = $2; //@line 322 "stream_decoder.c"
  $31 = (($30) + 1)|0; //@line 322 "stream_decoder.c"
  $2 = $31; //@line 322 "stream_decoder.c"
 }
 _free($26); //@line 325 "stream_decoder.c"
 $32 = $1; //@line 326 "stream_decoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 326 "stream_decoder.c"
 _free($33); //@line 326 "stream_decoder.c"
 $34 = $1; //@line 327 "stream_decoder.c"
 _free($34); //@line 327 "stream_decoder.c"
 STACKTOP = sp;return; //@line 328 "stream_decoder.c"
}
function _FLAC__stream_decoder_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0; //@line 631 "stream_decoder.c"
 $5 = $2; //@line 638 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 638 "stream_decoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 638 "stream_decoder.c"
 $8 = ($7|0)==(9); //@line 638 "stream_decoder.c"
 if ($8) {
  $1 = 1; //@line 639 "stream_decoder.c"
  $148 = $1; //@line 692 "stream_decoder.c"
  STACKTOP = sp;return ($148|0); //@line 692 "stream_decoder.c"
 }
 $9 = $2; //@line 644 "stream_decoder.c"
 $10 = ((($9)) + 4|0); //@line 644 "stream_decoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 644 "stream_decoder.c"
 $12 = ((($11)) + 3756|0); //@line 644 "stream_decoder.c"
 $13 = $2; //@line 644 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 644 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 644 "stream_decoder.c"
 $16 = ((($15)) + 3660|0); //@line 644 "stream_decoder.c"
 _FLAC__MD5Final($12,$16); //@line 644 "stream_decoder.c"
 $17 = $2; //@line 646 "stream_decoder.c"
 $18 = ((($17)) + 4|0); //@line 646 "stream_decoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 646 "stream_decoder.c"
 $20 = ((($19)) + 432|0); //@line 646 "stream_decoder.c"
 $21 = ((($20)) + 16|0); //@line 646 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 646 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 646 "stream_decoder.c"
 _free($23); //@line 646 "stream_decoder.c"
 $24 = $2; //@line 647 "stream_decoder.c"
 $25 = ((($24)) + 4|0); //@line 647 "stream_decoder.c"
 $26 = HEAP32[$25>>2]|0; //@line 647 "stream_decoder.c"
 $27 = ((($26)) + 432|0); //@line 647 "stream_decoder.c"
 $28 = ((($27)) + 16|0); //@line 647 "stream_decoder.c"
 $29 = ((($28)) + 4|0); //@line 647 "stream_decoder.c"
 HEAP32[$29>>2] = 0; //@line 647 "stream_decoder.c"
 $30 = $2; //@line 648 "stream_decoder.c"
 $31 = ((($30)) + 4|0); //@line 648 "stream_decoder.c"
 $32 = HEAP32[$31>>2]|0; //@line 648 "stream_decoder.c"
 $33 = ((($32)) + 252|0); //@line 648 "stream_decoder.c"
 HEAP32[$33>>2] = 0; //@line 648 "stream_decoder.c"
 $34 = $2; //@line 650 "stream_decoder.c"
 $35 = ((($34)) + 4|0); //@line 650 "stream_decoder.c"
 $36 = HEAP32[$35>>2]|0; //@line 650 "stream_decoder.c"
 $37 = ((($36)) + 56|0); //@line 650 "stream_decoder.c"
 $38 = HEAP32[$37>>2]|0; //@line 650 "stream_decoder.c"
 _FLAC__bitreader_free($38); //@line 650 "stream_decoder.c"
 $4 = 0; //@line 651 "stream_decoder.c"
 while(1) {
  $39 = $4; //@line 651 "stream_decoder.c"
  $40 = ($39>>>0)<(8); //@line 651 "stream_decoder.c"
  $41 = $2;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  if (!($40)) {
   break;
  }
  $44 = ((($43)) + 60|0); //@line 658 "stream_decoder.c"
  $45 = $4; //@line 658 "stream_decoder.c"
  $46 = (($44) + ($45<<2)|0); //@line 658 "stream_decoder.c"
  $47 = HEAP32[$46>>2]|0; //@line 658 "stream_decoder.c"
  $48 = (0|0)!=($47|0); //@line 658 "stream_decoder.c"
  if ($48) {
   $49 = $2; //@line 659 "stream_decoder.c"
   $50 = ((($49)) + 4|0); //@line 659 "stream_decoder.c"
   $51 = HEAP32[$50>>2]|0; //@line 659 "stream_decoder.c"
   $52 = ((($51)) + 60|0); //@line 659 "stream_decoder.c"
   $53 = $4; //@line 659 "stream_decoder.c"
   $54 = (($52) + ($53<<2)|0); //@line 659 "stream_decoder.c"
   $55 = HEAP32[$54>>2]|0; //@line 659 "stream_decoder.c"
   $56 = ((($55)) + -16|0); //@line 659 "stream_decoder.c"
   _free($56); //@line 659 "stream_decoder.c"
   $57 = $2; //@line 660 "stream_decoder.c"
   $58 = ((($57)) + 4|0); //@line 660 "stream_decoder.c"
   $59 = HEAP32[$58>>2]|0; //@line 660 "stream_decoder.c"
   $60 = ((($59)) + 60|0); //@line 660 "stream_decoder.c"
   $61 = $4; //@line 660 "stream_decoder.c"
   $62 = (($60) + ($61<<2)|0); //@line 660 "stream_decoder.c"
   HEAP32[$62>>2] = 0; //@line 660 "stream_decoder.c"
  }
  $63 = $2; //@line 662 "stream_decoder.c"
  $64 = ((($63)) + 4|0); //@line 662 "stream_decoder.c"
  $65 = HEAP32[$64>>2]|0; //@line 662 "stream_decoder.c"
  $66 = ((($65)) + 3616|0); //@line 662 "stream_decoder.c"
  $67 = $4; //@line 662 "stream_decoder.c"
  $68 = (($66) + ($67<<2)|0); //@line 662 "stream_decoder.c"
  $69 = HEAP32[$68>>2]|0; //@line 662 "stream_decoder.c"
  $70 = (0|0)!=($69|0); //@line 662 "stream_decoder.c"
  if ($70) {
   $71 = $2; //@line 663 "stream_decoder.c"
   $72 = ((($71)) + 4|0); //@line 663 "stream_decoder.c"
   $73 = HEAP32[$72>>2]|0; //@line 663 "stream_decoder.c"
   $74 = ((($73)) + 3616|0); //@line 663 "stream_decoder.c"
   $75 = $4; //@line 663 "stream_decoder.c"
   $76 = (($74) + ($75<<2)|0); //@line 663 "stream_decoder.c"
   $77 = HEAP32[$76>>2]|0; //@line 663 "stream_decoder.c"
   _free($77); //@line 663 "stream_decoder.c"
   $78 = $2; //@line 664 "stream_decoder.c"
   $79 = ((($78)) + 4|0); //@line 664 "stream_decoder.c"
   $80 = HEAP32[$79>>2]|0; //@line 664 "stream_decoder.c"
   $81 = ((($80)) + 92|0); //@line 664 "stream_decoder.c"
   $82 = $4; //@line 664 "stream_decoder.c"
   $83 = (($81) + ($82<<2)|0); //@line 664 "stream_decoder.c"
   HEAP32[$83>>2] = 0; //@line 664 "stream_decoder.c"
   $84 = $2; //@line 664 "stream_decoder.c"
   $85 = ((($84)) + 4|0); //@line 664 "stream_decoder.c"
   $86 = HEAP32[$85>>2]|0; //@line 664 "stream_decoder.c"
   $87 = ((($86)) + 3616|0); //@line 664 "stream_decoder.c"
   $88 = $4; //@line 664 "stream_decoder.c"
   $89 = (($87) + ($88<<2)|0); //@line 664 "stream_decoder.c"
   HEAP32[$89>>2] = 0; //@line 664 "stream_decoder.c"
  }
  $90 = $4; //@line 651 "stream_decoder.c"
  $91 = (($90) + 1)|0; //@line 651 "stream_decoder.c"
  $4 = $91; //@line 651 "stream_decoder.c"
 }
 $92 = ((($43)) + 220|0); //@line 667 "stream_decoder.c"
 HEAP32[$92>>2] = 0; //@line 667 "stream_decoder.c"
 $93 = $2; //@line 668 "stream_decoder.c"
 $94 = ((($93)) + 4|0); //@line 668 "stream_decoder.c"
 $95 = HEAP32[$94>>2]|0; //@line 668 "stream_decoder.c"
 $96 = ((($95)) + 224|0); //@line 668 "stream_decoder.c"
 HEAP32[$96>>2] = 0; //@line 668 "stream_decoder.c"
 $97 = $2; //@line 675 "stream_decoder.c"
 $98 = ((($97)) + 4|0); //@line 675 "stream_decoder.c"
 $99 = HEAP32[$98>>2]|0; //@line 675 "stream_decoder.c"
 $100 = ((($99)) + 52|0); //@line 675 "stream_decoder.c"
 $101 = HEAP32[$100>>2]|0; //@line 675 "stream_decoder.c"
 $102 = (0|0)!=($101|0); //@line 675 "stream_decoder.c"
 if ($102) {
  $103 = $2; //@line 676 "stream_decoder.c"
  $104 = ((($103)) + 4|0); //@line 676 "stream_decoder.c"
  $105 = HEAP32[$104>>2]|0; //@line 676 "stream_decoder.c"
  $106 = ((($105)) + 52|0); //@line 676 "stream_decoder.c"
  $107 = HEAP32[$106>>2]|0; //@line 676 "stream_decoder.c"
  $108 = HEAP32[380]|0; //@line 676 "stream_decoder.c"
  $109 = ($107|0)!=($108|0); //@line 676 "stream_decoder.c"
  if ($109) {
   $110 = $2; //@line 677 "stream_decoder.c"
   $111 = ((($110)) + 4|0); //@line 677 "stream_decoder.c"
   $112 = HEAP32[$111>>2]|0; //@line 677 "stream_decoder.c"
   $113 = ((($112)) + 52|0); //@line 677 "stream_decoder.c"
   $114 = HEAP32[$113>>2]|0; //@line 677 "stream_decoder.c"
   (_fclose($114)|0); //@line 677 "stream_decoder.c"
  }
  $115 = $2; //@line 678 "stream_decoder.c"
  $116 = ((($115)) + 4|0); //@line 678 "stream_decoder.c"
  $117 = HEAP32[$116>>2]|0; //@line 678 "stream_decoder.c"
  $118 = ((($117)) + 52|0); //@line 678 "stream_decoder.c"
  HEAP32[$118>>2] = 0; //@line 678 "stream_decoder.c"
 }
 $119 = $2; //@line 681 "stream_decoder.c"
 $120 = ((($119)) + 4|0); //@line 681 "stream_decoder.c"
 $121 = HEAP32[$120>>2]|0; //@line 681 "stream_decoder.c"
 $122 = ((($121)) + 3648|0); //@line 681 "stream_decoder.c"
 $123 = HEAP32[$122>>2]|0; //@line 681 "stream_decoder.c"
 $124 = ($123|0)!=(0); //@line 681 "stream_decoder.c"
 if ($124) {
  $125 = $2; //@line 682 "stream_decoder.c"
  $126 = ((($125)) + 4|0); //@line 682 "stream_decoder.c"
  $127 = HEAP32[$126>>2]|0; //@line 682 "stream_decoder.c"
  $128 = ((($127)) + 256|0); //@line 682 "stream_decoder.c"
  $129 = ((($128)) + 16|0); //@line 682 "stream_decoder.c"
  $130 = ((($129)) + 40|0); //@line 682 "stream_decoder.c"
  $131 = $2; //@line 682 "stream_decoder.c"
  $132 = ((($131)) + 4|0); //@line 682 "stream_decoder.c"
  $133 = HEAP32[$132>>2]|0; //@line 682 "stream_decoder.c"
  $134 = ((($133)) + 3756|0); //@line 682 "stream_decoder.c"
  $135 = (_memcmp($130,$134,16)|0); //@line 682 "stream_decoder.c"
  $136 = ($135|0)!=(0); //@line 682 "stream_decoder.c"
  if ($136) {
   $3 = 1; //@line 683 "stream_decoder.c"
  }
 }
 $137 = $2; //@line 685 "stream_decoder.c"
 $138 = ((($137)) + 4|0); //@line 685 "stream_decoder.c"
 $139 = HEAP32[$138>>2]|0; //@line 685 "stream_decoder.c"
 $140 = ((($139)) + 3656|0); //@line 685 "stream_decoder.c"
 HEAP32[$140>>2] = 0; //@line 685 "stream_decoder.c"
 $141 = $2; //@line 687 "stream_decoder.c"
 _set_defaults_($141); //@line 687 "stream_decoder.c"
 $142 = $2; //@line 689 "stream_decoder.c"
 $143 = HEAP32[$142>>2]|0; //@line 689 "stream_decoder.c"
 HEAP32[$143>>2] = 9; //@line 689 "stream_decoder.c"
 $144 = $3; //@line 691 "stream_decoder.c"
 $145 = ($144|0)!=(0); //@line 691 "stream_decoder.c"
 $146 = $145 ^ 1; //@line 691 "stream_decoder.c"
 $147 = $146&1; //@line 691 "stream_decoder.c"
 $1 = $147; //@line 691 "stream_decoder.c"
 $148 = $1; //@line 692 "stream_decoder.c"
 STACKTOP = sp;return ($148|0); //@line 692 "stream_decoder.c"
}
function _FLAC__stream_decoder_init_stream($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $10; //@line 462 "stream_decoder.c"
 $21 = $11; //@line 463 "stream_decoder.c"
 $22 = $12; //@line 464 "stream_decoder.c"
 $23 = $13; //@line 465 "stream_decoder.c"
 $24 = $14; //@line 466 "stream_decoder.c"
 $25 = $15; //@line 467 "stream_decoder.c"
 $26 = $16; //@line 468 "stream_decoder.c"
 $27 = $17; //@line 469 "stream_decoder.c"
 $28 = $18; //@line 470 "stream_decoder.c"
 $29 = $19; //@line 471 "stream_decoder.c"
 $30 = (_init_stream_internal_($20,$21,$22,$23,$24,$25,$26,$27,$28,$29,0)|0); //@line 461 "stream_decoder.c"
 STACKTOP = sp;return ($30|0); //@line 461 "stream_decoder.c"
}
function _init_stream_internal_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $12; //@line 352 "stream_decoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 352 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 352 "stream_decoder.c"
 $26 = ($25|0)!=(9); //@line 352 "stream_decoder.c"
 if ($26) {
  $11 = 5; //@line 353 "stream_decoder.c"
  $157 = $11; //@line 446 "stream_decoder.c"
  STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
 }
 $27 = $22; //@line 355 "stream_decoder.c"
 $28 = ($27|0)!=(0); //@line 355 "stream_decoder.c"
 if ($28) {
  $11 = 1; //@line 356 "stream_decoder.c"
  $157 = $11; //@line 446 "stream_decoder.c"
  STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
 }
 $29 = $13; //@line 359 "stream_decoder.c"
 $30 = (0|0)==($29|0); //@line 359 "stream_decoder.c"
 $31 = $18; //@line 360 "stream_decoder.c"
 $32 = (0|0)==($31|0); //@line 360 "stream_decoder.c"
 $or$cond = $30 | $32; //@line 359 "stream_decoder.c"
 $33 = $20; //@line 361 "stream_decoder.c"
 $34 = (0|0)==($33|0); //@line 361 "stream_decoder.c"
 $or$cond3 = $or$cond | $34; //@line 359 "stream_decoder.c"
 do {
  if (!($or$cond3)) {
   $35 = $14; //@line 362 "stream_decoder.c"
   $36 = ($35|0)!=(0|0); //@line 362 "stream_decoder.c"
   if ($36) {
    $37 = $15; //@line 362 "stream_decoder.c"
    $38 = (0|0)==($37|0); //@line 362 "stream_decoder.c"
    $39 = $16; //@line 362 "stream_decoder.c"
    $40 = (0|0)==($39|0); //@line 362 "stream_decoder.c"
    $or$cond5 = $38 | $40; //@line 362 "stream_decoder.c"
    $41 = $17; //@line 362 "stream_decoder.c"
    $42 = (0|0)==($41|0); //@line 362 "stream_decoder.c"
    $or$cond7 = $or$cond5 | $42; //@line 362 "stream_decoder.c"
    if ($or$cond7) {
     break;
    }
   }
   $43 = $12; //@line 375 "stream_decoder.c"
   $44 = ((($43)) + 4|0); //@line 375 "stream_decoder.c"
   $45 = HEAP32[$44>>2]|0; //@line 375 "stream_decoder.c"
   $46 = ((($45)) + 3524|0); //@line 375 "stream_decoder.c"
   _FLAC__cpu_info($46); //@line 375 "stream_decoder.c"
   $47 = $12; //@line 377 "stream_decoder.c"
   $48 = ((($47)) + 4|0); //@line 377 "stream_decoder.c"
   $49 = HEAP32[$48>>2]|0; //@line 377 "stream_decoder.c"
   $50 = ((($49)) + 36|0); //@line 377 "stream_decoder.c"
   HEAP32[$50>>2] = 11; //@line 377 "stream_decoder.c"
   $51 = $12; //@line 378 "stream_decoder.c"
   $52 = ((($51)) + 4|0); //@line 378 "stream_decoder.c"
   $53 = HEAP32[$52>>2]|0; //@line 378 "stream_decoder.c"
   $54 = ((($53)) + 40|0); //@line 378 "stream_decoder.c"
   HEAP32[$54>>2] = 12; //@line 378 "stream_decoder.c"
   $55 = $12; //@line 379 "stream_decoder.c"
   $56 = ((($55)) + 4|0); //@line 379 "stream_decoder.c"
   $57 = HEAP32[$56>>2]|0; //@line 379 "stream_decoder.c"
   $58 = ((($57)) + 44|0); //@line 379 "stream_decoder.c"
   HEAP32[$58>>2] = 11; //@line 379 "stream_decoder.c"
   $59 = $12; //@line 417 "stream_decoder.c"
   $60 = ((($59)) + 4|0); //@line 417 "stream_decoder.c"
   $61 = HEAP32[$60>>2]|0; //@line 417 "stream_decoder.c"
   $62 = ((($61)) + 56|0); //@line 417 "stream_decoder.c"
   $63 = HEAP32[$62>>2]|0; //@line 417 "stream_decoder.c"
   $64 = $12; //@line 417 "stream_decoder.c"
   $65 = (_FLAC__bitreader_init($63,13,$64)|0); //@line 417 "stream_decoder.c"
   $66 = ($65|0)!=(0); //@line 417 "stream_decoder.c"
   if (!($66)) {
    $67 = $12; //@line 418 "stream_decoder.c"
    $68 = HEAP32[$67>>2]|0; //@line 418 "stream_decoder.c"
    HEAP32[$68>>2] = 8; //@line 418 "stream_decoder.c"
    $11 = 3; //@line 419 "stream_decoder.c"
    $157 = $11; //@line 446 "stream_decoder.c"
    STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
   }
   $69 = $13; //@line 422 "stream_decoder.c"
   $70 = $12; //@line 422 "stream_decoder.c"
   $71 = ((($70)) + 4|0); //@line 422 "stream_decoder.c"
   $72 = HEAP32[$71>>2]|0; //@line 422 "stream_decoder.c"
   $73 = ((($72)) + 4|0); //@line 422 "stream_decoder.c"
   HEAP32[$73>>2] = $69; //@line 422 "stream_decoder.c"
   $74 = $14; //@line 423 "stream_decoder.c"
   $75 = $12; //@line 423 "stream_decoder.c"
   $76 = ((($75)) + 4|0); //@line 423 "stream_decoder.c"
   $77 = HEAP32[$76>>2]|0; //@line 423 "stream_decoder.c"
   $78 = ((($77)) + 8|0); //@line 423 "stream_decoder.c"
   HEAP32[$78>>2] = $74; //@line 423 "stream_decoder.c"
   $79 = $15; //@line 424 "stream_decoder.c"
   $80 = $12; //@line 424 "stream_decoder.c"
   $81 = ((($80)) + 4|0); //@line 424 "stream_decoder.c"
   $82 = HEAP32[$81>>2]|0; //@line 424 "stream_decoder.c"
   $83 = ((($82)) + 12|0); //@line 424 "stream_decoder.c"
   HEAP32[$83>>2] = $79; //@line 424 "stream_decoder.c"
   $84 = $16; //@line 425 "stream_decoder.c"
   $85 = $12; //@line 425 "stream_decoder.c"
   $86 = ((($85)) + 4|0); //@line 425 "stream_decoder.c"
   $87 = HEAP32[$86>>2]|0; //@line 425 "stream_decoder.c"
   $88 = ((($87)) + 16|0); //@line 425 "stream_decoder.c"
   HEAP32[$88>>2] = $84; //@line 425 "stream_decoder.c"
   $89 = $17; //@line 426 "stream_decoder.c"
   $90 = $12; //@line 426 "stream_decoder.c"
   $91 = ((($90)) + 4|0); //@line 426 "stream_decoder.c"
   $92 = HEAP32[$91>>2]|0; //@line 426 "stream_decoder.c"
   $93 = ((($92)) + 20|0); //@line 426 "stream_decoder.c"
   HEAP32[$93>>2] = $89; //@line 426 "stream_decoder.c"
   $94 = $18; //@line 427 "stream_decoder.c"
   $95 = $12; //@line 427 "stream_decoder.c"
   $96 = ((($95)) + 4|0); //@line 427 "stream_decoder.c"
   $97 = HEAP32[$96>>2]|0; //@line 427 "stream_decoder.c"
   $98 = ((($97)) + 24|0); //@line 427 "stream_decoder.c"
   HEAP32[$98>>2] = $94; //@line 427 "stream_decoder.c"
   $99 = $19; //@line 428 "stream_decoder.c"
   $100 = $12; //@line 428 "stream_decoder.c"
   $101 = ((($100)) + 4|0); //@line 428 "stream_decoder.c"
   $102 = HEAP32[$101>>2]|0; //@line 428 "stream_decoder.c"
   $103 = ((($102)) + 28|0); //@line 428 "stream_decoder.c"
   HEAP32[$103>>2] = $99; //@line 428 "stream_decoder.c"
   $104 = $20; //@line 429 "stream_decoder.c"
   $105 = $12; //@line 429 "stream_decoder.c"
   $106 = ((($105)) + 4|0); //@line 429 "stream_decoder.c"
   $107 = HEAP32[$106>>2]|0; //@line 429 "stream_decoder.c"
   $108 = ((($107)) + 32|0); //@line 429 "stream_decoder.c"
   HEAP32[$108>>2] = $104; //@line 429 "stream_decoder.c"
   $109 = $21; //@line 430 "stream_decoder.c"
   $110 = $12; //@line 430 "stream_decoder.c"
   $111 = ((($110)) + 4|0); //@line 430 "stream_decoder.c"
   $112 = HEAP32[$111>>2]|0; //@line 430 "stream_decoder.c"
   $113 = ((($112)) + 48|0); //@line 430 "stream_decoder.c"
   HEAP32[$113>>2] = $109; //@line 430 "stream_decoder.c"
   $114 = $12; //@line 431 "stream_decoder.c"
   $115 = ((($114)) + 4|0); //@line 431 "stream_decoder.c"
   $116 = HEAP32[$115>>2]|0; //@line 431 "stream_decoder.c"
   $117 = ((($116)) + 232|0); //@line 431 "stream_decoder.c"
   HEAP32[$117>>2] = 0; //@line 431 "stream_decoder.c"
   $118 = $12; //@line 431 "stream_decoder.c"
   $119 = ((($118)) + 4|0); //@line 431 "stream_decoder.c"
   $120 = HEAP32[$119>>2]|0; //@line 431 "stream_decoder.c"
   $121 = ((($120)) + 228|0); //@line 431 "stream_decoder.c"
   HEAP32[$121>>2] = 0; //@line 431 "stream_decoder.c"
   $122 = $12; //@line 432 "stream_decoder.c"
   $123 = ((($122)) + 4|0); //@line 432 "stream_decoder.c"
   $124 = HEAP32[$123>>2]|0; //@line 432 "stream_decoder.c"
   $125 = ((($124)) + 240|0); //@line 432 "stream_decoder.c"
   $126 = $125; //@line 432 "stream_decoder.c"
   $127 = $126; //@line 432 "stream_decoder.c"
   HEAP32[$127>>2] = 0; //@line 432 "stream_decoder.c"
   $128 = (($126) + 4)|0; //@line 432 "stream_decoder.c"
   $129 = $128; //@line 432 "stream_decoder.c"
   HEAP32[$129>>2] = 0; //@line 432 "stream_decoder.c"
   $130 = $12; //@line 433 "stream_decoder.c"
   $131 = ((($130)) + 4|0); //@line 433 "stream_decoder.c"
   $132 = HEAP32[$131>>2]|0; //@line 433 "stream_decoder.c"
   $133 = ((($132)) + 248|0); //@line 433 "stream_decoder.c"
   HEAP32[$133>>2] = 0; //@line 433 "stream_decoder.c"
   $134 = $12; //@line 434 "stream_decoder.c"
   $135 = ((($134)) + 4|0); //@line 434 "stream_decoder.c"
   $136 = HEAP32[$135>>2]|0; //@line 434 "stream_decoder.c"
   $137 = ((($136)) + 3520|0); //@line 434 "stream_decoder.c"
   HEAP32[$137>>2] = 0; //@line 434 "stream_decoder.c"
   $138 = $12; //@line 436 "stream_decoder.c"
   $139 = HEAP32[$138>>2]|0; //@line 436 "stream_decoder.c"
   $140 = ((($139)) + 28|0); //@line 436 "stream_decoder.c"
   $141 = HEAP32[$140>>2]|0; //@line 436 "stream_decoder.c"
   $142 = $12; //@line 436 "stream_decoder.c"
   $143 = ((($142)) + 4|0); //@line 436 "stream_decoder.c"
   $144 = HEAP32[$143>>2]|0; //@line 436 "stream_decoder.c"
   $145 = ((($144)) + 3648|0); //@line 436 "stream_decoder.c"
   HEAP32[$145>>2] = $141; //@line 436 "stream_decoder.c"
   $146 = $12; //@line 437 "stream_decoder.c"
   $147 = ((($146)) + 4|0); //@line 437 "stream_decoder.c"
   $148 = HEAP32[$147>>2]|0; //@line 437 "stream_decoder.c"
   $149 = ((($148)) + 3656|0); //@line 437 "stream_decoder.c"
   HEAP32[$149>>2] = 0; //@line 437 "stream_decoder.c"
   $150 = $12; //@line 439 "stream_decoder.c"
   $151 = ((($150)) + 4|0); //@line 439 "stream_decoder.c"
   $152 = HEAP32[$151>>2]|0; //@line 439 "stream_decoder.c"
   $153 = ((($152)) + 3652|0); //@line 439 "stream_decoder.c"
   HEAP32[$153>>2] = 1; //@line 439 "stream_decoder.c"
   $154 = $12; //@line 440 "stream_decoder.c"
   $155 = (_FLAC__stream_decoder_reset($154)|0); //@line 440 "stream_decoder.c"
   $156 = ($155|0)!=(0); //@line 440 "stream_decoder.c"
   if ($156) {
    $11 = 0; //@line 445 "stream_decoder.c"
    $157 = $11; //@line 446 "stream_decoder.c"
    STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
   } else {
    $11 = 3; //@line 442 "stream_decoder.c"
    $157 = $11; //@line 446 "stream_decoder.c"
    STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
   }
  }
 } while(0);
 $11 = 2; //@line 364 "stream_decoder.c"
 $157 = $11; //@line 446 "stream_decoder.c"
 STACKTOP = sp;return ($157|0); //@line 446 "stream_decoder.c"
}
function _read_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6; //@line 2809 "stream_decoder.c"
 $7 = $9; //@line 2809 "stream_decoder.c"
 $10 = $7; //@line 2816 "stream_decoder.c"
 $11 = ((($10)) + 4|0); //@line 2816 "stream_decoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 2816 "stream_decoder.c"
 $13 = ((($12)) + 20|0); //@line 2816 "stream_decoder.c"
 $14 = HEAP32[$13>>2]|0; //@line 2816 "stream_decoder.c"
 $15 = ($14|0)!=(0|0); //@line 2816 "stream_decoder.c"
 if ($15) {
  $16 = $7; //@line 2816 "stream_decoder.c"
  $17 = ((($16)) + 4|0); //@line 2816 "stream_decoder.c"
  $18 = HEAP32[$17>>2]|0; //@line 2816 "stream_decoder.c"
  $19 = ((($18)) + 20|0); //@line 2816 "stream_decoder.c"
  $20 = HEAP32[$19>>2]|0; //@line 2816 "stream_decoder.c"
  $21 = $7; //@line 2816 "stream_decoder.c"
  $22 = $7; //@line 2816 "stream_decoder.c"
  $23 = ((($22)) + 4|0); //@line 2816 "stream_decoder.c"
  $24 = HEAP32[$23>>2]|0; //@line 2816 "stream_decoder.c"
  $25 = ((($24)) + 48|0); //@line 2816 "stream_decoder.c"
  $26 = HEAP32[$25>>2]|0; //@line 2816 "stream_decoder.c"
  $27 = (FUNCTION_TABLE_iii[$20 & 15]($21,$26)|0); //@line 2816 "stream_decoder.c"
  $28 = ($27|0)!=(0); //@line 2816 "stream_decoder.c"
  if ($28) {
   $29 = $5; //@line 2818 "stream_decoder.c"
   HEAP32[$29>>2] = 0; //@line 2818 "stream_decoder.c"
   $30 = $7; //@line 2819 "stream_decoder.c"
   $31 = HEAP32[$30>>2]|0; //@line 2819 "stream_decoder.c"
   HEAP32[$31>>2] = 4; //@line 2819 "stream_decoder.c"
   $3 = 0; //@line 2820 "stream_decoder.c"
   $94 = $3; //@line 2885 "stream_decoder.c"
   STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
  }
 }
 $32 = $5; //@line 2822 "stream_decoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 2822 "stream_decoder.c"
 $34 = ($33>>>0)>(0); //@line 2822 "stream_decoder.c"
 $35 = $7;
 if (!($34)) {
  $93 = HEAP32[$35>>2]|0; //@line 2872 "stream_decoder.c"
  HEAP32[$93>>2] = 7; //@line 2872 "stream_decoder.c"
  $3 = 0; //@line 2873 "stream_decoder.c"
  $94 = $3; //@line 2885 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
 }
 $36 = ((($35)) + 4|0); //@line 2833 "stream_decoder.c"
 $37 = HEAP32[$36>>2]|0; //@line 2833 "stream_decoder.c"
 $38 = ((($37)) + 3656|0); //@line 2833 "stream_decoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 2833 "stream_decoder.c"
 $40 = ($39|0)!=(0); //@line 2833 "stream_decoder.c"
 if ($40) {
  $41 = $7; //@line 2833 "stream_decoder.c"
  $42 = ((($41)) + 4|0); //@line 2833 "stream_decoder.c"
  $43 = HEAP32[$42>>2]|0; //@line 2833 "stream_decoder.c"
  $44 = ((($43)) + 6176|0); //@line 2833 "stream_decoder.c"
  $45 = HEAP32[$44>>2]|0; //@line 2833 "stream_decoder.c"
  $46 = ($45>>>0)>(20); //@line 2833 "stream_decoder.c"
  if ($46) {
   $47 = $7; //@line 2834 "stream_decoder.c"
   $48 = HEAP32[$47>>2]|0; //@line 2834 "stream_decoder.c"
   HEAP32[$48>>2] = 7; //@line 2834 "stream_decoder.c"
   $3 = 0; //@line 2835 "stream_decoder.c"
   $94 = $3; //@line 2885 "stream_decoder.c"
   STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
  }
 }
 $49 = $7; //@line 2843 "stream_decoder.c"
 $50 = ((($49)) + 4|0); //@line 2843 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 2843 "stream_decoder.c"
 $52 = ((($51)) + 4|0); //@line 2843 "stream_decoder.c"
 $53 = HEAP32[$52>>2]|0; //@line 2843 "stream_decoder.c"
 $54 = $7; //@line 2843 "stream_decoder.c"
 $55 = $4; //@line 2843 "stream_decoder.c"
 $56 = $5; //@line 2843 "stream_decoder.c"
 $57 = $7; //@line 2843 "stream_decoder.c"
 $58 = ((($57)) + 4|0); //@line 2843 "stream_decoder.c"
 $59 = HEAP32[$58>>2]|0; //@line 2843 "stream_decoder.c"
 $60 = ((($59)) + 48|0); //@line 2843 "stream_decoder.c"
 $61 = HEAP32[$60>>2]|0; //@line 2843 "stream_decoder.c"
 $62 = (FUNCTION_TABLE_iiiii[$53 & 31]($54,$55,$56,$61)|0); //@line 2843 "stream_decoder.c"
 $8 = $62; //@line 2838 "stream_decoder.c"
 $63 = $8; //@line 2845 "stream_decoder.c"
 $64 = ($63|0)==(2); //@line 2845 "stream_decoder.c"
 if ($64) {
  $65 = $7; //@line 2846 "stream_decoder.c"
  $66 = HEAP32[$65>>2]|0; //@line 2846 "stream_decoder.c"
  HEAP32[$66>>2] = 7; //@line 2846 "stream_decoder.c"
  $3 = 0; //@line 2847 "stream_decoder.c"
  $94 = $3; //@line 2885 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
 }
 $67 = $5; //@line 2849 "stream_decoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 2849 "stream_decoder.c"
 $69 = ($68|0)==(0); //@line 2849 "stream_decoder.c"
 if (!($69)) {
  $3 = 1; //@line 2867 "stream_decoder.c"
  $94 = $3; //@line 2885 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
 }
 $70 = $8; //@line 2851 "stream_decoder.c"
 $71 = ($70|0)==(1); //@line 2851 "stream_decoder.c"
 do {
  if (!($71)) {
   $72 = $7; //@line 2857 "stream_decoder.c"
   $73 = ((($72)) + 4|0); //@line 2857 "stream_decoder.c"
   $74 = HEAP32[$73>>2]|0; //@line 2857 "stream_decoder.c"
   $75 = ((($74)) + 20|0); //@line 2857 "stream_decoder.c"
   $76 = HEAP32[$75>>2]|0; //@line 2857 "stream_decoder.c"
   $77 = ($76|0)!=(0|0); //@line 2857 "stream_decoder.c"
   if ($77) {
    $78 = $7; //@line 2857 "stream_decoder.c"
    $79 = ((($78)) + 4|0); //@line 2857 "stream_decoder.c"
    $80 = HEAP32[$79>>2]|0; //@line 2857 "stream_decoder.c"
    $81 = ((($80)) + 20|0); //@line 2857 "stream_decoder.c"
    $82 = HEAP32[$81>>2]|0; //@line 2857 "stream_decoder.c"
    $83 = $7; //@line 2857 "stream_decoder.c"
    $84 = $7; //@line 2857 "stream_decoder.c"
    $85 = ((($84)) + 4|0); //@line 2857 "stream_decoder.c"
    $86 = HEAP32[$85>>2]|0; //@line 2857 "stream_decoder.c"
    $87 = ((($86)) + 48|0); //@line 2857 "stream_decoder.c"
    $88 = HEAP32[$87>>2]|0; //@line 2857 "stream_decoder.c"
    $89 = (FUNCTION_TABLE_iii[$82 & 15]($83,$88)|0); //@line 2857 "stream_decoder.c"
    $90 = ($89|0)!=(0); //@line 2857 "stream_decoder.c"
    if ($90) {
     break;
    }
   }
   $3 = 1; //@line 2864 "stream_decoder.c"
   $94 = $3; //@line 2885 "stream_decoder.c"
   STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
  }
 } while(0);
 $91 = $7; //@line 2860 "stream_decoder.c"
 $92 = HEAP32[$91>>2]|0; //@line 2860 "stream_decoder.c"
 HEAP32[$92>>2] = 4; //@line 2860 "stream_decoder.c"
 $3 = 0; //@line 2861 "stream_decoder.c"
 $94 = $3; //@line 2885 "stream_decoder.c"
 STACKTOP = sp;return ($94|0); //@line 2885 "stream_decoder.c"
}
function _FLAC__stream_decoder_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 951 "stream_decoder.c"
 $4 = (_FLAC__stream_decoder_flush($3)|0); //@line 951 "stream_decoder.c"
 $5 = ($4|0)!=(0); //@line 951 "stream_decoder.c"
 if (!($5)) {
  $1 = 0; //@line 953 "stream_decoder.c"
  $94 = $1; //@line 1003 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1003 "stream_decoder.c"
 }
 $6 = $2; //@line 967 "stream_decoder.c"
 $7 = ((($6)) + 4|0); //@line 967 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 967 "stream_decoder.c"
 $9 = ((($8)) + 3652|0); //@line 967 "stream_decoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 967 "stream_decoder.c"
 $11 = ($10|0)!=(0); //@line 967 "stream_decoder.c"
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $38 = ((($14)) + 3652|0); //@line 974 "stream_decoder.c"
  HEAP32[$38>>2] = 0; //@line 974 "stream_decoder.c"
 } else {
  $15 = ((($14)) + 52|0); //@line 968 "stream_decoder.c"
  $16 = HEAP32[$15>>2]|0; //@line 968 "stream_decoder.c"
  $17 = HEAP32[380]|0; //@line 968 "stream_decoder.c"
  $18 = ($16|0)==($17|0); //@line 968 "stream_decoder.c"
  if ($18) {
   $1 = 0; //@line 969 "stream_decoder.c"
   $94 = $1; //@line 1003 "stream_decoder.c"
   STACKTOP = sp;return ($94|0); //@line 1003 "stream_decoder.c"
  }
  $19 = $2; //@line 970 "stream_decoder.c"
  $20 = ((($19)) + 4|0); //@line 970 "stream_decoder.c"
  $21 = HEAP32[$20>>2]|0; //@line 970 "stream_decoder.c"
  $22 = ((($21)) + 8|0); //@line 970 "stream_decoder.c"
  $23 = HEAP32[$22>>2]|0; //@line 970 "stream_decoder.c"
  $24 = ($23|0)!=(0|0); //@line 970 "stream_decoder.c"
  if ($24) {
   $25 = $2; //@line 970 "stream_decoder.c"
   $26 = ((($25)) + 4|0); //@line 970 "stream_decoder.c"
   $27 = HEAP32[$26>>2]|0; //@line 970 "stream_decoder.c"
   $28 = ((($27)) + 8|0); //@line 970 "stream_decoder.c"
   $29 = HEAP32[$28>>2]|0; //@line 970 "stream_decoder.c"
   $30 = $2; //@line 970 "stream_decoder.c"
   $31 = $2; //@line 970 "stream_decoder.c"
   $32 = ((($31)) + 4|0); //@line 970 "stream_decoder.c"
   $33 = HEAP32[$32>>2]|0; //@line 970 "stream_decoder.c"
   $34 = ((($33)) + 48|0); //@line 970 "stream_decoder.c"
   $35 = HEAP32[$34>>2]|0; //@line 970 "stream_decoder.c"
   $36 = (FUNCTION_TABLE_iiiii[$29 & 31]($30,0,0,$35)|0); //@line 970 "stream_decoder.c"
   $37 = ($36|0)==(1); //@line 970 "stream_decoder.c"
   if ($37) {
    $1 = 0; //@line 971 "stream_decoder.c"
    $94 = $1; //@line 1003 "stream_decoder.c"
    STACKTOP = sp;return ($94|0); //@line 1003 "stream_decoder.c"
   }
  }
 }
 $39 = $2; //@line 976 "stream_decoder.c"
 $40 = HEAP32[$39>>2]|0; //@line 976 "stream_decoder.c"
 HEAP32[$40>>2] = 0; //@line 976 "stream_decoder.c"
 $41 = $2; //@line 978 "stream_decoder.c"
 $42 = ((($41)) + 4|0); //@line 978 "stream_decoder.c"
 $43 = HEAP32[$42>>2]|0; //@line 978 "stream_decoder.c"
 $44 = ((($43)) + 248|0); //@line 978 "stream_decoder.c"
 HEAP32[$44>>2] = 0; //@line 978 "stream_decoder.c"
 $45 = $2; //@line 980 "stream_decoder.c"
 $46 = ((($45)) + 4|0); //@line 980 "stream_decoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 980 "stream_decoder.c"
 $48 = ((($47)) + 432|0); //@line 980 "stream_decoder.c"
 $49 = ((($48)) + 16|0); //@line 980 "stream_decoder.c"
 $50 = ((($49)) + 4|0); //@line 980 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 980 "stream_decoder.c"
 _free($51); //@line 980 "stream_decoder.c"
 $52 = $2; //@line 981 "stream_decoder.c"
 $53 = ((($52)) + 4|0); //@line 981 "stream_decoder.c"
 $54 = HEAP32[$53>>2]|0; //@line 981 "stream_decoder.c"
 $55 = ((($54)) + 432|0); //@line 981 "stream_decoder.c"
 $56 = ((($55)) + 16|0); //@line 981 "stream_decoder.c"
 $57 = ((($56)) + 4|0); //@line 981 "stream_decoder.c"
 HEAP32[$57>>2] = 0; //@line 981 "stream_decoder.c"
 $58 = $2; //@line 982 "stream_decoder.c"
 $59 = ((($58)) + 4|0); //@line 982 "stream_decoder.c"
 $60 = HEAP32[$59>>2]|0; //@line 982 "stream_decoder.c"
 $61 = ((($60)) + 252|0); //@line 982 "stream_decoder.c"
 HEAP32[$61>>2] = 0; //@line 982 "stream_decoder.c"
 $62 = $2; //@line 984 "stream_decoder.c"
 $63 = HEAP32[$62>>2]|0; //@line 984 "stream_decoder.c"
 $64 = ((($63)) + 28|0); //@line 984 "stream_decoder.c"
 $65 = HEAP32[$64>>2]|0; //@line 984 "stream_decoder.c"
 $66 = $2; //@line 984 "stream_decoder.c"
 $67 = ((($66)) + 4|0); //@line 984 "stream_decoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 984 "stream_decoder.c"
 $69 = ((($68)) + 3648|0); //@line 984 "stream_decoder.c"
 HEAP32[$69>>2] = $65; //@line 984 "stream_decoder.c"
 $70 = $2; //@line 989 "stream_decoder.c"
 $71 = ((($70)) + 4|0); //@line 989 "stream_decoder.c"
 $72 = HEAP32[$71>>2]|0; //@line 989 "stream_decoder.c"
 $73 = ((($72)) + 232|0); //@line 989 "stream_decoder.c"
 HEAP32[$73>>2] = 0; //@line 989 "stream_decoder.c"
 $74 = $2; //@line 989 "stream_decoder.c"
 $75 = ((($74)) + 4|0); //@line 989 "stream_decoder.c"
 $76 = HEAP32[$75>>2]|0; //@line 989 "stream_decoder.c"
 $77 = ((($76)) + 228|0); //@line 989 "stream_decoder.c"
 HEAP32[$77>>2] = 0; //@line 989 "stream_decoder.c"
 $78 = $2; //@line 997 "stream_decoder.c"
 $79 = ((($78)) + 4|0); //@line 997 "stream_decoder.c"
 $80 = HEAP32[$79>>2]|0; //@line 997 "stream_decoder.c"
 $81 = ((($80)) + 3660|0); //@line 997 "stream_decoder.c"
 _FLAC__MD5Init($81); //@line 997 "stream_decoder.c"
 $82 = $2; //@line 999 "stream_decoder.c"
 $83 = ((($82)) + 4|0); //@line 999 "stream_decoder.c"
 $84 = HEAP32[$83>>2]|0; //@line 999 "stream_decoder.c"
 $85 = ((($84)) + 6160|0); //@line 999 "stream_decoder.c"
 $86 = $85; //@line 999 "stream_decoder.c"
 $87 = $86; //@line 999 "stream_decoder.c"
 HEAP32[$87>>2] = 0; //@line 999 "stream_decoder.c"
 $88 = (($86) + 4)|0; //@line 999 "stream_decoder.c"
 $89 = $88; //@line 999 "stream_decoder.c"
 HEAP32[$89>>2] = 0; //@line 999 "stream_decoder.c"
 $90 = $2; //@line 1000 "stream_decoder.c"
 $91 = ((($90)) + 4|0); //@line 1000 "stream_decoder.c"
 $92 = HEAP32[$91>>2]|0; //@line 1000 "stream_decoder.c"
 $93 = ((($92)) + 6176|0); //@line 1000 "stream_decoder.c"
 HEAP32[$93>>2] = 0; //@line 1000 "stream_decoder.c"
 $1 = 1; //@line 1002 "stream_decoder.c"
 $94 = $1; //@line 1003 "stream_decoder.c"
 STACKTOP = sp;return ($94|0); //@line 1003 "stream_decoder.c"
}
function _FLAC__stream_decoder_flush($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2; //@line 925 "stream_decoder.c"
 $4 = ((($3)) + 4|0); //@line 925 "stream_decoder.c"
 $5 = HEAP32[$4>>2]|0; //@line 925 "stream_decoder.c"
 $6 = ((($5)) + 3652|0); //@line 925 "stream_decoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 925 "stream_decoder.c"
 $8 = ($7|0)!=(0); //@line 925 "stream_decoder.c"
 if (!($8)) {
  $9 = $2; //@line 925 "stream_decoder.c"
  $10 = HEAP32[$9>>2]|0; //@line 925 "stream_decoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 925 "stream_decoder.c"
  $12 = ($11|0)==(9); //@line 925 "stream_decoder.c"
  if ($12) {
   $1 = 0; //@line 926 "stream_decoder.c"
   $34 = $1; //@line 943 "stream_decoder.c"
   STACKTOP = sp;return ($34|0); //@line 943 "stream_decoder.c"
  }
 }
 $13 = $2; //@line 928 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 928 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 928 "stream_decoder.c"
 $16 = ((($15)) + 240|0); //@line 928 "stream_decoder.c"
 $17 = $16; //@line 928 "stream_decoder.c"
 $18 = $17; //@line 928 "stream_decoder.c"
 HEAP32[$18>>2] = 0; //@line 928 "stream_decoder.c"
 $19 = (($17) + 4)|0; //@line 928 "stream_decoder.c"
 $20 = $19; //@line 928 "stream_decoder.c"
 HEAP32[$20>>2] = 0; //@line 928 "stream_decoder.c"
 $21 = $2; //@line 929 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 929 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 929 "stream_decoder.c"
 $24 = ((($23)) + 3648|0); //@line 929 "stream_decoder.c"
 HEAP32[$24>>2] = 0; //@line 929 "stream_decoder.c"
 $25 = $2; //@line 936 "stream_decoder.c"
 $26 = ((($25)) + 4|0); //@line 936 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 936 "stream_decoder.c"
 $28 = ((($27)) + 56|0); //@line 936 "stream_decoder.c"
 $29 = HEAP32[$28>>2]|0; //@line 936 "stream_decoder.c"
 $30 = (_FLAC__bitreader_clear($29)|0); //@line 936 "stream_decoder.c"
 $31 = ($30|0)!=(0); //@line 936 "stream_decoder.c"
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 if ($31) {
  HEAP32[$33>>2] = 2; //@line 940 "stream_decoder.c"
  $1 = 1; //@line 942 "stream_decoder.c"
  $34 = $1; //@line 943 "stream_decoder.c"
  STACKTOP = sp;return ($34|0); //@line 943 "stream_decoder.c"
 } else {
  HEAP32[$33>>2] = 8; //@line 937 "stream_decoder.c"
  $1 = 0; //@line 938 "stream_decoder.c"
  $34 = $1; //@line 943 "stream_decoder.c"
  STACKTOP = sp;return ($34|0); //@line 943 "stream_decoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_decoder_set_md5_checking($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 715 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 715 "stream_decoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 715 "stream_decoder.c"
 $8 = ($7|0)!=(9); //@line 715 "stream_decoder.c"
 if ($8) {
  $2 = 0; //@line 716 "stream_decoder.c"
  $13 = $2; //@line 719 "stream_decoder.c"
  STACKTOP = sp;return ($13|0); //@line 719 "stream_decoder.c"
 } else {
  $9 = $4; //@line 717 "stream_decoder.c"
  $10 = $3; //@line 717 "stream_decoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 717 "stream_decoder.c"
  $12 = ((($11)) + 28|0); //@line 717 "stream_decoder.c"
  HEAP32[$12>>2] = $9; //@line 717 "stream_decoder.c"
  $2 = 1; //@line 718 "stream_decoder.c"
  $13 = $2; //@line 719 "stream_decoder.c"
  STACKTOP = sp;return ($13|0); //@line 719 "stream_decoder.c"
 }
 return (0)|0;
}
function _safe_realloc_mul_2op__167($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5; //@line 201 "../../include\share/alloc.h"
 $8 = ($7|0)!=(0); //@line 201 "../../include\share/alloc.h"
 $9 = $6; //@line 201 "../../include\share/alloc.h"
 $10 = ($9|0)!=(0); //@line 201 "../../include\share/alloc.h"
 $or$cond = $8 & $10; //@line 201 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $11 = $4; //@line 202 "../../include\share/alloc.h"
  $12 = (_realloc($11,0)|0); //@line 202 "../../include\share/alloc.h"
  $3 = $12; //@line 202 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 }
 $13 = $5; //@line 203 "../../include\share/alloc.h"
 $14 = $6; //@line 203 "../../include\share/alloc.h"
 $15 = (4294967295 / ($14>>>0))&-1; //@line 203 "../../include\share/alloc.h"
 $16 = ($13>>>0)>($15>>>0); //@line 203 "../../include\share/alloc.h"
 if ($16) {
  $3 = 0; //@line 204 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 } else {
  $17 = $4; //@line 205 "../../include\share/alloc.h"
  $18 = $5; //@line 205 "../../include\share/alloc.h"
  $19 = $6; //@line 205 "../../include\share/alloc.h"
  $20 = Math_imul($18, $19)|0; //@line 205 "../../include\share/alloc.h"
  $21 = (_safe_realloc__168($17,$20)|0); //@line 205 "../../include\share/alloc.h"
  $3 = $21; //@line 205 "../../include\share/alloc.h"
  $22 = $3; //@line 206 "../../include\share/alloc.h"
  STACKTOP = sp;return ($22|0); //@line 206 "../../include\share/alloc.h"
 }
 return (0)|0;
}
function _safe_realloc__168($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2; //@line 158 "../../include\share/alloc.h"
 $4 = $6; //@line 158 "../../include\share/alloc.h"
 $7 = $2; //@line 159 "../../include\share/alloc.h"
 $8 = $3; //@line 159 "../../include\share/alloc.h"
 $9 = (_realloc($7,$8)|0); //@line 159 "../../include\share/alloc.h"
 $5 = $9; //@line 159 "../../include\share/alloc.h"
 $10 = $3; //@line 160 "../../include\share/alloc.h"
 $11 = ($10>>>0)>(0); //@line 160 "../../include\share/alloc.h"
 $12 = $5; //@line 160 "../../include\share/alloc.h"
 $13 = ($12|0)==(0|0); //@line 160 "../../include\share/alloc.h"
 $or$cond = $11 & $13; //@line 160 "../../include\share/alloc.h"
 if (!($or$cond)) {
  $15 = $5; //@line 162 "../../include\share/alloc.h"
  STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
 }
 $14 = $4; //@line 161 "../../include\share/alloc.h"
 _free($14); //@line 161 "../../include\share/alloc.h"
 $15 = $5; //@line 162 "../../include\share/alloc.h"
 STACKTOP = sp;return ($15|0); //@line 162 "../../include\share/alloc.h"
}
function _FLAC__stream_decoder_get_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 841 "stream_decoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 841 "stream_decoder.c"
 $4 = HEAP32[$3>>2]|0; //@line 841 "stream_decoder.c"
 STACKTOP = sp;return ($4|0); //@line 841 "stream_decoder.c"
}
function _FLAC__stream_decoder_get_md5_checking($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 853 "stream_decoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 853 "stream_decoder.c"
 $4 = ((($3)) + 28|0); //@line 853 "stream_decoder.c"
 $5 = HEAP32[$4>>2]|0; //@line 853 "stream_decoder.c"
 STACKTOP = sp;return ($5|0); //@line 853 "stream_decoder.c"
}
function _FLAC__stream_decoder_get_total_samples($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 860 "stream_decoder.c"
 $3 = ((($2)) + 4|0); //@line 860 "stream_decoder.c"
 $4 = HEAP32[$3>>2]|0; //@line 860 "stream_decoder.c"
 $5 = ((($4)) + 248|0); //@line 860 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 860 "stream_decoder.c"
 $7 = ($6|0)!=(0); //@line 860 "stream_decoder.c"
 if (!($7)) {
  $20 = 0;$21 = 0;
  tempRet0 = ($20); //@line 860 "stream_decoder.c"
  STACKTOP = sp;return ($21|0); //@line 860 "stream_decoder.c"
 }
 $8 = $1; //@line 860 "stream_decoder.c"
 $9 = ((($8)) + 4|0); //@line 860 "stream_decoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 860 "stream_decoder.c"
 $11 = ((($10)) + 256|0); //@line 860 "stream_decoder.c"
 $12 = ((($11)) + 16|0); //@line 860 "stream_decoder.c"
 $13 = ((($12)) + 32|0); //@line 860 "stream_decoder.c"
 $14 = $13; //@line 860 "stream_decoder.c"
 $15 = $14; //@line 860 "stream_decoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 860 "stream_decoder.c"
 $17 = (($14) + 4)|0; //@line 860 "stream_decoder.c"
 $18 = $17; //@line 860 "stream_decoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 860 "stream_decoder.c"
 $20 = $19;$21 = $16;
 tempRet0 = ($20); //@line 860 "stream_decoder.c"
 STACKTOP = sp;return ($21|0); //@line 860 "stream_decoder.c"
}
function _FLAC__stream_decoder_get_decode_position($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 907 "stream_decoder.c"
 $6 = ((($5)) + 4|0); //@line 907 "stream_decoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 907 "stream_decoder.c"
 $8 = ((($7)) + 12|0); //@line 907 "stream_decoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 907 "stream_decoder.c"
 $10 = (0|0)==($9|0); //@line 907 "stream_decoder.c"
 if ($10) {
  $2 = 0; //@line 908 "stream_decoder.c"
  $47 = $2; //@line 917 "stream_decoder.c"
  STACKTOP = sp;return ($47|0); //@line 917 "stream_decoder.c"
 }
 $11 = $3; //@line 909 "stream_decoder.c"
 $12 = ((($11)) + 4|0); //@line 909 "stream_decoder.c"
 $13 = HEAP32[$12>>2]|0; //@line 909 "stream_decoder.c"
 $14 = ((($13)) + 12|0); //@line 909 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 909 "stream_decoder.c"
 $16 = $3; //@line 909 "stream_decoder.c"
 $17 = $4; //@line 909 "stream_decoder.c"
 $18 = $3; //@line 909 "stream_decoder.c"
 $19 = ((($18)) + 4|0); //@line 909 "stream_decoder.c"
 $20 = HEAP32[$19>>2]|0; //@line 909 "stream_decoder.c"
 $21 = ((($20)) + 48|0); //@line 909 "stream_decoder.c"
 $22 = HEAP32[$21>>2]|0; //@line 909 "stream_decoder.c"
 $23 = (FUNCTION_TABLE_iiii[$15 & 31]($16,$17,$22)|0); //@line 909 "stream_decoder.c"
 $24 = ($23|0)!=(0); //@line 909 "stream_decoder.c"
 if ($24) {
  $2 = 0; //@line 910 "stream_decoder.c"
  $47 = $2; //@line 917 "stream_decoder.c"
  STACKTOP = sp;return ($47|0); //@line 917 "stream_decoder.c"
 }
 $25 = $3; //@line 912 "stream_decoder.c"
 $26 = ((($25)) + 4|0); //@line 912 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 912 "stream_decoder.c"
 $28 = ((($27)) + 56|0); //@line 912 "stream_decoder.c"
 $29 = HEAP32[$28>>2]|0; //@line 912 "stream_decoder.c"
 $30 = (_FLAC__bitreader_is_consumed_byte_aligned($29)|0); //@line 912 "stream_decoder.c"
 $31 = ($30|0)!=(0); //@line 912 "stream_decoder.c"
 if ($31) {
  $32 = $3; //@line 915 "stream_decoder.c"
  $33 = (_FLAC__stream_decoder_get_input_bytes_unconsumed($32)|0); //@line 915 "stream_decoder.c"
  $34 = $4; //@line 915 "stream_decoder.c"
  $35 = $34; //@line 915 "stream_decoder.c"
  $36 = $35; //@line 915 "stream_decoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 915 "stream_decoder.c"
  $38 = (($35) + 4)|0; //@line 915 "stream_decoder.c"
  $39 = $38; //@line 915 "stream_decoder.c"
  $40 = HEAP32[$39>>2]|0; //@line 915 "stream_decoder.c"
  $41 = (_i64Subtract(($37|0),($40|0),($33|0),0)|0); //@line 915 "stream_decoder.c"
  $42 = tempRet0; //@line 915 "stream_decoder.c"
  $43 = $34; //@line 915 "stream_decoder.c"
  $44 = $43; //@line 915 "stream_decoder.c"
  HEAP32[$44>>2] = $41; //@line 915 "stream_decoder.c"
  $45 = (($43) + 4)|0; //@line 915 "stream_decoder.c"
  $46 = $45; //@line 915 "stream_decoder.c"
  HEAP32[$46>>2] = $42; //@line 915 "stream_decoder.c"
  $2 = 1; //@line 916 "stream_decoder.c"
  $47 = $2; //@line 917 "stream_decoder.c"
  STACKTOP = sp;return ($47|0); //@line 917 "stream_decoder.c"
 } else {
  $2 = 0; //@line 913 "stream_decoder.c"
  $47 = $2; //@line 917 "stream_decoder.c"
  STACKTOP = sp;return ($47|0); //@line 917 "stream_decoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_decoder_get_input_bytes_unconsumed($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1212 "stream_decoder.c"
 $3 = ((($2)) + 4|0); //@line 1212 "stream_decoder.c"
 $4 = HEAP32[$3>>2]|0; //@line 1212 "stream_decoder.c"
 $5 = ((($4)) + 56|0); //@line 1212 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1212 "stream_decoder.c"
 $7 = (_FLAC__bitreader_get_input_bits_unconsumed($6)|0); //@line 1212 "stream_decoder.c"
 $8 = (($7>>>0) / 8)&-1; //@line 1212 "stream_decoder.c"
 STACKTOP = sp;return ($8|0); //@line 1212 "stream_decoder.c"
}
function _FLAC__stream_decoder_process_single($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 L1: while(1) {
  $4 = $2; //@line 1012 "stream_decoder.c"
  $5 = HEAP32[$4>>2]|0; //@line 1012 "stream_decoder.c"
  $6 = HEAP32[$5>>2]|0; //@line 1012 "stream_decoder.c"
  switch ($6|0) {
  case 1:  {
   label = 5;
   break L1;
   break;
  }
  case 7: case 4:  {
   label = 14;
   break L1;
   break;
  }
  case 0:  {
   $7 = $2; //@line 1014 "stream_decoder.c"
   $8 = (_find_metadata_($7)|0); //@line 1014 "stream_decoder.c"
   $9 = ($8|0)!=(0); //@line 1014 "stream_decoder.c"
   if (!($9)) {
    label = 4;
    break L1;
   }
   break;
  }
  case 2:  {
   $13 = $2; //@line 1023 "stream_decoder.c"
   $14 = (_frame_sync_($13)|0); //@line 1023 "stream_decoder.c"
   $15 = ($14|0)!=(0); //@line 1023 "stream_decoder.c"
   if (!($15)) {
    label = 9;
    break L1;
   }
   break;
  }
  case 3:  {
   $16 = $2; //@line 1027 "stream_decoder.c"
   $17 = (_read_frame_($16,$3,1)|0); //@line 1027 "stream_decoder.c"
   $18 = ($17|0)!=(0); //@line 1027 "stream_decoder.c"
   if (!($18)) {
    label = 11;
    break L1;
   }
   $19 = HEAP32[$3>>2]|0; //@line 1029 "stream_decoder.c"
   $20 = ($19|0)!=(0); //@line 1029 "stream_decoder.c"
   if ($20) {
    label = 13;
    break L1;
   }
   break;
  }
  default: {
   label = 15;
   break L1;
  }
  }
 }
 do {
  if ((label|0) == 4) {
   $1 = 0; //@line 1015 "stream_decoder.c"
  }
  else if ((label|0) == 5) {
   $10 = $2; //@line 1018 "stream_decoder.c"
   $11 = (_read_metadata_($10)|0); //@line 1018 "stream_decoder.c"
   $12 = ($11|0)!=(0); //@line 1018 "stream_decoder.c"
   if ($12) {
    $1 = 1; //@line 1021 "stream_decoder.c"
    break;
   } else {
    $1 = 0; //@line 1019 "stream_decoder.c"
    break;
   }
  }
  else if ((label|0) == 9) {
   $1 = 1; //@line 1024 "stream_decoder.c"
  }
  else if ((label|0) == 11) {
   $1 = 0; //@line 1028 "stream_decoder.c"
  }
  else if ((label|0) == 13) {
   $1 = 1; //@line 1030 "stream_decoder.c"
  }
  else if ((label|0) == 14) {
   $1 = 1; //@line 1034 "stream_decoder.c"
  }
  else if ((label|0) == 15) {
   $1 = 0; //@line 1037 "stream_decoder.c"
  }
 } while(0);
 $21 = $1; //@line 1040 "stream_decoder.c"
 STACKTOP = sp;return ($21|0); //@line 1040 "stream_decoder.c"
}
function _find_metadata_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $2 = $0;
 $6 = 1; //@line 1332 "stream_decoder.c"
 $5 = 0; //@line 1336 "stream_decoder.c"
 $4 = 0; //@line 1336 "stream_decoder.c"
 L1: while(1) {
  $7 = $4; //@line 1336 "stream_decoder.c"
  $8 = ($7>>>0)<(4); //@line 1336 "stream_decoder.c"
  $9 = $2;
  if (!($8)) {
   label = 26;
   break;
  }
  $10 = ((($9)) + 4|0); //@line 1337 "stream_decoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1337 "stream_decoder.c"
  $12 = ((($11)) + 3520|0); //@line 1337 "stream_decoder.c"
  $13 = HEAP32[$12>>2]|0; //@line 1337 "stream_decoder.c"
  $14 = ($13|0)!=(0); //@line 1337 "stream_decoder.c"
  $15 = $2;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  if ($14) {
   $18 = ((($17)) + 3614|0); //@line 1338 "stream_decoder.c"
   $19 = HEAP8[$18>>0]|0; //@line 1338 "stream_decoder.c"
   $20 = $19&255; //@line 1338 "stream_decoder.c"
   HEAP32[$3>>2] = $20; //@line 1338 "stream_decoder.c"
   $21 = $2; //@line 1339 "stream_decoder.c"
   $22 = ((($21)) + 4|0); //@line 1339 "stream_decoder.c"
   $23 = HEAP32[$22>>2]|0; //@line 1339 "stream_decoder.c"
   $24 = ((($23)) + 3520|0); //@line 1339 "stream_decoder.c"
   HEAP32[$24>>2] = 0; //@line 1339 "stream_decoder.c"
  } else {
   $25 = ((($17)) + 56|0); //@line 1342 "stream_decoder.c"
   $26 = HEAP32[$25>>2]|0; //@line 1342 "stream_decoder.c"
   $27 = (_FLAC__bitreader_read_raw_uint32($26,$3,8)|0); //@line 1342 "stream_decoder.c"
   $28 = ($27|0)!=(0); //@line 1342 "stream_decoder.c"
   if (!($28)) {
    label = 6;
    break;
   }
  }
  $29 = HEAP32[$3>>2]|0; //@line 1345 "stream_decoder.c"
  $30 = $4; //@line 1345 "stream_decoder.c"
  $31 = (2353 + ($30)|0); //@line 1345 "stream_decoder.c"
  $32 = HEAP8[$31>>0]|0; //@line 1345 "stream_decoder.c"
  $33 = $32&255; //@line 1345 "stream_decoder.c"
  $34 = ($29|0)==($33|0); //@line 1345 "stream_decoder.c"
  if ($34) {
   $6 = 1; //@line 1346 "stream_decoder.c"
   $35 = $4; //@line 1347 "stream_decoder.c"
   $36 = (($35) + 1)|0; //@line 1347 "stream_decoder.c"
   $4 = $36; //@line 1347 "stream_decoder.c"
   $5 = 0; //@line 1348 "stream_decoder.c"
   continue;
  }
  $37 = $5; //@line 1352 "stream_decoder.c"
  $38 = ($37>>>0)>=(3); //@line 1352 "stream_decoder.c"
  if ($38) {
   label = 10;
   break;
  }
  $39 = HEAP32[$3>>2]|0; //@line 1355 "stream_decoder.c"
  $40 = $5; //@line 1355 "stream_decoder.c"
  $41 = (3178 + ($40)|0); //@line 1355 "stream_decoder.c"
  $42 = HEAP8[$41>>0]|0; //@line 1355 "stream_decoder.c"
  $43 = $42&255; //@line 1355 "stream_decoder.c"
  $44 = ($39|0)==($43|0); //@line 1355 "stream_decoder.c"
  if ($44) {
   $45 = $5; //@line 1356 "stream_decoder.c"
   $46 = (($45) + 1)|0; //@line 1356 "stream_decoder.c"
   $5 = $46; //@line 1356 "stream_decoder.c"
   $4 = 0; //@line 1357 "stream_decoder.c"
   $47 = $5; //@line 1358 "stream_decoder.c"
   $48 = ($47|0)==(3); //@line 1358 "stream_decoder.c"
   if ($48) {
    $49 = $2; //@line 1359 "stream_decoder.c"
    $50 = (_skip_id3v2_tag_($49)|0); //@line 1359 "stream_decoder.c"
    $51 = ($50|0)!=(0); //@line 1359 "stream_decoder.c"
    if (!($51)) {
     label = 14;
     break;
    }
   }
   continue;
  }
  $5 = 0; //@line 1364 "stream_decoder.c"
  $52 = HEAP32[$3>>2]|0; //@line 1365 "stream_decoder.c"
  $53 = ($52|0)==(255); //@line 1365 "stream_decoder.c"
  do {
   if ($53) {
    $54 = HEAP32[$3>>2]|0; //@line 1366 "stream_decoder.c"
    $55 = $54&255; //@line 1366 "stream_decoder.c"
    $56 = $2; //@line 1366 "stream_decoder.c"
    $57 = ((($56)) + 4|0); //@line 1366 "stream_decoder.c"
    $58 = HEAP32[$57>>2]|0; //@line 1366 "stream_decoder.c"
    $59 = ((($58)) + 3612|0); //@line 1366 "stream_decoder.c"
    HEAP8[$59>>0] = $55; //@line 1366 "stream_decoder.c"
    $60 = $2; //@line 1367 "stream_decoder.c"
    $61 = ((($60)) + 4|0); //@line 1367 "stream_decoder.c"
    $62 = HEAP32[$61>>2]|0; //@line 1367 "stream_decoder.c"
    $63 = ((($62)) + 56|0); //@line 1367 "stream_decoder.c"
    $64 = HEAP32[$63>>2]|0; //@line 1367 "stream_decoder.c"
    $65 = (_FLAC__bitreader_read_raw_uint32($64,$3,8)|0); //@line 1367 "stream_decoder.c"
    $66 = ($65|0)!=(0); //@line 1367 "stream_decoder.c"
    if (!($66)) {
     label = 18;
     break L1;
    }
    $67 = HEAP32[$3>>2]|0; //@line 1372 "stream_decoder.c"
    $68 = ($67|0)==(255); //@line 1372 "stream_decoder.c"
    $69 = HEAP32[$3>>2]|0;
    if ($68) {
     $70 = $69&255; //@line 1373 "stream_decoder.c"
     $71 = $2; //@line 1373 "stream_decoder.c"
     $72 = ((($71)) + 4|0); //@line 1373 "stream_decoder.c"
     $73 = HEAP32[$72>>2]|0; //@line 1373 "stream_decoder.c"
     $74 = ((($73)) + 3614|0); //@line 1373 "stream_decoder.c"
     HEAP8[$74>>0] = $70; //@line 1373 "stream_decoder.c"
     $75 = $2; //@line 1374 "stream_decoder.c"
     $76 = ((($75)) + 4|0); //@line 1374 "stream_decoder.c"
     $77 = HEAP32[$76>>2]|0; //@line 1374 "stream_decoder.c"
     $78 = ((($77)) + 3520|0); //@line 1374 "stream_decoder.c"
     HEAP32[$78>>2] = 1; //@line 1374 "stream_decoder.c"
     break;
    } else {
     $79 = $69 >>> 1; //@line 1376 "stream_decoder.c"
     $80 = ($79|0)==(124); //@line 1376 "stream_decoder.c"
     if ($80) {
      label = 22;
      break L1;
     } else {
      break;
     }
    }
   }
  } while(0);
  $4 = 0; //@line 1382 "stream_decoder.c"
  $90 = $6; //@line 1383 "stream_decoder.c"
  $91 = ($90|0)!=(0); //@line 1383 "stream_decoder.c"
  if ($91) {
   $92 = $2; //@line 1384 "stream_decoder.c"
   _send_error_to_client_($92,0); //@line 1384 "stream_decoder.c"
   $6 = 0; //@line 1385 "stream_decoder.c"
  }
 }
 if ((label|0) == 6) {
  $1 = 0; //@line 1343 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 else if ((label|0) == 10) {
  $1 = 0; //@line 1353 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 else if ((label|0) == 14) {
  $1 = 0; //@line 1360 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 else if ((label|0) == 18) {
  $1 = 0; //@line 1368 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 else if ((label|0) == 22) {
  $81 = HEAP32[$3>>2]|0; //@line 1377 "stream_decoder.c"
  $82 = $81&255; //@line 1377 "stream_decoder.c"
  $83 = $2; //@line 1377 "stream_decoder.c"
  $84 = ((($83)) + 4|0); //@line 1377 "stream_decoder.c"
  $85 = HEAP32[$84>>2]|0; //@line 1377 "stream_decoder.c"
  $86 = ((($85)) + 3612|0); //@line 1377 "stream_decoder.c"
  $87 = ((($86)) + 1|0); //@line 1377 "stream_decoder.c"
  HEAP8[$87>>0] = $82; //@line 1377 "stream_decoder.c"
  $88 = $2; //@line 1378 "stream_decoder.c"
  $89 = HEAP32[$88>>2]|0; //@line 1378 "stream_decoder.c"
  HEAP32[$89>>2] = 3; //@line 1378 "stream_decoder.c"
  $1 = 1; //@line 1379 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 else if ((label|0) == 26) {
  $93 = HEAP32[$9>>2]|0; //@line 1389 "stream_decoder.c"
  HEAP32[$93>>2] = 1; //@line 1389 "stream_decoder.c"
  $1 = 1; //@line 1390 "stream_decoder.c"
  $94 = $1; //@line 1391 "stream_decoder.c"
  STACKTOP = sp;return ($94|0); //@line 1391 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_metadata_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 196|0;
 $6 = sp + 192|0;
 $7 = sp + 188|0;
 $10 = sp;
 $2 = $0;
 $12 = $2; //@line 1400 "stream_decoder.c"
 $13 = ((($12)) + 4|0); //@line 1400 "stream_decoder.c"
 $14 = HEAP32[$13>>2]|0; //@line 1400 "stream_decoder.c"
 $15 = ((($14)) + 56|0); //@line 1400 "stream_decoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 1400 "stream_decoder.c"
 $17 = HEAP32[277]|0; //@line 1400 "stream_decoder.c"
 $18 = (_FLAC__bitreader_read_raw_uint32($16,$5,$17)|0); //@line 1400 "stream_decoder.c"
 $19 = ($18|0)!=(0); //@line 1400 "stream_decoder.c"
 if (!($19)) {
  $1 = 0; //@line 1401 "stream_decoder.c"
  $417 = $1; //@line 1569 "stream_decoder.c"
  STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
 }
 $20 = HEAP32[$5>>2]|0; //@line 1402 "stream_decoder.c"
 $21 = ($20|0)!=(0); //@line 1402 "stream_decoder.c"
 $22 = $21 ? 1 : 0; //@line 1402 "stream_decoder.c"
 $3 = $22; //@line 1402 "stream_decoder.c"
 $23 = $2; //@line 1404 "stream_decoder.c"
 $24 = ((($23)) + 4|0); //@line 1404 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 1404 "stream_decoder.c"
 $26 = ((($25)) + 56|0); //@line 1404 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 1404 "stream_decoder.c"
 $28 = HEAP32[266]|0; //@line 1404 "stream_decoder.c"
 $29 = (_FLAC__bitreader_read_raw_uint32($27,$6,$28)|0); //@line 1404 "stream_decoder.c"
 $30 = ($29|0)!=(0); //@line 1404 "stream_decoder.c"
 if (!($30)) {
  $1 = 0; //@line 1405 "stream_decoder.c"
  $417 = $1; //@line 1569 "stream_decoder.c"
  STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
 }
 $31 = $2; //@line 1407 "stream_decoder.c"
 $32 = ((($31)) + 4|0); //@line 1407 "stream_decoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 1407 "stream_decoder.c"
 $34 = ((($33)) + 56|0); //@line 1407 "stream_decoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 1407 "stream_decoder.c"
 $36 = HEAP32[267]|0; //@line 1407 "stream_decoder.c"
 $37 = (_FLAC__bitreader_read_raw_uint32($35,$7,$36)|0); //@line 1407 "stream_decoder.c"
 $38 = ($37|0)!=(0); //@line 1407 "stream_decoder.c"
 if (!($38)) {
  $1 = 0; //@line 1408 "stream_decoder.c"
  $417 = $1; //@line 1569 "stream_decoder.c"
  STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
 }
 $39 = HEAP32[$6>>2]|0; //@line 1410 "stream_decoder.c"
 $40 = ($39|0)==(0); //@line 1410 "stream_decoder.c"
 do {
  if ($40) {
   $41 = $2; //@line 1411 "stream_decoder.c"
   $42 = $3; //@line 1411 "stream_decoder.c"
   $43 = HEAP32[$7>>2]|0; //@line 1411 "stream_decoder.c"
   $44 = (_read_metadata_streaminfo_($41,$42,$43)|0); //@line 1411 "stream_decoder.c"
   $45 = ($44|0)!=(0); //@line 1411 "stream_decoder.c"
   if (!($45)) {
    $1 = 0; //@line 1412 "stream_decoder.c"
    $417 = $1; //@line 1569 "stream_decoder.c"
    STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
   }
   $46 = $2; //@line 1414 "stream_decoder.c"
   $47 = ((($46)) + 4|0); //@line 1414 "stream_decoder.c"
   $48 = HEAP32[$47>>2]|0; //@line 1414 "stream_decoder.c"
   $49 = ((($48)) + 248|0); //@line 1414 "stream_decoder.c"
   HEAP32[$49>>2] = 1; //@line 1414 "stream_decoder.c"
   $50 = $2; //@line 1415 "stream_decoder.c"
   $51 = ((($50)) + 4|0); //@line 1415 "stream_decoder.c"
   $52 = HEAP32[$51>>2]|0; //@line 1415 "stream_decoder.c"
   $53 = ((($52)) + 256|0); //@line 1415 "stream_decoder.c"
   $54 = ((($53)) + 16|0); //@line 1415 "stream_decoder.c"
   $55 = ((($54)) + 40|0); //@line 1415 "stream_decoder.c"
   $56 = (_memcmp($55,4056,16)|0); //@line 1415 "stream_decoder.c"
   $57 = (0)==($56|0); //@line 1415 "stream_decoder.c"
   if ($57) {
    $58 = $2; //@line 1416 "stream_decoder.c"
    $59 = ((($58)) + 4|0); //@line 1416 "stream_decoder.c"
    $60 = HEAP32[$59>>2]|0; //@line 1416 "stream_decoder.c"
    $61 = ((($60)) + 3648|0); //@line 1416 "stream_decoder.c"
    HEAP32[$61>>2] = 0; //@line 1416 "stream_decoder.c"
   }
   $62 = $2; //@line 1417 "stream_decoder.c"
   $63 = ((($62)) + 4|0); //@line 1417 "stream_decoder.c"
   $64 = HEAP32[$63>>2]|0; //@line 1417 "stream_decoder.c"
   $65 = ((($64)) + 3656|0); //@line 1417 "stream_decoder.c"
   $66 = HEAP32[$65>>2]|0; //@line 1417 "stream_decoder.c"
   $67 = ($66|0)!=(0); //@line 1417 "stream_decoder.c"
   if (!($67)) {
    $68 = $2; //@line 1417 "stream_decoder.c"
    $69 = ((($68)) + 4|0); //@line 1417 "stream_decoder.c"
    $70 = HEAP32[$69>>2]|0; //@line 1417 "stream_decoder.c"
    $71 = ((($70)) + 608|0); //@line 1417 "stream_decoder.c"
    $72 = HEAP32[$71>>2]|0; //@line 1417 "stream_decoder.c"
    $73 = ($72|0)!=(0); //@line 1417 "stream_decoder.c"
    if ($73) {
     $74 = $2; //@line 1417 "stream_decoder.c"
     $75 = ((($74)) + 4|0); //@line 1417 "stream_decoder.c"
     $76 = HEAP32[$75>>2]|0; //@line 1417 "stream_decoder.c"
     $77 = ((($76)) + 28|0); //@line 1417 "stream_decoder.c"
     $78 = HEAP32[$77>>2]|0; //@line 1417 "stream_decoder.c"
     $79 = ($78|0)!=(0|0); //@line 1417 "stream_decoder.c"
     if ($79) {
      $80 = $2; //@line 1418 "stream_decoder.c"
      $81 = ((($80)) + 4|0); //@line 1418 "stream_decoder.c"
      $82 = HEAP32[$81>>2]|0; //@line 1418 "stream_decoder.c"
      $83 = ((($82)) + 28|0); //@line 1418 "stream_decoder.c"
      $84 = HEAP32[$83>>2]|0; //@line 1418 "stream_decoder.c"
      $85 = $2; //@line 1418 "stream_decoder.c"
      $86 = $2; //@line 1418 "stream_decoder.c"
      $87 = ((($86)) + 4|0); //@line 1418 "stream_decoder.c"
      $88 = HEAP32[$87>>2]|0; //@line 1418 "stream_decoder.c"
      $89 = ((($88)) + 256|0); //@line 1418 "stream_decoder.c"
      $90 = $2; //@line 1418 "stream_decoder.c"
      $91 = ((($90)) + 4|0); //@line 1418 "stream_decoder.c"
      $92 = HEAP32[$91>>2]|0; //@line 1418 "stream_decoder.c"
      $93 = ((($92)) + 48|0); //@line 1418 "stream_decoder.c"
      $94 = HEAP32[$93>>2]|0; //@line 1418 "stream_decoder.c"
      FUNCTION_TABLE_viii[$84 & 31]($85,$89,$94); //@line 1418 "stream_decoder.c"
     }
    }
   }
  } else {
   $95 = HEAP32[$6>>2]|0; //@line 1420 "stream_decoder.c"
   $96 = ($95|0)==(3); //@line 1420 "stream_decoder.c"
   $97 = $2;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   if ($96) {
    $100 = ((($99)) + 252|0); //@line 1422 "stream_decoder.c"
    HEAP32[$100>>2] = 0; //@line 1422 "stream_decoder.c"
    $101 = $2; //@line 1424 "stream_decoder.c"
    $102 = $3; //@line 1424 "stream_decoder.c"
    $103 = HEAP32[$7>>2]|0; //@line 1424 "stream_decoder.c"
    $104 = (_read_metadata_seektable_($101,$102,$103)|0); //@line 1424 "stream_decoder.c"
    $105 = ($104|0)!=(0); //@line 1424 "stream_decoder.c"
    if (!($105)) {
     $1 = 0; //@line 1425 "stream_decoder.c"
     $417 = $1; //@line 1569 "stream_decoder.c"
     STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
    }
    $106 = $2; //@line 1427 "stream_decoder.c"
    $107 = ((($106)) + 4|0); //@line 1427 "stream_decoder.c"
    $108 = HEAP32[$107>>2]|0; //@line 1427 "stream_decoder.c"
    $109 = ((($108)) + 252|0); //@line 1427 "stream_decoder.c"
    HEAP32[$109>>2] = 1; //@line 1427 "stream_decoder.c"
    $110 = $2; //@line 1428 "stream_decoder.c"
    $111 = ((($110)) + 4|0); //@line 1428 "stream_decoder.c"
    $112 = HEAP32[$111>>2]|0; //@line 1428 "stream_decoder.c"
    $113 = ((($112)) + 3656|0); //@line 1428 "stream_decoder.c"
    $114 = HEAP32[$113>>2]|0; //@line 1428 "stream_decoder.c"
    $115 = ($114|0)!=(0); //@line 1428 "stream_decoder.c"
    if ($115) {
     break;
    }
    $116 = $2; //@line 1428 "stream_decoder.c"
    $117 = ((($116)) + 4|0); //@line 1428 "stream_decoder.c"
    $118 = HEAP32[$117>>2]|0; //@line 1428 "stream_decoder.c"
    $119 = ((($118)) + 608|0); //@line 1428 "stream_decoder.c"
    $120 = ((($119)) + 12|0); //@line 1428 "stream_decoder.c"
    $121 = HEAP32[$120>>2]|0; //@line 1428 "stream_decoder.c"
    $122 = ($121|0)!=(0); //@line 1428 "stream_decoder.c"
    if (!($122)) {
     break;
    }
    $123 = $2; //@line 1428 "stream_decoder.c"
    $124 = ((($123)) + 4|0); //@line 1428 "stream_decoder.c"
    $125 = HEAP32[$124>>2]|0; //@line 1428 "stream_decoder.c"
    $126 = ((($125)) + 28|0); //@line 1428 "stream_decoder.c"
    $127 = HEAP32[$126>>2]|0; //@line 1428 "stream_decoder.c"
    $128 = ($127|0)!=(0|0); //@line 1428 "stream_decoder.c"
    if (!($128)) {
     break;
    }
    $129 = $2; //@line 1429 "stream_decoder.c"
    $130 = ((($129)) + 4|0); //@line 1429 "stream_decoder.c"
    $131 = HEAP32[$130>>2]|0; //@line 1429 "stream_decoder.c"
    $132 = ((($131)) + 28|0); //@line 1429 "stream_decoder.c"
    $133 = HEAP32[$132>>2]|0; //@line 1429 "stream_decoder.c"
    $134 = $2; //@line 1429 "stream_decoder.c"
    $135 = $2; //@line 1429 "stream_decoder.c"
    $136 = ((($135)) + 4|0); //@line 1429 "stream_decoder.c"
    $137 = HEAP32[$136>>2]|0; //@line 1429 "stream_decoder.c"
    $138 = ((($137)) + 432|0); //@line 1429 "stream_decoder.c"
    $139 = $2; //@line 1429 "stream_decoder.c"
    $140 = ((($139)) + 4|0); //@line 1429 "stream_decoder.c"
    $141 = HEAP32[$140>>2]|0; //@line 1429 "stream_decoder.c"
    $142 = ((($141)) + 48|0); //@line 1429 "stream_decoder.c"
    $143 = HEAP32[$142>>2]|0; //@line 1429 "stream_decoder.c"
    FUNCTION_TABLE_viii[$133 & 31]($134,$138,$143); //@line 1429 "stream_decoder.c"
    break;
   }
   $144 = ((($99)) + 608|0); //@line 1432 "stream_decoder.c"
   $145 = HEAP32[$6>>2]|0; //@line 1432 "stream_decoder.c"
   $146 = (($144) + ($145<<2)|0); //@line 1432 "stream_decoder.c"
   $147 = HEAP32[$146>>2]|0; //@line 1432 "stream_decoder.c"
   $148 = ($147|0)!=(0); //@line 1432 "stream_decoder.c"
   $149 = $148 ^ 1; //@line 1432 "stream_decoder.c"
   $150 = $149&1; //@line 1432 "stream_decoder.c"
   $8 = $150; //@line 1432 "stream_decoder.c"
   $151 = HEAP32[$7>>2]|0; //@line 1433 "stream_decoder.c"
   $9 = $151; //@line 1433 "stream_decoder.c"
   _memset(($10|0),0,176)|0; //@line 1436 "stream_decoder.c"
   $152 = $3; //@line 1437 "stream_decoder.c"
   $153 = ((($10)) + 4|0); //@line 1437 "stream_decoder.c"
   HEAP32[$153>>2] = $152; //@line 1437 "stream_decoder.c"
   $154 = HEAP32[$6>>2]|0; //@line 1438 "stream_decoder.c"
   HEAP32[$10>>2] = $154; //@line 1438 "stream_decoder.c"
   $155 = HEAP32[$7>>2]|0; //@line 1439 "stream_decoder.c"
   $156 = ((($10)) + 8|0); //@line 1439 "stream_decoder.c"
   HEAP32[$156>>2] = $155; //@line 1439 "stream_decoder.c"
   $157 = HEAP32[$6>>2]|0; //@line 1441 "stream_decoder.c"
   $158 = ($157|0)==(2); //@line 1441 "stream_decoder.c"
   if ($158) {
    $159 = $2; //@line 1442 "stream_decoder.c"
    $160 = ((($159)) + 4|0); //@line 1442 "stream_decoder.c"
    $161 = HEAP32[$160>>2]|0; //@line 1442 "stream_decoder.c"
    $162 = ((($161)) + 56|0); //@line 1442 "stream_decoder.c"
    $163 = HEAP32[$162>>2]|0; //@line 1442 "stream_decoder.c"
    $164 = ((($10)) + 16|0); //@line 1442 "stream_decoder.c"
    $165 = HEAP32[265]|0; //@line 1442 "stream_decoder.c"
    $166 = (($165>>>0) / 8)&-1; //@line 1442 "stream_decoder.c"
    $167 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($163,$164,$166)|0); //@line 1442 "stream_decoder.c"
    $168 = ($167|0)!=(0); //@line 1442 "stream_decoder.c"
    if (!($168)) {
     $1 = 0; //@line 1443 "stream_decoder.c"
     $417 = $1; //@line 1569 "stream_decoder.c"
     STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
    }
    $169 = $9; //@line 1445 "stream_decoder.c"
    $170 = HEAP32[265]|0; //@line 1445 "stream_decoder.c"
    $171 = (($170>>>0) / 8)&-1; //@line 1445 "stream_decoder.c"
    $172 = ($169>>>0)<($171>>>0); //@line 1445 "stream_decoder.c"
    if ($172) {
     $173 = $2; //@line 1446 "stream_decoder.c"
     $174 = HEAP32[$173>>2]|0; //@line 1446 "stream_decoder.c"
     HEAP32[$174>>2] = 8; //@line 1446 "stream_decoder.c"
     $1 = 0; //@line 1447 "stream_decoder.c"
     $417 = $1; //@line 1569 "stream_decoder.c"
     STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
    }
    $175 = HEAP32[265]|0; //@line 1450 "stream_decoder.c"
    $176 = (($175>>>0) / 8)&-1; //@line 1450 "stream_decoder.c"
    $177 = $9; //@line 1450 "stream_decoder.c"
    $178 = (($177) - ($176))|0; //@line 1450 "stream_decoder.c"
    $9 = $178; //@line 1450 "stream_decoder.c"
    $179 = $2; //@line 1452 "stream_decoder.c"
    $180 = ((($179)) + 4|0); //@line 1452 "stream_decoder.c"
    $181 = HEAP32[$180>>2]|0; //@line 1452 "stream_decoder.c"
    $182 = ((($181)) + 1124|0); //@line 1452 "stream_decoder.c"
    $183 = HEAP32[$182>>2]|0; //@line 1452 "stream_decoder.c"
    $184 = ($183>>>0)>(0); //@line 1452 "stream_decoder.c"
    if ($184) {
     $185 = $2; //@line 1452 "stream_decoder.c"
     $186 = ((($10)) + 16|0); //@line 1452 "stream_decoder.c"
     $187 = (_has_id_filtered_($185,$186)|0); //@line 1452 "stream_decoder.c"
     $188 = ($187|0)!=(0); //@line 1452 "stream_decoder.c"
     if ($188) {
      $189 = $8; //@line 1453 "stream_decoder.c"
      $190 = ($189|0)!=(0); //@line 1453 "stream_decoder.c"
      $191 = $190 ^ 1; //@line 1453 "stream_decoder.c"
      $192 = $191&1; //@line 1453 "stream_decoder.c"
      $8 = $192; //@line 1453 "stream_decoder.c"
     }
    }
   }
   $193 = $8; //@line 1456 "stream_decoder.c"
   $194 = ($193|0)!=(0); //@line 1456 "stream_decoder.c"
   if ($194) {
    $195 = $2; //@line 1457 "stream_decoder.c"
    $196 = ((($195)) + 4|0); //@line 1457 "stream_decoder.c"
    $197 = HEAP32[$196>>2]|0; //@line 1457 "stream_decoder.c"
    $198 = ((($197)) + 56|0); //@line 1457 "stream_decoder.c"
    $199 = HEAP32[$198>>2]|0; //@line 1457 "stream_decoder.c"
    $200 = $9; //@line 1457 "stream_decoder.c"
    $201 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($199,$200)|0); //@line 1457 "stream_decoder.c"
    $202 = ($201|0)!=(0); //@line 1457 "stream_decoder.c"
    if ($202) {
     break;
    }
    $1 = 0; //@line 1458 "stream_decoder.c"
    $417 = $1; //@line 1569 "stream_decoder.c"
    STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
   }
   $11 = 1; //@line 1461 "stream_decoder.c"
   $203 = HEAP32[$6>>2]|0; //@line 1462 "stream_decoder.c"
   L54: do {
    switch ($203|0) {
    case 1:  {
     $204 = $2; //@line 1465 "stream_decoder.c"
     $205 = ((($204)) + 4|0); //@line 1465 "stream_decoder.c"
     $206 = HEAP32[$205>>2]|0; //@line 1465 "stream_decoder.c"
     $207 = ((($206)) + 56|0); //@line 1465 "stream_decoder.c"
     $208 = HEAP32[$207>>2]|0; //@line 1465 "stream_decoder.c"
     $209 = $9; //@line 1465 "stream_decoder.c"
     $210 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($208,$209)|0); //@line 1465 "stream_decoder.c"
     $211 = ($210|0)!=(0); //@line 1465 "stream_decoder.c"
     if (!($211)) {
      $11 = 0; //@line 1466 "stream_decoder.c"
     }
     break;
    }
    case 2:  {
     $212 = $9; //@line 1470 "stream_decoder.c"
     $213 = ($212>>>0)>(0); //@line 1470 "stream_decoder.c"
     if (!($213)) {
      $231 = ((($10)) + 16|0); //@line 1479 "stream_decoder.c"
      $232 = ((($231)) + 4|0); //@line 1479 "stream_decoder.c"
      HEAP32[$232>>2] = 0; //@line 1479 "stream_decoder.c"
      break L54;
     }
     $214 = $9; //@line 1471 "stream_decoder.c"
     $215 = (_malloc($214)|0); //@line 1471 "stream_decoder.c"
     $216 = ((($10)) + 16|0); //@line 1471 "stream_decoder.c"
     $217 = ((($216)) + 4|0); //@line 1471 "stream_decoder.c"
     HEAP32[$217>>2] = $215; //@line 1471 "stream_decoder.c"
     $218 = (0|0)==($215|0); //@line 1471 "stream_decoder.c"
     $219 = $2;
     if ($218) {
      $220 = HEAP32[$219>>2]|0; //@line 1472 "stream_decoder.c"
      HEAP32[$220>>2] = 8; //@line 1472 "stream_decoder.c"
      $11 = 0; //@line 1473 "stream_decoder.c"
      break L54;
     }
     $221 = ((($219)) + 4|0); //@line 1475 "stream_decoder.c"
     $222 = HEAP32[$221>>2]|0; //@line 1475 "stream_decoder.c"
     $223 = ((($222)) + 56|0); //@line 1475 "stream_decoder.c"
     $224 = HEAP32[$223>>2]|0; //@line 1475 "stream_decoder.c"
     $225 = ((($10)) + 16|0); //@line 1475 "stream_decoder.c"
     $226 = ((($225)) + 4|0); //@line 1475 "stream_decoder.c"
     $227 = HEAP32[$226>>2]|0; //@line 1475 "stream_decoder.c"
     $228 = $9; //@line 1475 "stream_decoder.c"
     $229 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($224,$227,$228)|0); //@line 1475 "stream_decoder.c"
     $230 = ($229|0)!=(0); //@line 1475 "stream_decoder.c"
     if (!($230)) {
      $11 = 0; //@line 1476 "stream_decoder.c"
     }
     break;
    }
    case 4:  {
     $233 = $2; //@line 1482 "stream_decoder.c"
     $234 = ((($10)) + 16|0); //@line 1482 "stream_decoder.c"
     $235 = $9; //@line 1482 "stream_decoder.c"
     $236 = (_read_metadata_vorbiscomment_($233,$234,$235)|0); //@line 1482 "stream_decoder.c"
     $237 = ($236|0)!=(0); //@line 1482 "stream_decoder.c"
     if (!($237)) {
      $11 = 0; //@line 1483 "stream_decoder.c"
     }
     break;
    }
    case 5:  {
     $238 = $2; //@line 1486 "stream_decoder.c"
     $239 = ((($10)) + 16|0); //@line 1486 "stream_decoder.c"
     $240 = (_read_metadata_cuesheet_($238,$239)|0); //@line 1486 "stream_decoder.c"
     $241 = ($240|0)!=(0); //@line 1486 "stream_decoder.c"
     if (!($241)) {
      $11 = 0; //@line 1487 "stream_decoder.c"
     }
     break;
    }
    case 6:  {
     $242 = $2; //@line 1490 "stream_decoder.c"
     $243 = ((($10)) + 16|0); //@line 1490 "stream_decoder.c"
     $244 = (_read_metadata_picture_($242,$243)|0); //@line 1490 "stream_decoder.c"
     $245 = ($244|0)!=(0); //@line 1490 "stream_decoder.c"
     if (!($245)) {
      $11 = 0; //@line 1491 "stream_decoder.c"
     }
     break;
    }
    case 3: case 0:  {
     break;
    }
    default: {
     $246 = $9; //@line 1498 "stream_decoder.c"
     $247 = ($246>>>0)>(0); //@line 1498 "stream_decoder.c"
     if (!($247)) {
      $263 = ((($10)) + 16|0); //@line 1507 "stream_decoder.c"
      HEAP32[$263>>2] = 0; //@line 1507 "stream_decoder.c"
      break L54;
     }
     $248 = $9; //@line 1499 "stream_decoder.c"
     $249 = (_malloc($248)|0); //@line 1499 "stream_decoder.c"
     $250 = ((($10)) + 16|0); //@line 1499 "stream_decoder.c"
     HEAP32[$250>>2] = $249; //@line 1499 "stream_decoder.c"
     $251 = (0|0)==($249|0); //@line 1499 "stream_decoder.c"
     $252 = $2;
     if ($251) {
      $253 = HEAP32[$252>>2]|0; //@line 1500 "stream_decoder.c"
      HEAP32[$253>>2] = 8; //@line 1500 "stream_decoder.c"
      $11 = 0; //@line 1501 "stream_decoder.c"
      break L54;
     }
     $254 = ((($252)) + 4|0); //@line 1503 "stream_decoder.c"
     $255 = HEAP32[$254>>2]|0; //@line 1503 "stream_decoder.c"
     $256 = ((($255)) + 56|0); //@line 1503 "stream_decoder.c"
     $257 = HEAP32[$256>>2]|0; //@line 1503 "stream_decoder.c"
     $258 = ((($10)) + 16|0); //@line 1503 "stream_decoder.c"
     $259 = HEAP32[$258>>2]|0; //@line 1503 "stream_decoder.c"
     $260 = $9; //@line 1503 "stream_decoder.c"
     $261 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($257,$259,$260)|0); //@line 1503 "stream_decoder.c"
     $262 = ($261|0)!=(0); //@line 1503 "stream_decoder.c"
     if (!($262)) {
      $11 = 0; //@line 1504 "stream_decoder.c"
     }
    }
    }
   } while(0);
   $264 = $11; //@line 1510 "stream_decoder.c"
   $265 = ($264|0)!=(0); //@line 1510 "stream_decoder.c"
   if ($265) {
    $266 = $2; //@line 1510 "stream_decoder.c"
    $267 = ((($266)) + 4|0); //@line 1510 "stream_decoder.c"
    $268 = HEAP32[$267>>2]|0; //@line 1510 "stream_decoder.c"
    $269 = ((($268)) + 3656|0); //@line 1510 "stream_decoder.c"
    $270 = HEAP32[$269>>2]|0; //@line 1510 "stream_decoder.c"
    $271 = ($270|0)!=(0); //@line 1510 "stream_decoder.c"
    if (!($271)) {
     $272 = $2; //@line 1510 "stream_decoder.c"
     $273 = ((($272)) + 4|0); //@line 1510 "stream_decoder.c"
     $274 = HEAP32[$273>>2]|0; //@line 1510 "stream_decoder.c"
     $275 = ((($274)) + 28|0); //@line 1510 "stream_decoder.c"
     $276 = HEAP32[$275>>2]|0; //@line 1510 "stream_decoder.c"
     $277 = ($276|0)!=(0|0); //@line 1510 "stream_decoder.c"
     if ($277) {
      $278 = $2; //@line 1511 "stream_decoder.c"
      $279 = ((($278)) + 4|0); //@line 1511 "stream_decoder.c"
      $280 = HEAP32[$279>>2]|0; //@line 1511 "stream_decoder.c"
      $281 = ((($280)) + 28|0); //@line 1511 "stream_decoder.c"
      $282 = HEAP32[$281>>2]|0; //@line 1511 "stream_decoder.c"
      $283 = $2; //@line 1511 "stream_decoder.c"
      $284 = $2; //@line 1511 "stream_decoder.c"
      $285 = ((($284)) + 4|0); //@line 1511 "stream_decoder.c"
      $286 = HEAP32[$285>>2]|0; //@line 1511 "stream_decoder.c"
      $287 = ((($286)) + 48|0); //@line 1511 "stream_decoder.c"
      $288 = HEAP32[$287>>2]|0; //@line 1511 "stream_decoder.c"
      FUNCTION_TABLE_viii[$282 & 31]($283,$10,$288); //@line 1511 "stream_decoder.c"
     }
    }
   }
   $289 = HEAP32[$6>>2]|0; //@line 1514 "stream_decoder.c"
   switch ($289|0) {
   case 1:  {
    break;
   }
   case 2:  {
    $290 = ((($10)) + 16|0); //@line 1518 "stream_decoder.c"
    $291 = ((($290)) + 4|0); //@line 1518 "stream_decoder.c"
    $292 = HEAP32[$291>>2]|0; //@line 1518 "stream_decoder.c"
    $293 = (0|0)!=($292|0); //@line 1518 "stream_decoder.c"
    if ($293) {
     $294 = ((($10)) + 16|0); //@line 1519 "stream_decoder.c"
     $295 = ((($294)) + 4|0); //@line 1519 "stream_decoder.c"
     $296 = HEAP32[$295>>2]|0; //@line 1519 "stream_decoder.c"
     _free($296); //@line 1519 "stream_decoder.c"
    }
    break;
   }
   case 4:  {
    $297 = ((($10)) + 16|0); //@line 1522 "stream_decoder.c"
    $298 = ((($297)) + 4|0); //@line 1522 "stream_decoder.c"
    $299 = HEAP32[$298>>2]|0; //@line 1522 "stream_decoder.c"
    $300 = (0|0)!=($299|0); //@line 1522 "stream_decoder.c"
    if ($300) {
     $301 = ((($10)) + 16|0); //@line 1523 "stream_decoder.c"
     $302 = ((($301)) + 4|0); //@line 1523 "stream_decoder.c"
     $303 = HEAP32[$302>>2]|0; //@line 1523 "stream_decoder.c"
     _free($303); //@line 1523 "stream_decoder.c"
    }
    $304 = ((($10)) + 16|0); //@line 1524 "stream_decoder.c"
    $305 = ((($304)) + 8|0); //@line 1524 "stream_decoder.c"
    $306 = HEAP32[$305>>2]|0; //@line 1524 "stream_decoder.c"
    $307 = ($306>>>0)>(0); //@line 1524 "stream_decoder.c"
    L94: do {
     if ($307) {
      $4 = 0; //@line 1525 "stream_decoder.c"
      while(1) {
       $308 = $4; //@line 1525 "stream_decoder.c"
       $309 = ((($10)) + 16|0); //@line 1525 "stream_decoder.c"
       $310 = ((($309)) + 8|0); //@line 1525 "stream_decoder.c"
       $311 = HEAP32[$310>>2]|0; //@line 1525 "stream_decoder.c"
       $312 = ($308>>>0)<($311>>>0); //@line 1525 "stream_decoder.c"
       if (!($312)) {
        break L94;
       }
       $313 = ((($10)) + 16|0); //@line 1526 "stream_decoder.c"
       $314 = ((($313)) + 12|0); //@line 1526 "stream_decoder.c"
       $315 = HEAP32[$314>>2]|0; //@line 1526 "stream_decoder.c"
       $316 = $4; //@line 1526 "stream_decoder.c"
       $317 = (($315) + ($316<<3)|0); //@line 1526 "stream_decoder.c"
       $318 = ((($317)) + 4|0); //@line 1526 "stream_decoder.c"
       $319 = HEAP32[$318>>2]|0; //@line 1526 "stream_decoder.c"
       $320 = (0|0)!=($319|0); //@line 1526 "stream_decoder.c"
       if ($320) {
        $321 = ((($10)) + 16|0); //@line 1527 "stream_decoder.c"
        $322 = ((($321)) + 12|0); //@line 1527 "stream_decoder.c"
        $323 = HEAP32[$322>>2]|0; //@line 1527 "stream_decoder.c"
        $324 = $4; //@line 1527 "stream_decoder.c"
        $325 = (($323) + ($324<<3)|0); //@line 1527 "stream_decoder.c"
        $326 = ((($325)) + 4|0); //@line 1527 "stream_decoder.c"
        $327 = HEAP32[$326>>2]|0; //@line 1527 "stream_decoder.c"
        _free($327); //@line 1527 "stream_decoder.c"
       }
       $328 = $4; //@line 1525 "stream_decoder.c"
       $329 = (($328) + 1)|0; //@line 1525 "stream_decoder.c"
       $4 = $329; //@line 1525 "stream_decoder.c"
      }
     }
    } while(0);
    $330 = ((($10)) + 16|0); //@line 1528 "stream_decoder.c"
    $331 = ((($330)) + 12|0); //@line 1528 "stream_decoder.c"
    $332 = HEAP32[$331>>2]|0; //@line 1528 "stream_decoder.c"
    $333 = (0|0)!=($332|0); //@line 1528 "stream_decoder.c"
    if ($333) {
     $334 = ((($10)) + 16|0); //@line 1529 "stream_decoder.c"
     $335 = ((($334)) + 12|0); //@line 1529 "stream_decoder.c"
     $336 = HEAP32[$335>>2]|0; //@line 1529 "stream_decoder.c"
     _free($336); //@line 1529 "stream_decoder.c"
    }
    break;
   }
   case 5:  {
    $337 = ((($10)) + 16|0); //@line 1532 "stream_decoder.c"
    $338 = ((($337)) + 148|0); //@line 1532 "stream_decoder.c"
    $339 = HEAP32[$338>>2]|0; //@line 1532 "stream_decoder.c"
    $340 = ($339>>>0)>(0); //@line 1532 "stream_decoder.c"
    L105: do {
     if ($340) {
      $4 = 0; //@line 1533 "stream_decoder.c"
      while(1) {
       $341 = $4; //@line 1533 "stream_decoder.c"
       $342 = ((($10)) + 16|0); //@line 1533 "stream_decoder.c"
       $343 = ((($342)) + 148|0); //@line 1533 "stream_decoder.c"
       $344 = HEAP32[$343>>2]|0; //@line 1533 "stream_decoder.c"
       $345 = ($341>>>0)<($344>>>0); //@line 1533 "stream_decoder.c"
       if (!($345)) {
        break L105;
       }
       $346 = ((($10)) + 16|0); //@line 1534 "stream_decoder.c"
       $347 = ((($346)) + 152|0); //@line 1534 "stream_decoder.c"
       $348 = HEAP32[$347>>2]|0; //@line 1534 "stream_decoder.c"
       $349 = $4; //@line 1534 "stream_decoder.c"
       $350 = (($348) + ($349<<5)|0); //@line 1534 "stream_decoder.c"
       $351 = ((($350)) + 24|0); //@line 1534 "stream_decoder.c"
       $352 = HEAP32[$351>>2]|0; //@line 1534 "stream_decoder.c"
       $353 = (0|0)!=($352|0); //@line 1534 "stream_decoder.c"
       if ($353) {
        $354 = ((($10)) + 16|0); //@line 1535 "stream_decoder.c"
        $355 = ((($354)) + 152|0); //@line 1535 "stream_decoder.c"
        $356 = HEAP32[$355>>2]|0; //@line 1535 "stream_decoder.c"
        $357 = $4; //@line 1535 "stream_decoder.c"
        $358 = (($356) + ($357<<5)|0); //@line 1535 "stream_decoder.c"
        $359 = ((($358)) + 24|0); //@line 1535 "stream_decoder.c"
        $360 = HEAP32[$359>>2]|0; //@line 1535 "stream_decoder.c"
        _free($360); //@line 1535 "stream_decoder.c"
       }
       $361 = $4; //@line 1533 "stream_decoder.c"
       $362 = (($361) + 1)|0; //@line 1533 "stream_decoder.c"
       $4 = $362; //@line 1533 "stream_decoder.c"
      }
     }
    } while(0);
    $363 = ((($10)) + 16|0); //@line 1536 "stream_decoder.c"
    $364 = ((($363)) + 152|0); //@line 1536 "stream_decoder.c"
    $365 = HEAP32[$364>>2]|0; //@line 1536 "stream_decoder.c"
    $366 = (0|0)!=($365|0); //@line 1536 "stream_decoder.c"
    if ($366) {
     $367 = ((($10)) + 16|0); //@line 1537 "stream_decoder.c"
     $368 = ((($367)) + 152|0); //@line 1537 "stream_decoder.c"
     $369 = HEAP32[$368>>2]|0; //@line 1537 "stream_decoder.c"
     _free($369); //@line 1537 "stream_decoder.c"
    }
    break;
   }
   case 6:  {
    $370 = ((($10)) + 16|0); //@line 1540 "stream_decoder.c"
    $371 = ((($370)) + 4|0); //@line 1540 "stream_decoder.c"
    $372 = HEAP32[$371>>2]|0; //@line 1540 "stream_decoder.c"
    $373 = (0|0)!=($372|0); //@line 1540 "stream_decoder.c"
    if ($373) {
     $374 = ((($10)) + 16|0); //@line 1541 "stream_decoder.c"
     $375 = ((($374)) + 4|0); //@line 1541 "stream_decoder.c"
     $376 = HEAP32[$375>>2]|0; //@line 1541 "stream_decoder.c"
     _free($376); //@line 1541 "stream_decoder.c"
    }
    $377 = ((($10)) + 16|0); //@line 1542 "stream_decoder.c"
    $378 = ((($377)) + 8|0); //@line 1542 "stream_decoder.c"
    $379 = HEAP32[$378>>2]|0; //@line 1542 "stream_decoder.c"
    $380 = (0|0)!=($379|0); //@line 1542 "stream_decoder.c"
    if ($380) {
     $381 = ((($10)) + 16|0); //@line 1543 "stream_decoder.c"
     $382 = ((($381)) + 8|0); //@line 1543 "stream_decoder.c"
     $383 = HEAP32[$382>>2]|0; //@line 1543 "stream_decoder.c"
     _free($383); //@line 1543 "stream_decoder.c"
    }
    $384 = ((($10)) + 16|0); //@line 1544 "stream_decoder.c"
    $385 = ((($384)) + 32|0); //@line 1544 "stream_decoder.c"
    $386 = HEAP32[$385>>2]|0; //@line 1544 "stream_decoder.c"
    $387 = (0|0)!=($386|0); //@line 1544 "stream_decoder.c"
    if ($387) {
     $388 = ((($10)) + 16|0); //@line 1545 "stream_decoder.c"
     $389 = ((($388)) + 32|0); //@line 1545 "stream_decoder.c"
     $390 = HEAP32[$389>>2]|0; //@line 1545 "stream_decoder.c"
     _free($390); //@line 1545 "stream_decoder.c"
    }
    break;
   }
   default: {
    $391 = ((($10)) + 16|0); //@line 1551 "stream_decoder.c"
    $392 = HEAP32[$391>>2]|0; //@line 1551 "stream_decoder.c"
    $393 = (0|0)!=($392|0); //@line 1551 "stream_decoder.c"
    if ($393) {
     $394 = ((($10)) + 16|0); //@line 1552 "stream_decoder.c"
     $395 = HEAP32[$394>>2]|0; //@line 1552 "stream_decoder.c"
     _free($395); //@line 1552 "stream_decoder.c"
    }
   }
   }
   $396 = $11; //@line 1556 "stream_decoder.c"
   $397 = ($396|0)!=(0); //@line 1556 "stream_decoder.c"
   if (!($397)) {
    $1 = 0; //@line 1557 "stream_decoder.c"
    $417 = $1; //@line 1569 "stream_decoder.c"
    STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
   }
  }
 } while(0);
 $398 = $3; //@line 1561 "stream_decoder.c"
 $399 = ($398|0)!=(0); //@line 1561 "stream_decoder.c"
 if ($399) {
  $400 = $2; //@line 1563 "stream_decoder.c"
  $401 = $2; //@line 1563 "stream_decoder.c"
  $402 = ((($401)) + 4|0); //@line 1563 "stream_decoder.c"
  $403 = HEAP32[$402>>2]|0; //@line 1563 "stream_decoder.c"
  $404 = ((($403)) + 6160|0); //@line 1563 "stream_decoder.c"
  $405 = (_FLAC__stream_decoder_get_decode_position($400,$404)|0); //@line 1563 "stream_decoder.c"
  $406 = ($405|0)!=(0); //@line 1563 "stream_decoder.c"
  if (!($406)) {
   $407 = $2; //@line 1564 "stream_decoder.c"
   $408 = ((($407)) + 4|0); //@line 1564 "stream_decoder.c"
   $409 = HEAP32[$408>>2]|0; //@line 1564 "stream_decoder.c"
   $410 = ((($409)) + 6160|0); //@line 1564 "stream_decoder.c"
   $411 = $410; //@line 1564 "stream_decoder.c"
   $412 = $411; //@line 1564 "stream_decoder.c"
   HEAP32[$412>>2] = 0; //@line 1564 "stream_decoder.c"
   $413 = (($411) + 4)|0; //@line 1564 "stream_decoder.c"
   $414 = $413; //@line 1564 "stream_decoder.c"
   HEAP32[$414>>2] = 0; //@line 1564 "stream_decoder.c"
  }
  $415 = $2; //@line 1565 "stream_decoder.c"
  $416 = HEAP32[$415>>2]|0; //@line 1565 "stream_decoder.c"
  HEAP32[$416>>2] = 2; //@line 1565 "stream_decoder.c"
 }
 $1 = 1; //@line 1568 "stream_decoder.c"
 $417 = $1; //@line 1569 "stream_decoder.c"
 STACKTOP = sp;return ($417|0); //@line 1569 "stream_decoder.c"
}
function _frame_sync_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 $4 = 1; //@line 1963 "stream_decoder.c"
 $5 = $2; //@line 1967 "stream_decoder.c"
 $6 = (_FLAC__stream_decoder_get_total_samples($5)|0); //@line 1967 "stream_decoder.c"
 $7 = tempRet0; //@line 1967 "stream_decoder.c"
 $8 = ($7>>>0)>(0); //@line 1967 "stream_decoder.c"
 $9 = ($6>>>0)>(0); //@line 1967 "stream_decoder.c"
 $10 = ($7|0)==(0); //@line 1967 "stream_decoder.c"
 $11 = $10 & $9; //@line 1967 "stream_decoder.c"
 $12 = $8 | $11; //@line 1967 "stream_decoder.c"
 if ($12) {
  $13 = $2; //@line 1968 "stream_decoder.c"
  $14 = ((($13)) + 4|0); //@line 1968 "stream_decoder.c"
  $15 = HEAP32[$14>>2]|0; //@line 1968 "stream_decoder.c"
  $16 = ((($15)) + 240|0); //@line 1968 "stream_decoder.c"
  $17 = $16; //@line 1968 "stream_decoder.c"
  $18 = $17; //@line 1968 "stream_decoder.c"
  $19 = HEAP32[$18>>2]|0; //@line 1968 "stream_decoder.c"
  $20 = (($17) + 4)|0; //@line 1968 "stream_decoder.c"
  $21 = $20; //@line 1968 "stream_decoder.c"
  $22 = HEAP32[$21>>2]|0; //@line 1968 "stream_decoder.c"
  $23 = $2; //@line 1968 "stream_decoder.c"
  $24 = (_FLAC__stream_decoder_get_total_samples($23)|0); //@line 1968 "stream_decoder.c"
  $25 = tempRet0; //@line 1968 "stream_decoder.c"
  $26 = ($22>>>0)>($25>>>0); //@line 1968 "stream_decoder.c"
  $27 = ($19>>>0)>=($24>>>0); //@line 1968 "stream_decoder.c"
  $28 = ($22|0)==($25|0); //@line 1968 "stream_decoder.c"
  $29 = $28 & $27; //@line 1968 "stream_decoder.c"
  $30 = $26 | $29; //@line 1968 "stream_decoder.c"
  if ($30) {
   $31 = $2; //@line 1969 "stream_decoder.c"
   $32 = HEAP32[$31>>2]|0; //@line 1969 "stream_decoder.c"
   HEAP32[$32>>2] = 4; //@line 1969 "stream_decoder.c"
   $1 = 1; //@line 1970 "stream_decoder.c"
   $114 = $1; //@line 2013 "stream_decoder.c"
   STACKTOP = sp;return ($114|0); //@line 2013 "stream_decoder.c"
  }
 }
 $33 = $2; //@line 1975 "stream_decoder.c"
 $34 = ((($33)) + 4|0); //@line 1975 "stream_decoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 1975 "stream_decoder.c"
 $36 = ((($35)) + 56|0); //@line 1975 "stream_decoder.c"
 $37 = HEAP32[$36>>2]|0; //@line 1975 "stream_decoder.c"
 $38 = (_FLAC__bitreader_is_consumed_byte_aligned($37)|0); //@line 1975 "stream_decoder.c"
 $39 = ($38|0)!=(0); //@line 1975 "stream_decoder.c"
 if (!($39)) {
  $40 = $2; //@line 1976 "stream_decoder.c"
  $41 = ((($40)) + 4|0); //@line 1976 "stream_decoder.c"
  $42 = HEAP32[$41>>2]|0; //@line 1976 "stream_decoder.c"
  $43 = ((($42)) + 56|0); //@line 1976 "stream_decoder.c"
  $44 = HEAP32[$43>>2]|0; //@line 1976 "stream_decoder.c"
  $45 = $2; //@line 1976 "stream_decoder.c"
  $46 = ((($45)) + 4|0); //@line 1976 "stream_decoder.c"
  $47 = HEAP32[$46>>2]|0; //@line 1976 "stream_decoder.c"
  $48 = ((($47)) + 56|0); //@line 1976 "stream_decoder.c"
  $49 = HEAP32[$48>>2]|0; //@line 1976 "stream_decoder.c"
  $50 = (_FLAC__bitreader_bits_left_for_byte_alignment($49)|0); //@line 1976 "stream_decoder.c"
  $51 = (_FLAC__bitreader_read_raw_uint32($44,$3,$50)|0); //@line 1976 "stream_decoder.c"
  $52 = ($51|0)!=(0); //@line 1976 "stream_decoder.c"
  if (!($52)) {
   $1 = 0; //@line 1977 "stream_decoder.c"
   $114 = $1; //@line 2013 "stream_decoder.c"
   STACKTOP = sp;return ($114|0); //@line 2013 "stream_decoder.c"
  }
 }
 L11: while(1) {
  $53 = $2; //@line 1981 "stream_decoder.c"
  $54 = ((($53)) + 4|0); //@line 1981 "stream_decoder.c"
  $55 = HEAP32[$54>>2]|0; //@line 1981 "stream_decoder.c"
  $56 = ((($55)) + 3520|0); //@line 1981 "stream_decoder.c"
  $57 = HEAP32[$56>>2]|0; //@line 1981 "stream_decoder.c"
  $58 = ($57|0)!=(0); //@line 1981 "stream_decoder.c"
  $59 = $2;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  if ($58) {
   $62 = ((($61)) + 3614|0); //@line 1982 "stream_decoder.c"
   $63 = HEAP8[$62>>0]|0; //@line 1982 "stream_decoder.c"
   $64 = $63&255; //@line 1982 "stream_decoder.c"
   HEAP32[$3>>2] = $64; //@line 1982 "stream_decoder.c"
   $65 = $2; //@line 1983 "stream_decoder.c"
   $66 = ((($65)) + 4|0); //@line 1983 "stream_decoder.c"
   $67 = HEAP32[$66>>2]|0; //@line 1983 "stream_decoder.c"
   $68 = ((($67)) + 3520|0); //@line 1983 "stream_decoder.c"
   HEAP32[$68>>2] = 0; //@line 1983 "stream_decoder.c"
  } else {
   $69 = ((($61)) + 56|0); //@line 1986 "stream_decoder.c"
   $70 = HEAP32[$69>>2]|0; //@line 1986 "stream_decoder.c"
   $71 = (_FLAC__bitreader_read_raw_uint32($70,$3,8)|0); //@line 1986 "stream_decoder.c"
   $72 = ($71|0)!=(0); //@line 1986 "stream_decoder.c"
   if (!($72)) {
    label = 11;
    break;
   }
  }
  $73 = HEAP32[$3>>2]|0; //@line 1989 "stream_decoder.c"
  $74 = ($73|0)==(255); //@line 1989 "stream_decoder.c"
  do {
   if ($74) {
    $75 = HEAP32[$3>>2]|0; //@line 1990 "stream_decoder.c"
    $76 = $75&255; //@line 1990 "stream_decoder.c"
    $77 = $2; //@line 1990 "stream_decoder.c"
    $78 = ((($77)) + 4|0); //@line 1990 "stream_decoder.c"
    $79 = HEAP32[$78>>2]|0; //@line 1990 "stream_decoder.c"
    $80 = ((($79)) + 3612|0); //@line 1990 "stream_decoder.c"
    HEAP8[$80>>0] = $76; //@line 1990 "stream_decoder.c"
    $81 = $2; //@line 1991 "stream_decoder.c"
    $82 = ((($81)) + 4|0); //@line 1991 "stream_decoder.c"
    $83 = HEAP32[$82>>2]|0; //@line 1991 "stream_decoder.c"
    $84 = ((($83)) + 56|0); //@line 1991 "stream_decoder.c"
    $85 = HEAP32[$84>>2]|0; //@line 1991 "stream_decoder.c"
    $86 = (_FLAC__bitreader_read_raw_uint32($85,$3,8)|0); //@line 1991 "stream_decoder.c"
    $87 = ($86|0)!=(0); //@line 1991 "stream_decoder.c"
    if (!($87)) {
     label = 14;
     break L11;
    }
    $88 = HEAP32[$3>>2]|0; //@line 1996 "stream_decoder.c"
    $89 = ($88|0)==(255); //@line 1996 "stream_decoder.c"
    $90 = HEAP32[$3>>2]|0;
    if ($89) {
     $91 = $90&255; //@line 1997 "stream_decoder.c"
     $92 = $2; //@line 1997 "stream_decoder.c"
     $93 = ((($92)) + 4|0); //@line 1997 "stream_decoder.c"
     $94 = HEAP32[$93>>2]|0; //@line 1997 "stream_decoder.c"
     $95 = ((($94)) + 3614|0); //@line 1997 "stream_decoder.c"
     HEAP8[$95>>0] = $91; //@line 1997 "stream_decoder.c"
     $96 = $2; //@line 1998 "stream_decoder.c"
     $97 = ((($96)) + 4|0); //@line 1998 "stream_decoder.c"
     $98 = HEAP32[$97>>2]|0; //@line 1998 "stream_decoder.c"
     $99 = ((($98)) + 3520|0); //@line 1998 "stream_decoder.c"
     HEAP32[$99>>2] = 1; //@line 1998 "stream_decoder.c"
     break;
    } else {
     $100 = $90 >>> 1; //@line 2000 "stream_decoder.c"
     $101 = ($100|0)==(124); //@line 2000 "stream_decoder.c"
     if ($101) {
      label = 18;
      break L11;
     } else {
      break;
     }
    }
   }
  } while(0);
  $111 = $4; //@line 2006 "stream_decoder.c"
  $112 = ($111|0)!=(0); //@line 2006 "stream_decoder.c"
  if ($112) {
   $113 = $2; //@line 2007 "stream_decoder.c"
   _send_error_to_client_($113,0); //@line 2007 "stream_decoder.c"
   $4 = 0; //@line 2008 "stream_decoder.c"
  }
 }
 if ((label|0) == 11) {
  $1 = 0; //@line 1987 "stream_decoder.c"
  $114 = $1; //@line 2013 "stream_decoder.c"
  STACKTOP = sp;return ($114|0); //@line 2013 "stream_decoder.c"
 }
 else if ((label|0) == 14) {
  $1 = 0; //@line 1992 "stream_decoder.c"
  $114 = $1; //@line 2013 "stream_decoder.c"
  STACKTOP = sp;return ($114|0); //@line 2013 "stream_decoder.c"
 }
 else if ((label|0) == 18) {
  $102 = HEAP32[$3>>2]|0; //@line 2001 "stream_decoder.c"
  $103 = $102&255; //@line 2001 "stream_decoder.c"
  $104 = $2; //@line 2001 "stream_decoder.c"
  $105 = ((($104)) + 4|0); //@line 2001 "stream_decoder.c"
  $106 = HEAP32[$105>>2]|0; //@line 2001 "stream_decoder.c"
  $107 = ((($106)) + 3612|0); //@line 2001 "stream_decoder.c"
  $108 = ((($107)) + 1|0); //@line 2001 "stream_decoder.c"
  HEAP8[$108>>0] = $103; //@line 2001 "stream_decoder.c"
  $109 = $2; //@line 2002 "stream_decoder.c"
  $110 = HEAP32[$109>>2]|0; //@line 2002 "stream_decoder.c"
  HEAP32[$110>>2] = 3; //@line 2002 "stream_decoder.c"
  $1 = 1; //@line 2003 "stream_decoder.c"
  $114 = $1; //@line 2013 "stream_decoder.c"
  STACKTOP = sp;return ($114|0); //@line 2013 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_frame_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $5; //@line 2023 "stream_decoder.c"
 HEAP32[$14>>2] = 0; //@line 2023 "stream_decoder.c"
 $11 = 0; //@line 2026 "stream_decoder.c"
 $15 = $11; //@line 2027 "stream_decoder.c"
 $16 = $15 << 8; //@line 2027 "stream_decoder.c"
 $17 = $16 & 65535; //@line 2027 "stream_decoder.c"
 $18 = $11; //@line 2027 "stream_decoder.c"
 $19 = $18 >>> 8; //@line 2027 "stream_decoder.c"
 $20 = $4; //@line 2027 "stream_decoder.c"
 $21 = ((($20)) + 4|0); //@line 2027 "stream_decoder.c"
 $22 = HEAP32[$21>>2]|0; //@line 2027 "stream_decoder.c"
 $23 = ((($22)) + 3612|0); //@line 2027 "stream_decoder.c"
 $24 = HEAP8[$23>>0]|0; //@line 2027 "stream_decoder.c"
 $25 = $24&255; //@line 2027 "stream_decoder.c"
 $26 = $19 ^ $25; //@line 2027 "stream_decoder.c"
 $27 = (8 + ($26<<2)|0); //@line 2027 "stream_decoder.c"
 $28 = HEAP32[$27>>2]|0; //@line 2027 "stream_decoder.c"
 $29 = $17 ^ $28; //@line 2027 "stream_decoder.c"
 $11 = $29; //@line 2027 "stream_decoder.c"
 $30 = $11; //@line 2028 "stream_decoder.c"
 $31 = $30 << 8; //@line 2028 "stream_decoder.c"
 $32 = $31 & 65535; //@line 2028 "stream_decoder.c"
 $33 = $11; //@line 2028 "stream_decoder.c"
 $34 = $33 >>> 8; //@line 2028 "stream_decoder.c"
 $35 = $4; //@line 2028 "stream_decoder.c"
 $36 = ((($35)) + 4|0); //@line 2028 "stream_decoder.c"
 $37 = HEAP32[$36>>2]|0; //@line 2028 "stream_decoder.c"
 $38 = ((($37)) + 3612|0); //@line 2028 "stream_decoder.c"
 $39 = ((($38)) + 1|0); //@line 2028 "stream_decoder.c"
 $40 = HEAP8[$39>>0]|0; //@line 2028 "stream_decoder.c"
 $41 = $40&255; //@line 2028 "stream_decoder.c"
 $42 = $34 ^ $41; //@line 2028 "stream_decoder.c"
 $43 = (8 + ($42<<2)|0); //@line 2028 "stream_decoder.c"
 $44 = HEAP32[$43>>2]|0; //@line 2028 "stream_decoder.c"
 $45 = $32 ^ $44; //@line 2028 "stream_decoder.c"
 $11 = $45; //@line 2028 "stream_decoder.c"
 $46 = $4; //@line 2029 "stream_decoder.c"
 $47 = ((($46)) + 4|0); //@line 2029 "stream_decoder.c"
 $48 = HEAP32[$47>>2]|0; //@line 2029 "stream_decoder.c"
 $49 = ((($48)) + 56|0); //@line 2029 "stream_decoder.c"
 $50 = HEAP32[$49>>2]|0; //@line 2029 "stream_decoder.c"
 $51 = $11; //@line 2029 "stream_decoder.c"
 $52 = $51&65535; //@line 2029 "stream_decoder.c"
 _FLAC__bitreader_reset_read_crc16($50,$52); //@line 2029 "stream_decoder.c"
 $53 = $4; //@line 2031 "stream_decoder.c"
 $54 = (_read_frame_header_($53)|0); //@line 2031 "stream_decoder.c"
 $55 = ($54|0)!=(0); //@line 2031 "stream_decoder.c"
 if (!($55)) {
  $3 = 0; //@line 2032 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 $56 = $4; //@line 2033 "stream_decoder.c"
 $57 = HEAP32[$56>>2]|0; //@line 2033 "stream_decoder.c"
 $58 = HEAP32[$57>>2]|0; //@line 2033 "stream_decoder.c"
 $59 = ($58|0)==(2); //@line 2033 "stream_decoder.c"
 if ($59) {
  $3 = 1; //@line 2034 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 $60 = $4; //@line 2035 "stream_decoder.c"
 $61 = $4; //@line 2035 "stream_decoder.c"
 $62 = ((($61)) + 4|0); //@line 2035 "stream_decoder.c"
 $63 = HEAP32[$62>>2]|0; //@line 2035 "stream_decoder.c"
 $64 = ((($63)) + 1136|0); //@line 2035 "stream_decoder.c"
 $65 = HEAP32[$64>>2]|0; //@line 2035 "stream_decoder.c"
 $66 = $4; //@line 2035 "stream_decoder.c"
 $67 = ((($66)) + 4|0); //@line 2035 "stream_decoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 2035 "stream_decoder.c"
 $69 = ((($68)) + 1136|0); //@line 2035 "stream_decoder.c"
 $70 = ((($69)) + 8|0); //@line 2035 "stream_decoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 2035 "stream_decoder.c"
 $72 = (_allocate_output_($60,$65,$71)|0); //@line 2035 "stream_decoder.c"
 $73 = ($72|0)!=(0); //@line 2035 "stream_decoder.c"
 if (!($73)) {
  $3 = 0; //@line 2036 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 $7 = 0; //@line 2037 "stream_decoder.c"
 while(1) {
  $74 = $7; //@line 2037 "stream_decoder.c"
  $75 = $4; //@line 2037 "stream_decoder.c"
  $76 = ((($75)) + 4|0); //@line 2037 "stream_decoder.c"
  $77 = HEAP32[$76>>2]|0; //@line 2037 "stream_decoder.c"
  $78 = ((($77)) + 1136|0); //@line 2037 "stream_decoder.c"
  $79 = ((($78)) + 8|0); //@line 2037 "stream_decoder.c"
  $80 = HEAP32[$79>>2]|0; //@line 2037 "stream_decoder.c"
  $81 = ($74>>>0)<($80>>>0); //@line 2037 "stream_decoder.c"
  $82 = $4;
  if (!($81)) {
   label = 21;
   break;
  }
  $83 = ((($82)) + 4|0); //@line 2041 "stream_decoder.c"
  $84 = HEAP32[$83>>2]|0; //@line 2041 "stream_decoder.c"
  $85 = ((($84)) + 1136|0); //@line 2041 "stream_decoder.c"
  $86 = ((($85)) + 16|0); //@line 2041 "stream_decoder.c"
  $87 = HEAP32[$86>>2]|0; //@line 2041 "stream_decoder.c"
  $13 = $87; //@line 2041 "stream_decoder.c"
  $88 = $4; //@line 2042 "stream_decoder.c"
  $89 = ((($88)) + 4|0); //@line 2042 "stream_decoder.c"
  $90 = HEAP32[$89>>2]|0; //@line 2042 "stream_decoder.c"
  $91 = ((($90)) + 1136|0); //@line 2042 "stream_decoder.c"
  $92 = ((($91)) + 12|0); //@line 2042 "stream_decoder.c"
  $93 = HEAP32[$92>>2]|0; //@line 2042 "stream_decoder.c"
  switch ($93|0) {
  case 3:  {
   $102 = $7; //@line 2058 "stream_decoder.c"
   $103 = ($102|0)==(1); //@line 2058 "stream_decoder.c"
   if ($103) {
    $104 = $13; //@line 2059 "stream_decoder.c"
    $105 = (($104) + 1)|0; //@line 2059 "stream_decoder.c"
    $13 = $105; //@line 2059 "stream_decoder.c"
   }
   break;
  }
  case 1:  {
   $94 = $7; //@line 2048 "stream_decoder.c"
   $95 = ($94|0)==(1); //@line 2048 "stream_decoder.c"
   if ($95) {
    $96 = $13; //@line 2049 "stream_decoder.c"
    $97 = (($96) + 1)|0; //@line 2049 "stream_decoder.c"
    $13 = $97; //@line 2049 "stream_decoder.c"
   }
   break;
  }
  case 2:  {
   $98 = $7; //@line 2053 "stream_decoder.c"
   $99 = ($98|0)==(0); //@line 2053 "stream_decoder.c"
   if ($99) {
    $100 = $13; //@line 2054 "stream_decoder.c"
    $101 = (($100) + 1)|0; //@line 2054 "stream_decoder.c"
    $13 = $101; //@line 2054 "stream_decoder.c"
   }
   break;
  }
  default: {
  }
  }
  $106 = $4; //@line 2067 "stream_decoder.c"
  $107 = $7; //@line 2067 "stream_decoder.c"
  $108 = $13; //@line 2067 "stream_decoder.c"
  $109 = $6; //@line 2067 "stream_decoder.c"
  $110 = (_read_subframe_($106,$107,$108,$109)|0); //@line 2067 "stream_decoder.c"
  $111 = ($110|0)!=(0); //@line 2067 "stream_decoder.c"
  if (!($111)) {
   label = 17;
   break;
  }
  $112 = $4; //@line 2069 "stream_decoder.c"
  $113 = HEAP32[$112>>2]|0; //@line 2069 "stream_decoder.c"
  $114 = HEAP32[$113>>2]|0; //@line 2069 "stream_decoder.c"
  $115 = ($114|0)==(2); //@line 2069 "stream_decoder.c"
  if ($115) {
   label = 19;
   break;
  }
  $116 = $7; //@line 2037 "stream_decoder.c"
  $117 = (($116) + 1)|0; //@line 2037 "stream_decoder.c"
  $7 = $117; //@line 2037 "stream_decoder.c"
 }
 if ((label|0) == 17) {
  $3 = 0; //@line 2068 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 else if ((label|0) == 19) {
  $3 = 1; //@line 2070 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 else if ((label|0) == 21) {
  $118 = (_read_zero_padding_($82)|0); //@line 2072 "stream_decoder.c"
  $119 = ($118|0)!=(0); //@line 2072 "stream_decoder.c"
  if (!($119)) {
   $3 = 0; //@line 2073 "stream_decoder.c"
   $396 = $3; //@line 2160 "stream_decoder.c"
   STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
  }
  $120 = $4; //@line 2074 "stream_decoder.c"
  $121 = HEAP32[$120>>2]|0; //@line 2074 "stream_decoder.c"
  $122 = HEAP32[$121>>2]|0; //@line 2074 "stream_decoder.c"
  $123 = ($122|0)==(2); //@line 2074 "stream_decoder.c"
  if ($123) {
   $3 = 1; //@line 2075 "stream_decoder.c"
   $396 = $3; //@line 2160 "stream_decoder.c"
   STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
  }
  $124 = $4; //@line 2080 "stream_decoder.c"
  $125 = ((($124)) + 4|0); //@line 2080 "stream_decoder.c"
  $126 = HEAP32[$125>>2]|0; //@line 2080 "stream_decoder.c"
  $127 = ((($126)) + 56|0); //@line 2080 "stream_decoder.c"
  $128 = HEAP32[$127>>2]|0; //@line 2080 "stream_decoder.c"
  $129 = (_FLAC__bitreader_get_read_crc16($128)|0); //@line 2080 "stream_decoder.c"
  $130 = $129&65535; //@line 2080 "stream_decoder.c"
  $11 = $130; //@line 2080 "stream_decoder.c"
  $131 = $4; //@line 2081 "stream_decoder.c"
  $132 = ((($131)) + 4|0); //@line 2081 "stream_decoder.c"
  $133 = HEAP32[$132>>2]|0; //@line 2081 "stream_decoder.c"
  $134 = ((($133)) + 56|0); //@line 2081 "stream_decoder.c"
  $135 = HEAP32[$134>>2]|0; //@line 2081 "stream_decoder.c"
  $136 = HEAP32[279]|0; //@line 2081 "stream_decoder.c"
  $137 = (_FLAC__bitreader_read_raw_uint32($135,$12,$136)|0); //@line 2081 "stream_decoder.c"
  $138 = ($137|0)!=(0); //@line 2081 "stream_decoder.c"
  if (!($138)) {
   $3 = 0; //@line 2082 "stream_decoder.c"
   $396 = $3; //@line 2160 "stream_decoder.c"
   STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
  }
  $139 = $11; //@line 2083 "stream_decoder.c"
  $140 = HEAP32[$12>>2]|0; //@line 2083 "stream_decoder.c"
  $141 = ($139|0)==($140|0); //@line 2083 "stream_decoder.c"
  L40: do {
   if ($141) {
    $142 = $6; //@line 2084 "stream_decoder.c"
    $143 = ($142|0)!=(0); //@line 2084 "stream_decoder.c"
    if ($143) {
     $144 = $4; //@line 2086 "stream_decoder.c"
     $145 = ((($144)) + 4|0); //@line 2086 "stream_decoder.c"
     $146 = HEAP32[$145>>2]|0; //@line 2086 "stream_decoder.c"
     $147 = ((($146)) + 1136|0); //@line 2086 "stream_decoder.c"
     $148 = ((($147)) + 12|0); //@line 2086 "stream_decoder.c"
     $149 = HEAP32[$148>>2]|0; //@line 2086 "stream_decoder.c"
     switch ($149|0) {
     case 3:  {
      $8 = 0; //@line 2102 "stream_decoder.c"
      while(1) {
       $212 = $8; //@line 2102 "stream_decoder.c"
       $213 = $4; //@line 2102 "stream_decoder.c"
       $214 = ((($213)) + 4|0); //@line 2102 "stream_decoder.c"
       $215 = HEAP32[$214>>2]|0; //@line 2102 "stream_decoder.c"
       $216 = ((($215)) + 1136|0); //@line 2102 "stream_decoder.c"
       $217 = HEAP32[$216>>2]|0; //@line 2102 "stream_decoder.c"
       $218 = ($212>>>0)<($217>>>0); //@line 2102 "stream_decoder.c"
       if (!($218)) {
        break L40;
       }
       $219 = $4; //@line 2104 "stream_decoder.c"
       $220 = ((($219)) + 4|0); //@line 2104 "stream_decoder.c"
       $221 = HEAP32[$220>>2]|0; //@line 2104 "stream_decoder.c"
       $222 = ((($221)) + 60|0); //@line 2104 "stream_decoder.c"
       $223 = HEAP32[$222>>2]|0; //@line 2104 "stream_decoder.c"
       $224 = $8; //@line 2104 "stream_decoder.c"
       $225 = (($223) + ($224<<2)|0); //@line 2104 "stream_decoder.c"
       $226 = HEAP32[$225>>2]|0; //@line 2104 "stream_decoder.c"
       $9 = $226; //@line 2104 "stream_decoder.c"
       $227 = $4; //@line 2105 "stream_decoder.c"
       $228 = ((($227)) + 4|0); //@line 2105 "stream_decoder.c"
       $229 = HEAP32[$228>>2]|0; //@line 2105 "stream_decoder.c"
       $230 = ((($229)) + 60|0); //@line 2105 "stream_decoder.c"
       $231 = ((($230)) + 4|0); //@line 2105 "stream_decoder.c"
       $232 = HEAP32[$231>>2]|0; //@line 2105 "stream_decoder.c"
       $233 = $8; //@line 2105 "stream_decoder.c"
       $234 = (($232) + ($233<<2)|0); //@line 2105 "stream_decoder.c"
       $235 = HEAP32[$234>>2]|0; //@line 2105 "stream_decoder.c"
       $10 = $235; //@line 2105 "stream_decoder.c"
       $236 = $9; //@line 2106 "stream_decoder.c"
       $237 = $236 << 1; //@line 2106 "stream_decoder.c"
       $9 = $237; //@line 2106 "stream_decoder.c"
       $238 = $10; //@line 2107 "stream_decoder.c"
       $239 = $238 & 1; //@line 2107 "stream_decoder.c"
       $240 = $9; //@line 2107 "stream_decoder.c"
       $241 = $240 | $239; //@line 2107 "stream_decoder.c"
       $9 = $241; //@line 2107 "stream_decoder.c"
       $242 = $9; //@line 2108 "stream_decoder.c"
       $243 = $10; //@line 2108 "stream_decoder.c"
       $244 = (($242) + ($243))|0; //@line 2108 "stream_decoder.c"
       $245 = $244 >> 1; //@line 2108 "stream_decoder.c"
       $246 = $4; //@line 2108 "stream_decoder.c"
       $247 = ((($246)) + 4|0); //@line 2108 "stream_decoder.c"
       $248 = HEAP32[$247>>2]|0; //@line 2108 "stream_decoder.c"
       $249 = ((($248)) + 60|0); //@line 2108 "stream_decoder.c"
       $250 = HEAP32[$249>>2]|0; //@line 2108 "stream_decoder.c"
       $251 = $8; //@line 2108 "stream_decoder.c"
       $252 = (($250) + ($251<<2)|0); //@line 2108 "stream_decoder.c"
       HEAP32[$252>>2] = $245; //@line 2108 "stream_decoder.c"
       $253 = $9; //@line 2109 "stream_decoder.c"
       $254 = $10; //@line 2109 "stream_decoder.c"
       $255 = (($253) - ($254))|0; //@line 2109 "stream_decoder.c"
       $256 = $255 >> 1; //@line 2109 "stream_decoder.c"
       $257 = $4; //@line 2109 "stream_decoder.c"
       $258 = ((($257)) + 4|0); //@line 2109 "stream_decoder.c"
       $259 = HEAP32[$258>>2]|0; //@line 2109 "stream_decoder.c"
       $260 = ((($259)) + 60|0); //@line 2109 "stream_decoder.c"
       $261 = ((($260)) + 4|0); //@line 2109 "stream_decoder.c"
       $262 = HEAP32[$261>>2]|0; //@line 2109 "stream_decoder.c"
       $263 = $8; //@line 2109 "stream_decoder.c"
       $264 = (($262) + ($263<<2)|0); //@line 2109 "stream_decoder.c"
       HEAP32[$264>>2] = $256; //@line 2109 "stream_decoder.c"
       $265 = $8; //@line 2102 "stream_decoder.c"
       $266 = (($265) + 1)|0; //@line 2102 "stream_decoder.c"
       $8 = $266; //@line 2102 "stream_decoder.c"
      }
      break;
     }
     case 1:  {
      $8 = 0; //@line 2092 "stream_decoder.c"
      while(1) {
       $150 = $8; //@line 2092 "stream_decoder.c"
       $151 = $4; //@line 2092 "stream_decoder.c"
       $152 = ((($151)) + 4|0); //@line 2092 "stream_decoder.c"
       $153 = HEAP32[$152>>2]|0; //@line 2092 "stream_decoder.c"
       $154 = ((($153)) + 1136|0); //@line 2092 "stream_decoder.c"
       $155 = HEAP32[$154>>2]|0; //@line 2092 "stream_decoder.c"
       $156 = ($150>>>0)<($155>>>0); //@line 2092 "stream_decoder.c"
       if (!($156)) {
        break L40;
       }
       $157 = $4; //@line 2093 "stream_decoder.c"
       $158 = ((($157)) + 4|0); //@line 2093 "stream_decoder.c"
       $159 = HEAP32[$158>>2]|0; //@line 2093 "stream_decoder.c"
       $160 = ((($159)) + 60|0); //@line 2093 "stream_decoder.c"
       $161 = HEAP32[$160>>2]|0; //@line 2093 "stream_decoder.c"
       $162 = $8; //@line 2093 "stream_decoder.c"
       $163 = (($161) + ($162<<2)|0); //@line 2093 "stream_decoder.c"
       $164 = HEAP32[$163>>2]|0; //@line 2093 "stream_decoder.c"
       $165 = $4; //@line 2093 "stream_decoder.c"
       $166 = ((($165)) + 4|0); //@line 2093 "stream_decoder.c"
       $167 = HEAP32[$166>>2]|0; //@line 2093 "stream_decoder.c"
       $168 = ((($167)) + 60|0); //@line 2093 "stream_decoder.c"
       $169 = ((($168)) + 4|0); //@line 2093 "stream_decoder.c"
       $170 = HEAP32[$169>>2]|0; //@line 2093 "stream_decoder.c"
       $171 = $8; //@line 2093 "stream_decoder.c"
       $172 = (($170) + ($171<<2)|0); //@line 2093 "stream_decoder.c"
       $173 = HEAP32[$172>>2]|0; //@line 2093 "stream_decoder.c"
       $174 = (($164) - ($173))|0; //@line 2093 "stream_decoder.c"
       $175 = $4; //@line 2093 "stream_decoder.c"
       $176 = ((($175)) + 4|0); //@line 2093 "stream_decoder.c"
       $177 = HEAP32[$176>>2]|0; //@line 2093 "stream_decoder.c"
       $178 = ((($177)) + 60|0); //@line 2093 "stream_decoder.c"
       $179 = ((($178)) + 4|0); //@line 2093 "stream_decoder.c"
       $180 = HEAP32[$179>>2]|0; //@line 2093 "stream_decoder.c"
       $181 = $8; //@line 2093 "stream_decoder.c"
       $182 = (($180) + ($181<<2)|0); //@line 2093 "stream_decoder.c"
       HEAP32[$182>>2] = $174; //@line 2093 "stream_decoder.c"
       $183 = $8; //@line 2092 "stream_decoder.c"
       $184 = (($183) + 1)|0; //@line 2092 "stream_decoder.c"
       $8 = $184; //@line 2092 "stream_decoder.c"
      }
      break;
     }
     case 2:  {
      $8 = 0; //@line 2097 "stream_decoder.c"
      while(1) {
       $185 = $8; //@line 2097 "stream_decoder.c"
       $186 = $4; //@line 2097 "stream_decoder.c"
       $187 = ((($186)) + 4|0); //@line 2097 "stream_decoder.c"
       $188 = HEAP32[$187>>2]|0; //@line 2097 "stream_decoder.c"
       $189 = ((($188)) + 1136|0); //@line 2097 "stream_decoder.c"
       $190 = HEAP32[$189>>2]|0; //@line 2097 "stream_decoder.c"
       $191 = ($185>>>0)<($190>>>0); //@line 2097 "stream_decoder.c"
       if (!($191)) {
        break L40;
       }
       $192 = $4; //@line 2098 "stream_decoder.c"
       $193 = ((($192)) + 4|0); //@line 2098 "stream_decoder.c"
       $194 = HEAP32[$193>>2]|0; //@line 2098 "stream_decoder.c"
       $195 = ((($194)) + 60|0); //@line 2098 "stream_decoder.c"
       $196 = ((($195)) + 4|0); //@line 2098 "stream_decoder.c"
       $197 = HEAP32[$196>>2]|0; //@line 2098 "stream_decoder.c"
       $198 = $8; //@line 2098 "stream_decoder.c"
       $199 = (($197) + ($198<<2)|0); //@line 2098 "stream_decoder.c"
       $200 = HEAP32[$199>>2]|0; //@line 2098 "stream_decoder.c"
       $201 = $4; //@line 2098 "stream_decoder.c"
       $202 = ((($201)) + 4|0); //@line 2098 "stream_decoder.c"
       $203 = HEAP32[$202>>2]|0; //@line 2098 "stream_decoder.c"
       $204 = ((($203)) + 60|0); //@line 2098 "stream_decoder.c"
       $205 = HEAP32[$204>>2]|0; //@line 2098 "stream_decoder.c"
       $206 = $8; //@line 2098 "stream_decoder.c"
       $207 = (($205) + ($206<<2)|0); //@line 2098 "stream_decoder.c"
       $208 = HEAP32[$207>>2]|0; //@line 2098 "stream_decoder.c"
       $209 = (($208) + ($200))|0; //@line 2098 "stream_decoder.c"
       HEAP32[$207>>2] = $209; //@line 2098 "stream_decoder.c"
       $210 = $8; //@line 2097 "stream_decoder.c"
       $211 = (($210) + 1)|0; //@line 2097 "stream_decoder.c"
       $8 = $211; //@line 2097 "stream_decoder.c"
      }
      break;
     }
     default: {
      break L40;
     }
     }
    }
   } else {
    $267 = $4; //@line 2126 "stream_decoder.c"
    _send_error_to_client_($267,2); //@line 2126 "stream_decoder.c"
    $268 = $6; //@line 2127 "stream_decoder.c"
    $269 = ($268|0)!=(0); //@line 2127 "stream_decoder.c"
    if ($269) {
     $7 = 0; //@line 2128 "stream_decoder.c"
     while(1) {
      $270 = $7; //@line 2128 "stream_decoder.c"
      $271 = $4; //@line 2128 "stream_decoder.c"
      $272 = ((($271)) + 4|0); //@line 2128 "stream_decoder.c"
      $273 = HEAP32[$272>>2]|0; //@line 2128 "stream_decoder.c"
      $274 = ((($273)) + 1136|0); //@line 2128 "stream_decoder.c"
      $275 = ((($274)) + 8|0); //@line 2128 "stream_decoder.c"
      $276 = HEAP32[$275>>2]|0; //@line 2128 "stream_decoder.c"
      $277 = ($270>>>0)<($276>>>0); //@line 2128 "stream_decoder.c"
      if (!($277)) {
       break L40;
      }
      $278 = $4; //@line 2129 "stream_decoder.c"
      $279 = ((($278)) + 4|0); //@line 2129 "stream_decoder.c"
      $280 = HEAP32[$279>>2]|0; //@line 2129 "stream_decoder.c"
      $281 = ((($280)) + 60|0); //@line 2129 "stream_decoder.c"
      $282 = $7; //@line 2129 "stream_decoder.c"
      $283 = (($281) + ($282<<2)|0); //@line 2129 "stream_decoder.c"
      $284 = HEAP32[$283>>2]|0; //@line 2129 "stream_decoder.c"
      $285 = $4; //@line 2129 "stream_decoder.c"
      $286 = ((($285)) + 4|0); //@line 2129 "stream_decoder.c"
      $287 = HEAP32[$286>>2]|0; //@line 2129 "stream_decoder.c"
      $288 = ((($287)) + 1136|0); //@line 2129 "stream_decoder.c"
      $289 = HEAP32[$288>>2]|0; //@line 2129 "stream_decoder.c"
      $290 = $289<<2; //@line 2129 "stream_decoder.c"
      _memset(($284|0),0,($290|0))|0; //@line 2129 "stream_decoder.c"
      $291 = $7; //@line 2128 "stream_decoder.c"
      $292 = (($291) + 1)|0; //@line 2128 "stream_decoder.c"
      $7 = $292; //@line 2128 "stream_decoder.c"
     }
    }
   }
  } while(0);
  $293 = $5; //@line 2134 "stream_decoder.c"
  HEAP32[$293>>2] = 1; //@line 2134 "stream_decoder.c"
  $294 = $4; //@line 2137 "stream_decoder.c"
  $295 = ((($294)) + 4|0); //@line 2137 "stream_decoder.c"
  $296 = HEAP32[$295>>2]|0; //@line 2137 "stream_decoder.c"
  $297 = ((($296)) + 232|0); //@line 2137 "stream_decoder.c"
  $298 = HEAP32[$297>>2]|0; //@line 2137 "stream_decoder.c"
  $299 = ($298|0)!=(0); //@line 2137 "stream_decoder.c"
  if ($299) {
   $300 = $4; //@line 2138 "stream_decoder.c"
   $301 = ((($300)) + 4|0); //@line 2138 "stream_decoder.c"
   $302 = HEAP32[$301>>2]|0; //@line 2138 "stream_decoder.c"
   $303 = ((($302)) + 232|0); //@line 2138 "stream_decoder.c"
   $304 = HEAP32[$303>>2]|0; //@line 2138 "stream_decoder.c"
   $305 = $4; //@line 2138 "stream_decoder.c"
   $306 = ((($305)) + 4|0); //@line 2138 "stream_decoder.c"
   $307 = HEAP32[$306>>2]|0; //@line 2138 "stream_decoder.c"
   $308 = ((($307)) + 228|0); //@line 2138 "stream_decoder.c"
   HEAP32[$308>>2] = $304; //@line 2138 "stream_decoder.c"
  }
  $309 = $4; //@line 2141 "stream_decoder.c"
  $310 = ((($309)) + 4|0); //@line 2141 "stream_decoder.c"
  $311 = HEAP32[$310>>2]|0; //@line 2141 "stream_decoder.c"
  $312 = ((($311)) + 1136|0); //@line 2141 "stream_decoder.c"
  $313 = ((($312)) + 8|0); //@line 2141 "stream_decoder.c"
  $314 = HEAP32[$313>>2]|0; //@line 2141 "stream_decoder.c"
  $315 = $4; //@line 2141 "stream_decoder.c"
  $316 = HEAP32[$315>>2]|0; //@line 2141 "stream_decoder.c"
  $317 = ((($316)) + 8|0); //@line 2141 "stream_decoder.c"
  HEAP32[$317>>2] = $314; //@line 2141 "stream_decoder.c"
  $318 = $4; //@line 2142 "stream_decoder.c"
  $319 = ((($318)) + 4|0); //@line 2142 "stream_decoder.c"
  $320 = HEAP32[$319>>2]|0; //@line 2142 "stream_decoder.c"
  $321 = ((($320)) + 1136|0); //@line 2142 "stream_decoder.c"
  $322 = ((($321)) + 12|0); //@line 2142 "stream_decoder.c"
  $323 = HEAP32[$322>>2]|0; //@line 2142 "stream_decoder.c"
  $324 = $4; //@line 2142 "stream_decoder.c"
  $325 = HEAP32[$324>>2]|0; //@line 2142 "stream_decoder.c"
  $326 = ((($325)) + 12|0); //@line 2142 "stream_decoder.c"
  HEAP32[$326>>2] = $323; //@line 2142 "stream_decoder.c"
  $327 = $4; //@line 2143 "stream_decoder.c"
  $328 = ((($327)) + 4|0); //@line 2143 "stream_decoder.c"
  $329 = HEAP32[$328>>2]|0; //@line 2143 "stream_decoder.c"
  $330 = ((($329)) + 1136|0); //@line 2143 "stream_decoder.c"
  $331 = ((($330)) + 16|0); //@line 2143 "stream_decoder.c"
  $332 = HEAP32[$331>>2]|0; //@line 2143 "stream_decoder.c"
  $333 = $4; //@line 2143 "stream_decoder.c"
  $334 = HEAP32[$333>>2]|0; //@line 2143 "stream_decoder.c"
  $335 = ((($334)) + 16|0); //@line 2143 "stream_decoder.c"
  HEAP32[$335>>2] = $332; //@line 2143 "stream_decoder.c"
  $336 = $4; //@line 2144 "stream_decoder.c"
  $337 = ((($336)) + 4|0); //@line 2144 "stream_decoder.c"
  $338 = HEAP32[$337>>2]|0; //@line 2144 "stream_decoder.c"
  $339 = ((($338)) + 1136|0); //@line 2144 "stream_decoder.c"
  $340 = ((($339)) + 4|0); //@line 2144 "stream_decoder.c"
  $341 = HEAP32[$340>>2]|0; //@line 2144 "stream_decoder.c"
  $342 = $4; //@line 2144 "stream_decoder.c"
  $343 = HEAP32[$342>>2]|0; //@line 2144 "stream_decoder.c"
  $344 = ((($343)) + 20|0); //@line 2144 "stream_decoder.c"
  HEAP32[$344>>2] = $341; //@line 2144 "stream_decoder.c"
  $345 = $4; //@line 2145 "stream_decoder.c"
  $346 = ((($345)) + 4|0); //@line 2145 "stream_decoder.c"
  $347 = HEAP32[$346>>2]|0; //@line 2145 "stream_decoder.c"
  $348 = ((($347)) + 1136|0); //@line 2145 "stream_decoder.c"
  $349 = HEAP32[$348>>2]|0; //@line 2145 "stream_decoder.c"
  $350 = $4; //@line 2145 "stream_decoder.c"
  $351 = HEAP32[$350>>2]|0; //@line 2145 "stream_decoder.c"
  $352 = ((($351)) + 24|0); //@line 2145 "stream_decoder.c"
  HEAP32[$352>>2] = $349; //@line 2145 "stream_decoder.c"
  $353 = $4; //@line 2148 "stream_decoder.c"
  $354 = ((($353)) + 4|0); //@line 2148 "stream_decoder.c"
  $355 = HEAP32[$354>>2]|0; //@line 2148 "stream_decoder.c"
  $356 = ((($355)) + 1136|0); //@line 2148 "stream_decoder.c"
  $357 = ((($356)) + 24|0); //@line 2148 "stream_decoder.c"
  $358 = $357; //@line 2148 "stream_decoder.c"
  $359 = $358; //@line 2148 "stream_decoder.c"
  $360 = HEAP32[$359>>2]|0; //@line 2148 "stream_decoder.c"
  $361 = (($358) + 4)|0; //@line 2148 "stream_decoder.c"
  $362 = $361; //@line 2148 "stream_decoder.c"
  $363 = HEAP32[$362>>2]|0; //@line 2148 "stream_decoder.c"
  $364 = $4; //@line 2148 "stream_decoder.c"
  $365 = ((($364)) + 4|0); //@line 2148 "stream_decoder.c"
  $366 = HEAP32[$365>>2]|0; //@line 2148 "stream_decoder.c"
  $367 = ((($366)) + 1136|0); //@line 2148 "stream_decoder.c"
  $368 = HEAP32[$367>>2]|0; //@line 2148 "stream_decoder.c"
  $369 = (_i64Add(($360|0),($363|0),($368|0),0)|0); //@line 2148 "stream_decoder.c"
  $370 = tempRet0; //@line 2148 "stream_decoder.c"
  $371 = $4; //@line 2148 "stream_decoder.c"
  $372 = ((($371)) + 4|0); //@line 2148 "stream_decoder.c"
  $373 = HEAP32[$372>>2]|0; //@line 2148 "stream_decoder.c"
  $374 = ((($373)) + 240|0); //@line 2148 "stream_decoder.c"
  $375 = $374; //@line 2148 "stream_decoder.c"
  $376 = $375; //@line 2148 "stream_decoder.c"
  HEAP32[$376>>2] = $369; //@line 2148 "stream_decoder.c"
  $377 = (($375) + 4)|0; //@line 2148 "stream_decoder.c"
  $378 = $377; //@line 2148 "stream_decoder.c"
  HEAP32[$378>>2] = $370; //@line 2148 "stream_decoder.c"
  $379 = $6; //@line 2151 "stream_decoder.c"
  $380 = ($379|0)!=(0); //@line 2151 "stream_decoder.c"
  if ($380) {
   $381 = $4; //@line 2152 "stream_decoder.c"
   $382 = $4; //@line 2152 "stream_decoder.c"
   $383 = ((($382)) + 4|0); //@line 2152 "stream_decoder.c"
   $384 = HEAP32[$383>>2]|0; //@line 2152 "stream_decoder.c"
   $385 = ((($384)) + 1136|0); //@line 2152 "stream_decoder.c"
   $386 = $4; //@line 2152 "stream_decoder.c"
   $387 = ((($386)) + 4|0); //@line 2152 "stream_decoder.c"
   $388 = HEAP32[$387>>2]|0; //@line 2152 "stream_decoder.c"
   $389 = ((($388)) + 60|0); //@line 2152 "stream_decoder.c"
   $390 = (_write_audio_frame_to_client_($381,$385,$389)|0); //@line 2152 "stream_decoder.c"
   $391 = ($390|0)!=(0); //@line 2152 "stream_decoder.c"
   if ($391) {
    $392 = $4; //@line 2153 "stream_decoder.c"
    $393 = HEAP32[$392>>2]|0; //@line 2153 "stream_decoder.c"
    HEAP32[$393>>2] = 7; //@line 2153 "stream_decoder.c"
    $3 = 0; //@line 2154 "stream_decoder.c"
    $396 = $3; //@line 2160 "stream_decoder.c"
    STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
   }
  }
  $394 = $4; //@line 2158 "stream_decoder.c"
  $395 = HEAP32[$394>>2]|0; //@line 2158 "stream_decoder.c"
  HEAP32[$395>>2] = 2; //@line 2158 "stream_decoder.c"
  $3 = 1; //@line 2159 "stream_decoder.c"
  $396 = $3; //@line 2160 "stream_decoder.c"
  STACKTOP = sp;return ($396|0); //@line 2160 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_frame_header_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 36|0;
 $4 = sp;
 $9 = sp + 48|0;
 $10 = sp + 20|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $2 = $0;
 $6 = 0; //@line 2166 "stream_decoder.c"
 $7 = 0; //@line 2166 "stream_decoder.c"
 $11 = 0; //@line 2169 "stream_decoder.c"
 $14 = $2; //@line 2174 "stream_decoder.c"
 $15 = ((($14)) + 4|0); //@line 2174 "stream_decoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 2174 "stream_decoder.c"
 $17 = ((($16)) + 3612|0); //@line 2174 "stream_decoder.c"
 $18 = HEAP8[$17>>0]|0; //@line 2174 "stream_decoder.c"
 HEAP8[$9>>0] = $18; //@line 2174 "stream_decoder.c"
 $19 = $2; //@line 2175 "stream_decoder.c"
 $20 = ((($19)) + 4|0); //@line 2175 "stream_decoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 2175 "stream_decoder.c"
 $22 = ((($21)) + 3612|0); //@line 2175 "stream_decoder.c"
 $23 = ((($22)) + 1|0); //@line 2175 "stream_decoder.c"
 $24 = HEAP8[$23>>0]|0; //@line 2175 "stream_decoder.c"
 $25 = ((($9)) + 1|0); //@line 2175 "stream_decoder.c"
 HEAP8[$25>>0] = $24; //@line 2175 "stream_decoder.c"
 HEAP32[$10>>2] = 2; //@line 2176 "stream_decoder.c"
 $26 = ((($9)) + 1|0); //@line 2179 "stream_decoder.c"
 $27 = HEAP8[$26>>0]|0; //@line 2179 "stream_decoder.c"
 $28 = $27&255; //@line 2179 "stream_decoder.c"
 $29 = $28 & 2; //@line 2179 "stream_decoder.c"
 $30 = ($29|0)!=(0); //@line 2179 "stream_decoder.c"
 if ($30) {
  $11 = 1; //@line 2180 "stream_decoder.c"
 }
 $5 = 0; //@line 2204 "stream_decoder.c"
 while(1) {
  $31 = $5; //@line 2204 "stream_decoder.c"
  $32 = ($31>>>0)<(2); //@line 2204 "stream_decoder.c"
  if (!($32)) {
   label = 10;
   break;
  }
  $33 = $2; //@line 2205 "stream_decoder.c"
  $34 = ((($33)) + 4|0); //@line 2205 "stream_decoder.c"
  $35 = HEAP32[$34>>2]|0; //@line 2205 "stream_decoder.c"
  $36 = ((($35)) + 56|0); //@line 2205 "stream_decoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 2205 "stream_decoder.c"
  $38 = (_FLAC__bitreader_read_raw_uint32($37,$3,8)|0); //@line 2205 "stream_decoder.c"
  $39 = ($38|0)!=(0); //@line 2205 "stream_decoder.c"
  if (!($39)) {
   label = 6;
   break;
  }
  $40 = HEAP32[$3>>2]|0; //@line 2207 "stream_decoder.c"
  $41 = ($40|0)==(255); //@line 2207 "stream_decoder.c"
  $42 = HEAP32[$3>>2]|0;
  $43 = $42&255;
  if ($41) {
   label = 8;
   break;
  }
  $55 = HEAP32[$10>>2]|0; //@line 2215 "stream_decoder.c"
  $56 = (($55) + 1)|0; //@line 2215 "stream_decoder.c"
  HEAP32[$10>>2] = $56; //@line 2215 "stream_decoder.c"
  $57 = (($9) + ($55)|0); //@line 2215 "stream_decoder.c"
  HEAP8[$57>>0] = $43; //@line 2215 "stream_decoder.c"
  $58 = $5; //@line 2204 "stream_decoder.c"
  $59 = (($58) + 1)|0; //@line 2204 "stream_decoder.c"
  $5 = $59; //@line 2204 "stream_decoder.c"
 }
 if ((label|0) == 6) {
  $1 = 0; //@line 2206 "stream_decoder.c"
  $608 = $1; //@line 2469 "stream_decoder.c"
  STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
 }
 else if ((label|0) == 8) {
  $44 = $2; //@line 2209 "stream_decoder.c"
  $45 = ((($44)) + 4|0); //@line 2209 "stream_decoder.c"
  $46 = HEAP32[$45>>2]|0; //@line 2209 "stream_decoder.c"
  $47 = ((($46)) + 3614|0); //@line 2209 "stream_decoder.c"
  HEAP8[$47>>0] = $43; //@line 2209 "stream_decoder.c"
  $48 = $2; //@line 2210 "stream_decoder.c"
  $49 = ((($48)) + 4|0); //@line 2210 "stream_decoder.c"
  $50 = HEAP32[$49>>2]|0; //@line 2210 "stream_decoder.c"
  $51 = ((($50)) + 3520|0); //@line 2210 "stream_decoder.c"
  HEAP32[$51>>2] = 1; //@line 2210 "stream_decoder.c"
  $52 = $2; //@line 2211 "stream_decoder.c"
  _send_error_to_client_($52,1); //@line 2211 "stream_decoder.c"
  $53 = $2; //@line 2212 "stream_decoder.c"
  $54 = HEAP32[$53>>2]|0; //@line 2212 "stream_decoder.c"
  HEAP32[$54>>2] = 2; //@line 2212 "stream_decoder.c"
  $1 = 1; //@line 2213 "stream_decoder.c"
  $608 = $1; //@line 2469 "stream_decoder.c"
  STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
 }
 else if ((label|0) == 10) {
  $60 = ((($9)) + 2|0); //@line 2218 "stream_decoder.c"
  $61 = HEAP8[$60>>0]|0; //@line 2218 "stream_decoder.c"
  $62 = $61&255; //@line 2218 "stream_decoder.c"
  $63 = $62 >> 4; //@line 2218 "stream_decoder.c"
  HEAP32[$3>>2] = $63; //@line 2218 "stream_decoder.c"
  switch ($63|0) {
  case 0:  {
   $11 = 1; //@line 2220 "stream_decoder.c"
   break;
  }
  case 1:  {
   $64 = $2; //@line 2223 "stream_decoder.c"
   $65 = ((($64)) + 4|0); //@line 2223 "stream_decoder.c"
   $66 = HEAP32[$65>>2]|0; //@line 2223 "stream_decoder.c"
   $67 = ((($66)) + 1136|0); //@line 2223 "stream_decoder.c"
   HEAP32[$67>>2] = 192; //@line 2223 "stream_decoder.c"
   break;
  }
  case 5: case 4: case 3: case 2:  {
   $68 = HEAP32[$3>>2]|0; //@line 2229 "stream_decoder.c"
   $69 = (($68) - 2)|0; //@line 2229 "stream_decoder.c"
   $70 = 576 << $69; //@line 2229 "stream_decoder.c"
   $71 = $2; //@line 2229 "stream_decoder.c"
   $72 = ((($71)) + 4|0); //@line 2229 "stream_decoder.c"
   $73 = HEAP32[$72>>2]|0; //@line 2229 "stream_decoder.c"
   $74 = ((($73)) + 1136|0); //@line 2229 "stream_decoder.c"
   HEAP32[$74>>2] = $70; //@line 2229 "stream_decoder.c"
   break;
  }
  case 7: case 6:  {
   $75 = HEAP32[$3>>2]|0; //@line 2233 "stream_decoder.c"
   $6 = $75; //@line 2233 "stream_decoder.c"
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 8:  {
   $76 = HEAP32[$3>>2]|0; //@line 2243 "stream_decoder.c"
   $77 = (($76) - 8)|0; //@line 2243 "stream_decoder.c"
   $78 = 256 << $77; //@line 2243 "stream_decoder.c"
   $79 = $2; //@line 2243 "stream_decoder.c"
   $80 = ((($79)) + 4|0); //@line 2243 "stream_decoder.c"
   $81 = HEAP32[$80>>2]|0; //@line 2243 "stream_decoder.c"
   $82 = ((($81)) + 1136|0); //@line 2243 "stream_decoder.c"
   HEAP32[$82>>2] = $78; //@line 2243 "stream_decoder.c"
   break;
  }
  default: {
   // unreachable;
  }
  }
  $83 = ((($9)) + 2|0); //@line 2250 "stream_decoder.c"
  $84 = HEAP8[$83>>0]|0; //@line 2250 "stream_decoder.c"
  $85 = $84&255; //@line 2250 "stream_decoder.c"
  $86 = $85 & 15; //@line 2250 "stream_decoder.c"
  HEAP32[$3>>2] = $86; //@line 2250 "stream_decoder.c"
  L19: do {
   switch ($86|0) {
   case 0:  {
    $87 = $2; //@line 2252 "stream_decoder.c"
    $88 = ((($87)) + 4|0); //@line 2252 "stream_decoder.c"
    $89 = HEAP32[$88>>2]|0; //@line 2252 "stream_decoder.c"
    $90 = ((($89)) + 248|0); //@line 2252 "stream_decoder.c"
    $91 = HEAP32[$90>>2]|0; //@line 2252 "stream_decoder.c"
    $92 = ($91|0)!=(0); //@line 2252 "stream_decoder.c"
    if ($92) {
     $93 = $2; //@line 2253 "stream_decoder.c"
     $94 = ((($93)) + 4|0); //@line 2253 "stream_decoder.c"
     $95 = HEAP32[$94>>2]|0; //@line 2253 "stream_decoder.c"
     $96 = ((($95)) + 256|0); //@line 2253 "stream_decoder.c"
     $97 = ((($96)) + 16|0); //@line 2253 "stream_decoder.c"
     $98 = ((($97)) + 16|0); //@line 2253 "stream_decoder.c"
     $99 = HEAP32[$98>>2]|0; //@line 2253 "stream_decoder.c"
     $100 = $2; //@line 2253 "stream_decoder.c"
     $101 = ((($100)) + 4|0); //@line 2253 "stream_decoder.c"
     $102 = HEAP32[$101>>2]|0; //@line 2253 "stream_decoder.c"
     $103 = ((($102)) + 1136|0); //@line 2253 "stream_decoder.c"
     $104 = ((($103)) + 4|0); //@line 2253 "stream_decoder.c"
     HEAP32[$104>>2] = $99; //@line 2253 "stream_decoder.c"
     break L19;
    } else {
     $11 = 1; //@line 2255 "stream_decoder.c"
     break L19;
    }
    break;
   }
   case 1:  {
    $105 = $2; //@line 2258 "stream_decoder.c"
    $106 = ((($105)) + 4|0); //@line 2258 "stream_decoder.c"
    $107 = HEAP32[$106>>2]|0; //@line 2258 "stream_decoder.c"
    $108 = ((($107)) + 1136|0); //@line 2258 "stream_decoder.c"
    $109 = ((($108)) + 4|0); //@line 2258 "stream_decoder.c"
    HEAP32[$109>>2] = 88200; //@line 2258 "stream_decoder.c"
    break;
   }
   case 2:  {
    $110 = $2; //@line 2261 "stream_decoder.c"
    $111 = ((($110)) + 4|0); //@line 2261 "stream_decoder.c"
    $112 = HEAP32[$111>>2]|0; //@line 2261 "stream_decoder.c"
    $113 = ((($112)) + 1136|0); //@line 2261 "stream_decoder.c"
    $114 = ((($113)) + 4|0); //@line 2261 "stream_decoder.c"
    HEAP32[$114>>2] = 176400; //@line 2261 "stream_decoder.c"
    break;
   }
   case 3:  {
    $115 = $2; //@line 2264 "stream_decoder.c"
    $116 = ((($115)) + 4|0); //@line 2264 "stream_decoder.c"
    $117 = HEAP32[$116>>2]|0; //@line 2264 "stream_decoder.c"
    $118 = ((($117)) + 1136|0); //@line 2264 "stream_decoder.c"
    $119 = ((($118)) + 4|0); //@line 2264 "stream_decoder.c"
    HEAP32[$119>>2] = 192000; //@line 2264 "stream_decoder.c"
    break;
   }
   case 4:  {
    $120 = $2; //@line 2267 "stream_decoder.c"
    $121 = ((($120)) + 4|0); //@line 2267 "stream_decoder.c"
    $122 = HEAP32[$121>>2]|0; //@line 2267 "stream_decoder.c"
    $123 = ((($122)) + 1136|0); //@line 2267 "stream_decoder.c"
    $124 = ((($123)) + 4|0); //@line 2267 "stream_decoder.c"
    HEAP32[$124>>2] = 8000; //@line 2267 "stream_decoder.c"
    break;
   }
   case 5:  {
    $125 = $2; //@line 2270 "stream_decoder.c"
    $126 = ((($125)) + 4|0); //@line 2270 "stream_decoder.c"
    $127 = HEAP32[$126>>2]|0; //@line 2270 "stream_decoder.c"
    $128 = ((($127)) + 1136|0); //@line 2270 "stream_decoder.c"
    $129 = ((($128)) + 4|0); //@line 2270 "stream_decoder.c"
    HEAP32[$129>>2] = 16000; //@line 2270 "stream_decoder.c"
    break;
   }
   case 6:  {
    $130 = $2; //@line 2273 "stream_decoder.c"
    $131 = ((($130)) + 4|0); //@line 2273 "stream_decoder.c"
    $132 = HEAP32[$131>>2]|0; //@line 2273 "stream_decoder.c"
    $133 = ((($132)) + 1136|0); //@line 2273 "stream_decoder.c"
    $134 = ((($133)) + 4|0); //@line 2273 "stream_decoder.c"
    HEAP32[$134>>2] = 22050; //@line 2273 "stream_decoder.c"
    break;
   }
   case 7:  {
    $135 = $2; //@line 2276 "stream_decoder.c"
    $136 = ((($135)) + 4|0); //@line 2276 "stream_decoder.c"
    $137 = HEAP32[$136>>2]|0; //@line 2276 "stream_decoder.c"
    $138 = ((($137)) + 1136|0); //@line 2276 "stream_decoder.c"
    $139 = ((($138)) + 4|0); //@line 2276 "stream_decoder.c"
    HEAP32[$139>>2] = 24000; //@line 2276 "stream_decoder.c"
    break;
   }
   case 8:  {
    $140 = $2; //@line 2279 "stream_decoder.c"
    $141 = ((($140)) + 4|0); //@line 2279 "stream_decoder.c"
    $142 = HEAP32[$141>>2]|0; //@line 2279 "stream_decoder.c"
    $143 = ((($142)) + 1136|0); //@line 2279 "stream_decoder.c"
    $144 = ((($143)) + 4|0); //@line 2279 "stream_decoder.c"
    HEAP32[$144>>2] = 32000; //@line 2279 "stream_decoder.c"
    break;
   }
   case 9:  {
    $145 = $2; //@line 2282 "stream_decoder.c"
    $146 = ((($145)) + 4|0); //@line 2282 "stream_decoder.c"
    $147 = HEAP32[$146>>2]|0; //@line 2282 "stream_decoder.c"
    $148 = ((($147)) + 1136|0); //@line 2282 "stream_decoder.c"
    $149 = ((($148)) + 4|0); //@line 2282 "stream_decoder.c"
    HEAP32[$149>>2] = 44100; //@line 2282 "stream_decoder.c"
    break;
   }
   case 10:  {
    $150 = $2; //@line 2285 "stream_decoder.c"
    $151 = ((($150)) + 4|0); //@line 2285 "stream_decoder.c"
    $152 = HEAP32[$151>>2]|0; //@line 2285 "stream_decoder.c"
    $153 = ((($152)) + 1136|0); //@line 2285 "stream_decoder.c"
    $154 = ((($153)) + 4|0); //@line 2285 "stream_decoder.c"
    HEAP32[$154>>2] = 48000; //@line 2285 "stream_decoder.c"
    break;
   }
   case 11:  {
    $155 = $2; //@line 2288 "stream_decoder.c"
    $156 = ((($155)) + 4|0); //@line 2288 "stream_decoder.c"
    $157 = HEAP32[$156>>2]|0; //@line 2288 "stream_decoder.c"
    $158 = ((($157)) + 1136|0); //@line 2288 "stream_decoder.c"
    $159 = ((($158)) + 4|0); //@line 2288 "stream_decoder.c"
    HEAP32[$159>>2] = 96000; //@line 2288 "stream_decoder.c"
    break;
   }
   case 14: case 13: case 12:  {
    $160 = HEAP32[$3>>2]|0; //@line 2293 "stream_decoder.c"
    $7 = $160; //@line 2293 "stream_decoder.c"
    break;
   }
   case 15:  {
    $161 = $2; //@line 2296 "stream_decoder.c"
    _send_error_to_client_($161,1); //@line 2296 "stream_decoder.c"
    $162 = $2; //@line 2297 "stream_decoder.c"
    $163 = HEAP32[$162>>2]|0; //@line 2297 "stream_decoder.c"
    HEAP32[$163>>2] = 2; //@line 2297 "stream_decoder.c"
    $1 = 1; //@line 2298 "stream_decoder.c"
    $608 = $1; //@line 2469 "stream_decoder.c"
    STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
    break;
   }
   default: {
    // unreachable;
   }
   }
  } while(0);
  $164 = ((($9)) + 3|0); //@line 2303 "stream_decoder.c"
  $165 = HEAP8[$164>>0]|0; //@line 2303 "stream_decoder.c"
  $166 = $165&255; //@line 2303 "stream_decoder.c"
  $167 = $166 >> 4; //@line 2303 "stream_decoder.c"
  HEAP32[$3>>2] = $167; //@line 2303 "stream_decoder.c"
  $168 = HEAP32[$3>>2]|0; //@line 2304 "stream_decoder.c"
  $169 = $168 & 8; //@line 2304 "stream_decoder.c"
  $170 = ($169|0)!=(0); //@line 2304 "stream_decoder.c"
  L40: do {
   if ($170) {
    $171 = $2; //@line 2305 "stream_decoder.c"
    $172 = ((($171)) + 4|0); //@line 2305 "stream_decoder.c"
    $173 = HEAP32[$172>>2]|0; //@line 2305 "stream_decoder.c"
    $174 = ((($173)) + 1136|0); //@line 2305 "stream_decoder.c"
    $175 = ((($174)) + 8|0); //@line 2305 "stream_decoder.c"
    HEAP32[$175>>2] = 2; //@line 2305 "stream_decoder.c"
    $176 = HEAP32[$3>>2]|0; //@line 2306 "stream_decoder.c"
    $177 = $176 & 7; //@line 2306 "stream_decoder.c"
    switch ($177|0) {
    case 0:  {
     $178 = $2; //@line 2308 "stream_decoder.c"
     $179 = ((($178)) + 4|0); //@line 2308 "stream_decoder.c"
     $180 = HEAP32[$179>>2]|0; //@line 2308 "stream_decoder.c"
     $181 = ((($180)) + 1136|0); //@line 2308 "stream_decoder.c"
     $182 = ((($181)) + 12|0); //@line 2308 "stream_decoder.c"
     HEAP32[$182>>2] = 1; //@line 2308 "stream_decoder.c"
     break L40;
     break;
    }
    case 1:  {
     $183 = $2; //@line 2311 "stream_decoder.c"
     $184 = ((($183)) + 4|0); //@line 2311 "stream_decoder.c"
     $185 = HEAP32[$184>>2]|0; //@line 2311 "stream_decoder.c"
     $186 = ((($185)) + 1136|0); //@line 2311 "stream_decoder.c"
     $187 = ((($186)) + 12|0); //@line 2311 "stream_decoder.c"
     HEAP32[$187>>2] = 2; //@line 2311 "stream_decoder.c"
     break L40;
     break;
    }
    case 2:  {
     $188 = $2; //@line 2314 "stream_decoder.c"
     $189 = ((($188)) + 4|0); //@line 2314 "stream_decoder.c"
     $190 = HEAP32[$189>>2]|0; //@line 2314 "stream_decoder.c"
     $191 = ((($190)) + 1136|0); //@line 2314 "stream_decoder.c"
     $192 = ((($191)) + 12|0); //@line 2314 "stream_decoder.c"
     HEAP32[$192>>2] = 3; //@line 2314 "stream_decoder.c"
     break L40;
     break;
    }
    default: {
     $11 = 1; //@line 2317 "stream_decoder.c"
     break L40;
    }
    }
   } else {
    $193 = HEAP32[$3>>2]|0; //@line 2322 "stream_decoder.c"
    $194 = (($193) + 1)|0; //@line 2322 "stream_decoder.c"
    $195 = $2; //@line 2322 "stream_decoder.c"
    $196 = ((($195)) + 4|0); //@line 2322 "stream_decoder.c"
    $197 = HEAP32[$196>>2]|0; //@line 2322 "stream_decoder.c"
    $198 = ((($197)) + 1136|0); //@line 2322 "stream_decoder.c"
    $199 = ((($198)) + 8|0); //@line 2322 "stream_decoder.c"
    HEAP32[$199>>2] = $194; //@line 2322 "stream_decoder.c"
    $200 = $2; //@line 2323 "stream_decoder.c"
    $201 = ((($200)) + 4|0); //@line 2323 "stream_decoder.c"
    $202 = HEAP32[$201>>2]|0; //@line 2323 "stream_decoder.c"
    $203 = ((($202)) + 1136|0); //@line 2323 "stream_decoder.c"
    $204 = ((($203)) + 12|0); //@line 2323 "stream_decoder.c"
    HEAP32[$204>>2] = 0; //@line 2323 "stream_decoder.c"
   }
  } while(0);
  $205 = ((($9)) + 3|0); //@line 2326 "stream_decoder.c"
  $206 = HEAP8[$205>>0]|0; //@line 2326 "stream_decoder.c"
  $207 = $206&255; //@line 2326 "stream_decoder.c"
  $208 = $207 & 14; //@line 2326 "stream_decoder.c"
  $209 = $208 >>> 1; //@line 2326 "stream_decoder.c"
  HEAP32[$3>>2] = $209; //@line 2326 "stream_decoder.c"
  L49: do {
   switch ($209|0) {
   case 0:  {
    $210 = $2; //@line 2328 "stream_decoder.c"
    $211 = ((($210)) + 4|0); //@line 2328 "stream_decoder.c"
    $212 = HEAP32[$211>>2]|0; //@line 2328 "stream_decoder.c"
    $213 = ((($212)) + 248|0); //@line 2328 "stream_decoder.c"
    $214 = HEAP32[$213>>2]|0; //@line 2328 "stream_decoder.c"
    $215 = ($214|0)!=(0); //@line 2328 "stream_decoder.c"
    if ($215) {
     $216 = $2; //@line 2329 "stream_decoder.c"
     $217 = ((($216)) + 4|0); //@line 2329 "stream_decoder.c"
     $218 = HEAP32[$217>>2]|0; //@line 2329 "stream_decoder.c"
     $219 = ((($218)) + 256|0); //@line 2329 "stream_decoder.c"
     $220 = ((($219)) + 16|0); //@line 2329 "stream_decoder.c"
     $221 = ((($220)) + 24|0); //@line 2329 "stream_decoder.c"
     $222 = HEAP32[$221>>2]|0; //@line 2329 "stream_decoder.c"
     $223 = $2; //@line 2329 "stream_decoder.c"
     $224 = ((($223)) + 4|0); //@line 2329 "stream_decoder.c"
     $225 = HEAP32[$224>>2]|0; //@line 2329 "stream_decoder.c"
     $226 = ((($225)) + 1136|0); //@line 2329 "stream_decoder.c"
     $227 = ((($226)) + 16|0); //@line 2329 "stream_decoder.c"
     HEAP32[$227>>2] = $222; //@line 2329 "stream_decoder.c"
     break L49;
    } else {
     $11 = 1; //@line 2331 "stream_decoder.c"
     break L49;
    }
    break;
   }
   case 1:  {
    $228 = $2; //@line 2334 "stream_decoder.c"
    $229 = ((($228)) + 4|0); //@line 2334 "stream_decoder.c"
    $230 = HEAP32[$229>>2]|0; //@line 2334 "stream_decoder.c"
    $231 = ((($230)) + 1136|0); //@line 2334 "stream_decoder.c"
    $232 = ((($231)) + 16|0); //@line 2334 "stream_decoder.c"
    HEAP32[$232>>2] = 8; //@line 2334 "stream_decoder.c"
    break;
   }
   case 2:  {
    $233 = $2; //@line 2337 "stream_decoder.c"
    $234 = ((($233)) + 4|0); //@line 2337 "stream_decoder.c"
    $235 = HEAP32[$234>>2]|0; //@line 2337 "stream_decoder.c"
    $236 = ((($235)) + 1136|0); //@line 2337 "stream_decoder.c"
    $237 = ((($236)) + 16|0); //@line 2337 "stream_decoder.c"
    HEAP32[$237>>2] = 12; //@line 2337 "stream_decoder.c"
    break;
   }
   case 4:  {
    $238 = $2; //@line 2340 "stream_decoder.c"
    $239 = ((($238)) + 4|0); //@line 2340 "stream_decoder.c"
    $240 = HEAP32[$239>>2]|0; //@line 2340 "stream_decoder.c"
    $241 = ((($240)) + 1136|0); //@line 2340 "stream_decoder.c"
    $242 = ((($241)) + 16|0); //@line 2340 "stream_decoder.c"
    HEAP32[$242>>2] = 16; //@line 2340 "stream_decoder.c"
    break;
   }
   case 5:  {
    $243 = $2; //@line 2343 "stream_decoder.c"
    $244 = ((($243)) + 4|0); //@line 2343 "stream_decoder.c"
    $245 = HEAP32[$244>>2]|0; //@line 2343 "stream_decoder.c"
    $246 = ((($245)) + 1136|0); //@line 2343 "stream_decoder.c"
    $247 = ((($246)) + 16|0); //@line 2343 "stream_decoder.c"
    HEAP32[$247>>2] = 20; //@line 2343 "stream_decoder.c"
    break;
   }
   case 6:  {
    $248 = $2; //@line 2346 "stream_decoder.c"
    $249 = ((($248)) + 4|0); //@line 2346 "stream_decoder.c"
    $250 = HEAP32[$249>>2]|0; //@line 2346 "stream_decoder.c"
    $251 = ((($250)) + 1136|0); //@line 2346 "stream_decoder.c"
    $252 = ((($251)) + 16|0); //@line 2346 "stream_decoder.c"
    HEAP32[$252>>2] = 24; //@line 2346 "stream_decoder.c"
    break;
   }
   case 7: case 3:  {
    $11 = 1; //@line 2350 "stream_decoder.c"
    break;
   }
   default: {
    // unreachable;
   }
   }
  } while(0);
  $253 = ((($9)) + 3|0); //@line 2358 "stream_decoder.c"
  $254 = HEAP8[$253>>0]|0; //@line 2358 "stream_decoder.c"
  $255 = $254&255; //@line 2358 "stream_decoder.c"
  $256 = $255 & 1; //@line 2358 "stream_decoder.c"
  $257 = ($256|0)!=(0); //@line 2358 "stream_decoder.c"
  if ($257) {
   $11 = 1; //@line 2359 "stream_decoder.c"
  }
  $258 = ((($9)) + 1|0); //@line 2363 "stream_decoder.c"
  $259 = HEAP8[$258>>0]|0; //@line 2363 "stream_decoder.c"
  $260 = $259&255; //@line 2363 "stream_decoder.c"
  $261 = $260 & 1; //@line 2363 "stream_decoder.c"
  $262 = ($261|0)!=(0); //@line 2363 "stream_decoder.c"
  do {
   if ($262) {
    label = 58;
   } else {
    $263 = $2; //@line 2365 "stream_decoder.c"
    $264 = ((($263)) + 4|0); //@line 2365 "stream_decoder.c"
    $265 = HEAP32[$264>>2]|0; //@line 2365 "stream_decoder.c"
    $266 = ((($265)) + 248|0); //@line 2365 "stream_decoder.c"
    $267 = HEAP32[$266>>2]|0; //@line 2365 "stream_decoder.c"
    $268 = ($267|0)!=(0); //@line 2365 "stream_decoder.c"
    if ($268) {
     $269 = $2; //@line 2365 "stream_decoder.c"
     $270 = ((($269)) + 4|0); //@line 2365 "stream_decoder.c"
     $271 = HEAP32[$270>>2]|0; //@line 2365 "stream_decoder.c"
     $272 = ((($271)) + 256|0); //@line 2365 "stream_decoder.c"
     $273 = ((($272)) + 16|0); //@line 2365 "stream_decoder.c"
     $274 = HEAP32[$273>>2]|0; //@line 2365 "stream_decoder.c"
     $275 = $2; //@line 2365 "stream_decoder.c"
     $276 = ((($275)) + 4|0); //@line 2365 "stream_decoder.c"
     $277 = HEAP32[$276>>2]|0; //@line 2365 "stream_decoder.c"
     $278 = ((($277)) + 256|0); //@line 2365 "stream_decoder.c"
     $279 = ((($278)) + 16|0); //@line 2365 "stream_decoder.c"
     $280 = ((($279)) + 4|0); //@line 2365 "stream_decoder.c"
     $281 = HEAP32[$280>>2]|0; //@line 2365 "stream_decoder.c"
     $282 = ($274|0)!=($281|0); //@line 2365 "stream_decoder.c"
     if ($282) {
      label = 58;
      break;
     }
    }
    $334 = $2; //@line 2380 "stream_decoder.c"
    $335 = ((($334)) + 4|0); //@line 2380 "stream_decoder.c"
    $336 = HEAP32[$335>>2]|0; //@line 2380 "stream_decoder.c"
    $337 = ((($336)) + 56|0); //@line 2380 "stream_decoder.c"
    $338 = HEAP32[$337>>2]|0; //@line 2380 "stream_decoder.c"
    $339 = (_FLAC__bitreader_read_utf8_uint32($338,$3,$9,$10)|0); //@line 2380 "stream_decoder.c"
    $340 = ($339|0)!=(0); //@line 2380 "stream_decoder.c"
    if (!($340)) {
     $1 = 0; //@line 2381 "stream_decoder.c"
     $608 = $1; //@line 2469 "stream_decoder.c"
     STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
    }
    $341 = HEAP32[$3>>2]|0; //@line 2382 "stream_decoder.c"
    $342 = ($341|0)==(-1); //@line 2382 "stream_decoder.c"
    if (!($342)) {
     $358 = $2; //@line 2389 "stream_decoder.c"
     $359 = ((($358)) + 4|0); //@line 2389 "stream_decoder.c"
     $360 = HEAP32[$359>>2]|0; //@line 2389 "stream_decoder.c"
     $361 = ((($360)) + 1136|0); //@line 2389 "stream_decoder.c"
     $362 = ((($361)) + 20|0); //@line 2389 "stream_decoder.c"
     HEAP32[$362>>2] = 0; //@line 2389 "stream_decoder.c"
     $363 = HEAP32[$3>>2]|0; //@line 2390 "stream_decoder.c"
     $364 = $2; //@line 2390 "stream_decoder.c"
     $365 = ((($364)) + 4|0); //@line 2390 "stream_decoder.c"
     $366 = HEAP32[$365>>2]|0; //@line 2390 "stream_decoder.c"
     $367 = ((($366)) + 1136|0); //@line 2390 "stream_decoder.c"
     $368 = ((($367)) + 24|0); //@line 2390 "stream_decoder.c"
     HEAP32[$368>>2] = $363; //@line 2390 "stream_decoder.c"
     break;
    }
    $343 = HEAP32[$10>>2]|0; //@line 2383 "stream_decoder.c"
    $344 = (($343) - 1)|0; //@line 2383 "stream_decoder.c"
    $345 = (($9) + ($344)|0); //@line 2383 "stream_decoder.c"
    $346 = HEAP8[$345>>0]|0; //@line 2383 "stream_decoder.c"
    $347 = $2; //@line 2383 "stream_decoder.c"
    $348 = ((($347)) + 4|0); //@line 2383 "stream_decoder.c"
    $349 = HEAP32[$348>>2]|0; //@line 2383 "stream_decoder.c"
    $350 = ((($349)) + 3614|0); //@line 2383 "stream_decoder.c"
    HEAP8[$350>>0] = $346; //@line 2383 "stream_decoder.c"
    $351 = $2; //@line 2384 "stream_decoder.c"
    $352 = ((($351)) + 4|0); //@line 2384 "stream_decoder.c"
    $353 = HEAP32[$352>>2]|0; //@line 2384 "stream_decoder.c"
    $354 = ((($353)) + 3520|0); //@line 2384 "stream_decoder.c"
    HEAP32[$354>>2] = 1; //@line 2384 "stream_decoder.c"
    $355 = $2; //@line 2385 "stream_decoder.c"
    _send_error_to_client_($355,1); //@line 2385 "stream_decoder.c"
    $356 = $2; //@line 2386 "stream_decoder.c"
    $357 = HEAP32[$356>>2]|0; //@line 2386 "stream_decoder.c"
    HEAP32[$357>>2] = 2; //@line 2386 "stream_decoder.c"
    $1 = 1; //@line 2387 "stream_decoder.c"
    $608 = $1; //@line 2469 "stream_decoder.c"
    STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
   }
  } while(0);
  do {
   if ((label|0) == 58) {
    $283 = $2; //@line 2367 "stream_decoder.c"
    $284 = ((($283)) + 4|0); //@line 2367 "stream_decoder.c"
    $285 = HEAP32[$284>>2]|0; //@line 2367 "stream_decoder.c"
    $286 = ((($285)) + 56|0); //@line 2367 "stream_decoder.c"
    $287 = HEAP32[$286>>2]|0; //@line 2367 "stream_decoder.c"
    $288 = (_FLAC__bitreader_read_utf8_uint64($287,$4,$9,$10)|0); //@line 2367 "stream_decoder.c"
    $289 = ($288|0)!=(0); //@line 2367 "stream_decoder.c"
    if (!($289)) {
     $1 = 0; //@line 2368 "stream_decoder.c"
     $608 = $1; //@line 2469 "stream_decoder.c"
     STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
    }
    $290 = $4; //@line 2369 "stream_decoder.c"
    $291 = $290; //@line 2369 "stream_decoder.c"
    $292 = HEAP32[$291>>2]|0; //@line 2369 "stream_decoder.c"
    $293 = (($290) + 4)|0; //@line 2369 "stream_decoder.c"
    $294 = $293; //@line 2369 "stream_decoder.c"
    $295 = HEAP32[$294>>2]|0; //@line 2369 "stream_decoder.c"
    $296 = ($292|0)==(-1); //@line 2369 "stream_decoder.c"
    $297 = ($295|0)==(-1); //@line 2369 "stream_decoder.c"
    $298 = $296 & $297; //@line 2369 "stream_decoder.c"
    if (!($298)) {
     $314 = $2; //@line 2376 "stream_decoder.c"
     $315 = ((($314)) + 4|0); //@line 2376 "stream_decoder.c"
     $316 = HEAP32[$315>>2]|0; //@line 2376 "stream_decoder.c"
     $317 = ((($316)) + 1136|0); //@line 2376 "stream_decoder.c"
     $318 = ((($317)) + 20|0); //@line 2376 "stream_decoder.c"
     HEAP32[$318>>2] = 1; //@line 2376 "stream_decoder.c"
     $319 = $4; //@line 2377 "stream_decoder.c"
     $320 = $319; //@line 2377 "stream_decoder.c"
     $321 = HEAP32[$320>>2]|0; //@line 2377 "stream_decoder.c"
     $322 = (($319) + 4)|0; //@line 2377 "stream_decoder.c"
     $323 = $322; //@line 2377 "stream_decoder.c"
     $324 = HEAP32[$323>>2]|0; //@line 2377 "stream_decoder.c"
     $325 = $2; //@line 2377 "stream_decoder.c"
     $326 = ((($325)) + 4|0); //@line 2377 "stream_decoder.c"
     $327 = HEAP32[$326>>2]|0; //@line 2377 "stream_decoder.c"
     $328 = ((($327)) + 1136|0); //@line 2377 "stream_decoder.c"
     $329 = ((($328)) + 24|0); //@line 2377 "stream_decoder.c"
     $330 = $329; //@line 2377 "stream_decoder.c"
     $331 = $330; //@line 2377 "stream_decoder.c"
     HEAP32[$331>>2] = $321; //@line 2377 "stream_decoder.c"
     $332 = (($330) + 4)|0; //@line 2377 "stream_decoder.c"
     $333 = $332; //@line 2377 "stream_decoder.c"
     HEAP32[$333>>2] = $324; //@line 2377 "stream_decoder.c"
     break;
    }
    $299 = HEAP32[$10>>2]|0; //@line 2370 "stream_decoder.c"
    $300 = (($299) - 1)|0; //@line 2370 "stream_decoder.c"
    $301 = (($9) + ($300)|0); //@line 2370 "stream_decoder.c"
    $302 = HEAP8[$301>>0]|0; //@line 2370 "stream_decoder.c"
    $303 = $2; //@line 2370 "stream_decoder.c"
    $304 = ((($303)) + 4|0); //@line 2370 "stream_decoder.c"
    $305 = HEAP32[$304>>2]|0; //@line 2370 "stream_decoder.c"
    $306 = ((($305)) + 3614|0); //@line 2370 "stream_decoder.c"
    HEAP8[$306>>0] = $302; //@line 2370 "stream_decoder.c"
    $307 = $2; //@line 2371 "stream_decoder.c"
    $308 = ((($307)) + 4|0); //@line 2371 "stream_decoder.c"
    $309 = HEAP32[$308>>2]|0; //@line 2371 "stream_decoder.c"
    $310 = ((($309)) + 3520|0); //@line 2371 "stream_decoder.c"
    HEAP32[$310>>2] = 1; //@line 2371 "stream_decoder.c"
    $311 = $2; //@line 2372 "stream_decoder.c"
    _send_error_to_client_($311,1); //@line 2372 "stream_decoder.c"
    $312 = $2; //@line 2373 "stream_decoder.c"
    $313 = HEAP32[$312>>2]|0; //@line 2373 "stream_decoder.c"
    HEAP32[$313>>2] = 2; //@line 2373 "stream_decoder.c"
    $1 = 1; //@line 2374 "stream_decoder.c"
    $608 = $1; //@line 2469 "stream_decoder.c"
    STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
   }
  } while(0);
  $369 = $6; //@line 2393 "stream_decoder.c"
  $370 = ($369|0)!=(0); //@line 2393 "stream_decoder.c"
  if ($370) {
   $371 = $2; //@line 2394 "stream_decoder.c"
   $372 = ((($371)) + 4|0); //@line 2394 "stream_decoder.c"
   $373 = HEAP32[$372>>2]|0; //@line 2394 "stream_decoder.c"
   $374 = ((($373)) + 56|0); //@line 2394 "stream_decoder.c"
   $375 = HEAP32[$374>>2]|0; //@line 2394 "stream_decoder.c"
   $376 = (_FLAC__bitreader_read_raw_uint32($375,$3,8)|0); //@line 2394 "stream_decoder.c"
   $377 = ($376|0)!=(0); //@line 2394 "stream_decoder.c"
   if (!($377)) {
    $1 = 0; //@line 2395 "stream_decoder.c"
    $608 = $1; //@line 2469 "stream_decoder.c"
    STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
   }
   $378 = HEAP32[$3>>2]|0; //@line 2396 "stream_decoder.c"
   $379 = $378&255; //@line 2396 "stream_decoder.c"
   $380 = HEAP32[$10>>2]|0; //@line 2396 "stream_decoder.c"
   $381 = (($380) + 1)|0; //@line 2396 "stream_decoder.c"
   HEAP32[$10>>2] = $381; //@line 2396 "stream_decoder.c"
   $382 = (($9) + ($380)|0); //@line 2396 "stream_decoder.c"
   HEAP8[$382>>0] = $379; //@line 2396 "stream_decoder.c"
   $383 = $6; //@line 2397 "stream_decoder.c"
   $384 = ($383|0)==(7); //@line 2397 "stream_decoder.c"
   do {
    if ($384) {
     $385 = $2; //@line 2399 "stream_decoder.c"
     $386 = ((($385)) + 4|0); //@line 2399 "stream_decoder.c"
     $387 = HEAP32[$386>>2]|0; //@line 2399 "stream_decoder.c"
     $388 = ((($387)) + 56|0); //@line 2399 "stream_decoder.c"
     $389 = HEAP32[$388>>2]|0; //@line 2399 "stream_decoder.c"
     $390 = (_FLAC__bitreader_read_raw_uint32($389,$12,8)|0); //@line 2399 "stream_decoder.c"
     $391 = ($390|0)!=(0); //@line 2399 "stream_decoder.c"
     if ($391) {
      $392 = HEAP32[$12>>2]|0; //@line 2401 "stream_decoder.c"
      $393 = $392&255; //@line 2401 "stream_decoder.c"
      $394 = HEAP32[$10>>2]|0; //@line 2401 "stream_decoder.c"
      $395 = (($394) + 1)|0; //@line 2401 "stream_decoder.c"
      HEAP32[$10>>2] = $395; //@line 2401 "stream_decoder.c"
      $396 = (($9) + ($394)|0); //@line 2401 "stream_decoder.c"
      HEAP8[$396>>0] = $393; //@line 2401 "stream_decoder.c"
      $397 = HEAP32[$3>>2]|0; //@line 2402 "stream_decoder.c"
      $398 = $397 << 8; //@line 2402 "stream_decoder.c"
      $399 = HEAP32[$12>>2]|0; //@line 2402 "stream_decoder.c"
      $400 = $398 | $399; //@line 2402 "stream_decoder.c"
      HEAP32[$3>>2] = $400; //@line 2402 "stream_decoder.c"
      break;
     }
     $1 = 0; //@line 2400 "stream_decoder.c"
     $608 = $1; //@line 2469 "stream_decoder.c"
     STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
    }
   } while(0);
   $401 = HEAP32[$3>>2]|0; //@line 2404 "stream_decoder.c"
   $402 = (($401) + 1)|0; //@line 2404 "stream_decoder.c"
   $403 = $2; //@line 2404 "stream_decoder.c"
   $404 = ((($403)) + 4|0); //@line 2404 "stream_decoder.c"
   $405 = HEAP32[$404>>2]|0; //@line 2404 "stream_decoder.c"
   $406 = ((($405)) + 1136|0); //@line 2404 "stream_decoder.c"
   HEAP32[$406>>2] = $402; //@line 2404 "stream_decoder.c"
  }
  $407 = $7; //@line 2407 "stream_decoder.c"
  $408 = ($407|0)!=(0); //@line 2407 "stream_decoder.c"
  do {
   if ($408) {
    $409 = $2; //@line 2408 "stream_decoder.c"
    $410 = ((($409)) + 4|0); //@line 2408 "stream_decoder.c"
    $411 = HEAP32[$410>>2]|0; //@line 2408 "stream_decoder.c"
    $412 = ((($411)) + 56|0); //@line 2408 "stream_decoder.c"
    $413 = HEAP32[$412>>2]|0; //@line 2408 "stream_decoder.c"
    $414 = (_FLAC__bitreader_read_raw_uint32($413,$3,8)|0); //@line 2408 "stream_decoder.c"
    $415 = ($414|0)!=(0); //@line 2408 "stream_decoder.c"
    if (!($415)) {
     $1 = 0; //@line 2409 "stream_decoder.c"
     $608 = $1; //@line 2469 "stream_decoder.c"
     STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
    }
    $416 = HEAP32[$3>>2]|0; //@line 2410 "stream_decoder.c"
    $417 = $416&255; //@line 2410 "stream_decoder.c"
    $418 = HEAP32[$10>>2]|0; //@line 2410 "stream_decoder.c"
    $419 = (($418) + 1)|0; //@line 2410 "stream_decoder.c"
    HEAP32[$10>>2] = $419; //@line 2410 "stream_decoder.c"
    $420 = (($9) + ($418)|0); //@line 2410 "stream_decoder.c"
    HEAP8[$420>>0] = $417; //@line 2410 "stream_decoder.c"
    $421 = $7; //@line 2411 "stream_decoder.c"
    $422 = ($421|0)!=(12); //@line 2411 "stream_decoder.c"
    do {
     if ($422) {
      $423 = $2; //@line 2413 "stream_decoder.c"
      $424 = ((($423)) + 4|0); //@line 2413 "stream_decoder.c"
      $425 = HEAP32[$424>>2]|0; //@line 2413 "stream_decoder.c"
      $426 = ((($425)) + 56|0); //@line 2413 "stream_decoder.c"
      $427 = HEAP32[$426>>2]|0; //@line 2413 "stream_decoder.c"
      $428 = (_FLAC__bitreader_read_raw_uint32($427,$13,8)|0); //@line 2413 "stream_decoder.c"
      $429 = ($428|0)!=(0); //@line 2413 "stream_decoder.c"
      if ($429) {
       $430 = HEAP32[$13>>2]|0; //@line 2415 "stream_decoder.c"
       $431 = $430&255; //@line 2415 "stream_decoder.c"
       $432 = HEAP32[$10>>2]|0; //@line 2415 "stream_decoder.c"
       $433 = (($432) + 1)|0; //@line 2415 "stream_decoder.c"
       HEAP32[$10>>2] = $433; //@line 2415 "stream_decoder.c"
       $434 = (($9) + ($432)|0); //@line 2415 "stream_decoder.c"
       HEAP8[$434>>0] = $431; //@line 2415 "stream_decoder.c"
       $435 = HEAP32[$3>>2]|0; //@line 2416 "stream_decoder.c"
       $436 = $435 << 8; //@line 2416 "stream_decoder.c"
       $437 = HEAP32[$13>>2]|0; //@line 2416 "stream_decoder.c"
       $438 = $436 | $437; //@line 2416 "stream_decoder.c"
       HEAP32[$3>>2] = $438; //@line 2416 "stream_decoder.c"
       break;
      }
      $1 = 0; //@line 2414 "stream_decoder.c"
      $608 = $1; //@line 2469 "stream_decoder.c"
      STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
     }
    } while(0);
    $439 = $7; //@line 2418 "stream_decoder.c"
    $440 = ($439|0)==(12); //@line 2418 "stream_decoder.c"
    if ($440) {
     $441 = HEAP32[$3>>2]|0; //@line 2419 "stream_decoder.c"
     $442 = ($441*1000)|0; //@line 2419 "stream_decoder.c"
     $443 = $2; //@line 2419 "stream_decoder.c"
     $444 = ((($443)) + 4|0); //@line 2419 "stream_decoder.c"
     $445 = HEAP32[$444>>2]|0; //@line 2419 "stream_decoder.c"
     $446 = ((($445)) + 1136|0); //@line 2419 "stream_decoder.c"
     $447 = ((($446)) + 4|0); //@line 2419 "stream_decoder.c"
     HEAP32[$447>>2] = $442; //@line 2419 "stream_decoder.c"
     break;
    }
    $448 = $7; //@line 2420 "stream_decoder.c"
    $449 = ($448|0)==(13); //@line 2420 "stream_decoder.c"
    $450 = HEAP32[$3>>2]|0;
    if ($449) {
     $451 = $2; //@line 2421 "stream_decoder.c"
     $452 = ((($451)) + 4|0); //@line 2421 "stream_decoder.c"
     $453 = HEAP32[$452>>2]|0; //@line 2421 "stream_decoder.c"
     $454 = ((($453)) + 1136|0); //@line 2421 "stream_decoder.c"
     $455 = ((($454)) + 4|0); //@line 2421 "stream_decoder.c"
     HEAP32[$455>>2] = $450; //@line 2421 "stream_decoder.c"
     break;
    } else {
     $456 = ($450*10)|0; //@line 2423 "stream_decoder.c"
     $457 = $2; //@line 2423 "stream_decoder.c"
     $458 = ((($457)) + 4|0); //@line 2423 "stream_decoder.c"
     $459 = HEAP32[$458>>2]|0; //@line 2423 "stream_decoder.c"
     $460 = ((($459)) + 1136|0); //@line 2423 "stream_decoder.c"
     $461 = ((($460)) + 4|0); //@line 2423 "stream_decoder.c"
     HEAP32[$461>>2] = $456; //@line 2423 "stream_decoder.c"
     break;
    }
   }
  } while(0);
  $462 = $2; //@line 2427 "stream_decoder.c"
  $463 = ((($462)) + 4|0); //@line 2427 "stream_decoder.c"
  $464 = HEAP32[$463>>2]|0; //@line 2427 "stream_decoder.c"
  $465 = ((($464)) + 56|0); //@line 2427 "stream_decoder.c"
  $466 = HEAP32[$465>>2]|0; //@line 2427 "stream_decoder.c"
  $467 = (_FLAC__bitreader_read_raw_uint32($466,$3,8)|0); //@line 2427 "stream_decoder.c"
  $468 = ($467|0)!=(0); //@line 2427 "stream_decoder.c"
  if (!($468)) {
   $1 = 0; //@line 2428 "stream_decoder.c"
   $608 = $1; //@line 2469 "stream_decoder.c"
   STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
  }
  $469 = HEAP32[$3>>2]|0; //@line 2429 "stream_decoder.c"
  $470 = $469&255; //@line 2429 "stream_decoder.c"
  $8 = $470; //@line 2429 "stream_decoder.c"
  $471 = HEAP32[$10>>2]|0; //@line 2431 "stream_decoder.c"
  $472 = (_FLAC__crc8($9,$471)|0); //@line 2431 "stream_decoder.c"
  $473 = $472&255; //@line 2431 "stream_decoder.c"
  $474 = $8; //@line 2431 "stream_decoder.c"
  $475 = $474&255; //@line 2431 "stream_decoder.c"
  $476 = ($473|0)!=($475|0); //@line 2431 "stream_decoder.c"
  $477 = $2;
  if ($476) {
   _send_error_to_client_($477,1); //@line 2432 "stream_decoder.c"
   $478 = $2; //@line 2433 "stream_decoder.c"
   $479 = HEAP32[$478>>2]|0; //@line 2433 "stream_decoder.c"
   HEAP32[$479>>2] = 2; //@line 2433 "stream_decoder.c"
   $1 = 1; //@line 2434 "stream_decoder.c"
   $608 = $1; //@line 2469 "stream_decoder.c"
   STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
  }
  $480 = ((($477)) + 4|0); //@line 2438 "stream_decoder.c"
  $481 = HEAP32[$480>>2]|0; //@line 2438 "stream_decoder.c"
  $482 = ((($481)) + 232|0); //@line 2438 "stream_decoder.c"
  HEAP32[$482>>2] = 0; //@line 2438 "stream_decoder.c"
  $483 = $2; //@line 2439 "stream_decoder.c"
  $484 = ((($483)) + 4|0); //@line 2439 "stream_decoder.c"
  $485 = HEAP32[$484>>2]|0; //@line 2439 "stream_decoder.c"
  $486 = ((($485)) + 1136|0); //@line 2439 "stream_decoder.c"
  $487 = ((($486)) + 20|0); //@line 2439 "stream_decoder.c"
  $488 = HEAP32[$487>>2]|0; //@line 2439 "stream_decoder.c"
  $489 = ($488|0)==(0); //@line 2439 "stream_decoder.c"
  do {
   if ($489) {
    $490 = $2; //@line 2440 "stream_decoder.c"
    $491 = ((($490)) + 4|0); //@line 2440 "stream_decoder.c"
    $492 = HEAP32[$491>>2]|0; //@line 2440 "stream_decoder.c"
    $493 = ((($492)) + 1136|0); //@line 2440 "stream_decoder.c"
    $494 = ((($493)) + 24|0); //@line 2440 "stream_decoder.c"
    $495 = HEAP32[$494>>2]|0; //@line 2440 "stream_decoder.c"
    HEAP32[$3>>2] = $495; //@line 2440 "stream_decoder.c"
    $496 = $2; //@line 2441 "stream_decoder.c"
    $497 = ((($496)) + 4|0); //@line 2441 "stream_decoder.c"
    $498 = HEAP32[$497>>2]|0; //@line 2441 "stream_decoder.c"
    $499 = ((($498)) + 1136|0); //@line 2441 "stream_decoder.c"
    $500 = ((($499)) + 20|0); //@line 2441 "stream_decoder.c"
    HEAP32[$500>>2] = 1; //@line 2441 "stream_decoder.c"
    $501 = $2; //@line 2442 "stream_decoder.c"
    $502 = ((($501)) + 4|0); //@line 2442 "stream_decoder.c"
    $503 = HEAP32[$502>>2]|0; //@line 2442 "stream_decoder.c"
    $504 = ((($503)) + 228|0); //@line 2442 "stream_decoder.c"
    $505 = HEAP32[$504>>2]|0; //@line 2442 "stream_decoder.c"
    $506 = ($505|0)!=(0); //@line 2442 "stream_decoder.c"
    $507 = $2;
    $508 = ((($507)) + 4|0);
    $509 = HEAP32[$508>>2]|0;
    if ($506) {
     $510 = ((($509)) + 228|0); //@line 2443 "stream_decoder.c"
     $511 = HEAP32[$510>>2]|0; //@line 2443 "stream_decoder.c"
     $512 = HEAP32[$3>>2]|0; //@line 2443 "stream_decoder.c"
     $513 = (___muldi3(($511|0),0,($512|0),0)|0); //@line 2443 "stream_decoder.c"
     $514 = tempRet0; //@line 2443 "stream_decoder.c"
     $515 = $2; //@line 2443 "stream_decoder.c"
     $516 = ((($515)) + 4|0); //@line 2443 "stream_decoder.c"
     $517 = HEAP32[$516>>2]|0; //@line 2443 "stream_decoder.c"
     $518 = ((($517)) + 1136|0); //@line 2443 "stream_decoder.c"
     $519 = ((($518)) + 24|0); //@line 2443 "stream_decoder.c"
     $520 = $519; //@line 2443 "stream_decoder.c"
     $521 = $520; //@line 2443 "stream_decoder.c"
     HEAP32[$521>>2] = $513; //@line 2443 "stream_decoder.c"
     $522 = (($520) + 4)|0; //@line 2443 "stream_decoder.c"
     $523 = $522; //@line 2443 "stream_decoder.c"
     HEAP32[$523>>2] = $514; //@line 2443 "stream_decoder.c"
     break;
    }
    $524 = ((($509)) + 248|0); //@line 2444 "stream_decoder.c"
    $525 = HEAP32[$524>>2]|0; //@line 2444 "stream_decoder.c"
    $526 = ($525|0)!=(0); //@line 2444 "stream_decoder.c"
    if ($526) {
     $527 = $2; //@line 2445 "stream_decoder.c"
     $528 = ((($527)) + 4|0); //@line 2445 "stream_decoder.c"
     $529 = HEAP32[$528>>2]|0; //@line 2445 "stream_decoder.c"
     $530 = ((($529)) + 256|0); //@line 2445 "stream_decoder.c"
     $531 = ((($530)) + 16|0); //@line 2445 "stream_decoder.c"
     $532 = HEAP32[$531>>2]|0; //@line 2445 "stream_decoder.c"
     $533 = $2; //@line 2445 "stream_decoder.c"
     $534 = ((($533)) + 4|0); //@line 2445 "stream_decoder.c"
     $535 = HEAP32[$534>>2]|0; //@line 2445 "stream_decoder.c"
     $536 = ((($535)) + 256|0); //@line 2445 "stream_decoder.c"
     $537 = ((($536)) + 16|0); //@line 2445 "stream_decoder.c"
     $538 = ((($537)) + 4|0); //@line 2445 "stream_decoder.c"
     $539 = HEAP32[$538>>2]|0; //@line 2445 "stream_decoder.c"
     $540 = ($532|0)==($539|0); //@line 2445 "stream_decoder.c"
     if ($540) {
      $541 = $2; //@line 2446 "stream_decoder.c"
      $542 = ((($541)) + 4|0); //@line 2446 "stream_decoder.c"
      $543 = HEAP32[$542>>2]|0; //@line 2446 "stream_decoder.c"
      $544 = ((($543)) + 256|0); //@line 2446 "stream_decoder.c"
      $545 = ((($544)) + 16|0); //@line 2446 "stream_decoder.c"
      $546 = HEAP32[$545>>2]|0; //@line 2446 "stream_decoder.c"
      $547 = HEAP32[$3>>2]|0; //@line 2446 "stream_decoder.c"
      $548 = (___muldi3(($546|0),0,($547|0),0)|0); //@line 2446 "stream_decoder.c"
      $549 = tempRet0; //@line 2446 "stream_decoder.c"
      $550 = $2; //@line 2446 "stream_decoder.c"
      $551 = ((($550)) + 4|0); //@line 2446 "stream_decoder.c"
      $552 = HEAP32[$551>>2]|0; //@line 2446 "stream_decoder.c"
      $553 = ((($552)) + 1136|0); //@line 2446 "stream_decoder.c"
      $554 = ((($553)) + 24|0); //@line 2446 "stream_decoder.c"
      $555 = $554; //@line 2446 "stream_decoder.c"
      $556 = $555; //@line 2446 "stream_decoder.c"
      HEAP32[$556>>2] = $548; //@line 2446 "stream_decoder.c"
      $557 = (($555) + 4)|0; //@line 2446 "stream_decoder.c"
      $558 = $557; //@line 2446 "stream_decoder.c"
      HEAP32[$558>>2] = $549; //@line 2446 "stream_decoder.c"
      $559 = $2; //@line 2447 "stream_decoder.c"
      $560 = ((($559)) + 4|0); //@line 2447 "stream_decoder.c"
      $561 = HEAP32[$560>>2]|0; //@line 2447 "stream_decoder.c"
      $562 = ((($561)) + 256|0); //@line 2447 "stream_decoder.c"
      $563 = ((($562)) + 16|0); //@line 2447 "stream_decoder.c"
      $564 = ((($563)) + 4|0); //@line 2447 "stream_decoder.c"
      $565 = HEAP32[$564>>2]|0; //@line 2447 "stream_decoder.c"
      $566 = $2; //@line 2447 "stream_decoder.c"
      $567 = ((($566)) + 4|0); //@line 2447 "stream_decoder.c"
      $568 = HEAP32[$567>>2]|0; //@line 2447 "stream_decoder.c"
      $569 = ((($568)) + 232|0); //@line 2447 "stream_decoder.c"
      HEAP32[$569>>2] = $565; //@line 2447 "stream_decoder.c"
      break;
     } else {
      $11 = 1; //@line 2450 "stream_decoder.c"
      break;
     }
    } else {
     $570 = HEAP32[$3>>2]|0; //@line 2452 "stream_decoder.c"
     $571 = ($570|0)==(0); //@line 2452 "stream_decoder.c"
     $572 = $2;
     $573 = ((($572)) + 4|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = ((($574)) + 1136|0);
     if ($571) {
      $576 = ((($575)) + 24|0); //@line 2453 "stream_decoder.c"
      $577 = $576; //@line 2453 "stream_decoder.c"
      $578 = $577; //@line 2453 "stream_decoder.c"
      HEAP32[$578>>2] = 0; //@line 2453 "stream_decoder.c"
      $579 = (($577) + 4)|0; //@line 2453 "stream_decoder.c"
      $580 = $579; //@line 2453 "stream_decoder.c"
      HEAP32[$580>>2] = 0; //@line 2453 "stream_decoder.c"
      $581 = $2; //@line 2454 "stream_decoder.c"
      $582 = ((($581)) + 4|0); //@line 2454 "stream_decoder.c"
      $583 = HEAP32[$582>>2]|0; //@line 2454 "stream_decoder.c"
      $584 = ((($583)) + 1136|0); //@line 2454 "stream_decoder.c"
      $585 = HEAP32[$584>>2]|0; //@line 2454 "stream_decoder.c"
      $586 = $2; //@line 2454 "stream_decoder.c"
      $587 = ((($586)) + 4|0); //@line 2454 "stream_decoder.c"
      $588 = HEAP32[$587>>2]|0; //@line 2454 "stream_decoder.c"
      $589 = ((($588)) + 232|0); //@line 2454 "stream_decoder.c"
      HEAP32[$589>>2] = $585; //@line 2454 "stream_decoder.c"
      break;
     } else {
      $590 = HEAP32[$575>>2]|0; //@line 2458 "stream_decoder.c"
      $591 = HEAP32[$3>>2]|0; //@line 2458 "stream_decoder.c"
      $592 = (___muldi3(($590|0),0,($591|0),0)|0); //@line 2458 "stream_decoder.c"
      $593 = tempRet0; //@line 2458 "stream_decoder.c"
      $594 = $2; //@line 2458 "stream_decoder.c"
      $595 = ((($594)) + 4|0); //@line 2458 "stream_decoder.c"
      $596 = HEAP32[$595>>2]|0; //@line 2458 "stream_decoder.c"
      $597 = ((($596)) + 1136|0); //@line 2458 "stream_decoder.c"
      $598 = ((($597)) + 24|0); //@line 2458 "stream_decoder.c"
      $599 = $598; //@line 2458 "stream_decoder.c"
      $600 = $599; //@line 2458 "stream_decoder.c"
      HEAP32[$600>>2] = $592; //@line 2458 "stream_decoder.c"
      $601 = (($599) + 4)|0; //@line 2458 "stream_decoder.c"
      $602 = $601; //@line 2458 "stream_decoder.c"
      HEAP32[$602>>2] = $593; //@line 2458 "stream_decoder.c"
      break;
     }
    }
   }
  } while(0);
  $603 = $11; //@line 2462 "stream_decoder.c"
  $604 = ($603|0)!=(0); //@line 2462 "stream_decoder.c"
  if ($604) {
   $605 = $2; //@line 2463 "stream_decoder.c"
   _send_error_to_client_($605,3); //@line 2463 "stream_decoder.c"
   $606 = $2; //@line 2464 "stream_decoder.c"
   $607 = HEAP32[$606>>2]|0; //@line 2464 "stream_decoder.c"
   HEAP32[$607>>2] = 2; //@line 2464 "stream_decoder.c"
   $1 = 1; //@line 2465 "stream_decoder.c"
   $608 = $1; //@line 2469 "stream_decoder.c"
   STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
  } else {
   $1 = 1; //@line 2468 "stream_decoder.c"
   $608 = $1; //@line 2469 "stream_decoder.c"
   STACKTOP = sp;return ($608|0); //@line 2469 "stream_decoder.c"
  }
 }
 return (0)|0;
}
function _allocate_output_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5; //@line 1271 "stream_decoder.c"
 $10 = $4; //@line 1271 "stream_decoder.c"
 $11 = ((($10)) + 4|0); //@line 1271 "stream_decoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 1271 "stream_decoder.c"
 $13 = ((($12)) + 220|0); //@line 1271 "stream_decoder.c"
 $14 = HEAP32[$13>>2]|0; //@line 1271 "stream_decoder.c"
 $15 = ($9>>>0)<=($14>>>0); //@line 1271 "stream_decoder.c"
 if ($15) {
  $16 = $6; //@line 1271 "stream_decoder.c"
  $17 = $4; //@line 1271 "stream_decoder.c"
  $18 = ((($17)) + 4|0); //@line 1271 "stream_decoder.c"
  $19 = HEAP32[$18>>2]|0; //@line 1271 "stream_decoder.c"
  $20 = ((($19)) + 224|0); //@line 1271 "stream_decoder.c"
  $21 = HEAP32[$20>>2]|0; //@line 1271 "stream_decoder.c"
  $22 = ($16>>>0)<=($21>>>0); //@line 1271 "stream_decoder.c"
  if ($22) {
   $3 = 1; //@line 1272 "stream_decoder.c"
   $122 = $3; //@line 1312 "stream_decoder.c"
   STACKTOP = sp;return ($122|0); //@line 1312 "stream_decoder.c"
  }
 }
 $7 = 0; //@line 1276 "stream_decoder.c"
 while(1) {
  $23 = $7; //@line 1276 "stream_decoder.c"
  $24 = ($23>>>0)<(8); //@line 1276 "stream_decoder.c"
  if (!($24)) {
   break;
  }
  $25 = $4; //@line 1277 "stream_decoder.c"
  $26 = ((($25)) + 4|0); //@line 1277 "stream_decoder.c"
  $27 = HEAP32[$26>>2]|0; //@line 1277 "stream_decoder.c"
  $28 = ((($27)) + 60|0); //@line 1277 "stream_decoder.c"
  $29 = $7; //@line 1277 "stream_decoder.c"
  $30 = (($28) + ($29<<2)|0); //@line 1277 "stream_decoder.c"
  $31 = HEAP32[$30>>2]|0; //@line 1277 "stream_decoder.c"
  $32 = (0|0)!=($31|0); //@line 1277 "stream_decoder.c"
  if ($32) {
   $33 = $4; //@line 1278 "stream_decoder.c"
   $34 = ((($33)) + 4|0); //@line 1278 "stream_decoder.c"
   $35 = HEAP32[$34>>2]|0; //@line 1278 "stream_decoder.c"
   $36 = ((($35)) + 60|0); //@line 1278 "stream_decoder.c"
   $37 = $7; //@line 1278 "stream_decoder.c"
   $38 = (($36) + ($37<<2)|0); //@line 1278 "stream_decoder.c"
   $39 = HEAP32[$38>>2]|0; //@line 1278 "stream_decoder.c"
   $40 = ((($39)) + -16|0); //@line 1278 "stream_decoder.c"
   _free($40); //@line 1278 "stream_decoder.c"
   $41 = $4; //@line 1279 "stream_decoder.c"
   $42 = ((($41)) + 4|0); //@line 1279 "stream_decoder.c"
   $43 = HEAP32[$42>>2]|0; //@line 1279 "stream_decoder.c"
   $44 = ((($43)) + 60|0); //@line 1279 "stream_decoder.c"
   $45 = $7; //@line 1279 "stream_decoder.c"
   $46 = (($44) + ($45<<2)|0); //@line 1279 "stream_decoder.c"
   HEAP32[$46>>2] = 0; //@line 1279 "stream_decoder.c"
  }
  $47 = $4; //@line 1281 "stream_decoder.c"
  $48 = ((($47)) + 4|0); //@line 1281 "stream_decoder.c"
  $49 = HEAP32[$48>>2]|0; //@line 1281 "stream_decoder.c"
  $50 = ((($49)) + 3616|0); //@line 1281 "stream_decoder.c"
  $51 = $7; //@line 1281 "stream_decoder.c"
  $52 = (($50) + ($51<<2)|0); //@line 1281 "stream_decoder.c"
  $53 = HEAP32[$52>>2]|0; //@line 1281 "stream_decoder.c"
  $54 = (0|0)!=($53|0); //@line 1281 "stream_decoder.c"
  if ($54) {
   $55 = $4; //@line 1282 "stream_decoder.c"
   $56 = ((($55)) + 4|0); //@line 1282 "stream_decoder.c"
   $57 = HEAP32[$56>>2]|0; //@line 1282 "stream_decoder.c"
   $58 = ((($57)) + 3616|0); //@line 1282 "stream_decoder.c"
   $59 = $7; //@line 1282 "stream_decoder.c"
   $60 = (($58) + ($59<<2)|0); //@line 1282 "stream_decoder.c"
   $61 = HEAP32[$60>>2]|0; //@line 1282 "stream_decoder.c"
   _free($61); //@line 1282 "stream_decoder.c"
   $62 = $4; //@line 1283 "stream_decoder.c"
   $63 = ((($62)) + 4|0); //@line 1283 "stream_decoder.c"
   $64 = HEAP32[$63>>2]|0; //@line 1283 "stream_decoder.c"
   $65 = ((($64)) + 92|0); //@line 1283 "stream_decoder.c"
   $66 = $7; //@line 1283 "stream_decoder.c"
   $67 = (($65) + ($66<<2)|0); //@line 1283 "stream_decoder.c"
   HEAP32[$67>>2] = 0; //@line 1283 "stream_decoder.c"
   $68 = $4; //@line 1283 "stream_decoder.c"
   $69 = ((($68)) + 4|0); //@line 1283 "stream_decoder.c"
   $70 = HEAP32[$69>>2]|0; //@line 1283 "stream_decoder.c"
   $71 = ((($70)) + 3616|0); //@line 1283 "stream_decoder.c"
   $72 = $7; //@line 1283 "stream_decoder.c"
   $73 = (($71) + ($72<<2)|0); //@line 1283 "stream_decoder.c"
   HEAP32[$73>>2] = 0; //@line 1283 "stream_decoder.c"
  }
  $74 = $7; //@line 1276 "stream_decoder.c"
  $75 = (($74) + 1)|0; //@line 1276 "stream_decoder.c"
  $7 = $75; //@line 1276 "stream_decoder.c"
 }
 $7 = 0; //@line 1287 "stream_decoder.c"
 while(1) {
  $76 = $7; //@line 1287 "stream_decoder.c"
  $77 = $6; //@line 1287 "stream_decoder.c"
  $78 = ($76>>>0)<($77>>>0); //@line 1287 "stream_decoder.c"
  $79 = $5;
  if (!($78)) {
   label = 18;
   break;
  }
  $80 = (_safe_malloc_muladd2_(4,$79,4)|0); //@line 1294 "stream_decoder.c"
  $8 = $80; //@line 1294 "stream_decoder.c"
  $81 = $8; //@line 1295 "stream_decoder.c"
  $82 = ($81|0)==(0|0); //@line 1295 "stream_decoder.c"
  if ($82) {
   label = 14;
   break;
  }
  $85 = $8; //@line 1299 "stream_decoder.c"
  ;HEAP32[$85>>2]=0|0;HEAP32[$85+4>>2]=0|0;HEAP32[$85+8>>2]=0|0;HEAP32[$85+12>>2]=0|0; //@line 1299 "stream_decoder.c"
  $86 = $8; //@line 1300 "stream_decoder.c"
  $87 = ((($86)) + 16|0); //@line 1300 "stream_decoder.c"
  $88 = $4; //@line 1300 "stream_decoder.c"
  $89 = ((($88)) + 4|0); //@line 1300 "stream_decoder.c"
  $90 = HEAP32[$89>>2]|0; //@line 1300 "stream_decoder.c"
  $91 = ((($90)) + 60|0); //@line 1300 "stream_decoder.c"
  $92 = $7; //@line 1300 "stream_decoder.c"
  $93 = (($91) + ($92<<2)|0); //@line 1300 "stream_decoder.c"
  HEAP32[$93>>2] = $87; //@line 1300 "stream_decoder.c"
  $94 = $5; //@line 1302 "stream_decoder.c"
  $95 = $4; //@line 1302 "stream_decoder.c"
  $96 = ((($95)) + 4|0); //@line 1302 "stream_decoder.c"
  $97 = HEAP32[$96>>2]|0; //@line 1302 "stream_decoder.c"
  $98 = ((($97)) + 3616|0); //@line 1302 "stream_decoder.c"
  $99 = $7; //@line 1302 "stream_decoder.c"
  $100 = (($98) + ($99<<2)|0); //@line 1302 "stream_decoder.c"
  $101 = $4; //@line 1302 "stream_decoder.c"
  $102 = ((($101)) + 4|0); //@line 1302 "stream_decoder.c"
  $103 = HEAP32[$102>>2]|0; //@line 1302 "stream_decoder.c"
  $104 = ((($103)) + 92|0); //@line 1302 "stream_decoder.c"
  $105 = $7; //@line 1302 "stream_decoder.c"
  $106 = (($104) + ($105<<2)|0); //@line 1302 "stream_decoder.c"
  $107 = (_FLAC__memory_alloc_aligned_int32_array($94,$100,$106)|0); //@line 1302 "stream_decoder.c"
  $108 = ($107|0)!=(0); //@line 1302 "stream_decoder.c"
  if (!($108)) {
   label = 16;
   break;
  }
  $111 = $7; //@line 1287 "stream_decoder.c"
  $112 = (($111) + 1)|0; //@line 1287 "stream_decoder.c"
  $7 = $112; //@line 1287 "stream_decoder.c"
 }
 if ((label|0) == 14) {
  $83 = $4; //@line 1296 "stream_decoder.c"
  $84 = HEAP32[$83>>2]|0; //@line 1296 "stream_decoder.c"
  HEAP32[$84>>2] = 8; //@line 1296 "stream_decoder.c"
  $3 = 0; //@line 1297 "stream_decoder.c"
  $122 = $3; //@line 1312 "stream_decoder.c"
  STACKTOP = sp;return ($122|0); //@line 1312 "stream_decoder.c"
 }
 else if ((label|0) == 16) {
  $109 = $4; //@line 1303 "stream_decoder.c"
  $110 = HEAP32[$109>>2]|0; //@line 1303 "stream_decoder.c"
  HEAP32[$110>>2] = 8; //@line 1303 "stream_decoder.c"
  $3 = 0; //@line 1304 "stream_decoder.c"
  $122 = $3; //@line 1312 "stream_decoder.c"
  STACKTOP = sp;return ($122|0); //@line 1312 "stream_decoder.c"
 }
 else if ((label|0) == 18) {
  $113 = $4; //@line 1308 "stream_decoder.c"
  $114 = ((($113)) + 4|0); //@line 1308 "stream_decoder.c"
  $115 = HEAP32[$114>>2]|0; //@line 1308 "stream_decoder.c"
  $116 = ((($115)) + 220|0); //@line 1308 "stream_decoder.c"
  HEAP32[$116>>2] = $79; //@line 1308 "stream_decoder.c"
  $117 = $6; //@line 1309 "stream_decoder.c"
  $118 = $4; //@line 1309 "stream_decoder.c"
  $119 = ((($118)) + 4|0); //@line 1309 "stream_decoder.c"
  $120 = HEAP32[$119>>2]|0; //@line 1309 "stream_decoder.c"
  $121 = ((($120)) + 224|0); //@line 1309 "stream_decoder.c"
  HEAP32[$121>>2] = $117; //@line 1309 "stream_decoder.c"
  $3 = 1; //@line 1311 "stream_decoder.c"
  $122 = $3; //@line 1312 "stream_decoder.c"
  STACKTOP = sp;return ($122|0); //@line 1312 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_subframe_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 16|0;
 $12 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5; //@line 2477 "stream_decoder.c"
 $15 = ((($14)) + 4|0); //@line 2477 "stream_decoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 2477 "stream_decoder.c"
 $17 = ((($16)) + 56|0); //@line 2477 "stream_decoder.c"
 $18 = HEAP32[$17>>2]|0; //@line 2477 "stream_decoder.c"
 $19 = (_FLAC__bitreader_read_raw_uint32($18,$9,8)|0); //@line 2477 "stream_decoder.c"
 $20 = ($19|0)!=(0); //@line 2477 "stream_decoder.c"
 if (!($20)) {
  $4 = 0; //@line 2478 "stream_decoder.c"
  $175 = $4; //@line 2543 "stream_decoder.c"
  STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
 }
 $21 = HEAP32[$9>>2]|0; //@line 2480 "stream_decoder.c"
 $22 = $21 & 1; //@line 2480 "stream_decoder.c"
 $10 = $22; //@line 2480 "stream_decoder.c"
 $23 = HEAP32[$9>>2]|0; //@line 2481 "stream_decoder.c"
 $24 = $23 & 254; //@line 2481 "stream_decoder.c"
 HEAP32[$9>>2] = $24; //@line 2481 "stream_decoder.c"
 $25 = $10; //@line 2483 "stream_decoder.c"
 $26 = ($25|0)!=(0); //@line 2483 "stream_decoder.c"
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 do {
  if ($26) {
   $30 = ((($29)) + 56|0); //@line 2485 "stream_decoder.c"
   $31 = HEAP32[$30>>2]|0; //@line 2485 "stream_decoder.c"
   $32 = (_FLAC__bitreader_read_unary_unsigned($31,$12)|0); //@line 2485 "stream_decoder.c"
   $33 = ($32|0)!=(0); //@line 2485 "stream_decoder.c"
   if (!($33)) {
    $4 = 0; //@line 2486 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $34 = HEAP32[$12>>2]|0; //@line 2487 "stream_decoder.c"
   $35 = (($34) + 1)|0; //@line 2487 "stream_decoder.c"
   $36 = $5; //@line 2487 "stream_decoder.c"
   $37 = ((($36)) + 4|0); //@line 2487 "stream_decoder.c"
   $38 = HEAP32[$37>>2]|0; //@line 2487 "stream_decoder.c"
   $39 = ((($38)) + 1136|0); //@line 2487 "stream_decoder.c"
   $40 = ((($39)) + 40|0); //@line 2487 "stream_decoder.c"
   $41 = $6; //@line 2487 "stream_decoder.c"
   $42 = (($40) + (($41*292)|0)|0); //@line 2487 "stream_decoder.c"
   $43 = ((($42)) + 288|0); //@line 2487 "stream_decoder.c"
   HEAP32[$43>>2] = $35; //@line 2487 "stream_decoder.c"
   $44 = $5; //@line 2488 "stream_decoder.c"
   $45 = ((($44)) + 4|0); //@line 2488 "stream_decoder.c"
   $46 = HEAP32[$45>>2]|0; //@line 2488 "stream_decoder.c"
   $47 = ((($46)) + 1136|0); //@line 2488 "stream_decoder.c"
   $48 = ((($47)) + 40|0); //@line 2488 "stream_decoder.c"
   $49 = $6; //@line 2488 "stream_decoder.c"
   $50 = (($48) + (($49*292)|0)|0); //@line 2488 "stream_decoder.c"
   $51 = ((($50)) + 288|0); //@line 2488 "stream_decoder.c"
   $52 = HEAP32[$51>>2]|0; //@line 2488 "stream_decoder.c"
   $53 = $7; //@line 2488 "stream_decoder.c"
   $54 = ($52>>>0)>=($53>>>0); //@line 2488 "stream_decoder.c"
   if (!($54)) {
    $55 = $5; //@line 2490 "stream_decoder.c"
    $56 = ((($55)) + 4|0); //@line 2490 "stream_decoder.c"
    $57 = HEAP32[$56>>2]|0; //@line 2490 "stream_decoder.c"
    $58 = ((($57)) + 1136|0); //@line 2490 "stream_decoder.c"
    $59 = ((($58)) + 40|0); //@line 2490 "stream_decoder.c"
    $60 = $6; //@line 2490 "stream_decoder.c"
    $61 = (($59) + (($60*292)|0)|0); //@line 2490 "stream_decoder.c"
    $62 = ((($61)) + 288|0); //@line 2490 "stream_decoder.c"
    $63 = HEAP32[$62>>2]|0; //@line 2490 "stream_decoder.c"
    $64 = $7; //@line 2490 "stream_decoder.c"
    $65 = (($64) - ($63))|0; //@line 2490 "stream_decoder.c"
    $7 = $65; //@line 2490 "stream_decoder.c"
    break;
   }
   $4 = 0; //@line 2489 "stream_decoder.c"
   $175 = $4; //@line 2543 "stream_decoder.c"
   STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
  } else {
   $66 = ((($29)) + 1136|0); //@line 2493 "stream_decoder.c"
   $67 = ((($66)) + 40|0); //@line 2493 "stream_decoder.c"
   $68 = $6; //@line 2493 "stream_decoder.c"
   $69 = (($67) + (($68*292)|0)|0); //@line 2493 "stream_decoder.c"
   $70 = ((($69)) + 288|0); //@line 2493 "stream_decoder.c"
   HEAP32[$70>>2] = 0; //@line 2493 "stream_decoder.c"
  }
 } while(0);
 $71 = HEAP32[$9>>2]|0; //@line 2498 "stream_decoder.c"
 $72 = $71 & 128; //@line 2498 "stream_decoder.c"
 $73 = ($72|0)!=(0); //@line 2498 "stream_decoder.c"
 if ($73) {
  $74 = $5; //@line 2499 "stream_decoder.c"
  _send_error_to_client_($74,0); //@line 2499 "stream_decoder.c"
  $75 = $5; //@line 2500 "stream_decoder.c"
  $76 = HEAP32[$75>>2]|0; //@line 2500 "stream_decoder.c"
  HEAP32[$76>>2] = 2; //@line 2500 "stream_decoder.c"
  $4 = 1; //@line 2501 "stream_decoder.c"
  $175 = $4; //@line 2543 "stream_decoder.c"
  STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
 }
 $77 = HEAP32[$9>>2]|0; //@line 2503 "stream_decoder.c"
 $78 = ($77|0)==(0); //@line 2503 "stream_decoder.c"
 do {
  if ($78) {
   $79 = $5; //@line 2504 "stream_decoder.c"
   $80 = $6; //@line 2504 "stream_decoder.c"
   $81 = $7; //@line 2504 "stream_decoder.c"
   $82 = $8; //@line 2504 "stream_decoder.c"
   $83 = (_read_subframe_constant_($79,$80,$81,$82)|0); //@line 2504 "stream_decoder.c"
   $84 = ($83|0)!=(0); //@line 2504 "stream_decoder.c"
   if (!($84)) {
    $4 = 0; //@line 2505 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
  } else {
   $85 = HEAP32[$9>>2]|0; //@line 2507 "stream_decoder.c"
   $86 = ($85|0)==(2); //@line 2507 "stream_decoder.c"
   if ($86) {
    $87 = $5; //@line 2508 "stream_decoder.c"
    $88 = $6; //@line 2508 "stream_decoder.c"
    $89 = $7; //@line 2508 "stream_decoder.c"
    $90 = $8; //@line 2508 "stream_decoder.c"
    $91 = (_read_subframe_verbatim_($87,$88,$89,$90)|0); //@line 2508 "stream_decoder.c"
    $92 = ($91|0)!=(0); //@line 2508 "stream_decoder.c"
    if ($92) {
     break;
    }
    $4 = 0; //@line 2509 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $93 = HEAP32[$9>>2]|0; //@line 2511 "stream_decoder.c"
   $94 = ($93>>>0)<(16); //@line 2511 "stream_decoder.c"
   if ($94) {
    $95 = $5; //@line 2512 "stream_decoder.c"
    _send_error_to_client_($95,3); //@line 2512 "stream_decoder.c"
    $96 = $5; //@line 2513 "stream_decoder.c"
    $97 = HEAP32[$96>>2]|0; //@line 2513 "stream_decoder.c"
    HEAP32[$97>>2] = 2; //@line 2513 "stream_decoder.c"
    $4 = 1; //@line 2514 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $98 = HEAP32[$9>>2]|0; //@line 2516 "stream_decoder.c"
   $99 = ($98>>>0)<=(24); //@line 2516 "stream_decoder.c"
   if ($99) {
    $100 = $5; //@line 2517 "stream_decoder.c"
    $101 = $6; //@line 2517 "stream_decoder.c"
    $102 = $7; //@line 2517 "stream_decoder.c"
    $103 = HEAP32[$9>>2]|0; //@line 2517 "stream_decoder.c"
    $104 = $103 >>> 1; //@line 2517 "stream_decoder.c"
    $105 = $104 & 7; //@line 2517 "stream_decoder.c"
    $106 = $8; //@line 2517 "stream_decoder.c"
    $107 = (_read_subframe_fixed_($100,$101,$102,$105,$106)|0); //@line 2517 "stream_decoder.c"
    $108 = ($107|0)!=(0); //@line 2517 "stream_decoder.c"
    if (!($108)) {
     $4 = 0; //@line 2518 "stream_decoder.c"
     $175 = $4; //@line 2543 "stream_decoder.c"
     STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
    }
    $109 = $5; //@line 2519 "stream_decoder.c"
    $110 = HEAP32[$109>>2]|0; //@line 2519 "stream_decoder.c"
    $111 = HEAP32[$110>>2]|0; //@line 2519 "stream_decoder.c"
    $112 = ($111|0)==(2); //@line 2519 "stream_decoder.c"
    if (!($112)) {
     break;
    }
    $4 = 1; //@line 2520 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $113 = HEAP32[$9>>2]|0; //@line 2522 "stream_decoder.c"
   $114 = ($113>>>0)<(64); //@line 2522 "stream_decoder.c"
   $115 = $5;
   if ($114) {
    _send_error_to_client_($115,3); //@line 2523 "stream_decoder.c"
    $116 = $5; //@line 2524 "stream_decoder.c"
    $117 = HEAP32[$116>>2]|0; //@line 2524 "stream_decoder.c"
    HEAP32[$117>>2] = 2; //@line 2524 "stream_decoder.c"
    $4 = 1; //@line 2525 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $118 = $6; //@line 2528 "stream_decoder.c"
   $119 = $7; //@line 2528 "stream_decoder.c"
   $120 = HEAP32[$9>>2]|0; //@line 2528 "stream_decoder.c"
   $121 = $120 >>> 1; //@line 2528 "stream_decoder.c"
   $122 = $121 & 31; //@line 2528 "stream_decoder.c"
   $123 = (($122) + 1)|0; //@line 2528 "stream_decoder.c"
   $124 = $8; //@line 2528 "stream_decoder.c"
   $125 = (_read_subframe_lpc_($115,$118,$119,$123,$124)|0); //@line 2528 "stream_decoder.c"
   $126 = ($125|0)!=(0); //@line 2528 "stream_decoder.c"
   if (!($126)) {
    $4 = 0; //@line 2529 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
   $127 = $5; //@line 2530 "stream_decoder.c"
   $128 = HEAP32[$127>>2]|0; //@line 2530 "stream_decoder.c"
   $129 = HEAP32[$128>>2]|0; //@line 2530 "stream_decoder.c"
   $130 = ($129|0)==(2); //@line 2530 "stream_decoder.c"
   if ($130) {
    $4 = 1; //@line 2531 "stream_decoder.c"
    $175 = $4; //@line 2543 "stream_decoder.c"
    STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
   }
  }
 } while(0);
 $131 = $10; //@line 2534 "stream_decoder.c"
 $132 = ($131|0)!=(0); //@line 2534 "stream_decoder.c"
 $133 = $8; //@line 2534 "stream_decoder.c"
 $134 = ($133|0)!=(0); //@line 2534 "stream_decoder.c"
 $or$cond = $132 & $134; //@line 2534 "stream_decoder.c"
 L55: do {
  if ($or$cond) {
   $135 = $5; //@line 2535 "stream_decoder.c"
   $136 = ((($135)) + 4|0); //@line 2535 "stream_decoder.c"
   $137 = HEAP32[$136>>2]|0; //@line 2535 "stream_decoder.c"
   $138 = ((($137)) + 1136|0); //@line 2535 "stream_decoder.c"
   $139 = ((($138)) + 40|0); //@line 2535 "stream_decoder.c"
   $140 = $6; //@line 2535 "stream_decoder.c"
   $141 = (($139) + (($140*292)|0)|0); //@line 2535 "stream_decoder.c"
   $142 = ((($141)) + 288|0); //@line 2535 "stream_decoder.c"
   $143 = HEAP32[$142>>2]|0; //@line 2535 "stream_decoder.c"
   HEAP32[$9>>2] = $143; //@line 2535 "stream_decoder.c"
   $11 = 0; //@line 2536 "stream_decoder.c"
   while(1) {
    $144 = $11; //@line 2536 "stream_decoder.c"
    $145 = $5; //@line 2536 "stream_decoder.c"
    $146 = ((($145)) + 4|0); //@line 2536 "stream_decoder.c"
    $147 = HEAP32[$146>>2]|0; //@line 2536 "stream_decoder.c"
    $148 = ((($147)) + 1136|0); //@line 2536 "stream_decoder.c"
    $149 = HEAP32[$148>>2]|0; //@line 2536 "stream_decoder.c"
    $150 = ($144>>>0)<($149>>>0); //@line 2536 "stream_decoder.c"
    if (!($150)) {
     break L55;
    }
    $151 = $5; //@line 2537 "stream_decoder.c"
    $152 = ((($151)) + 4|0); //@line 2537 "stream_decoder.c"
    $153 = HEAP32[$152>>2]|0; //@line 2537 "stream_decoder.c"
    $154 = ((($153)) + 60|0); //@line 2537 "stream_decoder.c"
    $155 = $6; //@line 2537 "stream_decoder.c"
    $156 = (($154) + ($155<<2)|0); //@line 2537 "stream_decoder.c"
    $157 = HEAP32[$156>>2]|0; //@line 2537 "stream_decoder.c"
    $158 = $11; //@line 2537 "stream_decoder.c"
    $159 = (($157) + ($158<<2)|0); //@line 2537 "stream_decoder.c"
    $160 = HEAP32[$159>>2]|0; //@line 2537 "stream_decoder.c"
    $13 = $160; //@line 2537 "stream_decoder.c"
    $161 = $13; //@line 2538 "stream_decoder.c"
    $162 = HEAP32[$9>>2]|0; //@line 2538 "stream_decoder.c"
    $163 = $161 << $162; //@line 2538 "stream_decoder.c"
    $164 = $5; //@line 2538 "stream_decoder.c"
    $165 = ((($164)) + 4|0); //@line 2538 "stream_decoder.c"
    $166 = HEAP32[$165>>2]|0; //@line 2538 "stream_decoder.c"
    $167 = ((($166)) + 60|0); //@line 2538 "stream_decoder.c"
    $168 = $6; //@line 2538 "stream_decoder.c"
    $169 = (($167) + ($168<<2)|0); //@line 2538 "stream_decoder.c"
    $170 = HEAP32[$169>>2]|0; //@line 2538 "stream_decoder.c"
    $171 = $11; //@line 2538 "stream_decoder.c"
    $172 = (($170) + ($171<<2)|0); //@line 2538 "stream_decoder.c"
    HEAP32[$172>>2] = $163; //@line 2538 "stream_decoder.c"
    $173 = $11; //@line 2536 "stream_decoder.c"
    $174 = (($173) + 1)|0; //@line 2536 "stream_decoder.c"
    $11 = $174; //@line 2536 "stream_decoder.c"
   }
  }
 } while(0);
 $4 = 1; //@line 2542 "stream_decoder.c"
 $175 = $4; //@line 2543 "stream_decoder.c"
 STACKTOP = sp;return ($175|0); //@line 2543 "stream_decoder.c"
}
function _read_zero_padding_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 $4 = $2; //@line 2795 "stream_decoder.c"
 $5 = ((($4)) + 4|0); //@line 2795 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 2795 "stream_decoder.c"
 $7 = ((($6)) + 56|0); //@line 2795 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 2795 "stream_decoder.c"
 $9 = (_FLAC__bitreader_is_consumed_byte_aligned($8)|0); //@line 2795 "stream_decoder.c"
 $10 = ($9|0)!=(0); //@line 2795 "stream_decoder.c"
 do {
  if (!($10)) {
   HEAP32[$3>>2] = 0; //@line 2796 "stream_decoder.c"
   $11 = $2; //@line 2797 "stream_decoder.c"
   $12 = ((($11)) + 4|0); //@line 2797 "stream_decoder.c"
   $13 = HEAP32[$12>>2]|0; //@line 2797 "stream_decoder.c"
   $14 = ((($13)) + 56|0); //@line 2797 "stream_decoder.c"
   $15 = HEAP32[$14>>2]|0; //@line 2797 "stream_decoder.c"
   $16 = $2; //@line 2797 "stream_decoder.c"
   $17 = ((($16)) + 4|0); //@line 2797 "stream_decoder.c"
   $18 = HEAP32[$17>>2]|0; //@line 2797 "stream_decoder.c"
   $19 = ((($18)) + 56|0); //@line 2797 "stream_decoder.c"
   $20 = HEAP32[$19>>2]|0; //@line 2797 "stream_decoder.c"
   $21 = (_FLAC__bitreader_bits_left_for_byte_alignment($20)|0); //@line 2797 "stream_decoder.c"
   $22 = (_FLAC__bitreader_read_raw_uint32($15,$3,$21)|0); //@line 2797 "stream_decoder.c"
   $23 = ($22|0)!=(0); //@line 2797 "stream_decoder.c"
   if ($23) {
    $24 = HEAP32[$3>>2]|0; //@line 2799 "stream_decoder.c"
    $25 = ($24|0)!=(0); //@line 2799 "stream_decoder.c"
    if (!($25)) {
     break;
    }
    $26 = $2; //@line 2800 "stream_decoder.c"
    _send_error_to_client_($26,0); //@line 2800 "stream_decoder.c"
    $27 = $2; //@line 2801 "stream_decoder.c"
    $28 = HEAP32[$27>>2]|0; //@line 2801 "stream_decoder.c"
    HEAP32[$28>>2] = 2; //@line 2801 "stream_decoder.c"
    break;
   } else {
    $1 = 0; //@line 2798 "stream_decoder.c"
    $29 = $1; //@line 2805 "stream_decoder.c"
    STACKTOP = sp;return ($29|0); //@line 2805 "stream_decoder.c"
   }
  }
 } while(0);
 $1 = 1; //@line 2804 "stream_decoder.c"
 $29 = $1; //@line 2805 "stream_decoder.c"
 STACKTOP = sp;return ($29|0); //@line 2805 "stream_decoder.c"
}
function _send_error_to_client_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2; //@line 2987 "stream_decoder.c"
 $5 = ((($4)) + 4|0); //@line 2987 "stream_decoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 2987 "stream_decoder.c"
 $7 = ((($6)) + 3656|0); //@line 2987 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 2987 "stream_decoder.c"
 $9 = ($8|0)!=(0); //@line 2987 "stream_decoder.c"
 if (!($9)) {
  $10 = $2; //@line 2988 "stream_decoder.c"
  $11 = ((($10)) + 4|0); //@line 2988 "stream_decoder.c"
  $12 = HEAP32[$11>>2]|0; //@line 2988 "stream_decoder.c"
  $13 = ((($12)) + 32|0); //@line 2988 "stream_decoder.c"
  $14 = HEAP32[$13>>2]|0; //@line 2988 "stream_decoder.c"
  $15 = $2; //@line 2988 "stream_decoder.c"
  $16 = $3; //@line 2988 "stream_decoder.c"
  $17 = $2; //@line 2988 "stream_decoder.c"
  $18 = ((($17)) + 4|0); //@line 2988 "stream_decoder.c"
  $19 = HEAP32[$18>>2]|0; //@line 2988 "stream_decoder.c"
  $20 = ((($19)) + 48|0); //@line 2988 "stream_decoder.c"
  $21 = HEAP32[$20>>2]|0; //@line 2988 "stream_decoder.c"
  FUNCTION_TABLE_viii[$14 & 31]($15,$16,$21); //@line 2988 "stream_decoder.c"
  STACKTOP = sp;return; //@line 2991 "stream_decoder.c"
 }
 $22 = $3; //@line 2989 "stream_decoder.c"
 $23 = ($22|0)==(3); //@line 2989 "stream_decoder.c"
 if (!($23)) {
  STACKTOP = sp;return; //@line 2991 "stream_decoder.c"
 }
 $24 = $2; //@line 2990 "stream_decoder.c"
 $25 = ((($24)) + 4|0); //@line 2990 "stream_decoder.c"
 $26 = HEAP32[$25>>2]|0; //@line 2990 "stream_decoder.c"
 $27 = ((($26)) + 6176|0); //@line 2990 "stream_decoder.c"
 $28 = HEAP32[$27>>2]|0; //@line 2990 "stream_decoder.c"
 $29 = (($28) + 1)|0; //@line 2990 "stream_decoder.c"
 HEAP32[$27>>2] = $29; //@line 2990 "stream_decoder.c"
 STACKTOP = sp;return; //@line 2991 "stream_decoder.c"
}
function _write_audio_frame_to_client_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $12 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4; //@line 2935 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 2935 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 2935 "stream_decoder.c"
 $16 = ((($15)) + 3656|0); //@line 2935 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 2935 "stream_decoder.c"
 $18 = ($17|0)!=(0); //@line 2935 "stream_decoder.c"
 if (!($18)) {
  $188 = $4; //@line 2975 "stream_decoder.c"
  $189 = ((($188)) + 4|0); //@line 2975 "stream_decoder.c"
  $190 = HEAP32[$189>>2]|0; //@line 2975 "stream_decoder.c"
  $191 = ((($190)) + 248|0); //@line 2975 "stream_decoder.c"
  $192 = HEAP32[$191>>2]|0; //@line 2975 "stream_decoder.c"
  $193 = ($192|0)!=(0); //@line 2975 "stream_decoder.c"
  if (!($193)) {
   $194 = $4; //@line 2976 "stream_decoder.c"
   $195 = ((($194)) + 4|0); //@line 2976 "stream_decoder.c"
   $196 = HEAP32[$195>>2]|0; //@line 2976 "stream_decoder.c"
   $197 = ((($196)) + 3648|0); //@line 2976 "stream_decoder.c"
   HEAP32[$197>>2] = 0; //@line 2976 "stream_decoder.c"
  }
  $198 = $4; //@line 2977 "stream_decoder.c"
  $199 = ((($198)) + 4|0); //@line 2977 "stream_decoder.c"
  $200 = HEAP32[$199>>2]|0; //@line 2977 "stream_decoder.c"
  $201 = ((($200)) + 3648|0); //@line 2977 "stream_decoder.c"
  $202 = HEAP32[$201>>2]|0; //@line 2977 "stream_decoder.c"
  $203 = ($202|0)!=(0); //@line 2977 "stream_decoder.c"
  if ($203) {
   $204 = $4; //@line 2978 "stream_decoder.c"
   $205 = ((($204)) + 4|0); //@line 2978 "stream_decoder.c"
   $206 = HEAP32[$205>>2]|0; //@line 2978 "stream_decoder.c"
   $207 = ((($206)) + 3660|0); //@line 2978 "stream_decoder.c"
   $208 = $6; //@line 2978 "stream_decoder.c"
   $209 = $5; //@line 2978 "stream_decoder.c"
   $210 = ((($209)) + 8|0); //@line 2978 "stream_decoder.c"
   $211 = HEAP32[$210>>2]|0; //@line 2978 "stream_decoder.c"
   $212 = $5; //@line 2978 "stream_decoder.c"
   $213 = HEAP32[$212>>2]|0; //@line 2978 "stream_decoder.c"
   $214 = $5; //@line 2978 "stream_decoder.c"
   $215 = ((($214)) + 16|0); //@line 2978 "stream_decoder.c"
   $216 = HEAP32[$215>>2]|0; //@line 2978 "stream_decoder.c"
   $217 = (($216) + 7)|0; //@line 2978 "stream_decoder.c"
   $218 = (($217>>>0) / 8)&-1; //@line 2978 "stream_decoder.c"
   $219 = (_FLAC__MD5Accumulate($207,$208,$211,$213,$218)|0); //@line 2978 "stream_decoder.c"
   $220 = ($219|0)!=(0); //@line 2978 "stream_decoder.c"
   if (!($220)) {
    $3 = 1; //@line 2979 "stream_decoder.c"
    $235 = $3; //@line 2983 "stream_decoder.c"
    STACKTOP = sp;return ($235|0); //@line 2983 "stream_decoder.c"
   }
  }
  $221 = $4; //@line 2981 "stream_decoder.c"
  $222 = ((($221)) + 4|0); //@line 2981 "stream_decoder.c"
  $223 = HEAP32[$222>>2]|0; //@line 2981 "stream_decoder.c"
  $224 = ((($223)) + 24|0); //@line 2981 "stream_decoder.c"
  $225 = HEAP32[$224>>2]|0; //@line 2981 "stream_decoder.c"
  $226 = $4; //@line 2981 "stream_decoder.c"
  $227 = $5; //@line 2981 "stream_decoder.c"
  $228 = $6; //@line 2981 "stream_decoder.c"
  $229 = $4; //@line 2981 "stream_decoder.c"
  $230 = ((($229)) + 4|0); //@line 2981 "stream_decoder.c"
  $231 = HEAP32[$230>>2]|0; //@line 2981 "stream_decoder.c"
  $232 = ((($231)) + 48|0); //@line 2981 "stream_decoder.c"
  $233 = HEAP32[$232>>2]|0; //@line 2981 "stream_decoder.c"
  $234 = (FUNCTION_TABLE_iiiii[$225 & 31]($226,$227,$228,$233)|0); //@line 2981 "stream_decoder.c"
  $3 = $234; //@line 2981 "stream_decoder.c"
  $235 = $3; //@line 2983 "stream_decoder.c"
  STACKTOP = sp;return ($235|0); //@line 2983 "stream_decoder.c"
 }
 $19 = $5; //@line 2936 "stream_decoder.c"
 $20 = ((($19)) + 24|0); //@line 2936 "stream_decoder.c"
 $21 = $20; //@line 2936 "stream_decoder.c"
 $22 = $21; //@line 2936 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 2936 "stream_decoder.c"
 $24 = (($21) + 4)|0; //@line 2936 "stream_decoder.c"
 $25 = $24; //@line 2936 "stream_decoder.c"
 $26 = HEAP32[$25>>2]|0; //@line 2936 "stream_decoder.c"
 $27 = $7; //@line 2936 "stream_decoder.c"
 $28 = $27; //@line 2936 "stream_decoder.c"
 HEAP32[$28>>2] = $23; //@line 2936 "stream_decoder.c"
 $29 = (($27) + 4)|0; //@line 2936 "stream_decoder.c"
 $30 = $29; //@line 2936 "stream_decoder.c"
 HEAP32[$30>>2] = $26; //@line 2936 "stream_decoder.c"
 $31 = $7; //@line 2937 "stream_decoder.c"
 $32 = $31; //@line 2937 "stream_decoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 2937 "stream_decoder.c"
 $34 = (($31) + 4)|0; //@line 2937 "stream_decoder.c"
 $35 = $34; //@line 2937 "stream_decoder.c"
 $36 = HEAP32[$35>>2]|0; //@line 2937 "stream_decoder.c"
 $37 = $5; //@line 2937 "stream_decoder.c"
 $38 = HEAP32[$37>>2]|0; //@line 2937 "stream_decoder.c"
 $39 = (_i64Add(($33|0),($36|0),($38|0),0)|0); //@line 2937 "stream_decoder.c"
 $40 = tempRet0; //@line 2937 "stream_decoder.c"
 $41 = $8; //@line 2937 "stream_decoder.c"
 $42 = $41; //@line 2937 "stream_decoder.c"
 HEAP32[$42>>2] = $39; //@line 2937 "stream_decoder.c"
 $43 = (($41) + 4)|0; //@line 2937 "stream_decoder.c"
 $44 = $43; //@line 2937 "stream_decoder.c"
 HEAP32[$44>>2] = $40; //@line 2937 "stream_decoder.c"
 $45 = $4; //@line 2938 "stream_decoder.c"
 $46 = ((($45)) + 4|0); //@line 2938 "stream_decoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 2938 "stream_decoder.c"
 $48 = ((($47)) + 6168|0); //@line 2938 "stream_decoder.c"
 $49 = $48; //@line 2938 "stream_decoder.c"
 $50 = $49; //@line 2938 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 2938 "stream_decoder.c"
 $52 = (($49) + 4)|0; //@line 2938 "stream_decoder.c"
 $53 = $52; //@line 2938 "stream_decoder.c"
 $54 = HEAP32[$53>>2]|0; //@line 2938 "stream_decoder.c"
 $55 = $9; //@line 2938 "stream_decoder.c"
 $56 = $55; //@line 2938 "stream_decoder.c"
 HEAP32[$56>>2] = $51; //@line 2938 "stream_decoder.c"
 $57 = (($55) + 4)|0; //@line 2938 "stream_decoder.c"
 $58 = $57; //@line 2938 "stream_decoder.c"
 HEAP32[$58>>2] = $54; //@line 2938 "stream_decoder.c"
 $59 = $4; //@line 2945 "stream_decoder.c"
 $60 = ((($59)) + 4|0); //@line 2945 "stream_decoder.c"
 $61 = HEAP32[$60>>2]|0; //@line 2945 "stream_decoder.c"
 $62 = ((($61)) + 3776|0); //@line 2945 "stream_decoder.c"
 $63 = $5; //@line 2945 "stream_decoder.c"
 _memcpy(($62|0),($63|0),2384)|0; //@line 2945 "stream_decoder.c"
 $64 = $7; //@line 2946 "stream_decoder.c"
 $65 = $64; //@line 2946 "stream_decoder.c"
 $66 = HEAP32[$65>>2]|0; //@line 2946 "stream_decoder.c"
 $67 = (($64) + 4)|0; //@line 2946 "stream_decoder.c"
 $68 = $67; //@line 2946 "stream_decoder.c"
 $69 = HEAP32[$68>>2]|0; //@line 2946 "stream_decoder.c"
 $70 = $9; //@line 2946 "stream_decoder.c"
 $71 = $70; //@line 2946 "stream_decoder.c"
 $72 = HEAP32[$71>>2]|0; //@line 2946 "stream_decoder.c"
 $73 = (($70) + 4)|0; //@line 2946 "stream_decoder.c"
 $74 = $73; //@line 2946 "stream_decoder.c"
 $75 = HEAP32[$74>>2]|0; //@line 2946 "stream_decoder.c"
 $76 = ($69>>>0)<($75>>>0); //@line 2946 "stream_decoder.c"
 $77 = ($66>>>0)<=($72>>>0); //@line 2946 "stream_decoder.c"
 $78 = ($69|0)==($75|0); //@line 2946 "stream_decoder.c"
 $79 = $78 & $77; //@line 2946 "stream_decoder.c"
 $80 = $76 | $79; //@line 2946 "stream_decoder.c"
 if ($80) {
  $81 = $9; //@line 2946 "stream_decoder.c"
  $82 = $81; //@line 2946 "stream_decoder.c"
  $83 = HEAP32[$82>>2]|0; //@line 2946 "stream_decoder.c"
  $84 = (($81) + 4)|0; //@line 2946 "stream_decoder.c"
  $85 = $84; //@line 2946 "stream_decoder.c"
  $86 = HEAP32[$85>>2]|0; //@line 2946 "stream_decoder.c"
  $87 = $8; //@line 2946 "stream_decoder.c"
  $88 = $87; //@line 2946 "stream_decoder.c"
  $89 = HEAP32[$88>>2]|0; //@line 2946 "stream_decoder.c"
  $90 = (($87) + 4)|0; //@line 2946 "stream_decoder.c"
  $91 = $90; //@line 2946 "stream_decoder.c"
  $92 = HEAP32[$91>>2]|0; //@line 2946 "stream_decoder.c"
  $93 = ($86>>>0)<($92>>>0); //@line 2946 "stream_decoder.c"
  $94 = ($83>>>0)<($89>>>0); //@line 2946 "stream_decoder.c"
  $95 = ($86|0)==($92|0); //@line 2946 "stream_decoder.c"
  $96 = $95 & $94; //@line 2946 "stream_decoder.c"
  $97 = $93 | $96; //@line 2946 "stream_decoder.c"
  if ($97) {
   $98 = $9; //@line 2947 "stream_decoder.c"
   $99 = $98; //@line 2947 "stream_decoder.c"
   $100 = HEAP32[$99>>2]|0; //@line 2947 "stream_decoder.c"
   $101 = (($98) + 4)|0; //@line 2947 "stream_decoder.c"
   $102 = $101; //@line 2947 "stream_decoder.c"
   $103 = HEAP32[$102>>2]|0; //@line 2947 "stream_decoder.c"
   $104 = $7; //@line 2947 "stream_decoder.c"
   $105 = $104; //@line 2947 "stream_decoder.c"
   $106 = HEAP32[$105>>2]|0; //@line 2947 "stream_decoder.c"
   $107 = (($104) + 4)|0; //@line 2947 "stream_decoder.c"
   $108 = $107; //@line 2947 "stream_decoder.c"
   $109 = HEAP32[$108>>2]|0; //@line 2947 "stream_decoder.c"
   $110 = (_i64Subtract(($100|0),($103|0),($106|0),($109|0))|0); //@line 2947 "stream_decoder.c"
   $111 = tempRet0; //@line 2947 "stream_decoder.c"
   $10 = $110; //@line 2947 "stream_decoder.c"
   $112 = $4; //@line 2949 "stream_decoder.c"
   $113 = ((($112)) + 4|0); //@line 2949 "stream_decoder.c"
   $114 = HEAP32[$113>>2]|0; //@line 2949 "stream_decoder.c"
   $115 = ((($114)) + 3656|0); //@line 2949 "stream_decoder.c"
   HEAP32[$115>>2] = 0; //@line 2949 "stream_decoder.c"
   $116 = $10; //@line 2951 "stream_decoder.c"
   $117 = ($116>>>0)>(0); //@line 2951 "stream_decoder.c"
   if (!($117)) {
    $174 = $4; //@line 2963 "stream_decoder.c"
    $175 = ((($174)) + 4|0); //@line 2963 "stream_decoder.c"
    $176 = HEAP32[$175>>2]|0; //@line 2963 "stream_decoder.c"
    $177 = ((($176)) + 24|0); //@line 2963 "stream_decoder.c"
    $178 = HEAP32[$177>>2]|0; //@line 2963 "stream_decoder.c"
    $179 = $4; //@line 2963 "stream_decoder.c"
    $180 = $5; //@line 2963 "stream_decoder.c"
    $181 = $6; //@line 2963 "stream_decoder.c"
    $182 = $4; //@line 2963 "stream_decoder.c"
    $183 = ((($182)) + 4|0); //@line 2963 "stream_decoder.c"
    $184 = HEAP32[$183>>2]|0; //@line 2963 "stream_decoder.c"
    $185 = ((($184)) + 48|0); //@line 2963 "stream_decoder.c"
    $186 = HEAP32[$185>>2]|0; //@line 2963 "stream_decoder.c"
    $187 = (FUNCTION_TABLE_iiiii[$178 & 31]($179,$180,$181,$186)|0); //@line 2963 "stream_decoder.c"
    $3 = $187; //@line 2963 "stream_decoder.c"
    $235 = $3; //@line 2983 "stream_decoder.c"
    STACKTOP = sp;return ($235|0); //@line 2983 "stream_decoder.c"
   }
   $11 = 0; //@line 2954 "stream_decoder.c"
   while(1) {
    $118 = $11; //@line 2954 "stream_decoder.c"
    $119 = $5; //@line 2954 "stream_decoder.c"
    $120 = ((($119)) + 8|0); //@line 2954 "stream_decoder.c"
    $121 = HEAP32[$120>>2]|0; //@line 2954 "stream_decoder.c"
    $122 = ($118>>>0)<($121>>>0); //@line 2954 "stream_decoder.c"
    if (!($122)) {
     break;
    }
    $123 = $6; //@line 2955 "stream_decoder.c"
    $124 = $11; //@line 2955 "stream_decoder.c"
    $125 = (($123) + ($124<<2)|0); //@line 2955 "stream_decoder.c"
    $126 = HEAP32[$125>>2]|0; //@line 2955 "stream_decoder.c"
    $127 = $10; //@line 2955 "stream_decoder.c"
    $128 = (($126) + ($127<<2)|0); //@line 2955 "stream_decoder.c"
    $129 = $11; //@line 2955 "stream_decoder.c"
    $130 = (($12) + ($129<<2)|0); //@line 2955 "stream_decoder.c"
    HEAP32[$130>>2] = $128; //@line 2955 "stream_decoder.c"
    $131 = $11; //@line 2954 "stream_decoder.c"
    $132 = (($131) + 1)|0; //@line 2954 "stream_decoder.c"
    $11 = $132; //@line 2954 "stream_decoder.c"
   }
   $133 = $10; //@line 2956 "stream_decoder.c"
   $134 = $4; //@line 2956 "stream_decoder.c"
   $135 = ((($134)) + 4|0); //@line 2956 "stream_decoder.c"
   $136 = HEAP32[$135>>2]|0; //@line 2956 "stream_decoder.c"
   $137 = ((($136)) + 3776|0); //@line 2956 "stream_decoder.c"
   $138 = HEAP32[$137>>2]|0; //@line 2956 "stream_decoder.c"
   $139 = (($138) - ($133))|0; //@line 2956 "stream_decoder.c"
   HEAP32[$137>>2] = $139; //@line 2956 "stream_decoder.c"
   $140 = $10; //@line 2957 "stream_decoder.c"
   $141 = $4; //@line 2957 "stream_decoder.c"
   $142 = ((($141)) + 4|0); //@line 2957 "stream_decoder.c"
   $143 = HEAP32[$142>>2]|0; //@line 2957 "stream_decoder.c"
   $144 = ((($143)) + 3776|0); //@line 2957 "stream_decoder.c"
   $145 = ((($144)) + 24|0); //@line 2957 "stream_decoder.c"
   $146 = $145; //@line 2957 "stream_decoder.c"
   $147 = $146; //@line 2957 "stream_decoder.c"
   $148 = HEAP32[$147>>2]|0; //@line 2957 "stream_decoder.c"
   $149 = (($146) + 4)|0; //@line 2957 "stream_decoder.c"
   $150 = $149; //@line 2957 "stream_decoder.c"
   $151 = HEAP32[$150>>2]|0; //@line 2957 "stream_decoder.c"
   $152 = (_i64Add(($148|0),($151|0),($140|0),0)|0); //@line 2957 "stream_decoder.c"
   $153 = tempRet0; //@line 2957 "stream_decoder.c"
   $154 = $145; //@line 2957 "stream_decoder.c"
   $155 = $154; //@line 2957 "stream_decoder.c"
   HEAP32[$155>>2] = $152; //@line 2957 "stream_decoder.c"
   $156 = (($154) + 4)|0; //@line 2957 "stream_decoder.c"
   $157 = $156; //@line 2957 "stream_decoder.c"
   HEAP32[$157>>2] = $153; //@line 2957 "stream_decoder.c"
   $158 = $4; //@line 2959 "stream_decoder.c"
   $159 = ((($158)) + 4|0); //@line 2959 "stream_decoder.c"
   $160 = HEAP32[$159>>2]|0; //@line 2959 "stream_decoder.c"
   $161 = ((($160)) + 24|0); //@line 2959 "stream_decoder.c"
   $162 = HEAP32[$161>>2]|0; //@line 2959 "stream_decoder.c"
   $163 = $4; //@line 2959 "stream_decoder.c"
   $164 = $4; //@line 2959 "stream_decoder.c"
   $165 = ((($164)) + 4|0); //@line 2959 "stream_decoder.c"
   $166 = HEAP32[$165>>2]|0; //@line 2959 "stream_decoder.c"
   $167 = ((($166)) + 3776|0); //@line 2959 "stream_decoder.c"
   $168 = $4; //@line 2959 "stream_decoder.c"
   $169 = ((($168)) + 4|0); //@line 2959 "stream_decoder.c"
   $170 = HEAP32[$169>>2]|0; //@line 2959 "stream_decoder.c"
   $171 = ((($170)) + 48|0); //@line 2959 "stream_decoder.c"
   $172 = HEAP32[$171>>2]|0; //@line 2959 "stream_decoder.c"
   $173 = (FUNCTION_TABLE_iiiii[$162 & 31]($163,$167,$12,$172)|0); //@line 2959 "stream_decoder.c"
   $3 = $173; //@line 2959 "stream_decoder.c"
   $235 = $3; //@line 2983 "stream_decoder.c"
   STACKTOP = sp;return ($235|0); //@line 2983 "stream_decoder.c"
  }
 }
 $3 = 0; //@line 2967 "stream_decoder.c"
 $235 = $3; //@line 2983 "stream_decoder.c"
 STACKTOP = sp;return ($235|0); //@line 2983 "stream_decoder.c"
}
function _read_subframe_constant_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5; //@line 2547 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 2547 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 2547 "stream_decoder.c"
 $16 = ((($15)) + 1136|0); //@line 2547 "stream_decoder.c"
 $17 = ((($16)) + 40|0); //@line 2547 "stream_decoder.c"
 $18 = $6; //@line 2547 "stream_decoder.c"
 $19 = (($17) + (($18*292)|0)|0); //@line 2547 "stream_decoder.c"
 $20 = ((($19)) + 4|0); //@line 2547 "stream_decoder.c"
 $9 = $20; //@line 2547 "stream_decoder.c"
 $21 = $5; //@line 2550 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 2550 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 2550 "stream_decoder.c"
 $24 = ((($23)) + 60|0); //@line 2550 "stream_decoder.c"
 $25 = $6; //@line 2550 "stream_decoder.c"
 $26 = (($24) + ($25<<2)|0); //@line 2550 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2550 "stream_decoder.c"
 $12 = $27; //@line 2550 "stream_decoder.c"
 $28 = $5; //@line 2552 "stream_decoder.c"
 $29 = ((($28)) + 4|0); //@line 2552 "stream_decoder.c"
 $30 = HEAP32[$29>>2]|0; //@line 2552 "stream_decoder.c"
 $31 = ((($30)) + 1136|0); //@line 2552 "stream_decoder.c"
 $32 = ((($31)) + 40|0); //@line 2552 "stream_decoder.c"
 $33 = $6; //@line 2552 "stream_decoder.c"
 $34 = (($32) + (($33*292)|0)|0); //@line 2552 "stream_decoder.c"
 HEAP32[$34>>2] = 0; //@line 2552 "stream_decoder.c"
 $35 = $5; //@line 2554 "stream_decoder.c"
 $36 = ((($35)) + 4|0); //@line 2554 "stream_decoder.c"
 $37 = HEAP32[$36>>2]|0; //@line 2554 "stream_decoder.c"
 $38 = ((($37)) + 56|0); //@line 2554 "stream_decoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 2554 "stream_decoder.c"
 $40 = $7; //@line 2554 "stream_decoder.c"
 $41 = (_FLAC__bitreader_read_raw_int32($39,$10,$40)|0); //@line 2554 "stream_decoder.c"
 $42 = ($41|0)!=(0); //@line 2554 "stream_decoder.c"
 if (!($42)) {
  $4 = 0; //@line 2555 "stream_decoder.c"
  $60 = $4; //@line 2566 "stream_decoder.c"
  STACKTOP = sp;return ($60|0); //@line 2566 "stream_decoder.c"
 }
 $43 = HEAP32[$10>>2]|0; //@line 2557 "stream_decoder.c"
 $44 = $9; //@line 2557 "stream_decoder.c"
 HEAP32[$44>>2] = $43; //@line 2557 "stream_decoder.c"
 $45 = $8; //@line 2560 "stream_decoder.c"
 $46 = ($45|0)!=(0); //@line 2560 "stream_decoder.c"
 L5: do {
  if ($46) {
   $11 = 0; //@line 2561 "stream_decoder.c"
   while(1) {
    $47 = $11; //@line 2561 "stream_decoder.c"
    $48 = $5; //@line 2561 "stream_decoder.c"
    $49 = ((($48)) + 4|0); //@line 2561 "stream_decoder.c"
    $50 = HEAP32[$49>>2]|0; //@line 2561 "stream_decoder.c"
    $51 = ((($50)) + 1136|0); //@line 2561 "stream_decoder.c"
    $52 = HEAP32[$51>>2]|0; //@line 2561 "stream_decoder.c"
    $53 = ($47>>>0)<($52>>>0); //@line 2561 "stream_decoder.c"
    if (!($53)) {
     break L5;
    }
    $54 = HEAP32[$10>>2]|0; //@line 2562 "stream_decoder.c"
    $55 = $12; //@line 2562 "stream_decoder.c"
    $56 = $11; //@line 2562 "stream_decoder.c"
    $57 = (($55) + ($56<<2)|0); //@line 2562 "stream_decoder.c"
    HEAP32[$57>>2] = $54; //@line 2562 "stream_decoder.c"
    $58 = $11; //@line 2561 "stream_decoder.c"
    $59 = (($58) + 1)|0; //@line 2561 "stream_decoder.c"
    $11 = $59; //@line 2561 "stream_decoder.c"
   }
  }
 } while(0);
 $4 = 1; //@line 2565 "stream_decoder.c"
 $60 = $4; //@line 2566 "stream_decoder.c"
 STACKTOP = sp;return ($60|0); //@line 2566 "stream_decoder.c"
}
function _read_subframe_verbatim_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5; //@line 2727 "stream_decoder.c"
 $14 = ((($13)) + 4|0); //@line 2727 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 2727 "stream_decoder.c"
 $16 = ((($15)) + 1136|0); //@line 2727 "stream_decoder.c"
 $17 = ((($16)) + 40|0); //@line 2727 "stream_decoder.c"
 $18 = $6; //@line 2727 "stream_decoder.c"
 $19 = (($17) + (($18*292)|0)|0); //@line 2727 "stream_decoder.c"
 $20 = ((($19)) + 4|0); //@line 2727 "stream_decoder.c"
 $9 = $20; //@line 2727 "stream_decoder.c"
 $21 = $5; //@line 2728 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 2728 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 2728 "stream_decoder.c"
 $24 = ((($23)) + 92|0); //@line 2728 "stream_decoder.c"
 $25 = $6; //@line 2728 "stream_decoder.c"
 $26 = (($24) + ($25<<2)|0); //@line 2728 "stream_decoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2728 "stream_decoder.c"
 $11 = $27; //@line 2728 "stream_decoder.c"
 $28 = $5; //@line 2731 "stream_decoder.c"
 $29 = ((($28)) + 4|0); //@line 2731 "stream_decoder.c"
 $30 = HEAP32[$29>>2]|0; //@line 2731 "stream_decoder.c"
 $31 = ((($30)) + 1136|0); //@line 2731 "stream_decoder.c"
 $32 = ((($31)) + 40|0); //@line 2731 "stream_decoder.c"
 $33 = $6; //@line 2731 "stream_decoder.c"
 $34 = (($32) + (($33*292)|0)|0); //@line 2731 "stream_decoder.c"
 HEAP32[$34>>2] = 1; //@line 2731 "stream_decoder.c"
 $35 = $11; //@line 2733 "stream_decoder.c"
 $36 = $9; //@line 2733 "stream_decoder.c"
 HEAP32[$36>>2] = $35; //@line 2733 "stream_decoder.c"
 $12 = 0; //@line 2735 "stream_decoder.c"
 while(1) {
  $37 = $12; //@line 2735 "stream_decoder.c"
  $38 = $5; //@line 2735 "stream_decoder.c"
  $39 = ((($38)) + 4|0); //@line 2735 "stream_decoder.c"
  $40 = HEAP32[$39>>2]|0; //@line 2735 "stream_decoder.c"
  $41 = ((($40)) + 1136|0); //@line 2735 "stream_decoder.c"
  $42 = HEAP32[$41>>2]|0; //@line 2735 "stream_decoder.c"
  $43 = ($37>>>0)<($42>>>0); //@line 2735 "stream_decoder.c"
  if (!($43)) {
   break;
  }
  $44 = $5; //@line 2736 "stream_decoder.c"
  $45 = ((($44)) + 4|0); //@line 2736 "stream_decoder.c"
  $46 = HEAP32[$45>>2]|0; //@line 2736 "stream_decoder.c"
  $47 = ((($46)) + 56|0); //@line 2736 "stream_decoder.c"
  $48 = HEAP32[$47>>2]|0; //@line 2736 "stream_decoder.c"
  $49 = $7; //@line 2736 "stream_decoder.c"
  $50 = (_FLAC__bitreader_read_raw_int32($48,$10,$49)|0); //@line 2736 "stream_decoder.c"
  $51 = ($50|0)!=(0); //@line 2736 "stream_decoder.c"
  if (!($51)) {
   label = 4;
   break;
  }
  $52 = HEAP32[$10>>2]|0; //@line 2738 "stream_decoder.c"
  $53 = $11; //@line 2738 "stream_decoder.c"
  $54 = $12; //@line 2738 "stream_decoder.c"
  $55 = (($53) + ($54<<2)|0); //@line 2738 "stream_decoder.c"
  HEAP32[$55>>2] = $52; //@line 2738 "stream_decoder.c"
  $56 = $12; //@line 2735 "stream_decoder.c"
  $57 = (($56) + 1)|0; //@line 2735 "stream_decoder.c"
  $12 = $57; //@line 2735 "stream_decoder.c"
 }
 if ((label|0) == 4) {
  $4 = 0; //@line 2737 "stream_decoder.c"
  $75 = $4; //@line 2746 "stream_decoder.c"
  STACKTOP = sp;return ($75|0); //@line 2746 "stream_decoder.c"
 }
 $58 = $8; //@line 2742 "stream_decoder.c"
 $59 = ($58|0)!=(0); //@line 2742 "stream_decoder.c"
 if ($59) {
  $60 = $5; //@line 2743 "stream_decoder.c"
  $61 = ((($60)) + 4|0); //@line 2743 "stream_decoder.c"
  $62 = HEAP32[$61>>2]|0; //@line 2743 "stream_decoder.c"
  $63 = ((($62)) + 60|0); //@line 2743 "stream_decoder.c"
  $64 = $6; //@line 2743 "stream_decoder.c"
  $65 = (($63) + ($64<<2)|0); //@line 2743 "stream_decoder.c"
  $66 = HEAP32[$65>>2]|0; //@line 2743 "stream_decoder.c"
  $67 = $9; //@line 2743 "stream_decoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 2743 "stream_decoder.c"
  $69 = $5; //@line 2743 "stream_decoder.c"
  $70 = ((($69)) + 4|0); //@line 2743 "stream_decoder.c"
  $71 = HEAP32[$70>>2]|0; //@line 2743 "stream_decoder.c"
  $72 = ((($71)) + 1136|0); //@line 2743 "stream_decoder.c"
  $73 = HEAP32[$72>>2]|0; //@line 2743 "stream_decoder.c"
  $74 = $73<<2; //@line 2743 "stream_decoder.c"
  _memcpy(($66|0),($68|0),($74|0))|0; //@line 2743 "stream_decoder.c"
 }
 $4 = 1; //@line 2745 "stream_decoder.c"
 $75 = $4; //@line 2746 "stream_decoder.c"
 STACKTOP = sp;return ($75|0); //@line 2746 "stream_decoder.c"
}
function _read_subframe_fixed_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $switch = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6; //@line 2570 "stream_decoder.c"
 $16 = ((($15)) + 4|0); //@line 2570 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 2570 "stream_decoder.c"
 $18 = ((($17)) + 1136|0); //@line 2570 "stream_decoder.c"
 $19 = ((($18)) + 40|0); //@line 2570 "stream_decoder.c"
 $20 = $7; //@line 2570 "stream_decoder.c"
 $21 = (($19) + (($20*292)|0)|0); //@line 2570 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 2570 "stream_decoder.c"
 $11 = $22; //@line 2570 "stream_decoder.c"
 $23 = $6; //@line 2575 "stream_decoder.c"
 $24 = ((($23)) + 4|0); //@line 2575 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 2575 "stream_decoder.c"
 $26 = ((($25)) + 1136|0); //@line 2575 "stream_decoder.c"
 $27 = ((($26)) + 40|0); //@line 2575 "stream_decoder.c"
 $28 = $7; //@line 2575 "stream_decoder.c"
 $29 = (($27) + (($28*292)|0)|0); //@line 2575 "stream_decoder.c"
 HEAP32[$29>>2] = 2; //@line 2575 "stream_decoder.c"
 $30 = $6; //@line 2577 "stream_decoder.c"
 $31 = ((($30)) + 4|0); //@line 2577 "stream_decoder.c"
 $32 = HEAP32[$31>>2]|0; //@line 2577 "stream_decoder.c"
 $33 = ((($32)) + 92|0); //@line 2577 "stream_decoder.c"
 $34 = $7; //@line 2577 "stream_decoder.c"
 $35 = (($33) + ($34<<2)|0); //@line 2577 "stream_decoder.c"
 $36 = HEAP32[$35>>2]|0; //@line 2577 "stream_decoder.c"
 $37 = $11; //@line 2577 "stream_decoder.c"
 $38 = ((($37)) + 32|0); //@line 2577 "stream_decoder.c"
 HEAP32[$38>>2] = $36; //@line 2577 "stream_decoder.c"
 $39 = $9; //@line 2578 "stream_decoder.c"
 $40 = $11; //@line 2578 "stream_decoder.c"
 $41 = ((($40)) + 12|0); //@line 2578 "stream_decoder.c"
 HEAP32[$41>>2] = $39; //@line 2578 "stream_decoder.c"
 $14 = 0; //@line 2581 "stream_decoder.c"
 while(1) {
  $42 = $14; //@line 2581 "stream_decoder.c"
  $43 = $9; //@line 2581 "stream_decoder.c"
  $44 = ($42>>>0)<($43>>>0); //@line 2581 "stream_decoder.c"
  $45 = $6;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  if (!($44)) {
   break;
  }
  $50 = $8; //@line 2582 "stream_decoder.c"
  $51 = (_FLAC__bitreader_read_raw_int32($49,$12,$50)|0); //@line 2582 "stream_decoder.c"
  $52 = ($51|0)!=(0); //@line 2582 "stream_decoder.c"
  if (!($52)) {
   label = 4;
   break;
  }
  $53 = HEAP32[$12>>2]|0; //@line 2584 "stream_decoder.c"
  $54 = $11; //@line 2584 "stream_decoder.c"
  $55 = ((($54)) + 16|0); //@line 2584 "stream_decoder.c"
  $56 = $14; //@line 2584 "stream_decoder.c"
  $57 = (($55) + ($56<<2)|0); //@line 2584 "stream_decoder.c"
  HEAP32[$57>>2] = $53; //@line 2584 "stream_decoder.c"
  $58 = $14; //@line 2581 "stream_decoder.c"
  $59 = (($58) + 1)|0; //@line 2581 "stream_decoder.c"
  $14 = $59; //@line 2581 "stream_decoder.c"
 }
 if ((label|0) == 4) {
  $5 = 0; //@line 2583 "stream_decoder.c"
  $164 = $5; //@line 2628 "stream_decoder.c"
  STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
 }
 $60 = HEAP32[278]|0; //@line 2588 "stream_decoder.c"
 $61 = (_FLAC__bitreader_read_raw_uint32($49,$13,$60)|0); //@line 2588 "stream_decoder.c"
 $62 = ($61|0)!=(0); //@line 2588 "stream_decoder.c"
 if (!($62)) {
  $5 = 0; //@line 2589 "stream_decoder.c"
  $164 = $5; //@line 2628 "stream_decoder.c"
  STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
 }
 $63 = HEAP32[$13>>2]|0; //@line 2590 "stream_decoder.c"
 $64 = $11; //@line 2590 "stream_decoder.c"
 HEAP32[$64>>2] = $63; //@line 2590 "stream_decoder.c"
 $65 = $11; //@line 2591 "stream_decoder.c"
 $66 = HEAP32[$65>>2]|0; //@line 2591 "stream_decoder.c"
 $switch = ($66>>>0)<(2); //@line 2591 "stream_decoder.c"
 $67 = $6;
 if (!($switch)) {
  _send_error_to_client_($67,3); //@line 2605 "stream_decoder.c"
  $101 = $6; //@line 2606 "stream_decoder.c"
  $102 = HEAP32[$101>>2]|0; //@line 2606 "stream_decoder.c"
  HEAP32[$102>>2] = 2; //@line 2606 "stream_decoder.c"
  $5 = 1; //@line 2607 "stream_decoder.c"
  $164 = $5; //@line 2628 "stream_decoder.c"
  STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
 }
 $68 = ((($67)) + 4|0); //@line 2594 "stream_decoder.c"
 $69 = HEAP32[$68>>2]|0; //@line 2594 "stream_decoder.c"
 $70 = ((($69)) + 56|0); //@line 2594 "stream_decoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 2594 "stream_decoder.c"
 $72 = HEAP32[274]|0; //@line 2594 "stream_decoder.c"
 $73 = (_FLAC__bitreader_read_raw_uint32($71,$13,$72)|0); //@line 2594 "stream_decoder.c"
 $74 = ($73|0)!=(0); //@line 2594 "stream_decoder.c"
 if (!($74)) {
  $5 = 0; //@line 2595 "stream_decoder.c"
  $164 = $5; //@line 2628 "stream_decoder.c"
  STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
 }
 $75 = $6; //@line 2596 "stream_decoder.c"
 $76 = ((($75)) + 4|0); //@line 2596 "stream_decoder.c"
 $77 = HEAP32[$76>>2]|0; //@line 2596 "stream_decoder.c"
 $78 = ((($77)) + 1136|0); //@line 2596 "stream_decoder.c"
 $79 = HEAP32[$78>>2]|0; //@line 2596 "stream_decoder.c"
 $80 = HEAP32[$13>>2]|0; //@line 2596 "stream_decoder.c"
 $81 = $79 >>> $80; //@line 2596 "stream_decoder.c"
 $82 = $9; //@line 2596 "stream_decoder.c"
 $83 = ($81>>>0)<($82>>>0); //@line 2596 "stream_decoder.c"
 if ($83) {
  $84 = $6; //@line 2597 "stream_decoder.c"
  _send_error_to_client_($84,0); //@line 2597 "stream_decoder.c"
  $85 = $6; //@line 2598 "stream_decoder.c"
  $86 = HEAP32[$85>>2]|0; //@line 2598 "stream_decoder.c"
  HEAP32[$86>>2] = 2; //@line 2598 "stream_decoder.c"
  $5 = 1; //@line 2599 "stream_decoder.c"
  $164 = $5; //@line 2628 "stream_decoder.c"
  STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
 }
 $87 = HEAP32[$13>>2]|0; //@line 2601 "stream_decoder.c"
 $88 = $11; //@line 2601 "stream_decoder.c"
 $89 = ((($88)) + 4|0); //@line 2601 "stream_decoder.c"
 HEAP32[$89>>2] = $87; //@line 2601 "stream_decoder.c"
 $90 = $6; //@line 2602 "stream_decoder.c"
 $91 = ((($90)) + 4|0); //@line 2602 "stream_decoder.c"
 $92 = HEAP32[$91>>2]|0; //@line 2602 "stream_decoder.c"
 $93 = ((($92)) + 124|0); //@line 2602 "stream_decoder.c"
 $94 = $7; //@line 2602 "stream_decoder.c"
 $95 = (($93) + (($94*12)|0)|0); //@line 2602 "stream_decoder.c"
 $96 = $11; //@line 2602 "stream_decoder.c"
 $97 = ((($96)) + 4|0); //@line 2602 "stream_decoder.c"
 $98 = ((($97)) + 4|0); //@line 2602 "stream_decoder.c"
 HEAP32[$98>>2] = $95; //@line 2602 "stream_decoder.c"
 $99 = $11; //@line 2611 "stream_decoder.c"
 $100 = HEAP32[$99>>2]|0; //@line 2611 "stream_decoder.c"
 $switch1 = ($100>>>0)<(2); //@line 2611 "stream_decoder.c"
 if ($switch1) {
  $103 = $6; //@line 2614 "stream_decoder.c"
  $104 = $9; //@line 2614 "stream_decoder.c"
  $105 = $11; //@line 2614 "stream_decoder.c"
  $106 = ((($105)) + 4|0); //@line 2614 "stream_decoder.c"
  $107 = HEAP32[$106>>2]|0; //@line 2614 "stream_decoder.c"
  $108 = $6; //@line 2614 "stream_decoder.c"
  $109 = ((($108)) + 4|0); //@line 2614 "stream_decoder.c"
  $110 = HEAP32[$109>>2]|0; //@line 2614 "stream_decoder.c"
  $111 = ((($110)) + 124|0); //@line 2614 "stream_decoder.c"
  $112 = $7; //@line 2614 "stream_decoder.c"
  $113 = (($111) + (($112*12)|0)|0); //@line 2614 "stream_decoder.c"
  $114 = $6; //@line 2614 "stream_decoder.c"
  $115 = ((($114)) + 4|0); //@line 2614 "stream_decoder.c"
  $116 = HEAP32[$115>>2]|0; //@line 2614 "stream_decoder.c"
  $117 = ((($116)) + 92|0); //@line 2614 "stream_decoder.c"
  $118 = $7; //@line 2614 "stream_decoder.c"
  $119 = (($117) + ($118<<2)|0); //@line 2614 "stream_decoder.c"
  $120 = HEAP32[$119>>2]|0; //@line 2614 "stream_decoder.c"
  $121 = $11; //@line 2614 "stream_decoder.c"
  $122 = HEAP32[$121>>2]|0; //@line 2614 "stream_decoder.c"
  $123 = ($122|0)==(1); //@line 2614 "stream_decoder.c"
  $124 = $123&1; //@line 2614 "stream_decoder.c"
  $125 = (_read_residual_partitioned_rice_($103,$104,$107,$113,$120,$124)|0); //@line 2614 "stream_decoder.c"
  $126 = ($125|0)!=(0); //@line 2614 "stream_decoder.c"
  if (!($126)) {
   $5 = 0; //@line 2615 "stream_decoder.c"
   $164 = $5; //@line 2628 "stream_decoder.c"
   STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
  }
 }
 $127 = $10; //@line 2622 "stream_decoder.c"
 $128 = ($127|0)!=(0); //@line 2622 "stream_decoder.c"
 if ($128) {
  $129 = $6; //@line 2623 "stream_decoder.c"
  $130 = ((($129)) + 4|0); //@line 2623 "stream_decoder.c"
  $131 = HEAP32[$130>>2]|0; //@line 2623 "stream_decoder.c"
  $132 = ((($131)) + 60|0); //@line 2623 "stream_decoder.c"
  $133 = $7; //@line 2623 "stream_decoder.c"
  $134 = (($132) + ($133<<2)|0); //@line 2623 "stream_decoder.c"
  $135 = HEAP32[$134>>2]|0; //@line 2623 "stream_decoder.c"
  $136 = $11; //@line 2623 "stream_decoder.c"
  $137 = ((($136)) + 16|0); //@line 2623 "stream_decoder.c"
  $138 = $9; //@line 2623 "stream_decoder.c"
  $139 = $138<<2; //@line 2623 "stream_decoder.c"
  _memcpy(($135|0),($137|0),($139|0))|0; //@line 2623 "stream_decoder.c"
  $140 = $6; //@line 2624 "stream_decoder.c"
  $141 = ((($140)) + 4|0); //@line 2624 "stream_decoder.c"
  $142 = HEAP32[$141>>2]|0; //@line 2624 "stream_decoder.c"
  $143 = ((($142)) + 92|0); //@line 2624 "stream_decoder.c"
  $144 = $7; //@line 2624 "stream_decoder.c"
  $145 = (($143) + ($144<<2)|0); //@line 2624 "stream_decoder.c"
  $146 = HEAP32[$145>>2]|0; //@line 2624 "stream_decoder.c"
  $147 = $6; //@line 2624 "stream_decoder.c"
  $148 = ((($147)) + 4|0); //@line 2624 "stream_decoder.c"
  $149 = HEAP32[$148>>2]|0; //@line 2624 "stream_decoder.c"
  $150 = ((($149)) + 1136|0); //@line 2624 "stream_decoder.c"
  $151 = HEAP32[$150>>2]|0; //@line 2624 "stream_decoder.c"
  $152 = $9; //@line 2624 "stream_decoder.c"
  $153 = (($151) - ($152))|0; //@line 2624 "stream_decoder.c"
  $154 = $9; //@line 2624 "stream_decoder.c"
  $155 = $6; //@line 2624 "stream_decoder.c"
  $156 = ((($155)) + 4|0); //@line 2624 "stream_decoder.c"
  $157 = HEAP32[$156>>2]|0; //@line 2624 "stream_decoder.c"
  $158 = ((($157)) + 60|0); //@line 2624 "stream_decoder.c"
  $159 = $7; //@line 2624 "stream_decoder.c"
  $160 = (($158) + ($159<<2)|0); //@line 2624 "stream_decoder.c"
  $161 = HEAP32[$160>>2]|0; //@line 2624 "stream_decoder.c"
  $162 = $9; //@line 2624 "stream_decoder.c"
  $163 = (($161) + ($162<<2)|0); //@line 2624 "stream_decoder.c"
  _FLAC__fixed_restore_signal($146,$153,$154,$163); //@line 2624 "stream_decoder.c"
 }
 $5 = 1; //@line 2627 "stream_decoder.c"
 $164 = $5; //@line 2628 "stream_decoder.c"
 STACKTOP = sp;return ($164|0); //@line 2628 "stream_decoder.c"
}
function _read_subframe_lpc_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, $switch1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 8|0;
 $13 = sp + 4|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $6; //@line 2632 "stream_decoder.c"
 $16 = ((($15)) + 4|0); //@line 2632 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 2632 "stream_decoder.c"
 $18 = ((($17)) + 1136|0); //@line 2632 "stream_decoder.c"
 $19 = ((($18)) + 40|0); //@line 2632 "stream_decoder.c"
 $20 = $7; //@line 2632 "stream_decoder.c"
 $21 = (($19) + (($20*292)|0)|0); //@line 2632 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 2632 "stream_decoder.c"
 $11 = $22; //@line 2632 "stream_decoder.c"
 $23 = $6; //@line 2637 "stream_decoder.c"
 $24 = ((($23)) + 4|0); //@line 2637 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 2637 "stream_decoder.c"
 $26 = ((($25)) + 1136|0); //@line 2637 "stream_decoder.c"
 $27 = ((($26)) + 40|0); //@line 2637 "stream_decoder.c"
 $28 = $7; //@line 2637 "stream_decoder.c"
 $29 = (($27) + (($28*292)|0)|0); //@line 2637 "stream_decoder.c"
 HEAP32[$29>>2] = 3; //@line 2637 "stream_decoder.c"
 $30 = $6; //@line 2639 "stream_decoder.c"
 $31 = ((($30)) + 4|0); //@line 2639 "stream_decoder.c"
 $32 = HEAP32[$31>>2]|0; //@line 2639 "stream_decoder.c"
 $33 = ((($32)) + 92|0); //@line 2639 "stream_decoder.c"
 $34 = $7; //@line 2639 "stream_decoder.c"
 $35 = (($33) + ($34<<2)|0); //@line 2639 "stream_decoder.c"
 $36 = HEAP32[$35>>2]|0; //@line 2639 "stream_decoder.c"
 $37 = $11; //@line 2639 "stream_decoder.c"
 $38 = ((($37)) + 280|0); //@line 2639 "stream_decoder.c"
 HEAP32[$38>>2] = $36; //@line 2639 "stream_decoder.c"
 $39 = $9; //@line 2640 "stream_decoder.c"
 $40 = $11; //@line 2640 "stream_decoder.c"
 $41 = ((($40)) + 12|0); //@line 2640 "stream_decoder.c"
 HEAP32[$41>>2] = $39; //@line 2640 "stream_decoder.c"
 $14 = 0; //@line 2643 "stream_decoder.c"
 while(1) {
  $42 = $14; //@line 2643 "stream_decoder.c"
  $43 = $9; //@line 2643 "stream_decoder.c"
  $44 = ($42>>>0)<($43>>>0); //@line 2643 "stream_decoder.c"
  $45 = $6;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  if (!($44)) {
   break;
  }
  $50 = $8; //@line 2644 "stream_decoder.c"
  $51 = (_FLAC__bitreader_read_raw_int32($49,$12,$50)|0); //@line 2644 "stream_decoder.c"
  $52 = ($51|0)!=(0); //@line 2644 "stream_decoder.c"
  if (!($52)) {
   label = 4;
   break;
  }
  $53 = HEAP32[$12>>2]|0; //@line 2646 "stream_decoder.c"
  $54 = $11; //@line 2646 "stream_decoder.c"
  $55 = ((($54)) + 152|0); //@line 2646 "stream_decoder.c"
  $56 = $14; //@line 2646 "stream_decoder.c"
  $57 = (($55) + ($56<<2)|0); //@line 2646 "stream_decoder.c"
  HEAP32[$57>>2] = $53; //@line 2646 "stream_decoder.c"
  $58 = $14; //@line 2643 "stream_decoder.c"
  $59 = (($58) + 1)|0; //@line 2643 "stream_decoder.c"
  $14 = $59; //@line 2643 "stream_decoder.c"
 }
 if ((label|0) == 4) {
  $5 = 0; //@line 2645 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $60 = HEAP32[274]|0; //@line 2650 "stream_decoder.c"
 $61 = (_FLAC__bitreader_read_raw_uint32($49,$13,$60)|0); //@line 2650 "stream_decoder.c"
 $62 = ($61|0)!=(0); //@line 2650 "stream_decoder.c"
 if (!($62)) {
  $5 = 0; //@line 2651 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $63 = HEAP32[$13>>2]|0; //@line 2652 "stream_decoder.c"
 $64 = HEAP32[274]|0; //@line 2652 "stream_decoder.c"
 $65 = 1 << $64; //@line 2652 "stream_decoder.c"
 $66 = (($65) - 1)|0; //@line 2652 "stream_decoder.c"
 $67 = ($63|0)==($66|0); //@line 2652 "stream_decoder.c"
 if ($67) {
  $68 = $6; //@line 2653 "stream_decoder.c"
  _send_error_to_client_($68,0); //@line 2653 "stream_decoder.c"
  $69 = $6; //@line 2654 "stream_decoder.c"
  $70 = HEAP32[$69>>2]|0; //@line 2654 "stream_decoder.c"
  HEAP32[$70>>2] = 2; //@line 2654 "stream_decoder.c"
  $5 = 1; //@line 2655 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $71 = HEAP32[$13>>2]|0; //@line 2657 "stream_decoder.c"
 $72 = (($71) + 1)|0; //@line 2657 "stream_decoder.c"
 $73 = $11; //@line 2657 "stream_decoder.c"
 $74 = ((($73)) + 16|0); //@line 2657 "stream_decoder.c"
 HEAP32[$74>>2] = $72; //@line 2657 "stream_decoder.c"
 $75 = $6; //@line 2660 "stream_decoder.c"
 $76 = ((($75)) + 4|0); //@line 2660 "stream_decoder.c"
 $77 = HEAP32[$76>>2]|0; //@line 2660 "stream_decoder.c"
 $78 = ((($77)) + 56|0); //@line 2660 "stream_decoder.c"
 $79 = HEAP32[$78>>2]|0; //@line 2660 "stream_decoder.c"
 $80 = HEAP32[275]|0; //@line 2660 "stream_decoder.c"
 $81 = (_FLAC__bitreader_read_raw_int32($79,$12,$80)|0); //@line 2660 "stream_decoder.c"
 $82 = ($81|0)!=(0); //@line 2660 "stream_decoder.c"
 if (!($82)) {
  $5 = 0; //@line 2661 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $83 = HEAP32[$12>>2]|0; //@line 2662 "stream_decoder.c"
 $84 = ($83|0)<(0); //@line 2662 "stream_decoder.c"
 if ($84) {
  $85 = $6; //@line 2663 "stream_decoder.c"
  _send_error_to_client_($85,0); //@line 2663 "stream_decoder.c"
  $86 = $6; //@line 2664 "stream_decoder.c"
  $87 = HEAP32[$86>>2]|0; //@line 2664 "stream_decoder.c"
  HEAP32[$87>>2] = 2; //@line 2664 "stream_decoder.c"
  $5 = 1; //@line 2665 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $88 = HEAP32[$12>>2]|0; //@line 2667 "stream_decoder.c"
 $89 = $11; //@line 2667 "stream_decoder.c"
 $90 = ((($89)) + 20|0); //@line 2667 "stream_decoder.c"
 HEAP32[$90>>2] = $88; //@line 2667 "stream_decoder.c"
 $14 = 0; //@line 2670 "stream_decoder.c"
 while(1) {
  $91 = $14; //@line 2670 "stream_decoder.c"
  $92 = $9; //@line 2670 "stream_decoder.c"
  $93 = ($91>>>0)<($92>>>0); //@line 2670 "stream_decoder.c"
  $94 = $6;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($96)) + 56|0);
  $98 = HEAP32[$97>>2]|0;
  if (!($93)) {
   break;
  }
  $99 = $11; //@line 2671 "stream_decoder.c"
  $100 = ((($99)) + 16|0); //@line 2671 "stream_decoder.c"
  $101 = HEAP32[$100>>2]|0; //@line 2671 "stream_decoder.c"
  $102 = (_FLAC__bitreader_read_raw_int32($98,$12,$101)|0); //@line 2671 "stream_decoder.c"
  $103 = ($102|0)!=(0); //@line 2671 "stream_decoder.c"
  if (!($103)) {
   label = 17;
   break;
  }
  $104 = HEAP32[$12>>2]|0; //@line 2673 "stream_decoder.c"
  $105 = $11; //@line 2673 "stream_decoder.c"
  $106 = ((($105)) + 24|0); //@line 2673 "stream_decoder.c"
  $107 = $14; //@line 2673 "stream_decoder.c"
  $108 = (($106) + ($107<<2)|0); //@line 2673 "stream_decoder.c"
  HEAP32[$108>>2] = $104; //@line 2673 "stream_decoder.c"
  $109 = $14; //@line 2670 "stream_decoder.c"
  $110 = (($109) + 1)|0; //@line 2670 "stream_decoder.c"
  $14 = $110; //@line 2670 "stream_decoder.c"
 }
 if ((label|0) == 17) {
  $5 = 0; //@line 2672 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $111 = HEAP32[278]|0; //@line 2677 "stream_decoder.c"
 $112 = (_FLAC__bitreader_read_raw_uint32($98,$13,$111)|0); //@line 2677 "stream_decoder.c"
 $113 = ($112|0)!=(0); //@line 2677 "stream_decoder.c"
 if (!($113)) {
  $5 = 0; //@line 2678 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $114 = HEAP32[$13>>2]|0; //@line 2679 "stream_decoder.c"
 $115 = $11; //@line 2679 "stream_decoder.c"
 HEAP32[$115>>2] = $114; //@line 2679 "stream_decoder.c"
 $116 = $11; //@line 2680 "stream_decoder.c"
 $117 = HEAP32[$116>>2]|0; //@line 2680 "stream_decoder.c"
 $switch = ($117>>>0)<(2); //@line 2680 "stream_decoder.c"
 $118 = $6;
 if (!($switch)) {
  _send_error_to_client_($118,3); //@line 2694 "stream_decoder.c"
  $152 = $6; //@line 2695 "stream_decoder.c"
  $153 = HEAP32[$152>>2]|0; //@line 2695 "stream_decoder.c"
  HEAP32[$153>>2] = 2; //@line 2695 "stream_decoder.c"
  $5 = 1; //@line 2696 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $119 = ((($118)) + 4|0); //@line 2683 "stream_decoder.c"
 $120 = HEAP32[$119>>2]|0; //@line 2683 "stream_decoder.c"
 $121 = ((($120)) + 56|0); //@line 2683 "stream_decoder.c"
 $122 = HEAP32[$121>>2]|0; //@line 2683 "stream_decoder.c"
 $123 = HEAP32[274]|0; //@line 2683 "stream_decoder.c"
 $124 = (_FLAC__bitreader_read_raw_uint32($122,$13,$123)|0); //@line 2683 "stream_decoder.c"
 $125 = ($124|0)!=(0); //@line 2683 "stream_decoder.c"
 if (!($125)) {
  $5 = 0; //@line 2684 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $126 = $6; //@line 2685 "stream_decoder.c"
 $127 = ((($126)) + 4|0); //@line 2685 "stream_decoder.c"
 $128 = HEAP32[$127>>2]|0; //@line 2685 "stream_decoder.c"
 $129 = ((($128)) + 1136|0); //@line 2685 "stream_decoder.c"
 $130 = HEAP32[$129>>2]|0; //@line 2685 "stream_decoder.c"
 $131 = HEAP32[$13>>2]|0; //@line 2685 "stream_decoder.c"
 $132 = $130 >>> $131; //@line 2685 "stream_decoder.c"
 $133 = $9; //@line 2685 "stream_decoder.c"
 $134 = ($132>>>0)<($133>>>0); //@line 2685 "stream_decoder.c"
 if ($134) {
  $135 = $6; //@line 2686 "stream_decoder.c"
  _send_error_to_client_($135,0); //@line 2686 "stream_decoder.c"
  $136 = $6; //@line 2687 "stream_decoder.c"
  $137 = HEAP32[$136>>2]|0; //@line 2687 "stream_decoder.c"
  HEAP32[$137>>2] = 2; //@line 2687 "stream_decoder.c"
  $5 = 1; //@line 2688 "stream_decoder.c"
  $308 = $5; //@line 2723 "stream_decoder.c"
  STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
 }
 $138 = HEAP32[$13>>2]|0; //@line 2690 "stream_decoder.c"
 $139 = $11; //@line 2690 "stream_decoder.c"
 $140 = ((($139)) + 4|0); //@line 2690 "stream_decoder.c"
 HEAP32[$140>>2] = $138; //@line 2690 "stream_decoder.c"
 $141 = $6; //@line 2691 "stream_decoder.c"
 $142 = ((($141)) + 4|0); //@line 2691 "stream_decoder.c"
 $143 = HEAP32[$142>>2]|0; //@line 2691 "stream_decoder.c"
 $144 = ((($143)) + 124|0); //@line 2691 "stream_decoder.c"
 $145 = $7; //@line 2691 "stream_decoder.c"
 $146 = (($144) + (($145*12)|0)|0); //@line 2691 "stream_decoder.c"
 $147 = $11; //@line 2691 "stream_decoder.c"
 $148 = ((($147)) + 4|0); //@line 2691 "stream_decoder.c"
 $149 = ((($148)) + 4|0); //@line 2691 "stream_decoder.c"
 HEAP32[$149>>2] = $146; //@line 2691 "stream_decoder.c"
 $150 = $11; //@line 2700 "stream_decoder.c"
 $151 = HEAP32[$150>>2]|0; //@line 2700 "stream_decoder.c"
 $switch1 = ($151>>>0)<(2); //@line 2700 "stream_decoder.c"
 if ($switch1) {
  $154 = $6; //@line 2703 "stream_decoder.c"
  $155 = $9; //@line 2703 "stream_decoder.c"
  $156 = $11; //@line 2703 "stream_decoder.c"
  $157 = ((($156)) + 4|0); //@line 2703 "stream_decoder.c"
  $158 = HEAP32[$157>>2]|0; //@line 2703 "stream_decoder.c"
  $159 = $6; //@line 2703 "stream_decoder.c"
  $160 = ((($159)) + 4|0); //@line 2703 "stream_decoder.c"
  $161 = HEAP32[$160>>2]|0; //@line 2703 "stream_decoder.c"
  $162 = ((($161)) + 124|0); //@line 2703 "stream_decoder.c"
  $163 = $7; //@line 2703 "stream_decoder.c"
  $164 = (($162) + (($163*12)|0)|0); //@line 2703 "stream_decoder.c"
  $165 = $6; //@line 2703 "stream_decoder.c"
  $166 = ((($165)) + 4|0); //@line 2703 "stream_decoder.c"
  $167 = HEAP32[$166>>2]|0; //@line 2703 "stream_decoder.c"
  $168 = ((($167)) + 92|0); //@line 2703 "stream_decoder.c"
  $169 = $7; //@line 2703 "stream_decoder.c"
  $170 = (($168) + ($169<<2)|0); //@line 2703 "stream_decoder.c"
  $171 = HEAP32[$170>>2]|0; //@line 2703 "stream_decoder.c"
  $172 = $11; //@line 2703 "stream_decoder.c"
  $173 = HEAP32[$172>>2]|0; //@line 2703 "stream_decoder.c"
  $174 = ($173|0)==(1); //@line 2703 "stream_decoder.c"
  $175 = $174&1; //@line 2703 "stream_decoder.c"
  $176 = (_read_residual_partitioned_rice_($154,$155,$158,$164,$171,$175)|0); //@line 2703 "stream_decoder.c"
  $177 = ($176|0)!=(0); //@line 2703 "stream_decoder.c"
  if (!($177)) {
   $5 = 0; //@line 2704 "stream_decoder.c"
   $308 = $5; //@line 2723 "stream_decoder.c"
   STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
  }
 }
 $178 = $10; //@line 2711 "stream_decoder.c"
 $179 = ($178|0)!=(0); //@line 2711 "stream_decoder.c"
 do {
  if ($179) {
   $180 = $6; //@line 2712 "stream_decoder.c"
   $181 = ((($180)) + 4|0); //@line 2712 "stream_decoder.c"
   $182 = HEAP32[$181>>2]|0; //@line 2712 "stream_decoder.c"
   $183 = ((($182)) + 60|0); //@line 2712 "stream_decoder.c"
   $184 = $7; //@line 2712 "stream_decoder.c"
   $185 = (($183) + ($184<<2)|0); //@line 2712 "stream_decoder.c"
   $186 = HEAP32[$185>>2]|0; //@line 2712 "stream_decoder.c"
   $187 = $11; //@line 2712 "stream_decoder.c"
   $188 = ((($187)) + 152|0); //@line 2712 "stream_decoder.c"
   $189 = $9; //@line 2712 "stream_decoder.c"
   $190 = $189<<2; //@line 2712 "stream_decoder.c"
   _memcpy(($186|0),($188|0),($190|0))|0; //@line 2712 "stream_decoder.c"
   $191 = $8; //@line 2713 "stream_decoder.c"
   $192 = $11; //@line 2713 "stream_decoder.c"
   $193 = ((($192)) + 16|0); //@line 2713 "stream_decoder.c"
   $194 = HEAP32[$193>>2]|0; //@line 2713 "stream_decoder.c"
   $195 = (($191) + ($194))|0; //@line 2713 "stream_decoder.c"
   $196 = $9; //@line 2713 "stream_decoder.c"
   $197 = (_FLAC__bitmath_ilog2($196)|0); //@line 2713 "stream_decoder.c"
   $198 = (($195) + ($197))|0; //@line 2713 "stream_decoder.c"
   $199 = ($198>>>0)<=(32); //@line 2713 "stream_decoder.c"
   if (!($199)) {
    $274 = $6; //@line 2719 "stream_decoder.c"
    $275 = ((($274)) + 4|0); //@line 2719 "stream_decoder.c"
    $276 = HEAP32[$275>>2]|0; //@line 2719 "stream_decoder.c"
    $277 = ((($276)) + 40|0); //@line 2719 "stream_decoder.c"
    $278 = HEAP32[$277>>2]|0; //@line 2719 "stream_decoder.c"
    $279 = $6; //@line 2719 "stream_decoder.c"
    $280 = ((($279)) + 4|0); //@line 2719 "stream_decoder.c"
    $281 = HEAP32[$280>>2]|0; //@line 2719 "stream_decoder.c"
    $282 = ((($281)) + 92|0); //@line 2719 "stream_decoder.c"
    $283 = $7; //@line 2719 "stream_decoder.c"
    $284 = (($282) + ($283<<2)|0); //@line 2719 "stream_decoder.c"
    $285 = HEAP32[$284>>2]|0; //@line 2719 "stream_decoder.c"
    $286 = $6; //@line 2719 "stream_decoder.c"
    $287 = ((($286)) + 4|0); //@line 2719 "stream_decoder.c"
    $288 = HEAP32[$287>>2]|0; //@line 2719 "stream_decoder.c"
    $289 = ((($288)) + 1136|0); //@line 2719 "stream_decoder.c"
    $290 = HEAP32[$289>>2]|0; //@line 2719 "stream_decoder.c"
    $291 = $9; //@line 2719 "stream_decoder.c"
    $292 = (($290) - ($291))|0; //@line 2719 "stream_decoder.c"
    $293 = $11; //@line 2719 "stream_decoder.c"
    $294 = ((($293)) + 24|0); //@line 2719 "stream_decoder.c"
    $295 = $9; //@line 2719 "stream_decoder.c"
    $296 = $11; //@line 2719 "stream_decoder.c"
    $297 = ((($296)) + 20|0); //@line 2719 "stream_decoder.c"
    $298 = HEAP32[$297>>2]|0; //@line 2719 "stream_decoder.c"
    $299 = $6; //@line 2719 "stream_decoder.c"
    $300 = ((($299)) + 4|0); //@line 2719 "stream_decoder.c"
    $301 = HEAP32[$300>>2]|0; //@line 2719 "stream_decoder.c"
    $302 = ((($301)) + 60|0); //@line 2719 "stream_decoder.c"
    $303 = $7; //@line 2719 "stream_decoder.c"
    $304 = (($302) + ($303<<2)|0); //@line 2719 "stream_decoder.c"
    $305 = HEAP32[$304>>2]|0; //@line 2719 "stream_decoder.c"
    $306 = $9; //@line 2719 "stream_decoder.c"
    $307 = (($305) + ($306<<2)|0); //@line 2719 "stream_decoder.c"
    FUNCTION_TABLE_viiiiii[$278 & 31]($285,$292,$294,$295,$298,$307); //@line 2719 "stream_decoder.c"
    break;
   }
   $200 = $8; //@line 2714 "stream_decoder.c"
   $201 = ($200>>>0)<=(16); //@line 2714 "stream_decoder.c"
   if ($201) {
    $202 = $11; //@line 2714 "stream_decoder.c"
    $203 = ((($202)) + 16|0); //@line 2714 "stream_decoder.c"
    $204 = HEAP32[$203>>2]|0; //@line 2714 "stream_decoder.c"
    $205 = ($204>>>0)<=(16); //@line 2714 "stream_decoder.c"
    if ($205) {
     $206 = $6; //@line 2715 "stream_decoder.c"
     $207 = ((($206)) + 4|0); //@line 2715 "stream_decoder.c"
     $208 = HEAP32[$207>>2]|0; //@line 2715 "stream_decoder.c"
     $209 = ((($208)) + 44|0); //@line 2715 "stream_decoder.c"
     $210 = HEAP32[$209>>2]|0; //@line 2715 "stream_decoder.c"
     $211 = $6; //@line 2715 "stream_decoder.c"
     $212 = ((($211)) + 4|0); //@line 2715 "stream_decoder.c"
     $213 = HEAP32[$212>>2]|0; //@line 2715 "stream_decoder.c"
     $214 = ((($213)) + 92|0); //@line 2715 "stream_decoder.c"
     $215 = $7; //@line 2715 "stream_decoder.c"
     $216 = (($214) + ($215<<2)|0); //@line 2715 "stream_decoder.c"
     $217 = HEAP32[$216>>2]|0; //@line 2715 "stream_decoder.c"
     $218 = $6; //@line 2715 "stream_decoder.c"
     $219 = ((($218)) + 4|0); //@line 2715 "stream_decoder.c"
     $220 = HEAP32[$219>>2]|0; //@line 2715 "stream_decoder.c"
     $221 = ((($220)) + 1136|0); //@line 2715 "stream_decoder.c"
     $222 = HEAP32[$221>>2]|0; //@line 2715 "stream_decoder.c"
     $223 = $9; //@line 2715 "stream_decoder.c"
     $224 = (($222) - ($223))|0; //@line 2715 "stream_decoder.c"
     $225 = $11; //@line 2715 "stream_decoder.c"
     $226 = ((($225)) + 24|0); //@line 2715 "stream_decoder.c"
     $227 = $9; //@line 2715 "stream_decoder.c"
     $228 = $11; //@line 2715 "stream_decoder.c"
     $229 = ((($228)) + 20|0); //@line 2715 "stream_decoder.c"
     $230 = HEAP32[$229>>2]|0; //@line 2715 "stream_decoder.c"
     $231 = $6; //@line 2715 "stream_decoder.c"
     $232 = ((($231)) + 4|0); //@line 2715 "stream_decoder.c"
     $233 = HEAP32[$232>>2]|0; //@line 2715 "stream_decoder.c"
     $234 = ((($233)) + 60|0); //@line 2715 "stream_decoder.c"
     $235 = $7; //@line 2715 "stream_decoder.c"
     $236 = (($234) + ($235<<2)|0); //@line 2715 "stream_decoder.c"
     $237 = HEAP32[$236>>2]|0; //@line 2715 "stream_decoder.c"
     $238 = $9; //@line 2715 "stream_decoder.c"
     $239 = (($237) + ($238<<2)|0); //@line 2715 "stream_decoder.c"
     FUNCTION_TABLE_viiiiii[$210 & 31]($217,$224,$226,$227,$230,$239); //@line 2715 "stream_decoder.c"
     break;
    }
   }
   $240 = $6; //@line 2717 "stream_decoder.c"
   $241 = ((($240)) + 4|0); //@line 2717 "stream_decoder.c"
   $242 = HEAP32[$241>>2]|0; //@line 2717 "stream_decoder.c"
   $243 = ((($242)) + 36|0); //@line 2717 "stream_decoder.c"
   $244 = HEAP32[$243>>2]|0; //@line 2717 "stream_decoder.c"
   $245 = $6; //@line 2717 "stream_decoder.c"
   $246 = ((($245)) + 4|0); //@line 2717 "stream_decoder.c"
   $247 = HEAP32[$246>>2]|0; //@line 2717 "stream_decoder.c"
   $248 = ((($247)) + 92|0); //@line 2717 "stream_decoder.c"
   $249 = $7; //@line 2717 "stream_decoder.c"
   $250 = (($248) + ($249<<2)|0); //@line 2717 "stream_decoder.c"
   $251 = HEAP32[$250>>2]|0; //@line 2717 "stream_decoder.c"
   $252 = $6; //@line 2717 "stream_decoder.c"
   $253 = ((($252)) + 4|0); //@line 2717 "stream_decoder.c"
   $254 = HEAP32[$253>>2]|0; //@line 2717 "stream_decoder.c"
   $255 = ((($254)) + 1136|0); //@line 2717 "stream_decoder.c"
   $256 = HEAP32[$255>>2]|0; //@line 2717 "stream_decoder.c"
   $257 = $9; //@line 2717 "stream_decoder.c"
   $258 = (($256) - ($257))|0; //@line 2717 "stream_decoder.c"
   $259 = $11; //@line 2717 "stream_decoder.c"
   $260 = ((($259)) + 24|0); //@line 2717 "stream_decoder.c"
   $261 = $9; //@line 2717 "stream_decoder.c"
   $262 = $11; //@line 2717 "stream_decoder.c"
   $263 = ((($262)) + 20|0); //@line 2717 "stream_decoder.c"
   $264 = HEAP32[$263>>2]|0; //@line 2717 "stream_decoder.c"
   $265 = $6; //@line 2717 "stream_decoder.c"
   $266 = ((($265)) + 4|0); //@line 2717 "stream_decoder.c"
   $267 = HEAP32[$266>>2]|0; //@line 2717 "stream_decoder.c"
   $268 = ((($267)) + 60|0); //@line 2717 "stream_decoder.c"
   $269 = $7; //@line 2717 "stream_decoder.c"
   $270 = (($268) + ($269<<2)|0); //@line 2717 "stream_decoder.c"
   $271 = HEAP32[$270>>2]|0; //@line 2717 "stream_decoder.c"
   $272 = $9; //@line 2717 "stream_decoder.c"
   $273 = (($271) + ($272<<2)|0); //@line 2717 "stream_decoder.c"
   FUNCTION_TABLE_viiiiii[$244 & 31]($251,$258,$260,$261,$264,$273); //@line 2717 "stream_decoder.c"
  }
 } while(0);
 $5 = 1; //@line 2722 "stream_decoder.c"
 $308 = $5; //@line 2723 "stream_decoder.c"
 STACKTOP = sp;return ($308|0); //@line 2723 "stream_decoder.c"
}
function _read_residual_partitioned_rice_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 32|0;
 $14 = sp + 28|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $22 = $9; //@line 2753 "stream_decoder.c"
 $23 = 1 << $22; //@line 2753 "stream_decoder.c"
 $18 = $23; //@line 2753 "stream_decoder.c"
 $24 = $9; //@line 2754 "stream_decoder.c"
 $25 = ($24>>>0)>(0); //@line 2754 "stream_decoder.c"
 $26 = $7;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 1136|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $9; //@line 2754 "stream_decoder.c"
 $32 = $30 >>> $31; //@line 2754 "stream_decoder.c"
 $33 = $8; //@line 2754 "stream_decoder.c"
 $34 = (($30) - ($33))|0; //@line 2754 "stream_decoder.c"
 $35 = $25 ? $32 : $34; //@line 2754 "stream_decoder.c"
 $19 = $35; //@line 2754 "stream_decoder.c"
 $36 = $12; //@line 2755 "stream_decoder.c"
 $37 = ($36|0)!=(0); //@line 2755 "stream_decoder.c"
 $38 = HEAP32[275]|0; //@line 2755 "stream_decoder.c"
 $39 = HEAP32[274]|0; //@line 2755 "stream_decoder.c"
 $40 = $37 ? $38 : $39; //@line 2755 "stream_decoder.c"
 $20 = $40; //@line 2755 "stream_decoder.c"
 $41 = $12; //@line 2756 "stream_decoder.c"
 $42 = ($41|0)!=(0); //@line 2756 "stream_decoder.c"
 $43 = HEAP32[273]|0; //@line 2756 "stream_decoder.c"
 $44 = HEAP32[272]|0; //@line 2756 "stream_decoder.c"
 $45 = $42 ? $43 : $44; //@line 2756 "stream_decoder.c"
 $21 = $45; //@line 2756 "stream_decoder.c"
 $46 = $10; //@line 2761 "stream_decoder.c"
 $47 = $9; //@line 2761 "stream_decoder.c"
 $48 = (6)>($47>>>0); //@line 2761 "stream_decoder.c"
 $49 = $9; //@line 2761 "stream_decoder.c"
 $50 = $48 ? 6 : $49; //@line 2761 "stream_decoder.c"
 $51 = (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($46,$50)|0); //@line 2761 "stream_decoder.c"
 $52 = ($51|0)!=(0); //@line 2761 "stream_decoder.c"
 if (!($52)) {
  $53 = $7; //@line 2762 "stream_decoder.c"
  $54 = HEAP32[$53>>2]|0; //@line 2762 "stream_decoder.c"
  HEAP32[$54>>2] = 8; //@line 2762 "stream_decoder.c"
  $6 = 0; //@line 2763 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 $16 = 0; //@line 2766 "stream_decoder.c"
 $15 = 0; //@line 2767 "stream_decoder.c"
 L5: while(1) {
  $55 = $15; //@line 2767 "stream_decoder.c"
  $56 = $18; //@line 2767 "stream_decoder.c"
  $57 = ($55>>>0)<($56>>>0); //@line 2767 "stream_decoder.c"
  if (!($57)) {
   label = 19;
   break;
  }
  $58 = $7; //@line 2768 "stream_decoder.c"
  $59 = ((($58)) + 4|0); //@line 2768 "stream_decoder.c"
  $60 = HEAP32[$59>>2]|0; //@line 2768 "stream_decoder.c"
  $61 = ((($60)) + 56|0); //@line 2768 "stream_decoder.c"
  $62 = HEAP32[$61>>2]|0; //@line 2768 "stream_decoder.c"
  $63 = $20; //@line 2768 "stream_decoder.c"
  $64 = (_FLAC__bitreader_read_raw_uint32($62,$13,$63)|0); //@line 2768 "stream_decoder.c"
  $65 = ($64|0)!=(0); //@line 2768 "stream_decoder.c"
  if (!($65)) {
   label = 6;
   break;
  }
  $66 = HEAP32[$13>>2]|0; //@line 2770 "stream_decoder.c"
  $67 = $10; //@line 2770 "stream_decoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 2770 "stream_decoder.c"
  $69 = $15; //@line 2770 "stream_decoder.c"
  $70 = (($68) + ($69<<2)|0); //@line 2770 "stream_decoder.c"
  HEAP32[$70>>2] = $66; //@line 2770 "stream_decoder.c"
  $71 = HEAP32[$13>>2]|0; //@line 2771 "stream_decoder.c"
  $72 = $21; //@line 2771 "stream_decoder.c"
  $73 = ($71>>>0)<($72>>>0); //@line 2771 "stream_decoder.c"
  L9: do {
   if ($73) {
    $74 = $10; //@line 2772 "stream_decoder.c"
    $75 = ((($74)) + 4|0); //@line 2772 "stream_decoder.c"
    $76 = HEAP32[$75>>2]|0; //@line 2772 "stream_decoder.c"
    $77 = $15; //@line 2772 "stream_decoder.c"
    $78 = (($76) + ($77<<2)|0); //@line 2772 "stream_decoder.c"
    HEAP32[$78>>2] = 0; //@line 2772 "stream_decoder.c"
    $79 = $9; //@line 2773 "stream_decoder.c"
    $80 = ($79|0)==(0); //@line 2773 "stream_decoder.c"
    $81 = $15; //@line 2773 "stream_decoder.c"
    $82 = ($81>>>0)>(0); //@line 2773 "stream_decoder.c"
    $or$cond = $80 | $82; //@line 2773 "stream_decoder.c"
    $83 = $19;
    $84 = $8; //@line 2773 "stream_decoder.c"
    $85 = (($83) - ($84))|0; //@line 2773 "stream_decoder.c"
    $86 = $or$cond ? $83 : $85; //@line 2773 "stream_decoder.c"
    $17 = $86; //@line 2773 "stream_decoder.c"
    $87 = $7; //@line 2774 "stream_decoder.c"
    $88 = ((($87)) + 4|0); //@line 2774 "stream_decoder.c"
    $89 = HEAP32[$88>>2]|0; //@line 2774 "stream_decoder.c"
    $90 = ((($89)) + 56|0); //@line 2774 "stream_decoder.c"
    $91 = HEAP32[$90>>2]|0; //@line 2774 "stream_decoder.c"
    $92 = $11; //@line 2774 "stream_decoder.c"
    $93 = $16; //@line 2774 "stream_decoder.c"
    $94 = (($92) + ($93<<2)|0); //@line 2774 "stream_decoder.c"
    $95 = $17; //@line 2774 "stream_decoder.c"
    $96 = HEAP32[$13>>2]|0; //@line 2774 "stream_decoder.c"
    $97 = (_FLAC__bitreader_read_rice_signed_block($91,$94,$95,$96)|0); //@line 2774 "stream_decoder.c"
    $98 = ($97|0)!=(0); //@line 2774 "stream_decoder.c"
    if (!($98)) {
     label = 9;
     break L5;
    }
    $99 = $17; //@line 2776 "stream_decoder.c"
    $100 = $16; //@line 2776 "stream_decoder.c"
    $101 = (($100) + ($99))|0; //@line 2776 "stream_decoder.c"
    $16 = $101; //@line 2776 "stream_decoder.c"
   } else {
    $102 = $7; //@line 2779 "stream_decoder.c"
    $103 = ((($102)) + 4|0); //@line 2779 "stream_decoder.c"
    $104 = HEAP32[$103>>2]|0; //@line 2779 "stream_decoder.c"
    $105 = ((($104)) + 56|0); //@line 2779 "stream_decoder.c"
    $106 = HEAP32[$105>>2]|0; //@line 2779 "stream_decoder.c"
    $107 = HEAP32[275]|0; //@line 2779 "stream_decoder.c"
    $108 = (_FLAC__bitreader_read_raw_uint32($106,$13,$107)|0); //@line 2779 "stream_decoder.c"
    $109 = ($108|0)!=(0); //@line 2779 "stream_decoder.c"
    if (!($109)) {
     label = 12;
     break L5;
    }
    $110 = HEAP32[$13>>2]|0; //@line 2781 "stream_decoder.c"
    $111 = $10; //@line 2781 "stream_decoder.c"
    $112 = ((($111)) + 4|0); //@line 2781 "stream_decoder.c"
    $113 = HEAP32[$112>>2]|0; //@line 2781 "stream_decoder.c"
    $114 = $15; //@line 2781 "stream_decoder.c"
    $115 = (($113) + ($114<<2)|0); //@line 2781 "stream_decoder.c"
    HEAP32[$115>>2] = $110; //@line 2781 "stream_decoder.c"
    $116 = $9; //@line 2782 "stream_decoder.c"
    $117 = ($116|0)==(0); //@line 2782 "stream_decoder.c"
    $118 = $15; //@line 2782 "stream_decoder.c"
    $119 = ($118>>>0)>(0); //@line 2782 "stream_decoder.c"
    $or$cond3 = $117 | $119; //@line 2782 "stream_decoder.c"
    $120 = $8; //@line 2782 "stream_decoder.c"
    $121 = $or$cond3 ? 0 : $120; //@line 2782 "stream_decoder.c"
    $17 = $121; //@line 2782 "stream_decoder.c"
    while(1) {
     $122 = $17; //@line 2782 "stream_decoder.c"
     $123 = $19; //@line 2782 "stream_decoder.c"
     $124 = ($122>>>0)<($123>>>0); //@line 2782 "stream_decoder.c"
     if (!($124)) {
      break L9;
     }
     $125 = $7; //@line 2783 "stream_decoder.c"
     $126 = ((($125)) + 4|0); //@line 2783 "stream_decoder.c"
     $127 = HEAP32[$126>>2]|0; //@line 2783 "stream_decoder.c"
     $128 = ((($127)) + 56|0); //@line 2783 "stream_decoder.c"
     $129 = HEAP32[$128>>2]|0; //@line 2783 "stream_decoder.c"
     $130 = HEAP32[$13>>2]|0; //@line 2783 "stream_decoder.c"
     $131 = (_FLAC__bitreader_read_raw_int32($129,$14,$130)|0); //@line 2783 "stream_decoder.c"
     $132 = ($131|0)!=(0); //@line 2783 "stream_decoder.c"
     if (!($132)) {
      label = 16;
      break L5;
     }
     $133 = HEAP32[$14>>2]|0; //@line 2785 "stream_decoder.c"
     $134 = $11; //@line 2785 "stream_decoder.c"
     $135 = $16; //@line 2785 "stream_decoder.c"
     $136 = (($134) + ($135<<2)|0); //@line 2785 "stream_decoder.c"
     HEAP32[$136>>2] = $133; //@line 2785 "stream_decoder.c"
     $137 = $17; //@line 2782 "stream_decoder.c"
     $138 = (($137) + 1)|0; //@line 2782 "stream_decoder.c"
     $17 = $138; //@line 2782 "stream_decoder.c"
     $139 = $16; //@line 2782 "stream_decoder.c"
     $140 = (($139) + 1)|0; //@line 2782 "stream_decoder.c"
     $16 = $140; //@line 2782 "stream_decoder.c"
    }
   }
  } while(0);
  $141 = $15; //@line 2767 "stream_decoder.c"
  $142 = (($141) + 1)|0; //@line 2767 "stream_decoder.c"
  $15 = $142; //@line 2767 "stream_decoder.c"
 }
 if ((label|0) == 6) {
  $6 = 0; //@line 2769 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 else if ((label|0) == 9) {
  $6 = 0; //@line 2775 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 else if ((label|0) == 12) {
  $6 = 0; //@line 2780 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 else if ((label|0) == 16) {
  $6 = 0; //@line 2784 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 else if ((label|0) == 19) {
  $6 = 1; //@line 2790 "stream_decoder.c"
  $143 = $6; //@line 2791 "stream_decoder.c"
  STACKTOP = sp;return ($143|0); //@line 2791 "stream_decoder.c"
 }
 return (0)|0;
}
function _FLAC__bitmath_ilog2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 168 "./include\private/bitmath.h"
 $3 = (_FLAC__clz_uint32_173($2)|0); //@line 168 "./include\private/bitmath.h"
 $4 = $3 ^ 31; //@line 168 "./include\private/bitmath.h"
 STACKTOP = sp;return ($4|0); //@line 168 "./include\private/bitmath.h"
}
function _FLAC__clz_uint32_173($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 82 "./include\private/bitmath.h"
 $3 = (Math_clz32(($2|0))|0); //@line 82 "./include\private/bitmath.h"
 STACKTOP = sp;return ($3|0); //@line 82 "./include\private/bitmath.h"
}
function _safe_malloc_muladd2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4; //@line 146 "../../include\share/alloc.h"
 $8 = ($7|0)!=(0); //@line 146 "../../include\share/alloc.h"
 do {
  if ($8) {
   $9 = $5; //@line 146 "../../include\share/alloc.h"
   $10 = ($9|0)!=(0); //@line 146 "../../include\share/alloc.h"
   $11 = $6; //@line 146 "../../include\share/alloc.h"
   $12 = ($11|0)!=(0); //@line 146 "../../include\share/alloc.h"
   $or$cond = $10 | $12; //@line 146 "../../include\share/alloc.h"
   if ($or$cond) {
    $14 = $6; //@line 148 "../../include\share/alloc.h"
    $15 = $5; //@line 148 "../../include\share/alloc.h"
    $16 = (($15) + ($14))|0; //@line 148 "../../include\share/alloc.h"
    $5 = $16; //@line 148 "../../include\share/alloc.h"
    $17 = $5; //@line 149 "../../include\share/alloc.h"
    $18 = $6; //@line 149 "../../include\share/alloc.h"
    $19 = ($17>>>0)<($18>>>0); //@line 149 "../../include\share/alloc.h"
    if ($19) {
     $3 = 0; //@line 150 "../../include\share/alloc.h"
     break;
    }
    $20 = $4; //@line 151 "../../include\share/alloc.h"
    $21 = $5; //@line 151 "../../include\share/alloc.h"
    $22 = (4294967295 / ($21>>>0))&-1; //@line 151 "../../include\share/alloc.h"
    $23 = ($20>>>0)>($22>>>0); //@line 151 "../../include\share/alloc.h"
    if ($23) {
     $3 = 0; //@line 152 "../../include\share/alloc.h"
     break;
    } else {
     $24 = $4; //@line 153 "../../include\share/alloc.h"
     $25 = $5; //@line 153 "../../include\share/alloc.h"
     $26 = Math_imul($24, $25)|0; //@line 153 "../../include\share/alloc.h"
     $27 = (_malloc($26)|0); //@line 153 "../../include\share/alloc.h"
     $3 = $27; //@line 153 "../../include\share/alloc.h"
     break;
    }
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  $13 = (_malloc(1)|0); //@line 147 "../../include\share/alloc.h"
  $3 = $13; //@line 147 "../../include\share/alloc.h"
 }
 $28 = $3; //@line 154 "../../include\share/alloc.h"
 STACKTOP = sp;return ($28|0); //@line 154 "../../include\share/alloc.h"
}
function _read_metadata_streaminfo_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0; //@line 1574 "stream_decoder.c"
 $10 = $4; //@line 1578 "stream_decoder.c"
 $11 = ((($10)) + 4|0); //@line 1578 "stream_decoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 1578 "stream_decoder.c"
 $13 = ((($12)) + 256|0); //@line 1578 "stream_decoder.c"
 HEAP32[$13>>2] = 0; //@line 1578 "stream_decoder.c"
 $14 = $5; //@line 1579 "stream_decoder.c"
 $15 = $4; //@line 1579 "stream_decoder.c"
 $16 = ((($15)) + 4|0); //@line 1579 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 1579 "stream_decoder.c"
 $18 = ((($17)) + 256|0); //@line 1579 "stream_decoder.c"
 $19 = ((($18)) + 4|0); //@line 1579 "stream_decoder.c"
 HEAP32[$19>>2] = $14; //@line 1579 "stream_decoder.c"
 $20 = $6; //@line 1580 "stream_decoder.c"
 $21 = $4; //@line 1580 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 1580 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 1580 "stream_decoder.c"
 $24 = ((($23)) + 256|0); //@line 1580 "stream_decoder.c"
 $25 = ((($24)) + 8|0); //@line 1580 "stream_decoder.c"
 HEAP32[$25>>2] = $20; //@line 1580 "stream_decoder.c"
 $26 = HEAP32[279]|0; //@line 1582 "stream_decoder.c"
 $8 = $26; //@line 1582 "stream_decoder.c"
 $27 = $4; //@line 1583 "stream_decoder.c"
 $28 = ((($27)) + 4|0); //@line 1583 "stream_decoder.c"
 $29 = HEAP32[$28>>2]|0; //@line 1583 "stream_decoder.c"
 $30 = ((($29)) + 56|0); //@line 1583 "stream_decoder.c"
 $31 = HEAP32[$30>>2]|0; //@line 1583 "stream_decoder.c"
 $32 = $8; //@line 1583 "stream_decoder.c"
 $33 = (_FLAC__bitreader_read_raw_uint32($31,$7,$32)|0); //@line 1583 "stream_decoder.c"
 $34 = ($33|0)!=(0); //@line 1583 "stream_decoder.c"
 if (!($34)) {
  $3 = 0; //@line 1584 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $35 = HEAP32[$7>>2]|0; //@line 1585 "stream_decoder.c"
 $36 = $4; //@line 1585 "stream_decoder.c"
 $37 = ((($36)) + 4|0); //@line 1585 "stream_decoder.c"
 $38 = HEAP32[$37>>2]|0; //@line 1585 "stream_decoder.c"
 $39 = ((($38)) + 256|0); //@line 1585 "stream_decoder.c"
 $40 = ((($39)) + 16|0); //@line 1585 "stream_decoder.c"
 HEAP32[$40>>2] = $35; //@line 1585 "stream_decoder.c"
 $41 = $8; //@line 1586 "stream_decoder.c"
 $42 = $9; //@line 1586 "stream_decoder.c"
 $43 = (($42) + ($41))|0; //@line 1586 "stream_decoder.c"
 $9 = $43; //@line 1586 "stream_decoder.c"
 $44 = HEAP32[279]|0; //@line 1588 "stream_decoder.c"
 $8 = $44; //@line 1588 "stream_decoder.c"
 $45 = $4; //@line 1589 "stream_decoder.c"
 $46 = ((($45)) + 4|0); //@line 1589 "stream_decoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 1589 "stream_decoder.c"
 $48 = ((($47)) + 56|0); //@line 1589 "stream_decoder.c"
 $49 = HEAP32[$48>>2]|0; //@line 1589 "stream_decoder.c"
 $50 = HEAP32[279]|0; //@line 1589 "stream_decoder.c"
 $51 = (_FLAC__bitreader_read_raw_uint32($49,$7,$50)|0); //@line 1589 "stream_decoder.c"
 $52 = ($51|0)!=(0); //@line 1589 "stream_decoder.c"
 if (!($52)) {
  $3 = 0; //@line 1590 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $53 = HEAP32[$7>>2]|0; //@line 1591 "stream_decoder.c"
 $54 = $4; //@line 1591 "stream_decoder.c"
 $55 = ((($54)) + 4|0); //@line 1591 "stream_decoder.c"
 $56 = HEAP32[$55>>2]|0; //@line 1591 "stream_decoder.c"
 $57 = ((($56)) + 256|0); //@line 1591 "stream_decoder.c"
 $58 = ((($57)) + 16|0); //@line 1591 "stream_decoder.c"
 $59 = ((($58)) + 4|0); //@line 1591 "stream_decoder.c"
 HEAP32[$59>>2] = $53; //@line 1591 "stream_decoder.c"
 $60 = $8; //@line 1592 "stream_decoder.c"
 $61 = $9; //@line 1592 "stream_decoder.c"
 $62 = (($61) + ($60))|0; //@line 1592 "stream_decoder.c"
 $9 = $62; //@line 1592 "stream_decoder.c"
 $63 = HEAP32[267]|0; //@line 1594 "stream_decoder.c"
 $8 = $63; //@line 1594 "stream_decoder.c"
 $64 = $4; //@line 1595 "stream_decoder.c"
 $65 = ((($64)) + 4|0); //@line 1595 "stream_decoder.c"
 $66 = HEAP32[$65>>2]|0; //@line 1595 "stream_decoder.c"
 $67 = ((($66)) + 56|0); //@line 1595 "stream_decoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 1595 "stream_decoder.c"
 $69 = HEAP32[267]|0; //@line 1595 "stream_decoder.c"
 $70 = (_FLAC__bitreader_read_raw_uint32($68,$7,$69)|0); //@line 1595 "stream_decoder.c"
 $71 = ($70|0)!=(0); //@line 1595 "stream_decoder.c"
 if (!($71)) {
  $3 = 0; //@line 1596 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $72 = HEAP32[$7>>2]|0; //@line 1597 "stream_decoder.c"
 $73 = $4; //@line 1597 "stream_decoder.c"
 $74 = ((($73)) + 4|0); //@line 1597 "stream_decoder.c"
 $75 = HEAP32[$74>>2]|0; //@line 1597 "stream_decoder.c"
 $76 = ((($75)) + 256|0); //@line 1597 "stream_decoder.c"
 $77 = ((($76)) + 16|0); //@line 1597 "stream_decoder.c"
 $78 = ((($77)) + 8|0); //@line 1597 "stream_decoder.c"
 HEAP32[$78>>2] = $72; //@line 1597 "stream_decoder.c"
 $79 = $8; //@line 1598 "stream_decoder.c"
 $80 = $9; //@line 1598 "stream_decoder.c"
 $81 = (($80) + ($79))|0; //@line 1598 "stream_decoder.c"
 $9 = $81; //@line 1598 "stream_decoder.c"
 $82 = HEAP32[267]|0; //@line 1600 "stream_decoder.c"
 $8 = $82; //@line 1600 "stream_decoder.c"
 $83 = $4; //@line 1601 "stream_decoder.c"
 $84 = ((($83)) + 4|0); //@line 1601 "stream_decoder.c"
 $85 = HEAP32[$84>>2]|0; //@line 1601 "stream_decoder.c"
 $86 = ((($85)) + 56|0); //@line 1601 "stream_decoder.c"
 $87 = HEAP32[$86>>2]|0; //@line 1601 "stream_decoder.c"
 $88 = HEAP32[267]|0; //@line 1601 "stream_decoder.c"
 $89 = (_FLAC__bitreader_read_raw_uint32($87,$7,$88)|0); //@line 1601 "stream_decoder.c"
 $90 = ($89|0)!=(0); //@line 1601 "stream_decoder.c"
 if (!($90)) {
  $3 = 0; //@line 1602 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $91 = HEAP32[$7>>2]|0; //@line 1603 "stream_decoder.c"
 $92 = $4; //@line 1603 "stream_decoder.c"
 $93 = ((($92)) + 4|0); //@line 1603 "stream_decoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 1603 "stream_decoder.c"
 $95 = ((($94)) + 256|0); //@line 1603 "stream_decoder.c"
 $96 = ((($95)) + 16|0); //@line 1603 "stream_decoder.c"
 $97 = ((($96)) + 12|0); //@line 1603 "stream_decoder.c"
 HEAP32[$97>>2] = $91; //@line 1603 "stream_decoder.c"
 $98 = $8; //@line 1604 "stream_decoder.c"
 $99 = $9; //@line 1604 "stream_decoder.c"
 $100 = (($99) + ($98))|0; //@line 1604 "stream_decoder.c"
 $9 = $100; //@line 1604 "stream_decoder.c"
 $101 = HEAP32[259]|0; //@line 1606 "stream_decoder.c"
 $8 = $101; //@line 1606 "stream_decoder.c"
 $102 = $4; //@line 1607 "stream_decoder.c"
 $103 = ((($102)) + 4|0); //@line 1607 "stream_decoder.c"
 $104 = HEAP32[$103>>2]|0; //@line 1607 "stream_decoder.c"
 $105 = ((($104)) + 56|0); //@line 1607 "stream_decoder.c"
 $106 = HEAP32[$105>>2]|0; //@line 1607 "stream_decoder.c"
 $107 = HEAP32[259]|0; //@line 1607 "stream_decoder.c"
 $108 = (_FLAC__bitreader_read_raw_uint32($106,$7,$107)|0); //@line 1607 "stream_decoder.c"
 $109 = ($108|0)!=(0); //@line 1607 "stream_decoder.c"
 if (!($109)) {
  $3 = 0; //@line 1608 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $110 = HEAP32[$7>>2]|0; //@line 1609 "stream_decoder.c"
 $111 = $4; //@line 1609 "stream_decoder.c"
 $112 = ((($111)) + 4|0); //@line 1609 "stream_decoder.c"
 $113 = HEAP32[$112>>2]|0; //@line 1609 "stream_decoder.c"
 $114 = ((($113)) + 256|0); //@line 1609 "stream_decoder.c"
 $115 = ((($114)) + 16|0); //@line 1609 "stream_decoder.c"
 $116 = ((($115)) + 16|0); //@line 1609 "stream_decoder.c"
 HEAP32[$116>>2] = $110; //@line 1609 "stream_decoder.c"
 $117 = $8; //@line 1610 "stream_decoder.c"
 $118 = $9; //@line 1610 "stream_decoder.c"
 $119 = (($118) + ($117))|0; //@line 1610 "stream_decoder.c"
 $9 = $119; //@line 1610 "stream_decoder.c"
 $120 = HEAP32[270]|0; //@line 1612 "stream_decoder.c"
 $8 = $120; //@line 1612 "stream_decoder.c"
 $121 = $4; //@line 1613 "stream_decoder.c"
 $122 = ((($121)) + 4|0); //@line 1613 "stream_decoder.c"
 $123 = HEAP32[$122>>2]|0; //@line 1613 "stream_decoder.c"
 $124 = ((($123)) + 56|0); //@line 1613 "stream_decoder.c"
 $125 = HEAP32[$124>>2]|0; //@line 1613 "stream_decoder.c"
 $126 = HEAP32[270]|0; //@line 1613 "stream_decoder.c"
 $127 = (_FLAC__bitreader_read_raw_uint32($125,$7,$126)|0); //@line 1613 "stream_decoder.c"
 $128 = ($127|0)!=(0); //@line 1613 "stream_decoder.c"
 if (!($128)) {
  $3 = 0; //@line 1614 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $129 = HEAP32[$7>>2]|0; //@line 1615 "stream_decoder.c"
 $130 = (($129) + 1)|0; //@line 1615 "stream_decoder.c"
 $131 = $4; //@line 1615 "stream_decoder.c"
 $132 = ((($131)) + 4|0); //@line 1615 "stream_decoder.c"
 $133 = HEAP32[$132>>2]|0; //@line 1615 "stream_decoder.c"
 $134 = ((($133)) + 256|0); //@line 1615 "stream_decoder.c"
 $135 = ((($134)) + 16|0); //@line 1615 "stream_decoder.c"
 $136 = ((($135)) + 20|0); //@line 1615 "stream_decoder.c"
 HEAP32[$136>>2] = $130; //@line 1615 "stream_decoder.c"
 $137 = $8; //@line 1616 "stream_decoder.c"
 $138 = $9; //@line 1616 "stream_decoder.c"
 $139 = (($138) + ($137))|0; //@line 1616 "stream_decoder.c"
 $9 = $139; //@line 1616 "stream_decoder.c"
 $140 = HEAP32[275]|0; //@line 1618 "stream_decoder.c"
 $8 = $140; //@line 1618 "stream_decoder.c"
 $141 = $4; //@line 1619 "stream_decoder.c"
 $142 = ((($141)) + 4|0); //@line 1619 "stream_decoder.c"
 $143 = HEAP32[$142>>2]|0; //@line 1619 "stream_decoder.c"
 $144 = ((($143)) + 56|0); //@line 1619 "stream_decoder.c"
 $145 = HEAP32[$144>>2]|0; //@line 1619 "stream_decoder.c"
 $146 = HEAP32[275]|0; //@line 1619 "stream_decoder.c"
 $147 = (_FLAC__bitreader_read_raw_uint32($145,$7,$146)|0); //@line 1619 "stream_decoder.c"
 $148 = ($147|0)!=(0); //@line 1619 "stream_decoder.c"
 if (!($148)) {
  $3 = 0; //@line 1620 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $149 = HEAP32[$7>>2]|0; //@line 1621 "stream_decoder.c"
 $150 = (($149) + 1)|0; //@line 1621 "stream_decoder.c"
 $151 = $4; //@line 1621 "stream_decoder.c"
 $152 = ((($151)) + 4|0); //@line 1621 "stream_decoder.c"
 $153 = HEAP32[$152>>2]|0; //@line 1621 "stream_decoder.c"
 $154 = ((($153)) + 256|0); //@line 1621 "stream_decoder.c"
 $155 = ((($154)) + 16|0); //@line 1621 "stream_decoder.c"
 $156 = ((($155)) + 24|0); //@line 1621 "stream_decoder.c"
 HEAP32[$156>>2] = $150; //@line 1621 "stream_decoder.c"
 $157 = $8; //@line 1622 "stream_decoder.c"
 $158 = $9; //@line 1622 "stream_decoder.c"
 $159 = (($158) + ($157))|0; //@line 1622 "stream_decoder.c"
 $9 = $159; //@line 1622 "stream_decoder.c"
 $160 = HEAP32[260]|0; //@line 1624 "stream_decoder.c"
 $8 = $160; //@line 1624 "stream_decoder.c"
 $161 = $4; //@line 1625 "stream_decoder.c"
 $162 = ((($161)) + 4|0); //@line 1625 "stream_decoder.c"
 $163 = HEAP32[$162>>2]|0; //@line 1625 "stream_decoder.c"
 $164 = ((($163)) + 56|0); //@line 1625 "stream_decoder.c"
 $165 = HEAP32[$164>>2]|0; //@line 1625 "stream_decoder.c"
 $166 = $4; //@line 1625 "stream_decoder.c"
 $167 = ((($166)) + 4|0); //@line 1625 "stream_decoder.c"
 $168 = HEAP32[$167>>2]|0; //@line 1625 "stream_decoder.c"
 $169 = ((($168)) + 256|0); //@line 1625 "stream_decoder.c"
 $170 = ((($169)) + 16|0); //@line 1625 "stream_decoder.c"
 $171 = ((($170)) + 32|0); //@line 1625 "stream_decoder.c"
 $172 = HEAP32[260]|0; //@line 1625 "stream_decoder.c"
 $173 = (_FLAC__bitreader_read_raw_uint64($165,$171,$172)|0); //@line 1625 "stream_decoder.c"
 $174 = ($173|0)!=(0); //@line 1625 "stream_decoder.c"
 if (!($174)) {
  $3 = 0; //@line 1626 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $175 = $8; //@line 1627 "stream_decoder.c"
 $176 = $9; //@line 1627 "stream_decoder.c"
 $177 = (($176) + ($175))|0; //@line 1627 "stream_decoder.c"
 $9 = $177; //@line 1627 "stream_decoder.c"
 $178 = $4; //@line 1629 "stream_decoder.c"
 $179 = ((($178)) + 4|0); //@line 1629 "stream_decoder.c"
 $180 = HEAP32[$179>>2]|0; //@line 1629 "stream_decoder.c"
 $181 = ((($180)) + 56|0); //@line 1629 "stream_decoder.c"
 $182 = HEAP32[$181>>2]|0; //@line 1629 "stream_decoder.c"
 $183 = $4; //@line 1629 "stream_decoder.c"
 $184 = ((($183)) + 4|0); //@line 1629 "stream_decoder.c"
 $185 = HEAP32[$184>>2]|0; //@line 1629 "stream_decoder.c"
 $186 = ((($185)) + 256|0); //@line 1629 "stream_decoder.c"
 $187 = ((($186)) + 16|0); //@line 1629 "stream_decoder.c"
 $188 = ((($187)) + 40|0); //@line 1629 "stream_decoder.c"
 $189 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($182,$188,16)|0); //@line 1629 "stream_decoder.c"
 $190 = ($189|0)!=(0); //@line 1629 "stream_decoder.c"
 if (!($190)) {
  $3 = 0; //@line 1630 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 $191 = $9; //@line 1631 "stream_decoder.c"
 $192 = (($191) + 128)|0; //@line 1631 "stream_decoder.c"
 $9 = $192; //@line 1631 "stream_decoder.c"
 $193 = $9; //@line 1635 "stream_decoder.c"
 $194 = (($193>>>0) / 8)&-1; //@line 1635 "stream_decoder.c"
 $195 = $6; //@line 1635 "stream_decoder.c"
 $196 = (($195) - ($194))|0; //@line 1635 "stream_decoder.c"
 $6 = $196; //@line 1635 "stream_decoder.c"
 $197 = $4; //@line 1636 "stream_decoder.c"
 $198 = ((($197)) + 4|0); //@line 1636 "stream_decoder.c"
 $199 = HEAP32[$198>>2]|0; //@line 1636 "stream_decoder.c"
 $200 = ((($199)) + 56|0); //@line 1636 "stream_decoder.c"
 $201 = HEAP32[$200>>2]|0; //@line 1636 "stream_decoder.c"
 $202 = $6; //@line 1636 "stream_decoder.c"
 $203 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($201,$202)|0); //@line 1636 "stream_decoder.c"
 $204 = ($203|0)!=(0); //@line 1636 "stream_decoder.c"
 if ($204) {
  $3 = 1; //@line 1639 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 } else {
  $3 = 0; //@line 1637 "stream_decoder.c"
  $205 = $3; //@line 1640 "stream_decoder.c"
  STACKTOP = sp;return ($205|0); //@line 1640 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_metadata_seektable_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 8|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4; //@line 1649 "stream_decoder.c"
 $11 = ((($10)) + 4|0); //@line 1649 "stream_decoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 1649 "stream_decoder.c"
 $13 = ((($12)) + 432|0); //@line 1649 "stream_decoder.c"
 HEAP32[$13>>2] = 3; //@line 1649 "stream_decoder.c"
 $14 = $5; //@line 1650 "stream_decoder.c"
 $15 = $4; //@line 1650 "stream_decoder.c"
 $16 = ((($15)) + 4|0); //@line 1650 "stream_decoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 1650 "stream_decoder.c"
 $18 = ((($17)) + 432|0); //@line 1650 "stream_decoder.c"
 $19 = ((($18)) + 4|0); //@line 1650 "stream_decoder.c"
 HEAP32[$19>>2] = $14; //@line 1650 "stream_decoder.c"
 $20 = $6; //@line 1651 "stream_decoder.c"
 $21 = $4; //@line 1651 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 1651 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 1651 "stream_decoder.c"
 $24 = ((($23)) + 432|0); //@line 1651 "stream_decoder.c"
 $25 = ((($24)) + 8|0); //@line 1651 "stream_decoder.c"
 HEAP32[$25>>2] = $20; //@line 1651 "stream_decoder.c"
 $26 = $6; //@line 1653 "stream_decoder.c"
 $27 = (($26>>>0) / 18)&-1; //@line 1653 "stream_decoder.c"
 $28 = $4; //@line 1653 "stream_decoder.c"
 $29 = ((($28)) + 4|0); //@line 1653 "stream_decoder.c"
 $30 = HEAP32[$29>>2]|0; //@line 1653 "stream_decoder.c"
 $31 = ((($30)) + 432|0); //@line 1653 "stream_decoder.c"
 $32 = ((($31)) + 16|0); //@line 1653 "stream_decoder.c"
 HEAP32[$32>>2] = $27; //@line 1653 "stream_decoder.c"
 $33 = $4; //@line 1656 "stream_decoder.c"
 $34 = ((($33)) + 4|0); //@line 1656 "stream_decoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 1656 "stream_decoder.c"
 $36 = ((($35)) + 432|0); //@line 1656 "stream_decoder.c"
 $37 = ((($36)) + 16|0); //@line 1656 "stream_decoder.c"
 $38 = ((($37)) + 4|0); //@line 1656 "stream_decoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 1656 "stream_decoder.c"
 $40 = $4; //@line 1656 "stream_decoder.c"
 $41 = ((($40)) + 4|0); //@line 1656 "stream_decoder.c"
 $42 = HEAP32[$41>>2]|0; //@line 1656 "stream_decoder.c"
 $43 = ((($42)) + 432|0); //@line 1656 "stream_decoder.c"
 $44 = ((($43)) + 16|0); //@line 1656 "stream_decoder.c"
 $45 = HEAP32[$44>>2]|0; //@line 1656 "stream_decoder.c"
 $46 = (_safe_realloc_mul_2op__167($39,$45,24)|0); //@line 1656 "stream_decoder.c"
 $47 = $4; //@line 1656 "stream_decoder.c"
 $48 = ((($47)) + 4|0); //@line 1656 "stream_decoder.c"
 $49 = HEAP32[$48>>2]|0; //@line 1656 "stream_decoder.c"
 $50 = ((($49)) + 432|0); //@line 1656 "stream_decoder.c"
 $51 = ((($50)) + 16|0); //@line 1656 "stream_decoder.c"
 $52 = ((($51)) + 4|0); //@line 1656 "stream_decoder.c"
 HEAP32[$52>>2] = $46; //@line 1656 "stream_decoder.c"
 $53 = (0|0)==($46|0); //@line 1656 "stream_decoder.c"
 if ($53) {
  $54 = $4; //@line 1657 "stream_decoder.c"
  $55 = HEAP32[$54>>2]|0; //@line 1657 "stream_decoder.c"
  HEAP32[$55>>2] = 8; //@line 1657 "stream_decoder.c"
  $3 = 0; //@line 1658 "stream_decoder.c"
  $156 = $3; //@line 1682 "stream_decoder.c"
  STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
 }
 $7 = 0; //@line 1660 "stream_decoder.c"
 while(1) {
  $56 = $7; //@line 1660 "stream_decoder.c"
  $57 = $4; //@line 1660 "stream_decoder.c"
  $58 = ((($57)) + 4|0); //@line 1660 "stream_decoder.c"
  $59 = HEAP32[$58>>2]|0; //@line 1660 "stream_decoder.c"
  $60 = ((($59)) + 432|0); //@line 1660 "stream_decoder.c"
  $61 = ((($60)) + 16|0); //@line 1660 "stream_decoder.c"
  $62 = HEAP32[$61>>2]|0; //@line 1660 "stream_decoder.c"
  $63 = ($56>>>0)<($62>>>0); //@line 1660 "stream_decoder.c"
  $64 = $4;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  if (!($63)) {
   label = 12;
   break;
  }
  $67 = ((($66)) + 56|0); //@line 1661 "stream_decoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 1661 "stream_decoder.c"
  $69 = HEAP32[280]|0; //@line 1661 "stream_decoder.c"
  $70 = (_FLAC__bitreader_read_raw_uint64($68,$9,$69)|0); //@line 1661 "stream_decoder.c"
  $71 = ($70|0)!=(0); //@line 1661 "stream_decoder.c"
  if (!($71)) {
   label = 6;
   break;
  }
  $72 = $9; //@line 1663 "stream_decoder.c"
  $73 = $72; //@line 1663 "stream_decoder.c"
  $74 = HEAP32[$73>>2]|0; //@line 1663 "stream_decoder.c"
  $75 = (($72) + 4)|0; //@line 1663 "stream_decoder.c"
  $76 = $75; //@line 1663 "stream_decoder.c"
  $77 = HEAP32[$76>>2]|0; //@line 1663 "stream_decoder.c"
  $78 = $4; //@line 1663 "stream_decoder.c"
  $79 = ((($78)) + 4|0); //@line 1663 "stream_decoder.c"
  $80 = HEAP32[$79>>2]|0; //@line 1663 "stream_decoder.c"
  $81 = ((($80)) + 432|0); //@line 1663 "stream_decoder.c"
  $82 = ((($81)) + 16|0); //@line 1663 "stream_decoder.c"
  $83 = ((($82)) + 4|0); //@line 1663 "stream_decoder.c"
  $84 = HEAP32[$83>>2]|0; //@line 1663 "stream_decoder.c"
  $85 = $7; //@line 1663 "stream_decoder.c"
  $86 = (($84) + (($85*24)|0)|0); //@line 1663 "stream_decoder.c"
  $87 = $86; //@line 1663 "stream_decoder.c"
  $88 = $87; //@line 1663 "stream_decoder.c"
  HEAP32[$88>>2] = $74; //@line 1663 "stream_decoder.c"
  $89 = (($87) + 4)|0; //@line 1663 "stream_decoder.c"
  $90 = $89; //@line 1663 "stream_decoder.c"
  HEAP32[$90>>2] = $77; //@line 1663 "stream_decoder.c"
  $91 = $4; //@line 1665 "stream_decoder.c"
  $92 = ((($91)) + 4|0); //@line 1665 "stream_decoder.c"
  $93 = HEAP32[$92>>2]|0; //@line 1665 "stream_decoder.c"
  $94 = ((($93)) + 56|0); //@line 1665 "stream_decoder.c"
  $95 = HEAP32[$94>>2]|0; //@line 1665 "stream_decoder.c"
  $96 = HEAP32[280]|0; //@line 1665 "stream_decoder.c"
  $97 = (_FLAC__bitreader_read_raw_uint64($95,$9,$96)|0); //@line 1665 "stream_decoder.c"
  $98 = ($97|0)!=(0); //@line 1665 "stream_decoder.c"
  if (!($98)) {
   label = 8;
   break;
  }
  $99 = $9; //@line 1667 "stream_decoder.c"
  $100 = $99; //@line 1667 "stream_decoder.c"
  $101 = HEAP32[$100>>2]|0; //@line 1667 "stream_decoder.c"
  $102 = (($99) + 4)|0; //@line 1667 "stream_decoder.c"
  $103 = $102; //@line 1667 "stream_decoder.c"
  $104 = HEAP32[$103>>2]|0; //@line 1667 "stream_decoder.c"
  $105 = $4; //@line 1667 "stream_decoder.c"
  $106 = ((($105)) + 4|0); //@line 1667 "stream_decoder.c"
  $107 = HEAP32[$106>>2]|0; //@line 1667 "stream_decoder.c"
  $108 = ((($107)) + 432|0); //@line 1667 "stream_decoder.c"
  $109 = ((($108)) + 16|0); //@line 1667 "stream_decoder.c"
  $110 = ((($109)) + 4|0); //@line 1667 "stream_decoder.c"
  $111 = HEAP32[$110>>2]|0; //@line 1667 "stream_decoder.c"
  $112 = $7; //@line 1667 "stream_decoder.c"
  $113 = (($111) + (($112*24)|0)|0); //@line 1667 "stream_decoder.c"
  $114 = ((($113)) + 8|0); //@line 1667 "stream_decoder.c"
  $115 = $114; //@line 1667 "stream_decoder.c"
  $116 = $115; //@line 1667 "stream_decoder.c"
  HEAP32[$116>>2] = $101; //@line 1667 "stream_decoder.c"
  $117 = (($115) + 4)|0; //@line 1667 "stream_decoder.c"
  $118 = $117; //@line 1667 "stream_decoder.c"
  HEAP32[$118>>2] = $104; //@line 1667 "stream_decoder.c"
  $119 = $4; //@line 1669 "stream_decoder.c"
  $120 = ((($119)) + 4|0); //@line 1669 "stream_decoder.c"
  $121 = HEAP32[$120>>2]|0; //@line 1669 "stream_decoder.c"
  $122 = ((($121)) + 56|0); //@line 1669 "stream_decoder.c"
  $123 = HEAP32[$122>>2]|0; //@line 1669 "stream_decoder.c"
  $124 = HEAP32[279]|0; //@line 1669 "stream_decoder.c"
  $125 = (_FLAC__bitreader_read_raw_uint32($123,$8,$124)|0); //@line 1669 "stream_decoder.c"
  $126 = ($125|0)!=(0); //@line 1669 "stream_decoder.c"
  if (!($126)) {
   label = 10;
   break;
  }
  $127 = HEAP32[$8>>2]|0; //@line 1671 "stream_decoder.c"
  $128 = $4; //@line 1671 "stream_decoder.c"
  $129 = ((($128)) + 4|0); //@line 1671 "stream_decoder.c"
  $130 = HEAP32[$129>>2]|0; //@line 1671 "stream_decoder.c"
  $131 = ((($130)) + 432|0); //@line 1671 "stream_decoder.c"
  $132 = ((($131)) + 16|0); //@line 1671 "stream_decoder.c"
  $133 = ((($132)) + 4|0); //@line 1671 "stream_decoder.c"
  $134 = HEAP32[$133>>2]|0; //@line 1671 "stream_decoder.c"
  $135 = $7; //@line 1671 "stream_decoder.c"
  $136 = (($134) + (($135*24)|0)|0); //@line 1671 "stream_decoder.c"
  $137 = ((($136)) + 16|0); //@line 1671 "stream_decoder.c"
  HEAP32[$137>>2] = $127; //@line 1671 "stream_decoder.c"
  $138 = $7; //@line 1660 "stream_decoder.c"
  $139 = (($138) + 1)|0; //@line 1660 "stream_decoder.c"
  $7 = $139; //@line 1660 "stream_decoder.c"
 }
 if ((label|0) == 6) {
  $3 = 0; //@line 1662 "stream_decoder.c"
  $156 = $3; //@line 1682 "stream_decoder.c"
  STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
 }
 else if ((label|0) == 8) {
  $3 = 0; //@line 1666 "stream_decoder.c"
  $156 = $3; //@line 1682 "stream_decoder.c"
  STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
 }
 else if ((label|0) == 10) {
  $3 = 0; //@line 1670 "stream_decoder.c"
  $156 = $3; //@line 1682 "stream_decoder.c"
  STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
 }
 else if ((label|0) == 12) {
  $140 = ((($66)) + 432|0); //@line 1673 "stream_decoder.c"
  $141 = ((($140)) + 16|0); //@line 1673 "stream_decoder.c"
  $142 = HEAP32[$141>>2]|0; //@line 1673 "stream_decoder.c"
  $143 = ($142*18)|0; //@line 1673 "stream_decoder.c"
  $144 = $6; //@line 1673 "stream_decoder.c"
  $145 = (($144) - ($143))|0; //@line 1673 "stream_decoder.c"
  $6 = $145; //@line 1673 "stream_decoder.c"
  $146 = $6; //@line 1675 "stream_decoder.c"
  $147 = ($146>>>0)>(0); //@line 1675 "stream_decoder.c"
  if ($147) {
   $148 = $4; //@line 1677 "stream_decoder.c"
   $149 = ((($148)) + 4|0); //@line 1677 "stream_decoder.c"
   $150 = HEAP32[$149>>2]|0; //@line 1677 "stream_decoder.c"
   $151 = ((($150)) + 56|0); //@line 1677 "stream_decoder.c"
   $152 = HEAP32[$151>>2]|0; //@line 1677 "stream_decoder.c"
   $153 = $6; //@line 1677 "stream_decoder.c"
   $154 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($152,$153)|0); //@line 1677 "stream_decoder.c"
   $155 = ($154|0)!=(0); //@line 1677 "stream_decoder.c"
   if (!($155)) {
    $3 = 0; //@line 1678 "stream_decoder.c"
    $156 = $3; //@line 1682 "stream_decoder.c"
    STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
   }
  }
  $3 = 1; //@line 1681 "stream_decoder.c"
  $156 = $3; //@line 1682 "stream_decoder.c"
  STACKTOP = sp;return ($156|0); //@line 1682 "stream_decoder.c"
 }
 return (0)|0;
}
function _has_id_filtered_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0; //@line 1321 "stream_decoder.c"
 while(1) {
  $6 = $5; //@line 1321 "stream_decoder.c"
  $7 = $3; //@line 1321 "stream_decoder.c"
  $8 = ((($7)) + 4|0); //@line 1321 "stream_decoder.c"
  $9 = HEAP32[$8>>2]|0; //@line 1321 "stream_decoder.c"
  $10 = ((($9)) + 1124|0); //@line 1321 "stream_decoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1321 "stream_decoder.c"
  $12 = ($6>>>0)<($11>>>0); //@line 1321 "stream_decoder.c"
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $3; //@line 1322 "stream_decoder.c"
  $14 = ((($13)) + 4|0); //@line 1322 "stream_decoder.c"
  $15 = HEAP32[$14>>2]|0; //@line 1322 "stream_decoder.c"
  $16 = ((($15)) + 1120|0); //@line 1322 "stream_decoder.c"
  $17 = HEAP32[$16>>2]|0; //@line 1322 "stream_decoder.c"
  $18 = $5; //@line 1322 "stream_decoder.c"
  $19 = HEAP32[265]|0; //@line 1322 "stream_decoder.c"
  $20 = (($19>>>0) / 8)&-1; //@line 1322 "stream_decoder.c"
  $21 = Math_imul($18, $20)|0; //@line 1322 "stream_decoder.c"
  $22 = (($17) + ($21)|0); //@line 1322 "stream_decoder.c"
  $23 = $4; //@line 1322 "stream_decoder.c"
  $24 = HEAP32[265]|0; //@line 1322 "stream_decoder.c"
  $25 = (($24>>>0) / 8)&-1; //@line 1322 "stream_decoder.c"
  $26 = (_memcmp($22,$23,$25)|0); //@line 1322 "stream_decoder.c"
  $27 = (0)==($26|0); //@line 1322 "stream_decoder.c"
  if ($27) {
   label = 4;
   break;
  }
  $28 = $5; //@line 1321 "stream_decoder.c"
  $29 = (($28) + 1)|0; //@line 1321 "stream_decoder.c"
  $5 = $29; //@line 1321 "stream_decoder.c"
 }
 if ((label|0) == 4) {
  $2 = 1; //@line 1323 "stream_decoder.c"
  $30 = $2; //@line 1326 "stream_decoder.c"
  STACKTOP = sp;return ($30|0); //@line 1326 "stream_decoder.c"
 }
 else if ((label|0) == 6) {
  $2 = 0; //@line 1325 "stream_decoder.c"
  $30 = $2; //@line 1326 "stream_decoder.c"
  STACKTOP = sp;return ($30|0); //@line 1326 "stream_decoder.c"
 }
 return (0)|0;
}
function _read_metadata_vorbiscomment_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6; //@line 1691 "stream_decoder.c"
 $9 = ($8>>>0)>=(8); //@line 1691 "stream_decoder.c"
 L1: do {
  if ($9) {
   $10 = $6; //@line 1692 "stream_decoder.c"
   $11 = (($10) - 8)|0; //@line 1692 "stream_decoder.c"
   $6 = $11; //@line 1692 "stream_decoder.c"
   $12 = $4; //@line 1694 "stream_decoder.c"
   $13 = ((($12)) + 4|0); //@line 1694 "stream_decoder.c"
   $14 = HEAP32[$13>>2]|0; //@line 1694 "stream_decoder.c"
   $15 = ((($14)) + 56|0); //@line 1694 "stream_decoder.c"
   $16 = HEAP32[$15>>2]|0; //@line 1694 "stream_decoder.c"
   $17 = $5; //@line 1694 "stream_decoder.c"
   $18 = (_FLAC__bitreader_read_uint32_little_endian($16,$17)|0); //@line 1694 "stream_decoder.c"
   $19 = ($18|0)!=(0); //@line 1694 "stream_decoder.c"
   if (!($19)) {
    $3 = 0; //@line 1695 "stream_decoder.c"
    $248 = $3; //@line 1785 "stream_decoder.c"
    STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
   }
   $20 = $5; //@line 1696 "stream_decoder.c"
   $21 = HEAP32[$20>>2]|0; //@line 1696 "stream_decoder.c"
   $22 = ($21>>>0)>(0); //@line 1696 "stream_decoder.c"
   do {
    if ($22) {
     $23 = $6; //@line 1697 "stream_decoder.c"
     $24 = $5; //@line 1697 "stream_decoder.c"
     $25 = HEAP32[$24>>2]|0; //@line 1697 "stream_decoder.c"
     $26 = ($23>>>0)<($25>>>0); //@line 1697 "stream_decoder.c"
     $27 = $5;
     if ($26) {
      HEAP32[$27>>2] = 0; //@line 1698 "stream_decoder.c"
      $28 = $5; //@line 1699 "stream_decoder.c"
      $29 = ((($28)) + 4|0); //@line 1699 "stream_decoder.c"
      HEAP32[$29>>2] = 0; //@line 1699 "stream_decoder.c"
      break L1;
     }
     $30 = HEAP32[$27>>2]|0; //@line 1703 "stream_decoder.c"
     $31 = $6; //@line 1703 "stream_decoder.c"
     $32 = (($31) - ($30))|0; //@line 1703 "stream_decoder.c"
     $6 = $32; //@line 1703 "stream_decoder.c"
     $33 = $5; //@line 1704 "stream_decoder.c"
     $34 = HEAP32[$33>>2]|0; //@line 1704 "stream_decoder.c"
     $35 = (_safe_malloc_add_2op__175($34,1)|0); //@line 1704 "stream_decoder.c"
     $36 = $5; //@line 1704 "stream_decoder.c"
     $37 = ((($36)) + 4|0); //@line 1704 "stream_decoder.c"
     HEAP32[$37>>2] = $35; //@line 1704 "stream_decoder.c"
     $38 = (0|0)==($35|0); //@line 1704 "stream_decoder.c"
     $39 = $4;
     if ($38) {
      $40 = HEAP32[$39>>2]|0; //@line 1705 "stream_decoder.c"
      HEAP32[$40>>2] = 8; //@line 1705 "stream_decoder.c"
      $3 = 0; //@line 1706 "stream_decoder.c"
      $248 = $3; //@line 1785 "stream_decoder.c"
      STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
     }
     $41 = ((($39)) + 4|0); //@line 1708 "stream_decoder.c"
     $42 = HEAP32[$41>>2]|0; //@line 1708 "stream_decoder.c"
     $43 = ((($42)) + 56|0); //@line 1708 "stream_decoder.c"
     $44 = HEAP32[$43>>2]|0; //@line 1708 "stream_decoder.c"
     $45 = $5; //@line 1708 "stream_decoder.c"
     $46 = ((($45)) + 4|0); //@line 1708 "stream_decoder.c"
     $47 = HEAP32[$46>>2]|0; //@line 1708 "stream_decoder.c"
     $48 = $5; //@line 1708 "stream_decoder.c"
     $49 = HEAP32[$48>>2]|0; //@line 1708 "stream_decoder.c"
     $50 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($44,$47,$49)|0); //@line 1708 "stream_decoder.c"
     $51 = ($50|0)!=(0); //@line 1708 "stream_decoder.c"
     if ($51) {
      $52 = $5; //@line 1710 "stream_decoder.c"
      $53 = ((($52)) + 4|0); //@line 1710 "stream_decoder.c"
      $54 = HEAP32[$53>>2]|0; //@line 1710 "stream_decoder.c"
      $55 = $5; //@line 1710 "stream_decoder.c"
      $56 = HEAP32[$55>>2]|0; //@line 1710 "stream_decoder.c"
      $57 = (($54) + ($56)|0); //@line 1710 "stream_decoder.c"
      HEAP8[$57>>0] = 0; //@line 1710 "stream_decoder.c"
      break;
     }
     $3 = 0; //@line 1709 "stream_decoder.c"
     $248 = $3; //@line 1785 "stream_decoder.c"
     STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
    } else {
     $58 = $5; //@line 1713 "stream_decoder.c"
     $59 = ((($58)) + 4|0); //@line 1713 "stream_decoder.c"
     HEAP32[$59>>2] = 0; //@line 1713 "stream_decoder.c"
    }
   } while(0);
   $60 = $4; //@line 1717 "stream_decoder.c"
   $61 = ((($60)) + 4|0); //@line 1717 "stream_decoder.c"
   $62 = HEAP32[$61>>2]|0; //@line 1717 "stream_decoder.c"
   $63 = ((($62)) + 56|0); //@line 1717 "stream_decoder.c"
   $64 = HEAP32[$63>>2]|0; //@line 1717 "stream_decoder.c"
   $65 = $5; //@line 1717 "stream_decoder.c"
   $66 = ((($65)) + 8|0); //@line 1717 "stream_decoder.c"
   $67 = (_FLAC__bitreader_read_uint32_little_endian($64,$66)|0); //@line 1717 "stream_decoder.c"
   $68 = ($67|0)!=(0); //@line 1717 "stream_decoder.c"
   if (!($68)) {
    $3 = 0; //@line 1718 "stream_decoder.c"
    $248 = $3; //@line 1785 "stream_decoder.c"
    STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
   }
   $69 = $5; //@line 1721 "stream_decoder.c"
   $70 = ((($69)) + 8|0); //@line 1721 "stream_decoder.c"
   $71 = HEAP32[$70>>2]|0; //@line 1721 "stream_decoder.c"
   $72 = ($71>>>0)>(100000); //@line 1721 "stream_decoder.c"
   $73 = $5;
   $74 = ((($73)) + 8|0);
   if ($72) {
    HEAP32[$74>>2] = 0; //@line 1723 "stream_decoder.c"
    $3 = 0; //@line 1724 "stream_decoder.c"
    $248 = $3; //@line 1785 "stream_decoder.c"
    STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
   }
   $75 = HEAP32[$74>>2]|0; //@line 1726 "stream_decoder.c"
   $76 = ($75>>>0)>(0); //@line 1726 "stream_decoder.c"
   if ($76) {
    $77 = $5; //@line 1727 "stream_decoder.c"
    $78 = ((($77)) + 8|0); //@line 1727 "stream_decoder.c"
    $79 = HEAP32[$78>>2]|0; //@line 1727 "stream_decoder.c"
    $80 = (_safe_malloc_mul_2op_p($79,8)|0); //@line 1727 "stream_decoder.c"
    $81 = $5; //@line 1727 "stream_decoder.c"
    $82 = ((($81)) + 12|0); //@line 1727 "stream_decoder.c"
    HEAP32[$82>>2] = $80; //@line 1727 "stream_decoder.c"
    $83 = (0|0)==($80|0); //@line 1727 "stream_decoder.c"
    if ($83) {
     $84 = $5; //@line 1728 "stream_decoder.c"
     $85 = ((($84)) + 8|0); //@line 1728 "stream_decoder.c"
     HEAP32[$85>>2] = 0; //@line 1728 "stream_decoder.c"
     $86 = $4; //@line 1729 "stream_decoder.c"
     $87 = HEAP32[$86>>2]|0; //@line 1729 "stream_decoder.c"
     HEAP32[$87>>2] = 8; //@line 1729 "stream_decoder.c"
     $3 = 0; //@line 1730 "stream_decoder.c"
     $248 = $3; //@line 1785 "stream_decoder.c"
     STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
    }
    $7 = 0; //@line 1732 "stream_decoder.c"
    while(1) {
     $88 = $7; //@line 1732 "stream_decoder.c"
     $89 = $5; //@line 1732 "stream_decoder.c"
     $90 = ((($89)) + 8|0); //@line 1732 "stream_decoder.c"
     $91 = HEAP32[$90>>2]|0; //@line 1732 "stream_decoder.c"
     $92 = ($88>>>0)<($91>>>0); //@line 1732 "stream_decoder.c"
     if (!($92)) {
      break L1;
     }
     $93 = $5; //@line 1734 "stream_decoder.c"
     $94 = ((($93)) + 12|0); //@line 1734 "stream_decoder.c"
     $95 = HEAP32[$94>>2]|0; //@line 1734 "stream_decoder.c"
     $96 = $7; //@line 1734 "stream_decoder.c"
     $97 = (($95) + ($96<<3)|0); //@line 1734 "stream_decoder.c"
     HEAP32[$97>>2] = 0; //@line 1734 "stream_decoder.c"
     $98 = $5; //@line 1735 "stream_decoder.c"
     $99 = ((($98)) + 12|0); //@line 1735 "stream_decoder.c"
     $100 = HEAP32[$99>>2]|0; //@line 1735 "stream_decoder.c"
     $101 = $7; //@line 1735 "stream_decoder.c"
     $102 = (($100) + ($101<<3)|0); //@line 1735 "stream_decoder.c"
     $103 = ((($102)) + 4|0); //@line 1735 "stream_decoder.c"
     HEAP32[$103>>2] = 0; //@line 1735 "stream_decoder.c"
     $104 = $6; //@line 1738 "stream_decoder.c"
     $105 = ($104>>>0)<(4); //@line 1738 "stream_decoder.c"
     if ($105) {
      label = 23;
      break;
     }
     $109 = $6; //@line 1743 "stream_decoder.c"
     $110 = (($109) - 4)|0; //@line 1743 "stream_decoder.c"
     $6 = $110; //@line 1743 "stream_decoder.c"
     $111 = $4; //@line 1744 "stream_decoder.c"
     $112 = ((($111)) + 4|0); //@line 1744 "stream_decoder.c"
     $113 = HEAP32[$112>>2]|0; //@line 1744 "stream_decoder.c"
     $114 = ((($113)) + 56|0); //@line 1744 "stream_decoder.c"
     $115 = HEAP32[$114>>2]|0; //@line 1744 "stream_decoder.c"
     $116 = $5; //@line 1744 "stream_decoder.c"
     $117 = ((($116)) + 12|0); //@line 1744 "stream_decoder.c"
     $118 = HEAP32[$117>>2]|0; //@line 1744 "stream_decoder.c"
     $119 = $7; //@line 1744 "stream_decoder.c"
     $120 = (($118) + ($119<<3)|0); //@line 1744 "stream_decoder.c"
     $121 = (_FLAC__bitreader_read_uint32_little_endian($115,$120)|0); //@line 1744 "stream_decoder.c"
     $122 = ($121|0)!=(0); //@line 1744 "stream_decoder.c"
     if (!($122)) {
      label = 25;
      break;
     }
     $126 = $5; //@line 1748 "stream_decoder.c"
     $127 = ((($126)) + 12|0); //@line 1748 "stream_decoder.c"
     $128 = HEAP32[$127>>2]|0; //@line 1748 "stream_decoder.c"
     $129 = $7; //@line 1748 "stream_decoder.c"
     $130 = (($128) + ($129<<3)|0); //@line 1748 "stream_decoder.c"
     $131 = HEAP32[$130>>2]|0; //@line 1748 "stream_decoder.c"
     $132 = ($131>>>0)>(0); //@line 1748 "stream_decoder.c"
     if ($132) {
      $133 = $6; //@line 1749 "stream_decoder.c"
      $134 = $5; //@line 1749 "stream_decoder.c"
      $135 = ((($134)) + 12|0); //@line 1749 "stream_decoder.c"
      $136 = HEAP32[$135>>2]|0; //@line 1749 "stream_decoder.c"
      $137 = $7; //@line 1749 "stream_decoder.c"
      $138 = (($136) + ($137<<3)|0); //@line 1749 "stream_decoder.c"
      $139 = HEAP32[$138>>2]|0; //@line 1749 "stream_decoder.c"
      $140 = ($133>>>0)<($139>>>0); //@line 1749 "stream_decoder.c"
      if ($140) {
       label = 28;
       break;
      }
      $144 = $5; //@line 1754 "stream_decoder.c"
      $145 = ((($144)) + 12|0); //@line 1754 "stream_decoder.c"
      $146 = HEAP32[$145>>2]|0; //@line 1754 "stream_decoder.c"
      $147 = $7; //@line 1754 "stream_decoder.c"
      $148 = (($146) + ($147<<3)|0); //@line 1754 "stream_decoder.c"
      $149 = HEAP32[$148>>2]|0; //@line 1754 "stream_decoder.c"
      $150 = $6; //@line 1754 "stream_decoder.c"
      $151 = (($150) - ($149))|0; //@line 1754 "stream_decoder.c"
      $6 = $151; //@line 1754 "stream_decoder.c"
      $152 = $5; //@line 1755 "stream_decoder.c"
      $153 = ((($152)) + 12|0); //@line 1755 "stream_decoder.c"
      $154 = HEAP32[$153>>2]|0; //@line 1755 "stream_decoder.c"
      $155 = $7; //@line 1755 "stream_decoder.c"
      $156 = (($154) + ($155<<3)|0); //@line 1755 "stream_decoder.c"
      $157 = HEAP32[$156>>2]|0; //@line 1755 "stream_decoder.c"
      $158 = (_safe_malloc_add_2op__175($157,1)|0); //@line 1755 "stream_decoder.c"
      $159 = $5; //@line 1755 "stream_decoder.c"
      $160 = ((($159)) + 12|0); //@line 1755 "stream_decoder.c"
      $161 = HEAP32[$160>>2]|0; //@line 1755 "stream_decoder.c"
      $162 = $7; //@line 1755 "stream_decoder.c"
      $163 = (($161) + ($162<<3)|0); //@line 1755 "stream_decoder.c"
      $164 = ((($163)) + 4|0); //@line 1755 "stream_decoder.c"
      HEAP32[$164>>2] = $158; //@line 1755 "stream_decoder.c"
      $165 = (0|0)==($158|0); //@line 1755 "stream_decoder.c"
      if ($165) {
       label = 30;
       break;
      }
      $171 = $5; //@line 1760 "stream_decoder.c"
      $172 = ((($171)) + 12|0); //@line 1760 "stream_decoder.c"
      $173 = HEAP32[$172>>2]|0; //@line 1760 "stream_decoder.c"
      $174 = $7; //@line 1760 "stream_decoder.c"
      $175 = (($173) + ($174<<3)|0); //@line 1760 "stream_decoder.c"
      $176 = ((($175)) + 4|0); //@line 1760 "stream_decoder.c"
      $177 = HEAP32[$176>>2]|0; //@line 1760 "stream_decoder.c"
      $178 = $5; //@line 1760 "stream_decoder.c"
      $179 = ((($178)) + 12|0); //@line 1760 "stream_decoder.c"
      $180 = HEAP32[$179>>2]|0; //@line 1760 "stream_decoder.c"
      $181 = $7; //@line 1760 "stream_decoder.c"
      $182 = (($180) + ($181<<3)|0); //@line 1760 "stream_decoder.c"
      $183 = HEAP32[$182>>2]|0; //@line 1760 "stream_decoder.c"
      _memset(($177|0),0,($183|0))|0; //@line 1760 "stream_decoder.c"
      $184 = $4; //@line 1761 "stream_decoder.c"
      $185 = ((($184)) + 4|0); //@line 1761 "stream_decoder.c"
      $186 = HEAP32[$185>>2]|0; //@line 1761 "stream_decoder.c"
      $187 = ((($186)) + 56|0); //@line 1761 "stream_decoder.c"
      $188 = HEAP32[$187>>2]|0; //@line 1761 "stream_decoder.c"
      $189 = $5; //@line 1761 "stream_decoder.c"
      $190 = ((($189)) + 12|0); //@line 1761 "stream_decoder.c"
      $191 = HEAP32[$190>>2]|0; //@line 1761 "stream_decoder.c"
      $192 = $7; //@line 1761 "stream_decoder.c"
      $193 = (($191) + ($192<<3)|0); //@line 1761 "stream_decoder.c"
      $194 = ((($193)) + 4|0); //@line 1761 "stream_decoder.c"
      $195 = HEAP32[$194>>2]|0; //@line 1761 "stream_decoder.c"
      $196 = $5; //@line 1761 "stream_decoder.c"
      $197 = ((($196)) + 12|0); //@line 1761 "stream_decoder.c"
      $198 = HEAP32[$197>>2]|0; //@line 1761 "stream_decoder.c"
      $199 = $7; //@line 1761 "stream_decoder.c"
      $200 = (($198) + ($199<<3)|0); //@line 1761 "stream_decoder.c"
      $201 = HEAP32[$200>>2]|0; //@line 1761 "stream_decoder.c"
      $202 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($188,$195,$201)|0); //@line 1761 "stream_decoder.c"
      $203 = ($202|0)!=(0); //@line 1761 "stream_decoder.c"
      if (!($203)) {
       label = 32;
       break;
      }
      $207 = $5; //@line 1765 "stream_decoder.c"
      $208 = ((($207)) + 12|0); //@line 1765 "stream_decoder.c"
      $209 = HEAP32[$208>>2]|0; //@line 1765 "stream_decoder.c"
      $210 = $7; //@line 1765 "stream_decoder.c"
      $211 = (($209) + ($210<<3)|0); //@line 1765 "stream_decoder.c"
      $212 = ((($211)) + 4|0); //@line 1765 "stream_decoder.c"
      $213 = HEAP32[$212>>2]|0; //@line 1765 "stream_decoder.c"
      $214 = $5; //@line 1765 "stream_decoder.c"
      $215 = ((($214)) + 12|0); //@line 1765 "stream_decoder.c"
      $216 = HEAP32[$215>>2]|0; //@line 1765 "stream_decoder.c"
      $217 = $7; //@line 1765 "stream_decoder.c"
      $218 = (($216) + ($217<<3)|0); //@line 1765 "stream_decoder.c"
      $219 = HEAP32[$218>>2]|0; //@line 1765 "stream_decoder.c"
      $220 = (($213) + ($219)|0); //@line 1765 "stream_decoder.c"
      HEAP8[$220>>0] = 0; //@line 1765 "stream_decoder.c"
     } else {
      $221 = $5; //@line 1768 "stream_decoder.c"
      $222 = ((($221)) + 12|0); //@line 1768 "stream_decoder.c"
      $223 = HEAP32[$222>>2]|0; //@line 1768 "stream_decoder.c"
      $224 = $7; //@line 1768 "stream_decoder.c"
      $225 = (($223) + ($224<<3)|0); //@line 1768 "stream_decoder.c"
      $226 = ((($225)) + 4|0); //@line 1768 "stream_decoder.c"
      HEAP32[$226>>2] = 0; //@line 1768 "stream_decoder.c"
     }
     $227 = $7; //@line 1732 "stream_decoder.c"
     $228 = (($227) + 1)|0; //@line 1732 "stream_decoder.c"
     $7 = $228; //@line 1732 "stream_decoder.c"
    }
    if ((label|0) == 23) {
     $106 = $7; //@line 1739 "stream_decoder.c"
     $107 = $5; //@line 1739 "stream_decoder.c"
     $108 = ((($107)) + 8|0); //@line 1739 "stream_decoder.c"
     HEAP32[$108>>2] = $106; //@line 1739 "stream_decoder.c"
     break;
    }
    else if ((label|0) == 25) {
     $123 = $7; //@line 1745 "stream_decoder.c"
     $124 = $5; //@line 1745 "stream_decoder.c"
     $125 = ((($124)) + 8|0); //@line 1745 "stream_decoder.c"
     HEAP32[$125>>2] = $123; //@line 1745 "stream_decoder.c"
     $3 = 0; //@line 1746 "stream_decoder.c"
     $248 = $3; //@line 1785 "stream_decoder.c"
     STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
    }
    else if ((label|0) == 28) {
     $141 = $7; //@line 1750 "stream_decoder.c"
     $142 = $5; //@line 1750 "stream_decoder.c"
     $143 = ((($142)) + 8|0); //@line 1750 "stream_decoder.c"
     HEAP32[$143>>2] = $141; //@line 1750 "stream_decoder.c"
     break;
    }
    else if ((label|0) == 30) {
     $166 = $4; //@line 1756 "stream_decoder.c"
     $167 = HEAP32[$166>>2]|0; //@line 1756 "stream_decoder.c"
     HEAP32[$167>>2] = 8; //@line 1756 "stream_decoder.c"
     $168 = $7; //@line 1757 "stream_decoder.c"
     $169 = $5; //@line 1757 "stream_decoder.c"
     $170 = ((($169)) + 8|0); //@line 1757 "stream_decoder.c"
     HEAP32[$170>>2] = $168; //@line 1757 "stream_decoder.c"
     $3 = 0; //@line 1758 "stream_decoder.c"
     $248 = $3; //@line 1785 "stream_decoder.c"
     STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
    }
    else if ((label|0) == 32) {
     $204 = $7; //@line 1762 "stream_decoder.c"
     $205 = $5; //@line 1762 "stream_decoder.c"
     $206 = ((($205)) + 8|0); //@line 1762 "stream_decoder.c"
     HEAP32[$206>>2] = $204; //@line 1762 "stream_decoder.c"
     break;
    }
   }
  }
 } while(0);
 $229 = $6; //@line 1774 "stream_decoder.c"
 $230 = ($229>>>0)>(0); //@line 1774 "stream_decoder.c"
 if ($230) {
  $231 = $5; //@line 1776 "stream_decoder.c"
  $232 = ((($231)) + 8|0); //@line 1776 "stream_decoder.c"
  $233 = HEAP32[$232>>2]|0; //@line 1776 "stream_decoder.c"
  $234 = ($233>>>0)<(1); //@line 1776 "stream_decoder.c"
  if ($234) {
   $235 = $5; //@line 1777 "stream_decoder.c"
   $236 = ((($235)) + 12|0); //@line 1777 "stream_decoder.c"
   $237 = HEAP32[$236>>2]|0; //@line 1777 "stream_decoder.c"
   _free($237); //@line 1777 "stream_decoder.c"
   $238 = $5; //@line 1778 "stream_decoder.c"
   $239 = ((($238)) + 12|0); //@line 1778 "stream_decoder.c"
   HEAP32[$239>>2] = 0; //@line 1778 "stream_decoder.c"
  }
  $240 = $4; //@line 1780 "stream_decoder.c"
  $241 = ((($240)) + 4|0); //@line 1780 "stream_decoder.c"
  $242 = HEAP32[$241>>2]|0; //@line 1780 "stream_decoder.c"
  $243 = ((($242)) + 56|0); //@line 1780 "stream_decoder.c"
  $244 = HEAP32[$243>>2]|0; //@line 1780 "stream_decoder.c"
  $245 = $6; //@line 1780 "stream_decoder.c"
  $246 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($244,$245)|0); //@line 1780 "stream_decoder.c"
  $247 = ($246|0)!=(0); //@line 1780 "stream_decoder.c"
  if (!($247)) {
   $3 = 0; //@line 1781 "stream_decoder.c"
   $248 = $3; //@line 1785 "stream_decoder.c"
   STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
  }
 }
 $3 = 1; //@line 1784 "stream_decoder.c"
 $248 = $3; //@line 1785 "stream_decoder.c"
 STACKTOP = sp;return ($248|0); //@line 1785 "stream_decoder.c"
}
function _read_metadata_cuesheet_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $10 = $4; //@line 1793 "stream_decoder.c"
 _memset(($10|0),0,160)|0; //@line 1793 "stream_decoder.c"
 $11 = $3; //@line 1796 "stream_decoder.c"
 $12 = ((($11)) + 4|0); //@line 1796 "stream_decoder.c"
 $13 = HEAP32[$12>>2]|0; //@line 1796 "stream_decoder.c"
 $14 = ((($13)) + 56|0); //@line 1796 "stream_decoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 1796 "stream_decoder.c"
 $16 = $4; //@line 1796 "stream_decoder.c"
 $17 = HEAP32[263]|0; //@line 1796 "stream_decoder.c"
 $18 = (($17>>>0) / 8)&-1; //@line 1796 "stream_decoder.c"
 $19 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($15,$16,$18)|0); //@line 1796 "stream_decoder.c"
 $20 = ($19|0)!=(0); //@line 1796 "stream_decoder.c"
 if (!($20)) {
  $2 = 0; //@line 1797 "stream_decoder.c"
  $230 = $2; //@line 1868 "stream_decoder.c"
  STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
 }
 $21 = $3; //@line 1799 "stream_decoder.c"
 $22 = ((($21)) + 4|0); //@line 1799 "stream_decoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 1799 "stream_decoder.c"
 $24 = ((($23)) + 56|0); //@line 1799 "stream_decoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 1799 "stream_decoder.c"
 $26 = $4; //@line 1799 "stream_decoder.c"
 $27 = ((($26)) + 136|0); //@line 1799 "stream_decoder.c"
 $28 = HEAP32[280]|0; //@line 1799 "stream_decoder.c"
 $29 = (_FLAC__bitreader_read_raw_uint64($25,$27,$28)|0); //@line 1799 "stream_decoder.c"
 $30 = ($29|0)!=(0); //@line 1799 "stream_decoder.c"
 if (!($30)) {
  $2 = 0; //@line 1800 "stream_decoder.c"
  $230 = $2; //@line 1868 "stream_decoder.c"
  STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
 }
 $31 = $3; //@line 1802 "stream_decoder.c"
 $32 = ((($31)) + 4|0); //@line 1802 "stream_decoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 1802 "stream_decoder.c"
 $34 = ((($33)) + 56|0); //@line 1802 "stream_decoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 1802 "stream_decoder.c"
 $36 = HEAP32[277]|0; //@line 1802 "stream_decoder.c"
 $37 = (_FLAC__bitreader_read_raw_uint32($35,$7,$36)|0); //@line 1802 "stream_decoder.c"
 $38 = ($37|0)!=(0); //@line 1802 "stream_decoder.c"
 if (!($38)) {
  $2 = 0; //@line 1803 "stream_decoder.c"
  $230 = $2; //@line 1868 "stream_decoder.c"
  STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
 }
 $39 = HEAP32[$7>>2]|0; //@line 1804 "stream_decoder.c"
 $40 = ($39|0)!=(0); //@line 1804 "stream_decoder.c"
 $41 = $40 ? 1 : 0; //@line 1804 "stream_decoder.c"
 $42 = $4; //@line 1804 "stream_decoder.c"
 $43 = ((($42)) + 144|0); //@line 1804 "stream_decoder.c"
 HEAP32[$43>>2] = $41; //@line 1804 "stream_decoder.c"
 $44 = $3; //@line 1806 "stream_decoder.c"
 $45 = ((($44)) + 4|0); //@line 1806 "stream_decoder.c"
 $46 = HEAP32[$45>>2]|0; //@line 1806 "stream_decoder.c"
 $47 = ((($46)) + 56|0); //@line 1806 "stream_decoder.c"
 $48 = HEAP32[$47>>2]|0; //@line 1806 "stream_decoder.c"
 $49 = HEAP32[264]|0; //@line 1806 "stream_decoder.c"
 $50 = (_FLAC__bitreader_skip_bits_no_crc($48,$49)|0); //@line 1806 "stream_decoder.c"
 $51 = ($50|0)!=(0); //@line 1806 "stream_decoder.c"
 if (!($51)) {
  $2 = 0; //@line 1807 "stream_decoder.c"
  $230 = $2; //@line 1868 "stream_decoder.c"
  STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
 }
 $52 = $3; //@line 1809 "stream_decoder.c"
 $53 = ((($52)) + 4|0); //@line 1809 "stream_decoder.c"
 $54 = HEAP32[$53>>2]|0; //@line 1809 "stream_decoder.c"
 $55 = ((($54)) + 56|0); //@line 1809 "stream_decoder.c"
 $56 = HEAP32[$55>>2]|0; //@line 1809 "stream_decoder.c"
 $57 = HEAP32[271]|0; //@line 1809 "stream_decoder.c"
 $58 = (_FLAC__bitreader_read_raw_uint32($56,$7,$57)|0); //@line 1809 "stream_decoder.c"
 $59 = ($58|0)!=(0); //@line 1809 "stream_decoder.c"
 if (!($59)) {
  $2 = 0; //@line 1810 "stream_decoder.c"
  $230 = $2; //@line 1868 "stream_decoder.c"
  STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
 }
 $60 = HEAP32[$7>>2]|0; //@line 1811 "stream_decoder.c"
 $61 = $4; //@line 1811 "stream_decoder.c"
 $62 = ((($61)) + 148|0); //@line 1811 "stream_decoder.c"
 HEAP32[$62>>2] = $60; //@line 1811 "stream_decoder.c"
 $63 = $4; //@line 1813 "stream_decoder.c"
 $64 = ((($63)) + 148|0); //@line 1813 "stream_decoder.c"
 $65 = HEAP32[$64>>2]|0; //@line 1813 "stream_decoder.c"
 $66 = ($65>>>0)>(0); //@line 1813 "stream_decoder.c"
 L21: do {
  if ($66) {
   $67 = $4; //@line 1814 "stream_decoder.c"
   $68 = ((($67)) + 148|0); //@line 1814 "stream_decoder.c"
   $69 = HEAP32[$68>>2]|0; //@line 1814 "stream_decoder.c"
   $70 = (_safe_calloc__177($69,32)|0); //@line 1814 "stream_decoder.c"
   $71 = $4; //@line 1814 "stream_decoder.c"
   $72 = ((($71)) + 152|0); //@line 1814 "stream_decoder.c"
   HEAP32[$72>>2] = $70; //@line 1814 "stream_decoder.c"
   $73 = (0|0)==($70|0); //@line 1814 "stream_decoder.c"
   if ($73) {
    $74 = $3; //@line 1815 "stream_decoder.c"
    $75 = HEAP32[$74>>2]|0; //@line 1815 "stream_decoder.c"
    HEAP32[$75>>2] = 8; //@line 1815 "stream_decoder.c"
    $2 = 0; //@line 1816 "stream_decoder.c"
    $230 = $2; //@line 1868 "stream_decoder.c"
    STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
   }
   $5 = 0; //@line 1818 "stream_decoder.c"
   L27: while(1) {
    $76 = $5; //@line 1818 "stream_decoder.c"
    $77 = $4; //@line 1818 "stream_decoder.c"
    $78 = ((($77)) + 148|0); //@line 1818 "stream_decoder.c"
    $79 = HEAP32[$78>>2]|0; //@line 1818 "stream_decoder.c"
    $80 = ($76>>>0)<($79>>>0); //@line 1818 "stream_decoder.c"
    if (!($80)) {
     break L21;
    }
    $81 = $4; //@line 1819 "stream_decoder.c"
    $82 = ((($81)) + 152|0); //@line 1819 "stream_decoder.c"
    $83 = HEAP32[$82>>2]|0; //@line 1819 "stream_decoder.c"
    $84 = $5; //@line 1819 "stream_decoder.c"
    $85 = (($83) + ($84<<5)|0); //@line 1819 "stream_decoder.c"
    $8 = $85; //@line 1819 "stream_decoder.c"
    $86 = $3; //@line 1820 "stream_decoder.c"
    $87 = ((($86)) + 4|0); //@line 1820 "stream_decoder.c"
    $88 = HEAP32[$87>>2]|0; //@line 1820 "stream_decoder.c"
    $89 = ((($88)) + 56|0); //@line 1820 "stream_decoder.c"
    $90 = HEAP32[$89>>2]|0; //@line 1820 "stream_decoder.c"
    $91 = $8; //@line 1820 "stream_decoder.c"
    $92 = HEAP32[280]|0; //@line 1820 "stream_decoder.c"
    $93 = (_FLAC__bitreader_read_raw_uint64($90,$91,$92)|0); //@line 1820 "stream_decoder.c"
    $94 = ($93|0)!=(0); //@line 1820 "stream_decoder.c"
    if (!($94)) {
     label = 17;
     break;
    }
    $95 = $3; //@line 1823 "stream_decoder.c"
    $96 = ((($95)) + 4|0); //@line 1823 "stream_decoder.c"
    $97 = HEAP32[$96>>2]|0; //@line 1823 "stream_decoder.c"
    $98 = ((($97)) + 56|0); //@line 1823 "stream_decoder.c"
    $99 = HEAP32[$98>>2]|0; //@line 1823 "stream_decoder.c"
    $100 = HEAP32[271]|0; //@line 1823 "stream_decoder.c"
    $101 = (_FLAC__bitreader_read_raw_uint32($99,$7,$100)|0); //@line 1823 "stream_decoder.c"
    $102 = ($101|0)!=(0); //@line 1823 "stream_decoder.c"
    if (!($102)) {
     label = 19;
     break;
    }
    $103 = HEAP32[$7>>2]|0; //@line 1825 "stream_decoder.c"
    $104 = $103&255; //@line 1825 "stream_decoder.c"
    $105 = $8; //@line 1825 "stream_decoder.c"
    $106 = ((($105)) + 8|0); //@line 1825 "stream_decoder.c"
    HEAP8[$106>>0] = $104; //@line 1825 "stream_decoder.c"
    $107 = $3; //@line 1828 "stream_decoder.c"
    $108 = ((($107)) + 4|0); //@line 1828 "stream_decoder.c"
    $109 = HEAP32[$108>>2]|0; //@line 1828 "stream_decoder.c"
    $110 = ((($109)) + 56|0); //@line 1828 "stream_decoder.c"
    $111 = HEAP32[$110>>2]|0; //@line 1828 "stream_decoder.c"
    $112 = $8; //@line 1828 "stream_decoder.c"
    $113 = ((($112)) + 9|0); //@line 1828 "stream_decoder.c"
    $114 = HEAP32[261]|0; //@line 1828 "stream_decoder.c"
    $115 = (($114>>>0) / 8)&-1; //@line 1828 "stream_decoder.c"
    $116 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($111,$113,$115)|0); //@line 1828 "stream_decoder.c"
    $117 = ($116|0)!=(0); //@line 1828 "stream_decoder.c"
    if (!($117)) {
     label = 21;
     break;
    }
    $118 = $3; //@line 1831 "stream_decoder.c"
    $119 = ((($118)) + 4|0); //@line 1831 "stream_decoder.c"
    $120 = HEAP32[$119>>2]|0; //@line 1831 "stream_decoder.c"
    $121 = ((($120)) + 56|0); //@line 1831 "stream_decoder.c"
    $122 = HEAP32[$121>>2]|0; //@line 1831 "stream_decoder.c"
    $123 = HEAP32[277]|0; //@line 1831 "stream_decoder.c"
    $124 = (_FLAC__bitreader_read_raw_uint32($122,$7,$123)|0); //@line 1831 "stream_decoder.c"
    $125 = ($124|0)!=(0); //@line 1831 "stream_decoder.c"
    if (!($125)) {
     label = 23;
     break;
    }
    $126 = HEAP32[$7>>2]|0; //@line 1833 "stream_decoder.c"
    $127 = $8; //@line 1833 "stream_decoder.c"
    $128 = ((($127)) + 22|0); //@line 1833 "stream_decoder.c"
    $129 = $126&255; //@line 1833 "stream_decoder.c"
    $130 = HEAP8[$128>>0]|0; //@line 1833 "stream_decoder.c"
    $131 = $129 & 1; //@line 1833 "stream_decoder.c"
    $132 = $130 & -2; //@line 1833 "stream_decoder.c"
    $133 = $132 | $131; //@line 1833 "stream_decoder.c"
    HEAP8[$128>>0] = $133; //@line 1833 "stream_decoder.c"
    $134 = $3; //@line 1835 "stream_decoder.c"
    $135 = ((($134)) + 4|0); //@line 1835 "stream_decoder.c"
    $136 = HEAP32[$135>>2]|0; //@line 1835 "stream_decoder.c"
    $137 = ((($136)) + 56|0); //@line 1835 "stream_decoder.c"
    $138 = HEAP32[$137>>2]|0; //@line 1835 "stream_decoder.c"
    $139 = HEAP32[277]|0; //@line 1835 "stream_decoder.c"
    $140 = (_FLAC__bitreader_read_raw_uint32($138,$7,$139)|0); //@line 1835 "stream_decoder.c"
    $141 = ($140|0)!=(0); //@line 1835 "stream_decoder.c"
    if (!($141)) {
     label = 25;
     break;
    }
    $142 = HEAP32[$7>>2]|0; //@line 1837 "stream_decoder.c"
    $143 = $8; //@line 1837 "stream_decoder.c"
    $144 = ((($143)) + 22|0); //@line 1837 "stream_decoder.c"
    $145 = $142&255; //@line 1837 "stream_decoder.c"
    $146 = HEAP8[$144>>0]|0; //@line 1837 "stream_decoder.c"
    $147 = $145 & 1; //@line 1837 "stream_decoder.c"
    $148 = ($147 << 1)&255; //@line 1837 "stream_decoder.c"
    $149 = $146 & -3; //@line 1837 "stream_decoder.c"
    $150 = $149 | $148; //@line 1837 "stream_decoder.c"
    HEAP8[$144>>0] = $150; //@line 1837 "stream_decoder.c"
    $151 = $3; //@line 1839 "stream_decoder.c"
    $152 = ((($151)) + 4|0); //@line 1839 "stream_decoder.c"
    $153 = HEAP32[$152>>2]|0; //@line 1839 "stream_decoder.c"
    $154 = ((($153)) + 56|0); //@line 1839 "stream_decoder.c"
    $155 = HEAP32[$154>>2]|0; //@line 1839 "stream_decoder.c"
    $156 = HEAP32[262]|0; //@line 1839 "stream_decoder.c"
    $157 = (_FLAC__bitreader_skip_bits_no_crc($155,$156)|0); //@line 1839 "stream_decoder.c"
    $158 = ($157|0)!=(0); //@line 1839 "stream_decoder.c"
    if (!($158)) {
     label = 27;
     break;
    }
    $159 = $3; //@line 1842 "stream_decoder.c"
    $160 = ((($159)) + 4|0); //@line 1842 "stream_decoder.c"
    $161 = HEAP32[$160>>2]|0; //@line 1842 "stream_decoder.c"
    $162 = ((($161)) + 56|0); //@line 1842 "stream_decoder.c"
    $163 = HEAP32[$162>>2]|0; //@line 1842 "stream_decoder.c"
    $164 = HEAP32[271]|0; //@line 1842 "stream_decoder.c"
    $165 = (_FLAC__bitreader_read_raw_uint32($163,$7,$164)|0); //@line 1842 "stream_decoder.c"
    $166 = ($165|0)!=(0); //@line 1842 "stream_decoder.c"
    if (!($166)) {
     label = 29;
     break;
    }
    $167 = HEAP32[$7>>2]|0; //@line 1844 "stream_decoder.c"
    $168 = $167&255; //@line 1844 "stream_decoder.c"
    $169 = $8; //@line 1844 "stream_decoder.c"
    $170 = ((($169)) + 23|0); //@line 1844 "stream_decoder.c"
    HEAP8[$170>>0] = $168; //@line 1844 "stream_decoder.c"
    $171 = $8; //@line 1846 "stream_decoder.c"
    $172 = ((($171)) + 23|0); //@line 1846 "stream_decoder.c"
    $173 = HEAP8[$172>>0]|0; //@line 1846 "stream_decoder.c"
    $174 = $173&255; //@line 1846 "stream_decoder.c"
    $175 = ($174|0)>(0); //@line 1846 "stream_decoder.c"
    L37: do {
     if ($175) {
      $176 = $8; //@line 1847 "stream_decoder.c"
      $177 = ((($176)) + 23|0); //@line 1847 "stream_decoder.c"
      $178 = HEAP8[$177>>0]|0; //@line 1847 "stream_decoder.c"
      $179 = $178&255; //@line 1847 "stream_decoder.c"
      $180 = (_safe_calloc__177($179,16)|0); //@line 1847 "stream_decoder.c"
      $181 = $8; //@line 1847 "stream_decoder.c"
      $182 = ((($181)) + 24|0); //@line 1847 "stream_decoder.c"
      HEAP32[$182>>2] = $180; //@line 1847 "stream_decoder.c"
      $183 = (0|0)==($180|0); //@line 1847 "stream_decoder.c"
      if ($183) {
       label = 32;
       break L27;
      }
      $6 = 0; //@line 1851 "stream_decoder.c"
      while(1) {
       $186 = $6; //@line 1851 "stream_decoder.c"
       $187 = $8; //@line 1851 "stream_decoder.c"
       $188 = ((($187)) + 23|0); //@line 1851 "stream_decoder.c"
       $189 = HEAP8[$188>>0]|0; //@line 1851 "stream_decoder.c"
       $190 = $189&255; //@line 1851 "stream_decoder.c"
       $191 = ($186>>>0)<($190>>>0); //@line 1851 "stream_decoder.c"
       if (!($191)) {
        break L37;
       }
       $192 = $8; //@line 1852 "stream_decoder.c"
       $193 = ((($192)) + 24|0); //@line 1852 "stream_decoder.c"
       $194 = HEAP32[$193>>2]|0; //@line 1852 "stream_decoder.c"
       $195 = $6; //@line 1852 "stream_decoder.c"
       $196 = (($194) + ($195<<4)|0); //@line 1852 "stream_decoder.c"
       $9 = $196; //@line 1852 "stream_decoder.c"
       $197 = $3; //@line 1853 "stream_decoder.c"
       $198 = ((($197)) + 4|0); //@line 1853 "stream_decoder.c"
       $199 = HEAP32[$198>>2]|0; //@line 1853 "stream_decoder.c"
       $200 = ((($199)) + 56|0); //@line 1853 "stream_decoder.c"
       $201 = HEAP32[$200>>2]|0; //@line 1853 "stream_decoder.c"
       $202 = $9; //@line 1853 "stream_decoder.c"
       $203 = HEAP32[280]|0; //@line 1853 "stream_decoder.c"
       $204 = (_FLAC__bitreader_read_raw_uint64($201,$202,$203)|0); //@line 1853 "stream_decoder.c"
       $205 = ($204|0)!=(0); //@line 1853 "stream_decoder.c"
       if (!($205)) {
        label = 36;
        break L27;
       }
       $206 = $3; //@line 1856 "stream_decoder.c"
       $207 = ((($206)) + 4|0); //@line 1856 "stream_decoder.c"
       $208 = HEAP32[$207>>2]|0; //@line 1856 "stream_decoder.c"
       $209 = ((($208)) + 56|0); //@line 1856 "stream_decoder.c"
       $210 = HEAP32[$209>>2]|0; //@line 1856 "stream_decoder.c"
       $211 = HEAP32[271]|0; //@line 1856 "stream_decoder.c"
       $212 = (_FLAC__bitreader_read_raw_uint32($210,$7,$211)|0); //@line 1856 "stream_decoder.c"
       $213 = ($212|0)!=(0); //@line 1856 "stream_decoder.c"
       if (!($213)) {
        label = 38;
        break L27;
       }
       $214 = HEAP32[$7>>2]|0; //@line 1858 "stream_decoder.c"
       $215 = $214&255; //@line 1858 "stream_decoder.c"
       $216 = $9; //@line 1858 "stream_decoder.c"
       $217 = ((($216)) + 8|0); //@line 1858 "stream_decoder.c"
       HEAP8[$217>>0] = $215; //@line 1858 "stream_decoder.c"
       $218 = $3; //@line 1860 "stream_decoder.c"
       $219 = ((($218)) + 4|0); //@line 1860 "stream_decoder.c"
       $220 = HEAP32[$219>>2]|0; //@line 1860 "stream_decoder.c"
       $221 = ((($220)) + 56|0); //@line 1860 "stream_decoder.c"
       $222 = HEAP32[$221>>2]|0; //@line 1860 "stream_decoder.c"
       $223 = HEAP32[267]|0; //@line 1860 "stream_decoder.c"
       $224 = (_FLAC__bitreader_skip_bits_no_crc($222,$223)|0); //@line 1860 "stream_decoder.c"
       $225 = ($224|0)!=(0); //@line 1860 "stream_decoder.c"
       if (!($225)) {
        label = 40;
        break L27;
       }
       $226 = $6; //@line 1851 "stream_decoder.c"
       $227 = (($226) + 1)|0; //@line 1851 "stream_decoder.c"
       $6 = $227; //@line 1851 "stream_decoder.c"
      }
     }
    } while(0);
    $228 = $5; //@line 1818 "stream_decoder.c"
    $229 = (($228) + 1)|0; //@line 1818 "stream_decoder.c"
    $5 = $229; //@line 1818 "stream_decoder.c"
   }
   switch (label|0) {
    case 17: {
     $2 = 0; //@line 1821 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 19: {
     $2 = 0; //@line 1824 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 21: {
     $2 = 0; //@line 1829 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 23: {
     $2 = 0; //@line 1832 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 25: {
     $2 = 0; //@line 1836 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 27: {
     $2 = 0; //@line 1840 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 29: {
     $2 = 0; //@line 1843 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 32: {
     $184 = $3; //@line 1848 "stream_decoder.c"
     $185 = HEAP32[$184>>2]|0; //@line 1848 "stream_decoder.c"
     HEAP32[$185>>2] = 8; //@line 1848 "stream_decoder.c"
     $2 = 0; //@line 1849 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 36: {
     $2 = 0; //@line 1854 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 38: {
     $2 = 0; //@line 1857 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
    case 40: {
     $2 = 0; //@line 1861 "stream_decoder.c"
     $230 = $2; //@line 1868 "stream_decoder.c"
     STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
     break;
    }
   }
  }
 } while(0);
 $2 = 1; //@line 1867 "stream_decoder.c"
 $230 = $2; //@line 1868 "stream_decoder.c"
 STACKTOP = sp;return ($230|0); //@line 1868 "stream_decoder.c"
}
function _read_metadata_picture_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3; //@line 1877 "stream_decoder.c"
 $7 = ((($6)) + 4|0); //@line 1877 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 1877 "stream_decoder.c"
 $9 = ((($8)) + 56|0); //@line 1877 "stream_decoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 1877 "stream_decoder.c"
 $11 = HEAP32[265]|0; //@line 1877 "stream_decoder.c"
 $12 = (_FLAC__bitreader_read_raw_uint32($10,$5,$11)|0); //@line 1877 "stream_decoder.c"
 $13 = ($12|0)!=(0); //@line 1877 "stream_decoder.c"
 if (!($13)) {
  $2 = 0; //@line 1878 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $14 = HEAP32[$5>>2]|0; //@line 1879 "stream_decoder.c"
 $15 = $4; //@line 1879 "stream_decoder.c"
 HEAP32[$15>>2] = $14; //@line 1879 "stream_decoder.c"
 $16 = $3; //@line 1882 "stream_decoder.c"
 $17 = ((($16)) + 4|0); //@line 1882 "stream_decoder.c"
 $18 = HEAP32[$17>>2]|0; //@line 1882 "stream_decoder.c"
 $19 = ((($18)) + 56|0); //@line 1882 "stream_decoder.c"
 $20 = HEAP32[$19>>2]|0; //@line 1882 "stream_decoder.c"
 $21 = HEAP32[265]|0; //@line 1882 "stream_decoder.c"
 $22 = (_FLAC__bitreader_read_raw_uint32($20,$5,$21)|0); //@line 1882 "stream_decoder.c"
 $23 = ($22|0)!=(0); //@line 1882 "stream_decoder.c"
 if (!($23)) {
  $2 = 0; //@line 1883 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $24 = HEAP32[$5>>2]|0; //@line 1884 "stream_decoder.c"
 $25 = (_safe_malloc_add_2op__175($24,1)|0); //@line 1884 "stream_decoder.c"
 $26 = $4; //@line 1884 "stream_decoder.c"
 $27 = ((($26)) + 4|0); //@line 1884 "stream_decoder.c"
 HEAP32[$27>>2] = $25; //@line 1884 "stream_decoder.c"
 $28 = (0|0)==($25|0); //@line 1884 "stream_decoder.c"
 if ($28) {
  $29 = $3; //@line 1885 "stream_decoder.c"
  $30 = HEAP32[$29>>2]|0; //@line 1885 "stream_decoder.c"
  HEAP32[$30>>2] = 8; //@line 1885 "stream_decoder.c"
  $2 = 0; //@line 1886 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $31 = HEAP32[$5>>2]|0; //@line 1888 "stream_decoder.c"
 $32 = ($31>>>0)>(0); //@line 1888 "stream_decoder.c"
 if ($32) {
  $33 = $3; //@line 1889 "stream_decoder.c"
  $34 = ((($33)) + 4|0); //@line 1889 "stream_decoder.c"
  $35 = HEAP32[$34>>2]|0; //@line 1889 "stream_decoder.c"
  $36 = ((($35)) + 56|0); //@line 1889 "stream_decoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 1889 "stream_decoder.c"
  $38 = $4; //@line 1889 "stream_decoder.c"
  $39 = ((($38)) + 4|0); //@line 1889 "stream_decoder.c"
  $40 = HEAP32[$39>>2]|0; //@line 1889 "stream_decoder.c"
  $41 = HEAP32[$5>>2]|0; //@line 1889 "stream_decoder.c"
  $42 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($37,$40,$41)|0); //@line 1889 "stream_decoder.c"
  $43 = ($42|0)!=(0); //@line 1889 "stream_decoder.c"
  if (!($43)) {
   $2 = 0; //@line 1890 "stream_decoder.c"
   $158 = $2; //@line 1936 "stream_decoder.c"
   STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
  }
 }
 $44 = $4; //@line 1892 "stream_decoder.c"
 $45 = ((($44)) + 4|0); //@line 1892 "stream_decoder.c"
 $46 = HEAP32[$45>>2]|0; //@line 1892 "stream_decoder.c"
 $47 = HEAP32[$5>>2]|0; //@line 1892 "stream_decoder.c"
 $48 = (($46) + ($47)|0); //@line 1892 "stream_decoder.c"
 HEAP8[$48>>0] = 0; //@line 1892 "stream_decoder.c"
 $49 = $3; //@line 1895 "stream_decoder.c"
 $50 = ((($49)) + 4|0); //@line 1895 "stream_decoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 1895 "stream_decoder.c"
 $52 = ((($51)) + 56|0); //@line 1895 "stream_decoder.c"
 $53 = HEAP32[$52>>2]|0; //@line 1895 "stream_decoder.c"
 $54 = HEAP32[265]|0; //@line 1895 "stream_decoder.c"
 $55 = (_FLAC__bitreader_read_raw_uint32($53,$5,$54)|0); //@line 1895 "stream_decoder.c"
 $56 = ($55|0)!=(0); //@line 1895 "stream_decoder.c"
 if (!($56)) {
  $2 = 0; //@line 1896 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $57 = HEAP32[$5>>2]|0; //@line 1897 "stream_decoder.c"
 $58 = (_safe_malloc_add_2op__175($57,1)|0); //@line 1897 "stream_decoder.c"
 $59 = $4; //@line 1897 "stream_decoder.c"
 $60 = ((($59)) + 8|0); //@line 1897 "stream_decoder.c"
 HEAP32[$60>>2] = $58; //@line 1897 "stream_decoder.c"
 $61 = (0|0)==($58|0); //@line 1897 "stream_decoder.c"
 if ($61) {
  $62 = $3; //@line 1898 "stream_decoder.c"
  $63 = HEAP32[$62>>2]|0; //@line 1898 "stream_decoder.c"
  HEAP32[$63>>2] = 8; //@line 1898 "stream_decoder.c"
  $2 = 0; //@line 1899 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $64 = HEAP32[$5>>2]|0; //@line 1901 "stream_decoder.c"
 $65 = ($64>>>0)>(0); //@line 1901 "stream_decoder.c"
 if ($65) {
  $66 = $3; //@line 1902 "stream_decoder.c"
  $67 = ((($66)) + 4|0); //@line 1902 "stream_decoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 1902 "stream_decoder.c"
  $69 = ((($68)) + 56|0); //@line 1902 "stream_decoder.c"
  $70 = HEAP32[$69>>2]|0; //@line 1902 "stream_decoder.c"
  $71 = $4; //@line 1902 "stream_decoder.c"
  $72 = ((($71)) + 8|0); //@line 1902 "stream_decoder.c"
  $73 = HEAP32[$72>>2]|0; //@line 1902 "stream_decoder.c"
  $74 = HEAP32[$5>>2]|0; //@line 1902 "stream_decoder.c"
  $75 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($70,$73,$74)|0); //@line 1902 "stream_decoder.c"
  $76 = ($75|0)!=(0); //@line 1902 "stream_decoder.c"
  if (!($76)) {
   $2 = 0; //@line 1903 "stream_decoder.c"
   $158 = $2; //@line 1936 "stream_decoder.c"
   STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
  }
 }
 $77 = $4; //@line 1905 "stream_decoder.c"
 $78 = ((($77)) + 8|0); //@line 1905 "stream_decoder.c"
 $79 = HEAP32[$78>>2]|0; //@line 1905 "stream_decoder.c"
 $80 = HEAP32[$5>>2]|0; //@line 1905 "stream_decoder.c"
 $81 = (($79) + ($80)|0); //@line 1905 "stream_decoder.c"
 HEAP8[$81>>0] = 0; //@line 1905 "stream_decoder.c"
 $82 = $3; //@line 1908 "stream_decoder.c"
 $83 = ((($82)) + 4|0); //@line 1908 "stream_decoder.c"
 $84 = HEAP32[$83>>2]|0; //@line 1908 "stream_decoder.c"
 $85 = ((($84)) + 56|0); //@line 1908 "stream_decoder.c"
 $86 = HEAP32[$85>>2]|0; //@line 1908 "stream_decoder.c"
 $87 = $4; //@line 1908 "stream_decoder.c"
 $88 = ((($87)) + 12|0); //@line 1908 "stream_decoder.c"
 $89 = HEAP32[265]|0; //@line 1908 "stream_decoder.c"
 $90 = (_FLAC__bitreader_read_raw_uint32($86,$88,$89)|0); //@line 1908 "stream_decoder.c"
 $91 = ($90|0)!=(0); //@line 1908 "stream_decoder.c"
 if (!($91)) {
  $2 = 0; //@line 1909 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $92 = $3; //@line 1912 "stream_decoder.c"
 $93 = ((($92)) + 4|0); //@line 1912 "stream_decoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 1912 "stream_decoder.c"
 $95 = ((($94)) + 56|0); //@line 1912 "stream_decoder.c"
 $96 = HEAP32[$95>>2]|0; //@line 1912 "stream_decoder.c"
 $97 = $4; //@line 1912 "stream_decoder.c"
 $98 = ((($97)) + 16|0); //@line 1912 "stream_decoder.c"
 $99 = HEAP32[265]|0; //@line 1912 "stream_decoder.c"
 $100 = (_FLAC__bitreader_read_raw_uint32($96,$98,$99)|0); //@line 1912 "stream_decoder.c"
 $101 = ($100|0)!=(0); //@line 1912 "stream_decoder.c"
 if (!($101)) {
  $2 = 0; //@line 1913 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $102 = $3; //@line 1916 "stream_decoder.c"
 $103 = ((($102)) + 4|0); //@line 1916 "stream_decoder.c"
 $104 = HEAP32[$103>>2]|0; //@line 1916 "stream_decoder.c"
 $105 = ((($104)) + 56|0); //@line 1916 "stream_decoder.c"
 $106 = HEAP32[$105>>2]|0; //@line 1916 "stream_decoder.c"
 $107 = $4; //@line 1916 "stream_decoder.c"
 $108 = ((($107)) + 20|0); //@line 1916 "stream_decoder.c"
 $109 = HEAP32[265]|0; //@line 1916 "stream_decoder.c"
 $110 = (_FLAC__bitreader_read_raw_uint32($106,$108,$109)|0); //@line 1916 "stream_decoder.c"
 $111 = ($110|0)!=(0); //@line 1916 "stream_decoder.c"
 if (!($111)) {
  $2 = 0; //@line 1917 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $112 = $3; //@line 1920 "stream_decoder.c"
 $113 = ((($112)) + 4|0); //@line 1920 "stream_decoder.c"
 $114 = HEAP32[$113>>2]|0; //@line 1920 "stream_decoder.c"
 $115 = ((($114)) + 56|0); //@line 1920 "stream_decoder.c"
 $116 = HEAP32[$115>>2]|0; //@line 1920 "stream_decoder.c"
 $117 = $4; //@line 1920 "stream_decoder.c"
 $118 = ((($117)) + 24|0); //@line 1920 "stream_decoder.c"
 $119 = HEAP32[265]|0; //@line 1920 "stream_decoder.c"
 $120 = (_FLAC__bitreader_read_raw_uint32($116,$118,$119)|0); //@line 1920 "stream_decoder.c"
 $121 = ($120|0)!=(0); //@line 1920 "stream_decoder.c"
 if (!($121)) {
  $2 = 0; //@line 1921 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $122 = $3; //@line 1924 "stream_decoder.c"
 $123 = ((($122)) + 4|0); //@line 1924 "stream_decoder.c"
 $124 = HEAP32[$123>>2]|0; //@line 1924 "stream_decoder.c"
 $125 = ((($124)) + 56|0); //@line 1924 "stream_decoder.c"
 $126 = HEAP32[$125>>2]|0; //@line 1924 "stream_decoder.c"
 $127 = $4; //@line 1924 "stream_decoder.c"
 $128 = ((($127)) + 28|0); //@line 1924 "stream_decoder.c"
 $129 = HEAP32[265]|0; //@line 1924 "stream_decoder.c"
 $130 = (_FLAC__bitreader_read_raw_uint32($126,$128,$129)|0); //@line 1924 "stream_decoder.c"
 $131 = ($130|0)!=(0); //@line 1924 "stream_decoder.c"
 if (!($131)) {
  $2 = 0; //@line 1925 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $132 = $4; //@line 1926 "stream_decoder.c"
 $133 = ((($132)) + 28|0); //@line 1926 "stream_decoder.c"
 $134 = HEAP32[$133>>2]|0; //@line 1926 "stream_decoder.c"
 $135 = (_safe_malloc__176($134)|0); //@line 1926 "stream_decoder.c"
 $136 = $4; //@line 1926 "stream_decoder.c"
 $137 = ((($136)) + 32|0); //@line 1926 "stream_decoder.c"
 HEAP32[$137>>2] = $135; //@line 1926 "stream_decoder.c"
 $138 = (0|0)==($135|0); //@line 1926 "stream_decoder.c"
 if ($138) {
  $139 = $3; //@line 1927 "stream_decoder.c"
  $140 = HEAP32[$139>>2]|0; //@line 1927 "stream_decoder.c"
  HEAP32[$140>>2] = 8; //@line 1927 "stream_decoder.c"
  $2 = 0; //@line 1928 "stream_decoder.c"
  $158 = $2; //@line 1936 "stream_decoder.c"
  STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
 }
 $141 = $4; //@line 1930 "stream_decoder.c"
 $142 = ((($141)) + 28|0); //@line 1930 "stream_decoder.c"
 $143 = HEAP32[$142>>2]|0; //@line 1930 "stream_decoder.c"
 $144 = ($143>>>0)>(0); //@line 1930 "stream_decoder.c"
 if ($144) {
  $145 = $3; //@line 1931 "stream_decoder.c"
  $146 = ((($145)) + 4|0); //@line 1931 "stream_decoder.c"
  $147 = HEAP32[$146>>2]|0; //@line 1931 "stream_decoder.c"
  $148 = ((($147)) + 56|0); //@line 1931 "stream_decoder.c"
  $149 = HEAP32[$148>>2]|0; //@line 1931 "stream_decoder.c"
  $150 = $4; //@line 1931 "stream_decoder.c"
  $151 = ((($150)) + 32|0); //@line 1931 "stream_decoder.c"
  $152 = HEAP32[$151>>2]|0; //@line 1931 "stream_decoder.c"
  $153 = $4; //@line 1931 "stream_decoder.c"
  $154 = ((($153)) + 28|0); //@line 1931 "stream_decoder.c"
  $155 = HEAP32[$154>>2]|0; //@line 1931 "stream_decoder.c"
  $156 = (_FLAC__bitreader_read_byte_block_aligned_no_crc($149,$152,$155)|0); //@line 1931 "stream_decoder.c"
  $157 = ($156|0)!=(0); //@line 1931 "stream_decoder.c"
  if (!($157)) {
   $2 = 0; //@line 1932 "stream_decoder.c"
   $158 = $2; //@line 1936 "stream_decoder.c"
   STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
  }
 }
 $2 = 1; //@line 1935 "stream_decoder.c"
 $158 = $2; //@line 1936 "stream_decoder.c"
 STACKTOP = sp;return ($158|0); //@line 1936 "stream_decoder.c"
}
function _safe_malloc_add_2op__175($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 88 "../../include\share/alloc.h"
 $6 = $4; //@line 88 "../../include\share/alloc.h"
 $7 = (($6) + ($5))|0; //@line 88 "../../include\share/alloc.h"
 $4 = $7; //@line 88 "../../include\share/alloc.h"
 $8 = $4; //@line 89 "../../include\share/alloc.h"
 $9 = $3; //@line 89 "../../include\share/alloc.h"
 $10 = ($8>>>0)<($9>>>0); //@line 89 "../../include\share/alloc.h"
 if ($10) {
  $2 = 0; //@line 90 "../../include\share/alloc.h"
  $13 = $2; //@line 92 "../../include\share/alloc.h"
  STACKTOP = sp;return ($13|0); //@line 92 "../../include\share/alloc.h"
 } else {
  $11 = $4; //@line 91 "../../include\share/alloc.h"
  $12 = (_safe_malloc__176($11)|0); //@line 91 "../../include\share/alloc.h"
  $2 = $12; //@line 91 "../../include\share/alloc.h"
  $13 = $2; //@line 92 "../../include\share/alloc.h"
  STACKTOP = sp;return ($13|0); //@line 92 "../../include\share/alloc.h"
 }
 return (0)|0;
}
function _safe_malloc__176($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 72 "../../include\share/alloc.h"
 $3 = ($2|0)!=(0); //@line 72 "../../include\share/alloc.h"
 if (!($3)) {
  $4 = $1; //@line 73 "../../include\share/alloc.h"
  $5 = (($4) + 1)|0; //@line 73 "../../include\share/alloc.h"
  $1 = $5; //@line 73 "../../include\share/alloc.h"
 }
 $6 = $1; //@line 74 "../../include\share/alloc.h"
 $7 = (_malloc($6)|0); //@line 74 "../../include\share/alloc.h"
 STACKTOP = sp;return ($7|0); //@line 74 "../../include\share/alloc.h"
}
function _safe_calloc__177($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 79 "../../include\share/alloc.h"
 $6 = ($5|0)!=(0); //@line 79 "../../include\share/alloc.h"
 $7 = $4; //@line 79 "../../include\share/alloc.h"
 $8 = ($7|0)!=(0); //@line 79 "../../include\share/alloc.h"
 $or$cond = $6 & $8; //@line 79 "../../include\share/alloc.h"
 if ($or$cond) {
  $10 = $3; //@line 81 "../../include\share/alloc.h"
  $11 = $4; //@line 81 "../../include\share/alloc.h"
  $12 = (_calloc($10,$11)|0); //@line 81 "../../include\share/alloc.h"
  $2 = $12; //@line 81 "../../include\share/alloc.h"
  $13 = $2; //@line 82 "../../include\share/alloc.h"
  STACKTOP = sp;return ($13|0); //@line 82 "../../include\share/alloc.h"
 } else {
  $9 = (_malloc(1)|0); //@line 80 "../../include\share/alloc.h"
  $2 = $9; //@line 80 "../../include\share/alloc.h"
  $13 = $2; //@line 82 "../../include\share/alloc.h"
  STACKTOP = sp;return ($13|0); //@line 82 "../../include\share/alloc.h"
 }
 return (0)|0;
}
function _skip_id3v2_tag_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $0;
 $6 = $2; //@line 1944 "stream_decoder.c"
 $7 = ((($6)) + 4|0); //@line 1944 "stream_decoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 1944 "stream_decoder.c"
 $9 = ((($8)) + 56|0); //@line 1944 "stream_decoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 1944 "stream_decoder.c"
 $11 = (_FLAC__bitreader_read_raw_uint32($10,$3,24)|0); //@line 1944 "stream_decoder.c"
 $12 = ($11|0)!=(0); //@line 1944 "stream_decoder.c"
 if (!($12)) {
  $1 = 0; //@line 1945 "stream_decoder.c"
  $33 = $1; //@line 1958 "stream_decoder.c"
  STACKTOP = sp;return ($33|0); //@line 1958 "stream_decoder.c"
 }
 $5 = 0; //@line 1947 "stream_decoder.c"
 $4 = 0; //@line 1948 "stream_decoder.c"
 while(1) {
  $13 = $4; //@line 1948 "stream_decoder.c"
  $14 = ($13>>>0)<(4); //@line 1948 "stream_decoder.c"
  $15 = $2;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  if (!($14)) {
   break;
  }
  $20 = (_FLAC__bitreader_read_raw_uint32($19,$3,8)|0); //@line 1949 "stream_decoder.c"
  $21 = ($20|0)!=(0); //@line 1949 "stream_decoder.c"
  if (!($21)) {
   label = 6;
   break;
  }
  $22 = $5; //@line 1951 "stream_decoder.c"
  $23 = $22 << 7; //@line 1951 "stream_decoder.c"
  $5 = $23; //@line 1951 "stream_decoder.c"
  $24 = HEAP32[$3>>2]|0; //@line 1952 "stream_decoder.c"
  $25 = $24 & 127; //@line 1952 "stream_decoder.c"
  $26 = $5; //@line 1952 "stream_decoder.c"
  $27 = $26 | $25; //@line 1952 "stream_decoder.c"
  $5 = $27; //@line 1952 "stream_decoder.c"
  $28 = $4; //@line 1948 "stream_decoder.c"
  $29 = (($28) + 1)|0; //@line 1948 "stream_decoder.c"
  $4 = $29; //@line 1948 "stream_decoder.c"
 }
 if ((label|0) == 6) {
  $1 = 0; //@line 1950 "stream_decoder.c"
  $33 = $1; //@line 1958 "stream_decoder.c"
  STACKTOP = sp;return ($33|0); //@line 1958 "stream_decoder.c"
 }
 $30 = $5; //@line 1955 "stream_decoder.c"
 $31 = (_FLAC__bitreader_skip_byte_block_aligned_no_crc($19,$30)|0); //@line 1955 "stream_decoder.c"
 $32 = ($31|0)!=(0); //@line 1955 "stream_decoder.c"
 if ($32) {
  $1 = 1; //@line 1957 "stream_decoder.c"
  $33 = $1; //@line 1958 "stream_decoder.c"
  STACKTOP = sp;return ($33|0); //@line 1958 "stream_decoder.c"
 } else {
  $1 = 0; //@line 1956 "stream_decoder.c"
  $33 = $1; //@line 1958 "stream_decoder.c"
  STACKTOP = sp;return ($33|0); //@line 1958 "stream_decoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_decoder_process_until_end_of_metadata($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 L1: while(1) {
  $3 = $2; //@line 1048 "stream_decoder.c"
  $4 = HEAP32[$3>>2]|0; //@line 1048 "stream_decoder.c"
  $5 = HEAP32[$4>>2]|0; //@line 1048 "stream_decoder.c"
  switch ($5|0) {
  case 7: case 4: case 3: case 2:  {
   label = 7;
   break L1;
   break;
  }
  case 0:  {
   $6 = $2; //@line 1050 "stream_decoder.c"
   $7 = (_find_metadata_($6)|0); //@line 1050 "stream_decoder.c"
   $8 = ($7|0)!=(0); //@line 1050 "stream_decoder.c"
   if (!($8)) {
    label = 4;
    break L1;
   }
   break;
  }
  case 1:  {
   $9 = $2; //@line 1054 "stream_decoder.c"
   $10 = (_read_metadata_($9)|0); //@line 1054 "stream_decoder.c"
   $11 = ($10|0)!=(0); //@line 1054 "stream_decoder.c"
   if (!($11)) {
    label = 6;
    break L1;
   }
   break;
  }
  default: {
   label = 8;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $1 = 0; //@line 1051 "stream_decoder.c"
 }
 else if ((label|0) == 6) {
  $1 = 0; //@line 1055 "stream_decoder.c"
 }
 else if ((label|0) == 7) {
  $1 = 1; //@line 1061 "stream_decoder.c"
 }
 else if ((label|0) == 8) {
  $1 = 0; //@line 1064 "stream_decoder.c"
 }
 $12 = $1; //@line 1067 "stream_decoder.c"
 STACKTOP = sp;return ($12|0); //@line 1067 "stream_decoder.c"
}
function _FLAC__stream_decoder_process_until_end_of_stream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 L1: while(1) {
  $4 = $2; //@line 1076 "stream_decoder.c"
  $5 = HEAP32[$4>>2]|0; //@line 1076 "stream_decoder.c"
  $6 = HEAP32[$5>>2]|0; //@line 1076 "stream_decoder.c"
  switch ($6|0) {
  case 7: case 4:  {
   label = 11;
   break L1;
   break;
  }
  case 0:  {
   $7 = $2; //@line 1078 "stream_decoder.c"
   $8 = (_find_metadata_($7)|0); //@line 1078 "stream_decoder.c"
   $9 = ($8|0)!=(0); //@line 1078 "stream_decoder.c"
   if (!($9)) {
    label = 4;
    break L1;
   }
   break;
  }
  case 1:  {
   $10 = $2; //@line 1082 "stream_decoder.c"
   $11 = (_read_metadata_($10)|0); //@line 1082 "stream_decoder.c"
   $12 = ($11|0)!=(0); //@line 1082 "stream_decoder.c"
   if (!($12)) {
    label = 6;
    break L1;
   }
   break;
  }
  case 2:  {
   $13 = $2; //@line 1086 "stream_decoder.c"
   $14 = (_frame_sync_($13)|0); //@line 1086 "stream_decoder.c"
   $15 = ($14|0)!=(0); //@line 1086 "stream_decoder.c"
   if (!($15)) {
    label = 8;
    break L1;
   }
   break;
  }
  case 3:  {
   $16 = $2; //@line 1090 "stream_decoder.c"
   $17 = (_read_frame_($16,$3,1)|0); //@line 1090 "stream_decoder.c"
   $18 = ($17|0)!=(0); //@line 1090 "stream_decoder.c"
   if (!($18)) {
    label = 10;
    break L1;
   }
   break;
  }
  default: {
   label = 12;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $1 = 0; //@line 1079 "stream_decoder.c"
 }
 else if ((label|0) == 6) {
  $1 = 0; //@line 1083 "stream_decoder.c"
 }
 else if ((label|0) == 8) {
  $1 = 1; //@line 1087 "stream_decoder.c"
 }
 else if ((label|0) == 10) {
  $1 = 0; //@line 1091 "stream_decoder.c"
 }
 else if ((label|0) == 11) {
  $1 = 1; //@line 1095 "stream_decoder.c"
 }
 else if ((label|0) == 12) {
  $1 = 0; //@line 1098 "stream_decoder.c"
 }
 $19 = $1; //@line 1101 "stream_decoder.c"
 STACKTOP = sp;return ($19|0); //@line 1101 "stream_decoder.c"
}
function _FLAC__stream_encoder_new() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = (_calloc(1,8)|0); //@line 511 "stream_encoder.c"
 $1 = $3; //@line 511 "stream_encoder.c"
 $4 = $1; //@line 512 "stream_encoder.c"
 $5 = ($4|0)==(0|0); //@line 512 "stream_encoder.c"
 if ($5) {
  $0 = 0; //@line 513 "stream_encoder.c"
  $211 = $0; //@line 574 "stream_encoder.c"
  STACKTOP = sp;return ($211|0); //@line 574 "stream_encoder.c"
 }
 $6 = (_calloc(1,632)|0); //@line 516 "stream_encoder.c"
 $7 = $1; //@line 516 "stream_encoder.c"
 HEAP32[$7>>2] = $6; //@line 516 "stream_encoder.c"
 $8 = $1; //@line 517 "stream_encoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 517 "stream_encoder.c"
 $10 = ($9|0)==(0|0); //@line 517 "stream_encoder.c"
 if ($10) {
  $11 = $1; //@line 518 "stream_encoder.c"
  _free($11); //@line 518 "stream_encoder.c"
  $0 = 0; //@line 519 "stream_encoder.c"
  $211 = $0; //@line 574 "stream_encoder.c"
  STACKTOP = sp;return ($211|0); //@line 574 "stream_encoder.c"
 }
 $12 = (_calloc(1,11880)|0); //@line 522 "stream_encoder.c"
 $13 = $1; //@line 522 "stream_encoder.c"
 $14 = ((($13)) + 4|0); //@line 522 "stream_encoder.c"
 HEAP32[$14>>2] = $12; //@line 522 "stream_encoder.c"
 $15 = $1; //@line 523 "stream_encoder.c"
 $16 = ((($15)) + 4|0); //@line 523 "stream_encoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 523 "stream_encoder.c"
 $18 = ($17|0)==(0|0); //@line 523 "stream_encoder.c"
 if ($18) {
  $19 = $1; //@line 524 "stream_encoder.c"
  $20 = HEAP32[$19>>2]|0; //@line 524 "stream_encoder.c"
  _free($20); //@line 524 "stream_encoder.c"
  $21 = $1; //@line 525 "stream_encoder.c"
  _free($21); //@line 525 "stream_encoder.c"
  $0 = 0; //@line 526 "stream_encoder.c"
  $211 = $0; //@line 574 "stream_encoder.c"
  STACKTOP = sp;return ($211|0); //@line 574 "stream_encoder.c"
 }
 $22 = (_FLAC__bitwriter_new()|0); //@line 529 "stream_encoder.c"
 $23 = $1; //@line 529 "stream_encoder.c"
 $24 = ((($23)) + 4|0); //@line 529 "stream_encoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 529 "stream_encoder.c"
 $26 = ((($25)) + 6856|0); //@line 529 "stream_encoder.c"
 HEAP32[$26>>2] = $22; //@line 529 "stream_encoder.c"
 $27 = $1; //@line 530 "stream_encoder.c"
 $28 = ((($27)) + 4|0); //@line 530 "stream_encoder.c"
 $29 = HEAP32[$28>>2]|0; //@line 530 "stream_encoder.c"
 $30 = ((($29)) + 6856|0); //@line 530 "stream_encoder.c"
 $31 = HEAP32[$30>>2]|0; //@line 530 "stream_encoder.c"
 $32 = ($31|0)==(0|0); //@line 530 "stream_encoder.c"
 $33 = $1;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 if ($32) {
  _free($35); //@line 531 "stream_encoder.c"
  $36 = $1; //@line 532 "stream_encoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 532 "stream_encoder.c"
  _free($37); //@line 532 "stream_encoder.c"
  $38 = $1; //@line 533 "stream_encoder.c"
  _free($38); //@line 533 "stream_encoder.c"
  $0 = 0; //@line 534 "stream_encoder.c"
  $211 = $0; //@line 574 "stream_encoder.c"
  STACKTOP = sp;return ($211|0); //@line 574 "stream_encoder.c"
 }
 $39 = ((($35)) + 7320|0); //@line 537 "stream_encoder.c"
 HEAP32[$39>>2] = 0; //@line 537 "stream_encoder.c"
 $40 = $1; //@line 539 "stream_encoder.c"
 _set_defaults__215($40); //@line 539 "stream_encoder.c"
 $41 = $1; //@line 541 "stream_encoder.c"
 $42 = ((($41)) + 4|0); //@line 541 "stream_encoder.c"
 $43 = HEAP32[$42>>2]|0; //@line 541 "stream_encoder.c"
 $44 = ((($43)) + 11872|0); //@line 541 "stream_encoder.c"
 HEAP32[$44>>2] = 0; //@line 541 "stream_encoder.c"
 $2 = 0; //@line 543 "stream_encoder.c"
 while(1) {
  $45 = $2; //@line 543 "stream_encoder.c"
  $46 = ($45>>>0)<(8); //@line 543 "stream_encoder.c"
  if (!($46)) {
   break;
  }
  $47 = $1; //@line 544 "stream_encoder.c"
  $48 = ((($47)) + 4|0); //@line 544 "stream_encoder.c"
  $49 = HEAP32[$48>>2]|0; //@line 544 "stream_encoder.c"
  $50 = ((($49)) + 336|0); //@line 544 "stream_encoder.c"
  $51 = $2; //@line 544 "stream_encoder.c"
  $52 = (($50) + (($51*584)|0)|0); //@line 544 "stream_encoder.c"
  $53 = $1; //@line 544 "stream_encoder.c"
  $54 = ((($53)) + 4|0); //@line 544 "stream_encoder.c"
  $55 = HEAP32[$54>>2]|0; //@line 544 "stream_encoder.c"
  $56 = ((($55)) + 6176|0); //@line 544 "stream_encoder.c"
  $57 = $2; //@line 544 "stream_encoder.c"
  $58 = (($56) + ($57<<3)|0); //@line 544 "stream_encoder.c"
  HEAP32[$58>>2] = $52; //@line 544 "stream_encoder.c"
  $59 = $1; //@line 545 "stream_encoder.c"
  $60 = ((($59)) + 4|0); //@line 545 "stream_encoder.c"
  $61 = HEAP32[$60>>2]|0; //@line 545 "stream_encoder.c"
  $62 = ((($61)) + 336|0); //@line 545 "stream_encoder.c"
  $63 = $2; //@line 545 "stream_encoder.c"
  $64 = (($62) + (($63*584)|0)|0); //@line 545 "stream_encoder.c"
  $65 = ((($64)) + 292|0); //@line 545 "stream_encoder.c"
  $66 = $1; //@line 545 "stream_encoder.c"
  $67 = ((($66)) + 4|0); //@line 545 "stream_encoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 545 "stream_encoder.c"
  $69 = ((($68)) + 6176|0); //@line 545 "stream_encoder.c"
  $70 = $2; //@line 545 "stream_encoder.c"
  $71 = (($69) + ($70<<3)|0); //@line 545 "stream_encoder.c"
  $72 = ((($71)) + 4|0); //@line 545 "stream_encoder.c"
  HEAP32[$72>>2] = $65; //@line 545 "stream_encoder.c"
  $73 = $2; //@line 543 "stream_encoder.c"
  $74 = (($73) + 1)|0; //@line 543 "stream_encoder.c"
  $2 = $74; //@line 543 "stream_encoder.c"
 }
 $2 = 0; //@line 547 "stream_encoder.c"
 while(1) {
  $75 = $2; //@line 547 "stream_encoder.c"
  $76 = ($75>>>0)<(2); //@line 547 "stream_encoder.c"
  if (!($76)) {
   break;
  }
  $77 = $1; //@line 548 "stream_encoder.c"
  $78 = ((($77)) + 4|0); //@line 548 "stream_encoder.c"
  $79 = HEAP32[$78>>2]|0; //@line 548 "stream_encoder.c"
  $80 = ((($79)) + 5008|0); //@line 548 "stream_encoder.c"
  $81 = $2; //@line 548 "stream_encoder.c"
  $82 = (($80) + (($81*584)|0)|0); //@line 548 "stream_encoder.c"
  $83 = $1; //@line 548 "stream_encoder.c"
  $84 = ((($83)) + 4|0); //@line 548 "stream_encoder.c"
  $85 = HEAP32[$84>>2]|0; //@line 548 "stream_encoder.c"
  $86 = ((($85)) + 6240|0); //@line 548 "stream_encoder.c"
  $87 = $2; //@line 548 "stream_encoder.c"
  $88 = (($86) + ($87<<3)|0); //@line 548 "stream_encoder.c"
  HEAP32[$88>>2] = $82; //@line 548 "stream_encoder.c"
  $89 = $1; //@line 549 "stream_encoder.c"
  $90 = ((($89)) + 4|0); //@line 549 "stream_encoder.c"
  $91 = HEAP32[$90>>2]|0; //@line 549 "stream_encoder.c"
  $92 = ((($91)) + 5008|0); //@line 549 "stream_encoder.c"
  $93 = $2; //@line 549 "stream_encoder.c"
  $94 = (($92) + (($93*584)|0)|0); //@line 549 "stream_encoder.c"
  $95 = ((($94)) + 292|0); //@line 549 "stream_encoder.c"
  $96 = $1; //@line 549 "stream_encoder.c"
  $97 = ((($96)) + 4|0); //@line 549 "stream_encoder.c"
  $98 = HEAP32[$97>>2]|0; //@line 549 "stream_encoder.c"
  $99 = ((($98)) + 6240|0); //@line 549 "stream_encoder.c"
  $100 = $2; //@line 549 "stream_encoder.c"
  $101 = (($99) + ($100<<3)|0); //@line 549 "stream_encoder.c"
  $102 = ((($101)) + 4|0); //@line 549 "stream_encoder.c"
  HEAP32[$102>>2] = $95; //@line 549 "stream_encoder.c"
  $103 = $2; //@line 547 "stream_encoder.c"
  $104 = (($103) + 1)|0; //@line 547 "stream_encoder.c"
  $2 = $104; //@line 547 "stream_encoder.c"
 }
 $2 = 0; //@line 551 "stream_encoder.c"
 while(1) {
  $105 = $2; //@line 551 "stream_encoder.c"
  $106 = ($105>>>0)<(8); //@line 551 "stream_encoder.c"
  if (!($106)) {
   break;
  }
  $107 = $1; //@line 552 "stream_encoder.c"
  $108 = ((($107)) + 4|0); //@line 552 "stream_encoder.c"
  $109 = HEAP32[$108>>2]|0; //@line 552 "stream_encoder.c"
  $110 = ((($109)) + 6256|0); //@line 552 "stream_encoder.c"
  $111 = $2; //@line 552 "stream_encoder.c"
  $112 = (($110) + (($111*24)|0)|0); //@line 552 "stream_encoder.c"
  $113 = $1; //@line 552 "stream_encoder.c"
  $114 = ((($113)) + 4|0); //@line 552 "stream_encoder.c"
  $115 = HEAP32[$114>>2]|0; //@line 552 "stream_encoder.c"
  $116 = ((($115)) + 6640|0); //@line 552 "stream_encoder.c"
  $117 = $2; //@line 552 "stream_encoder.c"
  $118 = (($116) + ($117<<3)|0); //@line 552 "stream_encoder.c"
  HEAP32[$118>>2] = $112; //@line 552 "stream_encoder.c"
  $119 = $1; //@line 553 "stream_encoder.c"
  $120 = ((($119)) + 4|0); //@line 553 "stream_encoder.c"
  $121 = HEAP32[$120>>2]|0; //@line 553 "stream_encoder.c"
  $122 = ((($121)) + 6256|0); //@line 553 "stream_encoder.c"
  $123 = $2; //@line 553 "stream_encoder.c"
  $124 = (($122) + (($123*24)|0)|0); //@line 553 "stream_encoder.c"
  $125 = ((($124)) + 12|0); //@line 553 "stream_encoder.c"
  $126 = $1; //@line 553 "stream_encoder.c"
  $127 = ((($126)) + 4|0); //@line 553 "stream_encoder.c"
  $128 = HEAP32[$127>>2]|0; //@line 553 "stream_encoder.c"
  $129 = ((($128)) + 6640|0); //@line 553 "stream_encoder.c"
  $130 = $2; //@line 553 "stream_encoder.c"
  $131 = (($129) + ($130<<3)|0); //@line 553 "stream_encoder.c"
  $132 = ((($131)) + 4|0); //@line 553 "stream_encoder.c"
  HEAP32[$132>>2] = $125; //@line 553 "stream_encoder.c"
  $133 = $2; //@line 551 "stream_encoder.c"
  $134 = (($133) + 1)|0; //@line 551 "stream_encoder.c"
  $2 = $134; //@line 551 "stream_encoder.c"
 }
 $2 = 0; //@line 555 "stream_encoder.c"
 while(1) {
  $135 = $2; //@line 555 "stream_encoder.c"
  $136 = ($135>>>0)<(2); //@line 555 "stream_encoder.c"
  if (!($136)) {
   break;
  }
  $137 = $1; //@line 556 "stream_encoder.c"
  $138 = ((($137)) + 4|0); //@line 556 "stream_encoder.c"
  $139 = HEAP32[$138>>2]|0; //@line 556 "stream_encoder.c"
  $140 = ((($139)) + 6448|0); //@line 556 "stream_encoder.c"
  $141 = $2; //@line 556 "stream_encoder.c"
  $142 = (($140) + (($141*24)|0)|0); //@line 556 "stream_encoder.c"
  $143 = $1; //@line 556 "stream_encoder.c"
  $144 = ((($143)) + 4|0); //@line 556 "stream_encoder.c"
  $145 = HEAP32[$144>>2]|0; //@line 556 "stream_encoder.c"
  $146 = ((($145)) + 6704|0); //@line 556 "stream_encoder.c"
  $147 = $2; //@line 556 "stream_encoder.c"
  $148 = (($146) + ($147<<3)|0); //@line 556 "stream_encoder.c"
  HEAP32[$148>>2] = $142; //@line 556 "stream_encoder.c"
  $149 = $1; //@line 557 "stream_encoder.c"
  $150 = ((($149)) + 4|0); //@line 557 "stream_encoder.c"
  $151 = HEAP32[$150>>2]|0; //@line 557 "stream_encoder.c"
  $152 = ((($151)) + 6448|0); //@line 557 "stream_encoder.c"
  $153 = $2; //@line 557 "stream_encoder.c"
  $154 = (($152) + (($153*24)|0)|0); //@line 557 "stream_encoder.c"
  $155 = ((($154)) + 12|0); //@line 557 "stream_encoder.c"
  $156 = $1; //@line 557 "stream_encoder.c"
  $157 = ((($156)) + 4|0); //@line 557 "stream_encoder.c"
  $158 = HEAP32[$157>>2]|0; //@line 557 "stream_encoder.c"
  $159 = ((($158)) + 6704|0); //@line 557 "stream_encoder.c"
  $160 = $2; //@line 557 "stream_encoder.c"
  $161 = (($159) + ($160<<3)|0); //@line 557 "stream_encoder.c"
  $162 = ((($161)) + 4|0); //@line 557 "stream_encoder.c"
  HEAP32[$162>>2] = $155; //@line 557 "stream_encoder.c"
  $163 = $2; //@line 555 "stream_encoder.c"
  $164 = (($163) + 1)|0; //@line 555 "stream_encoder.c"
  $2 = $164; //@line 555 "stream_encoder.c"
 }
 $2 = 0; //@line 560 "stream_encoder.c"
 while(1) {
  $165 = $2; //@line 560 "stream_encoder.c"
  $166 = ($165>>>0)<(8); //@line 560 "stream_encoder.c"
  if (!($166)) {
   break;
  }
  $167 = $1; //@line 561 "stream_encoder.c"
  $168 = ((($167)) + 4|0); //@line 561 "stream_encoder.c"
  $169 = HEAP32[$168>>2]|0; //@line 561 "stream_encoder.c"
  $170 = ((($169)) + 6256|0); //@line 561 "stream_encoder.c"
  $171 = $2; //@line 561 "stream_encoder.c"
  $172 = (($170) + (($171*24)|0)|0); //@line 561 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($172); //@line 561 "stream_encoder.c"
  $173 = $1; //@line 562 "stream_encoder.c"
  $174 = ((($173)) + 4|0); //@line 562 "stream_encoder.c"
  $175 = HEAP32[$174>>2]|0; //@line 562 "stream_encoder.c"
  $176 = ((($175)) + 6256|0); //@line 562 "stream_encoder.c"
  $177 = $2; //@line 562 "stream_encoder.c"
  $178 = (($176) + (($177*24)|0)|0); //@line 562 "stream_encoder.c"
  $179 = ((($178)) + 12|0); //@line 562 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($179); //@line 562 "stream_encoder.c"
  $180 = $2; //@line 560 "stream_encoder.c"
  $181 = (($180) + 1)|0; //@line 560 "stream_encoder.c"
  $2 = $181; //@line 560 "stream_encoder.c"
 }
 $2 = 0; //@line 564 "stream_encoder.c"
 while(1) {
  $182 = $2; //@line 564 "stream_encoder.c"
  $183 = ($182>>>0)<(2); //@line 564 "stream_encoder.c"
  if (!($183)) {
   break;
  }
  $184 = $1; //@line 565 "stream_encoder.c"
  $185 = ((($184)) + 4|0); //@line 565 "stream_encoder.c"
  $186 = HEAP32[$185>>2]|0; //@line 565 "stream_encoder.c"
  $187 = ((($186)) + 6448|0); //@line 565 "stream_encoder.c"
  $188 = $2; //@line 565 "stream_encoder.c"
  $189 = (($187) + (($188*24)|0)|0); //@line 565 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($189); //@line 565 "stream_encoder.c"
  $190 = $1; //@line 566 "stream_encoder.c"
  $191 = ((($190)) + 4|0); //@line 566 "stream_encoder.c"
  $192 = HEAP32[$191>>2]|0; //@line 566 "stream_encoder.c"
  $193 = ((($192)) + 6448|0); //@line 566 "stream_encoder.c"
  $194 = $2; //@line 566 "stream_encoder.c"
  $195 = (($193) + (($194*24)|0)|0); //@line 566 "stream_encoder.c"
  $196 = ((($195)) + 12|0); //@line 566 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($196); //@line 566 "stream_encoder.c"
  $197 = $2; //@line 564 "stream_encoder.c"
  $198 = (($197) + 1)|0; //@line 564 "stream_encoder.c"
  $2 = $198; //@line 564 "stream_encoder.c"
 }
 $2 = 0; //@line 568 "stream_encoder.c"
 while(1) {
  $199 = $2; //@line 568 "stream_encoder.c"
  $200 = ($199>>>0)<(2); //@line 568 "stream_encoder.c"
  $201 = $1;
  if (!($200)) {
   break;
  }
  $202 = ((($201)) + 4|0); //@line 569 "stream_encoder.c"
  $203 = HEAP32[$202>>2]|0; //@line 569 "stream_encoder.c"
  $204 = ((($203)) + 11748|0); //@line 569 "stream_encoder.c"
  $205 = $2; //@line 569 "stream_encoder.c"
  $206 = (($204) + (($205*12)|0)|0); //@line 569 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_init($206); //@line 569 "stream_encoder.c"
  $207 = $2; //@line 568 "stream_encoder.c"
  $208 = (($207) + 1)|0; //@line 568 "stream_encoder.c"
  $2 = $208; //@line 568 "stream_encoder.c"
 }
 $209 = HEAP32[$201>>2]|0; //@line 571 "stream_encoder.c"
 HEAP32[$209>>2] = 1; //@line 571 "stream_encoder.c"
 $210 = $1; //@line 573 "stream_encoder.c"
 $0 = $210; //@line 573 "stream_encoder.c"
 $211 = $0; //@line 574 "stream_encoder.c"
 STACKTOP = sp;return ($211|0); //@line 574 "stream_encoder.c"
}
function _set_defaults__215($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 2294 "stream_encoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 2294 "stream_encoder.c"
 $4 = ((($3)) + 4|0); //@line 2294 "stream_encoder.c"
 HEAP32[$4>>2] = 0; //@line 2294 "stream_encoder.c"
 $5 = $1; //@line 2296 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 2296 "stream_encoder.c"
 $7 = ((($6)) + 8|0); //@line 2296 "stream_encoder.c"
 HEAP32[$7>>2] = 1; //@line 2296 "stream_encoder.c"
 $8 = $1; //@line 2297 "stream_encoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 2297 "stream_encoder.c"
 $10 = ((($9)) + 12|0); //@line 2297 "stream_encoder.c"
 HEAP32[$10>>2] = 1; //@line 2297 "stream_encoder.c"
 $11 = $1; //@line 2298 "stream_encoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 2298 "stream_encoder.c"
 $13 = ((($12)) + 16|0); //@line 2298 "stream_encoder.c"
 HEAP32[$13>>2] = 0; //@line 2298 "stream_encoder.c"
 $14 = $1; //@line 2299 "stream_encoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 2299 "stream_encoder.c"
 $16 = ((($15)) + 20|0); //@line 2299 "stream_encoder.c"
 HEAP32[$16>>2] = 0; //@line 2299 "stream_encoder.c"
 $17 = $1; //@line 2300 "stream_encoder.c"
 $18 = HEAP32[$17>>2]|0; //@line 2300 "stream_encoder.c"
 $19 = ((($18)) + 24|0); //@line 2300 "stream_encoder.c"
 HEAP32[$19>>2] = 2; //@line 2300 "stream_encoder.c"
 $20 = $1; //@line 2301 "stream_encoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 2301 "stream_encoder.c"
 $22 = ((($21)) + 28|0); //@line 2301 "stream_encoder.c"
 HEAP32[$22>>2] = 16; //@line 2301 "stream_encoder.c"
 $23 = $1; //@line 2302 "stream_encoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 2302 "stream_encoder.c"
 $25 = ((($24)) + 32|0); //@line 2302 "stream_encoder.c"
 HEAP32[$25>>2] = 44100; //@line 2302 "stream_encoder.c"
 $26 = $1; //@line 2303 "stream_encoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2303 "stream_encoder.c"
 $28 = ((($27)) + 36|0); //@line 2303 "stream_encoder.c"
 HEAP32[$28>>2] = 0; //@line 2303 "stream_encoder.c"
 $29 = $1; //@line 2305 "stream_encoder.c"
 $30 = HEAP32[$29>>2]|0; //@line 2305 "stream_encoder.c"
 $31 = ((($30)) + 40|0); //@line 2305 "stream_encoder.c"
 HEAP32[$31>>2] = 1; //@line 2305 "stream_encoder.c"
 $32 = $1; //@line 2306 "stream_encoder.c"
 $33 = HEAP32[$32>>2]|0; //@line 2306 "stream_encoder.c"
 $34 = ((($33)) + 44|0); //@line 2306 "stream_encoder.c"
 HEAP32[$34>>2] = 13; //@line 2306 "stream_encoder.c"
 $35 = $1; //@line 2307 "stream_encoder.c"
 $36 = HEAP32[$35>>2]|0; //@line 2307 "stream_encoder.c"
 $37 = ((($36)) + 44|0); //@line 2307 "stream_encoder.c"
 $38 = ((($37)) + 4|0); //@line 2307 "stream_encoder.c"
 HEAPF32[$38>>2] = 0.5; //@line 2307 "stream_encoder.c"
 $39 = $1; //@line 2309 "stream_encoder.c"
 $40 = HEAP32[$39>>2]|0; //@line 2309 "stream_encoder.c"
 $41 = ((($40)) + 556|0); //@line 2309 "stream_encoder.c"
 HEAP32[$41>>2] = 0; //@line 2309 "stream_encoder.c"
 $42 = $1; //@line 2310 "stream_encoder.c"
 $43 = HEAP32[$42>>2]|0; //@line 2310 "stream_encoder.c"
 $44 = ((($43)) + 560|0); //@line 2310 "stream_encoder.c"
 HEAP32[$44>>2] = 0; //@line 2310 "stream_encoder.c"
 $45 = $1; //@line 2311 "stream_encoder.c"
 $46 = HEAP32[$45>>2]|0; //@line 2311 "stream_encoder.c"
 $47 = ((($46)) + 564|0); //@line 2311 "stream_encoder.c"
 HEAP32[$47>>2] = 0; //@line 2311 "stream_encoder.c"
 $48 = $1; //@line 2312 "stream_encoder.c"
 $49 = HEAP32[$48>>2]|0; //@line 2312 "stream_encoder.c"
 $50 = ((($49)) + 568|0); //@line 2312 "stream_encoder.c"
 HEAP32[$50>>2] = 0; //@line 2312 "stream_encoder.c"
 $51 = $1; //@line 2313 "stream_encoder.c"
 $52 = HEAP32[$51>>2]|0; //@line 2313 "stream_encoder.c"
 $53 = ((($52)) + 572|0); //@line 2313 "stream_encoder.c"
 HEAP32[$53>>2] = 0; //@line 2313 "stream_encoder.c"
 $54 = $1; //@line 2314 "stream_encoder.c"
 $55 = HEAP32[$54>>2]|0; //@line 2314 "stream_encoder.c"
 $56 = ((($55)) + 576|0); //@line 2314 "stream_encoder.c"
 HEAP32[$56>>2] = 0; //@line 2314 "stream_encoder.c"
 $57 = $1; //@line 2315 "stream_encoder.c"
 $58 = HEAP32[$57>>2]|0; //@line 2315 "stream_encoder.c"
 $59 = ((($58)) + 580|0); //@line 2315 "stream_encoder.c"
 HEAP32[$59>>2] = 0; //@line 2315 "stream_encoder.c"
 $60 = $1; //@line 2316 "stream_encoder.c"
 $61 = HEAP32[$60>>2]|0; //@line 2316 "stream_encoder.c"
 $62 = ((($61)) + 584|0); //@line 2316 "stream_encoder.c"
 HEAP32[$62>>2] = 0; //@line 2316 "stream_encoder.c"
 $63 = $1; //@line 2317 "stream_encoder.c"
 $64 = HEAP32[$63>>2]|0; //@line 2317 "stream_encoder.c"
 $65 = ((($64)) + 592|0); //@line 2317 "stream_encoder.c"
 $66 = $65; //@line 2317 "stream_encoder.c"
 $67 = $66; //@line 2317 "stream_encoder.c"
 HEAP32[$67>>2] = 0; //@line 2317 "stream_encoder.c"
 $68 = (($66) + 4)|0; //@line 2317 "stream_encoder.c"
 $69 = $68; //@line 2317 "stream_encoder.c"
 HEAP32[$69>>2] = 0; //@line 2317 "stream_encoder.c"
 $70 = $1; //@line 2318 "stream_encoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 2318 "stream_encoder.c"
 $72 = ((($71)) + 600|0); //@line 2318 "stream_encoder.c"
 HEAP32[$72>>2] = 0; //@line 2318 "stream_encoder.c"
 $73 = $1; //@line 2319 "stream_encoder.c"
 $74 = HEAP32[$73>>2]|0; //@line 2319 "stream_encoder.c"
 $75 = ((($74)) + 604|0); //@line 2319 "stream_encoder.c"
 HEAP32[$75>>2] = 0; //@line 2319 "stream_encoder.c"
 $76 = $1; //@line 2321 "stream_encoder.c"
 $77 = ((($76)) + 4|0); //@line 2321 "stream_encoder.c"
 $78 = HEAP32[$77>>2]|0; //@line 2321 "stream_encoder.c"
 $79 = ((($78)) + 7048|0); //@line 2321 "stream_encoder.c"
 HEAP32[$79>>2] = 0; //@line 2321 "stream_encoder.c"
 $80 = $1; //@line 2322 "stream_encoder.c"
 $81 = ((($80)) + 4|0); //@line 2322 "stream_encoder.c"
 $82 = HEAP32[$81>>2]|0; //@line 2322 "stream_encoder.c"
 $83 = ((($82)) + 7272|0); //@line 2322 "stream_encoder.c"
 HEAP32[$83>>2] = 0; //@line 2322 "stream_encoder.c"
 $84 = $1; //@line 2323 "stream_encoder.c"
 $85 = ((($84)) + 4|0); //@line 2323 "stream_encoder.c"
 $86 = HEAP32[$85>>2]|0; //@line 2323 "stream_encoder.c"
 $87 = ((($86)) + 7276|0); //@line 2323 "stream_encoder.c"
 HEAP32[$87>>2] = 0; //@line 2323 "stream_encoder.c"
 $88 = $1; //@line 2324 "stream_encoder.c"
 $89 = ((($88)) + 4|0); //@line 2324 "stream_encoder.c"
 $90 = HEAP32[$89>>2]|0; //@line 2324 "stream_encoder.c"
 $91 = ((($90)) + 7280|0); //@line 2324 "stream_encoder.c"
 HEAP32[$91>>2] = 0; //@line 2324 "stream_encoder.c"
 $92 = $1; //@line 2325 "stream_encoder.c"
 $93 = ((($92)) + 4|0); //@line 2325 "stream_encoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 2325 "stream_encoder.c"
 $95 = ((($94)) + 7284|0); //@line 2325 "stream_encoder.c"
 HEAP32[$95>>2] = 0; //@line 2325 "stream_encoder.c"
 $96 = $1; //@line 2326 "stream_encoder.c"
 $97 = ((($96)) + 4|0); //@line 2326 "stream_encoder.c"
 $98 = HEAP32[$97>>2]|0; //@line 2326 "stream_encoder.c"
 $99 = ((($98)) + 7288|0); //@line 2326 "stream_encoder.c"
 HEAP32[$99>>2] = 0; //@line 2326 "stream_encoder.c"
 $100 = $1; //@line 2327 "stream_encoder.c"
 $101 = ((($100)) + 4|0); //@line 2327 "stream_encoder.c"
 $102 = HEAP32[$101>>2]|0; //@line 2327 "stream_encoder.c"
 $103 = ((($102)) + 7300|0); //@line 2327 "stream_encoder.c"
 HEAP32[$103>>2] = 0; //@line 2327 "stream_encoder.c"
 $104 = $1; //@line 2328 "stream_encoder.c"
 $105 = ((($104)) + 4|0); //@line 2328 "stream_encoder.c"
 $106 = HEAP32[$105>>2]|0; //@line 2328 "stream_encoder.c"
 $107 = ((($106)) + 7292|0); //@line 2328 "stream_encoder.c"
 HEAP32[$107>>2] = 0; //@line 2328 "stream_encoder.c"
 $108 = $1; //@line 2329 "stream_encoder.c"
 $109 = ((($108)) + 4|0); //@line 2329 "stream_encoder.c"
 $110 = HEAP32[$109>>2]|0; //@line 2329 "stream_encoder.c"
 $111 = ((($110)) + 7296|0); //@line 2329 "stream_encoder.c"
 HEAP32[$111>>2] = 0; //@line 2329 "stream_encoder.c"
 $112 = $1; //@line 2330 "stream_encoder.c"
 $113 = ((($112)) + 4|0); //@line 2330 "stream_encoder.c"
 $114 = HEAP32[$113>>2]|0; //@line 2330 "stream_encoder.c"
 $115 = ((($114)) + 7304|0); //@line 2330 "stream_encoder.c"
 HEAP32[$115>>2] = 0; //@line 2330 "stream_encoder.c"
 $116 = $1; //@line 2331 "stream_encoder.c"
 $117 = ((($116)) + 4|0); //@line 2331 "stream_encoder.c"
 $118 = HEAP32[$117>>2]|0; //@line 2331 "stream_encoder.c"
 $119 = ((($118)) + 7308|0); //@line 2331 "stream_encoder.c"
 HEAP32[$119>>2] = 0; //@line 2331 "stream_encoder.c"
 $120 = $1; //@line 2332 "stream_encoder.c"
 $121 = ((($120)) + 4|0); //@line 2332 "stream_encoder.c"
 $122 = HEAP32[$121>>2]|0; //@line 2332 "stream_encoder.c"
 $123 = ((($122)) + 7312|0); //@line 2332 "stream_encoder.c"
 HEAP32[$123>>2] = 0; //@line 2332 "stream_encoder.c"
 $124 = $1; //@line 2338 "stream_encoder.c"
 (_FLAC__stream_encoder_set_compression_level($124,5)|0); //@line 2338 "stream_encoder.c"
 STACKTOP = sp;return; //@line 2339 "stream_encoder.c"
}
function _FLAC__stream_encoder_set_compression_level($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 1; //@line 1593 "stream_encoder.c"
 $6 = $3; //@line 1597 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1597 "stream_encoder.c"
 $8 = HEAP32[$7>>2]|0; //@line 1597 "stream_encoder.c"
 $9 = ($8|0)!=(1); //@line 1597 "stream_encoder.c"
 if ($9) {
  $2 = 0; //@line 1598 "stream_encoder.c"
  $100 = $2; //@line 1622 "stream_encoder.c"
  STACKTOP = sp;return ($100|0); //@line 1622 "stream_encoder.c"
 }
 $10 = $4; //@line 1599 "stream_encoder.c"
 $11 = ($10>>>0)>=(9); //@line 1599 "stream_encoder.c"
 if ($11) {
  $4 = 8; //@line 1600 "stream_encoder.c"
 }
 $12 = $3; //@line 1601 "stream_encoder.c"
 $13 = $4; //@line 1601 "stream_encoder.c"
 $14 = (1124 + (($13*44)|0)|0); //@line 1601 "stream_encoder.c"
 $15 = HEAP32[$14>>2]|0; //@line 1601 "stream_encoder.c"
 $16 = (_FLAC__stream_encoder_set_do_mid_side_stereo($12,$15)|0); //@line 1601 "stream_encoder.c"
 $17 = $5; //@line 1601 "stream_encoder.c"
 $18 = $17 & $16; //@line 1601 "stream_encoder.c"
 $5 = $18; //@line 1601 "stream_encoder.c"
 $19 = $3; //@line 1602 "stream_encoder.c"
 $20 = $4; //@line 1602 "stream_encoder.c"
 $21 = (1124 + (($20*44)|0)|0); //@line 1602 "stream_encoder.c"
 $22 = ((($21)) + 4|0); //@line 1602 "stream_encoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 1602 "stream_encoder.c"
 $24 = (_FLAC__stream_encoder_set_loose_mid_side_stereo($19,$23)|0); //@line 1602 "stream_encoder.c"
 $25 = $5; //@line 1602 "stream_encoder.c"
 $26 = $25 & $24; //@line 1602 "stream_encoder.c"
 $5 = $26; //@line 1602 "stream_encoder.c"
 $27 = $3; //@line 1605 "stream_encoder.c"
 $28 = $4; //@line 1605 "stream_encoder.c"
 $29 = (1124 + (($28*44)|0)|0); //@line 1605 "stream_encoder.c"
 $30 = ((($29)) + 40|0); //@line 1605 "stream_encoder.c"
 $31 = HEAP32[$30>>2]|0; //@line 1605 "stream_encoder.c"
 $32 = (_FLAC__stream_encoder_set_apodization($27,$31)|0); //@line 1605 "stream_encoder.c"
 $33 = $5; //@line 1605 "stream_encoder.c"
 $34 = $33 & $32; //@line 1605 "stream_encoder.c"
 $5 = $34; //@line 1605 "stream_encoder.c"
 $35 = $3; //@line 1613 "stream_encoder.c"
 $36 = $4; //@line 1613 "stream_encoder.c"
 $37 = (1124 + (($36*44)|0)|0); //@line 1613 "stream_encoder.c"
 $38 = ((($37)) + 8|0); //@line 1613 "stream_encoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 1613 "stream_encoder.c"
 $40 = (_FLAC__stream_encoder_set_max_lpc_order($35,$39)|0); //@line 1613 "stream_encoder.c"
 $41 = $5; //@line 1613 "stream_encoder.c"
 $42 = $41 & $40; //@line 1613 "stream_encoder.c"
 $5 = $42; //@line 1613 "stream_encoder.c"
 $43 = $3; //@line 1614 "stream_encoder.c"
 $44 = $4; //@line 1614 "stream_encoder.c"
 $45 = (1124 + (($44*44)|0)|0); //@line 1614 "stream_encoder.c"
 $46 = ((($45)) + 12|0); //@line 1614 "stream_encoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 1614 "stream_encoder.c"
 $48 = (_FLAC__stream_encoder_set_qlp_coeff_precision($43,$47)|0); //@line 1614 "stream_encoder.c"
 $49 = $5; //@line 1614 "stream_encoder.c"
 $50 = $49 & $48; //@line 1614 "stream_encoder.c"
 $5 = $50; //@line 1614 "stream_encoder.c"
 $51 = $3; //@line 1615 "stream_encoder.c"
 $52 = $4; //@line 1615 "stream_encoder.c"
 $53 = (1124 + (($52*44)|0)|0); //@line 1615 "stream_encoder.c"
 $54 = ((($53)) + 16|0); //@line 1615 "stream_encoder.c"
 $55 = HEAP32[$54>>2]|0; //@line 1615 "stream_encoder.c"
 $56 = (_FLAC__stream_encoder_set_do_qlp_coeff_prec_search($51,$55)|0); //@line 1615 "stream_encoder.c"
 $57 = $5; //@line 1615 "stream_encoder.c"
 $58 = $57 & $56; //@line 1615 "stream_encoder.c"
 $5 = $58; //@line 1615 "stream_encoder.c"
 $59 = $3; //@line 1616 "stream_encoder.c"
 $60 = $4; //@line 1616 "stream_encoder.c"
 $61 = (1124 + (($60*44)|0)|0); //@line 1616 "stream_encoder.c"
 $62 = ((($61)) + 20|0); //@line 1616 "stream_encoder.c"
 $63 = HEAP32[$62>>2]|0; //@line 1616 "stream_encoder.c"
 $64 = (_FLAC__stream_encoder_set_do_escape_coding($59,$63)|0); //@line 1616 "stream_encoder.c"
 $65 = $5; //@line 1616 "stream_encoder.c"
 $66 = $65 & $64; //@line 1616 "stream_encoder.c"
 $5 = $66; //@line 1616 "stream_encoder.c"
 $67 = $3; //@line 1617 "stream_encoder.c"
 $68 = $4; //@line 1617 "stream_encoder.c"
 $69 = (1124 + (($68*44)|0)|0); //@line 1617 "stream_encoder.c"
 $70 = ((($69)) + 24|0); //@line 1617 "stream_encoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 1617 "stream_encoder.c"
 $72 = (_FLAC__stream_encoder_set_do_exhaustive_model_search($67,$71)|0); //@line 1617 "stream_encoder.c"
 $73 = $5; //@line 1617 "stream_encoder.c"
 $74 = $73 & $72; //@line 1617 "stream_encoder.c"
 $5 = $74; //@line 1617 "stream_encoder.c"
 $75 = $3; //@line 1618 "stream_encoder.c"
 $76 = $4; //@line 1618 "stream_encoder.c"
 $77 = (1124 + (($76*44)|0)|0); //@line 1618 "stream_encoder.c"
 $78 = ((($77)) + 28|0); //@line 1618 "stream_encoder.c"
 $79 = HEAP32[$78>>2]|0; //@line 1618 "stream_encoder.c"
 $80 = (_FLAC__stream_encoder_set_min_residual_partition_order($75,$79)|0); //@line 1618 "stream_encoder.c"
 $81 = $5; //@line 1618 "stream_encoder.c"
 $82 = $81 & $80; //@line 1618 "stream_encoder.c"
 $5 = $82; //@line 1618 "stream_encoder.c"
 $83 = $3; //@line 1619 "stream_encoder.c"
 $84 = $4; //@line 1619 "stream_encoder.c"
 $85 = (1124 + (($84*44)|0)|0); //@line 1619 "stream_encoder.c"
 $86 = ((($85)) + 32|0); //@line 1619 "stream_encoder.c"
 $87 = HEAP32[$86>>2]|0; //@line 1619 "stream_encoder.c"
 $88 = (_FLAC__stream_encoder_set_max_residual_partition_order($83,$87)|0); //@line 1619 "stream_encoder.c"
 $89 = $5; //@line 1619 "stream_encoder.c"
 $90 = $89 & $88; //@line 1619 "stream_encoder.c"
 $5 = $90; //@line 1619 "stream_encoder.c"
 $91 = $3; //@line 1620 "stream_encoder.c"
 $92 = $4; //@line 1620 "stream_encoder.c"
 $93 = (1124 + (($92*44)|0)|0); //@line 1620 "stream_encoder.c"
 $94 = ((($93)) + 36|0); //@line 1620 "stream_encoder.c"
 $95 = HEAP32[$94>>2]|0; //@line 1620 "stream_encoder.c"
 $96 = (_FLAC__stream_encoder_set_rice_parameter_search_dist($91,$95)|0); //@line 1620 "stream_encoder.c"
 $97 = $5; //@line 1620 "stream_encoder.c"
 $98 = $97 & $96; //@line 1620 "stream_encoder.c"
 $5 = $98; //@line 1620 "stream_encoder.c"
 $99 = $5; //@line 1621 "stream_encoder.c"
 $2 = $99; //@line 1621 "stream_encoder.c"
 $100 = $2; //@line 1622 "stream_encoder.c"
 STACKTOP = sp;return ($100|0); //@line 1622 "stream_encoder.c"
}
function _FLAC__stream_encoder_set_do_mid_side_stereo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1640 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1640 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1640 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1640 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1641 "stream_encoder.c"
  $13 = $2; //@line 1644 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1644 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1642 "stream_encoder.c"
  $10 = $3; //@line 1642 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1642 "stream_encoder.c"
  $12 = ((($11)) + 16|0); //@line 1642 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1642 "stream_encoder.c"
  $2 = 1; //@line 1643 "stream_encoder.c"
  $13 = $2; //@line 1644 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1644 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_loose_mid_side_stereo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1651 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1651 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1651 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1651 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1652 "stream_encoder.c"
  $13 = $2; //@line 1655 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1655 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1653 "stream_encoder.c"
  $10 = $3; //@line 1653 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1653 "stream_encoder.c"
  $12 = ((($11)) + 20|0); //@line 1653 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1653 "stream_encoder.c"
  $2 = 1; //@line 1654 "stream_encoder.c"
  $13 = $2; //@line 1655 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1655 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_apodization($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0;
 var $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0.0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0.0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0;
 var $460 = 0.0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $23 = $3; //@line 1664 "stream_encoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 1664 "stream_encoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 1664 "stream_encoder.c"
 $26 = ($25|0)!=(1); //@line 1664 "stream_encoder.c"
 if ($26) {
  $2 = 0; //@line 1665 "stream_encoder.c"
  $589 = $2; //@line 1769 "stream_encoder.c"
  STACKTOP = sp;return ($589|0); //@line 1769 "stream_encoder.c"
 }
 $27 = $3; //@line 1669 "stream_encoder.c"
 $28 = HEAP32[$27>>2]|0; //@line 1669 "stream_encoder.c"
 $29 = ((($28)) + 40|0); //@line 1669 "stream_encoder.c"
 HEAP32[$29>>2] = 0; //@line 1669 "stream_encoder.c"
 while(1) {
  $30 = $4; //@line 1671 "stream_encoder.c"
  $31 = (_strchr($30,59)|0); //@line 1671 "stream_encoder.c"
  $5 = $31; //@line 1671 "stream_encoder.c"
  $32 = $5; //@line 1672 "stream_encoder.c"
  $33 = ($32|0)!=(0|0); //@line 1672 "stream_encoder.c"
  if ($33) {
   $34 = $5; //@line 1672 "stream_encoder.c"
   $35 = $4; //@line 1672 "stream_encoder.c"
   $36 = $34; //@line 1672 "stream_encoder.c"
   $37 = $35; //@line 1672 "stream_encoder.c"
   $38 = (($36) - ($37))|0; //@line 1672 "stream_encoder.c"
   $41 = $38;
  } else {
   $39 = $4; //@line 1672 "stream_encoder.c"
   $40 = (_strlen($39)|0); //@line 1672 "stream_encoder.c"
   $41 = $40;
  }
  $6 = $41; //@line 1672 "stream_encoder.c"
  $42 = $6; //@line 1673 "stream_encoder.c"
  $43 = ($42|0)==(8); //@line 1673 "stream_encoder.c"
  if ($43) {
   $44 = $4; //@line 1673 "stream_encoder.c"
   $45 = $6; //@line 1673 "stream_encoder.c"
   $46 = (_strncmp(3181,$44,$45)|0); //@line 1673 "stream_encoder.c"
   $47 = (0)==($46|0); //@line 1673 "stream_encoder.c"
   if ($47) {
    $48 = $3; //@line 1674 "stream_encoder.c"
    $49 = HEAP32[$48>>2]|0; //@line 1674 "stream_encoder.c"
    $50 = ((($49)) + 44|0); //@line 1674 "stream_encoder.c"
    $51 = $3; //@line 1674 "stream_encoder.c"
    $52 = HEAP32[$51>>2]|0; //@line 1674 "stream_encoder.c"
    $53 = ((($52)) + 40|0); //@line 1674 "stream_encoder.c"
    $54 = HEAP32[$53>>2]|0; //@line 1674 "stream_encoder.c"
    $55 = (($54) + 1)|0; //@line 1674 "stream_encoder.c"
    HEAP32[$53>>2] = $55; //@line 1674 "stream_encoder.c"
    $56 = (($50) + ($54<<4)|0); //@line 1674 "stream_encoder.c"
    HEAP32[$56>>2] = 0; //@line 1674 "stream_encoder.c"
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  L14: do {
   if ((label|0) == 10) {
    label = 0;
    $57 = $6; //@line 1675 "stream_encoder.c"
    $58 = ($57|0)==(13); //@line 1675 "stream_encoder.c"
    if ($58) {
     $59 = $4; //@line 1675 "stream_encoder.c"
     $60 = $6; //@line 1675 "stream_encoder.c"
     $61 = (_strncmp(3190,$59,$60)|0); //@line 1675 "stream_encoder.c"
     $62 = (0)==($61|0); //@line 1675 "stream_encoder.c"
     if ($62) {
      $63 = $3; //@line 1676 "stream_encoder.c"
      $64 = HEAP32[$63>>2]|0; //@line 1676 "stream_encoder.c"
      $65 = ((($64)) + 44|0); //@line 1676 "stream_encoder.c"
      $66 = $3; //@line 1676 "stream_encoder.c"
      $67 = HEAP32[$66>>2]|0; //@line 1676 "stream_encoder.c"
      $68 = ((($67)) + 40|0); //@line 1676 "stream_encoder.c"
      $69 = HEAP32[$68>>2]|0; //@line 1676 "stream_encoder.c"
      $70 = (($69) + 1)|0; //@line 1676 "stream_encoder.c"
      HEAP32[$68>>2] = $70; //@line 1676 "stream_encoder.c"
      $71 = (($65) + ($69<<4)|0); //@line 1676 "stream_encoder.c"
      HEAP32[$71>>2] = 1; //@line 1676 "stream_encoder.c"
      break;
     }
    }
    $72 = $6; //@line 1677 "stream_encoder.c"
    $73 = ($72|0)==(8); //@line 1677 "stream_encoder.c"
    if ($73) {
     $74 = $4; //@line 1677 "stream_encoder.c"
     $75 = $6; //@line 1677 "stream_encoder.c"
     $76 = (_strncmp(3204,$74,$75)|0); //@line 1677 "stream_encoder.c"
     $77 = (0)==($76|0); //@line 1677 "stream_encoder.c"
     if ($77) {
      $78 = $3; //@line 1678 "stream_encoder.c"
      $79 = HEAP32[$78>>2]|0; //@line 1678 "stream_encoder.c"
      $80 = ((($79)) + 44|0); //@line 1678 "stream_encoder.c"
      $81 = $3; //@line 1678 "stream_encoder.c"
      $82 = HEAP32[$81>>2]|0; //@line 1678 "stream_encoder.c"
      $83 = ((($82)) + 40|0); //@line 1678 "stream_encoder.c"
      $84 = HEAP32[$83>>2]|0; //@line 1678 "stream_encoder.c"
      $85 = (($84) + 1)|0; //@line 1678 "stream_encoder.c"
      HEAP32[$83>>2] = $85; //@line 1678 "stream_encoder.c"
      $86 = (($80) + ($84<<4)|0); //@line 1678 "stream_encoder.c"
      HEAP32[$86>>2] = 2; //@line 1678 "stream_encoder.c"
      break;
     }
    }
    $87 = $6; //@line 1679 "stream_encoder.c"
    $88 = ($87|0)==(26); //@line 1679 "stream_encoder.c"
    if ($88) {
     $89 = $4; //@line 1679 "stream_encoder.c"
     $90 = $6; //@line 1679 "stream_encoder.c"
     $91 = (_strncmp(3213,$89,$90)|0); //@line 1679 "stream_encoder.c"
     $92 = (0)==($91|0); //@line 1679 "stream_encoder.c"
     if ($92) {
      $93 = $3; //@line 1680 "stream_encoder.c"
      $94 = HEAP32[$93>>2]|0; //@line 1680 "stream_encoder.c"
      $95 = ((($94)) + 44|0); //@line 1680 "stream_encoder.c"
      $96 = $3; //@line 1680 "stream_encoder.c"
      $97 = HEAP32[$96>>2]|0; //@line 1680 "stream_encoder.c"
      $98 = ((($97)) + 40|0); //@line 1680 "stream_encoder.c"
      $99 = HEAP32[$98>>2]|0; //@line 1680 "stream_encoder.c"
      $100 = (($99) + 1)|0; //@line 1680 "stream_encoder.c"
      HEAP32[$98>>2] = $100; //@line 1680 "stream_encoder.c"
      $101 = (($95) + ($99<<4)|0); //@line 1680 "stream_encoder.c"
      HEAP32[$101>>2] = 3; //@line 1680 "stream_encoder.c"
      break;
     }
    }
    $102 = $6; //@line 1681 "stream_encoder.c"
    $103 = ($102|0)==(6); //@line 1681 "stream_encoder.c"
    if ($103) {
     $104 = $4; //@line 1681 "stream_encoder.c"
     $105 = $6; //@line 1681 "stream_encoder.c"
     $106 = (_strncmp(3240,$104,$105)|0); //@line 1681 "stream_encoder.c"
     $107 = (0)==($106|0); //@line 1681 "stream_encoder.c"
     if ($107) {
      $108 = $3; //@line 1682 "stream_encoder.c"
      $109 = HEAP32[$108>>2]|0; //@line 1682 "stream_encoder.c"
      $110 = ((($109)) + 44|0); //@line 1682 "stream_encoder.c"
      $111 = $3; //@line 1682 "stream_encoder.c"
      $112 = HEAP32[$111>>2]|0; //@line 1682 "stream_encoder.c"
      $113 = ((($112)) + 40|0); //@line 1682 "stream_encoder.c"
      $114 = HEAP32[$113>>2]|0; //@line 1682 "stream_encoder.c"
      $115 = (($114) + 1)|0; //@line 1682 "stream_encoder.c"
      HEAP32[$113>>2] = $115; //@line 1682 "stream_encoder.c"
      $116 = (($110) + ($114<<4)|0); //@line 1682 "stream_encoder.c"
      HEAP32[$116>>2] = 4; //@line 1682 "stream_encoder.c"
      break;
     }
    }
    $117 = $6; //@line 1683 "stream_encoder.c"
    $118 = ($117|0)==(7); //@line 1683 "stream_encoder.c"
    if ($118) {
     $119 = $4; //@line 1683 "stream_encoder.c"
     $120 = $6; //@line 1683 "stream_encoder.c"
     $121 = (_strncmp(3247,$119,$120)|0); //@line 1683 "stream_encoder.c"
     $122 = (0)==($121|0); //@line 1683 "stream_encoder.c"
     if ($122) {
      $123 = $3; //@line 1684 "stream_encoder.c"
      $124 = HEAP32[$123>>2]|0; //@line 1684 "stream_encoder.c"
      $125 = ((($124)) + 44|0); //@line 1684 "stream_encoder.c"
      $126 = $3; //@line 1684 "stream_encoder.c"
      $127 = HEAP32[$126>>2]|0; //@line 1684 "stream_encoder.c"
      $128 = ((($127)) + 40|0); //@line 1684 "stream_encoder.c"
      $129 = HEAP32[$128>>2]|0; //@line 1684 "stream_encoder.c"
      $130 = (($129) + 1)|0; //@line 1684 "stream_encoder.c"
      HEAP32[$128>>2] = $130; //@line 1684 "stream_encoder.c"
      $131 = (($125) + ($129<<4)|0); //@line 1684 "stream_encoder.c"
      HEAP32[$131>>2] = 5; //@line 1684 "stream_encoder.c"
      break;
     }
    }
    $132 = $6; //@line 1685 "stream_encoder.c"
    $133 = ($132>>>0)>(7); //@line 1685 "stream_encoder.c"
    if ($133) {
     $134 = $4; //@line 1685 "stream_encoder.c"
     $135 = (_strncmp(3255,$134,6)|0); //@line 1685 "stream_encoder.c"
     $136 = (0)==($135|0); //@line 1685 "stream_encoder.c"
     if ($136) {
      $137 = $4; //@line 1686 "stream_encoder.c"
      $138 = ((($137)) + 6|0); //@line 1686 "stream_encoder.c"
      $139 = (+_strtod($138,0)); //@line 1686 "stream_encoder.c"
      $140 = $139; //@line 1686 "stream_encoder.c"
      $7 = $140; //@line 1686 "stream_encoder.c"
      $141 = $7; //@line 1687 "stream_encoder.c"
      $142 = $141; //@line 1687 "stream_encoder.c"
      $143 = $142 > 0.0; //@line 1687 "stream_encoder.c"
      if (!($143)) {
       break;
      }
      $144 = $7; //@line 1687 "stream_encoder.c"
      $145 = $144; //@line 1687 "stream_encoder.c"
      $146 = $145 <= 0.5; //@line 1687 "stream_encoder.c"
      if (!($146)) {
       break;
      }
      $147 = $7; //@line 1688 "stream_encoder.c"
      $148 = $3; //@line 1688 "stream_encoder.c"
      $149 = HEAP32[$148>>2]|0; //@line 1688 "stream_encoder.c"
      $150 = ((($149)) + 44|0); //@line 1688 "stream_encoder.c"
      $151 = $3; //@line 1688 "stream_encoder.c"
      $152 = HEAP32[$151>>2]|0; //@line 1688 "stream_encoder.c"
      $153 = ((($152)) + 40|0); //@line 1688 "stream_encoder.c"
      $154 = HEAP32[$153>>2]|0; //@line 1688 "stream_encoder.c"
      $155 = (($150) + ($154<<4)|0); //@line 1688 "stream_encoder.c"
      $156 = ((($155)) + 4|0); //@line 1688 "stream_encoder.c"
      HEAPF32[$156>>2] = $147; //@line 1688 "stream_encoder.c"
      $157 = $3; //@line 1689 "stream_encoder.c"
      $158 = HEAP32[$157>>2]|0; //@line 1689 "stream_encoder.c"
      $159 = ((($158)) + 44|0); //@line 1689 "stream_encoder.c"
      $160 = $3; //@line 1689 "stream_encoder.c"
      $161 = HEAP32[$160>>2]|0; //@line 1689 "stream_encoder.c"
      $162 = ((($161)) + 40|0); //@line 1689 "stream_encoder.c"
      $163 = HEAP32[$162>>2]|0; //@line 1689 "stream_encoder.c"
      $164 = (($163) + 1)|0; //@line 1689 "stream_encoder.c"
      HEAP32[$162>>2] = $164; //@line 1689 "stream_encoder.c"
      $165 = (($159) + ($163<<4)|0); //@line 1689 "stream_encoder.c"
      HEAP32[$165>>2] = 6; //@line 1689 "stream_encoder.c"
      break;
     }
    }
    $166 = $6; //@line 1692 "stream_encoder.c"
    $167 = ($166|0)==(7); //@line 1692 "stream_encoder.c"
    if ($167) {
     $168 = $4; //@line 1692 "stream_encoder.c"
     $169 = $6; //@line 1692 "stream_encoder.c"
     $170 = (_strncmp(3262,$168,$169)|0); //@line 1692 "stream_encoder.c"
     $171 = (0)==($170|0); //@line 1692 "stream_encoder.c"
     if ($171) {
      $172 = $3; //@line 1693 "stream_encoder.c"
      $173 = HEAP32[$172>>2]|0; //@line 1693 "stream_encoder.c"
      $174 = ((($173)) + 44|0); //@line 1693 "stream_encoder.c"
      $175 = $3; //@line 1693 "stream_encoder.c"
      $176 = HEAP32[$175>>2]|0; //@line 1693 "stream_encoder.c"
      $177 = ((($176)) + 40|0); //@line 1693 "stream_encoder.c"
      $178 = HEAP32[$177>>2]|0; //@line 1693 "stream_encoder.c"
      $179 = (($178) + 1)|0; //@line 1693 "stream_encoder.c"
      HEAP32[$177>>2] = $179; //@line 1693 "stream_encoder.c"
      $180 = (($174) + ($178<<4)|0); //@line 1693 "stream_encoder.c"
      HEAP32[$180>>2] = 7; //@line 1693 "stream_encoder.c"
      break;
     }
    }
    $181 = $6; //@line 1694 "stream_encoder.c"
    $182 = ($181|0)==(4); //@line 1694 "stream_encoder.c"
    if ($182) {
     $183 = $4; //@line 1694 "stream_encoder.c"
     $184 = $6; //@line 1694 "stream_encoder.c"
     $185 = (_strncmp(3270,$183,$184)|0); //@line 1694 "stream_encoder.c"
     $186 = (0)==($185|0); //@line 1694 "stream_encoder.c"
     if ($186) {
      $187 = $3; //@line 1695 "stream_encoder.c"
      $188 = HEAP32[$187>>2]|0; //@line 1695 "stream_encoder.c"
      $189 = ((($188)) + 44|0); //@line 1695 "stream_encoder.c"
      $190 = $3; //@line 1695 "stream_encoder.c"
      $191 = HEAP32[$190>>2]|0; //@line 1695 "stream_encoder.c"
      $192 = ((($191)) + 40|0); //@line 1695 "stream_encoder.c"
      $193 = HEAP32[$192>>2]|0; //@line 1695 "stream_encoder.c"
      $194 = (($193) + 1)|0; //@line 1695 "stream_encoder.c"
      HEAP32[$192>>2] = $194; //@line 1695 "stream_encoder.c"
      $195 = (($189) + ($193<<4)|0); //@line 1695 "stream_encoder.c"
      HEAP32[$195>>2] = 8; //@line 1695 "stream_encoder.c"
      break;
     }
    }
    $196 = $6; //@line 1696 "stream_encoder.c"
    $197 = ($196|0)==(13); //@line 1696 "stream_encoder.c"
    if ($197) {
     $198 = $4; //@line 1696 "stream_encoder.c"
     $199 = $6; //@line 1696 "stream_encoder.c"
     $200 = (_strncmp(3275,$198,$199)|0); //@line 1696 "stream_encoder.c"
     $201 = (0)==($200|0); //@line 1696 "stream_encoder.c"
     if ($201) {
      $202 = $3; //@line 1697 "stream_encoder.c"
      $203 = HEAP32[$202>>2]|0; //@line 1697 "stream_encoder.c"
      $204 = ((($203)) + 44|0); //@line 1697 "stream_encoder.c"
      $205 = $3; //@line 1697 "stream_encoder.c"
      $206 = HEAP32[$205>>2]|0; //@line 1697 "stream_encoder.c"
      $207 = ((($206)) + 40|0); //@line 1697 "stream_encoder.c"
      $208 = HEAP32[$207>>2]|0; //@line 1697 "stream_encoder.c"
      $209 = (($208) + 1)|0; //@line 1697 "stream_encoder.c"
      HEAP32[$207>>2] = $209; //@line 1697 "stream_encoder.c"
      $210 = (($204) + ($208<<4)|0); //@line 1697 "stream_encoder.c"
      HEAP32[$210>>2] = 9; //@line 1697 "stream_encoder.c"
      break;
     }
    }
    $211 = $6; //@line 1698 "stream_encoder.c"
    $212 = ($211|0)==(7); //@line 1698 "stream_encoder.c"
    if ($212) {
     $213 = $4; //@line 1698 "stream_encoder.c"
     $214 = $6; //@line 1698 "stream_encoder.c"
     $215 = (_strncmp(3289,$213,$214)|0); //@line 1698 "stream_encoder.c"
     $216 = (0)==($215|0); //@line 1698 "stream_encoder.c"
     if ($216) {
      $217 = $3; //@line 1699 "stream_encoder.c"
      $218 = HEAP32[$217>>2]|0; //@line 1699 "stream_encoder.c"
      $219 = ((($218)) + 44|0); //@line 1699 "stream_encoder.c"
      $220 = $3; //@line 1699 "stream_encoder.c"
      $221 = HEAP32[$220>>2]|0; //@line 1699 "stream_encoder.c"
      $222 = ((($221)) + 40|0); //@line 1699 "stream_encoder.c"
      $223 = HEAP32[$222>>2]|0; //@line 1699 "stream_encoder.c"
      $224 = (($223) + 1)|0; //@line 1699 "stream_encoder.c"
      HEAP32[$222>>2] = $224; //@line 1699 "stream_encoder.c"
      $225 = (($219) + ($223<<4)|0); //@line 1699 "stream_encoder.c"
      HEAP32[$225>>2] = 10; //@line 1699 "stream_encoder.c"
      break;
     }
    }
    $226 = $6; //@line 1700 "stream_encoder.c"
    $227 = ($226|0)==(9); //@line 1700 "stream_encoder.c"
    if ($227) {
     $228 = $4; //@line 1700 "stream_encoder.c"
     $229 = $6; //@line 1700 "stream_encoder.c"
     $230 = (_strncmp(3297,$228,$229)|0); //@line 1700 "stream_encoder.c"
     $231 = (0)==($230|0); //@line 1700 "stream_encoder.c"
     if ($231) {
      $232 = $3; //@line 1701 "stream_encoder.c"
      $233 = HEAP32[$232>>2]|0; //@line 1701 "stream_encoder.c"
      $234 = ((($233)) + 44|0); //@line 1701 "stream_encoder.c"
      $235 = $3; //@line 1701 "stream_encoder.c"
      $236 = HEAP32[$235>>2]|0; //@line 1701 "stream_encoder.c"
      $237 = ((($236)) + 40|0); //@line 1701 "stream_encoder.c"
      $238 = HEAP32[$237>>2]|0; //@line 1701 "stream_encoder.c"
      $239 = (($238) + 1)|0; //@line 1701 "stream_encoder.c"
      HEAP32[$237>>2] = $239; //@line 1701 "stream_encoder.c"
      $240 = (($234) + ($238<<4)|0); //@line 1701 "stream_encoder.c"
      HEAP32[$240>>2] = 11; //@line 1701 "stream_encoder.c"
      break;
     }
    }
    $241 = $6; //@line 1702 "stream_encoder.c"
    $242 = ($241|0)==(8); //@line 1702 "stream_encoder.c"
    if ($242) {
     $243 = $4; //@line 1702 "stream_encoder.c"
     $244 = $6; //@line 1702 "stream_encoder.c"
     $245 = (_strncmp(3307,$243,$244)|0); //@line 1702 "stream_encoder.c"
     $246 = (0)==($245|0); //@line 1702 "stream_encoder.c"
     if ($246) {
      $247 = $3; //@line 1703 "stream_encoder.c"
      $248 = HEAP32[$247>>2]|0; //@line 1703 "stream_encoder.c"
      $249 = ((($248)) + 44|0); //@line 1703 "stream_encoder.c"
      $250 = $3; //@line 1703 "stream_encoder.c"
      $251 = HEAP32[$250>>2]|0; //@line 1703 "stream_encoder.c"
      $252 = ((($251)) + 40|0); //@line 1703 "stream_encoder.c"
      $253 = HEAP32[$252>>2]|0; //@line 1703 "stream_encoder.c"
      $254 = (($253) + 1)|0; //@line 1703 "stream_encoder.c"
      HEAP32[$252>>2] = $254; //@line 1703 "stream_encoder.c"
      $255 = (($249) + ($253<<4)|0); //@line 1703 "stream_encoder.c"
      HEAP32[$255>>2] = 12; //@line 1703 "stream_encoder.c"
      break;
     }
    }
    $256 = $6; //@line 1704 "stream_encoder.c"
    $257 = ($256>>>0)>(7); //@line 1704 "stream_encoder.c"
    if ($257) {
     $258 = $4; //@line 1704 "stream_encoder.c"
     $259 = (_strncmp(3316,$258,6)|0); //@line 1704 "stream_encoder.c"
     $260 = (0)==($259|0); //@line 1704 "stream_encoder.c"
     if ($260) {
      $261 = $4; //@line 1705 "stream_encoder.c"
      $262 = ((($261)) + 6|0); //@line 1705 "stream_encoder.c"
      $263 = (+_strtod($262,0)); //@line 1705 "stream_encoder.c"
      $264 = $263; //@line 1705 "stream_encoder.c"
      $8 = $264; //@line 1705 "stream_encoder.c"
      $265 = $8; //@line 1706 "stream_encoder.c"
      $266 = $265; //@line 1706 "stream_encoder.c"
      $267 = $266 >= 0.0; //@line 1706 "stream_encoder.c"
      if (!($267)) {
       break;
      }
      $268 = $8; //@line 1706 "stream_encoder.c"
      $269 = $268; //@line 1706 "stream_encoder.c"
      $270 = $269 <= 1.0; //@line 1706 "stream_encoder.c"
      if (!($270)) {
       break;
      }
      $271 = $8; //@line 1707 "stream_encoder.c"
      $272 = $3; //@line 1707 "stream_encoder.c"
      $273 = HEAP32[$272>>2]|0; //@line 1707 "stream_encoder.c"
      $274 = ((($273)) + 44|0); //@line 1707 "stream_encoder.c"
      $275 = $3; //@line 1707 "stream_encoder.c"
      $276 = HEAP32[$275>>2]|0; //@line 1707 "stream_encoder.c"
      $277 = ((($276)) + 40|0); //@line 1707 "stream_encoder.c"
      $278 = HEAP32[$277>>2]|0; //@line 1707 "stream_encoder.c"
      $279 = (($274) + ($278<<4)|0); //@line 1707 "stream_encoder.c"
      $280 = ((($279)) + 4|0); //@line 1707 "stream_encoder.c"
      HEAPF32[$280>>2] = $271; //@line 1707 "stream_encoder.c"
      $281 = $3; //@line 1708 "stream_encoder.c"
      $282 = HEAP32[$281>>2]|0; //@line 1708 "stream_encoder.c"
      $283 = ((($282)) + 44|0); //@line 1708 "stream_encoder.c"
      $284 = $3; //@line 1708 "stream_encoder.c"
      $285 = HEAP32[$284>>2]|0; //@line 1708 "stream_encoder.c"
      $286 = ((($285)) + 40|0); //@line 1708 "stream_encoder.c"
      $287 = HEAP32[$286>>2]|0; //@line 1708 "stream_encoder.c"
      $288 = (($287) + 1)|0; //@line 1708 "stream_encoder.c"
      HEAP32[$286>>2] = $288; //@line 1708 "stream_encoder.c"
      $289 = (($283) + ($287<<4)|0); //@line 1708 "stream_encoder.c"
      HEAP32[$289>>2] = 13; //@line 1708 "stream_encoder.c"
      break;
     }
    }
    $290 = $6; //@line 1711 "stream_encoder.c"
    $291 = ($290>>>0)>(15); //@line 1711 "stream_encoder.c"
    do {
     if ($291) {
      $292 = $4; //@line 1711 "stream_encoder.c"
      $293 = (_strncmp(3323,$292,14)|0); //@line 1711 "stream_encoder.c"
      $294 = (0)==($293|0); //@line 1711 "stream_encoder.c"
      if (!($294)) {
       break;
      }
      $295 = $4; //@line 1712 "stream_encoder.c"
      $296 = ((($295)) + 14|0); //@line 1712 "stream_encoder.c"
      $297 = (+_strtod($296,0)); //@line 1712 "stream_encoder.c"
      $298 = (~~(($297))); //@line 1712 "stream_encoder.c"
      $9 = $298; //@line 1712 "stream_encoder.c"
      $299 = $4; //@line 1713 "stream_encoder.c"
      $300 = (_strchr($299,47)|0); //@line 1713 "stream_encoder.c"
      $10 = $300; //@line 1713 "stream_encoder.c"
      $301 = $10; //@line 1714 "stream_encoder.c"
      $302 = ($301|0)!=(0|0); //@line 1714 "stream_encoder.c"
      do {
       if ($302) {
        $303 = $10; //@line 1714 "stream_encoder.c"
        $304 = ((($303)) + 1|0); //@line 1714 "stream_encoder.c"
        $305 = (+_strtod($304,0)); //@line 1714 "stream_encoder.c"
        $306 = $305; //@line 1714 "stream_encoder.c"
        $307 = $306 < 0.99000000953674316; //@line 1714 "stream_encoder.c"
        if (!($307)) {
         $312 = 0.99000000953674316;
         break;
        }
        $308 = $10; //@line 1714 "stream_encoder.c"
        $309 = ((($308)) + 1|0); //@line 1714 "stream_encoder.c"
        $310 = (+_strtod($309,0)); //@line 1714 "stream_encoder.c"
        $311 = $310; //@line 1714 "stream_encoder.c"
        $312 = $311;
       } else {
        $312 = 0.10000000149011612;
       }
      } while(0);
      $11 = $312; //@line 1714 "stream_encoder.c"
      $313 = $11; //@line 1715 "stream_encoder.c"
      $314 = 1.0 - $313; //@line 1715 "stream_encoder.c"
      $315 = 1.0 / $314; //@line 1715 "stream_encoder.c"
      $316 = $315 - 1.0; //@line 1715 "stream_encoder.c"
      $12 = $316; //@line 1715 "stream_encoder.c"
      $317 = $10; //@line 1716 "stream_encoder.c"
      $318 = ($317|0)!=(0|0); //@line 1716 "stream_encoder.c"
      $319 = $10; //@line 1716 "stream_encoder.c"
      $320 = ((($319)) + 1|0); //@line 1716 "stream_encoder.c"
      $321 = $4; //@line 1716 "stream_encoder.c"
      $322 = $318 ? $320 : $321; //@line 1716 "stream_encoder.c"
      $323 = (_strchr($322,47)|0); //@line 1716 "stream_encoder.c"
      $13 = $323; //@line 1716 "stream_encoder.c"
      $324 = $13; //@line 1717 "stream_encoder.c"
      $325 = ($324|0)!=(0|0); //@line 1717 "stream_encoder.c"
      if ($325) {
       $326 = $13; //@line 1717 "stream_encoder.c"
       $327 = ((($326)) + 1|0); //@line 1717 "stream_encoder.c"
       $328 = (+_strtod($327,0)); //@line 1717 "stream_encoder.c"
       $329 = $328; //@line 1717 "stream_encoder.c"
       $330 = $329;
      } else {
       $330 = 0.20000000298023224;
      }
      $14 = $330; //@line 1717 "stream_encoder.c"
      $331 = $9; //@line 1719 "stream_encoder.c"
      $332 = ($331|0)<=(1); //@line 1719 "stream_encoder.c"
      if ($332) {
       $333 = $14; //@line 1720 "stream_encoder.c"
       $334 = $3; //@line 1720 "stream_encoder.c"
       $335 = HEAP32[$334>>2]|0; //@line 1720 "stream_encoder.c"
       $336 = ((($335)) + 44|0); //@line 1720 "stream_encoder.c"
       $337 = $3; //@line 1720 "stream_encoder.c"
       $338 = HEAP32[$337>>2]|0; //@line 1720 "stream_encoder.c"
       $339 = ((($338)) + 40|0); //@line 1720 "stream_encoder.c"
       $340 = HEAP32[$339>>2]|0; //@line 1720 "stream_encoder.c"
       $341 = (($336) + ($340<<4)|0); //@line 1720 "stream_encoder.c"
       $342 = ((($341)) + 4|0); //@line 1720 "stream_encoder.c"
       HEAPF32[$342>>2] = $333; //@line 1720 "stream_encoder.c"
       $343 = $3; //@line 1721 "stream_encoder.c"
       $344 = HEAP32[$343>>2]|0; //@line 1721 "stream_encoder.c"
       $345 = ((($344)) + 44|0); //@line 1721 "stream_encoder.c"
       $346 = $3; //@line 1721 "stream_encoder.c"
       $347 = HEAP32[$346>>2]|0; //@line 1721 "stream_encoder.c"
       $348 = ((($347)) + 40|0); //@line 1721 "stream_encoder.c"
       $349 = HEAP32[$348>>2]|0; //@line 1721 "stream_encoder.c"
       $350 = (($349) + 1)|0; //@line 1721 "stream_encoder.c"
       HEAP32[$348>>2] = $350; //@line 1721 "stream_encoder.c"
       $351 = (($345) + ($349<<4)|0); //@line 1721 "stream_encoder.c"
       HEAP32[$351>>2] = 13; //@line 1721 "stream_encoder.c"
       break L14;
      }
      $352 = $3; //@line 1722 "stream_encoder.c"
      $353 = HEAP32[$352>>2]|0; //@line 1722 "stream_encoder.c"
      $354 = ((($353)) + 40|0); //@line 1722 "stream_encoder.c"
      $355 = HEAP32[$354>>2]|0; //@line 1722 "stream_encoder.c"
      $356 = $9; //@line 1722 "stream_encoder.c"
      $357 = (($355) + ($356))|0; //@line 1722 "stream_encoder.c"
      $358 = ($357>>>0)<(32); //@line 1722 "stream_encoder.c"
      if (!($358)) {
       break L14;
      }
      $15 = 0; //@line 1724 "stream_encoder.c"
      while(1) {
       $359 = $15; //@line 1724 "stream_encoder.c"
       $360 = $9; //@line 1724 "stream_encoder.c"
       $361 = ($359|0)<($360|0); //@line 1724 "stream_encoder.c"
       if (!($361)) {
        break L14;
       }
       $362 = $14; //@line 1725 "stream_encoder.c"
       $363 = $3; //@line 1725 "stream_encoder.c"
       $364 = HEAP32[$363>>2]|0; //@line 1725 "stream_encoder.c"
       $365 = ((($364)) + 44|0); //@line 1725 "stream_encoder.c"
       $366 = $3; //@line 1725 "stream_encoder.c"
       $367 = HEAP32[$366>>2]|0; //@line 1725 "stream_encoder.c"
       $368 = ((($367)) + 40|0); //@line 1725 "stream_encoder.c"
       $369 = HEAP32[$368>>2]|0; //@line 1725 "stream_encoder.c"
       $370 = (($365) + ($369<<4)|0); //@line 1725 "stream_encoder.c"
       $371 = ((($370)) + 4|0); //@line 1725 "stream_encoder.c"
       HEAPF32[$371>>2] = $362; //@line 1725 "stream_encoder.c"
       $372 = $15; //@line 1726 "stream_encoder.c"
       $373 = (+($372|0)); //@line 1726 "stream_encoder.c"
       $374 = $9; //@line 1726 "stream_encoder.c"
       $375 = (+($374|0)); //@line 1726 "stream_encoder.c"
       $376 = $12; //@line 1726 "stream_encoder.c"
       $377 = $375 + $376; //@line 1726 "stream_encoder.c"
       $378 = $373 / $377; //@line 1726 "stream_encoder.c"
       $379 = $3; //@line 1726 "stream_encoder.c"
       $380 = HEAP32[$379>>2]|0; //@line 1726 "stream_encoder.c"
       $381 = ((($380)) + 44|0); //@line 1726 "stream_encoder.c"
       $382 = $3; //@line 1726 "stream_encoder.c"
       $383 = HEAP32[$382>>2]|0; //@line 1726 "stream_encoder.c"
       $384 = ((($383)) + 40|0); //@line 1726 "stream_encoder.c"
       $385 = HEAP32[$384>>2]|0; //@line 1726 "stream_encoder.c"
       $386 = (($381) + ($385<<4)|0); //@line 1726 "stream_encoder.c"
       $387 = ((($386)) + 4|0); //@line 1726 "stream_encoder.c"
       $388 = ((($387)) + 4|0); //@line 1726 "stream_encoder.c"
       HEAPF32[$388>>2] = $378; //@line 1726 "stream_encoder.c"
       $389 = $15; //@line 1727 "stream_encoder.c"
       $390 = (($389) + 1)|0; //@line 1727 "stream_encoder.c"
       $391 = (+($390|0)); //@line 1727 "stream_encoder.c"
       $392 = $12; //@line 1727 "stream_encoder.c"
       $393 = $391 + $392; //@line 1727 "stream_encoder.c"
       $394 = $9; //@line 1727 "stream_encoder.c"
       $395 = (+($394|0)); //@line 1727 "stream_encoder.c"
       $396 = $12; //@line 1727 "stream_encoder.c"
       $397 = $395 + $396; //@line 1727 "stream_encoder.c"
       $398 = $393 / $397; //@line 1727 "stream_encoder.c"
       $399 = $3; //@line 1727 "stream_encoder.c"
       $400 = HEAP32[$399>>2]|0; //@line 1727 "stream_encoder.c"
       $401 = ((($400)) + 44|0); //@line 1727 "stream_encoder.c"
       $402 = $3; //@line 1727 "stream_encoder.c"
       $403 = HEAP32[$402>>2]|0; //@line 1727 "stream_encoder.c"
       $404 = ((($403)) + 40|0); //@line 1727 "stream_encoder.c"
       $405 = HEAP32[$404>>2]|0; //@line 1727 "stream_encoder.c"
       $406 = (($401) + ($405<<4)|0); //@line 1727 "stream_encoder.c"
       $407 = ((($406)) + 4|0); //@line 1727 "stream_encoder.c"
       $408 = ((($407)) + 8|0); //@line 1727 "stream_encoder.c"
       HEAPF32[$408>>2] = $398; //@line 1727 "stream_encoder.c"
       $409 = $3; //@line 1728 "stream_encoder.c"
       $410 = HEAP32[$409>>2]|0; //@line 1728 "stream_encoder.c"
       $411 = ((($410)) + 44|0); //@line 1728 "stream_encoder.c"
       $412 = $3; //@line 1728 "stream_encoder.c"
       $413 = HEAP32[$412>>2]|0; //@line 1728 "stream_encoder.c"
       $414 = ((($413)) + 40|0); //@line 1728 "stream_encoder.c"
       $415 = HEAP32[$414>>2]|0; //@line 1728 "stream_encoder.c"
       $416 = (($415) + 1)|0; //@line 1728 "stream_encoder.c"
       HEAP32[$414>>2] = $416; //@line 1728 "stream_encoder.c"
       $417 = (($411) + ($415<<4)|0); //@line 1728 "stream_encoder.c"
       HEAP32[$417>>2] = 14; //@line 1728 "stream_encoder.c"
       $418 = $15; //@line 1724 "stream_encoder.c"
       $419 = (($418) + 1)|0; //@line 1724 "stream_encoder.c"
       $15 = $419; //@line 1724 "stream_encoder.c"
      }
     }
    } while(0);
    $420 = $6; //@line 1732 "stream_encoder.c"
    $421 = ($420>>>0)>(16); //@line 1732 "stream_encoder.c"
    do {
     if ($421) {
      $422 = $4; //@line 1732 "stream_encoder.c"
      $423 = (_strncmp(3338,$422,15)|0); //@line 1732 "stream_encoder.c"
      $424 = (0)==($423|0); //@line 1732 "stream_encoder.c"
      if (!($424)) {
       break;
      }
      $425 = $4; //@line 1733 "stream_encoder.c"
      $426 = ((($425)) + 15|0); //@line 1733 "stream_encoder.c"
      $427 = (+_strtod($426,0)); //@line 1733 "stream_encoder.c"
      $428 = (~~(($427))); //@line 1733 "stream_encoder.c"
      $16 = $428; //@line 1733 "stream_encoder.c"
      $429 = $4; //@line 1734 "stream_encoder.c"
      $430 = (_strchr($429,47)|0); //@line 1734 "stream_encoder.c"
      $17 = $430; //@line 1734 "stream_encoder.c"
      $431 = $17; //@line 1735 "stream_encoder.c"
      $432 = ($431|0)!=(0|0); //@line 1735 "stream_encoder.c"
      do {
       if ($432) {
        $433 = $17; //@line 1735 "stream_encoder.c"
        $434 = ((($433)) + 1|0); //@line 1735 "stream_encoder.c"
        $435 = (+_strtod($434,0)); //@line 1735 "stream_encoder.c"
        $436 = $435; //@line 1735 "stream_encoder.c"
        $437 = $436 < 0.99000000953674316; //@line 1735 "stream_encoder.c"
        if (!($437)) {
         $442 = 0.99000000953674316;
         break;
        }
        $438 = $17; //@line 1735 "stream_encoder.c"
        $439 = ((($438)) + 1|0); //@line 1735 "stream_encoder.c"
        $440 = (+_strtod($439,0)); //@line 1735 "stream_encoder.c"
        $441 = $440; //@line 1735 "stream_encoder.c"
        $442 = $441;
       } else {
        $442 = 0.20000000298023224;
       }
      } while(0);
      $18 = $442; //@line 1735 "stream_encoder.c"
      $443 = $18; //@line 1736 "stream_encoder.c"
      $444 = 1.0 - $443; //@line 1736 "stream_encoder.c"
      $445 = 1.0 / $444; //@line 1736 "stream_encoder.c"
      $446 = $445 - 1.0; //@line 1736 "stream_encoder.c"
      $19 = $446; //@line 1736 "stream_encoder.c"
      $447 = $17; //@line 1737 "stream_encoder.c"
      $448 = ($447|0)!=(0|0); //@line 1737 "stream_encoder.c"
      $449 = $17; //@line 1737 "stream_encoder.c"
      $450 = ((($449)) + 1|0); //@line 1737 "stream_encoder.c"
      $451 = $4; //@line 1737 "stream_encoder.c"
      $452 = $448 ? $450 : $451; //@line 1737 "stream_encoder.c"
      $453 = (_strchr($452,47)|0); //@line 1737 "stream_encoder.c"
      $20 = $453; //@line 1737 "stream_encoder.c"
      $454 = $20; //@line 1738 "stream_encoder.c"
      $455 = ($454|0)!=(0|0); //@line 1738 "stream_encoder.c"
      if ($455) {
       $456 = $20; //@line 1738 "stream_encoder.c"
       $457 = ((($456)) + 1|0); //@line 1738 "stream_encoder.c"
       $458 = (+_strtod($457,0)); //@line 1738 "stream_encoder.c"
       $459 = $458; //@line 1738 "stream_encoder.c"
       $460 = $459;
      } else {
       $460 = 0.20000000298023224;
      }
      $21 = $460; //@line 1738 "stream_encoder.c"
      $461 = $16; //@line 1740 "stream_encoder.c"
      $462 = ($461|0)<=(1); //@line 1740 "stream_encoder.c"
      if ($462) {
       $463 = $21; //@line 1741 "stream_encoder.c"
       $464 = $3; //@line 1741 "stream_encoder.c"
       $465 = HEAP32[$464>>2]|0; //@line 1741 "stream_encoder.c"
       $466 = ((($465)) + 44|0); //@line 1741 "stream_encoder.c"
       $467 = $3; //@line 1741 "stream_encoder.c"
       $468 = HEAP32[$467>>2]|0; //@line 1741 "stream_encoder.c"
       $469 = ((($468)) + 40|0); //@line 1741 "stream_encoder.c"
       $470 = HEAP32[$469>>2]|0; //@line 1741 "stream_encoder.c"
       $471 = (($466) + ($470<<4)|0); //@line 1741 "stream_encoder.c"
       $472 = ((($471)) + 4|0); //@line 1741 "stream_encoder.c"
       HEAPF32[$472>>2] = $463; //@line 1741 "stream_encoder.c"
       $473 = $3; //@line 1742 "stream_encoder.c"
       $474 = HEAP32[$473>>2]|0; //@line 1742 "stream_encoder.c"
       $475 = ((($474)) + 44|0); //@line 1742 "stream_encoder.c"
       $476 = $3; //@line 1742 "stream_encoder.c"
       $477 = HEAP32[$476>>2]|0; //@line 1742 "stream_encoder.c"
       $478 = ((($477)) + 40|0); //@line 1742 "stream_encoder.c"
       $479 = HEAP32[$478>>2]|0; //@line 1742 "stream_encoder.c"
       $480 = (($479) + 1)|0; //@line 1742 "stream_encoder.c"
       HEAP32[$478>>2] = $480; //@line 1742 "stream_encoder.c"
       $481 = (($475) + ($479<<4)|0); //@line 1742 "stream_encoder.c"
       HEAP32[$481>>2] = 13; //@line 1742 "stream_encoder.c"
       break L14;
      }
      $482 = $3; //@line 1743 "stream_encoder.c"
      $483 = HEAP32[$482>>2]|0; //@line 1743 "stream_encoder.c"
      $484 = ((($483)) + 40|0); //@line 1743 "stream_encoder.c"
      $485 = HEAP32[$484>>2]|0; //@line 1743 "stream_encoder.c"
      $486 = $16; //@line 1743 "stream_encoder.c"
      $487 = (($485) + ($486))|0; //@line 1743 "stream_encoder.c"
      $488 = ($487>>>0)<(32); //@line 1743 "stream_encoder.c"
      if (!($488)) {
       break L14;
      }
      $22 = 0; //@line 1745 "stream_encoder.c"
      while(1) {
       $489 = $22; //@line 1745 "stream_encoder.c"
       $490 = $16; //@line 1745 "stream_encoder.c"
       $491 = ($489|0)<($490|0); //@line 1745 "stream_encoder.c"
       if (!($491)) {
        break L14;
       }
       $492 = $21; //@line 1746 "stream_encoder.c"
       $493 = $3; //@line 1746 "stream_encoder.c"
       $494 = HEAP32[$493>>2]|0; //@line 1746 "stream_encoder.c"
       $495 = ((($494)) + 44|0); //@line 1746 "stream_encoder.c"
       $496 = $3; //@line 1746 "stream_encoder.c"
       $497 = HEAP32[$496>>2]|0; //@line 1746 "stream_encoder.c"
       $498 = ((($497)) + 40|0); //@line 1746 "stream_encoder.c"
       $499 = HEAP32[$498>>2]|0; //@line 1746 "stream_encoder.c"
       $500 = (($495) + ($499<<4)|0); //@line 1746 "stream_encoder.c"
       $501 = ((($500)) + 4|0); //@line 1746 "stream_encoder.c"
       HEAPF32[$501>>2] = $492; //@line 1746 "stream_encoder.c"
       $502 = $22; //@line 1747 "stream_encoder.c"
       $503 = (+($502|0)); //@line 1747 "stream_encoder.c"
       $504 = $16; //@line 1747 "stream_encoder.c"
       $505 = (+($504|0)); //@line 1747 "stream_encoder.c"
       $506 = $19; //@line 1747 "stream_encoder.c"
       $507 = $505 + $506; //@line 1747 "stream_encoder.c"
       $508 = $503 / $507; //@line 1747 "stream_encoder.c"
       $509 = $3; //@line 1747 "stream_encoder.c"
       $510 = HEAP32[$509>>2]|0; //@line 1747 "stream_encoder.c"
       $511 = ((($510)) + 44|0); //@line 1747 "stream_encoder.c"
       $512 = $3; //@line 1747 "stream_encoder.c"
       $513 = HEAP32[$512>>2]|0; //@line 1747 "stream_encoder.c"
       $514 = ((($513)) + 40|0); //@line 1747 "stream_encoder.c"
       $515 = HEAP32[$514>>2]|0; //@line 1747 "stream_encoder.c"
       $516 = (($511) + ($515<<4)|0); //@line 1747 "stream_encoder.c"
       $517 = ((($516)) + 4|0); //@line 1747 "stream_encoder.c"
       $518 = ((($517)) + 4|0); //@line 1747 "stream_encoder.c"
       HEAPF32[$518>>2] = $508; //@line 1747 "stream_encoder.c"
       $519 = $22; //@line 1748 "stream_encoder.c"
       $520 = (($519) + 1)|0; //@line 1748 "stream_encoder.c"
       $521 = (+($520|0)); //@line 1748 "stream_encoder.c"
       $522 = $19; //@line 1748 "stream_encoder.c"
       $523 = $521 + $522; //@line 1748 "stream_encoder.c"
       $524 = $16; //@line 1748 "stream_encoder.c"
       $525 = (+($524|0)); //@line 1748 "stream_encoder.c"
       $526 = $19; //@line 1748 "stream_encoder.c"
       $527 = $525 + $526; //@line 1748 "stream_encoder.c"
       $528 = $523 / $527; //@line 1748 "stream_encoder.c"
       $529 = $3; //@line 1748 "stream_encoder.c"
       $530 = HEAP32[$529>>2]|0; //@line 1748 "stream_encoder.c"
       $531 = ((($530)) + 44|0); //@line 1748 "stream_encoder.c"
       $532 = $3; //@line 1748 "stream_encoder.c"
       $533 = HEAP32[$532>>2]|0; //@line 1748 "stream_encoder.c"
       $534 = ((($533)) + 40|0); //@line 1748 "stream_encoder.c"
       $535 = HEAP32[$534>>2]|0; //@line 1748 "stream_encoder.c"
       $536 = (($531) + ($535<<4)|0); //@line 1748 "stream_encoder.c"
       $537 = ((($536)) + 4|0); //@line 1748 "stream_encoder.c"
       $538 = ((($537)) + 8|0); //@line 1748 "stream_encoder.c"
       HEAPF32[$538>>2] = $528; //@line 1748 "stream_encoder.c"
       $539 = $3; //@line 1749 "stream_encoder.c"
       $540 = HEAP32[$539>>2]|0; //@line 1749 "stream_encoder.c"
       $541 = ((($540)) + 44|0); //@line 1749 "stream_encoder.c"
       $542 = $3; //@line 1749 "stream_encoder.c"
       $543 = HEAP32[$542>>2]|0; //@line 1749 "stream_encoder.c"
       $544 = ((($543)) + 40|0); //@line 1749 "stream_encoder.c"
       $545 = HEAP32[$544>>2]|0; //@line 1749 "stream_encoder.c"
       $546 = (($545) + 1)|0; //@line 1749 "stream_encoder.c"
       HEAP32[$544>>2] = $546; //@line 1749 "stream_encoder.c"
       $547 = (($541) + ($545<<4)|0); //@line 1749 "stream_encoder.c"
       HEAP32[$547>>2] = 15; //@line 1749 "stream_encoder.c"
       $548 = $22; //@line 1745 "stream_encoder.c"
       $549 = (($548) + 1)|0; //@line 1745 "stream_encoder.c"
       $22 = $549; //@line 1745 "stream_encoder.c"
      }
     }
    } while(0);
    $550 = $6; //@line 1753 "stream_encoder.c"
    $551 = ($550|0)==(5); //@line 1753 "stream_encoder.c"
    if (!($551)) {
     break;
    }
    $552 = $4; //@line 1753 "stream_encoder.c"
    $553 = $6; //@line 1753 "stream_encoder.c"
    $554 = (_strncmp(3354,$552,$553)|0); //@line 1753 "stream_encoder.c"
    $555 = (0)==($554|0); //@line 1753 "stream_encoder.c"
    if (!($555)) {
     break;
    }
    $556 = $3; //@line 1754 "stream_encoder.c"
    $557 = HEAP32[$556>>2]|0; //@line 1754 "stream_encoder.c"
    $558 = ((($557)) + 44|0); //@line 1754 "stream_encoder.c"
    $559 = $3; //@line 1754 "stream_encoder.c"
    $560 = HEAP32[$559>>2]|0; //@line 1754 "stream_encoder.c"
    $561 = ((($560)) + 40|0); //@line 1754 "stream_encoder.c"
    $562 = HEAP32[$561>>2]|0; //@line 1754 "stream_encoder.c"
    $563 = (($562) + 1)|0; //@line 1754 "stream_encoder.c"
    HEAP32[$561>>2] = $563; //@line 1754 "stream_encoder.c"
    $564 = (($558) + ($562<<4)|0); //@line 1754 "stream_encoder.c"
    HEAP32[$564>>2] = 16; //@line 1754 "stream_encoder.c"
   }
  } while(0);
  $565 = $3; //@line 1755 "stream_encoder.c"
  $566 = HEAP32[$565>>2]|0; //@line 1755 "stream_encoder.c"
  $567 = ((($566)) + 40|0); //@line 1755 "stream_encoder.c"
  $568 = HEAP32[$567>>2]|0; //@line 1755 "stream_encoder.c"
  $569 = ($568|0)!=(32); //@line 1755 "stream_encoder.c"
  $570 = $5; //@line 1757 "stream_encoder.c"
  $571 = ($570|0)!=(0|0); //@line 1757 "stream_encoder.c"
  $or$cond = $569 & $571; //@line 1755 "stream_encoder.c"
  if (!($or$cond)) {
   break;
  }
  $572 = $5; //@line 1758 "stream_encoder.c"
  $573 = ((($572)) + 1|0); //@line 1758 "stream_encoder.c"
  $4 = $573; //@line 1758 "stream_encoder.c"
 }
 $574 = $3; //@line 1762 "stream_encoder.c"
 $575 = HEAP32[$574>>2]|0; //@line 1762 "stream_encoder.c"
 $576 = ((($575)) + 40|0); //@line 1762 "stream_encoder.c"
 $577 = HEAP32[$576>>2]|0; //@line 1762 "stream_encoder.c"
 $578 = ($577|0)==(0); //@line 1762 "stream_encoder.c"
 if ($578) {
  $579 = $3; //@line 1763 "stream_encoder.c"
  $580 = HEAP32[$579>>2]|0; //@line 1763 "stream_encoder.c"
  $581 = ((($580)) + 40|0); //@line 1763 "stream_encoder.c"
  HEAP32[$581>>2] = 1; //@line 1763 "stream_encoder.c"
  $582 = $3; //@line 1764 "stream_encoder.c"
  $583 = HEAP32[$582>>2]|0; //@line 1764 "stream_encoder.c"
  $584 = ((($583)) + 44|0); //@line 1764 "stream_encoder.c"
  HEAP32[$584>>2] = 13; //@line 1764 "stream_encoder.c"
  $585 = $3; //@line 1765 "stream_encoder.c"
  $586 = HEAP32[$585>>2]|0; //@line 1765 "stream_encoder.c"
  $587 = ((($586)) + 44|0); //@line 1765 "stream_encoder.c"
  $588 = ((($587)) + 4|0); //@line 1765 "stream_encoder.c"
  HEAPF32[$588>>2] = 0.5; //@line 1765 "stream_encoder.c"
 }
 $2 = 1; //@line 1768 "stream_encoder.c"
 $589 = $2; //@line 1769 "stream_encoder.c"
 STACKTOP = sp;return ($589|0); //@line 1769 "stream_encoder.c"
}
function _FLAC__stream_encoder_set_max_lpc_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1776 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1776 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1776 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1776 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1777 "stream_encoder.c"
  $13 = $2; //@line 1780 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1780 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1778 "stream_encoder.c"
  $10 = $3; //@line 1778 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1778 "stream_encoder.c"
  $12 = ((($11)) + 556|0); //@line 1778 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1778 "stream_encoder.c"
  $2 = 1; //@line 1779 "stream_encoder.c"
  $13 = $2; //@line 1780 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1780 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_qlp_coeff_precision($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1787 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1787 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1787 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1787 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1788 "stream_encoder.c"
  $13 = $2; //@line 1791 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1791 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1789 "stream_encoder.c"
  $10 = $3; //@line 1789 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1789 "stream_encoder.c"
  $12 = ((($11)) + 560|0); //@line 1789 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1789 "stream_encoder.c"
  $2 = 1; //@line 1790 "stream_encoder.c"
  $13 = $2; //@line 1791 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1791 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_do_qlp_coeff_prec_search($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1798 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1798 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1798 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1798 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1799 "stream_encoder.c"
  $13 = $2; //@line 1802 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1802 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1800 "stream_encoder.c"
  $10 = $3; //@line 1800 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1800 "stream_encoder.c"
  $12 = ((($11)) + 564|0); //@line 1800 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1800 "stream_encoder.c"
  $2 = 1; //@line 1801 "stream_encoder.c"
  $13 = $2; //@line 1802 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1802 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_do_escape_coding($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1809 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1809 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1809 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1809 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1810 "stream_encoder.c"
 } else {
  $2 = 1; //@line 1817 "stream_encoder.c"
 }
 $9 = $2; //@line 1818 "stream_encoder.c"
 STACKTOP = sp;return ($9|0); //@line 1818 "stream_encoder.c"
}
function _FLAC__stream_encoder_set_do_exhaustive_model_search($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1825 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1825 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1825 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1825 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1826 "stream_encoder.c"
  $13 = $2; //@line 1829 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1829 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1827 "stream_encoder.c"
  $10 = $3; //@line 1827 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1827 "stream_encoder.c"
  $12 = ((($11)) + 568|0); //@line 1827 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1827 "stream_encoder.c"
  $2 = 1; //@line 1828 "stream_encoder.c"
  $13 = $2; //@line 1829 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1829 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_min_residual_partition_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1836 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1836 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1836 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1836 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1837 "stream_encoder.c"
  $13 = $2; //@line 1840 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1840 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1838 "stream_encoder.c"
  $10 = $3; //@line 1838 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1838 "stream_encoder.c"
  $12 = ((($11)) + 576|0); //@line 1838 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1838 "stream_encoder.c"
  $2 = 1; //@line 1839 "stream_encoder.c"
  $13 = $2; //@line 1840 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1840 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_max_residual_partition_order($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1847 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1847 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1847 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1847 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1848 "stream_encoder.c"
  $13 = $2; //@line 1851 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1851 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1849 "stream_encoder.c"
  $10 = $3; //@line 1849 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1849 "stream_encoder.c"
  $12 = ((($11)) + 580|0); //@line 1849 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1849 "stream_encoder.c"
  $2 = 1; //@line 1850 "stream_encoder.c"
  $13 = $2; //@line 1851 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1851 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_rice_parameter_search_dist($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1858 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1858 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1858 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1858 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1859 "stream_encoder.c"
 } else {
  $2 = 1; //@line 1866 "stream_encoder.c"
 }
 $9 = $2; //@line 1867 "stream_encoder.c"
 STACKTOP = sp;return ($9|0); //@line 1867 "stream_encoder.c"
}
function _FLAC__stream_encoder_delete($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1; //@line 580 "stream_encoder.c"
 $4 = ($3|0)==(0|0); //@line 580 "stream_encoder.c"
 if ($4) {
  STACKTOP = sp;return; //@line 609 "stream_encoder.c"
 }
 $5 = $1; //@line 587 "stream_encoder.c"
 $6 = ((($5)) + 4|0); //@line 587 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 587 "stream_encoder.c"
 $8 = ((($7)) + 11872|0); //@line 587 "stream_encoder.c"
 HEAP32[$8>>2] = 1; //@line 587 "stream_encoder.c"
 $9 = $1; //@line 589 "stream_encoder.c"
 (_FLAC__stream_encoder_finish($9)|0); //@line 589 "stream_encoder.c"
 $10 = $1; //@line 591 "stream_encoder.c"
 $11 = ((($10)) + 4|0); //@line 591 "stream_encoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 591 "stream_encoder.c"
 $13 = ((($12)) + 11776|0); //@line 591 "stream_encoder.c"
 $14 = HEAP32[$13>>2]|0; //@line 591 "stream_encoder.c"
 $15 = (0|0)!=($14|0); //@line 591 "stream_encoder.c"
 if ($15) {
  $16 = $1; //@line 592 "stream_encoder.c"
  $17 = ((($16)) + 4|0); //@line 592 "stream_encoder.c"
  $18 = HEAP32[$17>>2]|0; //@line 592 "stream_encoder.c"
  $19 = ((($18)) + 11776|0); //@line 592 "stream_encoder.c"
  $20 = HEAP32[$19>>2]|0; //@line 592 "stream_encoder.c"
  _FLAC__stream_decoder_delete($20); //@line 592 "stream_encoder.c"
 }
 $2 = 0; //@line 594 "stream_encoder.c"
 while(1) {
  $21 = $2; //@line 594 "stream_encoder.c"
  $22 = ($21>>>0)<(8); //@line 594 "stream_encoder.c"
  if (!($22)) {
   break;
  }
  $23 = $1; //@line 595 "stream_encoder.c"
  $24 = ((($23)) + 4|0); //@line 595 "stream_encoder.c"
  $25 = HEAP32[$24>>2]|0; //@line 595 "stream_encoder.c"
  $26 = ((($25)) + 6256|0); //@line 595 "stream_encoder.c"
  $27 = $2; //@line 595 "stream_encoder.c"
  $28 = (($26) + (($27*24)|0)|0); //@line 595 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($28); //@line 595 "stream_encoder.c"
  $29 = $1; //@line 596 "stream_encoder.c"
  $30 = ((($29)) + 4|0); //@line 596 "stream_encoder.c"
  $31 = HEAP32[$30>>2]|0; //@line 596 "stream_encoder.c"
  $32 = ((($31)) + 6256|0); //@line 596 "stream_encoder.c"
  $33 = $2; //@line 596 "stream_encoder.c"
  $34 = (($32) + (($33*24)|0)|0); //@line 596 "stream_encoder.c"
  $35 = ((($34)) + 12|0); //@line 596 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($35); //@line 596 "stream_encoder.c"
  $36 = $2; //@line 594 "stream_encoder.c"
  $37 = (($36) + 1)|0; //@line 594 "stream_encoder.c"
  $2 = $37; //@line 594 "stream_encoder.c"
 }
 $2 = 0; //@line 598 "stream_encoder.c"
 while(1) {
  $38 = $2; //@line 598 "stream_encoder.c"
  $39 = ($38>>>0)<(2); //@line 598 "stream_encoder.c"
  if (!($39)) {
   break;
  }
  $40 = $1; //@line 599 "stream_encoder.c"
  $41 = ((($40)) + 4|0); //@line 599 "stream_encoder.c"
  $42 = HEAP32[$41>>2]|0; //@line 599 "stream_encoder.c"
  $43 = ((($42)) + 6448|0); //@line 599 "stream_encoder.c"
  $44 = $2; //@line 599 "stream_encoder.c"
  $45 = (($43) + (($44*24)|0)|0); //@line 599 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($45); //@line 599 "stream_encoder.c"
  $46 = $1; //@line 600 "stream_encoder.c"
  $47 = ((($46)) + 4|0); //@line 600 "stream_encoder.c"
  $48 = HEAP32[$47>>2]|0; //@line 600 "stream_encoder.c"
  $49 = ((($48)) + 6448|0); //@line 600 "stream_encoder.c"
  $50 = $2; //@line 600 "stream_encoder.c"
  $51 = (($49) + (($50*24)|0)|0); //@line 600 "stream_encoder.c"
  $52 = ((($51)) + 12|0); //@line 600 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($52); //@line 600 "stream_encoder.c"
  $53 = $2; //@line 598 "stream_encoder.c"
  $54 = (($53) + 1)|0; //@line 598 "stream_encoder.c"
  $2 = $54; //@line 598 "stream_encoder.c"
 }
 $2 = 0; //@line 602 "stream_encoder.c"
 while(1) {
  $55 = $2; //@line 602 "stream_encoder.c"
  $56 = ($55>>>0)<(2); //@line 602 "stream_encoder.c"
  $57 = $1;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  if (!($56)) {
   break;
  }
  $60 = ((($59)) + 11748|0); //@line 603 "stream_encoder.c"
  $61 = $2; //@line 603 "stream_encoder.c"
  $62 = (($60) + (($61*12)|0)|0); //@line 603 "stream_encoder.c"
  _FLAC__format_entropy_coding_method_partitioned_rice_contents_clear($62); //@line 603 "stream_encoder.c"
  $63 = $2; //@line 602 "stream_encoder.c"
  $64 = (($63) + 1)|0; //@line 602 "stream_encoder.c"
  $2 = $64; //@line 602 "stream_encoder.c"
 }
 $65 = ((($59)) + 6856|0); //@line 605 "stream_encoder.c"
 $66 = HEAP32[$65>>2]|0; //@line 605 "stream_encoder.c"
 _FLAC__bitwriter_delete($66); //@line 605 "stream_encoder.c"
 $67 = $1; //@line 606 "stream_encoder.c"
 $68 = ((($67)) + 4|0); //@line 606 "stream_encoder.c"
 $69 = HEAP32[$68>>2]|0; //@line 606 "stream_encoder.c"
 _free($69); //@line 606 "stream_encoder.c"
 $70 = $1; //@line 607 "stream_encoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 607 "stream_encoder.c"
 _free($71); //@line 607 "stream_encoder.c"
 $72 = $1; //@line 608 "stream_encoder.c"
 _free($72); //@line 608 "stream_encoder.c"
 STACKTOP = sp;return; //@line 609 "stream_encoder.c"
}
function _FLAC__stream_encoder_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0; //@line 1440 "stream_encoder.c"
 $5 = $2; //@line 1446 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1446 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1446 "stream_encoder.c"
 $8 = ($7|0)==(1); //@line 1446 "stream_encoder.c"
 if ($8) {
  $1 = 1; //@line 1447 "stream_encoder.c"
  $159 = $1; //@line 1504 "stream_encoder.c"
  STACKTOP = sp;return ($159|0); //@line 1504 "stream_encoder.c"
 }
 $9 = $2; //@line 1449 "stream_encoder.c"
 $10 = HEAP32[$9>>2]|0; //@line 1449 "stream_encoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 1449 "stream_encoder.c"
 $12 = ($11|0)==(0); //@line 1449 "stream_encoder.c"
 if ($12) {
  $13 = $2; //@line 1449 "stream_encoder.c"
  $14 = ((($13)) + 4|0); //@line 1449 "stream_encoder.c"
  $15 = HEAP32[$14>>2]|0; //@line 1449 "stream_encoder.c"
  $16 = ((($15)) + 11872|0); //@line 1449 "stream_encoder.c"
  $17 = HEAP32[$16>>2]|0; //@line 1449 "stream_encoder.c"
  $18 = ($17|0)!=(0); //@line 1449 "stream_encoder.c"
  if (!($18)) {
   $19 = $2; //@line 1450 "stream_encoder.c"
   $20 = ((($19)) + 4|0); //@line 1450 "stream_encoder.c"
   $21 = HEAP32[$20>>2]|0; //@line 1450 "stream_encoder.c"
   $22 = ((($21)) + 7052|0); //@line 1450 "stream_encoder.c"
   $23 = HEAP32[$22>>2]|0; //@line 1450 "stream_encoder.c"
   $24 = ($23|0)!=(0); //@line 1450 "stream_encoder.c"
   if ($24) {
    $25 = $2; //@line 1451 "stream_encoder.c"
    $26 = HEAP32[$25>>2]|0; //@line 1451 "stream_encoder.c"
    $27 = ((($26)) + 36|0); //@line 1451 "stream_encoder.c"
    $28 = HEAP32[$27>>2]|0; //@line 1451 "stream_encoder.c"
    $29 = $2; //@line 1451 "stream_encoder.c"
    $30 = ((($29)) + 4|0); //@line 1451 "stream_encoder.c"
    $31 = HEAP32[$30>>2]|0; //@line 1451 "stream_encoder.c"
    $32 = ((($31)) + 7052|0); //@line 1451 "stream_encoder.c"
    $33 = HEAP32[$32>>2]|0; //@line 1451 "stream_encoder.c"
    $34 = ($28|0)!=($33|0); //@line 1451 "stream_encoder.c"
    $35 = $34&1; //@line 1451 "stream_encoder.c"
    $4 = $35; //@line 1451 "stream_encoder.c"
    $36 = $2; //@line 1452 "stream_encoder.c"
    $37 = ((($36)) + 4|0); //@line 1452 "stream_encoder.c"
    $38 = HEAP32[$37>>2]|0; //@line 1452 "stream_encoder.c"
    $39 = ((($38)) + 7052|0); //@line 1452 "stream_encoder.c"
    $40 = HEAP32[$39>>2]|0; //@line 1452 "stream_encoder.c"
    $41 = $2; //@line 1452 "stream_encoder.c"
    $42 = HEAP32[$41>>2]|0; //@line 1452 "stream_encoder.c"
    $43 = ((($42)) + 36|0); //@line 1452 "stream_encoder.c"
    HEAP32[$43>>2] = $40; //@line 1452 "stream_encoder.c"
    $44 = $2; //@line 1453 "stream_encoder.c"
    $45 = $4; //@line 1453 "stream_encoder.c"
    $46 = (_process_frame_($44,$45,1)|0); //@line 1453 "stream_encoder.c"
    $47 = ($46|0)!=(0); //@line 1453 "stream_encoder.c"
    if (!($47)) {
     $3 = 1; //@line 1454 "stream_encoder.c"
    }
   }
  }
 }
 $48 = $2; //@line 1458 "stream_encoder.c"
 $49 = HEAP32[$48>>2]|0; //@line 1458 "stream_encoder.c"
 $50 = ((($49)) + 12|0); //@line 1458 "stream_encoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 1458 "stream_encoder.c"
 $52 = ($51|0)!=(0); //@line 1458 "stream_encoder.c"
 if ($52) {
  $53 = $2; //@line 1459 "stream_encoder.c"
  $54 = ((($53)) + 4|0); //@line 1459 "stream_encoder.c"
  $55 = HEAP32[$54>>2]|0; //@line 1459 "stream_encoder.c"
  $56 = ((($55)) + 6872|0); //@line 1459 "stream_encoder.c"
  $57 = ((($56)) + 16|0); //@line 1459 "stream_encoder.c"
  $58 = ((($57)) + 40|0); //@line 1459 "stream_encoder.c"
  $59 = $2; //@line 1459 "stream_encoder.c"
  $60 = ((($59)) + 4|0); //@line 1459 "stream_encoder.c"
  $61 = HEAP32[$60>>2]|0; //@line 1459 "stream_encoder.c"
  $62 = ((($61)) + 7060|0); //@line 1459 "stream_encoder.c"
  _FLAC__MD5Final($58,$62); //@line 1459 "stream_encoder.c"
 }
 $63 = $2; //@line 1461 "stream_encoder.c"
 $64 = ((($63)) + 4|0); //@line 1461 "stream_encoder.c"
 $65 = HEAP32[$64>>2]|0; //@line 1461 "stream_encoder.c"
 $66 = ((($65)) + 11872|0); //@line 1461 "stream_encoder.c"
 $67 = HEAP32[$66>>2]|0; //@line 1461 "stream_encoder.c"
 $68 = ($67|0)!=(0); //@line 1461 "stream_encoder.c"
 if (!($68)) {
  $69 = $2; //@line 1462 "stream_encoder.c"
  $70 = HEAP32[$69>>2]|0; //@line 1462 "stream_encoder.c"
  $71 = HEAP32[$70>>2]|0; //@line 1462 "stream_encoder.c"
  $72 = ($71|0)==(0); //@line 1462 "stream_encoder.c"
  if ($72) {
   $73 = $2; //@line 1463 "stream_encoder.c"
   $74 = ((($73)) + 4|0); //@line 1463 "stream_encoder.c"
   $75 = HEAP32[$74>>2]|0; //@line 1463 "stream_encoder.c"
   $76 = ((($75)) + 7292|0); //@line 1463 "stream_encoder.c"
   $77 = HEAP32[$76>>2]|0; //@line 1463 "stream_encoder.c"
   $78 = ($77|0)!=(0|0); //@line 1463 "stream_encoder.c"
   if ($78) {
    $79 = $2; //@line 1469 "stream_encoder.c"
    _update_metadata_($79); //@line 1469 "stream_encoder.c"
    $80 = $2; //@line 1472 "stream_encoder.c"
    $81 = HEAP32[$80>>2]|0; //@line 1472 "stream_encoder.c"
    $82 = HEAP32[$81>>2]|0; //@line 1472 "stream_encoder.c"
    $83 = ($82|0)!=(0); //@line 1472 "stream_encoder.c"
    if ($83) {
     $3 = 1; //@line 1473 "stream_encoder.c"
    }
   }
   $84 = $2; //@line 1475 "stream_encoder.c"
   $85 = ((($84)) + 4|0); //@line 1475 "stream_encoder.c"
   $86 = HEAP32[$85>>2]|0; //@line 1475 "stream_encoder.c"
   $87 = ((($86)) + 7304|0); //@line 1475 "stream_encoder.c"
   $88 = HEAP32[$87>>2]|0; //@line 1475 "stream_encoder.c"
   $89 = ($88|0)!=(0|0); //@line 1475 "stream_encoder.c"
   if ($89) {
    $90 = $2; //@line 1476 "stream_encoder.c"
    $91 = ((($90)) + 4|0); //@line 1476 "stream_encoder.c"
    $92 = HEAP32[$91>>2]|0; //@line 1476 "stream_encoder.c"
    $93 = ((($92)) + 7304|0); //@line 1476 "stream_encoder.c"
    $94 = HEAP32[$93>>2]|0; //@line 1476 "stream_encoder.c"
    $95 = $2; //@line 1476 "stream_encoder.c"
    $96 = $2; //@line 1476 "stream_encoder.c"
    $97 = ((($96)) + 4|0); //@line 1476 "stream_encoder.c"
    $98 = HEAP32[$97>>2]|0; //@line 1476 "stream_encoder.c"
    $99 = ((($98)) + 6872|0); //@line 1476 "stream_encoder.c"
    $100 = $2; //@line 1476 "stream_encoder.c"
    $101 = ((($100)) + 4|0); //@line 1476 "stream_encoder.c"
    $102 = HEAP32[$101>>2]|0; //@line 1476 "stream_encoder.c"
    $103 = ((($102)) + 7312|0); //@line 1476 "stream_encoder.c"
    $104 = HEAP32[$103>>2]|0; //@line 1476 "stream_encoder.c"
    FUNCTION_TABLE_viii[$94 & 31]($95,$99,$104); //@line 1476 "stream_encoder.c"
   }
  }
  $105 = $2; //@line 1479 "stream_encoder.c"
  $106 = HEAP32[$105>>2]|0; //@line 1479 "stream_encoder.c"
  $107 = ((($106)) + 4|0); //@line 1479 "stream_encoder.c"
  $108 = HEAP32[$107>>2]|0; //@line 1479 "stream_encoder.c"
  $109 = ($108|0)!=(0); //@line 1479 "stream_encoder.c"
  if ($109) {
   $110 = $2; //@line 1479 "stream_encoder.c"
   $111 = ((($110)) + 4|0); //@line 1479 "stream_encoder.c"
   $112 = HEAP32[$111>>2]|0; //@line 1479 "stream_encoder.c"
   $113 = ((($112)) + 11776|0); //@line 1479 "stream_encoder.c"
   $114 = HEAP32[$113>>2]|0; //@line 1479 "stream_encoder.c"
   $115 = (0|0)!=($114|0); //@line 1479 "stream_encoder.c"
   if ($115) {
    $116 = $2; //@line 1479 "stream_encoder.c"
    $117 = ((($116)) + 4|0); //@line 1479 "stream_encoder.c"
    $118 = HEAP32[$117>>2]|0; //@line 1479 "stream_encoder.c"
    $119 = ((($118)) + 11776|0); //@line 1479 "stream_encoder.c"
    $120 = HEAP32[$119>>2]|0; //@line 1479 "stream_encoder.c"
    $121 = (_FLAC__stream_decoder_finish($120)|0); //@line 1479 "stream_encoder.c"
    $122 = ($121|0)!=(0); //@line 1479 "stream_encoder.c"
    if (!($122)) {
     $123 = $3; //@line 1480 "stream_encoder.c"
     $124 = ($123|0)!=(0); //@line 1480 "stream_encoder.c"
     if (!($124)) {
      $125 = $2; //@line 1481 "stream_encoder.c"
      $126 = HEAP32[$125>>2]|0; //@line 1481 "stream_encoder.c"
      HEAP32[$126>>2] = 4; //@line 1481 "stream_encoder.c"
     }
     $3 = 1; //@line 1482 "stream_encoder.c"
    }
   }
  }
 }
 $127 = $2; //@line 1486 "stream_encoder.c"
 $128 = ((($127)) + 4|0); //@line 1486 "stream_encoder.c"
 $129 = HEAP32[$128>>2]|0; //@line 1486 "stream_encoder.c"
 $130 = ((($129)) + 7320|0); //@line 1486 "stream_encoder.c"
 $131 = HEAP32[$130>>2]|0; //@line 1486 "stream_encoder.c"
 $132 = (0|0)!=($131|0); //@line 1486 "stream_encoder.c"
 if ($132) {
  $133 = $2; //@line 1487 "stream_encoder.c"
  $134 = ((($133)) + 4|0); //@line 1487 "stream_encoder.c"
  $135 = HEAP32[$134>>2]|0; //@line 1487 "stream_encoder.c"
  $136 = ((($135)) + 7320|0); //@line 1487 "stream_encoder.c"
  $137 = HEAP32[$136>>2]|0; //@line 1487 "stream_encoder.c"
  $138 = HEAP32[412]|0; //@line 1487 "stream_encoder.c"
  $139 = ($137|0)!=($138|0); //@line 1487 "stream_encoder.c"
  if ($139) {
   $140 = $2; //@line 1488 "stream_encoder.c"
   $141 = ((($140)) + 4|0); //@line 1488 "stream_encoder.c"
   $142 = HEAP32[$141>>2]|0; //@line 1488 "stream_encoder.c"
   $143 = ((($142)) + 7320|0); //@line 1488 "stream_encoder.c"
   $144 = HEAP32[$143>>2]|0; //@line 1488 "stream_encoder.c"
   (_fclose($144)|0); //@line 1488 "stream_encoder.c"
  }
  $145 = $2; //@line 1489 "stream_encoder.c"
  $146 = ((($145)) + 4|0); //@line 1489 "stream_encoder.c"
  $147 = HEAP32[$146>>2]|0; //@line 1489 "stream_encoder.c"
  $148 = ((($147)) + 7320|0); //@line 1489 "stream_encoder.c"
  HEAP32[$148>>2] = 0; //@line 1489 "stream_encoder.c"
 }
 $149 = $2; //@line 1497 "stream_encoder.c"
 _free_($149); //@line 1497 "stream_encoder.c"
 $150 = $2; //@line 1498 "stream_encoder.c"
 _set_defaults__215($150); //@line 1498 "stream_encoder.c"
 $151 = $3; //@line 1500 "stream_encoder.c"
 $152 = ($151|0)!=(0); //@line 1500 "stream_encoder.c"
 if (!($152)) {
  $153 = $2; //@line 1501 "stream_encoder.c"
  $154 = HEAP32[$153>>2]|0; //@line 1501 "stream_encoder.c"
  HEAP32[$154>>2] = 1; //@line 1501 "stream_encoder.c"
 }
 $155 = $3; //@line 1503 "stream_encoder.c"
 $156 = ($155|0)!=(0); //@line 1503 "stream_encoder.c"
 $157 = $156 ^ 1; //@line 1503 "stream_encoder.c"
 $158 = $157&1; //@line 1503 "stream_encoder.c"
 $1 = $158; //@line 1503 "stream_encoder.c"
 $159 = $1; //@line 1504 "stream_encoder.c"
 STACKTOP = sp;return ($159|0); //@line 1504 "stream_encoder.c"
}
function _process_frame_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4; //@line 3056 "stream_encoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 3056 "stream_encoder.c"
 $10 = ((($9)) + 12|0); //@line 3056 "stream_encoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 3056 "stream_encoder.c"
 $12 = ($11|0)!=(0); //@line 3056 "stream_encoder.c"
 if ($12) {
  $13 = $4; //@line 3056 "stream_encoder.c"
  $14 = ((($13)) + 4|0); //@line 3056 "stream_encoder.c"
  $15 = HEAP32[$14>>2]|0; //@line 3056 "stream_encoder.c"
  $16 = ((($15)) + 7060|0); //@line 3056 "stream_encoder.c"
  $17 = $4; //@line 3056 "stream_encoder.c"
  $18 = ((($17)) + 4|0); //@line 3056 "stream_encoder.c"
  $19 = HEAP32[$18>>2]|0; //@line 3056 "stream_encoder.c"
  $20 = ((($19)) + 4|0); //@line 3056 "stream_encoder.c"
  $21 = $4; //@line 3056 "stream_encoder.c"
  $22 = HEAP32[$21>>2]|0; //@line 3056 "stream_encoder.c"
  $23 = ((($22)) + 24|0); //@line 3056 "stream_encoder.c"
  $24 = HEAP32[$23>>2]|0; //@line 3056 "stream_encoder.c"
  $25 = $4; //@line 3056 "stream_encoder.c"
  $26 = HEAP32[$25>>2]|0; //@line 3056 "stream_encoder.c"
  $27 = ((($26)) + 36|0); //@line 3056 "stream_encoder.c"
  $28 = HEAP32[$27>>2]|0; //@line 3056 "stream_encoder.c"
  $29 = $4; //@line 3056 "stream_encoder.c"
  $30 = HEAP32[$29>>2]|0; //@line 3056 "stream_encoder.c"
  $31 = ((($30)) + 28|0); //@line 3056 "stream_encoder.c"
  $32 = HEAP32[$31>>2]|0; //@line 3056 "stream_encoder.c"
  $33 = (($32) + 7)|0; //@line 3056 "stream_encoder.c"
  $34 = (($33>>>0) / 8)&-1; //@line 3056 "stream_encoder.c"
  $35 = (_FLAC__MD5Accumulate($16,$20,$24,$28,$34)|0); //@line 3056 "stream_encoder.c"
  $36 = ($35|0)!=(0); //@line 3056 "stream_encoder.c"
  if (!($36)) {
   $37 = $4; //@line 3057 "stream_encoder.c"
   $38 = HEAP32[$37>>2]|0; //@line 3057 "stream_encoder.c"
   HEAP32[$38>>2] = 8; //@line 3057 "stream_encoder.c"
   $3 = 0; //@line 3058 "stream_encoder.c"
   $110 = $3; //@line 3105 "stream_encoder.c"
   STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
  }
 }
 $39 = $4; //@line 3064 "stream_encoder.c"
 $40 = $5; //@line 3064 "stream_encoder.c"
 $41 = (_process_subframes_($39,$40)|0); //@line 3064 "stream_encoder.c"
 $42 = ($41|0)!=(0); //@line 3064 "stream_encoder.c"
 if (!($42)) {
  $3 = 0; //@line 3066 "stream_encoder.c"
  $110 = $3; //@line 3105 "stream_encoder.c"
  STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
 }
 $43 = $4; //@line 3072 "stream_encoder.c"
 $44 = ((($43)) + 4|0); //@line 3072 "stream_encoder.c"
 $45 = HEAP32[$44>>2]|0; //@line 3072 "stream_encoder.c"
 $46 = ((($45)) + 6856|0); //@line 3072 "stream_encoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 3072 "stream_encoder.c"
 $48 = (_FLAC__bitwriter_zero_pad_to_byte_boundary($47)|0); //@line 3072 "stream_encoder.c"
 $49 = ($48|0)!=(0); //@line 3072 "stream_encoder.c"
 $50 = $4;
 if (!($49)) {
  $51 = HEAP32[$50>>2]|0; //@line 3073 "stream_encoder.c"
  HEAP32[$51>>2] = 8; //@line 3073 "stream_encoder.c"
  $3 = 0; //@line 3074 "stream_encoder.c"
  $110 = $3; //@line 3105 "stream_encoder.c"
  STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
 }
 $52 = ((($50)) + 4|0); //@line 3082 "stream_encoder.c"
 $53 = HEAP32[$52>>2]|0; //@line 3082 "stream_encoder.c"
 $54 = ((($53)) + 6856|0); //@line 3082 "stream_encoder.c"
 $55 = HEAP32[$54>>2]|0; //@line 3082 "stream_encoder.c"
 $56 = (_FLAC__bitwriter_get_write_crc16($55,$7)|0); //@line 3082 "stream_encoder.c"
 $57 = ($56|0)!=(0); //@line 3082 "stream_encoder.c"
 if ($57) {
  $58 = $4; //@line 3083 "stream_encoder.c"
  $59 = ((($58)) + 4|0); //@line 3083 "stream_encoder.c"
  $60 = HEAP32[$59>>2]|0; //@line 3083 "stream_encoder.c"
  $61 = ((($60)) + 6856|0); //@line 3083 "stream_encoder.c"
  $62 = HEAP32[$61>>2]|0; //@line 3083 "stream_encoder.c"
  $63 = HEAP16[$7>>1]|0; //@line 3083 "stream_encoder.c"
  $64 = $63&65535; //@line 3083 "stream_encoder.c"
  $65 = HEAP32[279]|0; //@line 3083 "stream_encoder.c"
  $66 = (_FLAC__bitwriter_write_raw_uint32($62,$64,$65)|0); //@line 3083 "stream_encoder.c"
  $67 = ($66|0)!=(0); //@line 3083 "stream_encoder.c"
  if ($67) {
   $70 = $4; //@line 3092 "stream_encoder.c"
   $71 = $4; //@line 3092 "stream_encoder.c"
   $72 = HEAP32[$71>>2]|0; //@line 3092 "stream_encoder.c"
   $73 = ((($72)) + 36|0); //@line 3092 "stream_encoder.c"
   $74 = HEAP32[$73>>2]|0; //@line 3092 "stream_encoder.c"
   $75 = $6; //@line 3092 "stream_encoder.c"
   $76 = (_write_bitbuffer_($70,$74,$75)|0); //@line 3092 "stream_encoder.c"
   $77 = ($76|0)!=(0); //@line 3092 "stream_encoder.c"
   if ($77) {
    $78 = $4; //@line 3100 "stream_encoder.c"
    $79 = ((($78)) + 4|0); //@line 3100 "stream_encoder.c"
    $80 = HEAP32[$79>>2]|0; //@line 3100 "stream_encoder.c"
    $81 = ((($80)) + 7052|0); //@line 3100 "stream_encoder.c"
    HEAP32[$81>>2] = 0; //@line 3100 "stream_encoder.c"
    $82 = $4; //@line 3101 "stream_encoder.c"
    $83 = ((($82)) + 4|0); //@line 3101 "stream_encoder.c"
    $84 = HEAP32[$83>>2]|0; //@line 3101 "stream_encoder.c"
    $85 = ((($84)) + 7056|0); //@line 3101 "stream_encoder.c"
    $86 = HEAP32[$85>>2]|0; //@line 3101 "stream_encoder.c"
    $87 = (($86) + 1)|0; //@line 3101 "stream_encoder.c"
    HEAP32[$85>>2] = $87; //@line 3101 "stream_encoder.c"
    $88 = $4; //@line 3102 "stream_encoder.c"
    $89 = HEAP32[$88>>2]|0; //@line 3102 "stream_encoder.c"
    $90 = ((($89)) + 36|0); //@line 3102 "stream_encoder.c"
    $91 = HEAP32[$90>>2]|0; //@line 3102 "stream_encoder.c"
    $92 = $4; //@line 3102 "stream_encoder.c"
    $93 = ((($92)) + 4|0); //@line 3102 "stream_encoder.c"
    $94 = HEAP32[$93>>2]|0; //@line 3102 "stream_encoder.c"
    $95 = ((($94)) + 6872|0); //@line 3102 "stream_encoder.c"
    $96 = ((($95)) + 16|0); //@line 3102 "stream_encoder.c"
    $97 = ((($96)) + 32|0); //@line 3102 "stream_encoder.c"
    $98 = $97; //@line 3102 "stream_encoder.c"
    $99 = $98; //@line 3102 "stream_encoder.c"
    $100 = HEAP32[$99>>2]|0; //@line 3102 "stream_encoder.c"
    $101 = (($98) + 4)|0; //@line 3102 "stream_encoder.c"
    $102 = $101; //@line 3102 "stream_encoder.c"
    $103 = HEAP32[$102>>2]|0; //@line 3102 "stream_encoder.c"
    $104 = (_i64Add(($100|0),($103|0),($91|0),0)|0); //@line 3102 "stream_encoder.c"
    $105 = tempRet0; //@line 3102 "stream_encoder.c"
    $106 = $97; //@line 3102 "stream_encoder.c"
    $107 = $106; //@line 3102 "stream_encoder.c"
    HEAP32[$107>>2] = $104; //@line 3102 "stream_encoder.c"
    $108 = (($106) + 4)|0; //@line 3102 "stream_encoder.c"
    $109 = $108; //@line 3102 "stream_encoder.c"
    HEAP32[$109>>2] = $105; //@line 3102 "stream_encoder.c"
    $3 = 1; //@line 3104 "stream_encoder.c"
    $110 = $3; //@line 3105 "stream_encoder.c"
    STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
   } else {
    $3 = 0; //@line 3094 "stream_encoder.c"
    $110 = $3; //@line 3105 "stream_encoder.c"
    STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
   }
  }
 }
 $68 = $4; //@line 3085 "stream_encoder.c"
 $69 = HEAP32[$68>>2]|0; //@line 3085 "stream_encoder.c"
 HEAP32[$69>>2] = 8; //@line 3085 "stream_encoder.c"
 $3 = 0; //@line 3086 "stream_encoder.c"
 $110 = $3; //@line 3105 "stream_encoder.c"
 STACKTOP = sp;return ($110|0); //@line 3105 "stream_encoder.c"
}
function _update_metadata_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 60|0;
 $4 = sp + 8|0;
 $13 = sp;
 $1 = $0;
 $15 = $1; //@line 2706 "stream_encoder.c"
 $16 = ((($15)) + 4|0); //@line 2706 "stream_encoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 2706 "stream_encoder.c"
 $18 = ((($17)) + 6872|0); //@line 2706 "stream_encoder.c"
 $3 = $18; //@line 2706 "stream_encoder.c"
 $19 = $3; //@line 2707 "stream_encoder.c"
 $20 = ((($19)) + 16|0); //@line 2707 "stream_encoder.c"
 $21 = ((($20)) + 32|0); //@line 2707 "stream_encoder.c"
 $22 = $21; //@line 2707 "stream_encoder.c"
 $23 = $22; //@line 2707 "stream_encoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 2707 "stream_encoder.c"
 $25 = (($22) + 4)|0; //@line 2707 "stream_encoder.c"
 $26 = $25; //@line 2707 "stream_encoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2707 "stream_encoder.c"
 $28 = $4; //@line 2707 "stream_encoder.c"
 $29 = $28; //@line 2707 "stream_encoder.c"
 HEAP32[$29>>2] = $24; //@line 2707 "stream_encoder.c"
 $30 = (($28) + 4)|0; //@line 2707 "stream_encoder.c"
 $31 = $30; //@line 2707 "stream_encoder.c"
 HEAP32[$31>>2] = $27; //@line 2707 "stream_encoder.c"
 $32 = $3; //@line 2708 "stream_encoder.c"
 $33 = ((($32)) + 16|0); //@line 2708 "stream_encoder.c"
 $34 = ((($33)) + 8|0); //@line 2708 "stream_encoder.c"
 $35 = HEAP32[$34>>2]|0; //@line 2708 "stream_encoder.c"
 $5 = $35; //@line 2708 "stream_encoder.c"
 $36 = $3; //@line 2709 "stream_encoder.c"
 $37 = ((($36)) + 16|0); //@line 2709 "stream_encoder.c"
 $38 = ((($37)) + 12|0); //@line 2709 "stream_encoder.c"
 $39 = HEAP32[$38>>2]|0; //@line 2709 "stream_encoder.c"
 $6 = $39; //@line 2709 "stream_encoder.c"
 $40 = $3; //@line 2710 "stream_encoder.c"
 $41 = ((($40)) + 16|0); //@line 2710 "stream_encoder.c"
 $42 = ((($41)) + 24|0); //@line 2710 "stream_encoder.c"
 $43 = HEAP32[$42>>2]|0; //@line 2710 "stream_encoder.c"
 $7 = $43; //@line 2710 "stream_encoder.c"
 $44 = HEAP32[279]|0; //@line 2727 "stream_encoder.c"
 $45 = HEAP32[279]|0; //@line 2728 "stream_encoder.c"
 $46 = (($44) + ($45))|0; //@line 2727 "stream_encoder.c"
 $47 = HEAP32[267]|0; //@line 2729 "stream_encoder.c"
 $48 = (($46) + ($47))|0; //@line 2728 "stream_encoder.c"
 $49 = HEAP32[267]|0; //@line 2730 "stream_encoder.c"
 $50 = (($48) + ($49))|0; //@line 2729 "stream_encoder.c"
 $51 = HEAP32[259]|0; //@line 2731 "stream_encoder.c"
 $52 = (($50) + ($51))|0; //@line 2730 "stream_encoder.c"
 $53 = HEAP32[270]|0; //@line 2732 "stream_encoder.c"
 $54 = (($52) + ($53))|0; //@line 2731 "stream_encoder.c"
 $55 = HEAP32[275]|0; //@line 2733 "stream_encoder.c"
 $56 = (($54) + ($55))|0; //@line 2732 "stream_encoder.c"
 $57 = HEAP32[260]|0; //@line 2734 "stream_encoder.c"
 $58 = (($56) + ($57))|0; //@line 2733 "stream_encoder.c"
 $59 = (($58>>>0) / 8)&-1; //@line 2735 "stream_encoder.c"
 $60 = (4 + ($59))|0; //@line 2725 "stream_encoder.c"
 $9 = $60; //@line 2724 "stream_encoder.c"
 $61 = $1; //@line 2737 "stream_encoder.c"
 $62 = ((($61)) + 4|0); //@line 2737 "stream_encoder.c"
 $63 = HEAP32[$62>>2]|0; //@line 2737 "stream_encoder.c"
 $64 = ((($63)) + 7292|0); //@line 2737 "stream_encoder.c"
 $65 = HEAP32[$64>>2]|0; //@line 2737 "stream_encoder.c"
 $66 = $1; //@line 2737 "stream_encoder.c"
 $67 = $1; //@line 2737 "stream_encoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 2737 "stream_encoder.c"
 $69 = ((($68)) + 608|0); //@line 2737 "stream_encoder.c"
 $70 = $69; //@line 2737 "stream_encoder.c"
 $71 = $70; //@line 2737 "stream_encoder.c"
 $72 = HEAP32[$71>>2]|0; //@line 2737 "stream_encoder.c"
 $73 = (($70) + 4)|0; //@line 2737 "stream_encoder.c"
 $74 = $73; //@line 2737 "stream_encoder.c"
 $75 = HEAP32[$74>>2]|0; //@line 2737 "stream_encoder.c"
 $76 = $9; //@line 2737 "stream_encoder.c"
 $77 = (_i64Add(($72|0),($75|0),($76|0),0)|0); //@line 2737 "stream_encoder.c"
 $78 = tempRet0; //@line 2737 "stream_encoder.c"
 $79 = $1; //@line 2737 "stream_encoder.c"
 $80 = ((($79)) + 4|0); //@line 2737 "stream_encoder.c"
 $81 = HEAP32[$80>>2]|0; //@line 2737 "stream_encoder.c"
 $82 = ((($81)) + 7312|0); //@line 2737 "stream_encoder.c"
 $83 = HEAP32[$82>>2]|0; //@line 2737 "stream_encoder.c"
 $84 = (FUNCTION_TABLE_iiiii[$65 & 31]($66,$77,$78,$83)|0); //@line 2737 "stream_encoder.c"
 $8 = $84; //@line 2737 "stream_encoder.c"
 $85 = ($84|0)!=(0); //@line 2737 "stream_encoder.c"
 if ($85) {
  $86 = $8; //@line 2738 "stream_encoder.c"
  $87 = ($86|0)==(1); //@line 2738 "stream_encoder.c"
  if (!($87)) {
   STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
  }
  $88 = $1; //@line 2739 "stream_encoder.c"
  $89 = HEAP32[$88>>2]|0; //@line 2739 "stream_encoder.c"
  HEAP32[$89>>2] = 5; //@line 2739 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $90 = $1; //@line 2742 "stream_encoder.c"
 $91 = ((($90)) + 4|0); //@line 2742 "stream_encoder.c"
 $92 = HEAP32[$91>>2]|0; //@line 2742 "stream_encoder.c"
 $93 = ((($92)) + 7300|0); //@line 2742 "stream_encoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 2742 "stream_encoder.c"
 $95 = $1; //@line 2742 "stream_encoder.c"
 $96 = $3; //@line 2742 "stream_encoder.c"
 $97 = ((($96)) + 16|0); //@line 2742 "stream_encoder.c"
 $98 = ((($97)) + 40|0); //@line 2742 "stream_encoder.c"
 $99 = $1; //@line 2742 "stream_encoder.c"
 $100 = ((($99)) + 4|0); //@line 2742 "stream_encoder.c"
 $101 = HEAP32[$100>>2]|0; //@line 2742 "stream_encoder.c"
 $102 = ((($101)) + 7312|0); //@line 2742 "stream_encoder.c"
 $103 = HEAP32[$102>>2]|0; //@line 2742 "stream_encoder.c"
 $104 = (FUNCTION_TABLE_iiiiiii[$94 & 7]($95,$98,16,0,0,$103)|0); //@line 2742 "stream_encoder.c"
 $105 = ($104|0)!=(0); //@line 2742 "stream_encoder.c"
 if ($105) {
  $106 = $1; //@line 2743 "stream_encoder.c"
  $107 = HEAP32[$106>>2]|0; //@line 2743 "stream_encoder.c"
  HEAP32[$107>>2] = 5; //@line 2743 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $108 = HEAP32[279]|0; //@line 2755 "stream_encoder.c"
 $109 = HEAP32[279]|0; //@line 2756 "stream_encoder.c"
 $110 = (($108) + ($109))|0; //@line 2755 "stream_encoder.c"
 $111 = HEAP32[267]|0; //@line 2757 "stream_encoder.c"
 $112 = (($110) + ($111))|0; //@line 2756 "stream_encoder.c"
 $113 = HEAP32[267]|0; //@line 2758 "stream_encoder.c"
 $114 = (($112) + ($113))|0; //@line 2757 "stream_encoder.c"
 $115 = HEAP32[259]|0; //@line 2759 "stream_encoder.c"
 $116 = (($114) + ($115))|0; //@line 2758 "stream_encoder.c"
 $117 = HEAP32[270]|0; //@line 2760 "stream_encoder.c"
 $118 = (($116) + ($117))|0; //@line 2759 "stream_encoder.c"
 $119 = HEAP32[275]|0; //@line 2761 "stream_encoder.c"
 $120 = (($118) + ($119))|0; //@line 2760 "stream_encoder.c"
 $121 = (($120) - 4)|0; //@line 2762 "stream_encoder.c"
 $122 = (($121>>>0) / 8)&-1; //@line 2763 "stream_encoder.c"
 $123 = (4 + ($122))|0; //@line 2753 "stream_encoder.c"
 $10 = $123; //@line 2752 "stream_encoder.c"
 $124 = $7; //@line 2765 "stream_encoder.c"
 $125 = (($124) - 1)|0; //@line 2765 "stream_encoder.c"
 $126 = $125&255; //@line 2765 "stream_encoder.c"
 $127 = $126&255; //@line 2765 "stream_encoder.c"
 $128 = $127 << 4; //@line 2765 "stream_encoder.c"
 $129 = $4; //@line 2765 "stream_encoder.c"
 $130 = $129; //@line 2765 "stream_encoder.c"
 $131 = HEAP32[$130>>2]|0; //@line 2765 "stream_encoder.c"
 $132 = (($129) + 4)|0; //@line 2765 "stream_encoder.c"
 $133 = $132; //@line 2765 "stream_encoder.c"
 $134 = HEAP32[$133>>2]|0; //@line 2765 "stream_encoder.c"
 $135 = $134 & 15; //@line 2765 "stream_encoder.c"
 $136 = $135&255; //@line 2765 "stream_encoder.c"
 $137 = $136&255; //@line 2765 "stream_encoder.c"
 $138 = $128 | $137; //@line 2765 "stream_encoder.c"
 $139 = $138&255; //@line 2765 "stream_encoder.c"
 HEAP8[$2>>0] = $139; //@line 2765 "stream_encoder.c"
 $140 = $4; //@line 2766 "stream_encoder.c"
 $141 = $140; //@line 2766 "stream_encoder.c"
 $142 = HEAP32[$141>>2]|0; //@line 2766 "stream_encoder.c"
 $143 = (($140) + 4)|0; //@line 2766 "stream_encoder.c"
 $144 = $143; //@line 2766 "stream_encoder.c"
 $145 = HEAP32[$144>>2]|0; //@line 2766 "stream_encoder.c"
 $146 = (_bitshift64Lshr(($142|0),($145|0),24)|0); //@line 2766 "stream_encoder.c"
 $147 = tempRet0; //@line 2766 "stream_encoder.c"
 $148 = $146 & 255; //@line 2766 "stream_encoder.c"
 $149 = $148&255; //@line 2766 "stream_encoder.c"
 $150 = ((($2)) + 1|0); //@line 2766 "stream_encoder.c"
 HEAP8[$150>>0] = $149; //@line 2766 "stream_encoder.c"
 $151 = $4; //@line 2767 "stream_encoder.c"
 $152 = $151; //@line 2767 "stream_encoder.c"
 $153 = HEAP32[$152>>2]|0; //@line 2767 "stream_encoder.c"
 $154 = (($151) + 4)|0; //@line 2767 "stream_encoder.c"
 $155 = $154; //@line 2767 "stream_encoder.c"
 $156 = HEAP32[$155>>2]|0; //@line 2767 "stream_encoder.c"
 $157 = (_bitshift64Lshr(($153|0),($156|0),16)|0); //@line 2767 "stream_encoder.c"
 $158 = tempRet0; //@line 2767 "stream_encoder.c"
 $159 = $157 & 255; //@line 2767 "stream_encoder.c"
 $160 = $159&255; //@line 2767 "stream_encoder.c"
 $161 = ((($2)) + 2|0); //@line 2767 "stream_encoder.c"
 HEAP8[$161>>0] = $160; //@line 2767 "stream_encoder.c"
 $162 = $4; //@line 2768 "stream_encoder.c"
 $163 = $162; //@line 2768 "stream_encoder.c"
 $164 = HEAP32[$163>>2]|0; //@line 2768 "stream_encoder.c"
 $165 = (($162) + 4)|0; //@line 2768 "stream_encoder.c"
 $166 = $165; //@line 2768 "stream_encoder.c"
 $167 = HEAP32[$166>>2]|0; //@line 2768 "stream_encoder.c"
 $168 = (_bitshift64Lshr(($164|0),($167|0),8)|0); //@line 2768 "stream_encoder.c"
 $169 = tempRet0; //@line 2768 "stream_encoder.c"
 $170 = $168 & 255; //@line 2768 "stream_encoder.c"
 $171 = $170&255; //@line 2768 "stream_encoder.c"
 $172 = ((($2)) + 3|0); //@line 2768 "stream_encoder.c"
 HEAP8[$172>>0] = $171; //@line 2768 "stream_encoder.c"
 $173 = $4; //@line 2769 "stream_encoder.c"
 $174 = $173; //@line 2769 "stream_encoder.c"
 $175 = HEAP32[$174>>2]|0; //@line 2769 "stream_encoder.c"
 $176 = (($173) + 4)|0; //@line 2769 "stream_encoder.c"
 $177 = $176; //@line 2769 "stream_encoder.c"
 $178 = HEAP32[$177>>2]|0; //@line 2769 "stream_encoder.c"
 $179 = $175 & 255; //@line 2769 "stream_encoder.c"
 $180 = $179&255; //@line 2769 "stream_encoder.c"
 $181 = ((($2)) + 4|0); //@line 2769 "stream_encoder.c"
 HEAP8[$181>>0] = $180; //@line 2769 "stream_encoder.c"
 $182 = $1; //@line 2770 "stream_encoder.c"
 $183 = ((($182)) + 4|0); //@line 2770 "stream_encoder.c"
 $184 = HEAP32[$183>>2]|0; //@line 2770 "stream_encoder.c"
 $185 = ((($184)) + 7292|0); //@line 2770 "stream_encoder.c"
 $186 = HEAP32[$185>>2]|0; //@line 2770 "stream_encoder.c"
 $187 = $1; //@line 2770 "stream_encoder.c"
 $188 = $1; //@line 2770 "stream_encoder.c"
 $189 = HEAP32[$188>>2]|0; //@line 2770 "stream_encoder.c"
 $190 = ((($189)) + 608|0); //@line 2770 "stream_encoder.c"
 $191 = $190; //@line 2770 "stream_encoder.c"
 $192 = $191; //@line 2770 "stream_encoder.c"
 $193 = HEAP32[$192>>2]|0; //@line 2770 "stream_encoder.c"
 $194 = (($191) + 4)|0; //@line 2770 "stream_encoder.c"
 $195 = $194; //@line 2770 "stream_encoder.c"
 $196 = HEAP32[$195>>2]|0; //@line 2770 "stream_encoder.c"
 $197 = $10; //@line 2770 "stream_encoder.c"
 $198 = (_i64Add(($193|0),($196|0),($197|0),0)|0); //@line 2770 "stream_encoder.c"
 $199 = tempRet0; //@line 2770 "stream_encoder.c"
 $200 = $1; //@line 2770 "stream_encoder.c"
 $201 = ((($200)) + 4|0); //@line 2770 "stream_encoder.c"
 $202 = HEAP32[$201>>2]|0; //@line 2770 "stream_encoder.c"
 $203 = ((($202)) + 7312|0); //@line 2770 "stream_encoder.c"
 $204 = HEAP32[$203>>2]|0; //@line 2770 "stream_encoder.c"
 $205 = (FUNCTION_TABLE_iiiii[$186 & 31]($187,$198,$199,$204)|0); //@line 2770 "stream_encoder.c"
 $8 = $205; //@line 2770 "stream_encoder.c"
 $206 = ($205|0)!=(0); //@line 2770 "stream_encoder.c"
 if ($206) {
  $207 = $8; //@line 2771 "stream_encoder.c"
  $208 = ($207|0)==(1); //@line 2771 "stream_encoder.c"
  if (!($208)) {
   STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
  }
  $209 = $1; //@line 2772 "stream_encoder.c"
  $210 = HEAP32[$209>>2]|0; //@line 2772 "stream_encoder.c"
  HEAP32[$210>>2] = 5; //@line 2772 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $211 = $1; //@line 2775 "stream_encoder.c"
 $212 = ((($211)) + 4|0); //@line 2775 "stream_encoder.c"
 $213 = HEAP32[$212>>2]|0; //@line 2775 "stream_encoder.c"
 $214 = ((($213)) + 7300|0); //@line 2775 "stream_encoder.c"
 $215 = HEAP32[$214>>2]|0; //@line 2775 "stream_encoder.c"
 $216 = $1; //@line 2775 "stream_encoder.c"
 $217 = $1; //@line 2775 "stream_encoder.c"
 $218 = ((($217)) + 4|0); //@line 2775 "stream_encoder.c"
 $219 = HEAP32[$218>>2]|0; //@line 2775 "stream_encoder.c"
 $220 = ((($219)) + 7312|0); //@line 2775 "stream_encoder.c"
 $221 = HEAP32[$220>>2]|0; //@line 2775 "stream_encoder.c"
 $222 = (FUNCTION_TABLE_iiiiiii[$215 & 7]($216,$2,5,0,0,$221)|0); //@line 2775 "stream_encoder.c"
 $223 = ($222|0)!=(0); //@line 2775 "stream_encoder.c"
 if ($223) {
  $224 = $1; //@line 2776 "stream_encoder.c"
  $225 = HEAP32[$224>>2]|0; //@line 2776 "stream_encoder.c"
  HEAP32[$225>>2] = 5; //@line 2776 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $226 = HEAP32[279]|0; //@line 2788 "stream_encoder.c"
 $227 = HEAP32[279]|0; //@line 2789 "stream_encoder.c"
 $228 = (($226) + ($227))|0; //@line 2788 "stream_encoder.c"
 $229 = (($228>>>0) / 8)&-1; //@line 2790 "stream_encoder.c"
 $230 = (4 + ($229))|0; //@line 2786 "stream_encoder.c"
 $11 = $230; //@line 2785 "stream_encoder.c"
 $231 = $5; //@line 2792 "stream_encoder.c"
 $232 = $231 >>> 16; //@line 2792 "stream_encoder.c"
 $233 = $232 & 255; //@line 2792 "stream_encoder.c"
 $234 = $233&255; //@line 2792 "stream_encoder.c"
 HEAP8[$2>>0] = $234; //@line 2792 "stream_encoder.c"
 $235 = $5; //@line 2793 "stream_encoder.c"
 $236 = $235 >>> 8; //@line 2793 "stream_encoder.c"
 $237 = $236 & 255; //@line 2793 "stream_encoder.c"
 $238 = $237&255; //@line 2793 "stream_encoder.c"
 $239 = ((($2)) + 1|0); //@line 2793 "stream_encoder.c"
 HEAP8[$239>>0] = $238; //@line 2793 "stream_encoder.c"
 $240 = $5; //@line 2794 "stream_encoder.c"
 $241 = $240 & 255; //@line 2794 "stream_encoder.c"
 $242 = $241&255; //@line 2794 "stream_encoder.c"
 $243 = ((($2)) + 2|0); //@line 2794 "stream_encoder.c"
 HEAP8[$243>>0] = $242; //@line 2794 "stream_encoder.c"
 $244 = $6; //@line 2795 "stream_encoder.c"
 $245 = $244 >>> 16; //@line 2795 "stream_encoder.c"
 $246 = $245 & 255; //@line 2795 "stream_encoder.c"
 $247 = $246&255; //@line 2795 "stream_encoder.c"
 $248 = ((($2)) + 3|0); //@line 2795 "stream_encoder.c"
 HEAP8[$248>>0] = $247; //@line 2795 "stream_encoder.c"
 $249 = $6; //@line 2796 "stream_encoder.c"
 $250 = $249 >>> 8; //@line 2796 "stream_encoder.c"
 $251 = $250 & 255; //@line 2796 "stream_encoder.c"
 $252 = $251&255; //@line 2796 "stream_encoder.c"
 $253 = ((($2)) + 4|0); //@line 2796 "stream_encoder.c"
 HEAP8[$253>>0] = $252; //@line 2796 "stream_encoder.c"
 $254 = $6; //@line 2797 "stream_encoder.c"
 $255 = $254 & 255; //@line 2797 "stream_encoder.c"
 $256 = $255&255; //@line 2797 "stream_encoder.c"
 $257 = ((($2)) + 5|0); //@line 2797 "stream_encoder.c"
 HEAP8[$257>>0] = $256; //@line 2797 "stream_encoder.c"
 $258 = $1; //@line 2798 "stream_encoder.c"
 $259 = ((($258)) + 4|0); //@line 2798 "stream_encoder.c"
 $260 = HEAP32[$259>>2]|0; //@line 2798 "stream_encoder.c"
 $261 = ((($260)) + 7292|0); //@line 2798 "stream_encoder.c"
 $262 = HEAP32[$261>>2]|0; //@line 2798 "stream_encoder.c"
 $263 = $1; //@line 2798 "stream_encoder.c"
 $264 = $1; //@line 2798 "stream_encoder.c"
 $265 = HEAP32[$264>>2]|0; //@line 2798 "stream_encoder.c"
 $266 = ((($265)) + 608|0); //@line 2798 "stream_encoder.c"
 $267 = $266; //@line 2798 "stream_encoder.c"
 $268 = $267; //@line 2798 "stream_encoder.c"
 $269 = HEAP32[$268>>2]|0; //@line 2798 "stream_encoder.c"
 $270 = (($267) + 4)|0; //@line 2798 "stream_encoder.c"
 $271 = $270; //@line 2798 "stream_encoder.c"
 $272 = HEAP32[$271>>2]|0; //@line 2798 "stream_encoder.c"
 $273 = $11; //@line 2798 "stream_encoder.c"
 $274 = (_i64Add(($269|0),($272|0),($273|0),0)|0); //@line 2798 "stream_encoder.c"
 $275 = tempRet0; //@line 2798 "stream_encoder.c"
 $276 = $1; //@line 2798 "stream_encoder.c"
 $277 = ((($276)) + 4|0); //@line 2798 "stream_encoder.c"
 $278 = HEAP32[$277>>2]|0; //@line 2798 "stream_encoder.c"
 $279 = ((($278)) + 7312|0); //@line 2798 "stream_encoder.c"
 $280 = HEAP32[$279>>2]|0; //@line 2798 "stream_encoder.c"
 $281 = (FUNCTION_TABLE_iiiii[$262 & 31]($263,$274,$275,$280)|0); //@line 2798 "stream_encoder.c"
 $8 = $281; //@line 2798 "stream_encoder.c"
 $282 = ($281|0)!=(0); //@line 2798 "stream_encoder.c"
 if ($282) {
  $283 = $8; //@line 2799 "stream_encoder.c"
  $284 = ($283|0)==(1); //@line 2799 "stream_encoder.c"
  if (!($284)) {
   STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
  }
  $285 = $1; //@line 2800 "stream_encoder.c"
  $286 = HEAP32[$285>>2]|0; //@line 2800 "stream_encoder.c"
  HEAP32[$286>>2] = 5; //@line 2800 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $287 = $1; //@line 2803 "stream_encoder.c"
 $288 = ((($287)) + 4|0); //@line 2803 "stream_encoder.c"
 $289 = HEAP32[$288>>2]|0; //@line 2803 "stream_encoder.c"
 $290 = ((($289)) + 7300|0); //@line 2803 "stream_encoder.c"
 $291 = HEAP32[$290>>2]|0; //@line 2803 "stream_encoder.c"
 $292 = $1; //@line 2803 "stream_encoder.c"
 $293 = $1; //@line 2803 "stream_encoder.c"
 $294 = ((($293)) + 4|0); //@line 2803 "stream_encoder.c"
 $295 = HEAP32[$294>>2]|0; //@line 2803 "stream_encoder.c"
 $296 = ((($295)) + 7312|0); //@line 2803 "stream_encoder.c"
 $297 = HEAP32[$296>>2]|0; //@line 2803 "stream_encoder.c"
 $298 = (FUNCTION_TABLE_iiiiiii[$291 & 7]($292,$2,6,0,0,$297)|0); //@line 2803 "stream_encoder.c"
 $299 = ($298|0)!=(0); //@line 2803 "stream_encoder.c"
 $300 = $1;
 if ($299) {
  $301 = HEAP32[$300>>2]|0; //@line 2804 "stream_encoder.c"
  HEAP32[$301>>2] = 5; //@line 2804 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $302 = ((($300)) + 4|0); //@line 2812 "stream_encoder.c"
 $303 = HEAP32[$302>>2]|0; //@line 2812 "stream_encoder.c"
 $304 = ((($303)) + 7048|0); //@line 2812 "stream_encoder.c"
 $305 = HEAP32[$304>>2]|0; //@line 2812 "stream_encoder.c"
 $306 = (0|0)!=($305|0); //@line 2812 "stream_encoder.c"
 if (!($306)) {
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $307 = $1; //@line 2812 "stream_encoder.c"
 $308 = ((($307)) + 4|0); //@line 2812 "stream_encoder.c"
 $309 = HEAP32[$308>>2]|0; //@line 2812 "stream_encoder.c"
 $310 = ((($309)) + 7048|0); //@line 2812 "stream_encoder.c"
 $311 = HEAP32[$310>>2]|0; //@line 2812 "stream_encoder.c"
 $312 = HEAP32[$311>>2]|0; //@line 2812 "stream_encoder.c"
 $313 = ($312>>>0)>(0); //@line 2812 "stream_encoder.c"
 if (!($313)) {
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $314 = $1; //@line 2812 "stream_encoder.c"
 $315 = HEAP32[$314>>2]|0; //@line 2812 "stream_encoder.c"
 $316 = ((($315)) + 616|0); //@line 2812 "stream_encoder.c"
 $317 = $316; //@line 2812 "stream_encoder.c"
 $318 = $317; //@line 2812 "stream_encoder.c"
 $319 = HEAP32[$318>>2]|0; //@line 2812 "stream_encoder.c"
 $320 = (($317) + 4)|0; //@line 2812 "stream_encoder.c"
 $321 = $320; //@line 2812 "stream_encoder.c"
 $322 = HEAP32[$321>>2]|0; //@line 2812 "stream_encoder.c"
 $323 = ($322>>>0)>(0); //@line 2812 "stream_encoder.c"
 $324 = ($319>>>0)>(0); //@line 2812 "stream_encoder.c"
 $325 = ($322|0)==(0); //@line 2812 "stream_encoder.c"
 $326 = $325 & $324; //@line 2812 "stream_encoder.c"
 $327 = $323 | $326; //@line 2812 "stream_encoder.c"
 if (!($327)) {
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $328 = $1; //@line 2815 "stream_encoder.c"
 $329 = ((($328)) + 4|0); //@line 2815 "stream_encoder.c"
 $330 = HEAP32[$329>>2]|0; //@line 2815 "stream_encoder.c"
 $331 = ((($330)) + 7048|0); //@line 2815 "stream_encoder.c"
 $332 = HEAP32[$331>>2]|0; //@line 2815 "stream_encoder.c"
 (_FLAC__format_seektable_sort($332)|0); //@line 2815 "stream_encoder.c"
 $333 = $1; //@line 2819 "stream_encoder.c"
 $334 = ((($333)) + 4|0); //@line 2819 "stream_encoder.c"
 $335 = HEAP32[$334>>2]|0; //@line 2819 "stream_encoder.c"
 $336 = ((($335)) + 7292|0); //@line 2819 "stream_encoder.c"
 $337 = HEAP32[$336>>2]|0; //@line 2819 "stream_encoder.c"
 $338 = $1; //@line 2819 "stream_encoder.c"
 $339 = $1; //@line 2819 "stream_encoder.c"
 $340 = HEAP32[$339>>2]|0; //@line 2819 "stream_encoder.c"
 $341 = ((($340)) + 616|0); //@line 2819 "stream_encoder.c"
 $342 = $341; //@line 2819 "stream_encoder.c"
 $343 = $342; //@line 2819 "stream_encoder.c"
 $344 = HEAP32[$343>>2]|0; //@line 2819 "stream_encoder.c"
 $345 = (($342) + 4)|0; //@line 2819 "stream_encoder.c"
 $346 = $345; //@line 2819 "stream_encoder.c"
 $347 = HEAP32[$346>>2]|0; //@line 2819 "stream_encoder.c"
 $348 = (_i64Add(($344|0),($347|0),4,0)|0); //@line 2819 "stream_encoder.c"
 $349 = tempRet0; //@line 2819 "stream_encoder.c"
 $350 = $1; //@line 2819 "stream_encoder.c"
 $351 = ((($350)) + 4|0); //@line 2819 "stream_encoder.c"
 $352 = HEAP32[$351>>2]|0; //@line 2819 "stream_encoder.c"
 $353 = ((($352)) + 7312|0); //@line 2819 "stream_encoder.c"
 $354 = HEAP32[$353>>2]|0; //@line 2819 "stream_encoder.c"
 $355 = (FUNCTION_TABLE_iiiii[$337 & 31]($338,$348,$349,$354)|0); //@line 2819 "stream_encoder.c"
 $8 = $355; //@line 2819 "stream_encoder.c"
 $356 = ($355|0)!=(0); //@line 2819 "stream_encoder.c"
 if ($356) {
  $357 = $8; //@line 2820 "stream_encoder.c"
  $358 = ($357|0)==(1); //@line 2820 "stream_encoder.c"
  if (!($358)) {
   STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
  }
  $359 = $1; //@line 2821 "stream_encoder.c"
  $360 = HEAP32[$359>>2]|0; //@line 2821 "stream_encoder.c"
  HEAP32[$360>>2] = 5; //@line 2821 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $12 = 0; //@line 2825 "stream_encoder.c"
 while(1) {
  $361 = $12; //@line 2825 "stream_encoder.c"
  $362 = $1; //@line 2825 "stream_encoder.c"
  $363 = ((($362)) + 4|0); //@line 2825 "stream_encoder.c"
  $364 = HEAP32[$363>>2]|0; //@line 2825 "stream_encoder.c"
  $365 = ((($364)) + 7048|0); //@line 2825 "stream_encoder.c"
  $366 = HEAP32[$365>>2]|0; //@line 2825 "stream_encoder.c"
  $367 = HEAP32[$366>>2]|0; //@line 2825 "stream_encoder.c"
  $368 = ($361>>>0)<($367>>>0); //@line 2825 "stream_encoder.c"
  if (!($368)) {
   label = 27;
   break;
  }
  $369 = $1; //@line 2828 "stream_encoder.c"
  $370 = ((($369)) + 4|0); //@line 2828 "stream_encoder.c"
  $371 = HEAP32[$370>>2]|0; //@line 2828 "stream_encoder.c"
  $372 = ((($371)) + 7048|0); //@line 2828 "stream_encoder.c"
  $373 = HEAP32[$372>>2]|0; //@line 2828 "stream_encoder.c"
  $374 = ((($373)) + 4|0); //@line 2828 "stream_encoder.c"
  $375 = HEAP32[$374>>2]|0; //@line 2828 "stream_encoder.c"
  $376 = $12; //@line 2828 "stream_encoder.c"
  $377 = (($375) + (($376*24)|0)|0); //@line 2828 "stream_encoder.c"
  $378 = $377; //@line 2828 "stream_encoder.c"
  $379 = $378; //@line 2828 "stream_encoder.c"
  $380 = HEAP32[$379>>2]|0; //@line 2828 "stream_encoder.c"
  $381 = (($378) + 4)|0; //@line 2828 "stream_encoder.c"
  $382 = $381; //@line 2828 "stream_encoder.c"
  $383 = HEAP32[$382>>2]|0; //@line 2828 "stream_encoder.c"
  $384 = $13; //@line 2828 "stream_encoder.c"
  $385 = $384; //@line 2828 "stream_encoder.c"
  HEAP32[$385>>2] = $380; //@line 2828 "stream_encoder.c"
  $386 = (($384) + 4)|0; //@line 2828 "stream_encoder.c"
  $387 = $386; //@line 2828 "stream_encoder.c"
  HEAP32[$387>>2] = $383; //@line 2828 "stream_encoder.c"
  $388 = $13; //@line 2829 "stream_encoder.c"
  $389 = $388; //@line 2829 "stream_encoder.c"
  $390 = HEAP32[$389>>2]|0; //@line 2829 "stream_encoder.c"
  $391 = (($388) + 4)|0; //@line 2829 "stream_encoder.c"
  $392 = $391; //@line 2829 "stream_encoder.c"
  $393 = HEAP32[$392>>2]|0; //@line 2829 "stream_encoder.c"
  $394 = $390&255; //@line 2829 "stream_encoder.c"
  $395 = ((($2)) + 7|0); //@line 2829 "stream_encoder.c"
  HEAP8[$395>>0] = $394; //@line 2829 "stream_encoder.c"
  $396 = $13; //@line 2829 "stream_encoder.c"
  $397 = $396; //@line 2829 "stream_encoder.c"
  $398 = HEAP32[$397>>2]|0; //@line 2829 "stream_encoder.c"
  $399 = (($396) + 4)|0; //@line 2829 "stream_encoder.c"
  $400 = $399; //@line 2829 "stream_encoder.c"
  $401 = HEAP32[$400>>2]|0; //@line 2829 "stream_encoder.c"
  $402 = (_bitshift64Lshr(($398|0),($401|0),8)|0); //@line 2829 "stream_encoder.c"
  $403 = tempRet0; //@line 2829 "stream_encoder.c"
  $404 = $13; //@line 2829 "stream_encoder.c"
  $405 = $404; //@line 2829 "stream_encoder.c"
  HEAP32[$405>>2] = $402; //@line 2829 "stream_encoder.c"
  $406 = (($404) + 4)|0; //@line 2829 "stream_encoder.c"
  $407 = $406; //@line 2829 "stream_encoder.c"
  HEAP32[$407>>2] = $403; //@line 2829 "stream_encoder.c"
  $408 = $13; //@line 2830 "stream_encoder.c"
  $409 = $408; //@line 2830 "stream_encoder.c"
  $410 = HEAP32[$409>>2]|0; //@line 2830 "stream_encoder.c"
  $411 = (($408) + 4)|0; //@line 2830 "stream_encoder.c"
  $412 = $411; //@line 2830 "stream_encoder.c"
  $413 = HEAP32[$412>>2]|0; //@line 2830 "stream_encoder.c"
  $414 = $410&255; //@line 2830 "stream_encoder.c"
  $415 = ((($2)) + 6|0); //@line 2830 "stream_encoder.c"
  HEAP8[$415>>0] = $414; //@line 2830 "stream_encoder.c"
  $416 = $13; //@line 2830 "stream_encoder.c"
  $417 = $416; //@line 2830 "stream_encoder.c"
  $418 = HEAP32[$417>>2]|0; //@line 2830 "stream_encoder.c"
  $419 = (($416) + 4)|0; //@line 2830 "stream_encoder.c"
  $420 = $419; //@line 2830 "stream_encoder.c"
  $421 = HEAP32[$420>>2]|0; //@line 2830 "stream_encoder.c"
  $422 = (_bitshift64Lshr(($418|0),($421|0),8)|0); //@line 2830 "stream_encoder.c"
  $423 = tempRet0; //@line 2830 "stream_encoder.c"
  $424 = $13; //@line 2830 "stream_encoder.c"
  $425 = $424; //@line 2830 "stream_encoder.c"
  HEAP32[$425>>2] = $422; //@line 2830 "stream_encoder.c"
  $426 = (($424) + 4)|0; //@line 2830 "stream_encoder.c"
  $427 = $426; //@line 2830 "stream_encoder.c"
  HEAP32[$427>>2] = $423; //@line 2830 "stream_encoder.c"
  $428 = $13; //@line 2831 "stream_encoder.c"
  $429 = $428; //@line 2831 "stream_encoder.c"
  $430 = HEAP32[$429>>2]|0; //@line 2831 "stream_encoder.c"
  $431 = (($428) + 4)|0; //@line 2831 "stream_encoder.c"
  $432 = $431; //@line 2831 "stream_encoder.c"
  $433 = HEAP32[$432>>2]|0; //@line 2831 "stream_encoder.c"
  $434 = $430&255; //@line 2831 "stream_encoder.c"
  $435 = ((($2)) + 5|0); //@line 2831 "stream_encoder.c"
  HEAP8[$435>>0] = $434; //@line 2831 "stream_encoder.c"
  $436 = $13; //@line 2831 "stream_encoder.c"
  $437 = $436; //@line 2831 "stream_encoder.c"
  $438 = HEAP32[$437>>2]|0; //@line 2831 "stream_encoder.c"
  $439 = (($436) + 4)|0; //@line 2831 "stream_encoder.c"
  $440 = $439; //@line 2831 "stream_encoder.c"
  $441 = HEAP32[$440>>2]|0; //@line 2831 "stream_encoder.c"
  $442 = (_bitshift64Lshr(($438|0),($441|0),8)|0); //@line 2831 "stream_encoder.c"
  $443 = tempRet0; //@line 2831 "stream_encoder.c"
  $444 = $13; //@line 2831 "stream_encoder.c"
  $445 = $444; //@line 2831 "stream_encoder.c"
  HEAP32[$445>>2] = $442; //@line 2831 "stream_encoder.c"
  $446 = (($444) + 4)|0; //@line 2831 "stream_encoder.c"
  $447 = $446; //@line 2831 "stream_encoder.c"
  HEAP32[$447>>2] = $443; //@line 2831 "stream_encoder.c"
  $448 = $13; //@line 2832 "stream_encoder.c"
  $449 = $448; //@line 2832 "stream_encoder.c"
  $450 = HEAP32[$449>>2]|0; //@line 2832 "stream_encoder.c"
  $451 = (($448) + 4)|0; //@line 2832 "stream_encoder.c"
  $452 = $451; //@line 2832 "stream_encoder.c"
  $453 = HEAP32[$452>>2]|0; //@line 2832 "stream_encoder.c"
  $454 = $450&255; //@line 2832 "stream_encoder.c"
  $455 = ((($2)) + 4|0); //@line 2832 "stream_encoder.c"
  HEAP8[$455>>0] = $454; //@line 2832 "stream_encoder.c"
  $456 = $13; //@line 2832 "stream_encoder.c"
  $457 = $456; //@line 2832 "stream_encoder.c"
  $458 = HEAP32[$457>>2]|0; //@line 2832 "stream_encoder.c"
  $459 = (($456) + 4)|0; //@line 2832 "stream_encoder.c"
  $460 = $459; //@line 2832 "stream_encoder.c"
  $461 = HEAP32[$460>>2]|0; //@line 2832 "stream_encoder.c"
  $462 = (_bitshift64Lshr(($458|0),($461|0),8)|0); //@line 2832 "stream_encoder.c"
  $463 = tempRet0; //@line 2832 "stream_encoder.c"
  $464 = $13; //@line 2832 "stream_encoder.c"
  $465 = $464; //@line 2832 "stream_encoder.c"
  HEAP32[$465>>2] = $462; //@line 2832 "stream_encoder.c"
  $466 = (($464) + 4)|0; //@line 2832 "stream_encoder.c"
  $467 = $466; //@line 2832 "stream_encoder.c"
  HEAP32[$467>>2] = $463; //@line 2832 "stream_encoder.c"
  $468 = $13; //@line 2833 "stream_encoder.c"
  $469 = $468; //@line 2833 "stream_encoder.c"
  $470 = HEAP32[$469>>2]|0; //@line 2833 "stream_encoder.c"
  $471 = (($468) + 4)|0; //@line 2833 "stream_encoder.c"
  $472 = $471; //@line 2833 "stream_encoder.c"
  $473 = HEAP32[$472>>2]|0; //@line 2833 "stream_encoder.c"
  $474 = $470&255; //@line 2833 "stream_encoder.c"
  $475 = ((($2)) + 3|0); //@line 2833 "stream_encoder.c"
  HEAP8[$475>>0] = $474; //@line 2833 "stream_encoder.c"
  $476 = $13; //@line 2833 "stream_encoder.c"
  $477 = $476; //@line 2833 "stream_encoder.c"
  $478 = HEAP32[$477>>2]|0; //@line 2833 "stream_encoder.c"
  $479 = (($476) + 4)|0; //@line 2833 "stream_encoder.c"
  $480 = $479; //@line 2833 "stream_encoder.c"
  $481 = HEAP32[$480>>2]|0; //@line 2833 "stream_encoder.c"
  $482 = (_bitshift64Lshr(($478|0),($481|0),8)|0); //@line 2833 "stream_encoder.c"
  $483 = tempRet0; //@line 2833 "stream_encoder.c"
  $484 = $13; //@line 2833 "stream_encoder.c"
  $485 = $484; //@line 2833 "stream_encoder.c"
  HEAP32[$485>>2] = $482; //@line 2833 "stream_encoder.c"
  $486 = (($484) + 4)|0; //@line 2833 "stream_encoder.c"
  $487 = $486; //@line 2833 "stream_encoder.c"
  HEAP32[$487>>2] = $483; //@line 2833 "stream_encoder.c"
  $488 = $13; //@line 2834 "stream_encoder.c"
  $489 = $488; //@line 2834 "stream_encoder.c"
  $490 = HEAP32[$489>>2]|0; //@line 2834 "stream_encoder.c"
  $491 = (($488) + 4)|0; //@line 2834 "stream_encoder.c"
  $492 = $491; //@line 2834 "stream_encoder.c"
  $493 = HEAP32[$492>>2]|0; //@line 2834 "stream_encoder.c"
  $494 = $490&255; //@line 2834 "stream_encoder.c"
  $495 = ((($2)) + 2|0); //@line 2834 "stream_encoder.c"
  HEAP8[$495>>0] = $494; //@line 2834 "stream_encoder.c"
  $496 = $13; //@line 2834 "stream_encoder.c"
  $497 = $496; //@line 2834 "stream_encoder.c"
  $498 = HEAP32[$497>>2]|0; //@line 2834 "stream_encoder.c"
  $499 = (($496) + 4)|0; //@line 2834 "stream_encoder.c"
  $500 = $499; //@line 2834 "stream_encoder.c"
  $501 = HEAP32[$500>>2]|0; //@line 2834 "stream_encoder.c"
  $502 = (_bitshift64Lshr(($498|0),($501|0),8)|0); //@line 2834 "stream_encoder.c"
  $503 = tempRet0; //@line 2834 "stream_encoder.c"
  $504 = $13; //@line 2834 "stream_encoder.c"
  $505 = $504; //@line 2834 "stream_encoder.c"
  HEAP32[$505>>2] = $502; //@line 2834 "stream_encoder.c"
  $506 = (($504) + 4)|0; //@line 2834 "stream_encoder.c"
  $507 = $506; //@line 2834 "stream_encoder.c"
  HEAP32[$507>>2] = $503; //@line 2834 "stream_encoder.c"
  $508 = $13; //@line 2835 "stream_encoder.c"
  $509 = $508; //@line 2835 "stream_encoder.c"
  $510 = HEAP32[$509>>2]|0; //@line 2835 "stream_encoder.c"
  $511 = (($508) + 4)|0; //@line 2835 "stream_encoder.c"
  $512 = $511; //@line 2835 "stream_encoder.c"
  $513 = HEAP32[$512>>2]|0; //@line 2835 "stream_encoder.c"
  $514 = $510&255; //@line 2835 "stream_encoder.c"
  $515 = ((($2)) + 1|0); //@line 2835 "stream_encoder.c"
  HEAP8[$515>>0] = $514; //@line 2835 "stream_encoder.c"
  $516 = $13; //@line 2835 "stream_encoder.c"
  $517 = $516; //@line 2835 "stream_encoder.c"
  $518 = HEAP32[$517>>2]|0; //@line 2835 "stream_encoder.c"
  $519 = (($516) + 4)|0; //@line 2835 "stream_encoder.c"
  $520 = $519; //@line 2835 "stream_encoder.c"
  $521 = HEAP32[$520>>2]|0; //@line 2835 "stream_encoder.c"
  $522 = (_bitshift64Lshr(($518|0),($521|0),8)|0); //@line 2835 "stream_encoder.c"
  $523 = tempRet0; //@line 2835 "stream_encoder.c"
  $524 = $13; //@line 2835 "stream_encoder.c"
  $525 = $524; //@line 2835 "stream_encoder.c"
  HEAP32[$525>>2] = $522; //@line 2835 "stream_encoder.c"
  $526 = (($524) + 4)|0; //@line 2835 "stream_encoder.c"
  $527 = $526; //@line 2835 "stream_encoder.c"
  HEAP32[$527>>2] = $523; //@line 2835 "stream_encoder.c"
  $528 = $13; //@line 2836 "stream_encoder.c"
  $529 = $528; //@line 2836 "stream_encoder.c"
  $530 = HEAP32[$529>>2]|0; //@line 2836 "stream_encoder.c"
  $531 = (($528) + 4)|0; //@line 2836 "stream_encoder.c"
  $532 = $531; //@line 2836 "stream_encoder.c"
  $533 = HEAP32[$532>>2]|0; //@line 2836 "stream_encoder.c"
  $534 = $530&255; //@line 2836 "stream_encoder.c"
  HEAP8[$2>>0] = $534; //@line 2836 "stream_encoder.c"
  $535 = $13; //@line 2836 "stream_encoder.c"
  $536 = $535; //@line 2836 "stream_encoder.c"
  $537 = HEAP32[$536>>2]|0; //@line 2836 "stream_encoder.c"
  $538 = (($535) + 4)|0; //@line 2836 "stream_encoder.c"
  $539 = $538; //@line 2836 "stream_encoder.c"
  $540 = HEAP32[$539>>2]|0; //@line 2836 "stream_encoder.c"
  $541 = (_bitshift64Lshr(($537|0),($540|0),8)|0); //@line 2836 "stream_encoder.c"
  $542 = tempRet0; //@line 2836 "stream_encoder.c"
  $543 = $13; //@line 2836 "stream_encoder.c"
  $544 = $543; //@line 2836 "stream_encoder.c"
  HEAP32[$544>>2] = $541; //@line 2836 "stream_encoder.c"
  $545 = (($543) + 4)|0; //@line 2836 "stream_encoder.c"
  $546 = $545; //@line 2836 "stream_encoder.c"
  HEAP32[$546>>2] = $542; //@line 2836 "stream_encoder.c"
  $547 = $1; //@line 2837 "stream_encoder.c"
  $548 = ((($547)) + 4|0); //@line 2837 "stream_encoder.c"
  $549 = HEAP32[$548>>2]|0; //@line 2837 "stream_encoder.c"
  $550 = ((($549)) + 7048|0); //@line 2837 "stream_encoder.c"
  $551 = HEAP32[$550>>2]|0; //@line 2837 "stream_encoder.c"
  $552 = ((($551)) + 4|0); //@line 2837 "stream_encoder.c"
  $553 = HEAP32[$552>>2]|0; //@line 2837 "stream_encoder.c"
  $554 = $12; //@line 2837 "stream_encoder.c"
  $555 = (($553) + (($554*24)|0)|0); //@line 2837 "stream_encoder.c"
  $556 = ((($555)) + 8|0); //@line 2837 "stream_encoder.c"
  $557 = $556; //@line 2837 "stream_encoder.c"
  $558 = $557; //@line 2837 "stream_encoder.c"
  $559 = HEAP32[$558>>2]|0; //@line 2837 "stream_encoder.c"
  $560 = (($557) + 4)|0; //@line 2837 "stream_encoder.c"
  $561 = $560; //@line 2837 "stream_encoder.c"
  $562 = HEAP32[$561>>2]|0; //@line 2837 "stream_encoder.c"
  $563 = $13; //@line 2837 "stream_encoder.c"
  $564 = $563; //@line 2837 "stream_encoder.c"
  HEAP32[$564>>2] = $559; //@line 2837 "stream_encoder.c"
  $565 = (($563) + 4)|0; //@line 2837 "stream_encoder.c"
  $566 = $565; //@line 2837 "stream_encoder.c"
  HEAP32[$566>>2] = $562; //@line 2837 "stream_encoder.c"
  $567 = $13; //@line 2838 "stream_encoder.c"
  $568 = $567; //@line 2838 "stream_encoder.c"
  $569 = HEAP32[$568>>2]|0; //@line 2838 "stream_encoder.c"
  $570 = (($567) + 4)|0; //@line 2838 "stream_encoder.c"
  $571 = $570; //@line 2838 "stream_encoder.c"
  $572 = HEAP32[$571>>2]|0; //@line 2838 "stream_encoder.c"
  $573 = $569&255; //@line 2838 "stream_encoder.c"
  $574 = ((($2)) + 15|0); //@line 2838 "stream_encoder.c"
  HEAP8[$574>>0] = $573; //@line 2838 "stream_encoder.c"
  $575 = $13; //@line 2838 "stream_encoder.c"
  $576 = $575; //@line 2838 "stream_encoder.c"
  $577 = HEAP32[$576>>2]|0; //@line 2838 "stream_encoder.c"
  $578 = (($575) + 4)|0; //@line 2838 "stream_encoder.c"
  $579 = $578; //@line 2838 "stream_encoder.c"
  $580 = HEAP32[$579>>2]|0; //@line 2838 "stream_encoder.c"
  $581 = (_bitshift64Lshr(($577|0),($580|0),8)|0); //@line 2838 "stream_encoder.c"
  $582 = tempRet0; //@line 2838 "stream_encoder.c"
  $583 = $13; //@line 2838 "stream_encoder.c"
  $584 = $583; //@line 2838 "stream_encoder.c"
  HEAP32[$584>>2] = $581; //@line 2838 "stream_encoder.c"
  $585 = (($583) + 4)|0; //@line 2838 "stream_encoder.c"
  $586 = $585; //@line 2838 "stream_encoder.c"
  HEAP32[$586>>2] = $582; //@line 2838 "stream_encoder.c"
  $587 = $13; //@line 2839 "stream_encoder.c"
  $588 = $587; //@line 2839 "stream_encoder.c"
  $589 = HEAP32[$588>>2]|0; //@line 2839 "stream_encoder.c"
  $590 = (($587) + 4)|0; //@line 2839 "stream_encoder.c"
  $591 = $590; //@line 2839 "stream_encoder.c"
  $592 = HEAP32[$591>>2]|0; //@line 2839 "stream_encoder.c"
  $593 = $589&255; //@line 2839 "stream_encoder.c"
  $594 = ((($2)) + 14|0); //@line 2839 "stream_encoder.c"
  HEAP8[$594>>0] = $593; //@line 2839 "stream_encoder.c"
  $595 = $13; //@line 2839 "stream_encoder.c"
  $596 = $595; //@line 2839 "stream_encoder.c"
  $597 = HEAP32[$596>>2]|0; //@line 2839 "stream_encoder.c"
  $598 = (($595) + 4)|0; //@line 2839 "stream_encoder.c"
  $599 = $598; //@line 2839 "stream_encoder.c"
  $600 = HEAP32[$599>>2]|0; //@line 2839 "stream_encoder.c"
  $601 = (_bitshift64Lshr(($597|0),($600|0),8)|0); //@line 2839 "stream_encoder.c"
  $602 = tempRet0; //@line 2839 "stream_encoder.c"
  $603 = $13; //@line 2839 "stream_encoder.c"
  $604 = $603; //@line 2839 "stream_encoder.c"
  HEAP32[$604>>2] = $601; //@line 2839 "stream_encoder.c"
  $605 = (($603) + 4)|0; //@line 2839 "stream_encoder.c"
  $606 = $605; //@line 2839 "stream_encoder.c"
  HEAP32[$606>>2] = $602; //@line 2839 "stream_encoder.c"
  $607 = $13; //@line 2840 "stream_encoder.c"
  $608 = $607; //@line 2840 "stream_encoder.c"
  $609 = HEAP32[$608>>2]|0; //@line 2840 "stream_encoder.c"
  $610 = (($607) + 4)|0; //@line 2840 "stream_encoder.c"
  $611 = $610; //@line 2840 "stream_encoder.c"
  $612 = HEAP32[$611>>2]|0; //@line 2840 "stream_encoder.c"
  $613 = $609&255; //@line 2840 "stream_encoder.c"
  $614 = ((($2)) + 13|0); //@line 2840 "stream_encoder.c"
  HEAP8[$614>>0] = $613; //@line 2840 "stream_encoder.c"
  $615 = $13; //@line 2840 "stream_encoder.c"
  $616 = $615; //@line 2840 "stream_encoder.c"
  $617 = HEAP32[$616>>2]|0; //@line 2840 "stream_encoder.c"
  $618 = (($615) + 4)|0; //@line 2840 "stream_encoder.c"
  $619 = $618; //@line 2840 "stream_encoder.c"
  $620 = HEAP32[$619>>2]|0; //@line 2840 "stream_encoder.c"
  $621 = (_bitshift64Lshr(($617|0),($620|0),8)|0); //@line 2840 "stream_encoder.c"
  $622 = tempRet0; //@line 2840 "stream_encoder.c"
  $623 = $13; //@line 2840 "stream_encoder.c"
  $624 = $623; //@line 2840 "stream_encoder.c"
  HEAP32[$624>>2] = $621; //@line 2840 "stream_encoder.c"
  $625 = (($623) + 4)|0; //@line 2840 "stream_encoder.c"
  $626 = $625; //@line 2840 "stream_encoder.c"
  HEAP32[$626>>2] = $622; //@line 2840 "stream_encoder.c"
  $627 = $13; //@line 2841 "stream_encoder.c"
  $628 = $627; //@line 2841 "stream_encoder.c"
  $629 = HEAP32[$628>>2]|0; //@line 2841 "stream_encoder.c"
  $630 = (($627) + 4)|0; //@line 2841 "stream_encoder.c"
  $631 = $630; //@line 2841 "stream_encoder.c"
  $632 = HEAP32[$631>>2]|0; //@line 2841 "stream_encoder.c"
  $633 = $629&255; //@line 2841 "stream_encoder.c"
  $634 = ((($2)) + 12|0); //@line 2841 "stream_encoder.c"
  HEAP8[$634>>0] = $633; //@line 2841 "stream_encoder.c"
  $635 = $13; //@line 2841 "stream_encoder.c"
  $636 = $635; //@line 2841 "stream_encoder.c"
  $637 = HEAP32[$636>>2]|0; //@line 2841 "stream_encoder.c"
  $638 = (($635) + 4)|0; //@line 2841 "stream_encoder.c"
  $639 = $638; //@line 2841 "stream_encoder.c"
  $640 = HEAP32[$639>>2]|0; //@line 2841 "stream_encoder.c"
  $641 = (_bitshift64Lshr(($637|0),($640|0),8)|0); //@line 2841 "stream_encoder.c"
  $642 = tempRet0; //@line 2841 "stream_encoder.c"
  $643 = $13; //@line 2841 "stream_encoder.c"
  $644 = $643; //@line 2841 "stream_encoder.c"
  HEAP32[$644>>2] = $641; //@line 2841 "stream_encoder.c"
  $645 = (($643) + 4)|0; //@line 2841 "stream_encoder.c"
  $646 = $645; //@line 2841 "stream_encoder.c"
  HEAP32[$646>>2] = $642; //@line 2841 "stream_encoder.c"
  $647 = $13; //@line 2842 "stream_encoder.c"
  $648 = $647; //@line 2842 "stream_encoder.c"
  $649 = HEAP32[$648>>2]|0; //@line 2842 "stream_encoder.c"
  $650 = (($647) + 4)|0; //@line 2842 "stream_encoder.c"
  $651 = $650; //@line 2842 "stream_encoder.c"
  $652 = HEAP32[$651>>2]|0; //@line 2842 "stream_encoder.c"
  $653 = $649&255; //@line 2842 "stream_encoder.c"
  $654 = ((($2)) + 11|0); //@line 2842 "stream_encoder.c"
  HEAP8[$654>>0] = $653; //@line 2842 "stream_encoder.c"
  $655 = $13; //@line 2842 "stream_encoder.c"
  $656 = $655; //@line 2842 "stream_encoder.c"
  $657 = HEAP32[$656>>2]|0; //@line 2842 "stream_encoder.c"
  $658 = (($655) + 4)|0; //@line 2842 "stream_encoder.c"
  $659 = $658; //@line 2842 "stream_encoder.c"
  $660 = HEAP32[$659>>2]|0; //@line 2842 "stream_encoder.c"
  $661 = (_bitshift64Lshr(($657|0),($660|0),8)|0); //@line 2842 "stream_encoder.c"
  $662 = tempRet0; //@line 2842 "stream_encoder.c"
  $663 = $13; //@line 2842 "stream_encoder.c"
  $664 = $663; //@line 2842 "stream_encoder.c"
  HEAP32[$664>>2] = $661; //@line 2842 "stream_encoder.c"
  $665 = (($663) + 4)|0; //@line 2842 "stream_encoder.c"
  $666 = $665; //@line 2842 "stream_encoder.c"
  HEAP32[$666>>2] = $662; //@line 2842 "stream_encoder.c"
  $667 = $13; //@line 2843 "stream_encoder.c"
  $668 = $667; //@line 2843 "stream_encoder.c"
  $669 = HEAP32[$668>>2]|0; //@line 2843 "stream_encoder.c"
  $670 = (($667) + 4)|0; //@line 2843 "stream_encoder.c"
  $671 = $670; //@line 2843 "stream_encoder.c"
  $672 = HEAP32[$671>>2]|0; //@line 2843 "stream_encoder.c"
  $673 = $669&255; //@line 2843 "stream_encoder.c"
  $674 = ((($2)) + 10|0); //@line 2843 "stream_encoder.c"
  HEAP8[$674>>0] = $673; //@line 2843 "stream_encoder.c"
  $675 = $13; //@line 2843 "stream_encoder.c"
  $676 = $675; //@line 2843 "stream_encoder.c"
  $677 = HEAP32[$676>>2]|0; //@line 2843 "stream_encoder.c"
  $678 = (($675) + 4)|0; //@line 2843 "stream_encoder.c"
  $679 = $678; //@line 2843 "stream_encoder.c"
  $680 = HEAP32[$679>>2]|0; //@line 2843 "stream_encoder.c"
  $681 = (_bitshift64Lshr(($677|0),($680|0),8)|0); //@line 2843 "stream_encoder.c"
  $682 = tempRet0; //@line 2843 "stream_encoder.c"
  $683 = $13; //@line 2843 "stream_encoder.c"
  $684 = $683; //@line 2843 "stream_encoder.c"
  HEAP32[$684>>2] = $681; //@line 2843 "stream_encoder.c"
  $685 = (($683) + 4)|0; //@line 2843 "stream_encoder.c"
  $686 = $685; //@line 2843 "stream_encoder.c"
  HEAP32[$686>>2] = $682; //@line 2843 "stream_encoder.c"
  $687 = $13; //@line 2844 "stream_encoder.c"
  $688 = $687; //@line 2844 "stream_encoder.c"
  $689 = HEAP32[$688>>2]|0; //@line 2844 "stream_encoder.c"
  $690 = (($687) + 4)|0; //@line 2844 "stream_encoder.c"
  $691 = $690; //@line 2844 "stream_encoder.c"
  $692 = HEAP32[$691>>2]|0; //@line 2844 "stream_encoder.c"
  $693 = $689&255; //@line 2844 "stream_encoder.c"
  $694 = ((($2)) + 9|0); //@line 2844 "stream_encoder.c"
  HEAP8[$694>>0] = $693; //@line 2844 "stream_encoder.c"
  $695 = $13; //@line 2844 "stream_encoder.c"
  $696 = $695; //@line 2844 "stream_encoder.c"
  $697 = HEAP32[$696>>2]|0; //@line 2844 "stream_encoder.c"
  $698 = (($695) + 4)|0; //@line 2844 "stream_encoder.c"
  $699 = $698; //@line 2844 "stream_encoder.c"
  $700 = HEAP32[$699>>2]|0; //@line 2844 "stream_encoder.c"
  $701 = (_bitshift64Lshr(($697|0),($700|0),8)|0); //@line 2844 "stream_encoder.c"
  $702 = tempRet0; //@line 2844 "stream_encoder.c"
  $703 = $13; //@line 2844 "stream_encoder.c"
  $704 = $703; //@line 2844 "stream_encoder.c"
  HEAP32[$704>>2] = $701; //@line 2844 "stream_encoder.c"
  $705 = (($703) + 4)|0; //@line 2844 "stream_encoder.c"
  $706 = $705; //@line 2844 "stream_encoder.c"
  HEAP32[$706>>2] = $702; //@line 2844 "stream_encoder.c"
  $707 = $13; //@line 2845 "stream_encoder.c"
  $708 = $707; //@line 2845 "stream_encoder.c"
  $709 = HEAP32[$708>>2]|0; //@line 2845 "stream_encoder.c"
  $710 = (($707) + 4)|0; //@line 2845 "stream_encoder.c"
  $711 = $710; //@line 2845 "stream_encoder.c"
  $712 = HEAP32[$711>>2]|0; //@line 2845 "stream_encoder.c"
  $713 = $709&255; //@line 2845 "stream_encoder.c"
  $714 = ((($2)) + 8|0); //@line 2845 "stream_encoder.c"
  HEAP8[$714>>0] = $713; //@line 2845 "stream_encoder.c"
  $715 = $13; //@line 2845 "stream_encoder.c"
  $716 = $715; //@line 2845 "stream_encoder.c"
  $717 = HEAP32[$716>>2]|0; //@line 2845 "stream_encoder.c"
  $718 = (($715) + 4)|0; //@line 2845 "stream_encoder.c"
  $719 = $718; //@line 2845 "stream_encoder.c"
  $720 = HEAP32[$719>>2]|0; //@line 2845 "stream_encoder.c"
  $721 = (_bitshift64Lshr(($717|0),($720|0),8)|0); //@line 2845 "stream_encoder.c"
  $722 = tempRet0; //@line 2845 "stream_encoder.c"
  $723 = $13; //@line 2845 "stream_encoder.c"
  $724 = $723; //@line 2845 "stream_encoder.c"
  HEAP32[$724>>2] = $721; //@line 2845 "stream_encoder.c"
  $725 = (($723) + 4)|0; //@line 2845 "stream_encoder.c"
  $726 = $725; //@line 2845 "stream_encoder.c"
  HEAP32[$726>>2] = $722; //@line 2845 "stream_encoder.c"
  $727 = $1; //@line 2846 "stream_encoder.c"
  $728 = ((($727)) + 4|0); //@line 2846 "stream_encoder.c"
  $729 = HEAP32[$728>>2]|0; //@line 2846 "stream_encoder.c"
  $730 = ((($729)) + 7048|0); //@line 2846 "stream_encoder.c"
  $731 = HEAP32[$730>>2]|0; //@line 2846 "stream_encoder.c"
  $732 = ((($731)) + 4|0); //@line 2846 "stream_encoder.c"
  $733 = HEAP32[$732>>2]|0; //@line 2846 "stream_encoder.c"
  $734 = $12; //@line 2846 "stream_encoder.c"
  $735 = (($733) + (($734*24)|0)|0); //@line 2846 "stream_encoder.c"
  $736 = ((($735)) + 16|0); //@line 2846 "stream_encoder.c"
  $737 = HEAP32[$736>>2]|0; //@line 2846 "stream_encoder.c"
  $14 = $737; //@line 2846 "stream_encoder.c"
  $738 = $14; //@line 2847 "stream_encoder.c"
  $739 = $738&255; //@line 2847 "stream_encoder.c"
  $740 = ((($2)) + 17|0); //@line 2847 "stream_encoder.c"
  HEAP8[$740>>0] = $739; //@line 2847 "stream_encoder.c"
  $741 = $14; //@line 2847 "stream_encoder.c"
  $742 = $741 >>> 8; //@line 2847 "stream_encoder.c"
  $14 = $742; //@line 2847 "stream_encoder.c"
  $743 = $14; //@line 2848 "stream_encoder.c"
  $744 = $743&255; //@line 2848 "stream_encoder.c"
  $745 = ((($2)) + 16|0); //@line 2848 "stream_encoder.c"
  HEAP8[$745>>0] = $744; //@line 2848 "stream_encoder.c"
  $746 = $14; //@line 2848 "stream_encoder.c"
  $747 = $746 >>> 8; //@line 2848 "stream_encoder.c"
  $14 = $747; //@line 2848 "stream_encoder.c"
  $748 = $1; //@line 2849 "stream_encoder.c"
  $749 = ((($748)) + 4|0); //@line 2849 "stream_encoder.c"
  $750 = HEAP32[$749>>2]|0; //@line 2849 "stream_encoder.c"
  $751 = ((($750)) + 7300|0); //@line 2849 "stream_encoder.c"
  $752 = HEAP32[$751>>2]|0; //@line 2849 "stream_encoder.c"
  $753 = $1; //@line 2849 "stream_encoder.c"
  $754 = $1; //@line 2849 "stream_encoder.c"
  $755 = ((($754)) + 4|0); //@line 2849 "stream_encoder.c"
  $756 = HEAP32[$755>>2]|0; //@line 2849 "stream_encoder.c"
  $757 = ((($756)) + 7312|0); //@line 2849 "stream_encoder.c"
  $758 = HEAP32[$757>>2]|0; //@line 2849 "stream_encoder.c"
  $759 = (FUNCTION_TABLE_iiiiiii[$752 & 7]($753,$2,18,0,0,$758)|0); //@line 2849 "stream_encoder.c"
  $760 = ($759|0)!=(0); //@line 2849 "stream_encoder.c"
  if ($760) {
   break;
  }
  $763 = $12; //@line 2825 "stream_encoder.c"
  $764 = (($763) + 1)|0; //@line 2825 "stream_encoder.c"
  $12 = $764; //@line 2825 "stream_encoder.c"
 }
 if ((label|0) == 27) {
  STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
 }
 $761 = $1; //@line 2850 "stream_encoder.c"
 $762 = HEAP32[$761>>2]|0; //@line 2850 "stream_encoder.c"
 HEAP32[$762>>2] = 5; //@line 2850 "stream_encoder.c"
 STACKTOP = sp;return; //@line 2855 "stream_encoder.c"
}
function _free_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1; //@line 2346 "stream_encoder.c"
 $5 = HEAP32[$4>>2]|0; //@line 2346 "stream_encoder.c"
 $6 = ((($5)) + 600|0); //@line 2346 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 2346 "stream_encoder.c"
 $8 = ($7|0)!=(0|0); //@line 2346 "stream_encoder.c"
 if ($8) {
  $9 = $1; //@line 2347 "stream_encoder.c"
  $10 = HEAP32[$9>>2]|0; //@line 2347 "stream_encoder.c"
  $11 = ((($10)) + 600|0); //@line 2347 "stream_encoder.c"
  $12 = HEAP32[$11>>2]|0; //@line 2347 "stream_encoder.c"
  _free($12); //@line 2347 "stream_encoder.c"
  $13 = $1; //@line 2348 "stream_encoder.c"
  $14 = HEAP32[$13>>2]|0; //@line 2348 "stream_encoder.c"
  $15 = ((($14)) + 600|0); //@line 2348 "stream_encoder.c"
  HEAP32[$15>>2] = 0; //@line 2348 "stream_encoder.c"
  $16 = $1; //@line 2349 "stream_encoder.c"
  $17 = HEAP32[$16>>2]|0; //@line 2349 "stream_encoder.c"
  $18 = ((($17)) + 604|0); //@line 2349 "stream_encoder.c"
  HEAP32[$18>>2] = 0; //@line 2349 "stream_encoder.c"
 }
 $2 = 0; //@line 2351 "stream_encoder.c"
 while(1) {
  $19 = $2; //@line 2351 "stream_encoder.c"
  $20 = $1; //@line 2351 "stream_encoder.c"
  $21 = HEAP32[$20>>2]|0; //@line 2351 "stream_encoder.c"
  $22 = ((($21)) + 24|0); //@line 2351 "stream_encoder.c"
  $23 = HEAP32[$22>>2]|0; //@line 2351 "stream_encoder.c"
  $24 = ($19>>>0)<($23>>>0); //@line 2351 "stream_encoder.c"
  if (!($24)) {
   break;
  }
  $25 = $1; //@line 2352 "stream_encoder.c"
  $26 = ((($25)) + 4|0); //@line 2352 "stream_encoder.c"
  $27 = HEAP32[$26>>2]|0; //@line 2352 "stream_encoder.c"
  $28 = ((($27)) + 7352|0); //@line 2352 "stream_encoder.c"
  $29 = $2; //@line 2352 "stream_encoder.c"
  $30 = (($28) + ($29<<2)|0); //@line 2352 "stream_encoder.c"
  $31 = HEAP32[$30>>2]|0; //@line 2352 "stream_encoder.c"
  $32 = (0|0)!=($31|0); //@line 2352 "stream_encoder.c"
  if ($32) {
   $33 = $1; //@line 2353 "stream_encoder.c"
   $34 = ((($33)) + 4|0); //@line 2353 "stream_encoder.c"
   $35 = HEAP32[$34>>2]|0; //@line 2353 "stream_encoder.c"
   $36 = ((($35)) + 7352|0); //@line 2353 "stream_encoder.c"
   $37 = $2; //@line 2353 "stream_encoder.c"
   $38 = (($36) + ($37<<2)|0); //@line 2353 "stream_encoder.c"
   $39 = HEAP32[$38>>2]|0; //@line 2353 "stream_encoder.c"
   _free($39); //@line 2353 "stream_encoder.c"
   $40 = $1; //@line 2354 "stream_encoder.c"
   $41 = ((($40)) + 4|0); //@line 2354 "stream_encoder.c"
   $42 = HEAP32[$41>>2]|0; //@line 2354 "stream_encoder.c"
   $43 = ((($42)) + 7352|0); //@line 2354 "stream_encoder.c"
   $44 = $2; //@line 2354 "stream_encoder.c"
   $45 = (($43) + ($44<<2)|0); //@line 2354 "stream_encoder.c"
   HEAP32[$45>>2] = 0; //@line 2354 "stream_encoder.c"
  }
  $46 = $1; //@line 2357 "stream_encoder.c"
  $47 = ((($46)) + 4|0); //@line 2357 "stream_encoder.c"
  $48 = HEAP32[$47>>2]|0; //@line 2357 "stream_encoder.c"
  $49 = ((($48)) + 7392|0); //@line 2357 "stream_encoder.c"
  $50 = $2; //@line 2357 "stream_encoder.c"
  $51 = (($49) + ($50<<2)|0); //@line 2357 "stream_encoder.c"
  $52 = HEAP32[$51>>2]|0; //@line 2357 "stream_encoder.c"
  $53 = (0|0)!=($52|0); //@line 2357 "stream_encoder.c"
  if ($53) {
   $54 = $1; //@line 2358 "stream_encoder.c"
   $55 = ((($54)) + 4|0); //@line 2358 "stream_encoder.c"
   $56 = HEAP32[$55>>2]|0; //@line 2358 "stream_encoder.c"
   $57 = ((($56)) + 7392|0); //@line 2358 "stream_encoder.c"
   $58 = $2; //@line 2358 "stream_encoder.c"
   $59 = (($57) + ($58<<2)|0); //@line 2358 "stream_encoder.c"
   $60 = HEAP32[$59>>2]|0; //@line 2358 "stream_encoder.c"
   _free($60); //@line 2358 "stream_encoder.c"
   $61 = $1; //@line 2359 "stream_encoder.c"
   $62 = ((($61)) + 4|0); //@line 2359 "stream_encoder.c"
   $63 = HEAP32[$62>>2]|0; //@line 2359 "stream_encoder.c"
   $64 = ((($63)) + 7392|0); //@line 2359 "stream_encoder.c"
   $65 = $2; //@line 2359 "stream_encoder.c"
   $66 = (($64) + ($65<<2)|0); //@line 2359 "stream_encoder.c"
   HEAP32[$66>>2] = 0; //@line 2359 "stream_encoder.c"
  }
  $67 = $2; //@line 2351 "stream_encoder.c"
  $68 = (($67) + 1)|0; //@line 2351 "stream_encoder.c"
  $2 = $68; //@line 2351 "stream_encoder.c"
 }
 $2 = 0; //@line 2363 "stream_encoder.c"
 while(1) {
  $69 = $2; //@line 2363 "stream_encoder.c"
  $70 = ($69>>>0)<(2); //@line 2363 "stream_encoder.c"
  if (!($70)) {
   break;
  }
  $71 = $1; //@line 2364 "stream_encoder.c"
  $72 = ((($71)) + 4|0); //@line 2364 "stream_encoder.c"
  $73 = HEAP32[$72>>2]|0; //@line 2364 "stream_encoder.c"
  $74 = ((($73)) + 7384|0); //@line 2364 "stream_encoder.c"
  $75 = $2; //@line 2364 "stream_encoder.c"
  $76 = (($74) + ($75<<2)|0); //@line 2364 "stream_encoder.c"
  $77 = HEAP32[$76>>2]|0; //@line 2364 "stream_encoder.c"
  $78 = (0|0)!=($77|0); //@line 2364 "stream_encoder.c"
  if ($78) {
   $79 = $1; //@line 2365 "stream_encoder.c"
   $80 = ((($79)) + 4|0); //@line 2365 "stream_encoder.c"
   $81 = HEAP32[$80>>2]|0; //@line 2365 "stream_encoder.c"
   $82 = ((($81)) + 7384|0); //@line 2365 "stream_encoder.c"
   $83 = $2; //@line 2365 "stream_encoder.c"
   $84 = (($82) + ($83<<2)|0); //@line 2365 "stream_encoder.c"
   $85 = HEAP32[$84>>2]|0; //@line 2365 "stream_encoder.c"
   _free($85); //@line 2365 "stream_encoder.c"
   $86 = $1; //@line 2366 "stream_encoder.c"
   $87 = ((($86)) + 4|0); //@line 2366 "stream_encoder.c"
   $88 = HEAP32[$87>>2]|0; //@line 2366 "stream_encoder.c"
   $89 = ((($88)) + 7384|0); //@line 2366 "stream_encoder.c"
   $90 = $2; //@line 2366 "stream_encoder.c"
   $91 = (($89) + ($90<<2)|0); //@line 2366 "stream_encoder.c"
   HEAP32[$91>>2] = 0; //@line 2366 "stream_encoder.c"
  }
  $92 = $1; //@line 2369 "stream_encoder.c"
  $93 = ((($92)) + 4|0); //@line 2369 "stream_encoder.c"
  $94 = HEAP32[$93>>2]|0; //@line 2369 "stream_encoder.c"
  $95 = ((($94)) + 7424|0); //@line 2369 "stream_encoder.c"
  $96 = $2; //@line 2369 "stream_encoder.c"
  $97 = (($95) + ($96<<2)|0); //@line 2369 "stream_encoder.c"
  $98 = HEAP32[$97>>2]|0; //@line 2369 "stream_encoder.c"
  $99 = (0|0)!=($98|0); //@line 2369 "stream_encoder.c"
  if ($99) {
   $100 = $1; //@line 2370 "stream_encoder.c"
   $101 = ((($100)) + 4|0); //@line 2370 "stream_encoder.c"
   $102 = HEAP32[$101>>2]|0; //@line 2370 "stream_encoder.c"
   $103 = ((($102)) + 7424|0); //@line 2370 "stream_encoder.c"
   $104 = $2; //@line 2370 "stream_encoder.c"
   $105 = (($103) + ($104<<2)|0); //@line 2370 "stream_encoder.c"
   $106 = HEAP32[$105>>2]|0; //@line 2370 "stream_encoder.c"
   _free($106); //@line 2370 "stream_encoder.c"
   $107 = $1; //@line 2371 "stream_encoder.c"
   $108 = ((($107)) + 4|0); //@line 2371 "stream_encoder.c"
   $109 = HEAP32[$108>>2]|0; //@line 2371 "stream_encoder.c"
   $110 = ((($109)) + 7424|0); //@line 2371 "stream_encoder.c"
   $111 = $2; //@line 2371 "stream_encoder.c"
   $112 = (($110) + ($111<<2)|0); //@line 2371 "stream_encoder.c"
   HEAP32[$112>>2] = 0; //@line 2371 "stream_encoder.c"
  }
  $113 = $2; //@line 2363 "stream_encoder.c"
  $114 = (($113) + 1)|0; //@line 2363 "stream_encoder.c"
  $2 = $114; //@line 2363 "stream_encoder.c"
 }
 $2 = 0; //@line 2376 "stream_encoder.c"
 while(1) {
  $115 = $2; //@line 2376 "stream_encoder.c"
  $116 = $1; //@line 2376 "stream_encoder.c"
  $117 = HEAP32[$116>>2]|0; //@line 2376 "stream_encoder.c"
  $118 = ((($117)) + 40|0); //@line 2376 "stream_encoder.c"
  $119 = HEAP32[$118>>2]|0; //@line 2376 "stream_encoder.c"
  $120 = ($115>>>0)<($119>>>0); //@line 2376 "stream_encoder.c"
  $121 = $1;
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  if (!($120)) {
   break;
  }
  $124 = ((($123)) + 7432|0); //@line 2377 "stream_encoder.c"
  $125 = $2; //@line 2377 "stream_encoder.c"
  $126 = (($124) + ($125<<2)|0); //@line 2377 "stream_encoder.c"
  $127 = HEAP32[$126>>2]|0; //@line 2377 "stream_encoder.c"
  $128 = (0|0)!=($127|0); //@line 2377 "stream_encoder.c"
  if ($128) {
   $129 = $1; //@line 2378 "stream_encoder.c"
   $130 = ((($129)) + 4|0); //@line 2378 "stream_encoder.c"
   $131 = HEAP32[$130>>2]|0; //@line 2378 "stream_encoder.c"
   $132 = ((($131)) + 7432|0); //@line 2378 "stream_encoder.c"
   $133 = $2; //@line 2378 "stream_encoder.c"
   $134 = (($132) + ($133<<2)|0); //@line 2378 "stream_encoder.c"
   $135 = HEAP32[$134>>2]|0; //@line 2378 "stream_encoder.c"
   _free($135); //@line 2378 "stream_encoder.c"
   $136 = $1; //@line 2379 "stream_encoder.c"
   $137 = ((($136)) + 4|0); //@line 2379 "stream_encoder.c"
   $138 = HEAP32[$137>>2]|0; //@line 2379 "stream_encoder.c"
   $139 = ((($138)) + 7432|0); //@line 2379 "stream_encoder.c"
   $140 = $2; //@line 2379 "stream_encoder.c"
   $141 = (($139) + ($140<<2)|0); //@line 2379 "stream_encoder.c"
   HEAP32[$141>>2] = 0; //@line 2379 "stream_encoder.c"
  }
  $142 = $2; //@line 2376 "stream_encoder.c"
  $143 = (($142) + 1)|0; //@line 2376 "stream_encoder.c"
  $2 = $143; //@line 2376 "stream_encoder.c"
 }
 $144 = ((($123)) + 7560|0); //@line 2382 "stream_encoder.c"
 $145 = HEAP32[$144>>2]|0; //@line 2382 "stream_encoder.c"
 $146 = (0|0)!=($145|0); //@line 2382 "stream_encoder.c"
 if ($146) {
  $147 = $1; //@line 2383 "stream_encoder.c"
  $148 = ((($147)) + 4|0); //@line 2383 "stream_encoder.c"
  $149 = HEAP32[$148>>2]|0; //@line 2383 "stream_encoder.c"
  $150 = ((($149)) + 7560|0); //@line 2383 "stream_encoder.c"
  $151 = HEAP32[$150>>2]|0; //@line 2383 "stream_encoder.c"
  _free($151); //@line 2383 "stream_encoder.c"
  $152 = $1; //@line 2384 "stream_encoder.c"
  $153 = ((($152)) + 4|0); //@line 2384 "stream_encoder.c"
  $154 = HEAP32[$153>>2]|0; //@line 2384 "stream_encoder.c"
  $155 = ((($154)) + 7560|0); //@line 2384 "stream_encoder.c"
  HEAP32[$155>>2] = 0; //@line 2384 "stream_encoder.c"
 }
 $3 = 0; //@line 2387 "stream_encoder.c"
 while(1) {
  $156 = $3; //@line 2387 "stream_encoder.c"
  $157 = $1; //@line 2387 "stream_encoder.c"
  $158 = HEAP32[$157>>2]|0; //@line 2387 "stream_encoder.c"
  $159 = ((($158)) + 24|0); //@line 2387 "stream_encoder.c"
  $160 = HEAP32[$159>>2]|0; //@line 2387 "stream_encoder.c"
  $161 = ($156>>>0)<($160>>>0); //@line 2387 "stream_encoder.c"
  if (!($161)) {
   break;
  }
  $2 = 0; //@line 2388 "stream_encoder.c"
  while(1) {
   $162 = $2; //@line 2388 "stream_encoder.c"
   $163 = ($162>>>0)<(2); //@line 2388 "stream_encoder.c"
   if (!($163)) {
    break;
   }
   $164 = $1; //@line 2389 "stream_encoder.c"
   $165 = ((($164)) + 4|0); //@line 2389 "stream_encoder.c"
   $166 = HEAP32[$165>>2]|0; //@line 2389 "stream_encoder.c"
   $167 = ((($166)) + 7564|0); //@line 2389 "stream_encoder.c"
   $168 = $3; //@line 2389 "stream_encoder.c"
   $169 = (($167) + ($168<<3)|0); //@line 2389 "stream_encoder.c"
   $170 = $2; //@line 2389 "stream_encoder.c"
   $171 = (($169) + ($170<<2)|0); //@line 2389 "stream_encoder.c"
   $172 = HEAP32[$171>>2]|0; //@line 2389 "stream_encoder.c"
   $173 = (0|0)!=($172|0); //@line 2389 "stream_encoder.c"
   if ($173) {
    $174 = $1; //@line 2390 "stream_encoder.c"
    $175 = ((($174)) + 4|0); //@line 2390 "stream_encoder.c"
    $176 = HEAP32[$175>>2]|0; //@line 2390 "stream_encoder.c"
    $177 = ((($176)) + 7564|0); //@line 2390 "stream_encoder.c"
    $178 = $3; //@line 2390 "stream_encoder.c"
    $179 = (($177) + ($178<<3)|0); //@line 2390 "stream_encoder.c"
    $180 = $2; //@line 2390 "stream_encoder.c"
    $181 = (($179) + ($180<<2)|0); //@line 2390 "stream_encoder.c"
    $182 = HEAP32[$181>>2]|0; //@line 2390 "stream_encoder.c"
    _free($182); //@line 2390 "stream_encoder.c"
    $183 = $1; //@line 2391 "stream_encoder.c"
    $184 = ((($183)) + 4|0); //@line 2391 "stream_encoder.c"
    $185 = HEAP32[$184>>2]|0; //@line 2391 "stream_encoder.c"
    $186 = ((($185)) + 7564|0); //@line 2391 "stream_encoder.c"
    $187 = $3; //@line 2391 "stream_encoder.c"
    $188 = (($186) + ($187<<3)|0); //@line 2391 "stream_encoder.c"
    $189 = $2; //@line 2391 "stream_encoder.c"
    $190 = (($188) + ($189<<2)|0); //@line 2391 "stream_encoder.c"
    HEAP32[$190>>2] = 0; //@line 2391 "stream_encoder.c"
   }
   $191 = $2; //@line 2388 "stream_encoder.c"
   $192 = (($191) + 1)|0; //@line 2388 "stream_encoder.c"
   $2 = $192; //@line 2388 "stream_encoder.c"
  }
  $193 = $3; //@line 2387 "stream_encoder.c"
  $194 = (($193) + 1)|0; //@line 2387 "stream_encoder.c"
  $3 = $194; //@line 2387 "stream_encoder.c"
 }
 $3 = 0; //@line 2395 "stream_encoder.c"
 while(1) {
  $195 = $3; //@line 2395 "stream_encoder.c"
  $196 = ($195>>>0)<(2); //@line 2395 "stream_encoder.c"
  if (!($196)) {
   break;
  }
  $2 = 0; //@line 2396 "stream_encoder.c"
  while(1) {
   $197 = $2; //@line 2396 "stream_encoder.c"
   $198 = ($197>>>0)<(2); //@line 2396 "stream_encoder.c"
   if (!($198)) {
    break;
   }
   $199 = $1; //@line 2397 "stream_encoder.c"
   $200 = ((($199)) + 4|0); //@line 2397 "stream_encoder.c"
   $201 = HEAP32[$200>>2]|0; //@line 2397 "stream_encoder.c"
   $202 = ((($201)) + 7628|0); //@line 2397 "stream_encoder.c"
   $203 = $3; //@line 2397 "stream_encoder.c"
   $204 = (($202) + ($203<<3)|0); //@line 2397 "stream_encoder.c"
   $205 = $2; //@line 2397 "stream_encoder.c"
   $206 = (($204) + ($205<<2)|0); //@line 2397 "stream_encoder.c"
   $207 = HEAP32[$206>>2]|0; //@line 2397 "stream_encoder.c"
   $208 = (0|0)!=($207|0); //@line 2397 "stream_encoder.c"
   if ($208) {
    $209 = $1; //@line 2398 "stream_encoder.c"
    $210 = ((($209)) + 4|0); //@line 2398 "stream_encoder.c"
    $211 = HEAP32[$210>>2]|0; //@line 2398 "stream_encoder.c"
    $212 = ((($211)) + 7628|0); //@line 2398 "stream_encoder.c"
    $213 = $3; //@line 2398 "stream_encoder.c"
    $214 = (($212) + ($213<<3)|0); //@line 2398 "stream_encoder.c"
    $215 = $2; //@line 2398 "stream_encoder.c"
    $216 = (($214) + ($215<<2)|0); //@line 2398 "stream_encoder.c"
    $217 = HEAP32[$216>>2]|0; //@line 2398 "stream_encoder.c"
    _free($217); //@line 2398 "stream_encoder.c"
    $218 = $1; //@line 2399 "stream_encoder.c"
    $219 = ((($218)) + 4|0); //@line 2399 "stream_encoder.c"
    $220 = HEAP32[$219>>2]|0; //@line 2399 "stream_encoder.c"
    $221 = ((($220)) + 7628|0); //@line 2399 "stream_encoder.c"
    $222 = $3; //@line 2399 "stream_encoder.c"
    $223 = (($221) + ($222<<3)|0); //@line 2399 "stream_encoder.c"
    $224 = $2; //@line 2399 "stream_encoder.c"
    $225 = (($223) + ($224<<2)|0); //@line 2399 "stream_encoder.c"
    HEAP32[$225>>2] = 0; //@line 2399 "stream_encoder.c"
   }
   $226 = $2; //@line 2396 "stream_encoder.c"
   $227 = (($226) + 1)|0; //@line 2396 "stream_encoder.c"
   $2 = $227; //@line 2396 "stream_encoder.c"
  }
  $228 = $3; //@line 2395 "stream_encoder.c"
  $229 = (($228) + 1)|0; //@line 2395 "stream_encoder.c"
  $3 = $229; //@line 2395 "stream_encoder.c"
 }
 $230 = $1; //@line 2403 "stream_encoder.c"
 $231 = ((($230)) + 4|0); //@line 2403 "stream_encoder.c"
 $232 = HEAP32[$231>>2]|0; //@line 2403 "stream_encoder.c"
 $233 = ((($232)) + 7644|0); //@line 2403 "stream_encoder.c"
 $234 = HEAP32[$233>>2]|0; //@line 2403 "stream_encoder.c"
 $235 = (0|0)!=($234|0); //@line 2403 "stream_encoder.c"
 if ($235) {
  $236 = $1; //@line 2404 "stream_encoder.c"
  $237 = ((($236)) + 4|0); //@line 2404 "stream_encoder.c"
  $238 = HEAP32[$237>>2]|0; //@line 2404 "stream_encoder.c"
  $239 = ((($238)) + 7644|0); //@line 2404 "stream_encoder.c"
  $240 = HEAP32[$239>>2]|0; //@line 2404 "stream_encoder.c"
  _free($240); //@line 2404 "stream_encoder.c"
  $241 = $1; //@line 2405 "stream_encoder.c"
  $242 = ((($241)) + 4|0); //@line 2405 "stream_encoder.c"
  $243 = HEAP32[$242>>2]|0; //@line 2405 "stream_encoder.c"
  $244 = ((($243)) + 7644|0); //@line 2405 "stream_encoder.c"
  HEAP32[$244>>2] = 0; //@line 2405 "stream_encoder.c"
 }
 $245 = $1; //@line 2407 "stream_encoder.c"
 $246 = ((($245)) + 4|0); //@line 2407 "stream_encoder.c"
 $247 = HEAP32[$246>>2]|0; //@line 2407 "stream_encoder.c"
 $248 = ((($247)) + 7648|0); //@line 2407 "stream_encoder.c"
 $249 = HEAP32[$248>>2]|0; //@line 2407 "stream_encoder.c"
 $250 = (0|0)!=($249|0); //@line 2407 "stream_encoder.c"
 if ($250) {
  $251 = $1; //@line 2408 "stream_encoder.c"
  $252 = ((($251)) + 4|0); //@line 2408 "stream_encoder.c"
  $253 = HEAP32[$252>>2]|0; //@line 2408 "stream_encoder.c"
  $254 = ((($253)) + 7648|0); //@line 2408 "stream_encoder.c"
  $255 = HEAP32[$254>>2]|0; //@line 2408 "stream_encoder.c"
  _free($255); //@line 2408 "stream_encoder.c"
  $256 = $1; //@line 2409 "stream_encoder.c"
  $257 = ((($256)) + 4|0); //@line 2409 "stream_encoder.c"
  $258 = HEAP32[$257>>2]|0; //@line 2409 "stream_encoder.c"
  $259 = ((($258)) + 7648|0); //@line 2409 "stream_encoder.c"
  HEAP32[$259>>2] = 0; //@line 2409 "stream_encoder.c"
 }
 $260 = $1; //@line 2411 "stream_encoder.c"
 $261 = HEAP32[$260>>2]|0; //@line 2411 "stream_encoder.c"
 $262 = ((($261)) + 4|0); //@line 2411 "stream_encoder.c"
 $263 = HEAP32[$262>>2]|0; //@line 2411 "stream_encoder.c"
 $264 = ($263|0)!=(0); //@line 2411 "stream_encoder.c"
 if (!($264)) {
  $297 = $1; //@line 2419 "stream_encoder.c"
  $298 = ((($297)) + 4|0); //@line 2419 "stream_encoder.c"
  $299 = HEAP32[$298>>2]|0; //@line 2419 "stream_encoder.c"
  $300 = ((($299)) + 6856|0); //@line 2419 "stream_encoder.c"
  $301 = HEAP32[$300>>2]|0; //@line 2419 "stream_encoder.c"
  _FLAC__bitwriter_free($301); //@line 2419 "stream_encoder.c"
  STACKTOP = sp;return; //@line 2420 "stream_encoder.c"
 }
 $2 = 0; //@line 2412 "stream_encoder.c"
 while(1) {
  $265 = $2; //@line 2412 "stream_encoder.c"
  $266 = $1; //@line 2412 "stream_encoder.c"
  $267 = HEAP32[$266>>2]|0; //@line 2412 "stream_encoder.c"
  $268 = ((($267)) + 24|0); //@line 2412 "stream_encoder.c"
  $269 = HEAP32[$268>>2]|0; //@line 2412 "stream_encoder.c"
  $270 = ($265>>>0)<($269>>>0); //@line 2412 "stream_encoder.c"
  if (!($270)) {
   break;
  }
  $271 = $1; //@line 2413 "stream_encoder.c"
  $272 = ((($271)) + 4|0); //@line 2413 "stream_encoder.c"
  $273 = HEAP32[$272>>2]|0; //@line 2413 "stream_encoder.c"
  $274 = ((($273)) + 11776|0); //@line 2413 "stream_encoder.c"
  $275 = ((($274)) + 12|0); //@line 2413 "stream_encoder.c"
  $276 = $2; //@line 2413 "stream_encoder.c"
  $277 = (($275) + ($276<<2)|0); //@line 2413 "stream_encoder.c"
  $278 = HEAP32[$277>>2]|0; //@line 2413 "stream_encoder.c"
  $279 = (0|0)!=($278|0); //@line 2413 "stream_encoder.c"
  if ($279) {
   $280 = $1; //@line 2414 "stream_encoder.c"
   $281 = ((($280)) + 4|0); //@line 2414 "stream_encoder.c"
   $282 = HEAP32[$281>>2]|0; //@line 2414 "stream_encoder.c"
   $283 = ((($282)) + 11776|0); //@line 2414 "stream_encoder.c"
   $284 = ((($283)) + 12|0); //@line 2414 "stream_encoder.c"
   $285 = $2; //@line 2414 "stream_encoder.c"
   $286 = (($284) + ($285<<2)|0); //@line 2414 "stream_encoder.c"
   $287 = HEAP32[$286>>2]|0; //@line 2414 "stream_encoder.c"
   _free($287); //@line 2414 "stream_encoder.c"
   $288 = $1; //@line 2415 "stream_encoder.c"
   $289 = ((($288)) + 4|0); //@line 2415 "stream_encoder.c"
   $290 = HEAP32[$289>>2]|0; //@line 2415 "stream_encoder.c"
   $291 = ((($290)) + 11776|0); //@line 2415 "stream_encoder.c"
   $292 = ((($291)) + 12|0); //@line 2415 "stream_encoder.c"
   $293 = $2; //@line 2415 "stream_encoder.c"
   $294 = (($292) + ($293<<2)|0); //@line 2415 "stream_encoder.c"
   HEAP32[$294>>2] = 0; //@line 2415 "stream_encoder.c"
  }
  $295 = $2; //@line 2412 "stream_encoder.c"
  $296 = (($295) + 1)|0; //@line 2412 "stream_encoder.c"
  $2 = $296; //@line 2412 "stream_encoder.c"
 }
 $297 = $1; //@line 2419 "stream_encoder.c"
 $298 = ((($297)) + 4|0); //@line 2419 "stream_encoder.c"
 $299 = HEAP32[$298>>2]|0; //@line 2419 "stream_encoder.c"
 $300 = ((($299)) + 6856|0); //@line 2419 "stream_encoder.c"
 $301 = HEAP32[$300>>2]|0; //@line 2419 "stream_encoder.c"
 _FLAC__bitwriter_free($301); //@line 2419 "stream_encoder.c"
 STACKTOP = sp;return; //@line 2420 "stream_encoder.c"
}
function _process_subframes_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 $18 = sp + 48|0;
 $3 = $0;
 $4 = $1;
 $21 = $3; //@line 3110 "stream_encoder.c"
 $22 = HEAP32[$21>>2]|0; //@line 3110 "stream_encoder.c"
 $23 = ((($22)) + 576|0); //@line 3110 "stream_encoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 3110 "stream_encoder.c"
 $7 = $24; //@line 3110 "stream_encoder.c"
 $25 = $4; //@line 3116 "stream_encoder.c"
 $26 = ($25|0)!=(0); //@line 3116 "stream_encoder.c"
 if ($26) {
  $8 = 0; //@line 3117 "stream_encoder.c"
 } else {
  $27 = $3; //@line 3120 "stream_encoder.c"
  $28 = HEAP32[$27>>2]|0; //@line 3120 "stream_encoder.c"
  $29 = ((($28)) + 36|0); //@line 3120 "stream_encoder.c"
  $30 = HEAP32[$29>>2]|0; //@line 3120 "stream_encoder.c"
  $31 = (_FLAC__format_get_max_rice_partition_order_from_blocksize($30)|0); //@line 3120 "stream_encoder.c"
  $8 = $31; //@line 3120 "stream_encoder.c"
  $32 = $8; //@line 3121 "stream_encoder.c"
  $33 = $3; //@line 3121 "stream_encoder.c"
  $34 = HEAP32[$33>>2]|0; //@line 3121 "stream_encoder.c"
  $35 = ((($34)) + 580|0); //@line 3121 "stream_encoder.c"
  $36 = HEAP32[$35>>2]|0; //@line 3121 "stream_encoder.c"
  $37 = ($32>>>0)<($36>>>0); //@line 3121 "stream_encoder.c"
  if ($37) {
   $38 = $8; //@line 3121 "stream_encoder.c"
   $43 = $38;
  } else {
   $39 = $3; //@line 3121 "stream_encoder.c"
   $40 = HEAP32[$39>>2]|0; //@line 3121 "stream_encoder.c"
   $41 = ((($40)) + 580|0); //@line 3121 "stream_encoder.c"
   $42 = HEAP32[$41>>2]|0; //@line 3121 "stream_encoder.c"
   $43 = $42;
  }
  $8 = $43; //@line 3121 "stream_encoder.c"
 }
 $44 = $7; //@line 3123 "stream_encoder.c"
 $45 = $8; //@line 3123 "stream_encoder.c"
 $46 = ($44>>>0)<($45>>>0); //@line 3123 "stream_encoder.c"
 $47 = $7; //@line 3123 "stream_encoder.c"
 $48 = $8; //@line 3123 "stream_encoder.c"
 $49 = $46 ? $47 : $48; //@line 3123 "stream_encoder.c"
 $7 = $49; //@line 3123 "stream_encoder.c"
 $50 = $3; //@line 3128 "stream_encoder.c"
 $51 = HEAP32[$50>>2]|0; //@line 3128 "stream_encoder.c"
 $52 = ((($51)) + 36|0); //@line 3128 "stream_encoder.c"
 $53 = HEAP32[$52>>2]|0; //@line 3128 "stream_encoder.c"
 HEAP32[$5>>2] = $53; //@line 3128 "stream_encoder.c"
 $54 = $3; //@line 3129 "stream_encoder.c"
 $55 = HEAP32[$54>>2]|0; //@line 3129 "stream_encoder.c"
 $56 = ((($55)) + 32|0); //@line 3129 "stream_encoder.c"
 $57 = HEAP32[$56>>2]|0; //@line 3129 "stream_encoder.c"
 $58 = ((($5)) + 4|0); //@line 3129 "stream_encoder.c"
 HEAP32[$58>>2] = $57; //@line 3129 "stream_encoder.c"
 $59 = $3; //@line 3130 "stream_encoder.c"
 $60 = HEAP32[$59>>2]|0; //@line 3130 "stream_encoder.c"
 $61 = ((($60)) + 24|0); //@line 3130 "stream_encoder.c"
 $62 = HEAP32[$61>>2]|0; //@line 3130 "stream_encoder.c"
 $63 = ((($5)) + 8|0); //@line 3130 "stream_encoder.c"
 HEAP32[$63>>2] = $62; //@line 3130 "stream_encoder.c"
 $64 = ((($5)) + 12|0); //@line 3131 "stream_encoder.c"
 HEAP32[$64>>2] = 0; //@line 3131 "stream_encoder.c"
 $65 = $3; //@line 3132 "stream_encoder.c"
 $66 = HEAP32[$65>>2]|0; //@line 3132 "stream_encoder.c"
 $67 = ((($66)) + 28|0); //@line 3132 "stream_encoder.c"
 $68 = HEAP32[$67>>2]|0; //@line 3132 "stream_encoder.c"
 $69 = ((($5)) + 16|0); //@line 3132 "stream_encoder.c"
 HEAP32[$69>>2] = $68; //@line 3132 "stream_encoder.c"
 $70 = ((($5)) + 20|0); //@line 3133 "stream_encoder.c"
 HEAP32[$70>>2] = 0; //@line 3133 "stream_encoder.c"
 $71 = $3; //@line 3134 "stream_encoder.c"
 $72 = ((($71)) + 4|0); //@line 3134 "stream_encoder.c"
 $73 = HEAP32[$72>>2]|0; //@line 3134 "stream_encoder.c"
 $74 = ((($73)) + 7056|0); //@line 3134 "stream_encoder.c"
 $75 = HEAP32[$74>>2]|0; //@line 3134 "stream_encoder.c"
 $76 = ((($5)) + 24|0); //@line 3134 "stream_encoder.c"
 HEAP32[$76>>2] = $75; //@line 3134 "stream_encoder.c"
 $77 = $3; //@line 3139 "stream_encoder.c"
 $78 = HEAP32[$77>>2]|0; //@line 3139 "stream_encoder.c"
 $79 = ((($78)) + 16|0); //@line 3139 "stream_encoder.c"
 $80 = HEAP32[$79>>2]|0; //@line 3139 "stream_encoder.c"
 $81 = ($80|0)!=(0); //@line 3139 "stream_encoder.c"
 do {
  if ($81) {
   $82 = $3; //@line 3140 "stream_encoder.c"
   $83 = HEAP32[$82>>2]|0; //@line 3140 "stream_encoder.c"
   $84 = ((($83)) + 20|0); //@line 3140 "stream_encoder.c"
   $85 = HEAP32[$84>>2]|0; //@line 3140 "stream_encoder.c"
   $86 = ($85|0)!=(0); //@line 3140 "stream_encoder.c"
   if (!($86)) {
    $9 = 1; //@line 3151 "stream_encoder.c"
    $10 = 1; //@line 3152 "stream_encoder.c"
    break;
   }
   $87 = $3; //@line 3141 "stream_encoder.c"
   $88 = ((($87)) + 4|0); //@line 3141 "stream_encoder.c"
   $89 = HEAP32[$88>>2]|0; //@line 3141 "stream_encoder.c"
   $90 = ((($89)) + 6864|0); //@line 3141 "stream_encoder.c"
   $91 = HEAP32[$90>>2]|0; //@line 3141 "stream_encoder.c"
   $92 = ($91|0)==(0); //@line 3141 "stream_encoder.c"
   if ($92) {
    $9 = 1; //@line 3142 "stream_encoder.c"
    $10 = 1; //@line 3143 "stream_encoder.c"
    break;
   } else {
    $93 = $3; //@line 3146 "stream_encoder.c"
    $94 = ((($93)) + 4|0); //@line 3146 "stream_encoder.c"
    $95 = HEAP32[$94>>2]|0; //@line 3146 "stream_encoder.c"
    $96 = ((($95)) + 6868|0); //@line 3146 "stream_encoder.c"
    $97 = HEAP32[$96>>2]|0; //@line 3146 "stream_encoder.c"
    $98 = ($97|0)==(0); //@line 3146 "stream_encoder.c"
    $99 = $98&1; //@line 3146 "stream_encoder.c"
    $9 = $99; //@line 3146 "stream_encoder.c"
    $100 = $9; //@line 3147 "stream_encoder.c"
    $101 = ($100|0)!=(0); //@line 3147 "stream_encoder.c"
    $102 = $101 ^ 1; //@line 3147 "stream_encoder.c"
    $103 = $102&1; //@line 3147 "stream_encoder.c"
    $10 = $103; //@line 3147 "stream_encoder.c"
    break;
   }
  } else {
   $9 = 1; //@line 3156 "stream_encoder.c"
   $10 = 0; //@line 3157 "stream_encoder.c"
  }
 } while(0);
 $104 = $9; //@line 3165 "stream_encoder.c"
 $105 = ($104|0)!=(0); //@line 3165 "stream_encoder.c"
 L19: do {
  if ($105) {
   $6 = 0; //@line 3166 "stream_encoder.c"
   while(1) {
    $106 = $6; //@line 3166 "stream_encoder.c"
    $107 = $3; //@line 3166 "stream_encoder.c"
    $108 = HEAP32[$107>>2]|0; //@line 3166 "stream_encoder.c"
    $109 = ((($108)) + 24|0); //@line 3166 "stream_encoder.c"
    $110 = HEAP32[$109>>2]|0; //@line 3166 "stream_encoder.c"
    $111 = ($106>>>0)<($110>>>0); //@line 3166 "stream_encoder.c"
    if (!($111)) {
     break L19;
    }
    $112 = $3; //@line 3167 "stream_encoder.c"
    $113 = ((($112)) + 4|0); //@line 3167 "stream_encoder.c"
    $114 = HEAP32[$113>>2]|0; //@line 3167 "stream_encoder.c"
    $115 = ((($114)) + 4|0); //@line 3167 "stream_encoder.c"
    $116 = $6; //@line 3167 "stream_encoder.c"
    $117 = (($115) + ($116<<2)|0); //@line 3167 "stream_encoder.c"
    $118 = HEAP32[$117>>2]|0; //@line 3167 "stream_encoder.c"
    $119 = $3; //@line 3167 "stream_encoder.c"
    $120 = HEAP32[$119>>2]|0; //@line 3167 "stream_encoder.c"
    $121 = ((($120)) + 36|0); //@line 3167 "stream_encoder.c"
    $122 = HEAP32[$121>>2]|0; //@line 3167 "stream_encoder.c"
    $123 = (_get_wasted_bits_($118,$122)|0); //@line 3167 "stream_encoder.c"
    $11 = $123; //@line 3167 "stream_encoder.c"
    $124 = $11; //@line 3168 "stream_encoder.c"
    $125 = $3; //@line 3168 "stream_encoder.c"
    $126 = HEAP32[$125>>2]|0; //@line 3168 "stream_encoder.c"
    $127 = ((($126)) + 28|0); //@line 3168 "stream_encoder.c"
    $128 = HEAP32[$127>>2]|0; //@line 3168 "stream_encoder.c"
    $129 = ($124>>>0)>($128>>>0); //@line 3168 "stream_encoder.c"
    if ($129) {
     $130 = $3; //@line 3169 "stream_encoder.c"
     $131 = HEAP32[$130>>2]|0; //@line 3169 "stream_encoder.c"
     $132 = ((($131)) + 28|0); //@line 3169 "stream_encoder.c"
     $133 = HEAP32[$132>>2]|0; //@line 3169 "stream_encoder.c"
     $11 = $133; //@line 3169 "stream_encoder.c"
    }
    $134 = $11; //@line 3171 "stream_encoder.c"
    $135 = $3; //@line 3171 "stream_encoder.c"
    $136 = ((($135)) + 4|0); //@line 3171 "stream_encoder.c"
    $137 = HEAP32[$136>>2]|0; //@line 3171 "stream_encoder.c"
    $138 = ((($137)) + 336|0); //@line 3171 "stream_encoder.c"
    $139 = $6; //@line 3171 "stream_encoder.c"
    $140 = (($138) + (($139*584)|0)|0); //@line 3171 "stream_encoder.c"
    $141 = ((($140)) + 292|0); //@line 3171 "stream_encoder.c"
    $142 = ((($141)) + 288|0); //@line 3171 "stream_encoder.c"
    HEAP32[$142>>2] = $134; //@line 3171 "stream_encoder.c"
    $143 = $3; //@line 3171 "stream_encoder.c"
    $144 = ((($143)) + 4|0); //@line 3171 "stream_encoder.c"
    $145 = HEAP32[$144>>2]|0; //@line 3171 "stream_encoder.c"
    $146 = ((($145)) + 336|0); //@line 3171 "stream_encoder.c"
    $147 = $6; //@line 3171 "stream_encoder.c"
    $148 = (($146) + (($147*584)|0)|0); //@line 3171 "stream_encoder.c"
    $149 = ((($148)) + 288|0); //@line 3171 "stream_encoder.c"
    HEAP32[$149>>2] = $134; //@line 3171 "stream_encoder.c"
    $150 = $3; //@line 3172 "stream_encoder.c"
    $151 = HEAP32[$150>>2]|0; //@line 3172 "stream_encoder.c"
    $152 = ((($151)) + 28|0); //@line 3172 "stream_encoder.c"
    $153 = HEAP32[$152>>2]|0; //@line 3172 "stream_encoder.c"
    $154 = $11; //@line 3172 "stream_encoder.c"
    $155 = (($153) - ($154))|0; //@line 3172 "stream_encoder.c"
    $156 = $3; //@line 3172 "stream_encoder.c"
    $157 = ((($156)) + 4|0); //@line 3172 "stream_encoder.c"
    $158 = HEAP32[$157>>2]|0; //@line 3172 "stream_encoder.c"
    $159 = ((($158)) + 216|0); //@line 3172 "stream_encoder.c"
    $160 = $6; //@line 3172 "stream_encoder.c"
    $161 = (($159) + ($160<<2)|0); //@line 3172 "stream_encoder.c"
    HEAP32[$161>>2] = $155; //@line 3172 "stream_encoder.c"
    $162 = $6; //@line 3166 "stream_encoder.c"
    $163 = (($162) + 1)|0; //@line 3166 "stream_encoder.c"
    $6 = $163; //@line 3166 "stream_encoder.c"
   }
  }
 } while(0);
 $164 = $10; //@line 3175 "stream_encoder.c"
 $165 = ($164|0)!=(0); //@line 3175 "stream_encoder.c"
 L28: do {
  if ($165) {
   $6 = 0; //@line 3177 "stream_encoder.c"
   while(1) {
    $166 = $6; //@line 3177 "stream_encoder.c"
    $167 = ($166>>>0)<(2); //@line 3177 "stream_encoder.c"
    if (!($167)) {
     break L28;
    }
    $168 = $3; //@line 3178 "stream_encoder.c"
    $169 = ((($168)) + 4|0); //@line 3178 "stream_encoder.c"
    $170 = HEAP32[$169>>2]|0; //@line 3178 "stream_encoder.c"
    $171 = ((($170)) + 36|0); //@line 3178 "stream_encoder.c"
    $172 = $6; //@line 3178 "stream_encoder.c"
    $173 = (($171) + ($172<<2)|0); //@line 3178 "stream_encoder.c"
    $174 = HEAP32[$173>>2]|0; //@line 3178 "stream_encoder.c"
    $175 = $3; //@line 3178 "stream_encoder.c"
    $176 = HEAP32[$175>>2]|0; //@line 3178 "stream_encoder.c"
    $177 = ((($176)) + 36|0); //@line 3178 "stream_encoder.c"
    $178 = HEAP32[$177>>2]|0; //@line 3178 "stream_encoder.c"
    $179 = (_get_wasted_bits_($174,$178)|0); //@line 3178 "stream_encoder.c"
    $12 = $179; //@line 3178 "stream_encoder.c"
    $180 = $12; //@line 3179 "stream_encoder.c"
    $181 = $3; //@line 3179 "stream_encoder.c"
    $182 = HEAP32[$181>>2]|0; //@line 3179 "stream_encoder.c"
    $183 = ((($182)) + 28|0); //@line 3179 "stream_encoder.c"
    $184 = HEAP32[$183>>2]|0; //@line 3179 "stream_encoder.c"
    $185 = ($180>>>0)>($184>>>0); //@line 3179 "stream_encoder.c"
    if ($185) {
     $186 = $3; //@line 3180 "stream_encoder.c"
     $187 = HEAP32[$186>>2]|0; //@line 3180 "stream_encoder.c"
     $188 = ((($187)) + 28|0); //@line 3180 "stream_encoder.c"
     $189 = HEAP32[$188>>2]|0; //@line 3180 "stream_encoder.c"
     $12 = $189; //@line 3180 "stream_encoder.c"
    }
    $190 = $12; //@line 3182 "stream_encoder.c"
    $191 = $3; //@line 3182 "stream_encoder.c"
    $192 = ((($191)) + 4|0); //@line 3182 "stream_encoder.c"
    $193 = HEAP32[$192>>2]|0; //@line 3182 "stream_encoder.c"
    $194 = ((($193)) + 5008|0); //@line 3182 "stream_encoder.c"
    $195 = $6; //@line 3182 "stream_encoder.c"
    $196 = (($194) + (($195*584)|0)|0); //@line 3182 "stream_encoder.c"
    $197 = ((($196)) + 292|0); //@line 3182 "stream_encoder.c"
    $198 = ((($197)) + 288|0); //@line 3182 "stream_encoder.c"
    HEAP32[$198>>2] = $190; //@line 3182 "stream_encoder.c"
    $199 = $3; //@line 3182 "stream_encoder.c"
    $200 = ((($199)) + 4|0); //@line 3182 "stream_encoder.c"
    $201 = HEAP32[$200>>2]|0; //@line 3182 "stream_encoder.c"
    $202 = ((($201)) + 5008|0); //@line 3182 "stream_encoder.c"
    $203 = $6; //@line 3182 "stream_encoder.c"
    $204 = (($202) + (($203*584)|0)|0); //@line 3182 "stream_encoder.c"
    $205 = ((($204)) + 288|0); //@line 3182 "stream_encoder.c"
    HEAP32[$205>>2] = $190; //@line 3182 "stream_encoder.c"
    $206 = $3; //@line 3183 "stream_encoder.c"
    $207 = HEAP32[$206>>2]|0; //@line 3183 "stream_encoder.c"
    $208 = ((($207)) + 28|0); //@line 3183 "stream_encoder.c"
    $209 = HEAP32[$208>>2]|0; //@line 3183 "stream_encoder.c"
    $210 = $12; //@line 3183 "stream_encoder.c"
    $211 = (($209) - ($210))|0; //@line 3183 "stream_encoder.c"
    $212 = $6; //@line 3183 "stream_encoder.c"
    $213 = ($212|0)==(0); //@line 3183 "stream_encoder.c"
    $214 = $213 ? 0 : 1; //@line 3183 "stream_encoder.c"
    $215 = (($211) + ($214))|0; //@line 3183 "stream_encoder.c"
    $216 = $3; //@line 3183 "stream_encoder.c"
    $217 = ((($216)) + 4|0); //@line 3183 "stream_encoder.c"
    $218 = HEAP32[$217>>2]|0; //@line 3183 "stream_encoder.c"
    $219 = ((($218)) + 248|0); //@line 3183 "stream_encoder.c"
    $220 = $6; //@line 3183 "stream_encoder.c"
    $221 = (($219) + ($220<<2)|0); //@line 3183 "stream_encoder.c"
    HEAP32[$221>>2] = $215; //@line 3183 "stream_encoder.c"
    $222 = $6; //@line 3177 "stream_encoder.c"
    $223 = (($222) + 1)|0; //@line 3177 "stream_encoder.c"
    $6 = $223; //@line 3177 "stream_encoder.c"
   }
  }
 } while(0);
 $224 = $9; //@line 3190 "stream_encoder.c"
 $225 = ($224|0)!=(0); //@line 3190 "stream_encoder.c"
 L37: do {
  if ($225) {
   $6 = 0; //@line 3191 "stream_encoder.c"
   while(1) {
    $226 = $6; //@line 3191 "stream_encoder.c"
    $227 = $3; //@line 3191 "stream_encoder.c"
    $228 = HEAP32[$227>>2]|0; //@line 3191 "stream_encoder.c"
    $229 = ((($228)) + 24|0); //@line 3191 "stream_encoder.c"
    $230 = HEAP32[$229>>2]|0; //@line 3191 "stream_encoder.c"
    $231 = ($226>>>0)<($230>>>0); //@line 3191 "stream_encoder.c"
    if (!($231)) {
     break L37;
    }
    $232 = $3; //@line 3194 "stream_encoder.c"
    $233 = $7; //@line 3195 "stream_encoder.c"
    $234 = $8; //@line 3196 "stream_encoder.c"
    $235 = $3; //@line 3198 "stream_encoder.c"
    $236 = ((($235)) + 4|0); //@line 3198 "stream_encoder.c"
    $237 = HEAP32[$236>>2]|0; //@line 3198 "stream_encoder.c"
    $238 = ((($237)) + 216|0); //@line 3198 "stream_encoder.c"
    $239 = $6; //@line 3198 "stream_encoder.c"
    $240 = (($238) + ($239<<2)|0); //@line 3198 "stream_encoder.c"
    $241 = HEAP32[$240>>2]|0; //@line 3198 "stream_encoder.c"
    $242 = $3; //@line 3199 "stream_encoder.c"
    $243 = ((($242)) + 4|0); //@line 3199 "stream_encoder.c"
    $244 = HEAP32[$243>>2]|0; //@line 3199 "stream_encoder.c"
    $245 = ((($244)) + 4|0); //@line 3199 "stream_encoder.c"
    $246 = $6; //@line 3199 "stream_encoder.c"
    $247 = (($245) + ($246<<2)|0); //@line 3199 "stream_encoder.c"
    $248 = HEAP32[$247>>2]|0; //@line 3199 "stream_encoder.c"
    $249 = $3; //@line 3200 "stream_encoder.c"
    $250 = ((($249)) + 4|0); //@line 3200 "stream_encoder.c"
    $251 = HEAP32[$250>>2]|0; //@line 3200 "stream_encoder.c"
    $252 = ((($251)) + 6176|0); //@line 3200 "stream_encoder.c"
    $253 = $6; //@line 3200 "stream_encoder.c"
    $254 = (($252) + ($253<<3)|0); //@line 3200 "stream_encoder.c"
    $255 = $3; //@line 3201 "stream_encoder.c"
    $256 = ((($255)) + 4|0); //@line 3201 "stream_encoder.c"
    $257 = HEAP32[$256>>2]|0; //@line 3201 "stream_encoder.c"
    $258 = ((($257)) + 6640|0); //@line 3201 "stream_encoder.c"
    $259 = $6; //@line 3201 "stream_encoder.c"
    $260 = (($258) + ($259<<3)|0); //@line 3201 "stream_encoder.c"
    $261 = $3; //@line 3202 "stream_encoder.c"
    $262 = ((($261)) + 4|0); //@line 3202 "stream_encoder.c"
    $263 = HEAP32[$262>>2]|0; //@line 3202 "stream_encoder.c"
    $264 = ((($263)) + 256|0); //@line 3202 "stream_encoder.c"
    $265 = $6; //@line 3202 "stream_encoder.c"
    $266 = (($264) + ($265<<3)|0); //@line 3202 "stream_encoder.c"
    $267 = $3; //@line 3203 "stream_encoder.c"
    $268 = ((($267)) + 4|0); //@line 3203 "stream_encoder.c"
    $269 = HEAP32[$268>>2]|0; //@line 3203 "stream_encoder.c"
    $270 = ((($269)) + 6768|0); //@line 3203 "stream_encoder.c"
    $271 = $6; //@line 3203 "stream_encoder.c"
    $272 = (($270) + ($271<<2)|0); //@line 3203 "stream_encoder.c"
    $273 = $3; //@line 3204 "stream_encoder.c"
    $274 = ((($273)) + 4|0); //@line 3204 "stream_encoder.c"
    $275 = HEAP32[$274>>2]|0; //@line 3204 "stream_encoder.c"
    $276 = ((($275)) + 6808|0); //@line 3204 "stream_encoder.c"
    $277 = $6; //@line 3204 "stream_encoder.c"
    $278 = (($276) + ($277<<2)|0); //@line 3204 "stream_encoder.c"
    $279 = (_process_subframe_($232,$233,$234,$5,$241,$248,$254,$260,$266,$272,$278)|0); //@line 3193 "stream_encoder.c"
    $280 = ($279|0)!=(0); //@line 3193 "stream_encoder.c"
    if (!($280)) {
     break;
    }
    $281 = $6; //@line 3191 "stream_encoder.c"
    $282 = (($281) + 1)|0; //@line 3191 "stream_encoder.c"
    $6 = $282; //@line 3191 "stream_encoder.c"
   }
   $2 = 0; //@line 3207 "stream_encoder.c"
   $675 = $2; //@line 3355 "stream_encoder.c"
   STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
  }
 } while(0);
 $283 = $10; //@line 3214 "stream_encoder.c"
 $284 = ($283|0)!=(0); //@line 3214 "stream_encoder.c"
 L46: do {
  if ($284) {
   $6 = 0; //@line 3217 "stream_encoder.c"
   while(1) {
    $285 = $6; //@line 3217 "stream_encoder.c"
    $286 = ($285>>>0)<(2); //@line 3217 "stream_encoder.c"
    if (!($286)) {
     break L46;
    }
    $287 = $3; //@line 3220 "stream_encoder.c"
    $288 = $7; //@line 3221 "stream_encoder.c"
    $289 = $8; //@line 3222 "stream_encoder.c"
    $290 = $3; //@line 3224 "stream_encoder.c"
    $291 = ((($290)) + 4|0); //@line 3224 "stream_encoder.c"
    $292 = HEAP32[$291>>2]|0; //@line 3224 "stream_encoder.c"
    $293 = ((($292)) + 248|0); //@line 3224 "stream_encoder.c"
    $294 = $6; //@line 3224 "stream_encoder.c"
    $295 = (($293) + ($294<<2)|0); //@line 3224 "stream_encoder.c"
    $296 = HEAP32[$295>>2]|0; //@line 3224 "stream_encoder.c"
    $297 = $3; //@line 3225 "stream_encoder.c"
    $298 = ((($297)) + 4|0); //@line 3225 "stream_encoder.c"
    $299 = HEAP32[$298>>2]|0; //@line 3225 "stream_encoder.c"
    $300 = ((($299)) + 36|0); //@line 3225 "stream_encoder.c"
    $301 = $6; //@line 3225 "stream_encoder.c"
    $302 = (($300) + ($301<<2)|0); //@line 3225 "stream_encoder.c"
    $303 = HEAP32[$302>>2]|0; //@line 3225 "stream_encoder.c"
    $304 = $3; //@line 3226 "stream_encoder.c"
    $305 = ((($304)) + 4|0); //@line 3226 "stream_encoder.c"
    $306 = HEAP32[$305>>2]|0; //@line 3226 "stream_encoder.c"
    $307 = ((($306)) + 6240|0); //@line 3226 "stream_encoder.c"
    $308 = $6; //@line 3226 "stream_encoder.c"
    $309 = (($307) + ($308<<3)|0); //@line 3226 "stream_encoder.c"
    $310 = $3; //@line 3227 "stream_encoder.c"
    $311 = ((($310)) + 4|0); //@line 3227 "stream_encoder.c"
    $312 = HEAP32[$311>>2]|0; //@line 3227 "stream_encoder.c"
    $313 = ((($312)) + 6704|0); //@line 3227 "stream_encoder.c"
    $314 = $6; //@line 3227 "stream_encoder.c"
    $315 = (($313) + ($314<<3)|0); //@line 3227 "stream_encoder.c"
    $316 = $3; //@line 3228 "stream_encoder.c"
    $317 = ((($316)) + 4|0); //@line 3228 "stream_encoder.c"
    $318 = HEAP32[$317>>2]|0; //@line 3228 "stream_encoder.c"
    $319 = ((($318)) + 320|0); //@line 3228 "stream_encoder.c"
    $320 = $6; //@line 3228 "stream_encoder.c"
    $321 = (($319) + ($320<<3)|0); //@line 3228 "stream_encoder.c"
    $322 = $3; //@line 3229 "stream_encoder.c"
    $323 = ((($322)) + 4|0); //@line 3229 "stream_encoder.c"
    $324 = HEAP32[$323>>2]|0; //@line 3229 "stream_encoder.c"
    $325 = ((($324)) + 6800|0); //@line 3229 "stream_encoder.c"
    $326 = $6; //@line 3229 "stream_encoder.c"
    $327 = (($325) + ($326<<2)|0); //@line 3229 "stream_encoder.c"
    $328 = $3; //@line 3230 "stream_encoder.c"
    $329 = ((($328)) + 4|0); //@line 3230 "stream_encoder.c"
    $330 = HEAP32[$329>>2]|0; //@line 3230 "stream_encoder.c"
    $331 = ((($330)) + 6840|0); //@line 3230 "stream_encoder.c"
    $332 = $6; //@line 3230 "stream_encoder.c"
    $333 = (($331) + ($332<<2)|0); //@line 3230 "stream_encoder.c"
    $334 = (_process_subframe_($287,$288,$289,$5,$296,$303,$309,$315,$321,$327,$333)|0); //@line 3219 "stream_encoder.c"
    $335 = ($334|0)!=(0); //@line 3219 "stream_encoder.c"
    if (!($335)) {
     break;
    }
    $336 = $6; //@line 3217 "stream_encoder.c"
    $337 = (($336) + 1)|0; //@line 3217 "stream_encoder.c"
    $6 = $337; //@line 3217 "stream_encoder.c"
   }
   $2 = 0; //@line 3233 "stream_encoder.c"
   $675 = $2; //@line 3355 "stream_encoder.c"
   STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
  }
 } while(0);
 $338 = $10; //@line 3240 "stream_encoder.c"
 $339 = ($338|0)!=(0); //@line 3240 "stream_encoder.c"
 L55: do {
  if ($339) {
   $13 = 0; //@line 3241 "stream_encoder.c"
   $14 = 0; //@line 3241 "stream_encoder.c"
   $15 = 0; //@line 3242 "stream_encoder.c"
   $16 = 0; //@line 3242 "stream_encoder.c"
   $340 = $3; //@line 3247 "stream_encoder.c"
   $341 = HEAP32[$340>>2]|0; //@line 3247 "stream_encoder.c"
   $342 = ((($341)) + 20|0); //@line 3247 "stream_encoder.c"
   $343 = HEAP32[$342>>2]|0; //@line 3247 "stream_encoder.c"
   $344 = ($343|0)!=(0); //@line 3247 "stream_encoder.c"
   if ($344) {
    $345 = $3; //@line 3247 "stream_encoder.c"
    $346 = ((($345)) + 4|0); //@line 3247 "stream_encoder.c"
    $347 = HEAP32[$346>>2]|0; //@line 3247 "stream_encoder.c"
    $348 = ((($347)) + 6864|0); //@line 3247 "stream_encoder.c"
    $349 = HEAP32[$348>>2]|0; //@line 3247 "stream_encoder.c"
    $350 = ($349>>>0)>(0); //@line 3247 "stream_encoder.c"
    if ($350) {
     $351 = $3; //@line 3248 "stream_encoder.c"
     $352 = ((($351)) + 4|0); //@line 3248 "stream_encoder.c"
     $353 = HEAP32[$352>>2]|0; //@line 3248 "stream_encoder.c"
     $354 = ((($353)) + 6868|0); //@line 3248 "stream_encoder.c"
     $355 = HEAP32[$354>>2]|0; //@line 3248 "stream_encoder.c"
     $356 = ($355|0)==(0); //@line 3248 "stream_encoder.c"
     $357 = $356 ? 0 : 3; //@line 3248 "stream_encoder.c"
     $17 = $357; //@line 3248 "stream_encoder.c"
    } else {
     label = 42;
    }
   } else {
    label = 42;
   }
   L60: do {
    if ((label|0) == 42) {
     $358 = $3; //@line 3262 "stream_encoder.c"
     $359 = ((($358)) + 4|0); //@line 3262 "stream_encoder.c"
     $360 = HEAP32[$359>>2]|0; //@line 3262 "stream_encoder.c"
     $361 = ((($360)) + 6808|0); //@line 3262 "stream_encoder.c"
     $362 = HEAP32[$361>>2]|0; //@line 3262 "stream_encoder.c"
     $363 = $3; //@line 3262 "stream_encoder.c"
     $364 = ((($363)) + 4|0); //@line 3262 "stream_encoder.c"
     $365 = HEAP32[$364>>2]|0; //@line 3262 "stream_encoder.c"
     $366 = ((($365)) + 6808|0); //@line 3262 "stream_encoder.c"
     $367 = ((($366)) + 4|0); //@line 3262 "stream_encoder.c"
     $368 = HEAP32[$367>>2]|0; //@line 3262 "stream_encoder.c"
     $369 = (($362) + ($368))|0; //@line 3262 "stream_encoder.c"
     HEAP32[$18>>2] = $369; //@line 3262 "stream_encoder.c"
     $370 = $3; //@line 3263 "stream_encoder.c"
     $371 = ((($370)) + 4|0); //@line 3263 "stream_encoder.c"
     $372 = HEAP32[$371>>2]|0; //@line 3263 "stream_encoder.c"
     $373 = ((($372)) + 6808|0); //@line 3263 "stream_encoder.c"
     $374 = HEAP32[$373>>2]|0; //@line 3263 "stream_encoder.c"
     $375 = $3; //@line 3263 "stream_encoder.c"
     $376 = ((($375)) + 4|0); //@line 3263 "stream_encoder.c"
     $377 = HEAP32[$376>>2]|0; //@line 3263 "stream_encoder.c"
     $378 = ((($377)) + 6840|0); //@line 3263 "stream_encoder.c"
     $379 = ((($378)) + 4|0); //@line 3263 "stream_encoder.c"
     $380 = HEAP32[$379>>2]|0; //@line 3263 "stream_encoder.c"
     $381 = (($374) + ($380))|0; //@line 3263 "stream_encoder.c"
     $382 = ((($18)) + 4|0); //@line 3263 "stream_encoder.c"
     HEAP32[$382>>2] = $381; //@line 3263 "stream_encoder.c"
     $383 = $3; //@line 3264 "stream_encoder.c"
     $384 = ((($383)) + 4|0); //@line 3264 "stream_encoder.c"
     $385 = HEAP32[$384>>2]|0; //@line 3264 "stream_encoder.c"
     $386 = ((($385)) + 6808|0); //@line 3264 "stream_encoder.c"
     $387 = ((($386)) + 4|0); //@line 3264 "stream_encoder.c"
     $388 = HEAP32[$387>>2]|0; //@line 3264 "stream_encoder.c"
     $389 = $3; //@line 3264 "stream_encoder.c"
     $390 = ((($389)) + 4|0); //@line 3264 "stream_encoder.c"
     $391 = HEAP32[$390>>2]|0; //@line 3264 "stream_encoder.c"
     $392 = ((($391)) + 6840|0); //@line 3264 "stream_encoder.c"
     $393 = ((($392)) + 4|0); //@line 3264 "stream_encoder.c"
     $394 = HEAP32[$393>>2]|0; //@line 3264 "stream_encoder.c"
     $395 = (($388) + ($394))|0; //@line 3264 "stream_encoder.c"
     $396 = ((($18)) + 8|0); //@line 3264 "stream_encoder.c"
     HEAP32[$396>>2] = $395; //@line 3264 "stream_encoder.c"
     $397 = $3; //@line 3265 "stream_encoder.c"
     $398 = ((($397)) + 4|0); //@line 3265 "stream_encoder.c"
     $399 = HEAP32[$398>>2]|0; //@line 3265 "stream_encoder.c"
     $400 = ((($399)) + 6840|0); //@line 3265 "stream_encoder.c"
     $401 = HEAP32[$400>>2]|0; //@line 3265 "stream_encoder.c"
     $402 = $3; //@line 3265 "stream_encoder.c"
     $403 = ((($402)) + 4|0); //@line 3265 "stream_encoder.c"
     $404 = HEAP32[$403>>2]|0; //@line 3265 "stream_encoder.c"
     $405 = ((($404)) + 6840|0); //@line 3265 "stream_encoder.c"
     $406 = ((($405)) + 4|0); //@line 3265 "stream_encoder.c"
     $407 = HEAP32[$406>>2]|0; //@line 3265 "stream_encoder.c"
     $408 = (($401) + ($407))|0; //@line 3265 "stream_encoder.c"
     $409 = ((($18)) + 12|0); //@line 3265 "stream_encoder.c"
     HEAP32[$409>>2] = $408; //@line 3265 "stream_encoder.c"
     $17 = 0; //@line 3267 "stream_encoder.c"
     $410 = $17; //@line 3268 "stream_encoder.c"
     $411 = (($18) + ($410<<2)|0); //@line 3268 "stream_encoder.c"
     $412 = HEAP32[$411>>2]|0; //@line 3268 "stream_encoder.c"
     $19 = $412; //@line 3268 "stream_encoder.c"
     $20 = 1; //@line 3269 "stream_encoder.c"
     while(1) {
      $413 = $20; //@line 3269 "stream_encoder.c"
      $414 = ($413|0)<=(3); //@line 3269 "stream_encoder.c"
      if (!($414)) {
       break L60;
      }
      $415 = $20; //@line 3270 "stream_encoder.c"
      $416 = (($18) + ($415<<2)|0); //@line 3270 "stream_encoder.c"
      $417 = HEAP32[$416>>2]|0; //@line 3270 "stream_encoder.c"
      $418 = $19; //@line 3270 "stream_encoder.c"
      $419 = ($417>>>0)<($418>>>0); //@line 3270 "stream_encoder.c"
      if ($419) {
       $420 = $20; //@line 3271 "stream_encoder.c"
       $421 = (($18) + ($420<<2)|0); //@line 3271 "stream_encoder.c"
       $422 = HEAP32[$421>>2]|0; //@line 3271 "stream_encoder.c"
       $19 = $422; //@line 3271 "stream_encoder.c"
       $423 = $20; //@line 3272 "stream_encoder.c"
       $17 = $423; //@line 3272 "stream_encoder.c"
      }
      $424 = $20; //@line 3269 "stream_encoder.c"
      $425 = (($424) + 1)|0; //@line 3269 "stream_encoder.c"
      $20 = $425; //@line 3269 "stream_encoder.c"
     }
    }
   } while(0);
   $426 = $17; //@line 3277 "stream_encoder.c"
   $427 = ((($5)) + 12|0); //@line 3277 "stream_encoder.c"
   HEAP32[$427>>2] = $426; //@line 3277 "stream_encoder.c"
   $428 = $3; //@line 3279 "stream_encoder.c"
   $429 = ((($428)) + 4|0); //@line 3279 "stream_encoder.c"
   $430 = HEAP32[$429>>2]|0; //@line 3279 "stream_encoder.c"
   $431 = ((($430)) + 6856|0); //@line 3279 "stream_encoder.c"
   $432 = HEAP32[$431>>2]|0; //@line 3279 "stream_encoder.c"
   $433 = (_FLAC__frame_add_header($5,$432)|0); //@line 3279 "stream_encoder.c"
   $434 = ($433|0)!=(0); //@line 3279 "stream_encoder.c"
   if (!($434)) {
    $435 = $3; //@line 3280 "stream_encoder.c"
    $436 = HEAP32[$435>>2]|0; //@line 3280 "stream_encoder.c"
    HEAP32[$436>>2] = 7; //@line 3280 "stream_encoder.c"
    $2 = 0; //@line 3281 "stream_encoder.c"
    $675 = $2; //@line 3355 "stream_encoder.c"
    STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
   }
   $437 = $17; //@line 3284 "stream_encoder.c"
   switch ($437|0) {
   case 0:  {
    $438 = $3; //@line 3286 "stream_encoder.c"
    $439 = ((($438)) + 4|0); //@line 3286 "stream_encoder.c"
    $440 = HEAP32[$439>>2]|0; //@line 3286 "stream_encoder.c"
    $441 = ((($440)) + 336|0); //@line 3286 "stream_encoder.c"
    $442 = $3; //@line 3286 "stream_encoder.c"
    $443 = ((($442)) + 4|0); //@line 3286 "stream_encoder.c"
    $444 = HEAP32[$443>>2]|0; //@line 3286 "stream_encoder.c"
    $445 = ((($444)) + 6768|0); //@line 3286 "stream_encoder.c"
    $446 = HEAP32[$445>>2]|0; //@line 3286 "stream_encoder.c"
    $447 = (($441) + (($446*292)|0)|0); //@line 3286 "stream_encoder.c"
    $15 = $447; //@line 3286 "stream_encoder.c"
    $448 = $3; //@line 3287 "stream_encoder.c"
    $449 = ((($448)) + 4|0); //@line 3287 "stream_encoder.c"
    $450 = HEAP32[$449>>2]|0; //@line 3287 "stream_encoder.c"
    $451 = ((($450)) + 336|0); //@line 3287 "stream_encoder.c"
    $452 = ((($451)) + 584|0); //@line 3287 "stream_encoder.c"
    $453 = $3; //@line 3287 "stream_encoder.c"
    $454 = ((($453)) + 4|0); //@line 3287 "stream_encoder.c"
    $455 = HEAP32[$454>>2]|0; //@line 3287 "stream_encoder.c"
    $456 = ((($455)) + 6768|0); //@line 3287 "stream_encoder.c"
    $457 = ((($456)) + 4|0); //@line 3287 "stream_encoder.c"
    $458 = HEAP32[$457>>2]|0; //@line 3287 "stream_encoder.c"
    $459 = (($452) + (($458*292)|0)|0); //@line 3287 "stream_encoder.c"
    $16 = $459; //@line 3287 "stream_encoder.c"
    break;
   }
   case 1:  {
    $460 = $3; //@line 3290 "stream_encoder.c"
    $461 = ((($460)) + 4|0); //@line 3290 "stream_encoder.c"
    $462 = HEAP32[$461>>2]|0; //@line 3290 "stream_encoder.c"
    $463 = ((($462)) + 336|0); //@line 3290 "stream_encoder.c"
    $464 = $3; //@line 3290 "stream_encoder.c"
    $465 = ((($464)) + 4|0); //@line 3290 "stream_encoder.c"
    $466 = HEAP32[$465>>2]|0; //@line 3290 "stream_encoder.c"
    $467 = ((($466)) + 6768|0); //@line 3290 "stream_encoder.c"
    $468 = HEAP32[$467>>2]|0; //@line 3290 "stream_encoder.c"
    $469 = (($463) + (($468*292)|0)|0); //@line 3290 "stream_encoder.c"
    $15 = $469; //@line 3290 "stream_encoder.c"
    $470 = $3; //@line 3291 "stream_encoder.c"
    $471 = ((($470)) + 4|0); //@line 3291 "stream_encoder.c"
    $472 = HEAP32[$471>>2]|0; //@line 3291 "stream_encoder.c"
    $473 = ((($472)) + 5008|0); //@line 3291 "stream_encoder.c"
    $474 = ((($473)) + 584|0); //@line 3291 "stream_encoder.c"
    $475 = $3; //@line 3291 "stream_encoder.c"
    $476 = ((($475)) + 4|0); //@line 3291 "stream_encoder.c"
    $477 = HEAP32[$476>>2]|0; //@line 3291 "stream_encoder.c"
    $478 = ((($477)) + 6800|0); //@line 3291 "stream_encoder.c"
    $479 = ((($478)) + 4|0); //@line 3291 "stream_encoder.c"
    $480 = HEAP32[$479>>2]|0; //@line 3291 "stream_encoder.c"
    $481 = (($474) + (($480*292)|0)|0); //@line 3291 "stream_encoder.c"
    $16 = $481; //@line 3291 "stream_encoder.c"
    break;
   }
   case 2:  {
    $482 = $3; //@line 3294 "stream_encoder.c"
    $483 = ((($482)) + 4|0); //@line 3294 "stream_encoder.c"
    $484 = HEAP32[$483>>2]|0; //@line 3294 "stream_encoder.c"
    $485 = ((($484)) + 5008|0); //@line 3294 "stream_encoder.c"
    $486 = ((($485)) + 584|0); //@line 3294 "stream_encoder.c"
    $487 = $3; //@line 3294 "stream_encoder.c"
    $488 = ((($487)) + 4|0); //@line 3294 "stream_encoder.c"
    $489 = HEAP32[$488>>2]|0; //@line 3294 "stream_encoder.c"
    $490 = ((($489)) + 6800|0); //@line 3294 "stream_encoder.c"
    $491 = ((($490)) + 4|0); //@line 3294 "stream_encoder.c"
    $492 = HEAP32[$491>>2]|0; //@line 3294 "stream_encoder.c"
    $493 = (($486) + (($492*292)|0)|0); //@line 3294 "stream_encoder.c"
    $15 = $493; //@line 3294 "stream_encoder.c"
    $494 = $3; //@line 3295 "stream_encoder.c"
    $495 = ((($494)) + 4|0); //@line 3295 "stream_encoder.c"
    $496 = HEAP32[$495>>2]|0; //@line 3295 "stream_encoder.c"
    $497 = ((($496)) + 336|0); //@line 3295 "stream_encoder.c"
    $498 = ((($497)) + 584|0); //@line 3295 "stream_encoder.c"
    $499 = $3; //@line 3295 "stream_encoder.c"
    $500 = ((($499)) + 4|0); //@line 3295 "stream_encoder.c"
    $501 = HEAP32[$500>>2]|0; //@line 3295 "stream_encoder.c"
    $502 = ((($501)) + 6768|0); //@line 3295 "stream_encoder.c"
    $503 = ((($502)) + 4|0); //@line 3295 "stream_encoder.c"
    $504 = HEAP32[$503>>2]|0; //@line 3295 "stream_encoder.c"
    $505 = (($498) + (($504*292)|0)|0); //@line 3295 "stream_encoder.c"
    $16 = $505; //@line 3295 "stream_encoder.c"
    break;
   }
   case 3:  {
    $506 = $3; //@line 3298 "stream_encoder.c"
    $507 = ((($506)) + 4|0); //@line 3298 "stream_encoder.c"
    $508 = HEAP32[$507>>2]|0; //@line 3298 "stream_encoder.c"
    $509 = ((($508)) + 5008|0); //@line 3298 "stream_encoder.c"
    $510 = $3; //@line 3298 "stream_encoder.c"
    $511 = ((($510)) + 4|0); //@line 3298 "stream_encoder.c"
    $512 = HEAP32[$511>>2]|0; //@line 3298 "stream_encoder.c"
    $513 = ((($512)) + 6800|0); //@line 3298 "stream_encoder.c"
    $514 = HEAP32[$513>>2]|0; //@line 3298 "stream_encoder.c"
    $515 = (($509) + (($514*292)|0)|0); //@line 3298 "stream_encoder.c"
    $15 = $515; //@line 3298 "stream_encoder.c"
    $516 = $3; //@line 3299 "stream_encoder.c"
    $517 = ((($516)) + 4|0); //@line 3299 "stream_encoder.c"
    $518 = HEAP32[$517>>2]|0; //@line 3299 "stream_encoder.c"
    $519 = ((($518)) + 5008|0); //@line 3299 "stream_encoder.c"
    $520 = ((($519)) + 584|0); //@line 3299 "stream_encoder.c"
    $521 = $3; //@line 3299 "stream_encoder.c"
    $522 = ((($521)) + 4|0); //@line 3299 "stream_encoder.c"
    $523 = HEAP32[$522>>2]|0; //@line 3299 "stream_encoder.c"
    $524 = ((($523)) + 6800|0); //@line 3299 "stream_encoder.c"
    $525 = ((($524)) + 4|0); //@line 3299 "stream_encoder.c"
    $526 = HEAP32[$525>>2]|0; //@line 3299 "stream_encoder.c"
    $527 = (($520) + (($526*292)|0)|0); //@line 3299 "stream_encoder.c"
    $16 = $527; //@line 3299 "stream_encoder.c"
    break;
   }
   default: {
   }
   }
   $528 = $17; //@line 3305 "stream_encoder.c"
   switch ($528|0) {
   case 0:  {
    $529 = $3; //@line 3307 "stream_encoder.c"
    $530 = ((($529)) + 4|0); //@line 3307 "stream_encoder.c"
    $531 = HEAP32[$530>>2]|0; //@line 3307 "stream_encoder.c"
    $532 = ((($531)) + 216|0); //@line 3307 "stream_encoder.c"
    $533 = HEAP32[$532>>2]|0; //@line 3307 "stream_encoder.c"
    $13 = $533; //@line 3307 "stream_encoder.c"
    $534 = $3; //@line 3308 "stream_encoder.c"
    $535 = ((($534)) + 4|0); //@line 3308 "stream_encoder.c"
    $536 = HEAP32[$535>>2]|0; //@line 3308 "stream_encoder.c"
    $537 = ((($536)) + 216|0); //@line 3308 "stream_encoder.c"
    $538 = ((($537)) + 4|0); //@line 3308 "stream_encoder.c"
    $539 = HEAP32[$538>>2]|0; //@line 3308 "stream_encoder.c"
    $14 = $539; //@line 3308 "stream_encoder.c"
    break;
   }
   case 1:  {
    $540 = $3; //@line 3311 "stream_encoder.c"
    $541 = ((($540)) + 4|0); //@line 3311 "stream_encoder.c"
    $542 = HEAP32[$541>>2]|0; //@line 3311 "stream_encoder.c"
    $543 = ((($542)) + 216|0); //@line 3311 "stream_encoder.c"
    $544 = HEAP32[$543>>2]|0; //@line 3311 "stream_encoder.c"
    $13 = $544; //@line 3311 "stream_encoder.c"
    $545 = $3; //@line 3312 "stream_encoder.c"
    $546 = ((($545)) + 4|0); //@line 3312 "stream_encoder.c"
    $547 = HEAP32[$546>>2]|0; //@line 3312 "stream_encoder.c"
    $548 = ((($547)) + 248|0); //@line 3312 "stream_encoder.c"
    $549 = ((($548)) + 4|0); //@line 3312 "stream_encoder.c"
    $550 = HEAP32[$549>>2]|0; //@line 3312 "stream_encoder.c"
    $14 = $550; //@line 3312 "stream_encoder.c"
    break;
   }
   case 2:  {
    $551 = $3; //@line 3315 "stream_encoder.c"
    $552 = ((($551)) + 4|0); //@line 3315 "stream_encoder.c"
    $553 = HEAP32[$552>>2]|0; //@line 3315 "stream_encoder.c"
    $554 = ((($553)) + 248|0); //@line 3315 "stream_encoder.c"
    $555 = ((($554)) + 4|0); //@line 3315 "stream_encoder.c"
    $556 = HEAP32[$555>>2]|0; //@line 3315 "stream_encoder.c"
    $13 = $556; //@line 3315 "stream_encoder.c"
    $557 = $3; //@line 3316 "stream_encoder.c"
    $558 = ((($557)) + 4|0); //@line 3316 "stream_encoder.c"
    $559 = HEAP32[$558>>2]|0; //@line 3316 "stream_encoder.c"
    $560 = ((($559)) + 216|0); //@line 3316 "stream_encoder.c"
    $561 = ((($560)) + 4|0); //@line 3316 "stream_encoder.c"
    $562 = HEAP32[$561>>2]|0; //@line 3316 "stream_encoder.c"
    $14 = $562; //@line 3316 "stream_encoder.c"
    break;
   }
   case 3:  {
    $563 = $3; //@line 3319 "stream_encoder.c"
    $564 = ((($563)) + 4|0); //@line 3319 "stream_encoder.c"
    $565 = HEAP32[$564>>2]|0; //@line 3319 "stream_encoder.c"
    $566 = ((($565)) + 248|0); //@line 3319 "stream_encoder.c"
    $567 = HEAP32[$566>>2]|0; //@line 3319 "stream_encoder.c"
    $13 = $567; //@line 3319 "stream_encoder.c"
    $568 = $3; //@line 3320 "stream_encoder.c"
    $569 = ((($568)) + 4|0); //@line 3320 "stream_encoder.c"
    $570 = HEAP32[$569>>2]|0; //@line 3320 "stream_encoder.c"
    $571 = ((($570)) + 248|0); //@line 3320 "stream_encoder.c"
    $572 = ((($571)) + 4|0); //@line 3320 "stream_encoder.c"
    $573 = HEAP32[$572>>2]|0; //@line 3320 "stream_encoder.c"
    $14 = $573; //@line 3320 "stream_encoder.c"
    break;
   }
   default: {
   }
   }
   $574 = $3; //@line 3327 "stream_encoder.c"
   $575 = HEAP32[$5>>2]|0; //@line 3327 "stream_encoder.c"
   $576 = $13; //@line 3327 "stream_encoder.c"
   $577 = $15; //@line 3327 "stream_encoder.c"
   $578 = $3; //@line 3327 "stream_encoder.c"
   $579 = ((($578)) + 4|0); //@line 3327 "stream_encoder.c"
   $580 = HEAP32[$579>>2]|0; //@line 3327 "stream_encoder.c"
   $581 = ((($580)) + 6856|0); //@line 3327 "stream_encoder.c"
   $582 = HEAP32[$581>>2]|0; //@line 3327 "stream_encoder.c"
   $583 = (_add_subframe_($574,$575,$576,$577,$582)|0); //@line 3327 "stream_encoder.c"
   $584 = ($583|0)!=(0); //@line 3327 "stream_encoder.c"
   if (!($584)) {
    $2 = 0; //@line 3328 "stream_encoder.c"
    $675 = $2; //@line 3355 "stream_encoder.c"
    STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
   }
   $585 = $3; //@line 3329 "stream_encoder.c"
   $586 = HEAP32[$5>>2]|0; //@line 3329 "stream_encoder.c"
   $587 = $14; //@line 3329 "stream_encoder.c"
   $588 = $16; //@line 3329 "stream_encoder.c"
   $589 = $3; //@line 3329 "stream_encoder.c"
   $590 = ((($589)) + 4|0); //@line 3329 "stream_encoder.c"
   $591 = HEAP32[$590>>2]|0; //@line 3329 "stream_encoder.c"
   $592 = ((($591)) + 6856|0); //@line 3329 "stream_encoder.c"
   $593 = HEAP32[$592>>2]|0; //@line 3329 "stream_encoder.c"
   $594 = (_add_subframe_($585,$586,$587,$588,$593)|0); //@line 3329 "stream_encoder.c"
   $595 = ($594|0)!=(0); //@line 3329 "stream_encoder.c"
   if (!($595)) {
    $2 = 0; //@line 3330 "stream_encoder.c"
    $675 = $2; //@line 3355 "stream_encoder.c"
    STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
   }
  } else {
   $596 = $3; //@line 3333 "stream_encoder.c"
   $597 = ((($596)) + 4|0); //@line 3333 "stream_encoder.c"
   $598 = HEAP32[$597>>2]|0; //@line 3333 "stream_encoder.c"
   $599 = ((($598)) + 6856|0); //@line 3333 "stream_encoder.c"
   $600 = HEAP32[$599>>2]|0; //@line 3333 "stream_encoder.c"
   $601 = (_FLAC__frame_add_header($5,$600)|0); //@line 3333 "stream_encoder.c"
   $602 = ($601|0)!=(0); //@line 3333 "stream_encoder.c"
   if (!($602)) {
    $603 = $3; //@line 3334 "stream_encoder.c"
    $604 = HEAP32[$603>>2]|0; //@line 3334 "stream_encoder.c"
    HEAP32[$604>>2] = 7; //@line 3334 "stream_encoder.c"
    $2 = 0; //@line 3335 "stream_encoder.c"
    $675 = $2; //@line 3355 "stream_encoder.c"
    STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
   }
   $6 = 0; //@line 3338 "stream_encoder.c"
   while(1) {
    $605 = $6; //@line 3338 "stream_encoder.c"
    $606 = $3; //@line 3338 "stream_encoder.c"
    $607 = HEAP32[$606>>2]|0; //@line 3338 "stream_encoder.c"
    $608 = ((($607)) + 24|0); //@line 3338 "stream_encoder.c"
    $609 = HEAP32[$608>>2]|0; //@line 3338 "stream_encoder.c"
    $610 = ($605>>>0)<($609>>>0); //@line 3338 "stream_encoder.c"
    if (!($610)) {
     break L55;
    }
    $611 = $3; //@line 3339 "stream_encoder.c"
    $612 = HEAP32[$5>>2]|0; //@line 3339 "stream_encoder.c"
    $613 = $3; //@line 3339 "stream_encoder.c"
    $614 = ((($613)) + 4|0); //@line 3339 "stream_encoder.c"
    $615 = HEAP32[$614>>2]|0; //@line 3339 "stream_encoder.c"
    $616 = ((($615)) + 216|0); //@line 3339 "stream_encoder.c"
    $617 = $6; //@line 3339 "stream_encoder.c"
    $618 = (($616) + ($617<<2)|0); //@line 3339 "stream_encoder.c"
    $619 = HEAP32[$618>>2]|0; //@line 3339 "stream_encoder.c"
    $620 = $3; //@line 3339 "stream_encoder.c"
    $621 = ((($620)) + 4|0); //@line 3339 "stream_encoder.c"
    $622 = HEAP32[$621>>2]|0; //@line 3339 "stream_encoder.c"
    $623 = ((($622)) + 336|0); //@line 3339 "stream_encoder.c"
    $624 = $6; //@line 3339 "stream_encoder.c"
    $625 = (($623) + (($624*584)|0)|0); //@line 3339 "stream_encoder.c"
    $626 = $3; //@line 3339 "stream_encoder.c"
    $627 = ((($626)) + 4|0); //@line 3339 "stream_encoder.c"
    $628 = HEAP32[$627>>2]|0; //@line 3339 "stream_encoder.c"
    $629 = ((($628)) + 6768|0); //@line 3339 "stream_encoder.c"
    $630 = $6; //@line 3339 "stream_encoder.c"
    $631 = (($629) + ($630<<2)|0); //@line 3339 "stream_encoder.c"
    $632 = HEAP32[$631>>2]|0; //@line 3339 "stream_encoder.c"
    $633 = (($625) + (($632*292)|0)|0); //@line 3339 "stream_encoder.c"
    $634 = $3; //@line 3339 "stream_encoder.c"
    $635 = ((($634)) + 4|0); //@line 3339 "stream_encoder.c"
    $636 = HEAP32[$635>>2]|0; //@line 3339 "stream_encoder.c"
    $637 = ((($636)) + 6856|0); //@line 3339 "stream_encoder.c"
    $638 = HEAP32[$637>>2]|0; //@line 3339 "stream_encoder.c"
    $639 = (_add_subframe_($611,$612,$619,$633,$638)|0); //@line 3339 "stream_encoder.c"
    $640 = ($639|0)!=(0); //@line 3339 "stream_encoder.c"
    if (!($640)) {
     break;
    }
    $641 = $6; //@line 3338 "stream_encoder.c"
    $642 = (($641) + 1)|0; //@line 3338 "stream_encoder.c"
    $6 = $642; //@line 3338 "stream_encoder.c"
   }
   $2 = 0; //@line 3341 "stream_encoder.c"
   $675 = $2; //@line 3355 "stream_encoder.c"
   STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
  }
 } while(0);
 $643 = $3; //@line 3346 "stream_encoder.c"
 $644 = HEAP32[$643>>2]|0; //@line 3346 "stream_encoder.c"
 $645 = ((($644)) + 20|0); //@line 3346 "stream_encoder.c"
 $646 = HEAP32[$645>>2]|0; //@line 3346 "stream_encoder.c"
 $647 = ($646|0)!=(0); //@line 3346 "stream_encoder.c"
 if ($647) {
  $648 = $3; //@line 3347 "stream_encoder.c"
  $649 = ((($648)) + 4|0); //@line 3347 "stream_encoder.c"
  $650 = HEAP32[$649>>2]|0; //@line 3347 "stream_encoder.c"
  $651 = ((($650)) + 6864|0); //@line 3347 "stream_encoder.c"
  $652 = HEAP32[$651>>2]|0; //@line 3347 "stream_encoder.c"
  $653 = (($652) + 1)|0; //@line 3347 "stream_encoder.c"
  HEAP32[$651>>2] = $653; //@line 3347 "stream_encoder.c"
  $654 = $3; //@line 3348 "stream_encoder.c"
  $655 = ((($654)) + 4|0); //@line 3348 "stream_encoder.c"
  $656 = HEAP32[$655>>2]|0; //@line 3348 "stream_encoder.c"
  $657 = ((($656)) + 6864|0); //@line 3348 "stream_encoder.c"
  $658 = HEAP32[$657>>2]|0; //@line 3348 "stream_encoder.c"
  $659 = $3; //@line 3348 "stream_encoder.c"
  $660 = ((($659)) + 4|0); //@line 3348 "stream_encoder.c"
  $661 = HEAP32[$660>>2]|0; //@line 3348 "stream_encoder.c"
  $662 = ((($661)) + 6860|0); //@line 3348 "stream_encoder.c"
  $663 = HEAP32[$662>>2]|0; //@line 3348 "stream_encoder.c"
  $664 = ($658>>>0)>=($663>>>0); //@line 3348 "stream_encoder.c"
  if ($664) {
   $665 = $3; //@line 3349 "stream_encoder.c"
   $666 = ((($665)) + 4|0); //@line 3349 "stream_encoder.c"
   $667 = HEAP32[$666>>2]|0; //@line 3349 "stream_encoder.c"
   $668 = ((($667)) + 6864|0); //@line 3349 "stream_encoder.c"
   HEAP32[$668>>2] = 0; //@line 3349 "stream_encoder.c"
  }
 }
 $669 = ((($5)) + 12|0); //@line 3352 "stream_encoder.c"
 $670 = HEAP32[$669>>2]|0; //@line 3352 "stream_encoder.c"
 $671 = $3; //@line 3352 "stream_encoder.c"
 $672 = ((($671)) + 4|0); //@line 3352 "stream_encoder.c"
 $673 = HEAP32[$672>>2]|0; //@line 3352 "stream_encoder.c"
 $674 = ((($673)) + 6868|0); //@line 3352 "stream_encoder.c"
 HEAP32[$674>>2] = $670; //@line 3352 "stream_encoder.c"
 $2 = 1; //@line 3354 "stream_encoder.c"
 $675 = $2; //@line 3355 "stream_encoder.c"
 STACKTOP = sp;return ($675|0); //@line 3355 "stream_encoder.c"
}
function _write_bitbuffer_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 4|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4; //@line 2569 "stream_encoder.c"
 $10 = ((($9)) + 4|0); //@line 2569 "stream_encoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 2569 "stream_encoder.c"
 $12 = ((($11)) + 6856|0); //@line 2569 "stream_encoder.c"
 $13 = HEAP32[$12>>2]|0; //@line 2569 "stream_encoder.c"
 $14 = (_FLAC__bitwriter_get_buffer($13,$7,$8)|0); //@line 2569 "stream_encoder.c"
 $15 = ($14|0)!=(0); //@line 2569 "stream_encoder.c"
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 if (!($15)) {
  HEAP32[$17>>2] = 8; //@line 2570 "stream_encoder.c"
  $3 = 0; //@line 2571 "stream_encoder.c"
  $134 = $3; //@line 2607 "stream_encoder.c"
  STACKTOP = sp;return ($134|0); //@line 2607 "stream_encoder.c"
 }
 $18 = ((($17)) + 4|0); //@line 2574 "stream_encoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 2574 "stream_encoder.c"
 $20 = ($19|0)!=(0); //@line 2574 "stream_encoder.c"
 do {
  if ($20) {
   $21 = HEAP32[$7>>2]|0; //@line 2575 "stream_encoder.c"
   $22 = $4; //@line 2575 "stream_encoder.c"
   $23 = ((($22)) + 4|0); //@line 2575 "stream_encoder.c"
   $24 = HEAP32[$23>>2]|0; //@line 2575 "stream_encoder.c"
   $25 = ((($24)) + 11776|0); //@line 2575 "stream_encoder.c"
   $26 = ((($25)) + 52|0); //@line 2575 "stream_encoder.c"
   HEAP32[$26>>2] = $21; //@line 2575 "stream_encoder.c"
   $27 = HEAP32[$8>>2]|0; //@line 2576 "stream_encoder.c"
   $28 = $4; //@line 2576 "stream_encoder.c"
   $29 = ((($28)) + 4|0); //@line 2576 "stream_encoder.c"
   $30 = HEAP32[$29>>2]|0; //@line 2576 "stream_encoder.c"
   $31 = ((($30)) + 11776|0); //@line 2576 "stream_encoder.c"
   $32 = ((($31)) + 52|0); //@line 2576 "stream_encoder.c"
   $33 = ((($32)) + 8|0); //@line 2576 "stream_encoder.c"
   HEAP32[$33>>2] = $27; //@line 2576 "stream_encoder.c"
   $34 = $4; //@line 2577 "stream_encoder.c"
   $35 = ((($34)) + 4|0); //@line 2577 "stream_encoder.c"
   $36 = HEAP32[$35>>2]|0; //@line 2577 "stream_encoder.c"
   $37 = ((($36)) + 11776|0); //@line 2577 "stream_encoder.c"
   $38 = ((($37)) + 4|0); //@line 2577 "stream_encoder.c"
   $39 = HEAP32[$38>>2]|0; //@line 2577 "stream_encoder.c"
   $40 = ($39|0)==(0); //@line 2577 "stream_encoder.c"
   $41 = $4;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 11776|0);
   if ($40) {
    $45 = ((($44)) + 8|0); //@line 2578 "stream_encoder.c"
    HEAP32[$45>>2] = 1; //@line 2578 "stream_encoder.c"
    break;
   }
   $46 = HEAP32[$44>>2]|0; //@line 2581 "stream_encoder.c"
   $47 = (_FLAC__stream_decoder_process_single($46)|0); //@line 2581 "stream_encoder.c"
   $48 = ($47|0)!=(0); //@line 2581 "stream_encoder.c"
   if (!($48)) {
    $49 = $4; //@line 2582 "stream_encoder.c"
    $50 = ((($49)) + 4|0); //@line 2582 "stream_encoder.c"
    $51 = HEAP32[$50>>2]|0; //@line 2582 "stream_encoder.c"
    $52 = ((($51)) + 6856|0); //@line 2582 "stream_encoder.c"
    $53 = HEAP32[$52>>2]|0; //@line 2582 "stream_encoder.c"
    _FLAC__bitwriter_release_buffer($53); //@line 2582 "stream_encoder.c"
    $54 = $4; //@line 2583 "stream_encoder.c"
    $55 = ((($54)) + 4|0); //@line 2583 "stream_encoder.c"
    $56 = HEAP32[$55>>2]|0; //@line 2583 "stream_encoder.c"
    $57 = ((($56)) + 6856|0); //@line 2583 "stream_encoder.c"
    $58 = HEAP32[$57>>2]|0; //@line 2583 "stream_encoder.c"
    _FLAC__bitwriter_clear($58); //@line 2583 "stream_encoder.c"
    $59 = $4; //@line 2584 "stream_encoder.c"
    $60 = HEAP32[$59>>2]|0; //@line 2584 "stream_encoder.c"
    $61 = HEAP32[$60>>2]|0; //@line 2584 "stream_encoder.c"
    $62 = ($61|0)!=(4); //@line 2584 "stream_encoder.c"
    if ($62) {
     $63 = $4; //@line 2585 "stream_encoder.c"
     $64 = HEAP32[$63>>2]|0; //@line 2585 "stream_encoder.c"
     HEAP32[$64>>2] = 3; //@line 2585 "stream_encoder.c"
    }
    $3 = 0; //@line 2586 "stream_encoder.c"
    $134 = $3; //@line 2607 "stream_encoder.c"
    STACKTOP = sp;return ($134|0); //@line 2607 "stream_encoder.c"
   }
  }
 } while(0);
 $65 = $4; //@line 2591 "stream_encoder.c"
 $66 = HEAP32[$7>>2]|0; //@line 2591 "stream_encoder.c"
 $67 = HEAP32[$8>>2]|0; //@line 2591 "stream_encoder.c"
 $68 = $5; //@line 2591 "stream_encoder.c"
 $69 = $6; //@line 2591 "stream_encoder.c"
 $70 = (_write_frame_($65,$66,$67,$68,$69)|0); //@line 2591 "stream_encoder.c"
 $71 = ($70|0)!=(0); //@line 2591 "stream_encoder.c"
 $72 = $4;
 $73 = ((($72)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 6856|0);
 $76 = HEAP32[$75>>2]|0;
 _FLAC__bitwriter_release_buffer($76);
 $77 = $4;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 6856|0);
 $81 = HEAP32[$80>>2]|0;
 _FLAC__bitwriter_clear($81);
 if ($71) {
  $82 = $4; //@line 2594 "stream_encoder.c"
  $83 = HEAP32[$82>>2]|0; //@line 2594 "stream_encoder.c"
  HEAP32[$83>>2] = 5; //@line 2594 "stream_encoder.c"
  $3 = 0; //@line 2595 "stream_encoder.c"
  $134 = $3; //@line 2607 "stream_encoder.c"
  STACKTOP = sp;return ($134|0); //@line 2607 "stream_encoder.c"
 }
 $84 = $5; //@line 2601 "stream_encoder.c"
 $85 = ($84>>>0)>(0); //@line 2601 "stream_encoder.c"
 if ($85) {
  $86 = HEAP32[$8>>2]|0; //@line 2602 "stream_encoder.c"
  $87 = $4; //@line 2602 "stream_encoder.c"
  $88 = ((($87)) + 4|0); //@line 2602 "stream_encoder.c"
  $89 = HEAP32[$88>>2]|0; //@line 2602 "stream_encoder.c"
  $90 = ((($89)) + 6872|0); //@line 2602 "stream_encoder.c"
  $91 = ((($90)) + 16|0); //@line 2602 "stream_encoder.c"
  $92 = ((($91)) + 8|0); //@line 2602 "stream_encoder.c"
  $93 = HEAP32[$92>>2]|0; //@line 2602 "stream_encoder.c"
  $94 = ($86>>>0)<($93>>>0); //@line 2602 "stream_encoder.c"
  if ($94) {
   $95 = HEAP32[$8>>2]|0; //@line 2602 "stream_encoder.c"
   $109 = $95;
  } else {
   $96 = $4; //@line 2602 "stream_encoder.c"
   $97 = ((($96)) + 4|0); //@line 2602 "stream_encoder.c"
   $98 = HEAP32[$97>>2]|0; //@line 2602 "stream_encoder.c"
   $99 = ((($98)) + 6872|0); //@line 2602 "stream_encoder.c"
   $100 = ((($99)) + 16|0); //@line 2602 "stream_encoder.c"
   $101 = ((($100)) + 8|0); //@line 2602 "stream_encoder.c"
   $102 = HEAP32[$101>>2]|0; //@line 2602 "stream_encoder.c"
   $109 = $102;
  }
  $103 = $4; //@line 2602 "stream_encoder.c"
  $104 = ((($103)) + 4|0); //@line 2602 "stream_encoder.c"
  $105 = HEAP32[$104>>2]|0; //@line 2602 "stream_encoder.c"
  $106 = ((($105)) + 6872|0); //@line 2602 "stream_encoder.c"
  $107 = ((($106)) + 16|0); //@line 2602 "stream_encoder.c"
  $108 = ((($107)) + 8|0); //@line 2602 "stream_encoder.c"
  HEAP32[$108>>2] = $109; //@line 2602 "stream_encoder.c"
  $110 = HEAP32[$8>>2]|0; //@line 2603 "stream_encoder.c"
  $111 = $4; //@line 2603 "stream_encoder.c"
  $112 = ((($111)) + 4|0); //@line 2603 "stream_encoder.c"
  $113 = HEAP32[$112>>2]|0; //@line 2603 "stream_encoder.c"
  $114 = ((($113)) + 6872|0); //@line 2603 "stream_encoder.c"
  $115 = ((($114)) + 16|0); //@line 2603 "stream_encoder.c"
  $116 = ((($115)) + 12|0); //@line 2603 "stream_encoder.c"
  $117 = HEAP32[$116>>2]|0; //@line 2603 "stream_encoder.c"
  $118 = ($110>>>0)>($117>>>0); //@line 2603 "stream_encoder.c"
  if ($118) {
   $119 = HEAP32[$8>>2]|0; //@line 2603 "stream_encoder.c"
   $133 = $119;
  } else {
   $120 = $4; //@line 2603 "stream_encoder.c"
   $121 = ((($120)) + 4|0); //@line 2603 "stream_encoder.c"
   $122 = HEAP32[$121>>2]|0; //@line 2603 "stream_encoder.c"
   $123 = ((($122)) + 6872|0); //@line 2603 "stream_encoder.c"
   $124 = ((($123)) + 16|0); //@line 2603 "stream_encoder.c"
   $125 = ((($124)) + 12|0); //@line 2603 "stream_encoder.c"
   $126 = HEAP32[$125>>2]|0; //@line 2603 "stream_encoder.c"
   $133 = $126;
  }
  $127 = $4; //@line 2603 "stream_encoder.c"
  $128 = ((($127)) + 4|0); //@line 2603 "stream_encoder.c"
  $129 = HEAP32[$128>>2]|0; //@line 2603 "stream_encoder.c"
  $130 = ((($129)) + 6872|0); //@line 2603 "stream_encoder.c"
  $131 = ((($130)) + 16|0); //@line 2603 "stream_encoder.c"
  $132 = ((($131)) + 12|0); //@line 2603 "stream_encoder.c"
  HEAP32[$132>>2] = $133; //@line 2603 "stream_encoder.c"
 }
 $3 = 1; //@line 2606 "stream_encoder.c"
 $134 = $3; //@line 2607 "stream_encoder.c"
 STACKTOP = sp;return ($134|0); //@line 2607 "stream_encoder.c"
}
function _write_frame_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $12 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $12; //@line 2612 "stream_encoder.c"
 $20 = $19; //@line 2612 "stream_encoder.c"
 HEAP32[$20>>2] = 0; //@line 2612 "stream_encoder.c"
 $21 = (($19) + 4)|0; //@line 2612 "stream_encoder.c"
 $22 = $21; //@line 2612 "stream_encoder.c"
 HEAP32[$22>>2] = 0; //@line 2612 "stream_encoder.c"
 $23 = $6; //@line 2619 "stream_encoder.c"
 $24 = ((($23)) + 4|0); //@line 2619 "stream_encoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 2619 "stream_encoder.c"
 $26 = ((($25)) + 7296|0); //@line 2619 "stream_encoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2619 "stream_encoder.c"
 $28 = ($27|0)!=(0|0); //@line 2619 "stream_encoder.c"
 if ($28) {
  $29 = $6; //@line 2619 "stream_encoder.c"
  $30 = ((($29)) + 4|0); //@line 2619 "stream_encoder.c"
  $31 = HEAP32[$30>>2]|0; //@line 2619 "stream_encoder.c"
  $32 = ((($31)) + 7296|0); //@line 2619 "stream_encoder.c"
  $33 = HEAP32[$32>>2]|0; //@line 2619 "stream_encoder.c"
  $34 = $6; //@line 2619 "stream_encoder.c"
  $35 = $6; //@line 2619 "stream_encoder.c"
  $36 = ((($35)) + 4|0); //@line 2619 "stream_encoder.c"
  $37 = HEAP32[$36>>2]|0; //@line 2619 "stream_encoder.c"
  $38 = ((($37)) + 7312|0); //@line 2619 "stream_encoder.c"
  $39 = HEAP32[$38>>2]|0; //@line 2619 "stream_encoder.c"
  $40 = (FUNCTION_TABLE_iiii[$33 & 31]($34,$12,$39)|0); //@line 2619 "stream_encoder.c"
  $41 = ($40|0)==(1); //@line 2619 "stream_encoder.c"
  if ($41) {
   $42 = $6; //@line 2620 "stream_encoder.c"
   $43 = HEAP32[$42>>2]|0; //@line 2620 "stream_encoder.c"
   HEAP32[$43>>2] = 5; //@line 2620 "stream_encoder.c"
   $5 = 1; //@line 2621 "stream_encoder.c"
   $375 = $5; //@line 2700 "stream_encoder.c"
   STACKTOP = sp;return ($375|0); //@line 2700 "stream_encoder.c"
  }
 }
 $44 = $9; //@line 2627 "stream_encoder.c"
 $45 = ($44|0)==(0); //@line 2627 "stream_encoder.c"
 do {
  if ($45) {
   $46 = $7; //@line 2628 "stream_encoder.c"
   $47 = HEAP8[$46>>0]|0; //@line 2628 "stream_encoder.c"
   $48 = $47&255; //@line 2628 "stream_encoder.c"
   $49 = $48 & 127; //@line 2628 "stream_encoder.c"
   $13 = $49; //@line 2628 "stream_encoder.c"
   $50 = $13; //@line 2629 "stream_encoder.c"
   $51 = ($50|0)==(0); //@line 2629 "stream_encoder.c"
   if ($51) {
    $52 = $12; //@line 2630 "stream_encoder.c"
    $53 = $52; //@line 2630 "stream_encoder.c"
    $54 = HEAP32[$53>>2]|0; //@line 2630 "stream_encoder.c"
    $55 = (($52) + 4)|0; //@line 2630 "stream_encoder.c"
    $56 = $55; //@line 2630 "stream_encoder.c"
    $57 = HEAP32[$56>>2]|0; //@line 2630 "stream_encoder.c"
    $58 = $6; //@line 2630 "stream_encoder.c"
    $59 = HEAP32[$58>>2]|0; //@line 2630 "stream_encoder.c"
    $60 = ((($59)) + 608|0); //@line 2630 "stream_encoder.c"
    $61 = $60; //@line 2630 "stream_encoder.c"
    $62 = $61; //@line 2630 "stream_encoder.c"
    HEAP32[$62>>2] = $54; //@line 2630 "stream_encoder.c"
    $63 = (($61) + 4)|0; //@line 2630 "stream_encoder.c"
    $64 = $63; //@line 2630 "stream_encoder.c"
    HEAP32[$64>>2] = $57; //@line 2630 "stream_encoder.c"
    break;
   }
   $65 = $13; //@line 2631 "stream_encoder.c"
   $66 = ($65|0)==(3); //@line 2631 "stream_encoder.c"
   if ($66) {
    $67 = $6; //@line 2631 "stream_encoder.c"
    $68 = HEAP32[$67>>2]|0; //@line 2631 "stream_encoder.c"
    $69 = ((($68)) + 616|0); //@line 2631 "stream_encoder.c"
    $70 = $69; //@line 2631 "stream_encoder.c"
    $71 = $70; //@line 2631 "stream_encoder.c"
    $72 = HEAP32[$71>>2]|0; //@line 2631 "stream_encoder.c"
    $73 = (($70) + 4)|0; //@line 2631 "stream_encoder.c"
    $74 = $73; //@line 2631 "stream_encoder.c"
    $75 = HEAP32[$74>>2]|0; //@line 2631 "stream_encoder.c"
    $76 = ($72|0)==(0); //@line 2631 "stream_encoder.c"
    $77 = ($75|0)==(0); //@line 2631 "stream_encoder.c"
    $78 = $76 & $77; //@line 2631 "stream_encoder.c"
    if ($78) {
     $79 = $12; //@line 2632 "stream_encoder.c"
     $80 = $79; //@line 2632 "stream_encoder.c"
     $81 = HEAP32[$80>>2]|0; //@line 2632 "stream_encoder.c"
     $82 = (($79) + 4)|0; //@line 2632 "stream_encoder.c"
     $83 = $82; //@line 2632 "stream_encoder.c"
     $84 = HEAP32[$83>>2]|0; //@line 2632 "stream_encoder.c"
     $85 = $6; //@line 2632 "stream_encoder.c"
     $86 = HEAP32[$85>>2]|0; //@line 2632 "stream_encoder.c"
     $87 = ((($86)) + 616|0); //@line 2632 "stream_encoder.c"
     $88 = $87; //@line 2632 "stream_encoder.c"
     $89 = $88; //@line 2632 "stream_encoder.c"
     HEAP32[$89>>2] = $81; //@line 2632 "stream_encoder.c"
     $90 = (($88) + 4)|0; //@line 2632 "stream_encoder.c"
     $91 = $90; //@line 2632 "stream_encoder.c"
     HEAP32[$91>>2] = $84; //@line 2632 "stream_encoder.c"
    }
   }
  }
 } while(0);
 $92 = $6; //@line 2640 "stream_encoder.c"
 $93 = ((($92)) + 4|0); //@line 2640 "stream_encoder.c"
 $94 = HEAP32[$93>>2]|0; //@line 2640 "stream_encoder.c"
 $95 = ((($94)) + 7048|0); //@line 2640 "stream_encoder.c"
 $96 = HEAP32[$95>>2]|0; //@line 2640 "stream_encoder.c"
 $97 = (0|0)!=($96|0); //@line 2640 "stream_encoder.c"
 L14: do {
  if ($97) {
   $98 = $6; //@line 2640 "stream_encoder.c"
   $99 = HEAP32[$98>>2]|0; //@line 2640 "stream_encoder.c"
   $100 = ((($99)) + 624|0); //@line 2640 "stream_encoder.c"
   $101 = $100; //@line 2640 "stream_encoder.c"
   $102 = $101; //@line 2640 "stream_encoder.c"
   $103 = HEAP32[$102>>2]|0; //@line 2640 "stream_encoder.c"
   $104 = (($101) + 4)|0; //@line 2640 "stream_encoder.c"
   $105 = $104; //@line 2640 "stream_encoder.c"
   $106 = HEAP32[$105>>2]|0; //@line 2640 "stream_encoder.c"
   $107 = ($106>>>0)>(0); //@line 2640 "stream_encoder.c"
   $108 = ($103>>>0)>(0); //@line 2640 "stream_encoder.c"
   $109 = ($106|0)==(0); //@line 2640 "stream_encoder.c"
   $110 = $109 & $108; //@line 2640 "stream_encoder.c"
   $111 = $107 | $110; //@line 2640 "stream_encoder.c"
   if ($111) {
    $112 = $6; //@line 2640 "stream_encoder.c"
    $113 = ((($112)) + 4|0); //@line 2640 "stream_encoder.c"
    $114 = HEAP32[$113>>2]|0; //@line 2640 "stream_encoder.c"
    $115 = ((($114)) + 7048|0); //@line 2640 "stream_encoder.c"
    $116 = HEAP32[$115>>2]|0; //@line 2640 "stream_encoder.c"
    $117 = HEAP32[$116>>2]|0; //@line 2640 "stream_encoder.c"
    $118 = ($117>>>0)>(0); //@line 2640 "stream_encoder.c"
    if ($118) {
     $119 = $6; //@line 2641 "stream_encoder.c"
     $120 = (_FLAC__stream_encoder_get_blocksize($119)|0); //@line 2641 "stream_encoder.c"
     $14 = $120; //@line 2641 "stream_encoder.c"
     $121 = $6; //@line 2642 "stream_encoder.c"
     $122 = ((($121)) + 4|0); //@line 2642 "stream_encoder.c"
     $123 = HEAP32[$122>>2]|0; //@line 2642 "stream_encoder.c"
     $124 = ((($123)) + 7336|0); //@line 2642 "stream_encoder.c"
     $125 = $124; //@line 2642 "stream_encoder.c"
     $126 = $125; //@line 2642 "stream_encoder.c"
     $127 = HEAP32[$126>>2]|0; //@line 2642 "stream_encoder.c"
     $128 = (($125) + 4)|0; //@line 2642 "stream_encoder.c"
     $129 = $128; //@line 2642 "stream_encoder.c"
     $130 = HEAP32[$129>>2]|0; //@line 2642 "stream_encoder.c"
     $131 = $15; //@line 2642 "stream_encoder.c"
     $132 = $131; //@line 2642 "stream_encoder.c"
     HEAP32[$132>>2] = $127; //@line 2642 "stream_encoder.c"
     $133 = (($131) + 4)|0; //@line 2642 "stream_encoder.c"
     $134 = $133; //@line 2642 "stream_encoder.c"
     HEAP32[$134>>2] = $130; //@line 2642 "stream_encoder.c"
     $135 = $15; //@line 2643 "stream_encoder.c"
     $136 = $135; //@line 2643 "stream_encoder.c"
     $137 = HEAP32[$136>>2]|0; //@line 2643 "stream_encoder.c"
     $138 = (($135) + 4)|0; //@line 2643 "stream_encoder.c"
     $139 = $138; //@line 2643 "stream_encoder.c"
     $140 = HEAP32[$139>>2]|0; //@line 2643 "stream_encoder.c"
     $141 = $14; //@line 2643 "stream_encoder.c"
     $142 = (_i64Add(($137|0),($140|0),($141|0),0)|0); //@line 2643 "stream_encoder.c"
     $143 = tempRet0; //@line 2643 "stream_encoder.c"
     $144 = (_i64Subtract(($142|0),($143|0),1,0)|0); //@line 2643 "stream_encoder.c"
     $145 = tempRet0; //@line 2643 "stream_encoder.c"
     $146 = $16; //@line 2643 "stream_encoder.c"
     $147 = $146; //@line 2643 "stream_encoder.c"
     HEAP32[$147>>2] = $144; //@line 2643 "stream_encoder.c"
     $148 = (($146) + 4)|0; //@line 2643 "stream_encoder.c"
     $149 = $148; //@line 2643 "stream_encoder.c"
     HEAP32[$149>>2] = $145; //@line 2643 "stream_encoder.c"
     $150 = $6; //@line 2646 "stream_encoder.c"
     $151 = ((($150)) + 4|0); //@line 2646 "stream_encoder.c"
     $152 = HEAP32[$151>>2]|0; //@line 2646 "stream_encoder.c"
     $153 = ((($152)) + 7316|0); //@line 2646 "stream_encoder.c"
     $154 = HEAP32[$153>>2]|0; //@line 2646 "stream_encoder.c"
     $18 = $154; //@line 2646 "stream_encoder.c"
     while(1) {
      $155 = $18; //@line 2646 "stream_encoder.c"
      $156 = $6; //@line 2646 "stream_encoder.c"
      $157 = ((($156)) + 4|0); //@line 2646 "stream_encoder.c"
      $158 = HEAP32[$157>>2]|0; //@line 2646 "stream_encoder.c"
      $159 = ((($158)) + 7048|0); //@line 2646 "stream_encoder.c"
      $160 = HEAP32[$159>>2]|0; //@line 2646 "stream_encoder.c"
      $161 = HEAP32[$160>>2]|0; //@line 2646 "stream_encoder.c"
      $162 = ($155>>>0)<($161>>>0); //@line 2646 "stream_encoder.c"
      if (!($162)) {
       break L14;
      }
      $163 = $6; //@line 2647 "stream_encoder.c"
      $164 = ((($163)) + 4|0); //@line 2647 "stream_encoder.c"
      $165 = HEAP32[$164>>2]|0; //@line 2647 "stream_encoder.c"
      $166 = ((($165)) + 7048|0); //@line 2647 "stream_encoder.c"
      $167 = HEAP32[$166>>2]|0; //@line 2647 "stream_encoder.c"
      $168 = ((($167)) + 4|0); //@line 2647 "stream_encoder.c"
      $169 = HEAP32[$168>>2]|0; //@line 2647 "stream_encoder.c"
      $170 = $18; //@line 2647 "stream_encoder.c"
      $171 = (($169) + (($170*24)|0)|0); //@line 2647 "stream_encoder.c"
      $172 = $171; //@line 2647 "stream_encoder.c"
      $173 = $172; //@line 2647 "stream_encoder.c"
      $174 = HEAP32[$173>>2]|0; //@line 2647 "stream_encoder.c"
      $175 = (($172) + 4)|0; //@line 2647 "stream_encoder.c"
      $176 = $175; //@line 2647 "stream_encoder.c"
      $177 = HEAP32[$176>>2]|0; //@line 2647 "stream_encoder.c"
      $178 = $17; //@line 2647 "stream_encoder.c"
      $179 = $178; //@line 2647 "stream_encoder.c"
      HEAP32[$179>>2] = $174; //@line 2647 "stream_encoder.c"
      $180 = (($178) + 4)|0; //@line 2647 "stream_encoder.c"
      $181 = $180; //@line 2647 "stream_encoder.c"
      HEAP32[$181>>2] = $177; //@line 2647 "stream_encoder.c"
      $182 = $17; //@line 2648 "stream_encoder.c"
      $183 = $182; //@line 2648 "stream_encoder.c"
      $184 = HEAP32[$183>>2]|0; //@line 2648 "stream_encoder.c"
      $185 = (($182) + 4)|0; //@line 2648 "stream_encoder.c"
      $186 = $185; //@line 2648 "stream_encoder.c"
      $187 = HEAP32[$186>>2]|0; //@line 2648 "stream_encoder.c"
      $188 = $16; //@line 2648 "stream_encoder.c"
      $189 = $188; //@line 2648 "stream_encoder.c"
      $190 = HEAP32[$189>>2]|0; //@line 2648 "stream_encoder.c"
      $191 = (($188) + 4)|0; //@line 2648 "stream_encoder.c"
      $192 = $191; //@line 2648 "stream_encoder.c"
      $193 = HEAP32[$192>>2]|0; //@line 2648 "stream_encoder.c"
      $194 = ($187>>>0)>($193>>>0); //@line 2648 "stream_encoder.c"
      $195 = ($184>>>0)>($190>>>0); //@line 2648 "stream_encoder.c"
      $196 = ($187|0)==($193|0); //@line 2648 "stream_encoder.c"
      $197 = $196 & $195; //@line 2648 "stream_encoder.c"
      $198 = $194 | $197; //@line 2648 "stream_encoder.c"
      if ($198) {
       break L14;
      }
      $199 = $17; //@line 2651 "stream_encoder.c"
      $200 = $199; //@line 2651 "stream_encoder.c"
      $201 = HEAP32[$200>>2]|0; //@line 2651 "stream_encoder.c"
      $202 = (($199) + 4)|0; //@line 2651 "stream_encoder.c"
      $203 = $202; //@line 2651 "stream_encoder.c"
      $204 = HEAP32[$203>>2]|0; //@line 2651 "stream_encoder.c"
      $205 = $15; //@line 2651 "stream_encoder.c"
      $206 = $205; //@line 2651 "stream_encoder.c"
      $207 = HEAP32[$206>>2]|0; //@line 2651 "stream_encoder.c"
      $208 = (($205) + 4)|0; //@line 2651 "stream_encoder.c"
      $209 = $208; //@line 2651 "stream_encoder.c"
      $210 = HEAP32[$209>>2]|0; //@line 2651 "stream_encoder.c"
      $211 = ($204>>>0)>($210>>>0); //@line 2651 "stream_encoder.c"
      $212 = ($201>>>0)>=($207>>>0); //@line 2651 "stream_encoder.c"
      $213 = ($204|0)==($210|0); //@line 2651 "stream_encoder.c"
      $214 = $213 & $212; //@line 2651 "stream_encoder.c"
      $215 = $211 | $214; //@line 2651 "stream_encoder.c"
      if ($215) {
       $216 = $15; //@line 2652 "stream_encoder.c"
       $217 = $216; //@line 2652 "stream_encoder.c"
       $218 = HEAP32[$217>>2]|0; //@line 2652 "stream_encoder.c"
       $219 = (($216) + 4)|0; //@line 2652 "stream_encoder.c"
       $220 = $219; //@line 2652 "stream_encoder.c"
       $221 = HEAP32[$220>>2]|0; //@line 2652 "stream_encoder.c"
       $222 = $6; //@line 2652 "stream_encoder.c"
       $223 = ((($222)) + 4|0); //@line 2652 "stream_encoder.c"
       $224 = HEAP32[$223>>2]|0; //@line 2652 "stream_encoder.c"
       $225 = ((($224)) + 7048|0); //@line 2652 "stream_encoder.c"
       $226 = HEAP32[$225>>2]|0; //@line 2652 "stream_encoder.c"
       $227 = ((($226)) + 4|0); //@line 2652 "stream_encoder.c"
       $228 = HEAP32[$227>>2]|0; //@line 2652 "stream_encoder.c"
       $229 = $18; //@line 2652 "stream_encoder.c"
       $230 = (($228) + (($229*24)|0)|0); //@line 2652 "stream_encoder.c"
       $231 = $230; //@line 2652 "stream_encoder.c"
       $232 = $231; //@line 2652 "stream_encoder.c"
       HEAP32[$232>>2] = $218; //@line 2652 "stream_encoder.c"
       $233 = (($231) + 4)|0; //@line 2652 "stream_encoder.c"
       $234 = $233; //@line 2652 "stream_encoder.c"
       HEAP32[$234>>2] = $221; //@line 2652 "stream_encoder.c"
       $235 = $12; //@line 2653 "stream_encoder.c"
       $236 = $235; //@line 2653 "stream_encoder.c"
       $237 = HEAP32[$236>>2]|0; //@line 2653 "stream_encoder.c"
       $238 = (($235) + 4)|0; //@line 2653 "stream_encoder.c"
       $239 = $238; //@line 2653 "stream_encoder.c"
       $240 = HEAP32[$239>>2]|0; //@line 2653 "stream_encoder.c"
       $241 = $6; //@line 2653 "stream_encoder.c"
       $242 = HEAP32[$241>>2]|0; //@line 2653 "stream_encoder.c"
       $243 = ((($242)) + 624|0); //@line 2653 "stream_encoder.c"
       $244 = $243; //@line 2653 "stream_encoder.c"
       $245 = $244; //@line 2653 "stream_encoder.c"
       $246 = HEAP32[$245>>2]|0; //@line 2653 "stream_encoder.c"
       $247 = (($244) + 4)|0; //@line 2653 "stream_encoder.c"
       $248 = $247; //@line 2653 "stream_encoder.c"
       $249 = HEAP32[$248>>2]|0; //@line 2653 "stream_encoder.c"
       $250 = (_i64Subtract(($237|0),($240|0),($246|0),($249|0))|0); //@line 2653 "stream_encoder.c"
       $251 = tempRet0; //@line 2653 "stream_encoder.c"
       $252 = $6; //@line 2653 "stream_encoder.c"
       $253 = ((($252)) + 4|0); //@line 2653 "stream_encoder.c"
       $254 = HEAP32[$253>>2]|0; //@line 2653 "stream_encoder.c"
       $255 = ((($254)) + 7048|0); //@line 2653 "stream_encoder.c"
       $256 = HEAP32[$255>>2]|0; //@line 2653 "stream_encoder.c"
       $257 = ((($256)) + 4|0); //@line 2653 "stream_encoder.c"
       $258 = HEAP32[$257>>2]|0; //@line 2653 "stream_encoder.c"
       $259 = $18; //@line 2653 "stream_encoder.c"
       $260 = (($258) + (($259*24)|0)|0); //@line 2653 "stream_encoder.c"
       $261 = ((($260)) + 8|0); //@line 2653 "stream_encoder.c"
       $262 = $261; //@line 2653 "stream_encoder.c"
       $263 = $262; //@line 2653 "stream_encoder.c"
       HEAP32[$263>>2] = $250; //@line 2653 "stream_encoder.c"
       $264 = (($262) + 4)|0; //@line 2653 "stream_encoder.c"
       $265 = $264; //@line 2653 "stream_encoder.c"
       HEAP32[$265>>2] = $251; //@line 2653 "stream_encoder.c"
       $266 = $14; //@line 2654 "stream_encoder.c"
       $267 = $6; //@line 2654 "stream_encoder.c"
       $268 = ((($267)) + 4|0); //@line 2654 "stream_encoder.c"
       $269 = HEAP32[$268>>2]|0; //@line 2654 "stream_encoder.c"
       $270 = ((($269)) + 7048|0); //@line 2654 "stream_encoder.c"
       $271 = HEAP32[$270>>2]|0; //@line 2654 "stream_encoder.c"
       $272 = ((($271)) + 4|0); //@line 2654 "stream_encoder.c"
       $273 = HEAP32[$272>>2]|0; //@line 2654 "stream_encoder.c"
       $274 = $18; //@line 2654 "stream_encoder.c"
       $275 = (($273) + (($274*24)|0)|0); //@line 2654 "stream_encoder.c"
       $276 = ((($275)) + 16|0); //@line 2654 "stream_encoder.c"
       HEAP32[$276>>2] = $266; //@line 2654 "stream_encoder.c"
       $277 = $6; //@line 2655 "stream_encoder.c"
       $278 = ((($277)) + 4|0); //@line 2655 "stream_encoder.c"
       $279 = HEAP32[$278>>2]|0; //@line 2655 "stream_encoder.c"
       $280 = ((($279)) + 7316|0); //@line 2655 "stream_encoder.c"
       $281 = HEAP32[$280>>2]|0; //@line 2655 "stream_encoder.c"
       $282 = (($281) + 1)|0; //@line 2655 "stream_encoder.c"
       HEAP32[$280>>2] = $282; //@line 2655 "stream_encoder.c"
      } else {
       $283 = $6; //@line 2664 "stream_encoder.c"
       $284 = ((($283)) + 4|0); //@line 2664 "stream_encoder.c"
       $285 = HEAP32[$284>>2]|0; //@line 2664 "stream_encoder.c"
       $286 = ((($285)) + 7316|0); //@line 2664 "stream_encoder.c"
       $287 = HEAP32[$286>>2]|0; //@line 2664 "stream_encoder.c"
       $288 = (($287) + 1)|0; //@line 2664 "stream_encoder.c"
       HEAP32[$286>>2] = $288; //@line 2664 "stream_encoder.c"
      }
      $289 = $18; //@line 2646 "stream_encoder.c"
      $290 = (($289) + 1)|0; //@line 2646 "stream_encoder.c"
      $18 = $290; //@line 2646 "stream_encoder.c"
     }
    }
   }
  }
 } while(0);
 $291 = $6; //@line 2685 "stream_encoder.c"
 $292 = ((($291)) + 4|0); //@line 2685 "stream_encoder.c"
 $293 = HEAP32[$292>>2]|0; //@line 2685 "stream_encoder.c"
 $294 = ((($293)) + 7300|0); //@line 2685 "stream_encoder.c"
 $295 = HEAP32[$294>>2]|0; //@line 2685 "stream_encoder.c"
 $296 = $6; //@line 2685 "stream_encoder.c"
 $297 = $7; //@line 2685 "stream_encoder.c"
 $298 = $8; //@line 2685 "stream_encoder.c"
 $299 = $9; //@line 2685 "stream_encoder.c"
 $300 = $6; //@line 2685 "stream_encoder.c"
 $301 = ((($300)) + 4|0); //@line 2685 "stream_encoder.c"
 $302 = HEAP32[$301>>2]|0; //@line 2685 "stream_encoder.c"
 $303 = ((($302)) + 7056|0); //@line 2685 "stream_encoder.c"
 $304 = HEAP32[$303>>2]|0; //@line 2685 "stream_encoder.c"
 $305 = $6; //@line 2685 "stream_encoder.c"
 $306 = ((($305)) + 4|0); //@line 2685 "stream_encoder.c"
 $307 = HEAP32[$306>>2]|0; //@line 2685 "stream_encoder.c"
 $308 = ((($307)) + 7312|0); //@line 2685 "stream_encoder.c"
 $309 = HEAP32[$308>>2]|0; //@line 2685 "stream_encoder.c"
 $310 = (FUNCTION_TABLE_iiiiiii[$295 & 7]($296,$297,$298,$299,$304,$309)|0); //@line 2685 "stream_encoder.c"
 $11 = $310; //@line 2685 "stream_encoder.c"
 $311 = $11; //@line 2687 "stream_encoder.c"
 $312 = ($311|0)==(0); //@line 2687 "stream_encoder.c"
 if ($312) {
  $313 = $8; //@line 2688 "stream_encoder.c"
  $314 = $6; //@line 2688 "stream_encoder.c"
  $315 = ((($314)) + 4|0); //@line 2688 "stream_encoder.c"
  $316 = HEAP32[$315>>2]|0; //@line 2688 "stream_encoder.c"
  $317 = ((($316)) + 7328|0); //@line 2688 "stream_encoder.c"
  $318 = $317; //@line 2688 "stream_encoder.c"
  $319 = $318; //@line 2688 "stream_encoder.c"
  $320 = HEAP32[$319>>2]|0; //@line 2688 "stream_encoder.c"
  $321 = (($318) + 4)|0; //@line 2688 "stream_encoder.c"
  $322 = $321; //@line 2688 "stream_encoder.c"
  $323 = HEAP32[$322>>2]|0; //@line 2688 "stream_encoder.c"
  $324 = (_i64Add(($320|0),($323|0),($313|0),0)|0); //@line 2688 "stream_encoder.c"
  $325 = tempRet0; //@line 2688 "stream_encoder.c"
  $326 = $317; //@line 2688 "stream_encoder.c"
  $327 = $326; //@line 2688 "stream_encoder.c"
  HEAP32[$327>>2] = $324; //@line 2688 "stream_encoder.c"
  $328 = (($326) + 4)|0; //@line 2688 "stream_encoder.c"
  $329 = $328; //@line 2688 "stream_encoder.c"
  HEAP32[$329>>2] = $325; //@line 2688 "stream_encoder.c"
  $330 = $9; //@line 2689 "stream_encoder.c"
  $331 = $6; //@line 2689 "stream_encoder.c"
  $332 = ((($331)) + 4|0); //@line 2689 "stream_encoder.c"
  $333 = HEAP32[$332>>2]|0; //@line 2689 "stream_encoder.c"
  $334 = ((($333)) + 7336|0); //@line 2689 "stream_encoder.c"
  $335 = $334; //@line 2689 "stream_encoder.c"
  $336 = $335; //@line 2689 "stream_encoder.c"
  $337 = HEAP32[$336>>2]|0; //@line 2689 "stream_encoder.c"
  $338 = (($335) + 4)|0; //@line 2689 "stream_encoder.c"
  $339 = $338; //@line 2689 "stream_encoder.c"
  $340 = HEAP32[$339>>2]|0; //@line 2689 "stream_encoder.c"
  $341 = (_i64Add(($337|0),($340|0),($330|0),0)|0); //@line 2689 "stream_encoder.c"
  $342 = tempRet0; //@line 2689 "stream_encoder.c"
  $343 = $334; //@line 2689 "stream_encoder.c"
  $344 = $343; //@line 2689 "stream_encoder.c"
  HEAP32[$344>>2] = $341; //@line 2689 "stream_encoder.c"
  $345 = (($343) + 4)|0; //@line 2689 "stream_encoder.c"
  $346 = $345; //@line 2689 "stream_encoder.c"
  HEAP32[$346>>2] = $342; //@line 2689 "stream_encoder.c"
  $347 = $6; //@line 2694 "stream_encoder.c"
  $348 = ((($347)) + 4|0); //@line 2694 "stream_encoder.c"
  $349 = HEAP32[$348>>2]|0; //@line 2694 "stream_encoder.c"
  $350 = ((($349)) + 7344|0); //@line 2694 "stream_encoder.c"
  $351 = HEAP32[$350>>2]|0; //@line 2694 "stream_encoder.c"
  $352 = $6; //@line 2694 "stream_encoder.c"
  $353 = ((($352)) + 4|0); //@line 2694 "stream_encoder.c"
  $354 = HEAP32[$353>>2]|0; //@line 2694 "stream_encoder.c"
  $355 = ((($354)) + 7056|0); //@line 2694 "stream_encoder.c"
  $356 = HEAP32[$355>>2]|0; //@line 2694 "stream_encoder.c"
  $357 = (($356) + 1)|0; //@line 2694 "stream_encoder.c"
  $358 = ($351>>>0)>($357>>>0); //@line 2694 "stream_encoder.c"
  $359 = $6; //@line 2694 "stream_encoder.c"
  $360 = ((($359)) + 4|0); //@line 2694 "stream_encoder.c"
  $361 = HEAP32[$360>>2]|0; //@line 2694 "stream_encoder.c"
  if ($358) {
   $362 = ((($361)) + 7344|0); //@line 2694 "stream_encoder.c"
   $363 = HEAP32[$362>>2]|0; //@line 2694 "stream_encoder.c"
   $371 = $363;
  } else {
   $364 = ((($361)) + 7056|0); //@line 2694 "stream_encoder.c"
   $365 = HEAP32[$364>>2]|0; //@line 2694 "stream_encoder.c"
   $366 = (($365) + 1)|0; //@line 2694 "stream_encoder.c"
   $371 = $366;
  }
  $367 = $6; //@line 2694 "stream_encoder.c"
  $368 = ((($367)) + 4|0); //@line 2694 "stream_encoder.c"
  $369 = HEAP32[$368>>2]|0; //@line 2694 "stream_encoder.c"
  $370 = ((($369)) + 7344|0); //@line 2694 "stream_encoder.c"
  HEAP32[$370>>2] = $371; //@line 2694 "stream_encoder.c"
 } else {
  $372 = $6; //@line 2697 "stream_encoder.c"
  $373 = HEAP32[$372>>2]|0; //@line 2697 "stream_encoder.c"
  HEAP32[$373>>2] = 5; //@line 2697 "stream_encoder.c"
 }
 $374 = $11; //@line 2699 "stream_encoder.c"
 $5 = $374; //@line 2699 "stream_encoder.c"
 $375 = $5; //@line 2700 "stream_encoder.c"
 STACKTOP = sp;return ($375|0); //@line 2700 "stream_encoder.c"
}
function _FLAC__stream_encoder_get_blocksize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 2052 "stream_encoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 2052 "stream_encoder.c"
 $4 = ((($3)) + 36|0); //@line 2052 "stream_encoder.c"
 $5 = HEAP32[$4>>2]|0; //@line 2052 "stream_encoder.c"
 STACKTOP = sp;return ($5|0); //@line 2052 "stream_encoder.c"
}
function _get_wasted_bits_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = 0; //@line 4310 "stream_encoder.c"
 $4 = 0; //@line 4312 "stream_encoder.c"
 while(1) {
  $7 = $4; //@line 4312 "stream_encoder.c"
  $8 = $3; //@line 4312 "stream_encoder.c"
  $9 = ($7>>>0)<($8>>>0); //@line 4312 "stream_encoder.c"
  if (!($9)) {
   break;
  }
  $10 = $6; //@line 4312 "stream_encoder.c"
  $11 = $10 & 1; //@line 4312 "stream_encoder.c"
  $12 = ($11|0)!=(0); //@line 4312 "stream_encoder.c"
  $13 = $12 ^ 1; //@line 4312 "stream_encoder.c"
  if (!($13)) {
   break;
  }
  $14 = $2; //@line 4313 "stream_encoder.c"
  $15 = $4; //@line 4313 "stream_encoder.c"
  $16 = (($14) + ($15<<2)|0); //@line 4313 "stream_encoder.c"
  $17 = HEAP32[$16>>2]|0; //@line 4313 "stream_encoder.c"
  $18 = $6; //@line 4313 "stream_encoder.c"
  $19 = $18 | $17; //@line 4313 "stream_encoder.c"
  $6 = $19; //@line 4313 "stream_encoder.c"
  $20 = $4; //@line 4312 "stream_encoder.c"
  $21 = (($20) + 1)|0; //@line 4312 "stream_encoder.c"
  $4 = $21; //@line 4312 "stream_encoder.c"
 }
 $22 = $6; //@line 4315 "stream_encoder.c"
 $23 = ($22|0)==(0); //@line 4315 "stream_encoder.c"
 $5 = 0;
 L6: do {
  if (!($23)) {
   while(1) {
    $24 = $6; //@line 4319 "stream_encoder.c"
    $25 = $24 & 1; //@line 4319 "stream_encoder.c"
    $26 = ($25|0)!=(0); //@line 4319 "stream_encoder.c"
    $27 = $26 ^ 1; //@line 4319 "stream_encoder.c"
    if (!($27)) {
     break L6;
    }
    $28 = $6; //@line 4320 "stream_encoder.c"
    $29 = $28 >> 1; //@line 4320 "stream_encoder.c"
    $6 = $29; //@line 4320 "stream_encoder.c"
    $30 = $5; //@line 4319 "stream_encoder.c"
    $31 = (($30) + 1)|0; //@line 4319 "stream_encoder.c"
    $5 = $31; //@line 4319 "stream_encoder.c"
   }
  }
 } while(0);
 $32 = $5; //@line 4323 "stream_encoder.c"
 $33 = ($32>>>0)>(0); //@line 4323 "stream_encoder.c"
 if (!($33)) {
  $45 = $5; //@line 4328 "stream_encoder.c"
  STACKTOP = sp;return ($45|0); //@line 4328 "stream_encoder.c"
 }
 $4 = 0; //@line 4324 "stream_encoder.c"
 while(1) {
  $34 = $4; //@line 4324 "stream_encoder.c"
  $35 = $3; //@line 4324 "stream_encoder.c"
  $36 = ($34>>>0)<($35>>>0); //@line 4324 "stream_encoder.c"
  if (!($36)) {
   break;
  }
  $37 = $5; //@line 4325 "stream_encoder.c"
  $38 = $2; //@line 4325 "stream_encoder.c"
  $39 = $4; //@line 4325 "stream_encoder.c"
  $40 = (($38) + ($39<<2)|0); //@line 4325 "stream_encoder.c"
  $41 = HEAP32[$40>>2]|0; //@line 4325 "stream_encoder.c"
  $42 = $41 >> $37; //@line 4325 "stream_encoder.c"
  HEAP32[$40>>2] = $42; //@line 4325 "stream_encoder.c"
  $43 = $4; //@line 4324 "stream_encoder.c"
  $44 = (($43) + 1)|0; //@line 4324 "stream_encoder.c"
  $4 = $44; //@line 4324 "stream_encoder.c"
 }
 $45 = $5; //@line 4328 "stream_encoder.c"
 STACKTOP = sp;return ($45|0); //@line 4328 "stream_encoder.c"
}
function _process_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0;
 var $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0;
 var $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0;
 var $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $22 = sp + 472|0;
 $24 = sp + 340|0;
 $25 = sp;
 $27 = sp + 332|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $45 = $11; //@line 3388 "stream_encoder.c"
 $46 = (_FLAC__stream_encoder_get_bits_per_sample($45)|0); //@line 3388 "stream_encoder.c"
 $47 = ($46>>>0)>(16); //@line 3388 "stream_encoder.c"
 $48 = HEAP32[273]|0; //@line 3388 "stream_encoder.c"
 $49 = HEAP32[272]|0; //@line 3388 "stream_encoder.c"
 $50 = $47 ? $48 : $49; //@line 3388 "stream_encoder.c"
 $40 = $50; //@line 3388 "stream_encoder.c"
 $39 = 0; //@line 3393 "stream_encoder.c"
 $51 = $11; //@line 3394 "stream_encoder.c"
 $52 = ((($51)) + 4|0); //@line 3394 "stream_encoder.c"
 $53 = HEAP32[$52>>2]|0; //@line 3394 "stream_encoder.c"
 $54 = ((($53)) + 7280|0); //@line 3394 "stream_encoder.c"
 $55 = HEAP32[$54>>2]|0; //@line 3394 "stream_encoder.c"
 $56 = ($55|0)!=(0); //@line 3394 "stream_encoder.c"
 if ($56) {
  $57 = $14; //@line 3394 "stream_encoder.c"
  $58 = HEAP32[$57>>2]|0; //@line 3394 "stream_encoder.c"
  $59 = ($58>>>0)>=(4); //@line 3394 "stream_encoder.c"
  if ($59) {
   $38 = -1; //@line 3395 "stream_encoder.c"
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $60 = $11; //@line 3397 "stream_encoder.c"
  $61 = $16; //@line 3397 "stream_encoder.c"
  $62 = $14; //@line 3397 "stream_encoder.c"
  $63 = HEAP32[$62>>2]|0; //@line 3397 "stream_encoder.c"
  $64 = $15; //@line 3397 "stream_encoder.c"
  $65 = $17; //@line 3397 "stream_encoder.c"
  $66 = $39; //@line 3397 "stream_encoder.c"
  $67 = (($65) + ($66<<2)|0); //@line 3397 "stream_encoder.c"
  $68 = HEAP32[$67>>2]|0; //@line 3397 "stream_encoder.c"
  $69 = (_evaluate_verbatim_subframe_($60,$61,$63,$64,$68)|0); //@line 3397 "stream_encoder.c"
  $38 = $69; //@line 3397 "stream_encoder.c"
 }
 $70 = $14; //@line 3399 "stream_encoder.c"
 $71 = HEAP32[$70>>2]|0; //@line 3399 "stream_encoder.c"
 $72 = ($71>>>0)>=(4); //@line 3399 "stream_encoder.c"
 L7: do {
  if ($72) {
   $41 = 0; //@line 3400 "stream_encoder.c"
   $73 = $15; //@line 3401 "stream_encoder.c"
   $74 = (($73) + 4)|0; //@line 3401 "stream_encoder.c"
   $75 = $14; //@line 3401 "stream_encoder.c"
   $76 = HEAP32[$75>>2]|0; //@line 3401 "stream_encoder.c"
   $77 = (($76) - 4)|0; //@line 3401 "stream_encoder.c"
   $78 = $77 | 1; //@line 3401 "stream_encoder.c"
   $79 = (_FLAC__bitmath_ilog2_235($78)|0); //@line 3401 "stream_encoder.c"
   $80 = (($74) + ($79))|0; //@line 3401 "stream_encoder.c"
   $81 = ($80>>>0)<=(32); //@line 3401 "stream_encoder.c"
   $82 = $11;
   $83 = ((($82)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   if ($81) {
    $85 = ((($84)) + 7248|0); //@line 3402 "stream_encoder.c"
    $86 = HEAP32[$85>>2]|0; //@line 3402 "stream_encoder.c"
    $87 = $16; //@line 3402 "stream_encoder.c"
    $88 = ((($87)) + 16|0); //@line 3402 "stream_encoder.c"
    $89 = $14; //@line 3402 "stream_encoder.c"
    $90 = HEAP32[$89>>2]|0; //@line 3402 "stream_encoder.c"
    $91 = (($90) - 4)|0; //@line 3402 "stream_encoder.c"
    $92 = (FUNCTION_TABLE_iiii[$86 & 31]($88,$91,$22)|0); //@line 3402 "stream_encoder.c"
    $34 = $92; //@line 3402 "stream_encoder.c"
   } else {
    $93 = ((($84)) + 7252|0); //@line 3404 "stream_encoder.c"
    $94 = HEAP32[$93>>2]|0; //@line 3404 "stream_encoder.c"
    $95 = $16; //@line 3404 "stream_encoder.c"
    $96 = ((($95)) + 16|0); //@line 3404 "stream_encoder.c"
    $97 = $14; //@line 3404 "stream_encoder.c"
    $98 = HEAP32[$97>>2]|0; //@line 3404 "stream_encoder.c"
    $99 = (($98) - 4)|0; //@line 3404 "stream_encoder.c"
    $100 = (FUNCTION_TABLE_iiii[$94 & 31]($96,$99,$22)|0); //@line 3404 "stream_encoder.c"
    $34 = $100; //@line 3404 "stream_encoder.c"
   }
   $101 = $11; //@line 3407 "stream_encoder.c"
   $102 = ((($101)) + 4|0); //@line 3407 "stream_encoder.c"
   $103 = HEAP32[$102>>2]|0; //@line 3407 "stream_encoder.c"
   $104 = ((($103)) + 7272|0); //@line 3407 "stream_encoder.c"
   $105 = HEAP32[$104>>2]|0; //@line 3407 "stream_encoder.c"
   $106 = ($105|0)!=(0); //@line 3407 "stream_encoder.c"
   L13: do {
    if (!($106)) {
     $107 = ((($22)) + 4|0); //@line 3409 "stream_encoder.c"
     $108 = +HEAPF32[$107>>2]; //@line 3409 "stream_encoder.c"
     $109 = $108; //@line 3409 "stream_encoder.c"
     $110 = $109 == 0.0; //@line 3409 "stream_encoder.c"
     if ($110) {
      $41 = 1; //@line 3416 "stream_encoder.c"
      $42 = 1; //@line 3417 "stream_encoder.c"
      while(1) {
       $111 = $42; //@line 3417 "stream_encoder.c"
       $112 = $14; //@line 3417 "stream_encoder.c"
       $113 = HEAP32[$112>>2]|0; //@line 3417 "stream_encoder.c"
       $114 = ($111>>>0)<($113>>>0); //@line 3417 "stream_encoder.c"
       if (!($114)) {
        break L13;
       }
       $115 = $16; //@line 3418 "stream_encoder.c"
       $116 = HEAP32[$115>>2]|0; //@line 3418 "stream_encoder.c"
       $117 = $16; //@line 3418 "stream_encoder.c"
       $118 = $42; //@line 3418 "stream_encoder.c"
       $119 = (($117) + ($118<<2)|0); //@line 3418 "stream_encoder.c"
       $120 = HEAP32[$119>>2]|0; //@line 3418 "stream_encoder.c"
       $121 = ($116|0)!=($120|0); //@line 3418 "stream_encoder.c"
       if ($121) {
        break;
       }
       $122 = $42; //@line 3417 "stream_encoder.c"
       $123 = (($122) + 1)|0; //@line 3417 "stream_encoder.c"
       $42 = $123; //@line 3417 "stream_encoder.c"
      }
      $41 = 0; //@line 3419 "stream_encoder.c"
     }
    }
   } while(0);
   $124 = $41; //@line 3424 "stream_encoder.c"
   $125 = ($124|0)!=(0); //@line 3424 "stream_encoder.c"
   $126 = $11;
   if ($125) {
    $127 = $16; //@line 3425 "stream_encoder.c"
    $128 = HEAP32[$127>>2]|0; //@line 3425 "stream_encoder.c"
    $129 = $14; //@line 3425 "stream_encoder.c"
    $130 = HEAP32[$129>>2]|0; //@line 3425 "stream_encoder.c"
    $131 = $15; //@line 3425 "stream_encoder.c"
    $132 = $17; //@line 3425 "stream_encoder.c"
    $133 = $39; //@line 3425 "stream_encoder.c"
    $134 = ($133|0)!=(0); //@line 3425 "stream_encoder.c"
    $135 = $134 ^ 1; //@line 3425 "stream_encoder.c"
    $136 = $135&1; //@line 3425 "stream_encoder.c"
    $137 = (($132) + ($136<<2)|0); //@line 3425 "stream_encoder.c"
    $138 = HEAP32[$137>>2]|0; //@line 3425 "stream_encoder.c"
    $139 = (_evaluate_constant_subframe_($126,$128,$130,$131,$138)|0); //@line 3425 "stream_encoder.c"
    $37 = $139; //@line 3425 "stream_encoder.c"
    $140 = $37; //@line 3426 "stream_encoder.c"
    $141 = $38; //@line 3426 "stream_encoder.c"
    $142 = ($140>>>0)<($141>>>0); //@line 3426 "stream_encoder.c"
    if (!($142)) {
     break;
    }
    $143 = $39; //@line 3427 "stream_encoder.c"
    $144 = ($143|0)!=(0); //@line 3427 "stream_encoder.c"
    $145 = $144 ^ 1; //@line 3427 "stream_encoder.c"
    $146 = $145&1; //@line 3427 "stream_encoder.c"
    $39 = $146; //@line 3427 "stream_encoder.c"
    $147 = $37; //@line 3428 "stream_encoder.c"
    $38 = $147; //@line 3428 "stream_encoder.c"
    break;
   }
   $148 = ((($126)) + 4|0); //@line 3432 "stream_encoder.c"
   $149 = HEAP32[$148>>2]|0; //@line 3432 "stream_encoder.c"
   $150 = ((($149)) + 7276|0); //@line 3432 "stream_encoder.c"
   $151 = HEAP32[$150>>2]|0; //@line 3432 "stream_encoder.c"
   $152 = ($151|0)!=(0); //@line 3432 "stream_encoder.c"
   if ($152) {
    $153 = $11; //@line 3432 "stream_encoder.c"
    $154 = HEAP32[$153>>2]|0; //@line 3432 "stream_encoder.c"
    $155 = ((($154)) + 556|0); //@line 3432 "stream_encoder.c"
    $156 = HEAP32[$155>>2]|0; //@line 3432 "stream_encoder.c"
    $157 = ($156|0)==(0); //@line 3432 "stream_encoder.c"
    $158 = $38; //@line 3432 "stream_encoder.c"
    $159 = ($158|0)==(-1); //@line 3432 "stream_encoder.c"
    $or$cond = $157 & $159; //@line 3432 "stream_encoder.c"
    if ($or$cond) {
     label = 21;
    }
   } else {
    label = 21;
   }
   L28: do {
    if ((label|0) == 21) {
     $160 = $11; //@line 3434 "stream_encoder.c"
     $161 = HEAP32[$160>>2]|0; //@line 3434 "stream_encoder.c"
     $162 = ((($161)) + 568|0); //@line 3434 "stream_encoder.c"
     $163 = HEAP32[$162>>2]|0; //@line 3434 "stream_encoder.c"
     $164 = ($163|0)!=(0); //@line 3434 "stream_encoder.c"
     if ($164) {
      $32 = 0; //@line 3435 "stream_encoder.c"
      $33 = 4; //@line 3436 "stream_encoder.c"
     } else {
      $165 = $34; //@line 3439 "stream_encoder.c"
      $33 = $165; //@line 3439 "stream_encoder.c"
      $32 = $165; //@line 3439 "stream_encoder.c"
     }
     $166 = $33; //@line 3441 "stream_encoder.c"
     $167 = $14; //@line 3441 "stream_encoder.c"
     $168 = HEAP32[$167>>2]|0; //@line 3441 "stream_encoder.c"
     $169 = ($166>>>0)>=($168>>>0); //@line 3441 "stream_encoder.c"
     if ($169) {
      $170 = $14; //@line 3442 "stream_encoder.c"
      $171 = HEAP32[$170>>2]|0; //@line 3442 "stream_encoder.c"
      $172 = (($171) - 1)|0; //@line 3442 "stream_encoder.c"
      $33 = $172; //@line 3442 "stream_encoder.c"
     }
     $173 = $32; //@line 3443 "stream_encoder.c"
     $35 = $173; //@line 3443 "stream_encoder.c"
     while(1) {
      $174 = $35; //@line 3443 "stream_encoder.c"
      $175 = $33; //@line 3443 "stream_encoder.c"
      $176 = ($174>>>0)<=($175>>>0); //@line 3443 "stream_encoder.c"
      if (!($176)) {
       break L28;
      }
      $177 = $35; //@line 3445 "stream_encoder.c"
      $178 = (($22) + ($177<<2)|0); //@line 3445 "stream_encoder.c"
      $179 = +HEAPF32[$178>>2]; //@line 3445 "stream_encoder.c"
      $180 = $15; //@line 3445 "stream_encoder.c"
      $181 = (+($180>>>0)); //@line 3445 "stream_encoder.c"
      $182 = $179 >= $181; //@line 3445 "stream_encoder.c"
      if (!($182)) {
       $183 = $35; //@line 3447 "stream_encoder.c"
       $184 = (($22) + ($183<<2)|0); //@line 3447 "stream_encoder.c"
       $185 = +HEAPF32[$184>>2]; //@line 3447 "stream_encoder.c"
       $186 = $185; //@line 3447 "stream_encoder.c"
       $187 = $186 > 0.0; //@line 3447 "stream_encoder.c"
       if ($187) {
        $188 = $35; //@line 3447 "stream_encoder.c"
        $189 = (($22) + ($188<<2)|0); //@line 3447 "stream_encoder.c"
        $190 = +HEAPF32[$189>>2]; //@line 3447 "stream_encoder.c"
        $191 = $190; //@line 3447 "stream_encoder.c"
        $192 = $191 + 0.5; //@line 3447 "stream_encoder.c"
        $193 = (~~(($192))>>>0); //@line 3447 "stream_encoder.c"
        $194 = $193;
       } else {
        $194 = 0;
       }
       $36 = $194; //@line 3447 "stream_encoder.c"
       $195 = $36; //@line 3453 "stream_encoder.c"
       $196 = (($195) + 1)|0; //@line 3453 "stream_encoder.c"
       $36 = $196; //@line 3453 "stream_encoder.c"
       $197 = $36; //@line 3454 "stream_encoder.c"
       $198 = $40; //@line 3454 "stream_encoder.c"
       $199 = ($197>>>0)>=($198>>>0); //@line 3454 "stream_encoder.c"
       if ($199) {
        $200 = $40; //@line 3458 "stream_encoder.c"
        $201 = (($200) - 1)|0; //@line 3458 "stream_encoder.c"
        $36 = $201; //@line 3458 "stream_encoder.c"
       }
       $202 = $11; //@line 3462 "stream_encoder.c"
       $203 = $16; //@line 3463 "stream_encoder.c"
       $204 = $19; //@line 3464 "stream_encoder.c"
       $205 = $39; //@line 3464 "stream_encoder.c"
       $206 = ($205|0)!=(0); //@line 3464 "stream_encoder.c"
       $207 = $206 ^ 1; //@line 3464 "stream_encoder.c"
       $208 = $207&1; //@line 3464 "stream_encoder.c"
       $209 = (($204) + ($208<<2)|0); //@line 3464 "stream_encoder.c"
       $210 = HEAP32[$209>>2]|0; //@line 3464 "stream_encoder.c"
       $211 = $11; //@line 3465 "stream_encoder.c"
       $212 = ((($211)) + 4|0); //@line 3465 "stream_encoder.c"
       $213 = HEAP32[$212>>2]|0; //@line 3465 "stream_encoder.c"
       $214 = ((($213)) + 6848|0); //@line 3465 "stream_encoder.c"
       $215 = HEAP32[$214>>2]|0; //@line 3465 "stream_encoder.c"
       $216 = $11; //@line 3466 "stream_encoder.c"
       $217 = ((($216)) + 4|0); //@line 3466 "stream_encoder.c"
       $218 = HEAP32[$217>>2]|0; //@line 3466 "stream_encoder.c"
       $219 = ((($218)) + 6852|0); //@line 3466 "stream_encoder.c"
       $220 = HEAP32[$219>>2]|0; //@line 3466 "stream_encoder.c"
       $221 = $14; //@line 3467 "stream_encoder.c"
       $222 = HEAP32[$221>>2]|0; //@line 3467 "stream_encoder.c"
       $223 = $15; //@line 3468 "stream_encoder.c"
       $224 = $35; //@line 3469 "stream_encoder.c"
       $225 = $36; //@line 3470 "stream_encoder.c"
       $226 = $40; //@line 3471 "stream_encoder.c"
       $227 = $12; //@line 3472 "stream_encoder.c"
       $228 = $13; //@line 3473 "stream_encoder.c"
       $229 = $11; //@line 3474 "stream_encoder.c"
       $230 = HEAP32[$229>>2]|0; //@line 3474 "stream_encoder.c"
       $231 = ((($230)) + 572|0); //@line 3474 "stream_encoder.c"
       $232 = HEAP32[$231>>2]|0; //@line 3474 "stream_encoder.c"
       $233 = $11; //@line 3475 "stream_encoder.c"
       $234 = HEAP32[$233>>2]|0; //@line 3475 "stream_encoder.c"
       $235 = ((($234)) + 584|0); //@line 3475 "stream_encoder.c"
       $236 = HEAP32[$235>>2]|0; //@line 3475 "stream_encoder.c"
       $237 = $17; //@line 3476 "stream_encoder.c"
       $238 = $39; //@line 3476 "stream_encoder.c"
       $239 = ($238|0)!=(0); //@line 3476 "stream_encoder.c"
       $240 = $239 ^ 1; //@line 3476 "stream_encoder.c"
       $241 = $240&1; //@line 3476 "stream_encoder.c"
       $242 = (($237) + ($241<<2)|0); //@line 3476 "stream_encoder.c"
       $243 = HEAP32[$242>>2]|0; //@line 3476 "stream_encoder.c"
       $244 = $18; //@line 3477 "stream_encoder.c"
       $245 = $39; //@line 3477 "stream_encoder.c"
       $246 = ($245|0)!=(0); //@line 3477 "stream_encoder.c"
       $247 = $246 ^ 1; //@line 3477 "stream_encoder.c"
       $248 = $247&1; //@line 3477 "stream_encoder.c"
       $249 = (($244) + ($248<<2)|0); //@line 3477 "stream_encoder.c"
       $250 = HEAP32[$249>>2]|0; //@line 3477 "stream_encoder.c"
       $251 = (_evaluate_fixed_subframe_($202,$203,$210,$215,$220,$222,$223,$224,$225,$226,$227,$228,$232,$236,$243,$250)|0); //@line 3461 "stream_encoder.c"
       $37 = $251; //@line 3460 "stream_encoder.c"
       $252 = $37; //@line 3479 "stream_encoder.c"
       $253 = $38; //@line 3479 "stream_encoder.c"
       $254 = ($252>>>0)<($253>>>0); //@line 3479 "stream_encoder.c"
       if ($254) {
        $255 = $39; //@line 3480 "stream_encoder.c"
        $256 = ($255|0)!=(0); //@line 3480 "stream_encoder.c"
        $257 = $256 ^ 1; //@line 3480 "stream_encoder.c"
        $258 = $257&1; //@line 3480 "stream_encoder.c"
        $39 = $258; //@line 3480 "stream_encoder.c"
        $259 = $37; //@line 3481 "stream_encoder.c"
        $38 = $259; //@line 3481 "stream_encoder.c"
       }
      }
      $260 = $35; //@line 3443 "stream_encoder.c"
      $261 = (($260) + 1)|0; //@line 3443 "stream_encoder.c"
      $35 = $261; //@line 3443 "stream_encoder.c"
     }
    }
   } while(0);
   $262 = $11; //@line 3488 "stream_encoder.c"
   $263 = HEAP32[$262>>2]|0; //@line 3488 "stream_encoder.c"
   $264 = ((($263)) + 556|0); //@line 3488 "stream_encoder.c"
   $265 = HEAP32[$264>>2]|0; //@line 3488 "stream_encoder.c"
   $266 = ($265>>>0)>(0); //@line 3488 "stream_encoder.c"
   if ($266) {
    $267 = $11; //@line 3489 "stream_encoder.c"
    $268 = HEAP32[$267>>2]|0; //@line 3489 "stream_encoder.c"
    $269 = ((($268)) + 556|0); //@line 3489 "stream_encoder.c"
    $270 = HEAP32[$269>>2]|0; //@line 3489 "stream_encoder.c"
    $271 = $14; //@line 3489 "stream_encoder.c"
    $272 = HEAP32[$271>>2]|0; //@line 3489 "stream_encoder.c"
    $273 = ($270>>>0)>=($272>>>0); //@line 3489 "stream_encoder.c"
    if ($273) {
     $274 = $14; //@line 3490 "stream_encoder.c"
     $275 = HEAP32[$274>>2]|0; //@line 3490 "stream_encoder.c"
     $276 = (($275) - 1)|0; //@line 3490 "stream_encoder.c"
     HEAP32[$27>>2] = $276; //@line 3490 "stream_encoder.c"
    } else {
     $277 = $11; //@line 3492 "stream_encoder.c"
     $278 = HEAP32[$277>>2]|0; //@line 3492 "stream_encoder.c"
     $279 = ((($278)) + 556|0); //@line 3492 "stream_encoder.c"
     $280 = HEAP32[$279>>2]|0; //@line 3492 "stream_encoder.c"
     HEAP32[$27>>2] = $280; //@line 3492 "stream_encoder.c"
    }
    $281 = HEAP32[$27>>2]|0; //@line 3493 "stream_encoder.c"
    $282 = ($281>>>0)>(0); //@line 3493 "stream_encoder.c"
    if ($282) {
     $43 = 0; //@line 3495 "stream_encoder.c"
     while(1) {
      $283 = $43; //@line 3495 "stream_encoder.c"
      $284 = $11; //@line 3495 "stream_encoder.c"
      $285 = HEAP32[$284>>2]|0; //@line 3495 "stream_encoder.c"
      $286 = ((($285)) + 40|0); //@line 3495 "stream_encoder.c"
      $287 = HEAP32[$286>>2]|0; //@line 3495 "stream_encoder.c"
      $288 = ($283>>>0)<($287>>>0); //@line 3495 "stream_encoder.c"
      if (!($288)) {
       break L7;
      }
      $289 = $16; //@line 3496 "stream_encoder.c"
      $290 = $11; //@line 3496 "stream_encoder.c"
      $291 = ((($290)) + 4|0); //@line 3496 "stream_encoder.c"
      $292 = HEAP32[$291>>2]|0; //@line 3496 "stream_encoder.c"
      $293 = ((($292)) + 84|0); //@line 3496 "stream_encoder.c"
      $294 = $43; //@line 3496 "stream_encoder.c"
      $295 = (($293) + ($294<<2)|0); //@line 3496 "stream_encoder.c"
      $296 = HEAP32[$295>>2]|0; //@line 3496 "stream_encoder.c"
      $297 = $11; //@line 3496 "stream_encoder.c"
      $298 = ((($297)) + 4|0); //@line 3496 "stream_encoder.c"
      $299 = HEAP32[$298>>2]|0; //@line 3496 "stream_encoder.c"
      $300 = ((($299)) + 212|0); //@line 3496 "stream_encoder.c"
      $301 = HEAP32[$300>>2]|0; //@line 3496 "stream_encoder.c"
      $302 = $14; //@line 3496 "stream_encoder.c"
      $303 = HEAP32[$302>>2]|0; //@line 3496 "stream_encoder.c"
      _FLAC__lpc_window_data($289,$296,$301,$303); //@line 3496 "stream_encoder.c"
      $304 = $11; //@line 3497 "stream_encoder.c"
      $305 = ((($304)) + 4|0); //@line 3497 "stream_encoder.c"
      $306 = HEAP32[$305>>2]|0; //@line 3497 "stream_encoder.c"
      $307 = ((($306)) + 7256|0); //@line 3497 "stream_encoder.c"
      $308 = HEAP32[$307>>2]|0; //@line 3497 "stream_encoder.c"
      $309 = $11; //@line 3497 "stream_encoder.c"
      $310 = ((($309)) + 4|0); //@line 3497 "stream_encoder.c"
      $311 = HEAP32[$310>>2]|0; //@line 3497 "stream_encoder.c"
      $312 = ((($311)) + 212|0); //@line 3497 "stream_encoder.c"
      $313 = HEAP32[$312>>2]|0; //@line 3497 "stream_encoder.c"
      $314 = $14; //@line 3497 "stream_encoder.c"
      $315 = HEAP32[$314>>2]|0; //@line 3497 "stream_encoder.c"
      $316 = HEAP32[$27>>2]|0; //@line 3497 "stream_encoder.c"
      $317 = (($316) + 1)|0; //@line 3497 "stream_encoder.c"
      FUNCTION_TABLE_viiii[$308 & 15]($313,$315,$317,$24); //@line 3497 "stream_encoder.c"
      $318 = +HEAPF32[$24>>2]; //@line 3499 "stream_encoder.c"
      $319 = $318; //@line 3499 "stream_encoder.c"
      $320 = $319 != 0.0; //@line 3499 "stream_encoder.c"
      L60: do {
       if ($320) {
        $321 = $11; //@line 3500 "stream_encoder.c"
        $322 = ((($321)) + 4|0); //@line 3500 "stream_encoder.c"
        $323 = HEAP32[$322>>2]|0; //@line 3500 "stream_encoder.c"
        $324 = ((($323)) + 7652|0); //@line 3500 "stream_encoder.c"
        _FLAC__lpc_compute_lp_coefficients($24,$27,$324,$25); //@line 3500 "stream_encoder.c"
        $325 = $11; //@line 3501 "stream_encoder.c"
        $326 = HEAP32[$325>>2]|0; //@line 3501 "stream_encoder.c"
        $327 = ((($326)) + 568|0); //@line 3501 "stream_encoder.c"
        $328 = HEAP32[$327>>2]|0; //@line 3501 "stream_encoder.c"
        $329 = ($328|0)!=(0); //@line 3501 "stream_encoder.c"
        if ($329) {
         $26 = 1; //@line 3502 "stream_encoder.c"
        } else {
         $330 = HEAP32[$27>>2]|0; //@line 3508 "stream_encoder.c"
         $331 = $14; //@line 3509 "stream_encoder.c"
         $332 = HEAP32[$331>>2]|0; //@line 3509 "stream_encoder.c"
         $333 = $15; //@line 3510 "stream_encoder.c"
         $334 = $11; //@line 3511 "stream_encoder.c"
         $335 = HEAP32[$334>>2]|0; //@line 3511 "stream_encoder.c"
         $336 = ((($335)) + 564|0); //@line 3511 "stream_encoder.c"
         $337 = HEAP32[$336>>2]|0; //@line 3511 "stream_encoder.c"
         $338 = ($337|0)!=(0); //@line 3511 "stream_encoder.c"
         if ($338) {
          $344 = 5;
         } else {
          $339 = $11; //@line 3513 "stream_encoder.c"
          $340 = HEAP32[$339>>2]|0; //@line 3513 "stream_encoder.c"
          $341 = ((($340)) + 560|0); //@line 3513 "stream_encoder.c"
          $342 = HEAP32[$341>>2]|0; //@line 3513 "stream_encoder.c"
          $344 = $342;
         }
         $343 = (($333) + ($344))|0; //@line 3510 "stream_encoder.c"
         $345 = (_FLAC__lpc_compute_best_order($25,$330,$332,$343)|0); //@line 3506 "stream_encoder.c"
         $44 = $345; //@line 3505 "stream_encoder.c"
         $346 = $44; //@line 3516 "stream_encoder.c"
         HEAP32[$27>>2] = $346; //@line 3516 "stream_encoder.c"
         $26 = $346; //@line 3516 "stream_encoder.c"
        }
        $347 = HEAP32[$27>>2]|0; //@line 3518 "stream_encoder.c"
        $348 = $14; //@line 3518 "stream_encoder.c"
        $349 = HEAP32[$348>>2]|0; //@line 3518 "stream_encoder.c"
        $350 = ($347>>>0)>=($349>>>0); //@line 3518 "stream_encoder.c"
        if ($350) {
         $351 = $14; //@line 3519 "stream_encoder.c"
         $352 = HEAP32[$351>>2]|0; //@line 3519 "stream_encoder.c"
         $353 = (($352) - 1)|0; //@line 3519 "stream_encoder.c"
         HEAP32[$27>>2] = $353; //@line 3519 "stream_encoder.c"
        }
        $354 = $26; //@line 3520 "stream_encoder.c"
        $28 = $354; //@line 3520 "stream_encoder.c"
        while(1) {
         $355 = $28; //@line 3520 "stream_encoder.c"
         $356 = HEAP32[$27>>2]|0; //@line 3520 "stream_encoder.c"
         $357 = ($355>>>0)<=($356>>>0); //@line 3520 "stream_encoder.c"
         if (!($357)) {
          break L60;
         }
         $358 = $28; //@line 3521 "stream_encoder.c"
         $359 = (($358) - 1)|0; //@line 3521 "stream_encoder.c"
         $360 = (($25) + ($359<<3)|0); //@line 3521 "stream_encoder.c"
         $361 = +HEAPF64[$360>>3]; //@line 3521 "stream_encoder.c"
         $362 = $14; //@line 3521 "stream_encoder.c"
         $363 = HEAP32[$362>>2]|0; //@line 3521 "stream_encoder.c"
         $364 = $28; //@line 3521 "stream_encoder.c"
         $365 = (($363) - ($364))|0; //@line 3521 "stream_encoder.c"
         $366 = (+_FLAC__lpc_compute_expected_bits_per_residual_sample($361,$365)); //@line 3521 "stream_encoder.c"
         $23 = $366; //@line 3521 "stream_encoder.c"
         $367 = $23; //@line 3522 "stream_encoder.c"
         $368 = $15; //@line 3522 "stream_encoder.c"
         $369 = (+($368>>>0)); //@line 3522 "stream_encoder.c"
         $370 = $367 >= $369; //@line 3522 "stream_encoder.c"
         L75: do {
          if (!($370)) {
           $371 = $23; //@line 3524 "stream_encoder.c"
           $372 = $371 > 0.0; //@line 3524 "stream_encoder.c"
           if ($372) {
            $373 = $23; //@line 3524 "stream_encoder.c"
            $374 = $373 + 0.5; //@line 3524 "stream_encoder.c"
            $375 = (~~(($374))>>>0); //@line 3524 "stream_encoder.c"
            $376 = $375;
           } else {
            $376 = 0;
           }
           $36 = $376; //@line 3524 "stream_encoder.c"
           $377 = $36; //@line 3525 "stream_encoder.c"
           $378 = (($377) + 1)|0; //@line 3525 "stream_encoder.c"
           $36 = $378; //@line 3525 "stream_encoder.c"
           $379 = $36; //@line 3526 "stream_encoder.c"
           $380 = $40; //@line 3526 "stream_encoder.c"
           $381 = ($379>>>0)>=($380>>>0); //@line 3526 "stream_encoder.c"
           if ($381) {
            $382 = $40; //@line 3530 "stream_encoder.c"
            $383 = (($382) - 1)|0; //@line 3530 "stream_encoder.c"
            $36 = $383; //@line 3530 "stream_encoder.c"
           }
           $384 = $11; //@line 3532 "stream_encoder.c"
           $385 = HEAP32[$384>>2]|0; //@line 3532 "stream_encoder.c"
           $386 = ((($385)) + 564|0); //@line 3532 "stream_encoder.c"
           $387 = HEAP32[$386>>2]|0; //@line 3532 "stream_encoder.c"
           $388 = ($387|0)!=(0); //@line 3532 "stream_encoder.c"
           do {
            if ($388) {
             $29 = 5; //@line 3533 "stream_encoder.c"
             $389 = $15; //@line 3535 "stream_encoder.c"
             $390 = ($389>>>0)<=(17); //@line 3535 "stream_encoder.c"
             if (!($390)) {
              $30 = 15; //@line 3540 "stream_encoder.c"
              break;
             }
             $391 = $15; //@line 3536 "stream_encoder.c"
             $392 = (32 - ($391))|0; //@line 3536 "stream_encoder.c"
             $393 = $28; //@line 3536 "stream_encoder.c"
             $394 = (_FLAC__bitmath_ilog2_235($393)|0); //@line 3536 "stream_encoder.c"
             $395 = (($392) - ($394))|0; //@line 3536 "stream_encoder.c"
             $396 = ($395>>>0)<(15); //@line 3536 "stream_encoder.c"
             if ($396) {
              $397 = $15; //@line 3536 "stream_encoder.c"
              $398 = (32 - ($397))|0; //@line 3536 "stream_encoder.c"
              $399 = $28; //@line 3536 "stream_encoder.c"
              $400 = (_FLAC__bitmath_ilog2_235($399)|0); //@line 3536 "stream_encoder.c"
              $401 = (($398) - ($400))|0; //@line 3536 "stream_encoder.c"
              $402 = $401;
             } else {
              $402 = 15;
             }
             $30 = $402; //@line 3536 "stream_encoder.c"
             $403 = $30; //@line 3537 "stream_encoder.c"
             $404 = $29; //@line 3537 "stream_encoder.c"
             $405 = ($403>>>0)>($404>>>0); //@line 3537 "stream_encoder.c"
             $406 = $30; //@line 3537 "stream_encoder.c"
             $407 = $29; //@line 3537 "stream_encoder.c"
             $408 = $405 ? $406 : $407; //@line 3537 "stream_encoder.c"
             $30 = $408; //@line 3537 "stream_encoder.c"
            } else {
             $409 = $11; //@line 3543 "stream_encoder.c"
             $410 = HEAP32[$409>>2]|0; //@line 3543 "stream_encoder.c"
             $411 = ((($410)) + 560|0); //@line 3543 "stream_encoder.c"
             $412 = HEAP32[$411>>2]|0; //@line 3543 "stream_encoder.c"
             $30 = $412; //@line 3543 "stream_encoder.c"
             $29 = $412; //@line 3543 "stream_encoder.c"
            }
           } while(0);
           $413 = $29; //@line 3545 "stream_encoder.c"
           $31 = $413; //@line 3545 "stream_encoder.c"
           while(1) {
            $414 = $31; //@line 3545 "stream_encoder.c"
            $415 = $30; //@line 3545 "stream_encoder.c"
            $416 = ($414>>>0)<=($415>>>0); //@line 3545 "stream_encoder.c"
            if (!($416)) {
             break L75;
            }
            $417 = $11; //@line 3548 "stream_encoder.c"
            $418 = $16; //@line 3549 "stream_encoder.c"
            $419 = $19; //@line 3550 "stream_encoder.c"
            $420 = $39; //@line 3550 "stream_encoder.c"
            $421 = ($420|0)!=(0); //@line 3550 "stream_encoder.c"
            $422 = $421 ^ 1; //@line 3550 "stream_encoder.c"
            $423 = $422&1; //@line 3550 "stream_encoder.c"
            $424 = (($419) + ($423<<2)|0); //@line 3550 "stream_encoder.c"
            $425 = HEAP32[$424>>2]|0; //@line 3550 "stream_encoder.c"
            $426 = $11; //@line 3551 "stream_encoder.c"
            $427 = ((($426)) + 4|0); //@line 3551 "stream_encoder.c"
            $428 = HEAP32[$427>>2]|0; //@line 3551 "stream_encoder.c"
            $429 = ((($428)) + 6848|0); //@line 3551 "stream_encoder.c"
            $430 = HEAP32[$429>>2]|0; //@line 3551 "stream_encoder.c"
            $431 = $11; //@line 3552 "stream_encoder.c"
            $432 = ((($431)) + 4|0); //@line 3552 "stream_encoder.c"
            $433 = HEAP32[$432>>2]|0; //@line 3552 "stream_encoder.c"
            $434 = ((($433)) + 6852|0); //@line 3552 "stream_encoder.c"
            $435 = HEAP32[$434>>2]|0; //@line 3552 "stream_encoder.c"
            $436 = $11; //@line 3553 "stream_encoder.c"
            $437 = ((($436)) + 4|0); //@line 3553 "stream_encoder.c"
            $438 = HEAP32[$437>>2]|0; //@line 3553 "stream_encoder.c"
            $439 = ((($438)) + 7652|0); //@line 3553 "stream_encoder.c"
            $440 = $28; //@line 3553 "stream_encoder.c"
            $441 = (($440) - 1)|0; //@line 3553 "stream_encoder.c"
            $442 = (($439) + ($441<<7)|0); //@line 3553 "stream_encoder.c"
            $443 = $14; //@line 3554 "stream_encoder.c"
            $444 = HEAP32[$443>>2]|0; //@line 3554 "stream_encoder.c"
            $445 = $15; //@line 3555 "stream_encoder.c"
            $446 = $28; //@line 3556 "stream_encoder.c"
            $447 = $31; //@line 3557 "stream_encoder.c"
            $448 = $36; //@line 3558 "stream_encoder.c"
            $449 = $40; //@line 3559 "stream_encoder.c"
            $450 = $12; //@line 3560 "stream_encoder.c"
            $451 = $13; //@line 3561 "stream_encoder.c"
            $452 = $11; //@line 3562 "stream_encoder.c"
            $453 = HEAP32[$452>>2]|0; //@line 3562 "stream_encoder.c"
            $454 = ((($453)) + 572|0); //@line 3562 "stream_encoder.c"
            $455 = HEAP32[$454>>2]|0; //@line 3562 "stream_encoder.c"
            $456 = $11; //@line 3563 "stream_encoder.c"
            $457 = HEAP32[$456>>2]|0; //@line 3563 "stream_encoder.c"
            $458 = ((($457)) + 584|0); //@line 3563 "stream_encoder.c"
            $459 = HEAP32[$458>>2]|0; //@line 3563 "stream_encoder.c"
            $460 = $17; //@line 3564 "stream_encoder.c"
            $461 = $39; //@line 3564 "stream_encoder.c"
            $462 = ($461|0)!=(0); //@line 3564 "stream_encoder.c"
            $463 = $462 ^ 1; //@line 3564 "stream_encoder.c"
            $464 = $463&1; //@line 3564 "stream_encoder.c"
            $465 = (($460) + ($464<<2)|0); //@line 3564 "stream_encoder.c"
            $466 = HEAP32[$465>>2]|0; //@line 3564 "stream_encoder.c"
            $467 = $18; //@line 3565 "stream_encoder.c"
            $468 = $39; //@line 3565 "stream_encoder.c"
            $469 = ($468|0)!=(0); //@line 3565 "stream_encoder.c"
            $470 = $469 ^ 1; //@line 3565 "stream_encoder.c"
            $471 = $470&1; //@line 3565 "stream_encoder.c"
            $472 = (($467) + ($471<<2)|0); //@line 3565 "stream_encoder.c"
            $473 = HEAP32[$472>>2]|0; //@line 3565 "stream_encoder.c"
            $474 = (_evaluate_lpc_subframe_($417,$418,$425,$430,$435,$442,$444,$445,$446,$447,$448,$449,$450,$451,$455,$459,$466,$473)|0); //@line 3547 "stream_encoder.c"
            $37 = $474; //@line 3546 "stream_encoder.c"
            $475 = $37; //@line 3567 "stream_encoder.c"
            $476 = ($475>>>0)>(0); //@line 3567 "stream_encoder.c"
            do {
             if ($476) {
              $477 = $37; //@line 3568 "stream_encoder.c"
              $478 = $38; //@line 3568 "stream_encoder.c"
              $479 = ($477>>>0)<($478>>>0); //@line 3568 "stream_encoder.c"
              if (!($479)) {
               break;
              }
              $480 = $39; //@line 3569 "stream_encoder.c"
              $481 = ($480|0)!=(0); //@line 3569 "stream_encoder.c"
              $482 = $481 ^ 1; //@line 3569 "stream_encoder.c"
              $483 = $482&1; //@line 3569 "stream_encoder.c"
              $39 = $483; //@line 3569 "stream_encoder.c"
              $484 = $37; //@line 3570 "stream_encoder.c"
              $38 = $484; //@line 3570 "stream_encoder.c"
             }
            } while(0);
            $485 = $31; //@line 3545 "stream_encoder.c"
            $486 = (($485) + 1)|0; //@line 3545 "stream_encoder.c"
            $31 = $486; //@line 3545 "stream_encoder.c"
           }
          }
         } while(0);
         $487 = $28; //@line 3520 "stream_encoder.c"
         $488 = (($487) + 1)|0; //@line 3520 "stream_encoder.c"
         $28 = $488; //@line 3520 "stream_encoder.c"
        }
       }
      } while(0);
      $489 = $43; //@line 3495 "stream_encoder.c"
      $490 = (($489) + 1)|0; //@line 3495 "stream_encoder.c"
      $43 = $490; //@line 3495 "stream_encoder.c"
     }
    }
   }
  }
 } while(0);
 $491 = $38; //@line 3584 "stream_encoder.c"
 $492 = ($491|0)==(-1); //@line 3584 "stream_encoder.c"
 if (!($492)) {
  $503 = $39; //@line 3589 "stream_encoder.c"
  $504 = $20; //@line 3589 "stream_encoder.c"
  HEAP32[$504>>2] = $503; //@line 3589 "stream_encoder.c"
  $505 = $38; //@line 3590 "stream_encoder.c"
  $506 = $21; //@line 3590 "stream_encoder.c"
  HEAP32[$506>>2] = $505; //@line 3590 "stream_encoder.c"
  STACKTOP = sp;return 1; //@line 3592 "stream_encoder.c"
 }
 $493 = $11; //@line 3586 "stream_encoder.c"
 $494 = $16; //@line 3586 "stream_encoder.c"
 $495 = $14; //@line 3586 "stream_encoder.c"
 $496 = HEAP32[$495>>2]|0; //@line 3586 "stream_encoder.c"
 $497 = $15; //@line 3586 "stream_encoder.c"
 $498 = $17; //@line 3586 "stream_encoder.c"
 $499 = $39; //@line 3586 "stream_encoder.c"
 $500 = (($498) + ($499<<2)|0); //@line 3586 "stream_encoder.c"
 $501 = HEAP32[$500>>2]|0; //@line 3586 "stream_encoder.c"
 $502 = (_evaluate_verbatim_subframe_($493,$494,$496,$497,$501)|0); //@line 3586 "stream_encoder.c"
 $38 = $502; //@line 3586 "stream_encoder.c"
 $503 = $39; //@line 3589 "stream_encoder.c"
 $504 = $20; //@line 3589 "stream_encoder.c"
 HEAP32[$504>>2] = $503; //@line 3589 "stream_encoder.c"
 $505 = $38; //@line 3590 "stream_encoder.c"
 $506 = $21; //@line 3590 "stream_encoder.c"
 HEAP32[$506>>2] = $505; //@line 3590 "stream_encoder.c"
 STACKTOP = sp;return 1; //@line 3592 "stream_encoder.c"
}
function _add_subframe_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $9; //@line 3603 "stream_encoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 3603 "stream_encoder.c"
 switch ($12|0) {
 case 0:  {
  $13 = $9; //@line 3605 "stream_encoder.c"
  $14 = ((($13)) + 4|0); //@line 3605 "stream_encoder.c"
  $15 = $8; //@line 3605 "stream_encoder.c"
  $16 = $9; //@line 3605 "stream_encoder.c"
  $17 = ((($16)) + 288|0); //@line 3605 "stream_encoder.c"
  $18 = HEAP32[$17>>2]|0; //@line 3605 "stream_encoder.c"
  $19 = $10; //@line 3605 "stream_encoder.c"
  $20 = (_FLAC__subframe_add_constant($14,$15,$18,$19)|0); //@line 3605 "stream_encoder.c"
  $21 = ($20|0)!=(0); //@line 3605 "stream_encoder.c"
  if (!($21)) {
   $22 = $6; //@line 3606 "stream_encoder.c"
   $23 = HEAP32[$22>>2]|0; //@line 3606 "stream_encoder.c"
   HEAP32[$23>>2] = 7; //@line 3606 "stream_encoder.c"
   $5 = 0; //@line 3607 "stream_encoder.c"
   $70 = $5; //@line 3633 "stream_encoder.c"
   STACKTOP = sp;return ($70|0); //@line 3633 "stream_encoder.c"
  }
  break;
 }
 case 2:  {
  $24 = $9; //@line 3611 "stream_encoder.c"
  $25 = ((($24)) + 4|0); //@line 3611 "stream_encoder.c"
  $26 = $7; //@line 3611 "stream_encoder.c"
  $27 = $9; //@line 3611 "stream_encoder.c"
  $28 = ((($27)) + 4|0); //@line 3611 "stream_encoder.c"
  $29 = ((($28)) + 12|0); //@line 3611 "stream_encoder.c"
  $30 = HEAP32[$29>>2]|0; //@line 3611 "stream_encoder.c"
  $31 = (($26) - ($30))|0; //@line 3611 "stream_encoder.c"
  $32 = $8; //@line 3611 "stream_encoder.c"
  $33 = $9; //@line 3611 "stream_encoder.c"
  $34 = ((($33)) + 288|0); //@line 3611 "stream_encoder.c"
  $35 = HEAP32[$34>>2]|0; //@line 3611 "stream_encoder.c"
  $36 = $10; //@line 3611 "stream_encoder.c"
  $37 = (_FLAC__subframe_add_fixed($25,$31,$32,$35,$36)|0); //@line 3611 "stream_encoder.c"
  $38 = ($37|0)!=(0); //@line 3611 "stream_encoder.c"
  if (!($38)) {
   $39 = $6; //@line 3612 "stream_encoder.c"
   $40 = HEAP32[$39>>2]|0; //@line 3612 "stream_encoder.c"
   HEAP32[$40>>2] = 7; //@line 3612 "stream_encoder.c"
   $5 = 0; //@line 3613 "stream_encoder.c"
   $70 = $5; //@line 3633 "stream_encoder.c"
   STACKTOP = sp;return ($70|0); //@line 3633 "stream_encoder.c"
  }
  break;
 }
 case 3:  {
  $41 = $9; //@line 3617 "stream_encoder.c"
  $42 = ((($41)) + 4|0); //@line 3617 "stream_encoder.c"
  $43 = $7; //@line 3617 "stream_encoder.c"
  $44 = $9; //@line 3617 "stream_encoder.c"
  $45 = ((($44)) + 4|0); //@line 3617 "stream_encoder.c"
  $46 = ((($45)) + 12|0); //@line 3617 "stream_encoder.c"
  $47 = HEAP32[$46>>2]|0; //@line 3617 "stream_encoder.c"
  $48 = (($43) - ($47))|0; //@line 3617 "stream_encoder.c"
  $49 = $8; //@line 3617 "stream_encoder.c"
  $50 = $9; //@line 3617 "stream_encoder.c"
  $51 = ((($50)) + 288|0); //@line 3617 "stream_encoder.c"
  $52 = HEAP32[$51>>2]|0; //@line 3617 "stream_encoder.c"
  $53 = $10; //@line 3617 "stream_encoder.c"
  $54 = (_FLAC__subframe_add_lpc($42,$48,$49,$52,$53)|0); //@line 3617 "stream_encoder.c"
  $55 = ($54|0)!=(0); //@line 3617 "stream_encoder.c"
  if (!($55)) {
   $56 = $6; //@line 3618 "stream_encoder.c"
   $57 = HEAP32[$56>>2]|0; //@line 3618 "stream_encoder.c"
   HEAP32[$57>>2] = 7; //@line 3618 "stream_encoder.c"
   $5 = 0; //@line 3619 "stream_encoder.c"
   $70 = $5; //@line 3633 "stream_encoder.c"
   STACKTOP = sp;return ($70|0); //@line 3633 "stream_encoder.c"
  }
  break;
 }
 case 1:  {
  $58 = $9; //@line 3623 "stream_encoder.c"
  $59 = ((($58)) + 4|0); //@line 3623 "stream_encoder.c"
  $60 = $7; //@line 3623 "stream_encoder.c"
  $61 = $8; //@line 3623 "stream_encoder.c"
  $62 = $9; //@line 3623 "stream_encoder.c"
  $63 = ((($62)) + 288|0); //@line 3623 "stream_encoder.c"
  $64 = HEAP32[$63>>2]|0; //@line 3623 "stream_encoder.c"
  $65 = $10; //@line 3623 "stream_encoder.c"
  $66 = (_FLAC__subframe_add_verbatim($59,$60,$61,$64,$65)|0); //@line 3623 "stream_encoder.c"
  $67 = ($66|0)!=(0); //@line 3623 "stream_encoder.c"
  if (!($67)) {
   $68 = $6; //@line 3624 "stream_encoder.c"
   $69 = HEAP32[$68>>2]|0; //@line 3624 "stream_encoder.c"
   HEAP32[$69>>2] = 7; //@line 3624 "stream_encoder.c"
   $5 = 0; //@line 3625 "stream_encoder.c"
   $70 = $5; //@line 3633 "stream_encoder.c"
   STACKTOP = sp;return ($70|0); //@line 3633 "stream_encoder.c"
  }
  break;
 }
 default: {
 }
 }
 $5 = 1; //@line 3632 "stream_encoder.c"
 $70 = $5; //@line 3633 "stream_encoder.c"
 STACKTOP = sp;return ($70|0); //@line 3633 "stream_encoder.c"
}
function _FLAC__stream_encoder_get_bits_per_sample($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 2036 "stream_encoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 2036 "stream_encoder.c"
 $4 = ((($3)) + 28|0); //@line 2036 "stream_encoder.c"
 $5 = HEAP32[$4>>2]|0; //@line 2036 "stream_encoder.c"
 STACKTOP = sp;return ($5|0); //@line 2036 "stream_encoder.c"
}
function _evaluate_verbatim_subframe_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9; //@line 3847 "stream_encoder.c"
 HEAP32[$11>>2] = 1; //@line 3847 "stream_encoder.c"
 $12 = $6; //@line 3849 "stream_encoder.c"
 $13 = $9; //@line 3849 "stream_encoder.c"
 $14 = ((($13)) + 4|0); //@line 3849 "stream_encoder.c"
 HEAP32[$14>>2] = $12; //@line 3849 "stream_encoder.c"
 $15 = HEAP32[277]|0; //@line 3851 "stream_encoder.c"
 $16 = HEAP32[276]|0; //@line 3851 "stream_encoder.c"
 $17 = (($15) + ($16))|0; //@line 3851 "stream_encoder.c"
 $18 = HEAP32[277]|0; //@line 3851 "stream_encoder.c"
 $19 = (($17) + ($18))|0; //@line 3851 "stream_encoder.c"
 $20 = $9; //@line 3851 "stream_encoder.c"
 $21 = ((($20)) + 288|0); //@line 3851 "stream_encoder.c"
 $22 = HEAP32[$21>>2]|0; //@line 3851 "stream_encoder.c"
 $23 = (($19) + ($22))|0; //@line 3851 "stream_encoder.c"
 $24 = $7; //@line 3851 "stream_encoder.c"
 $25 = $8; //@line 3851 "stream_encoder.c"
 $26 = Math_imul($24, $25)|0; //@line 3851 "stream_encoder.c"
 $27 = (($23) + ($26))|0; //@line 3851 "stream_encoder.c"
 $10 = $27; //@line 3851 "stream_encoder.c"
 $28 = $10; //@line 3859 "stream_encoder.c"
 STACKTOP = sp;return ($28|0); //@line 3859 "stream_encoder.c"
}
function _FLAC__bitmath_ilog2_235($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 168 "./include\private/bitmath.h"
 $3 = (_FLAC__clz_uint32_236($2)|0); //@line 168 "./include\private/bitmath.h"
 $4 = $3 ^ 31; //@line 168 "./include\private/bitmath.h"
 STACKTOP = sp;return ($4|0); //@line 168 "./include\private/bitmath.h"
}
function _evaluate_constant_subframe_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9; //@line 3675 "stream_encoder.c"
 HEAP32[$11>>2] = 0; //@line 3675 "stream_encoder.c"
 $12 = $6; //@line 3676 "stream_encoder.c"
 $13 = $9; //@line 3676 "stream_encoder.c"
 $14 = ((($13)) + 4|0); //@line 3676 "stream_encoder.c"
 HEAP32[$14>>2] = $12; //@line 3676 "stream_encoder.c"
 $15 = HEAP32[277]|0; //@line 3678 "stream_encoder.c"
 $16 = HEAP32[276]|0; //@line 3678 "stream_encoder.c"
 $17 = (($15) + ($16))|0; //@line 3678 "stream_encoder.c"
 $18 = HEAP32[277]|0; //@line 3678 "stream_encoder.c"
 $19 = (($17) + ($18))|0; //@line 3678 "stream_encoder.c"
 $20 = $9; //@line 3678 "stream_encoder.c"
 $21 = ((($20)) + 288|0); //@line 3678 "stream_encoder.c"
 $22 = HEAP32[$21>>2]|0; //@line 3678 "stream_encoder.c"
 $23 = (($19) + ($22))|0; //@line 3678 "stream_encoder.c"
 $24 = $8; //@line 3678 "stream_encoder.c"
 $25 = (($23) + ($24))|0; //@line 3678 "stream_encoder.c"
 $10 = $25; //@line 3678 "stream_encoder.c"
 $26 = $10; //@line 3686 "stream_encoder.c"
 STACKTOP = sp;return ($26|0); //@line 3686 "stream_encoder.c"
}
function _evaluate_fixed_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 $28 = $12;
 $29 = $13;
 $30 = $14;
 $31 = $15;
 $36 = $21; //@line 3709 "stream_encoder.c"
 $37 = $23; //@line 3709 "stream_encoder.c"
 $38 = (($36) - ($37))|0; //@line 3709 "stream_encoder.c"
 $35 = $38; //@line 3709 "stream_encoder.c"
 $39 = $17; //@line 3711 "stream_encoder.c"
 $40 = $23; //@line 3711 "stream_encoder.c"
 $41 = (($39) + ($40<<2)|0); //@line 3711 "stream_encoder.c"
 $42 = $35; //@line 3711 "stream_encoder.c"
 $43 = $23; //@line 3711 "stream_encoder.c"
 $44 = $18; //@line 3711 "stream_encoder.c"
 _FLAC__fixed_compute_residual($41,$42,$43,$44); //@line 3711 "stream_encoder.c"
 $45 = $30; //@line 3713 "stream_encoder.c"
 HEAP32[$45>>2] = 2; //@line 3713 "stream_encoder.c"
 $46 = $30; //@line 3715 "stream_encoder.c"
 $47 = ((($46)) + 4|0); //@line 3715 "stream_encoder.c"
 HEAP32[$47>>2] = 0; //@line 3715 "stream_encoder.c"
 $48 = $31; //@line 3716 "stream_encoder.c"
 $49 = $30; //@line 3716 "stream_encoder.c"
 $50 = ((($49)) + 4|0); //@line 3716 "stream_encoder.c"
 $51 = ((($50)) + 4|0); //@line 3716 "stream_encoder.c"
 $52 = ((($51)) + 4|0); //@line 3716 "stream_encoder.c"
 HEAP32[$52>>2] = $48; //@line 3716 "stream_encoder.c"
 $53 = $18; //@line 3717 "stream_encoder.c"
 $54 = $30; //@line 3717 "stream_encoder.c"
 $55 = ((($54)) + 4|0); //@line 3717 "stream_encoder.c"
 $56 = ((($55)) + 32|0); //@line 3717 "stream_encoder.c"
 HEAP32[$56>>2] = $53; //@line 3717 "stream_encoder.c"
 $57 = $16; //@line 3721 "stream_encoder.c"
 $58 = ((($57)) + 4|0); //@line 3721 "stream_encoder.c"
 $59 = HEAP32[$58>>2]|0; //@line 3721 "stream_encoder.c"
 $60 = $18; //@line 3722 "stream_encoder.c"
 $61 = $19; //@line 3723 "stream_encoder.c"
 $62 = $20; //@line 3724 "stream_encoder.c"
 $63 = $35; //@line 3725 "stream_encoder.c"
 $64 = $23; //@line 3726 "stream_encoder.c"
 $65 = $24; //@line 3727 "stream_encoder.c"
 $66 = $25; //@line 3728 "stream_encoder.c"
 $67 = $26; //@line 3729 "stream_encoder.c"
 $68 = $27; //@line 3730 "stream_encoder.c"
 $69 = $22; //@line 3731 "stream_encoder.c"
 $70 = $28; //@line 3732 "stream_encoder.c"
 $71 = $29; //@line 3733 "stream_encoder.c"
 $72 = $30; //@line 3734 "stream_encoder.c"
 $73 = ((($72)) + 4|0); //@line 3734 "stream_encoder.c"
 $74 = (_find_best_partition_order_($59,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$70,$71,$73)|0); //@line 3720 "stream_encoder.c"
 $33 = $74; //@line 3719 "stream_encoder.c"
 $75 = $23; //@line 3737 "stream_encoder.c"
 $76 = $30; //@line 3737 "stream_encoder.c"
 $77 = ((($76)) + 4|0); //@line 3737 "stream_encoder.c"
 $78 = ((($77)) + 12|0); //@line 3737 "stream_encoder.c"
 HEAP32[$78>>2] = $75; //@line 3737 "stream_encoder.c"
 $32 = 0; //@line 3738 "stream_encoder.c"
 while(1) {
  $79 = $32; //@line 3738 "stream_encoder.c"
  $80 = $23; //@line 3738 "stream_encoder.c"
  $81 = ($79>>>0)<($80>>>0); //@line 3738 "stream_encoder.c"
  if (!($81)) {
   break;
  }
  $82 = $17; //@line 3739 "stream_encoder.c"
  $83 = $32; //@line 3739 "stream_encoder.c"
  $84 = (($82) + ($83<<2)|0); //@line 3739 "stream_encoder.c"
  $85 = HEAP32[$84>>2]|0; //@line 3739 "stream_encoder.c"
  $86 = $30; //@line 3739 "stream_encoder.c"
  $87 = ((($86)) + 4|0); //@line 3739 "stream_encoder.c"
  $88 = ((($87)) + 16|0); //@line 3739 "stream_encoder.c"
  $89 = $32; //@line 3739 "stream_encoder.c"
  $90 = (($88) + ($89<<2)|0); //@line 3739 "stream_encoder.c"
  HEAP32[$90>>2] = $85; //@line 3739 "stream_encoder.c"
  $91 = $32; //@line 3738 "stream_encoder.c"
  $92 = (($91) + 1)|0; //@line 3738 "stream_encoder.c"
  $32 = $92; //@line 3738 "stream_encoder.c"
 }
 $93 = HEAP32[277]|0; //@line 3741 "stream_encoder.c"
 $94 = HEAP32[276]|0; //@line 3741 "stream_encoder.c"
 $95 = (($93) + ($94))|0; //@line 3741 "stream_encoder.c"
 $96 = HEAP32[277]|0; //@line 3741 "stream_encoder.c"
 $97 = (($95) + ($96))|0; //@line 3741 "stream_encoder.c"
 $98 = $30; //@line 3741 "stream_encoder.c"
 $99 = ((($98)) + 288|0); //@line 3741 "stream_encoder.c"
 $100 = HEAP32[$99>>2]|0; //@line 3741 "stream_encoder.c"
 $101 = (($97) + ($100))|0; //@line 3741 "stream_encoder.c"
 $102 = $23; //@line 3741 "stream_encoder.c"
 $103 = $22; //@line 3741 "stream_encoder.c"
 $104 = Math_imul($102, $103)|0; //@line 3741 "stream_encoder.c"
 $105 = (($101) + ($104))|0; //@line 3741 "stream_encoder.c"
 $106 = $33; //@line 3741 "stream_encoder.c"
 $107 = (($105) + ($106))|0; //@line 3741 "stream_encoder.c"
 $34 = $107; //@line 3741 "stream_encoder.c"
 $108 = $34; //@line 3747 "stream_encoder.c"
 STACKTOP = sp;return ($108|0); //@line 3747 "stream_encoder.c"
}
function _evaluate_lpc_subframe_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $37 = sp + 24|0;
 $41 = sp + 8|0;
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $22 = $3;
 $23 = $4;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $14;
 $34 = $15;
 $35 = $16;
 $36 = $17;
 $44 = $25; //@line 3775 "stream_encoder.c"
 $45 = $27; //@line 3775 "stream_encoder.c"
 $46 = (($44) - ($45))|0; //@line 3775 "stream_encoder.c"
 $43 = $46; //@line 3775 "stream_encoder.c"
 $47 = $26; //@line 3778 "stream_encoder.c"
 $48 = ($47>>>0)<=(17); //@line 3778 "stream_encoder.c"
 if ($48) {
  $49 = $28; //@line 3781 "stream_encoder.c"
  $50 = $26; //@line 3781 "stream_encoder.c"
  $51 = (32 - ($50))|0; //@line 3781 "stream_encoder.c"
  $52 = $27; //@line 3781 "stream_encoder.c"
  $53 = (_FLAC__bitmath_ilog2_235($52)|0); //@line 3781 "stream_encoder.c"
  $54 = (($51) - ($53))|0; //@line 3781 "stream_encoder.c"
  $55 = ($49>>>0)<($54>>>0); //@line 3781 "stream_encoder.c"
  if ($55) {
   $56 = $28; //@line 3781 "stream_encoder.c"
   $62 = $56;
  } else {
   $57 = $26; //@line 3781 "stream_encoder.c"
   $58 = (32 - ($57))|0; //@line 3781 "stream_encoder.c"
   $59 = $27; //@line 3781 "stream_encoder.c"
   $60 = (_FLAC__bitmath_ilog2_235($59)|0); //@line 3781 "stream_encoder.c"
   $61 = (($58) - ($60))|0; //@line 3781 "stream_encoder.c"
   $62 = $61;
  }
  $28 = $62; //@line 3781 "stream_encoder.c"
 }
 $63 = $24; //@line 3784 "stream_encoder.c"
 $64 = $27; //@line 3784 "stream_encoder.c"
 $65 = $28; //@line 3784 "stream_encoder.c"
 $66 = (_FLAC__lpc_quantize_coefficients($63,$64,$65,$37,$41)|0); //@line 3784 "stream_encoder.c"
 $42 = $66; //@line 3784 "stream_encoder.c"
 $67 = $42; //@line 3785 "stream_encoder.c"
 $68 = ($67|0)!=(0); //@line 3785 "stream_encoder.c"
 if ($68) {
  $18 = 0; //@line 3786 "stream_encoder.c"
  $194 = $18; //@line 3834 "stream_encoder.c"
  STACKTOP = sp;return ($194|0); //@line 3834 "stream_encoder.c"
 }
 $69 = $26; //@line 3788 "stream_encoder.c"
 $70 = $28; //@line 3788 "stream_encoder.c"
 $71 = (($69) + ($70))|0; //@line 3788 "stream_encoder.c"
 $72 = $27; //@line 3788 "stream_encoder.c"
 $73 = (_FLAC__bitmath_ilog2_235($72)|0); //@line 3788 "stream_encoder.c"
 $74 = (($71) + ($73))|0; //@line 3788 "stream_encoder.c"
 $75 = ($74>>>0)<=(32); //@line 3788 "stream_encoder.c"
 do {
  if ($75) {
   $76 = $26; //@line 3789 "stream_encoder.c"
   $77 = ($76>>>0)<=(16); //@line 3789 "stream_encoder.c"
   $78 = $28; //@line 3789 "stream_encoder.c"
   $79 = ($78>>>0)<=(16); //@line 3789 "stream_encoder.c"
   $or$cond = $77 & $79; //@line 3789 "stream_encoder.c"
   $80 = $19;
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   if ($or$cond) {
    $83 = ((($82)) + 7268|0); //@line 3790 "stream_encoder.c"
    $84 = HEAP32[$83>>2]|0; //@line 3790 "stream_encoder.c"
    $85 = $20; //@line 3790 "stream_encoder.c"
    $86 = $27; //@line 3790 "stream_encoder.c"
    $87 = (($85) + ($86<<2)|0); //@line 3790 "stream_encoder.c"
    $88 = $43; //@line 3790 "stream_encoder.c"
    $89 = $27; //@line 3790 "stream_encoder.c"
    $90 = HEAP32[$41>>2]|0; //@line 3790 "stream_encoder.c"
    $91 = $21; //@line 3790 "stream_encoder.c"
    FUNCTION_TABLE_viiiiii[$84 & 31]($87,$88,$37,$89,$90,$91); //@line 3790 "stream_encoder.c"
    break;
   } else {
    $92 = ((($82)) + 7260|0); //@line 3792 "stream_encoder.c"
    $93 = HEAP32[$92>>2]|0; //@line 3792 "stream_encoder.c"
    $94 = $20; //@line 3792 "stream_encoder.c"
    $95 = $27; //@line 3792 "stream_encoder.c"
    $96 = (($94) + ($95<<2)|0); //@line 3792 "stream_encoder.c"
    $97 = $43; //@line 3792 "stream_encoder.c"
    $98 = $27; //@line 3792 "stream_encoder.c"
    $99 = HEAP32[$41>>2]|0; //@line 3792 "stream_encoder.c"
    $100 = $21; //@line 3792 "stream_encoder.c"
    FUNCTION_TABLE_viiiiii[$93 & 31]($96,$97,$37,$98,$99,$100); //@line 3792 "stream_encoder.c"
    break;
   }
  } else {
   $101 = $19; //@line 3794 "stream_encoder.c"
   $102 = ((($101)) + 4|0); //@line 3794 "stream_encoder.c"
   $103 = HEAP32[$102>>2]|0; //@line 3794 "stream_encoder.c"
   $104 = ((($103)) + 7264|0); //@line 3794 "stream_encoder.c"
   $105 = HEAP32[$104>>2]|0; //@line 3794 "stream_encoder.c"
   $106 = $20; //@line 3794 "stream_encoder.c"
   $107 = $27; //@line 3794 "stream_encoder.c"
   $108 = (($106) + ($107<<2)|0); //@line 3794 "stream_encoder.c"
   $109 = $43; //@line 3794 "stream_encoder.c"
   $110 = $27; //@line 3794 "stream_encoder.c"
   $111 = HEAP32[$41>>2]|0; //@line 3794 "stream_encoder.c"
   $112 = $21; //@line 3794 "stream_encoder.c"
   FUNCTION_TABLE_viiiiii[$105 & 31]($108,$109,$37,$110,$111,$112); //@line 3794 "stream_encoder.c"
  }
 } while(0);
 $113 = $35; //@line 3796 "stream_encoder.c"
 HEAP32[$113>>2] = 3; //@line 3796 "stream_encoder.c"
 $114 = $35; //@line 3798 "stream_encoder.c"
 $115 = ((($114)) + 4|0); //@line 3798 "stream_encoder.c"
 HEAP32[$115>>2] = 0; //@line 3798 "stream_encoder.c"
 $116 = $36; //@line 3799 "stream_encoder.c"
 $117 = $35; //@line 3799 "stream_encoder.c"
 $118 = ((($117)) + 4|0); //@line 3799 "stream_encoder.c"
 $119 = ((($118)) + 4|0); //@line 3799 "stream_encoder.c"
 $120 = ((($119)) + 4|0); //@line 3799 "stream_encoder.c"
 HEAP32[$120>>2] = $116; //@line 3799 "stream_encoder.c"
 $121 = $21; //@line 3800 "stream_encoder.c"
 $122 = $35; //@line 3800 "stream_encoder.c"
 $123 = ((($122)) + 4|0); //@line 3800 "stream_encoder.c"
 $124 = ((($123)) + 280|0); //@line 3800 "stream_encoder.c"
 HEAP32[$124>>2] = $121; //@line 3800 "stream_encoder.c"
 $125 = $19; //@line 3804 "stream_encoder.c"
 $126 = ((($125)) + 4|0); //@line 3804 "stream_encoder.c"
 $127 = HEAP32[$126>>2]|0; //@line 3804 "stream_encoder.c"
 $128 = $21; //@line 3805 "stream_encoder.c"
 $129 = $22; //@line 3806 "stream_encoder.c"
 $130 = $23; //@line 3807 "stream_encoder.c"
 $131 = $43; //@line 3808 "stream_encoder.c"
 $132 = $27; //@line 3809 "stream_encoder.c"
 $133 = $29; //@line 3810 "stream_encoder.c"
 $134 = $30; //@line 3811 "stream_encoder.c"
 $135 = $31; //@line 3812 "stream_encoder.c"
 $136 = $32; //@line 3813 "stream_encoder.c"
 $137 = $26; //@line 3814 "stream_encoder.c"
 $138 = $33; //@line 3815 "stream_encoder.c"
 $139 = $34; //@line 3816 "stream_encoder.c"
 $140 = $35; //@line 3817 "stream_encoder.c"
 $141 = ((($140)) + 4|0); //@line 3817 "stream_encoder.c"
 $142 = (_find_best_partition_order_($127,$128,$129,$130,$131,$132,$133,$134,$135,$136,$137,$138,$139,$141)|0); //@line 3803 "stream_encoder.c"
 $39 = $142; //@line 3802 "stream_encoder.c"
 $143 = $27; //@line 3820 "stream_encoder.c"
 $144 = $35; //@line 3820 "stream_encoder.c"
 $145 = ((($144)) + 4|0); //@line 3820 "stream_encoder.c"
 $146 = ((($145)) + 12|0); //@line 3820 "stream_encoder.c"
 HEAP32[$146>>2] = $143; //@line 3820 "stream_encoder.c"
 $147 = $28; //@line 3821 "stream_encoder.c"
 $148 = $35; //@line 3821 "stream_encoder.c"
 $149 = ((($148)) + 4|0); //@line 3821 "stream_encoder.c"
 $150 = ((($149)) + 16|0); //@line 3821 "stream_encoder.c"
 HEAP32[$150>>2] = $147; //@line 3821 "stream_encoder.c"
 $151 = HEAP32[$41>>2]|0; //@line 3822 "stream_encoder.c"
 $152 = $35; //@line 3822 "stream_encoder.c"
 $153 = ((($152)) + 4|0); //@line 3822 "stream_encoder.c"
 $154 = ((($153)) + 20|0); //@line 3822 "stream_encoder.c"
 HEAP32[$154>>2] = $151; //@line 3822 "stream_encoder.c"
 $155 = $35; //@line 3823 "stream_encoder.c"
 $156 = ((($155)) + 4|0); //@line 3823 "stream_encoder.c"
 $157 = ((($156)) + 24|0); //@line 3823 "stream_encoder.c"
 dest=$157; src=$37; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0)); //@line 3823 "stream_encoder.c"
 $38 = 0; //@line 3824 "stream_encoder.c"
 while(1) {
  $158 = $38; //@line 3824 "stream_encoder.c"
  $159 = $27; //@line 3824 "stream_encoder.c"
  $160 = ($158>>>0)<($159>>>0); //@line 3824 "stream_encoder.c"
  if (!($160)) {
   break;
  }
  $161 = $20; //@line 3825 "stream_encoder.c"
  $162 = $38; //@line 3825 "stream_encoder.c"
  $163 = (($161) + ($162<<2)|0); //@line 3825 "stream_encoder.c"
  $164 = HEAP32[$163>>2]|0; //@line 3825 "stream_encoder.c"
  $165 = $35; //@line 3825 "stream_encoder.c"
  $166 = ((($165)) + 4|0); //@line 3825 "stream_encoder.c"
  $167 = ((($166)) + 152|0); //@line 3825 "stream_encoder.c"
  $168 = $38; //@line 3825 "stream_encoder.c"
  $169 = (($167) + ($168<<2)|0); //@line 3825 "stream_encoder.c"
  HEAP32[$169>>2] = $164; //@line 3825 "stream_encoder.c"
  $170 = $38; //@line 3824 "stream_encoder.c"
  $171 = (($170) + 1)|0; //@line 3824 "stream_encoder.c"
  $38 = $171; //@line 3824 "stream_encoder.c"
 }
 $172 = HEAP32[277]|0; //@line 3827 "stream_encoder.c"
 $173 = HEAP32[276]|0; //@line 3827 "stream_encoder.c"
 $174 = (($172) + ($173))|0; //@line 3827 "stream_encoder.c"
 $175 = HEAP32[277]|0; //@line 3827 "stream_encoder.c"
 $176 = (($174) + ($175))|0; //@line 3827 "stream_encoder.c"
 $177 = $35; //@line 3827 "stream_encoder.c"
 $178 = ((($177)) + 288|0); //@line 3827 "stream_encoder.c"
 $179 = HEAP32[$178>>2]|0; //@line 3827 "stream_encoder.c"
 $180 = (($176) + ($179))|0; //@line 3827 "stream_encoder.c"
 $181 = HEAP32[274]|0; //@line 3827 "stream_encoder.c"
 $182 = (($180) + ($181))|0; //@line 3827 "stream_encoder.c"
 $183 = HEAP32[275]|0; //@line 3827 "stream_encoder.c"
 $184 = (($182) + ($183))|0; //@line 3827 "stream_encoder.c"
 $185 = $27; //@line 3827 "stream_encoder.c"
 $186 = $28; //@line 3827 "stream_encoder.c"
 $187 = $26; //@line 3827 "stream_encoder.c"
 $188 = (($186) + ($187))|0; //@line 3827 "stream_encoder.c"
 $189 = Math_imul($185, $188)|0; //@line 3827 "stream_encoder.c"
 $190 = (($184) + ($189))|0; //@line 3827 "stream_encoder.c"
 $191 = $39; //@line 3827 "stream_encoder.c"
 $192 = (($190) + ($191))|0; //@line 3827 "stream_encoder.c"
 $40 = $192; //@line 3827 "stream_encoder.c"
 $193 = $40; //@line 3833 "stream_encoder.c"
 $18 = $193; //@line 3833 "stream_encoder.c"
 $194 = $18; //@line 3834 "stream_encoder.c"
 STACKTOP = sp;return ($194|0); //@line 3834 "stream_encoder.c"
}
function _find_best_partition_order_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $28 = sp + 32|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $29 = 0; //@line 3879 "stream_encoder.c"
 $30 = 0; //@line 3880 "stream_encoder.c"
 $31 = 0; //@line 3881 "stream_encoder.c"
 $37 = $18; //@line 3882 "stream_encoder.c"
 $38 = $19; //@line 3882 "stream_encoder.c"
 $39 = (($37) + ($38))|0; //@line 3882 "stream_encoder.c"
 $32 = $39; //@line 3882 "stream_encoder.c"
 $40 = $23; //@line 3884 "stream_encoder.c"
 $41 = $32; //@line 3884 "stream_encoder.c"
 $42 = $19; //@line 3884 "stream_encoder.c"
 $43 = (_FLAC__format_get_max_rice_partition_order_from_blocksize_limited_max_and_predictor_order($40,$41,$42)|0); //@line 3884 "stream_encoder.c"
 $23 = $43; //@line 3884 "stream_encoder.c"
 $44 = $22; //@line 3885 "stream_encoder.c"
 $45 = $23; //@line 3885 "stream_encoder.c"
 $46 = ($44>>>0)<($45>>>0); //@line 3885 "stream_encoder.c"
 $47 = $22; //@line 3885 "stream_encoder.c"
 $48 = $23; //@line 3885 "stream_encoder.c"
 $49 = $46 ? $47 : $48; //@line 3885 "stream_encoder.c"
 $22 = $49; //@line 3885 "stream_encoder.c"
 $50 = $14; //@line 3887 "stream_encoder.c"
 $51 = ((($50)) + 7244|0); //@line 3887 "stream_encoder.c"
 $52 = HEAP32[$51>>2]|0; //@line 3887 "stream_encoder.c"
 $53 = $15; //@line 3887 "stream_encoder.c"
 $54 = $16; //@line 3887 "stream_encoder.c"
 $55 = $18; //@line 3887 "stream_encoder.c"
 $56 = $19; //@line 3887 "stream_encoder.c"
 $57 = $22; //@line 3887 "stream_encoder.c"
 $58 = $23; //@line 3887 "stream_encoder.c"
 $59 = $24; //@line 3887 "stream_encoder.c"
 FUNCTION_TABLE_viiiiiii[$52 & 15]($53,$54,$55,$56,$57,$58,$59); //@line 3887 "stream_encoder.c"
 $60 = $25; //@line 3889 "stream_encoder.c"
 $61 = ($60|0)!=(0); //@line 3889 "stream_encoder.c"
 if ($61) {
  $62 = $15; //@line 3890 "stream_encoder.c"
  $63 = $17; //@line 3890 "stream_encoder.c"
  $64 = $18; //@line 3890 "stream_encoder.c"
  $65 = $19; //@line 3890 "stream_encoder.c"
  $66 = $22; //@line 3890 "stream_encoder.c"
  $67 = $23; //@line 3890 "stream_encoder.c"
  _precompute_partition_info_escapes_($62,$63,$64,$65,$66,$67); //@line 3890 "stream_encoder.c"
 }
 $68 = $23; //@line 3896 "stream_encoder.c"
 $33 = $68; //@line 3896 "stream_encoder.c"
 $34 = 0; //@line 3896 "stream_encoder.c"
 while(1) {
  $69 = $33; //@line 3896 "stream_encoder.c"
  $70 = $22; //@line 3896 "stream_encoder.c"
  $71 = ($69|0)>=($70|0); //@line 3896 "stream_encoder.c"
  if (!($71)) {
   break;
  }
  $72 = $16; //@line 3902 "stream_encoder.c"
  $73 = $34; //@line 3902 "stream_encoder.c"
  $74 = (($72) + ($73<<3)|0); //@line 3902 "stream_encoder.c"
  $75 = $17; //@line 3903 "stream_encoder.c"
  $76 = $34; //@line 3903 "stream_encoder.c"
  $77 = (($75) + ($76<<2)|0); //@line 3903 "stream_encoder.c"
  $78 = $18; //@line 3904 "stream_encoder.c"
  $79 = $19; //@line 3905 "stream_encoder.c"
  $80 = $20; //@line 3906 "stream_encoder.c"
  $81 = $21; //@line 3907 "stream_encoder.c"
  $82 = $26; //@line 3908 "stream_encoder.c"
  $83 = $33; //@line 3909 "stream_encoder.c"
  $84 = $25; //@line 3910 "stream_encoder.c"
  $85 = $14; //@line 3911 "stream_encoder.c"
  $86 = ((($85)) + 11748|0); //@line 3911 "stream_encoder.c"
  $87 = $30; //@line 3911 "stream_encoder.c"
  $88 = ($87|0)!=(0); //@line 3911 "stream_encoder.c"
  $89 = $88 ^ 1; //@line 3911 "stream_encoder.c"
  $90 = $89&1; //@line 3911 "stream_encoder.c"
  $91 = (($86) + (($90*12)|0)|0); //@line 3911 "stream_encoder.c"
  $92 = (_set_partitioned_rice_($74,$77,$78,$79,$80,$81,$82,$83,$84,$91,$28)|0); //@line 3898 "stream_encoder.c"
  $93 = ($92|0)!=(0); //@line 3898 "stream_encoder.c"
  if (!($93)) {
   break;
  }
  $94 = $33; //@line 3919 "stream_encoder.c"
  $95 = 1 << $94; //@line 3919 "stream_encoder.c"
  $96 = $34; //@line 3919 "stream_encoder.c"
  $97 = (($96) + ($95))|0; //@line 3919 "stream_encoder.c"
  $34 = $97; //@line 3919 "stream_encoder.c"
  $98 = $29; //@line 3920 "stream_encoder.c"
  $99 = ($98|0)==(0); //@line 3920 "stream_encoder.c"
  if ($99) {
   label = 8;
  } else {
   $100 = HEAP32[$28>>2]|0; //@line 3920 "stream_encoder.c"
   $101 = $29; //@line 3920 "stream_encoder.c"
   $102 = ($100>>>0)<($101>>>0); //@line 3920 "stream_encoder.c"
   if ($102) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $103 = HEAP32[$28>>2]|0; //@line 3921 "stream_encoder.c"
   $29 = $103; //@line 3921 "stream_encoder.c"
   $104 = $30; //@line 3922 "stream_encoder.c"
   $105 = ($104|0)!=(0); //@line 3922 "stream_encoder.c"
   $106 = $105 ^ 1; //@line 3922 "stream_encoder.c"
   $107 = $106&1; //@line 3922 "stream_encoder.c"
   $30 = $107; //@line 3922 "stream_encoder.c"
   $108 = $33; //@line 3923 "stream_encoder.c"
   $31 = $108; //@line 3923 "stream_encoder.c"
  }
  $109 = $33; //@line 3896 "stream_encoder.c"
  $110 = (($109) + -1)|0; //@line 3896 "stream_encoder.c"
  $33 = $110; //@line 3896 "stream_encoder.c"
 }
 $111 = $31; //@line 3928 "stream_encoder.c"
 $112 = $27; //@line 3928 "stream_encoder.c"
 $113 = ((($112)) + 4|0); //@line 3928 "stream_encoder.c"
 HEAP32[$113>>2] = $111; //@line 3928 "stream_encoder.c"
 $114 = $27; //@line 3935 "stream_encoder.c"
 $115 = ((($114)) + 4|0); //@line 3935 "stream_encoder.c"
 $116 = ((($115)) + 4|0); //@line 3935 "stream_encoder.c"
 $117 = HEAP32[$116>>2]|0; //@line 3935 "stream_encoder.c"
 $35 = $117; //@line 3935 "stream_encoder.c"
 $118 = $35; //@line 3939 "stream_encoder.c"
 $119 = $31; //@line 3939 "stream_encoder.c"
 $120 = (6)>($119>>>0); //@line 3939 "stream_encoder.c"
 $121 = $31; //@line 3939 "stream_encoder.c"
 $122 = $120 ? 6 : $121; //@line 3939 "stream_encoder.c"
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($118,$122)|0); //@line 3939 "stream_encoder.c"
 $123 = $35; //@line 3940 "stream_encoder.c"
 $124 = HEAP32[$123>>2]|0; //@line 3940 "stream_encoder.c"
 $125 = $14; //@line 3940 "stream_encoder.c"
 $126 = ((($125)) + 11748|0); //@line 3940 "stream_encoder.c"
 $127 = $30; //@line 3940 "stream_encoder.c"
 $128 = (($126) + (($127*12)|0)|0); //@line 3940 "stream_encoder.c"
 $129 = HEAP32[$128>>2]|0; //@line 3940 "stream_encoder.c"
 $130 = $31; //@line 3940 "stream_encoder.c"
 $131 = 1 << $130; //@line 3940 "stream_encoder.c"
 $132 = $131<<2; //@line 3940 "stream_encoder.c"
 _memcpy(($124|0),($129|0),($132|0))|0; //@line 3940 "stream_encoder.c"
 $133 = $25; //@line 3941 "stream_encoder.c"
 $134 = ($133|0)!=(0); //@line 3941 "stream_encoder.c"
 if ($134) {
  $135 = $35; //@line 3942 "stream_encoder.c"
  $136 = ((($135)) + 4|0); //@line 3942 "stream_encoder.c"
  $137 = HEAP32[$136>>2]|0; //@line 3942 "stream_encoder.c"
  $138 = $14; //@line 3942 "stream_encoder.c"
  $139 = ((($138)) + 11748|0); //@line 3942 "stream_encoder.c"
  $140 = $30; //@line 3942 "stream_encoder.c"
  $141 = (($139) + (($140*12)|0)|0); //@line 3942 "stream_encoder.c"
  $142 = ((($141)) + 4|0); //@line 3942 "stream_encoder.c"
  $143 = HEAP32[$142>>2]|0; //@line 3942 "stream_encoder.c"
  $144 = $31; //@line 3942 "stream_encoder.c"
  $145 = 1 << $144; //@line 3942 "stream_encoder.c"
  $146 = $145<<2; //@line 3942 "stream_encoder.c"
  _memcpy(($137|0),($143|0),($146|0))|0; //@line 3942 "stream_encoder.c"
 }
 $36 = 0; //@line 3948 "stream_encoder.c"
 while(1) {
  $147 = $36; //@line 3948 "stream_encoder.c"
  $148 = $31; //@line 3948 "stream_encoder.c"
  $149 = 1 << $148; //@line 3948 "stream_encoder.c"
  $150 = ($147>>>0)<($149>>>0); //@line 3948 "stream_encoder.c"
  if (!($150)) {
   label = 17;
   break;
  }
  $151 = $35; //@line 3949 "stream_encoder.c"
  $152 = HEAP32[$151>>2]|0; //@line 3949 "stream_encoder.c"
  $153 = $36; //@line 3949 "stream_encoder.c"
  $154 = (($152) + ($153<<2)|0); //@line 3949 "stream_encoder.c"
  $155 = HEAP32[$154>>2]|0; //@line 3949 "stream_encoder.c"
  $156 = HEAP32[272]|0; //@line 3949 "stream_encoder.c"
  $157 = ($155>>>0)>=($156>>>0); //@line 3949 "stream_encoder.c"
  if ($157) {
   break;
  }
  $159 = $36; //@line 3948 "stream_encoder.c"
  $160 = (($159) + 1)|0; //@line 3948 "stream_encoder.c"
  $36 = $160; //@line 3948 "stream_encoder.c"
 }
 if ((label|0) == 17) {
  $161 = $29; //@line 3956 "stream_encoder.c"
  STACKTOP = sp;return ($161|0); //@line 3956 "stream_encoder.c"
 }
 $158 = $27; //@line 3950 "stream_encoder.c"
 HEAP32[$158>>2] = 1; //@line 3950 "stream_encoder.c"
 $161 = $29; //@line 3956 "stream_encoder.c"
 STACKTOP = sp;return ($161|0); //@line 3956 "stream_encoder.c"
}
function _precompute_partition_info_escapes_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = 0; //@line 4026 "stream_encoder.c"
 $27 = $8; //@line 4027 "stream_encoder.c"
 $28 = $9; //@line 4027 "stream_encoder.c"
 $29 = (($27) + ($28))|0; //@line 4027 "stream_encoder.c"
 $15 = $29; //@line 4027 "stream_encoder.c"
 $30 = $11; //@line 4030 "stream_encoder.c"
 $12 = $30; //@line 4030 "stream_encoder.c"
 $31 = $12; //@line 4030 "stream_encoder.c"
 $32 = ($31|0)>=(0); //@line 4030 "stream_encoder.c"
 if ($32) {
  $33 = $12; //@line 4034 "stream_encoder.c"
  $34 = 1 << $33; //@line 4034 "stream_encoder.c"
  $22 = $34; //@line 4034 "stream_encoder.c"
  $35 = $15; //@line 4035 "stream_encoder.c"
  $36 = $12; //@line 4035 "stream_encoder.c"
  $37 = $35 >>> $36; //@line 4035 "stream_encoder.c"
  $23 = $37; //@line 4035 "stream_encoder.c"
  $21 = 0; //@line 4039 "stream_encoder.c"
  $18 = 0; //@line 4039 "stream_encoder.c"
  while(1) {
   $38 = $18; //@line 4039 "stream_encoder.c"
   $39 = $22; //@line 4039 "stream_encoder.c"
   $40 = ($38>>>0)<($39>>>0); //@line 4039 "stream_encoder.c"
   if (!($40)) {
    break;
   }
   $41 = $23; //@line 4040 "stream_encoder.c"
   $20 = $41; //@line 4040 "stream_encoder.c"
   $42 = $18; //@line 4041 "stream_encoder.c"
   $43 = ($42|0)==(0); //@line 4041 "stream_encoder.c"
   if ($43) {
    $44 = $9; //@line 4042 "stream_encoder.c"
    $45 = $20; //@line 4042 "stream_encoder.c"
    $46 = (($45) - ($44))|0; //@line 4042 "stream_encoder.c"
    $20 = $46; //@line 4042 "stream_encoder.c"
   }
   $17 = 0; //@line 4043 "stream_encoder.c"
   $19 = 0; //@line 4044 "stream_encoder.c"
   while(1) {
    $47 = $19; //@line 4044 "stream_encoder.c"
    $48 = $20; //@line 4044 "stream_encoder.c"
    $49 = ($47>>>0)<($48>>>0); //@line 4044 "stream_encoder.c"
    if (!($49)) {
     break;
    }
    $50 = $6; //@line 4045 "stream_encoder.c"
    $51 = $21; //@line 4045 "stream_encoder.c"
    $52 = (($51) + 1)|0; //@line 4045 "stream_encoder.c"
    $21 = $52; //@line 4045 "stream_encoder.c"
    $53 = (($50) + ($51<<2)|0); //@line 4045 "stream_encoder.c"
    $54 = HEAP32[$53>>2]|0; //@line 4045 "stream_encoder.c"
    $16 = $54; //@line 4045 "stream_encoder.c"
    $55 = $16; //@line 4047 "stream_encoder.c"
    $56 = ($55|0)<(0); //@line 4047 "stream_encoder.c"
    $57 = $16;
    if ($56) {
     $58 = $57 ^ -1; //@line 4048 "stream_encoder.c"
     $59 = $17; //@line 4048 "stream_encoder.c"
     $60 = $59 | $58; //@line 4048 "stream_encoder.c"
     $17 = $60; //@line 4048 "stream_encoder.c"
    } else {
     $61 = $17; //@line 4050 "stream_encoder.c"
     $62 = $61 | $57; //@line 4050 "stream_encoder.c"
     $17 = $62; //@line 4050 "stream_encoder.c"
    }
    $63 = $19; //@line 4044 "stream_encoder.c"
    $64 = (($63) + 1)|0; //@line 4044 "stream_encoder.c"
    $19 = $64; //@line 4044 "stream_encoder.c"
   }
   $65 = $17; //@line 4053 "stream_encoder.c"
   $66 = ($65|0)!=(0); //@line 4053 "stream_encoder.c"
   if ($66) {
    $67 = $17; //@line 4053 "stream_encoder.c"
    $68 = (_FLAC__bitmath_ilog2_235($67)|0); //@line 4053 "stream_encoder.c"
    $69 = (($68) + 2)|0; //@line 4053 "stream_encoder.c"
    $73 = $69;
   } else {
    $73 = 1;
   }
   $70 = $7; //@line 4053 "stream_encoder.c"
   $71 = $18; //@line 4053 "stream_encoder.c"
   $72 = (($70) + ($71<<2)|0); //@line 4053 "stream_encoder.c"
   HEAP32[$72>>2] = $73; //@line 4053 "stream_encoder.c"
   $74 = $18; //@line 4039 "stream_encoder.c"
   $75 = (($74) + 1)|0; //@line 4039 "stream_encoder.c"
   $18 = $75; //@line 4039 "stream_encoder.c"
  }
  $76 = $22; //@line 4055 "stream_encoder.c"
  $14 = $76; //@line 4055 "stream_encoder.c"
 }
 $13 = 0; //@line 4060 "stream_encoder.c"
 $77 = $12; //@line 4060 "stream_encoder.c"
 $78 = (($77) + -1)|0; //@line 4060 "stream_encoder.c"
 $12 = $78; //@line 4060 "stream_encoder.c"
 while(1) {
  $79 = $12; //@line 4060 "stream_encoder.c"
  $80 = $10; //@line 4060 "stream_encoder.c"
  $81 = ($79|0)>=($80|0); //@line 4060 "stream_encoder.c"
  if (!($81)) {
   break;
  }
  $82 = $12; //@line 4063 "stream_encoder.c"
  $83 = 1 << $82; //@line 4063 "stream_encoder.c"
  $26 = $83; //@line 4063 "stream_encoder.c"
  $25 = 0; //@line 4064 "stream_encoder.c"
  while(1) {
   $84 = $25; //@line 4064 "stream_encoder.c"
   $85 = $26; //@line 4064 "stream_encoder.c"
   $86 = ($84>>>0)<($85>>>0); //@line 4064 "stream_encoder.c"
   if (!($86)) {
    break;
   }
   $87 = $7; //@line 4065 "stream_encoder.c"
   $88 = $13; //@line 4065 "stream_encoder.c"
   $89 = (($87) + ($88<<2)|0); //@line 4065 "stream_encoder.c"
   $90 = HEAP32[$89>>2]|0; //@line 4065 "stream_encoder.c"
   $24 = $90; //@line 4065 "stream_encoder.c"
   $91 = $13; //@line 4066 "stream_encoder.c"
   $92 = (($91) + 1)|0; //@line 4066 "stream_encoder.c"
   $13 = $92; //@line 4066 "stream_encoder.c"
   $93 = $24; //@line 4067 "stream_encoder.c"
   $94 = $7; //@line 4067 "stream_encoder.c"
   $95 = $13; //@line 4067 "stream_encoder.c"
   $96 = (($94) + ($95<<2)|0); //@line 4067 "stream_encoder.c"
   $97 = HEAP32[$96>>2]|0; //@line 4067 "stream_encoder.c"
   $98 = ($93>>>0)>($97>>>0); //@line 4067 "stream_encoder.c"
   if ($98) {
    $99 = $24; //@line 4067 "stream_encoder.c"
    $107 = $99;
   } else {
    $100 = $7; //@line 4067 "stream_encoder.c"
    $101 = $13; //@line 4067 "stream_encoder.c"
    $102 = (($100) + ($101<<2)|0); //@line 4067 "stream_encoder.c"
    $103 = HEAP32[$102>>2]|0; //@line 4067 "stream_encoder.c"
    $107 = $103;
   }
   $104 = $7; //@line 4067 "stream_encoder.c"
   $105 = $14; //@line 4067 "stream_encoder.c"
   $106 = (($104) + ($105<<2)|0); //@line 4067 "stream_encoder.c"
   HEAP32[$106>>2] = $107; //@line 4067 "stream_encoder.c"
   $108 = $13; //@line 4068 "stream_encoder.c"
   $109 = (($108) + 1)|0; //@line 4068 "stream_encoder.c"
   $13 = $109; //@line 4068 "stream_encoder.c"
   $110 = $14; //@line 4069 "stream_encoder.c"
   $111 = (($110) + 1)|0; //@line 4069 "stream_encoder.c"
   $14 = $111; //@line 4069 "stream_encoder.c"
   $112 = $25; //@line 4064 "stream_encoder.c"
   $113 = (($112) + 1)|0; //@line 4064 "stream_encoder.c"
   $25 = $113; //@line 4064 "stream_encoder.c"
  }
  $114 = $12; //@line 4060 "stream_encoder.c"
  $115 = (($114) + -1)|0; //@line 4060 "stream_encoder.c"
  $12 = $115; //@line 4060 "stream_encoder.c"
 }
 STACKTOP = sp;return; //@line 4072 "stream_encoder.c"
}
function _set_partitioned_rice_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $33 = sp + 8|0;
 $34 = sp;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $26 = 0; //@line 4133 "stream_encoder.c"
 $38 = HEAP32[278]|0; //@line 4134 "stream_encoder.c"
 $39 = HEAP32[274]|0; //@line 4134 "stream_encoder.c"
 $40 = (($38) + ($39))|0; //@line 4134 "stream_encoder.c"
 $27 = $40; //@line 4134 "stream_encoder.c"
 $41 = $21; //@line 4145 "stream_encoder.c"
 $42 = $19; //@line 4145 "stream_encoder.c"
 $43 = (6)>($42>>>0); //@line 4145 "stream_encoder.c"
 $44 = $19; //@line 4145 "stream_encoder.c"
 $45 = $43 ? 6 : $44; //@line 4145 "stream_encoder.c"
 (_FLAC__format_entropy_coding_method_partitioned_rice_contents_ensure_size($41,$45)|0); //@line 4145 "stream_encoder.c"
 $46 = $21; //@line 4146 "stream_encoder.c"
 $47 = HEAP32[$46>>2]|0; //@line 4146 "stream_encoder.c"
 $28 = $47; //@line 4146 "stream_encoder.c"
 $48 = $21; //@line 4147 "stream_encoder.c"
 $49 = ((($48)) + 4|0); //@line 4147 "stream_encoder.c"
 $50 = HEAP32[$49>>2]|0; //@line 4147 "stream_encoder.c"
 $29 = $50; //@line 4147 "stream_encoder.c"
 $51 = $19; //@line 4149 "stream_encoder.c"
 $52 = ($51|0)==(0); //@line 4149 "stream_encoder.c"
 L1: do {
  if ($52) {
   $25 = -1; //@line 4150 "stream_encoder.c"
   $53 = $16; //@line 4170 "stream_encoder.c"
   $23 = $53; //@line 4170 "stream_encoder.c"
   $54 = $23; //@line 4175 "stream_encoder.c"
   $55 = $14; //@line 4175 "stream_encoder.c"
   $56 = $12; //@line 4175 "stream_encoder.c"
   $57 = $56; //@line 4175 "stream_encoder.c"
   $58 = $57; //@line 4175 "stream_encoder.c"
   $59 = HEAP32[$58>>2]|0; //@line 4175 "stream_encoder.c"
   $60 = (($57) + 4)|0; //@line 4175 "stream_encoder.c"
   $61 = $60; //@line 4175 "stream_encoder.c"
   $62 = HEAP32[$61>>2]|0; //@line 4175 "stream_encoder.c"
   $63 = (_count_rice_bits_in_partition_($54,$55,$59,$62)|0); //@line 4175 "stream_encoder.c"
   $24 = $63; //@line 4175 "stream_encoder.c"
   $64 = $24; //@line 4177 "stream_encoder.c"
   $65 = $25; //@line 4177 "stream_encoder.c"
   $66 = ($64>>>0)<($65>>>0); //@line 4177 "stream_encoder.c"
   if ($66) {
    $67 = $23; //@line 4178 "stream_encoder.c"
    $26 = $67; //@line 4178 "stream_encoder.c"
    $68 = $24; //@line 4179 "stream_encoder.c"
    $25 = $68; //@line 4179 "stream_encoder.c"
   }
   $69 = $20; //@line 4184 "stream_encoder.c"
   $70 = ($69|0)!=(0); //@line 4184 "stream_encoder.c"
   do {
    if ($70) {
     $71 = HEAP32[275]|0; //@line 4185 "stream_encoder.c"
     $72 = HEAP32[275]|0; //@line 4185 "stream_encoder.c"
     $73 = (($71) + ($72))|0; //@line 4185 "stream_encoder.c"
     $74 = $13; //@line 4185 "stream_encoder.c"
     $75 = HEAP32[$74>>2]|0; //@line 4185 "stream_encoder.c"
     $76 = $14; //@line 4185 "stream_encoder.c"
     $77 = Math_imul($75, $76)|0; //@line 4185 "stream_encoder.c"
     $78 = (($73) + ($77))|0; //@line 4185 "stream_encoder.c"
     $24 = $78; //@line 4185 "stream_encoder.c"
     $79 = $24; //@line 4186 "stream_encoder.c"
     $80 = $25; //@line 4186 "stream_encoder.c"
     $81 = ($79>>>0)<=($80>>>0); //@line 4186 "stream_encoder.c"
     if ($81) {
      $82 = $13; //@line 4187 "stream_encoder.c"
      $83 = HEAP32[$82>>2]|0; //@line 4187 "stream_encoder.c"
      $84 = $29; //@line 4187 "stream_encoder.c"
      HEAP32[$84>>2] = $83; //@line 4187 "stream_encoder.c"
      $26 = 0; //@line 4188 "stream_encoder.c"
      $85 = $24; //@line 4189 "stream_encoder.c"
      $25 = $85; //@line 4189 "stream_encoder.c"
      break;
     } else {
      $86 = $29; //@line 4192 "stream_encoder.c"
      HEAP32[$86>>2] = 0; //@line 4192 "stream_encoder.c"
      break;
     }
    }
   } while(0);
   $87 = $26; //@line 4194 "stream_encoder.c"
   $88 = $28; //@line 4194 "stream_encoder.c"
   HEAP32[$88>>2] = $87; //@line 4194 "stream_encoder.c"
   $89 = $25; //@line 4195 "stream_encoder.c"
   $90 = $27; //@line 4195 "stream_encoder.c"
   $91 = (($90) + ($89))|0; //@line 4195 "stream_encoder.c"
   $27 = $91; //@line 4195 "stream_encoder.c"
  } else {
   $92 = $19; //@line 4201 "stream_encoder.c"
   $93 = 1 << $92; //@line 4201 "stream_encoder.c"
   $35 = $93; //@line 4201 "stream_encoder.c"
   $31 = 0; //@line 4202 "stream_encoder.c"
   $30 = 0; //@line 4202 "stream_encoder.c"
   while(1) {
    $94 = $30; //@line 4202 "stream_encoder.c"
    $95 = $35; //@line 4202 "stream_encoder.c"
    $96 = ($94>>>0)<($95>>>0); //@line 4202 "stream_encoder.c"
    if (!($96)) {
     break L1;
    }
    $97 = $14; //@line 4203 "stream_encoder.c"
    $98 = $15; //@line 4203 "stream_encoder.c"
    $99 = (($97) + ($98))|0; //@line 4203 "stream_encoder.c"
    $100 = $19; //@line 4203 "stream_encoder.c"
    $101 = $99 >>> $100; //@line 4203 "stream_encoder.c"
    $32 = $101; //@line 4203 "stream_encoder.c"
    $102 = $30; //@line 4204 "stream_encoder.c"
    $103 = ($102|0)==(0); //@line 4204 "stream_encoder.c"
    if ($103) {
     $104 = $32; //@line 4205 "stream_encoder.c"
     $105 = $15; //@line 4205 "stream_encoder.c"
     $106 = ($104>>>0)<=($105>>>0); //@line 4205 "stream_encoder.c"
     if ($106) {
      break;
     }
     $107 = $15; //@line 4208 "stream_encoder.c"
     $108 = $32; //@line 4208 "stream_encoder.c"
     $109 = (($108) - ($107))|0; //@line 4208 "stream_encoder.c"
     $32 = $109; //@line 4208 "stream_encoder.c"
    }
    $110 = $12; //@line 4210 "stream_encoder.c"
    $111 = $30; //@line 4210 "stream_encoder.c"
    $112 = (($110) + ($111<<3)|0); //@line 4210 "stream_encoder.c"
    $113 = $112; //@line 4210 "stream_encoder.c"
    $114 = $113; //@line 4210 "stream_encoder.c"
    $115 = HEAP32[$114>>2]|0; //@line 4210 "stream_encoder.c"
    $116 = (($113) + 4)|0; //@line 4210 "stream_encoder.c"
    $117 = $116; //@line 4210 "stream_encoder.c"
    $118 = HEAP32[$117>>2]|0; //@line 4210 "stream_encoder.c"
    $119 = $33; //@line 4210 "stream_encoder.c"
    $120 = $119; //@line 4210 "stream_encoder.c"
    HEAP32[$120>>2] = $115; //@line 4210 "stream_encoder.c"
    $121 = (($119) + 4)|0; //@line 4210 "stream_encoder.c"
    $122 = $121; //@line 4210 "stream_encoder.c"
    HEAP32[$122>>2] = $118; //@line 4210 "stream_encoder.c"
    $123 = $33; //@line 4226 "stream_encoder.c"
    $124 = $123; //@line 4226 "stream_encoder.c"
    $125 = HEAP32[$124>>2]|0; //@line 4226 "stream_encoder.c"
    $126 = (($123) + 4)|0; //@line 4226 "stream_encoder.c"
    $127 = $126; //@line 4226 "stream_encoder.c"
    $128 = HEAP32[$127>>2]|0; //@line 4226 "stream_encoder.c"
    $129 = ($128>>>0)<(0); //@line 4226 "stream_encoder.c"
    $130 = ($125>>>0)<=(268435456); //@line 4226 "stream_encoder.c"
    $131 = ($128|0)==(0); //@line 4226 "stream_encoder.c"
    $132 = $131 & $130; //@line 4226 "stream_encoder.c"
    $133 = $129 | $132; //@line 4226 "stream_encoder.c"
    L20: do {
     if ($133) {
      $134 = $33; //@line 4228 "stream_encoder.c"
      $135 = $134; //@line 4228 "stream_encoder.c"
      $136 = HEAP32[$135>>2]|0; //@line 4228 "stream_encoder.c"
      $137 = (($134) + 4)|0; //@line 4228 "stream_encoder.c"
      $138 = $137; //@line 4228 "stream_encoder.c"
      $139 = HEAP32[$138>>2]|0; //@line 4228 "stream_encoder.c"
      $37 = $136; //@line 4228 "stream_encoder.c"
      $23 = 0; //@line 4229 "stream_encoder.c"
      $140 = $32; //@line 4229 "stream_encoder.c"
      $36 = $140; //@line 4229 "stream_encoder.c"
      while(1) {
       $141 = $36; //@line 4230 "stream_encoder.c"
       $142 = $141<<3; //@line 4230 "stream_encoder.c"
       $143 = $37; //@line 4230 "stream_encoder.c"
       $144 = ($142>>>0)<($143>>>0); //@line 4230 "stream_encoder.c"
       if (!($144)) {
        break;
       }
       $145 = $23; //@line 4231 "stream_encoder.c"
       $146 = (($145) + 4)|0; //@line 4231 "stream_encoder.c"
       $23 = $146; //@line 4231 "stream_encoder.c"
       $147 = $36; //@line 4231 "stream_encoder.c"
       $148 = $147 << 4; //@line 4231 "stream_encoder.c"
       $36 = $148; //@line 4231 "stream_encoder.c"
      }
      while(1) {
       $149 = $36; //@line 4233 "stream_encoder.c"
       $150 = $37; //@line 4233 "stream_encoder.c"
       $151 = ($149>>>0)<($150>>>0); //@line 4233 "stream_encoder.c"
       if (!($151)) {
        break L20;
       }
       $152 = $23; //@line 4234 "stream_encoder.c"
       $153 = (($152) + 1)|0; //@line 4234 "stream_encoder.c"
       $23 = $153; //@line 4234 "stream_encoder.c"
       $154 = $36; //@line 4234 "stream_encoder.c"
       $155 = $154 << 1; //@line 4234 "stream_encoder.c"
       $36 = $155; //@line 4234 "stream_encoder.c"
      }
     } else {
      $23 = 0; //@line 4238 "stream_encoder.c"
      $156 = $32; //@line 4238 "stream_encoder.c"
      $157 = $34; //@line 4238 "stream_encoder.c"
      $158 = $157; //@line 4238 "stream_encoder.c"
      HEAP32[$158>>2] = $156; //@line 4238 "stream_encoder.c"
      $159 = (($157) + 4)|0; //@line 4238 "stream_encoder.c"
      $160 = $159; //@line 4238 "stream_encoder.c"
      HEAP32[$160>>2] = 0; //@line 4238 "stream_encoder.c"
      $161 = $33; //@line 4239 "stream_encoder.c"
      $162 = $161; //@line 4239 "stream_encoder.c"
      $163 = HEAP32[$162>>2]|0; //@line 4239 "stream_encoder.c"
      $164 = (($161) + 4)|0; //@line 4239 "stream_encoder.c"
      $165 = $164; //@line 4239 "stream_encoder.c"
      $166 = HEAP32[$165>>2]|0; //@line 4239 "stream_encoder.c"
      $167 = ($166>>>0)<(16777216); //@line 4239 "stream_encoder.c"
      $168 = ($163>>>0)<=(0); //@line 4239 "stream_encoder.c"
      $169 = ($166|0)==(16777216); //@line 4239 "stream_encoder.c"
      $170 = $169 & $168; //@line 4239 "stream_encoder.c"
      $171 = $167 | $170; //@line 4239 "stream_encoder.c"
      L30: do {
       if ($171) {
        while(1) {
         $172 = $34; //@line 4240 "stream_encoder.c"
         $173 = $172; //@line 4240 "stream_encoder.c"
         $174 = HEAP32[$173>>2]|0; //@line 4240 "stream_encoder.c"
         $175 = (($172) + 4)|0; //@line 4240 "stream_encoder.c"
         $176 = $175; //@line 4240 "stream_encoder.c"
         $177 = HEAP32[$176>>2]|0; //@line 4240 "stream_encoder.c"
         $178 = (___muldi3(($174|0),($177|0),128,0)|0); //@line 4240 "stream_encoder.c"
         $179 = tempRet0; //@line 4240 "stream_encoder.c"
         $180 = $33; //@line 4240 "stream_encoder.c"
         $181 = $180; //@line 4240 "stream_encoder.c"
         $182 = HEAP32[$181>>2]|0; //@line 4240 "stream_encoder.c"
         $183 = (($180) + 4)|0; //@line 4240 "stream_encoder.c"
         $184 = $183; //@line 4240 "stream_encoder.c"
         $185 = HEAP32[$184>>2]|0; //@line 4240 "stream_encoder.c"
         $186 = ($179>>>0)<($185>>>0); //@line 4240 "stream_encoder.c"
         $187 = ($178>>>0)<($182>>>0); //@line 4240 "stream_encoder.c"
         $188 = ($179|0)==($185|0); //@line 4240 "stream_encoder.c"
         $189 = $188 & $187; //@line 4240 "stream_encoder.c"
         $190 = $186 | $189; //@line 4240 "stream_encoder.c"
         if (!($190)) {
          break L30;
         }
         $191 = $23; //@line 4241 "stream_encoder.c"
         $192 = (($191) + 8)|0; //@line 4241 "stream_encoder.c"
         $23 = $192; //@line 4241 "stream_encoder.c"
         $193 = $34; //@line 4241 "stream_encoder.c"
         $194 = $193; //@line 4241 "stream_encoder.c"
         $195 = HEAP32[$194>>2]|0; //@line 4241 "stream_encoder.c"
         $196 = (($193) + 4)|0; //@line 4241 "stream_encoder.c"
         $197 = $196; //@line 4241 "stream_encoder.c"
         $198 = HEAP32[$197>>2]|0; //@line 4241 "stream_encoder.c"
         $199 = (_bitshift64Shl(($195|0),($198|0),8)|0); //@line 4241 "stream_encoder.c"
         $200 = tempRet0; //@line 4241 "stream_encoder.c"
         $201 = $34; //@line 4241 "stream_encoder.c"
         $202 = $201; //@line 4241 "stream_encoder.c"
         HEAP32[$202>>2] = $199; //@line 4241 "stream_encoder.c"
         $203 = (($201) + 4)|0; //@line 4241 "stream_encoder.c"
         $204 = $203; //@line 4241 "stream_encoder.c"
         HEAP32[$204>>2] = $200; //@line 4241 "stream_encoder.c"
        }
       }
      } while(0);
      while(1) {
       $205 = $34; //@line 4243 "stream_encoder.c"
       $206 = $205; //@line 4243 "stream_encoder.c"
       $207 = HEAP32[$206>>2]|0; //@line 4243 "stream_encoder.c"
       $208 = (($205) + 4)|0; //@line 4243 "stream_encoder.c"
       $209 = $208; //@line 4243 "stream_encoder.c"
       $210 = HEAP32[$209>>2]|0; //@line 4243 "stream_encoder.c"
       $211 = $33; //@line 4243 "stream_encoder.c"
       $212 = $211; //@line 4243 "stream_encoder.c"
       $213 = HEAP32[$212>>2]|0; //@line 4243 "stream_encoder.c"
       $214 = (($211) + 4)|0; //@line 4243 "stream_encoder.c"
       $215 = $214; //@line 4243 "stream_encoder.c"
       $216 = HEAP32[$215>>2]|0; //@line 4243 "stream_encoder.c"
       $217 = ($210>>>0)<($216>>>0); //@line 4243 "stream_encoder.c"
       $218 = ($207>>>0)<($213>>>0); //@line 4243 "stream_encoder.c"
       $219 = ($210|0)==($216|0); //@line 4243 "stream_encoder.c"
       $220 = $219 & $218; //@line 4243 "stream_encoder.c"
       $221 = $217 | $220; //@line 4243 "stream_encoder.c"
       if (!($221)) {
        break L20;
       }
       $222 = $23; //@line 4244 "stream_encoder.c"
       $223 = (($222) + 1)|0; //@line 4244 "stream_encoder.c"
       $23 = $223; //@line 4244 "stream_encoder.c"
       $224 = $34; //@line 4244 "stream_encoder.c"
       $225 = $224; //@line 4244 "stream_encoder.c"
       $226 = HEAP32[$225>>2]|0; //@line 4244 "stream_encoder.c"
       $227 = (($224) + 4)|0; //@line 4244 "stream_encoder.c"
       $228 = $227; //@line 4244 "stream_encoder.c"
       $229 = HEAP32[$228>>2]|0; //@line 4244 "stream_encoder.c"
       $230 = (_bitshift64Shl(($226|0),($229|0),1)|0); //@line 4244 "stream_encoder.c"
       $231 = tempRet0; //@line 4244 "stream_encoder.c"
       $232 = $34; //@line 4244 "stream_encoder.c"
       $233 = $232; //@line 4244 "stream_encoder.c"
       HEAP32[$233>>2] = $230; //@line 4244 "stream_encoder.c"
       $234 = (($232) + 4)|0; //@line 4244 "stream_encoder.c"
       $235 = $234; //@line 4244 "stream_encoder.c"
       HEAP32[$235>>2] = $231; //@line 4244 "stream_encoder.c"
      }
     }
    } while(0);
    $236 = $23; //@line 4248 "stream_encoder.c"
    $237 = $17; //@line 4248 "stream_encoder.c"
    $238 = ($236>>>0)>=($237>>>0); //@line 4248 "stream_encoder.c"
    if ($238) {
     $239 = $17; //@line 4252 "stream_encoder.c"
     $240 = (($239) - 1)|0; //@line 4252 "stream_encoder.c"
     $23 = $240; //@line 4252 "stream_encoder.c"
    }
    $25 = -1; //@line 4255 "stream_encoder.c"
    $241 = $23; //@line 4278 "stream_encoder.c"
    $242 = $32; //@line 4278 "stream_encoder.c"
    $243 = $12; //@line 4278 "stream_encoder.c"
    $244 = $30; //@line 4278 "stream_encoder.c"
    $245 = (($243) + ($244<<3)|0); //@line 4278 "stream_encoder.c"
    $246 = $245; //@line 4278 "stream_encoder.c"
    $247 = $246; //@line 4278 "stream_encoder.c"
    $248 = HEAP32[$247>>2]|0; //@line 4278 "stream_encoder.c"
    $249 = (($246) + 4)|0; //@line 4278 "stream_encoder.c"
    $250 = $249; //@line 4278 "stream_encoder.c"
    $251 = HEAP32[$250>>2]|0; //@line 4278 "stream_encoder.c"
    $252 = (_count_rice_bits_in_partition_($241,$242,$248,$251)|0); //@line 4278 "stream_encoder.c"
    $24 = $252; //@line 4278 "stream_encoder.c"
    $253 = $24; //@line 4280 "stream_encoder.c"
    $254 = $25; //@line 4280 "stream_encoder.c"
    $255 = ($253>>>0)<($254>>>0); //@line 4280 "stream_encoder.c"
    if ($255) {
     $256 = $23; //@line 4281 "stream_encoder.c"
     $26 = $256; //@line 4281 "stream_encoder.c"
     $257 = $24; //@line 4282 "stream_encoder.c"
     $25 = $257; //@line 4282 "stream_encoder.c"
    }
    $258 = $20; //@line 4287 "stream_encoder.c"
    $259 = ($258|0)!=(0); //@line 4287 "stream_encoder.c"
    do {
     if ($259) {
      $260 = HEAP32[275]|0; //@line 4288 "stream_encoder.c"
      $261 = HEAP32[275]|0; //@line 4288 "stream_encoder.c"
      $262 = (($260) + ($261))|0; //@line 4288 "stream_encoder.c"
      $263 = $13; //@line 4288 "stream_encoder.c"
      $264 = $30; //@line 4288 "stream_encoder.c"
      $265 = (($263) + ($264<<2)|0); //@line 4288 "stream_encoder.c"
      $266 = HEAP32[$265>>2]|0; //@line 4288 "stream_encoder.c"
      $267 = $32; //@line 4288 "stream_encoder.c"
      $268 = Math_imul($266, $267)|0; //@line 4288 "stream_encoder.c"
      $269 = (($262) + ($268))|0; //@line 4288 "stream_encoder.c"
      $24 = $269; //@line 4288 "stream_encoder.c"
      $270 = $24; //@line 4289 "stream_encoder.c"
      $271 = $25; //@line 4289 "stream_encoder.c"
      $272 = ($270>>>0)<=($271>>>0); //@line 4289 "stream_encoder.c"
      if ($272) {
       $273 = $13; //@line 4290 "stream_encoder.c"
       $274 = $30; //@line 4290 "stream_encoder.c"
       $275 = (($273) + ($274<<2)|0); //@line 4290 "stream_encoder.c"
       $276 = HEAP32[$275>>2]|0; //@line 4290 "stream_encoder.c"
       $277 = $29; //@line 4290 "stream_encoder.c"
       $278 = $30; //@line 4290 "stream_encoder.c"
       $279 = (($277) + ($278<<2)|0); //@line 4290 "stream_encoder.c"
       HEAP32[$279>>2] = $276; //@line 4290 "stream_encoder.c"
       $26 = 0; //@line 4291 "stream_encoder.c"
       $280 = $24; //@line 4292 "stream_encoder.c"
       $25 = $280; //@line 4292 "stream_encoder.c"
       break;
      } else {
       $281 = $29; //@line 4295 "stream_encoder.c"
       $282 = $30; //@line 4295 "stream_encoder.c"
       $283 = (($281) + ($282<<2)|0); //@line 4295 "stream_encoder.c"
       HEAP32[$283>>2] = 0; //@line 4295 "stream_encoder.c"
       break;
      }
     }
    } while(0);
    $284 = $26; //@line 4297 "stream_encoder.c"
    $285 = $28; //@line 4297 "stream_encoder.c"
    $286 = $30; //@line 4297 "stream_encoder.c"
    $287 = (($285) + ($286<<2)|0); //@line 4297 "stream_encoder.c"
    HEAP32[$287>>2] = $284; //@line 4297 "stream_encoder.c"
    $288 = $25; //@line 4298 "stream_encoder.c"
    $289 = $27; //@line 4298 "stream_encoder.c"
    $290 = (($289) + ($288))|0; //@line 4298 "stream_encoder.c"
    $27 = $290; //@line 4298 "stream_encoder.c"
    $291 = $32; //@line 4299 "stream_encoder.c"
    $292 = $31; //@line 4299 "stream_encoder.c"
    $293 = (($292) + ($291))|0; //@line 4299 "stream_encoder.c"
    $31 = $293; //@line 4299 "stream_encoder.c"
    $294 = $30; //@line 4202 "stream_encoder.c"
    $295 = (($294) + 1)|0; //@line 4202 "stream_encoder.c"
    $30 = $295; //@line 4202 "stream_encoder.c"
   }
   $11 = 0; //@line 4206 "stream_encoder.c"
   $298 = $11; //@line 4305 "stream_encoder.c"
   STACKTOP = sp;return ($298|0); //@line 4305 "stream_encoder.c"
  }
 } while(0);
 $296 = $27; //@line 4303 "stream_encoder.c"
 $297 = $22; //@line 4303 "stream_encoder.c"
 HEAP32[$297>>2] = $296; //@line 4303 "stream_encoder.c"
 $11 = 1; //@line 4304 "stream_encoder.c"
 $298 = $11; //@line 4305 "stream_encoder.c"
 STACKTOP = sp;return ($298|0); //@line 4305 "stream_encoder.c"
}
function _count_rice_bits_in_partition_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $4 = $0;
 $5 = $1;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $3;
 $11 = HEAP32[274]|0; //@line 4097 "stream_encoder.c"
 $12 = $4; //@line 4098 "stream_encoder.c"
 $13 = (1 + ($12))|0; //@line 4098 "stream_encoder.c"
 $14 = $5; //@line 4098 "stream_encoder.c"
 $15 = Math_imul($13, $14)|0; //@line 4098 "stream_encoder.c"
 $16 = (($11) + ($15))|0; //@line 4097 "stream_encoder.c"
 $17 = $4; //@line 4100 "stream_encoder.c"
 $18 = ($17|0)!=(0); //@line 4100 "stream_encoder.c"
 $19 = $6;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 if ($18) {
  $25 = $4; //@line 4101 "stream_encoder.c"
  $26 = (($25) - 1)|0; //@line 4101 "stream_encoder.c"
  $27 = (_bitshift64Lshr(($21|0),($24|0),($26|0))|0); //@line 4101 "stream_encoder.c"
  $28 = tempRet0; //@line 4101 "stream_encoder.c"
  $32 = $27;
 } else {
  $29 = (_bitshift64Shl(($21|0),($24|0),1)|0); //@line 4102 "stream_encoder.c"
  $30 = tempRet0; //@line 4102 "stream_encoder.c"
  $32 = $29;
 }
 $31 = (($16) + ($32))|0; //@line 4098 "stream_encoder.c"
 $33 = $5; //@line 4104 "stream_encoder.c"
 $34 = $33 >>> 1; //@line 4104 "stream_encoder.c"
 $35 = (($31) - ($34))|0; //@line 4104 "stream_encoder.c"
 STACKTOP = sp;return ($35|0); //@line 4096 "stream_encoder.c"
}
function _FLAC__clz_uint32_236($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 82 "./include\private/bitmath.h"
 $3 = (Math_clz32(($2|0))|0); //@line 82 "./include\private/bitmath.h"
 STACKTOP = sp;return ($3|0); //@line 82 "./include\private/bitmath.h"
}
function _FLAC__stream_encoder_init_stream($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6; //@line 1265 "stream_encoder.c"
 $13 = $7; //@line 1267 "stream_encoder.c"
 $14 = $8; //@line 1268 "stream_encoder.c"
 $15 = $9; //@line 1269 "stream_encoder.c"
 $16 = $10; //@line 1270 "stream_encoder.c"
 $17 = $11; //@line 1271 "stream_encoder.c"
 $18 = (_init_stream_internal__237($12,0,$13,$14,$15,$16,$17,0)|0); //@line 1264 "stream_encoder.c"
 STACKTOP = sp;return ($18|0); //@line 1264 "stream_encoder.c"
}
function _init_stream_internal__237($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $24 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $25 = $9; //@line 633 "stream_encoder.c"
 $26 = HEAP32[$25>>2]|0; //@line 633 "stream_encoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 633 "stream_encoder.c"
 $28 = ($27|0)!=(1); //@line 633 "stream_encoder.c"
 if ($28) {
  $8 = 13; //@line 634 "stream_encoder.c"
  $1165 = $8; //@line 1253 "stream_encoder.c"
  STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
 }
 $29 = $16; //@line 636 "stream_encoder.c"
 $30 = ($29|0)!=(0); //@line 636 "stream_encoder.c"
 if ($30) {
  $8 = 2; //@line 637 "stream_encoder.c"
  $1165 = $8; //@line 1253 "stream_encoder.c"
  STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
 }
 $31 = $11; //@line 639 "stream_encoder.c"
 $32 = (0|0)==($31|0); //@line 639 "stream_encoder.c"
 if (!($32)) {
  $33 = $12; //@line 639 "stream_encoder.c"
  $34 = ($33|0)!=(0|0); //@line 639 "stream_encoder.c"
  $35 = $13; //@line 639 "stream_encoder.c"
  $36 = (0|0)==($35|0); //@line 639 "stream_encoder.c"
  $or$cond = $34 & $36; //@line 639 "stream_encoder.c"
  if (!($or$cond)) {
   $37 = $9; //@line 642 "stream_encoder.c"
   $38 = HEAP32[$37>>2]|0; //@line 642 "stream_encoder.c"
   $39 = ((($38)) + 24|0); //@line 642 "stream_encoder.c"
   $40 = HEAP32[$39>>2]|0; //@line 642 "stream_encoder.c"
   $41 = ($40|0)==(0); //@line 642 "stream_encoder.c"
   if (!($41)) {
    $42 = $9; //@line 642 "stream_encoder.c"
    $43 = HEAP32[$42>>2]|0; //@line 642 "stream_encoder.c"
    $44 = ((($43)) + 24|0); //@line 642 "stream_encoder.c"
    $45 = HEAP32[$44>>2]|0; //@line 642 "stream_encoder.c"
    $46 = ($45>>>0)>(8); //@line 642 "stream_encoder.c"
    if (!($46)) {
     $47 = $9; //@line 645 "stream_encoder.c"
     $48 = HEAP32[$47>>2]|0; //@line 645 "stream_encoder.c"
     $49 = ((($48)) + 24|0); //@line 645 "stream_encoder.c"
     $50 = HEAP32[$49>>2]|0; //@line 645 "stream_encoder.c"
     $51 = ($50|0)!=(2); //@line 645 "stream_encoder.c"
     $52 = $9;
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 16|0);
     if ($51) {
      HEAP32[$54>>2] = 0; //@line 646 "stream_encoder.c"
      $55 = $9; //@line 647 "stream_encoder.c"
      $56 = HEAP32[$55>>2]|0; //@line 647 "stream_encoder.c"
      $57 = ((($56)) + 20|0); //@line 647 "stream_encoder.c"
      HEAP32[$57>>2] = 0; //@line 647 "stream_encoder.c"
     } else {
      $58 = HEAP32[$54>>2]|0; //@line 649 "stream_encoder.c"
      $59 = ($58|0)!=(0); //@line 649 "stream_encoder.c"
      if (!($59)) {
       $60 = $9; //@line 650 "stream_encoder.c"
       $61 = HEAP32[$60>>2]|0; //@line 650 "stream_encoder.c"
       $62 = ((($61)) + 20|0); //@line 650 "stream_encoder.c"
       HEAP32[$62>>2] = 0; //@line 650 "stream_encoder.c"
      }
     }
     $63 = $9; //@line 652 "stream_encoder.c"
     $64 = HEAP32[$63>>2]|0; //@line 652 "stream_encoder.c"
     $65 = ((($64)) + 28|0); //@line 652 "stream_encoder.c"
     $66 = HEAP32[$65>>2]|0; //@line 652 "stream_encoder.c"
     $67 = ($66>>>0)>=(32); //@line 652 "stream_encoder.c"
     if ($67) {
      $68 = $9; //@line 653 "stream_encoder.c"
      $69 = HEAP32[$68>>2]|0; //@line 653 "stream_encoder.c"
      $70 = ((($69)) + 16|0); //@line 653 "stream_encoder.c"
      HEAP32[$70>>2] = 0; //@line 653 "stream_encoder.c"
     }
     $71 = $9; //@line 655 "stream_encoder.c"
     $72 = HEAP32[$71>>2]|0; //@line 655 "stream_encoder.c"
     $73 = ((($72)) + 28|0); //@line 655 "stream_encoder.c"
     $74 = HEAP32[$73>>2]|0; //@line 655 "stream_encoder.c"
     $75 = ($74>>>0)<(4); //@line 655 "stream_encoder.c"
     if (!($75)) {
      $76 = $9; //@line 655 "stream_encoder.c"
      $77 = HEAP32[$76>>2]|0; //@line 655 "stream_encoder.c"
      $78 = ((($77)) + 28|0); //@line 655 "stream_encoder.c"
      $79 = HEAP32[$78>>2]|0; //@line 655 "stream_encoder.c"
      $80 = ($79>>>0)>(24); //@line 655 "stream_encoder.c"
      if (!($80)) {
       $81 = $9; //@line 658 "stream_encoder.c"
       $82 = HEAP32[$81>>2]|0; //@line 658 "stream_encoder.c"
       $83 = ((($82)) + 32|0); //@line 658 "stream_encoder.c"
       $84 = HEAP32[$83>>2]|0; //@line 658 "stream_encoder.c"
       $85 = (_FLAC__format_sample_rate_is_valid($84)|0); //@line 658 "stream_encoder.c"
       $86 = ($85|0)!=(0); //@line 658 "stream_encoder.c"
       if (!($86)) {
        $8 = 6; //@line 659 "stream_encoder.c"
        $1165 = $8; //@line 1253 "stream_encoder.c"
        STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
       }
       $87 = $9; //@line 661 "stream_encoder.c"
       $88 = HEAP32[$87>>2]|0; //@line 661 "stream_encoder.c"
       $89 = ((($88)) + 36|0); //@line 661 "stream_encoder.c"
       $90 = HEAP32[$89>>2]|0; //@line 661 "stream_encoder.c"
       $91 = ($90|0)==(0); //@line 661 "stream_encoder.c"
       do {
        if ($91) {
         $92 = $9; //@line 662 "stream_encoder.c"
         $93 = HEAP32[$92>>2]|0; //@line 662 "stream_encoder.c"
         $94 = ((($93)) + 556|0); //@line 662 "stream_encoder.c"
         $95 = HEAP32[$94>>2]|0; //@line 662 "stream_encoder.c"
         $96 = ($95|0)==(0); //@line 662 "stream_encoder.c"
         $97 = $9;
         $98 = HEAP32[$97>>2]|0;
         $99 = ((($98)) + 36|0);
         if ($96) {
          HEAP32[$99>>2] = 1152; //@line 663 "stream_encoder.c"
          break;
         } else {
          HEAP32[$99>>2] = 4096; //@line 665 "stream_encoder.c"
          break;
         }
        }
       } while(0);
       $100 = $9; //@line 668 "stream_encoder.c"
       $101 = HEAP32[$100>>2]|0; //@line 668 "stream_encoder.c"
       $102 = ((($101)) + 36|0); //@line 668 "stream_encoder.c"
       $103 = HEAP32[$102>>2]|0; //@line 668 "stream_encoder.c"
       $104 = ($103>>>0)<(16); //@line 668 "stream_encoder.c"
       if (!($104)) {
        $105 = $9; //@line 668 "stream_encoder.c"
        $106 = HEAP32[$105>>2]|0; //@line 668 "stream_encoder.c"
        $107 = ((($106)) + 36|0); //@line 668 "stream_encoder.c"
        $108 = HEAP32[$107>>2]|0; //@line 668 "stream_encoder.c"
        $109 = ($108>>>0)>(65535); //@line 668 "stream_encoder.c"
        if (!($109)) {
         $110 = $9; //@line 671 "stream_encoder.c"
         $111 = HEAP32[$110>>2]|0; //@line 671 "stream_encoder.c"
         $112 = ((($111)) + 556|0); //@line 671 "stream_encoder.c"
         $113 = HEAP32[$112>>2]|0; //@line 671 "stream_encoder.c"
         $114 = ($113>>>0)>(32); //@line 671 "stream_encoder.c"
         if ($114) {
          $8 = 8; //@line 672 "stream_encoder.c"
          $1165 = $8; //@line 1253 "stream_encoder.c"
          STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
         }
         $115 = $9; //@line 674 "stream_encoder.c"
         $116 = HEAP32[$115>>2]|0; //@line 674 "stream_encoder.c"
         $117 = ((($116)) + 36|0); //@line 674 "stream_encoder.c"
         $118 = HEAP32[$117>>2]|0; //@line 674 "stream_encoder.c"
         $119 = $9; //@line 674 "stream_encoder.c"
         $120 = HEAP32[$119>>2]|0; //@line 674 "stream_encoder.c"
         $121 = ((($120)) + 556|0); //@line 674 "stream_encoder.c"
         $122 = HEAP32[$121>>2]|0; //@line 674 "stream_encoder.c"
         $123 = ($118>>>0)<($122>>>0); //@line 674 "stream_encoder.c"
         if ($123) {
          $8 = 10; //@line 675 "stream_encoder.c"
          $1165 = $8; //@line 1253 "stream_encoder.c"
          STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
         }
         $124 = $9; //@line 677 "stream_encoder.c"
         $125 = HEAP32[$124>>2]|0; //@line 677 "stream_encoder.c"
         $126 = ((($125)) + 560|0); //@line 677 "stream_encoder.c"
         $127 = HEAP32[$126>>2]|0; //@line 677 "stream_encoder.c"
         $128 = ($127|0)==(0); //@line 677 "stream_encoder.c"
         $129 = $9;
         $130 = HEAP32[$129>>2]|0;
         do {
          if ($128) {
           $131 = ((($130)) + 28|0); //@line 678 "stream_encoder.c"
           $132 = HEAP32[$131>>2]|0; //@line 678 "stream_encoder.c"
           $133 = ($132>>>0)<(16); //@line 678 "stream_encoder.c"
           $134 = $9;
           $135 = HEAP32[$134>>2]|0;
           $136 = ((($135)) + 28|0);
           $137 = HEAP32[$136>>2]|0;
           if ($133) {
            $138 = (($137>>>0) / 2)&-1; //@line 681 "stream_encoder.c"
            $139 = (2 + ($138))|0; //@line 681 "stream_encoder.c"
            $140 = (5)>($139>>>0); //@line 681 "stream_encoder.c"
            if ($140) {
             $150 = 5;
            } else {
             $141 = $9; //@line 681 "stream_encoder.c"
             $142 = HEAP32[$141>>2]|0; //@line 681 "stream_encoder.c"
             $143 = ((($142)) + 28|0); //@line 681 "stream_encoder.c"
             $144 = HEAP32[$143>>2]|0; //@line 681 "stream_encoder.c"
             $145 = (($144>>>0) / 2)&-1; //@line 681 "stream_encoder.c"
             $146 = (2 + ($145))|0; //@line 681 "stream_encoder.c"
             $150 = $146;
            }
            $147 = $9; //@line 681 "stream_encoder.c"
            $148 = HEAP32[$147>>2]|0; //@line 681 "stream_encoder.c"
            $149 = ((($148)) + 560|0); //@line 681 "stream_encoder.c"
            HEAP32[$149>>2] = $150; //@line 681 "stream_encoder.c"
            break;
           }
           $151 = ($137|0)==(16); //@line 683 "stream_encoder.c"
           $152 = $9;
           $153 = HEAP32[$152>>2]|0;
           $154 = ((($153)) + 36|0);
           $155 = HEAP32[$154>>2]|0;
           if (!($151)) {
            $190 = ($155>>>0)<=(384); //@line 700 "stream_encoder.c"
            $191 = $9;
            $192 = HEAP32[$191>>2]|0;
            if ($190) {
             $193 = ((($192)) + 560|0); //@line 701 "stream_encoder.c"
             HEAP32[$193>>2] = 13; //@line 701 "stream_encoder.c"
             break;
            }
            $194 = ((($192)) + 36|0); //@line 702 "stream_encoder.c"
            $195 = HEAP32[$194>>2]|0; //@line 702 "stream_encoder.c"
            $196 = ($195>>>0)<=(1152); //@line 702 "stream_encoder.c"
            $197 = $9;
            $198 = HEAP32[$197>>2]|0;
            $199 = ((($198)) + 560|0);
            if ($196) {
             HEAP32[$199>>2] = 14; //@line 703 "stream_encoder.c"
             break;
            } else {
             HEAP32[$199>>2] = 15; //@line 705 "stream_encoder.c"
             break;
            }
           }
           $156 = ($155>>>0)<=(192); //@line 684 "stream_encoder.c"
           $157 = $9;
           $158 = HEAP32[$157>>2]|0;
           if ($156) {
            $159 = ((($158)) + 560|0); //@line 685 "stream_encoder.c"
            HEAP32[$159>>2] = 7; //@line 685 "stream_encoder.c"
            break;
           }
           $160 = ((($158)) + 36|0); //@line 686 "stream_encoder.c"
           $161 = HEAP32[$160>>2]|0; //@line 686 "stream_encoder.c"
           $162 = ($161>>>0)<=(384); //@line 686 "stream_encoder.c"
           $163 = $9;
           $164 = HEAP32[$163>>2]|0;
           if ($162) {
            $165 = ((($164)) + 560|0); //@line 687 "stream_encoder.c"
            HEAP32[$165>>2] = 8; //@line 687 "stream_encoder.c"
            break;
           }
           $166 = ((($164)) + 36|0); //@line 688 "stream_encoder.c"
           $167 = HEAP32[$166>>2]|0; //@line 688 "stream_encoder.c"
           $168 = ($167>>>0)<=(576); //@line 688 "stream_encoder.c"
           $169 = $9;
           $170 = HEAP32[$169>>2]|0;
           if ($168) {
            $171 = ((($170)) + 560|0); //@line 689 "stream_encoder.c"
            HEAP32[$171>>2] = 9; //@line 689 "stream_encoder.c"
            break;
           }
           $172 = ((($170)) + 36|0); //@line 690 "stream_encoder.c"
           $173 = HEAP32[$172>>2]|0; //@line 690 "stream_encoder.c"
           $174 = ($173>>>0)<=(1152); //@line 690 "stream_encoder.c"
           $175 = $9;
           $176 = HEAP32[$175>>2]|0;
           if ($174) {
            $177 = ((($176)) + 560|0); //@line 691 "stream_encoder.c"
            HEAP32[$177>>2] = 10; //@line 691 "stream_encoder.c"
            break;
           }
           $178 = ((($176)) + 36|0); //@line 692 "stream_encoder.c"
           $179 = HEAP32[$178>>2]|0; //@line 692 "stream_encoder.c"
           $180 = ($179>>>0)<=(2304); //@line 692 "stream_encoder.c"
           $181 = $9;
           $182 = HEAP32[$181>>2]|0;
           if ($180) {
            $183 = ((($182)) + 560|0); //@line 693 "stream_encoder.c"
            HEAP32[$183>>2] = 11; //@line 693 "stream_encoder.c"
            break;
           }
           $184 = ((($182)) + 36|0); //@line 694 "stream_encoder.c"
           $185 = HEAP32[$184>>2]|0; //@line 694 "stream_encoder.c"
           $186 = ($185>>>0)<=(4608); //@line 694 "stream_encoder.c"
           $187 = $9;
           $188 = HEAP32[$187>>2]|0;
           $189 = ((($188)) + 560|0);
           if ($186) {
            HEAP32[$189>>2] = 12; //@line 695 "stream_encoder.c"
            break;
           } else {
            HEAP32[$189>>2] = 13; //@line 697 "stream_encoder.c"
            break;
           }
          } else {
           $200 = ((($130)) + 560|0); //@line 709 "stream_encoder.c"
           $201 = HEAP32[$200>>2]|0; //@line 709 "stream_encoder.c"
           $202 = ($201>>>0)<(5); //@line 709 "stream_encoder.c"
           if (!($202)) {
            $203 = $9; //@line 709 "stream_encoder.c"
            $204 = HEAP32[$203>>2]|0; //@line 709 "stream_encoder.c"
            $205 = ((($204)) + 560|0); //@line 709 "stream_encoder.c"
            $206 = HEAP32[$205>>2]|0; //@line 709 "stream_encoder.c"
            $207 = ($206>>>0)>(15); //@line 709 "stream_encoder.c"
            if (!($207)) {
             break;
            }
           }
           $8 = 9; //@line 710 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
          }
         } while(0);
         $208 = $9; //@line 712 "stream_encoder.c"
         $209 = HEAP32[$208>>2]|0; //@line 712 "stream_encoder.c"
         $210 = ((($209)) + 8|0); //@line 712 "stream_encoder.c"
         $211 = HEAP32[$210>>2]|0; //@line 712 "stream_encoder.c"
         $212 = ($211|0)!=(0); //@line 712 "stream_encoder.c"
         do {
          if ($212) {
           $213 = $9; //@line 713 "stream_encoder.c"
           $214 = HEAP32[$213>>2]|0; //@line 713 "stream_encoder.c"
           $215 = ((($214)) + 36|0); //@line 713 "stream_encoder.c"
           $216 = HEAP32[$215>>2]|0; //@line 713 "stream_encoder.c"
           $217 = $9; //@line 713 "stream_encoder.c"
           $218 = HEAP32[$217>>2]|0; //@line 713 "stream_encoder.c"
           $219 = ((($218)) + 32|0); //@line 713 "stream_encoder.c"
           $220 = HEAP32[$219>>2]|0; //@line 713 "stream_encoder.c"
           $221 = (_FLAC__format_blocksize_is_subset($216,$220)|0); //@line 713 "stream_encoder.c"
           $222 = ($221|0)!=(0); //@line 713 "stream_encoder.c"
           if (!($222)) {
            $8 = 11; //@line 714 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $223 = $9; //@line 715 "stream_encoder.c"
           $224 = HEAP32[$223>>2]|0; //@line 715 "stream_encoder.c"
           $225 = ((($224)) + 32|0); //@line 715 "stream_encoder.c"
           $226 = HEAP32[$225>>2]|0; //@line 715 "stream_encoder.c"
           $227 = (_FLAC__format_sample_rate_is_subset($226)|0); //@line 715 "stream_encoder.c"
           $228 = ($227|0)!=(0); //@line 715 "stream_encoder.c"
           if (!($228)) {
            $8 = 11; //@line 716 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $229 = $9; //@line 718 "stream_encoder.c"
           $230 = HEAP32[$229>>2]|0; //@line 718 "stream_encoder.c"
           $231 = ((($230)) + 28|0); //@line 718 "stream_encoder.c"
           $232 = HEAP32[$231>>2]|0; //@line 718 "stream_encoder.c"
           $233 = ($232|0)!=(8); //@line 718 "stream_encoder.c"
           do {
            if ($233) {
             $234 = $9; //@line 719 "stream_encoder.c"
             $235 = HEAP32[$234>>2]|0; //@line 719 "stream_encoder.c"
             $236 = ((($235)) + 28|0); //@line 719 "stream_encoder.c"
             $237 = HEAP32[$236>>2]|0; //@line 719 "stream_encoder.c"
             $238 = ($237|0)!=(12); //@line 719 "stream_encoder.c"
             if (!($238)) {
              break;
             }
             $239 = $9; //@line 720 "stream_encoder.c"
             $240 = HEAP32[$239>>2]|0; //@line 720 "stream_encoder.c"
             $241 = ((($240)) + 28|0); //@line 720 "stream_encoder.c"
             $242 = HEAP32[$241>>2]|0; //@line 720 "stream_encoder.c"
             $243 = ($242|0)!=(16); //@line 720 "stream_encoder.c"
             if (!($243)) {
              break;
             }
             $244 = $9; //@line 721 "stream_encoder.c"
             $245 = HEAP32[$244>>2]|0; //@line 721 "stream_encoder.c"
             $246 = ((($245)) + 28|0); //@line 721 "stream_encoder.c"
             $247 = HEAP32[$246>>2]|0; //@line 721 "stream_encoder.c"
             $248 = ($247|0)!=(20); //@line 721 "stream_encoder.c"
             if (!($248)) {
              break;
             }
             $249 = $9; //@line 722 "stream_encoder.c"
             $250 = HEAP32[$249>>2]|0; //@line 722 "stream_encoder.c"
             $251 = ((($250)) + 28|0); //@line 722 "stream_encoder.c"
             $252 = HEAP32[$251>>2]|0; //@line 722 "stream_encoder.c"
             $253 = ($252|0)!=(24); //@line 722 "stream_encoder.c"
             if (!($253)) {
              break;
             }
             $8 = 11; //@line 724 "stream_encoder.c"
             $1165 = $8; //@line 1253 "stream_encoder.c"
             STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
            }
           } while(0);
           $254 = $9; //@line 725 "stream_encoder.c"
           $255 = HEAP32[$254>>2]|0; //@line 725 "stream_encoder.c"
           $256 = ((($255)) + 580|0); //@line 725 "stream_encoder.c"
           $257 = HEAP32[$256>>2]|0; //@line 725 "stream_encoder.c"
           $258 = ($257>>>0)>(8); //@line 725 "stream_encoder.c"
           if ($258) {
            $8 = 11; //@line 726 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $259 = $9; //@line 728 "stream_encoder.c"
           $260 = HEAP32[$259>>2]|0; //@line 728 "stream_encoder.c"
           $261 = ((($260)) + 32|0); //@line 728 "stream_encoder.c"
           $262 = HEAP32[$261>>2]|0; //@line 728 "stream_encoder.c"
           $263 = ($262>>>0)<=(48000); //@line 728 "stream_encoder.c"
           if (!($263)) {
            break;
           }
           $264 = $9; //@line 730 "stream_encoder.c"
           $265 = HEAP32[$264>>2]|0; //@line 730 "stream_encoder.c"
           $266 = ((($265)) + 36|0); //@line 730 "stream_encoder.c"
           $267 = HEAP32[$266>>2]|0; //@line 730 "stream_encoder.c"
           $268 = ($267>>>0)>(4608); //@line 730 "stream_encoder.c"
           if (!($268)) {
            $269 = $9; //@line 731 "stream_encoder.c"
            $270 = HEAP32[$269>>2]|0; //@line 731 "stream_encoder.c"
            $271 = ((($270)) + 556|0); //@line 731 "stream_encoder.c"
            $272 = HEAP32[$271>>2]|0; //@line 731 "stream_encoder.c"
            $273 = ($272>>>0)>(12); //@line 731 "stream_encoder.c"
            if (!($273)) {
             break;
            }
           }
           $8 = 11; //@line 734 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
          }
         } while(0);
         $274 = $9; //@line 738 "stream_encoder.c"
         $275 = HEAP32[$274>>2]|0; //@line 738 "stream_encoder.c"
         $276 = ((($275)) + 580|0); //@line 738 "stream_encoder.c"
         $277 = HEAP32[$276>>2]|0; //@line 738 "stream_encoder.c"
         $278 = HEAP32[274]|0; //@line 738 "stream_encoder.c"
         $279 = 1 << $278; //@line 738 "stream_encoder.c"
         $280 = ($277>>>0)>=($279>>>0); //@line 738 "stream_encoder.c"
         if ($280) {
          $281 = HEAP32[274]|0; //@line 739 "stream_encoder.c"
          $282 = 1 << $281; //@line 739 "stream_encoder.c"
          $283 = (($282) - 1)|0; //@line 739 "stream_encoder.c"
          $284 = $9; //@line 739 "stream_encoder.c"
          $285 = HEAP32[$284>>2]|0; //@line 739 "stream_encoder.c"
          $286 = ((($285)) + 580|0); //@line 739 "stream_encoder.c"
          HEAP32[$286>>2] = $283; //@line 739 "stream_encoder.c"
         }
         $287 = $9; //@line 740 "stream_encoder.c"
         $288 = HEAP32[$287>>2]|0; //@line 740 "stream_encoder.c"
         $289 = ((($288)) + 576|0); //@line 740 "stream_encoder.c"
         $290 = HEAP32[$289>>2]|0; //@line 740 "stream_encoder.c"
         $291 = $9; //@line 740 "stream_encoder.c"
         $292 = HEAP32[$291>>2]|0; //@line 740 "stream_encoder.c"
         $293 = ((($292)) + 580|0); //@line 740 "stream_encoder.c"
         $294 = HEAP32[$293>>2]|0; //@line 740 "stream_encoder.c"
         $295 = ($290>>>0)>=($294>>>0); //@line 740 "stream_encoder.c"
         if ($295) {
          $296 = $9; //@line 741 "stream_encoder.c"
          $297 = HEAP32[$296>>2]|0; //@line 741 "stream_encoder.c"
          $298 = ((($297)) + 580|0); //@line 741 "stream_encoder.c"
          $299 = HEAP32[$298>>2]|0; //@line 741 "stream_encoder.c"
          $300 = $9; //@line 741 "stream_encoder.c"
          $301 = HEAP32[$300>>2]|0; //@line 741 "stream_encoder.c"
          $302 = ((($301)) + 576|0); //@line 741 "stream_encoder.c"
          HEAP32[$302>>2] = $299; //@line 741 "stream_encoder.c"
         }
         $303 = $9; //@line 759 "stream_encoder.c"
         $304 = HEAP32[$303>>2]|0; //@line 759 "stream_encoder.c"
         $305 = ((($304)) + 600|0); //@line 759 "stream_encoder.c"
         $306 = HEAP32[$305>>2]|0; //@line 759 "stream_encoder.c"
         $307 = (0|0)!=($306|0); //@line 759 "stream_encoder.c"
         L122: do {
          if ($307) {
           $308 = $9; //@line 759 "stream_encoder.c"
           $309 = HEAP32[$308>>2]|0; //@line 759 "stream_encoder.c"
           $310 = ((($309)) + 604|0); //@line 759 "stream_encoder.c"
           $311 = HEAP32[$310>>2]|0; //@line 759 "stream_encoder.c"
           $312 = ($311>>>0)>(0); //@line 759 "stream_encoder.c"
           if (!($312)) {
            break;
           }
           $22 = 0; //@line 761 "stream_encoder.c"
           while(1) {
            $313 = $22; //@line 761 "stream_encoder.c"
            $314 = $9; //@line 761 "stream_encoder.c"
            $315 = HEAP32[$314>>2]|0; //@line 761 "stream_encoder.c"
            $316 = ((($315)) + 604|0); //@line 761 "stream_encoder.c"
            $317 = HEAP32[$316>>2]|0; //@line 761 "stream_encoder.c"
            $318 = ($313>>>0)<($317>>>0); //@line 761 "stream_encoder.c"
            if (!($318)) {
             break L122;
            }
            $319 = $9; //@line 762 "stream_encoder.c"
            $320 = HEAP32[$319>>2]|0; //@line 762 "stream_encoder.c"
            $321 = ((($320)) + 600|0); //@line 762 "stream_encoder.c"
            $322 = HEAP32[$321>>2]|0; //@line 762 "stream_encoder.c"
            $323 = $22; //@line 762 "stream_encoder.c"
            $324 = (($322) + ($323<<2)|0); //@line 762 "stream_encoder.c"
            $325 = HEAP32[$324>>2]|0; //@line 762 "stream_encoder.c"
            $326 = (0|0)!=($325|0); //@line 762 "stream_encoder.c"
            if ($326) {
             $327 = $9; //@line 762 "stream_encoder.c"
             $328 = HEAP32[$327>>2]|0; //@line 762 "stream_encoder.c"
             $329 = ((($328)) + 600|0); //@line 762 "stream_encoder.c"
             $330 = HEAP32[$329>>2]|0; //@line 762 "stream_encoder.c"
             $331 = $22; //@line 762 "stream_encoder.c"
             $332 = (($330) + ($331<<2)|0); //@line 762 "stream_encoder.c"
             $333 = HEAP32[$332>>2]|0; //@line 762 "stream_encoder.c"
             $334 = HEAP32[$333>>2]|0; //@line 762 "stream_encoder.c"
             $335 = ($334|0)==(3); //@line 762 "stream_encoder.c"
             if ($335) {
              break;
             }
            }
            $348 = $22; //@line 761 "stream_encoder.c"
            $349 = (($348) + 1)|0; //@line 761 "stream_encoder.c"
            $22 = $349; //@line 761 "stream_encoder.c"
           }
           $336 = $9; //@line 763 "stream_encoder.c"
           $337 = HEAP32[$336>>2]|0; //@line 763 "stream_encoder.c"
           $338 = ((($337)) + 600|0); //@line 763 "stream_encoder.c"
           $339 = HEAP32[$338>>2]|0; //@line 763 "stream_encoder.c"
           $340 = $22; //@line 763 "stream_encoder.c"
           $341 = (($339) + ($340<<2)|0); //@line 763 "stream_encoder.c"
           $342 = HEAP32[$341>>2]|0; //@line 763 "stream_encoder.c"
           $343 = ((($342)) + 16|0); //@line 763 "stream_encoder.c"
           $344 = $9; //@line 763 "stream_encoder.c"
           $345 = ((($344)) + 4|0); //@line 763 "stream_encoder.c"
           $346 = HEAP32[$345>>2]|0; //@line 763 "stream_encoder.c"
           $347 = ((($346)) + 7048|0); //@line 763 "stream_encoder.c"
           HEAP32[$347>>2] = $343; //@line 763 "stream_encoder.c"
          }
         } while(0);
         $350 = $9; //@line 770 "stream_encoder.c"
         $351 = HEAP32[$350>>2]|0; //@line 770 "stream_encoder.c"
         $352 = ((($351)) + 600|0); //@line 770 "stream_encoder.c"
         $353 = HEAP32[$352>>2]|0; //@line 770 "stream_encoder.c"
         $354 = (0|0)==($353|0); //@line 770 "stream_encoder.c"
         do {
          if ($354) {
           $355 = $9; //@line 770 "stream_encoder.c"
           $356 = HEAP32[$355>>2]|0; //@line 770 "stream_encoder.c"
           $357 = ((($356)) + 604|0); //@line 770 "stream_encoder.c"
           $358 = HEAP32[$357>>2]|0; //@line 770 "stream_encoder.c"
           $359 = ($358>>>0)>(0); //@line 770 "stream_encoder.c"
           if (!($359)) {
            break;
           }
           $8 = 12; //@line 771 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
          }
         } while(0);
         $18 = 0; //@line 772 "stream_encoder.c"
         $19 = 0; //@line 773 "stream_encoder.c"
         $20 = 0; //@line 774 "stream_encoder.c"
         $21 = 0; //@line 775 "stream_encoder.c"
         $17 = 0; //@line 776 "stream_encoder.c"
         L138: while(1) {
          $360 = $17; //@line 776 "stream_encoder.c"
          $361 = $9; //@line 776 "stream_encoder.c"
          $362 = HEAP32[$361>>2]|0; //@line 776 "stream_encoder.c"
          $363 = ((($362)) + 604|0); //@line 776 "stream_encoder.c"
          $364 = HEAP32[$363>>2]|0; //@line 776 "stream_encoder.c"
          $365 = ($360>>>0)<($364>>>0); //@line 776 "stream_encoder.c"
          $366 = $9;
          if (!($365)) {
           label = 125;
           break;
          }
          $367 = HEAP32[$366>>2]|0; //@line 777 "stream_encoder.c"
          $368 = ((($367)) + 600|0); //@line 777 "stream_encoder.c"
          $369 = HEAP32[$368>>2]|0; //@line 777 "stream_encoder.c"
          $370 = $17; //@line 777 "stream_encoder.c"
          $371 = (($369) + ($370<<2)|0); //@line 777 "stream_encoder.c"
          $372 = HEAP32[$371>>2]|0; //@line 777 "stream_encoder.c"
          $23 = $372; //@line 777 "stream_encoder.c"
          $373 = $23; //@line 778 "stream_encoder.c"
          $374 = HEAP32[$373>>2]|0; //@line 778 "stream_encoder.c"
          $375 = ($374|0)==(0); //@line 778 "stream_encoder.c"
          if ($375) {
           label = 95;
           break;
          }
          $376 = $23; //@line 780 "stream_encoder.c"
          $377 = HEAP32[$376>>2]|0; //@line 780 "stream_encoder.c"
          $378 = ($377|0)==(3); //@line 780 "stream_encoder.c"
          do {
           if ($378) {
            $379 = $18; //@line 781 "stream_encoder.c"
            $380 = ($379|0)!=(0); //@line 781 "stream_encoder.c"
            if ($380) {
             label = 98;
             break L138;
            }
            $18 = 1; //@line 783 "stream_encoder.c"
            $381 = $23; //@line 784 "stream_encoder.c"
            $382 = ((($381)) + 16|0); //@line 784 "stream_encoder.c"
            $383 = (_FLAC__format_seektable_is_legal($382)|0); //@line 784 "stream_encoder.c"
            $384 = ($383|0)!=(0); //@line 784 "stream_encoder.c"
            if (!($384)) {
             label = 100;
             break L138;
            }
           } else {
            $385 = $23; //@line 787 "stream_encoder.c"
            $386 = HEAP32[$385>>2]|0; //@line 787 "stream_encoder.c"
            $387 = ($386|0)==(4); //@line 787 "stream_encoder.c"
            if ($387) {
             $388 = $19; //@line 788 "stream_encoder.c"
             $389 = ($388|0)!=(0); //@line 788 "stream_encoder.c"
             if ($389) {
              label = 103;
              break L138;
             }
             $19 = 1; //@line 790 "stream_encoder.c"
             break;
            }
            $390 = $23; //@line 792 "stream_encoder.c"
            $391 = HEAP32[$390>>2]|0; //@line 792 "stream_encoder.c"
            $392 = ($391|0)==(5); //@line 792 "stream_encoder.c"
            $393 = $23;
            if ($392) {
             $394 = ((($393)) + 16|0); //@line 793 "stream_encoder.c"
             $395 = $23; //@line 793 "stream_encoder.c"
             $396 = ((($395)) + 16|0); //@line 793 "stream_encoder.c"
             $397 = ((($396)) + 144|0); //@line 793 "stream_encoder.c"
             $398 = HEAP32[$397>>2]|0; //@line 793 "stream_encoder.c"
             $399 = (_FLAC__format_cuesheet_is_legal($394,$398,0)|0); //@line 793 "stream_encoder.c"
             $400 = ($399|0)!=(0); //@line 793 "stream_encoder.c"
             if ($400) {
              break;
             } else {
              label = 107;
              break L138;
             }
            }
            $401 = HEAP32[$393>>2]|0; //@line 796 "stream_encoder.c"
            $402 = ($401|0)==(6); //@line 796 "stream_encoder.c"
            if (!($402)) {
             break;
            }
            $403 = $23; //@line 797 "stream_encoder.c"
            $404 = ((($403)) + 16|0); //@line 797 "stream_encoder.c"
            $405 = (_FLAC__format_picture_is_legal($404,0)|0); //@line 797 "stream_encoder.c"
            $406 = ($405|0)!=(0); //@line 797 "stream_encoder.c"
            if (!($406)) {
             label = 110;
             break L138;
            }
            $407 = $23; //@line 799 "stream_encoder.c"
            $408 = ((($407)) + 16|0); //@line 799 "stream_encoder.c"
            $409 = HEAP32[$408>>2]|0; //@line 799 "stream_encoder.c"
            $410 = ($409|0)==(1); //@line 799 "stream_encoder.c"
            if (!($410)) {
             $439 = $23; //@line 814 "stream_encoder.c"
             $440 = ((($439)) + 16|0); //@line 814 "stream_encoder.c"
             $441 = HEAP32[$440>>2]|0; //@line 814 "stream_encoder.c"
             $442 = ($441|0)==(2); //@line 814 "stream_encoder.c"
             if (!($442)) {
              break;
             }
             $443 = $21; //@line 815 "stream_encoder.c"
             $444 = ($443|0)!=(0); //@line 815 "stream_encoder.c"
             if ($444) {
              label = 122;
              break L138;
             }
             $21 = 1; //@line 817 "stream_encoder.c"
             break;
            }
            $411 = $20; //@line 800 "stream_encoder.c"
            $412 = ($411|0)!=(0); //@line 800 "stream_encoder.c"
            if ($412) {
             label = 113;
             break L138;
            }
            $20 = 1; //@line 802 "stream_encoder.c"
            $413 = $23; //@line 805 "stream_encoder.c"
            $414 = ((($413)) + 16|0); //@line 805 "stream_encoder.c"
            $415 = HEAP32[$414>>2]|0; //@line 805 "stream_encoder.c"
            $416 = ($415|0)==(1); //@line 805 "stream_encoder.c"
            if (!($416)) {
             break;
            }
            $417 = $23; //@line 807 "stream_encoder.c"
            $418 = ((($417)) + 16|0); //@line 807 "stream_encoder.c"
            $419 = ((($418)) + 4|0); //@line 807 "stream_encoder.c"
            $420 = HEAP32[$419>>2]|0; //@line 807 "stream_encoder.c"
            $421 = (_strcmp($420,3448)|0); //@line 807 "stream_encoder.c"
            $422 = ($421|0)!=(0); //@line 807 "stream_encoder.c"
            if ($422) {
             $423 = $23; //@line 807 "stream_encoder.c"
             $424 = ((($423)) + 16|0); //@line 807 "stream_encoder.c"
             $425 = ((($424)) + 4|0); //@line 807 "stream_encoder.c"
             $426 = HEAP32[$425>>2]|0; //@line 807 "stream_encoder.c"
             $427 = (_strcmp($426,3458)|0); //@line 807 "stream_encoder.c"
             $428 = ($427|0)!=(0); //@line 807 "stream_encoder.c"
             if ($428) {
              label = 119;
              break L138;
             }
            }
            $429 = $23; //@line 808 "stream_encoder.c"
            $430 = ((($429)) + 16|0); //@line 808 "stream_encoder.c"
            $431 = ((($430)) + 12|0); //@line 808 "stream_encoder.c"
            $432 = HEAP32[$431>>2]|0; //@line 808 "stream_encoder.c"
            $433 = ($432|0)!=(32); //@line 808 "stream_encoder.c"
            if ($433) {
             label = 119;
             break L138;
            }
            $434 = $23; //@line 809 "stream_encoder.c"
            $435 = ((($434)) + 16|0); //@line 809 "stream_encoder.c"
            $436 = ((($435)) + 16|0); //@line 809 "stream_encoder.c"
            $437 = HEAP32[$436>>2]|0; //@line 809 "stream_encoder.c"
            $438 = ($437|0)!=(32); //@line 809 "stream_encoder.c"
            if ($438) {
             label = 119;
             break L138;
            }
           }
          } while(0);
          $445 = $17; //@line 776 "stream_encoder.c"
          $446 = (($445) + 1)|0; //@line 776 "stream_encoder.c"
          $17 = $446; //@line 776 "stream_encoder.c"
         }
         switch (label|0) {
          case 95: {
           $8 = 12; //@line 779 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 98: {
           $8 = 12; //@line 782 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 100: {
           $8 = 12; //@line 785 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 103: {
           $8 = 12; //@line 789 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 107: {
           $8 = 12; //@line 794 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 110: {
           $8 = 12; //@line 798 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 113: {
           $8 = 12; //@line 801 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 119: {
           $8 = 12; //@line 812 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 122: {
           $8 = 12; //@line 816 "stream_encoder.c"
           $1165 = $8; //@line 1253 "stream_encoder.c"
           STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           break;
          }
          case 125: {
           $447 = ((($366)) + 4|0); //@line 822 "stream_encoder.c"
           $448 = HEAP32[$447>>2]|0; //@line 822 "stream_encoder.c"
           HEAP32[$448>>2] = 0; //@line 822 "stream_encoder.c"
           $17 = 0; //@line 823 "stream_encoder.c"
           while(1) {
            $449 = $17; //@line 823 "stream_encoder.c"
            $450 = $9; //@line 823 "stream_encoder.c"
            $451 = HEAP32[$450>>2]|0; //@line 823 "stream_encoder.c"
            $452 = ((($451)) + 24|0); //@line 823 "stream_encoder.c"
            $453 = HEAP32[$452>>2]|0; //@line 823 "stream_encoder.c"
            $454 = ($449>>>0)<($453>>>0); //@line 823 "stream_encoder.c"
            if (!($454)) {
             break;
            }
            $455 = $9; //@line 824 "stream_encoder.c"
            $456 = ((($455)) + 4|0); //@line 824 "stream_encoder.c"
            $457 = HEAP32[$456>>2]|0; //@line 824 "stream_encoder.c"
            $458 = ((($457)) + 4|0); //@line 824 "stream_encoder.c"
            $459 = $17; //@line 824 "stream_encoder.c"
            $460 = (($458) + ($459<<2)|0); //@line 824 "stream_encoder.c"
            HEAP32[$460>>2] = 0; //@line 824 "stream_encoder.c"
            $461 = $9; //@line 824 "stream_encoder.c"
            $462 = ((($461)) + 4|0); //@line 824 "stream_encoder.c"
            $463 = HEAP32[$462>>2]|0; //@line 824 "stream_encoder.c"
            $464 = ((($463)) + 7352|0); //@line 824 "stream_encoder.c"
            $465 = $17; //@line 824 "stream_encoder.c"
            $466 = (($464) + ($465<<2)|0); //@line 824 "stream_encoder.c"
            HEAP32[$466>>2] = 0; //@line 824 "stream_encoder.c"
            $467 = $9; //@line 826 "stream_encoder.c"
            $468 = ((($467)) + 4|0); //@line 826 "stream_encoder.c"
            $469 = HEAP32[$468>>2]|0; //@line 826 "stream_encoder.c"
            $470 = ((($469)) + 44|0); //@line 826 "stream_encoder.c"
            $471 = $17; //@line 826 "stream_encoder.c"
            $472 = (($470) + ($471<<2)|0); //@line 826 "stream_encoder.c"
            HEAP32[$472>>2] = 0; //@line 826 "stream_encoder.c"
            $473 = $9; //@line 826 "stream_encoder.c"
            $474 = ((($473)) + 4|0); //@line 826 "stream_encoder.c"
            $475 = HEAP32[$474>>2]|0; //@line 826 "stream_encoder.c"
            $476 = ((($475)) + 7392|0); //@line 826 "stream_encoder.c"
            $477 = $17; //@line 826 "stream_encoder.c"
            $478 = (($476) + ($477<<2)|0); //@line 826 "stream_encoder.c"
            HEAP32[$478>>2] = 0; //@line 826 "stream_encoder.c"
            $479 = $17; //@line 823 "stream_encoder.c"
            $480 = (($479) + 1)|0; //@line 823 "stream_encoder.c"
            $17 = $480; //@line 823 "stream_encoder.c"
           }
           $17 = 0; //@line 829 "stream_encoder.c"
           while(1) {
            $481 = $17; //@line 829 "stream_encoder.c"
            $482 = ($481>>>0)<(2); //@line 829 "stream_encoder.c"
            if (!($482)) {
             break;
            }
            $483 = $9; //@line 830 "stream_encoder.c"
            $484 = ((($483)) + 4|0); //@line 830 "stream_encoder.c"
            $485 = HEAP32[$484>>2]|0; //@line 830 "stream_encoder.c"
            $486 = ((($485)) + 36|0); //@line 830 "stream_encoder.c"
            $487 = $17; //@line 830 "stream_encoder.c"
            $488 = (($486) + ($487<<2)|0); //@line 830 "stream_encoder.c"
            HEAP32[$488>>2] = 0; //@line 830 "stream_encoder.c"
            $489 = $9; //@line 830 "stream_encoder.c"
            $490 = ((($489)) + 4|0); //@line 830 "stream_encoder.c"
            $491 = HEAP32[$490>>2]|0; //@line 830 "stream_encoder.c"
            $492 = ((($491)) + 7384|0); //@line 830 "stream_encoder.c"
            $493 = $17; //@line 830 "stream_encoder.c"
            $494 = (($492) + ($493<<2)|0); //@line 830 "stream_encoder.c"
            HEAP32[$494>>2] = 0; //@line 830 "stream_encoder.c"
            $495 = $9; //@line 832 "stream_encoder.c"
            $496 = ((($495)) + 4|0); //@line 832 "stream_encoder.c"
            $497 = HEAP32[$496>>2]|0; //@line 832 "stream_encoder.c"
            $498 = ((($497)) + 76|0); //@line 832 "stream_encoder.c"
            $499 = $17; //@line 832 "stream_encoder.c"
            $500 = (($498) + ($499<<2)|0); //@line 832 "stream_encoder.c"
            HEAP32[$500>>2] = 0; //@line 832 "stream_encoder.c"
            $501 = $9; //@line 832 "stream_encoder.c"
            $502 = ((($501)) + 4|0); //@line 832 "stream_encoder.c"
            $503 = HEAP32[$502>>2]|0; //@line 832 "stream_encoder.c"
            $504 = ((($503)) + 7424|0); //@line 832 "stream_encoder.c"
            $505 = $17; //@line 832 "stream_encoder.c"
            $506 = (($504) + ($505<<2)|0); //@line 832 "stream_encoder.c"
            HEAP32[$506>>2] = 0; //@line 832 "stream_encoder.c"
            $507 = $17; //@line 829 "stream_encoder.c"
            $508 = (($507) + 1)|0; //@line 829 "stream_encoder.c"
            $17 = $508; //@line 829 "stream_encoder.c"
           }
           $17 = 0; //@line 836 "stream_encoder.c"
           while(1) {
            $509 = $17; //@line 836 "stream_encoder.c"
            $510 = $9; //@line 836 "stream_encoder.c"
            $511 = HEAP32[$510>>2]|0; //@line 836 "stream_encoder.c"
            $512 = ((($511)) + 40|0); //@line 836 "stream_encoder.c"
            $513 = HEAP32[$512>>2]|0; //@line 836 "stream_encoder.c"
            $514 = ($509>>>0)<($513>>>0); //@line 836 "stream_encoder.c"
            $515 = $9;
            $516 = ((($515)) + 4|0);
            $517 = HEAP32[$516>>2]|0;
            if (!($514)) {
             break;
            }
            $518 = ((($517)) + 84|0); //@line 837 "stream_encoder.c"
            $519 = $17; //@line 837 "stream_encoder.c"
            $520 = (($518) + ($519<<2)|0); //@line 837 "stream_encoder.c"
            HEAP32[$520>>2] = 0; //@line 837 "stream_encoder.c"
            $521 = $9; //@line 837 "stream_encoder.c"
            $522 = ((($521)) + 4|0); //@line 837 "stream_encoder.c"
            $523 = HEAP32[$522>>2]|0; //@line 837 "stream_encoder.c"
            $524 = ((($523)) + 7432|0); //@line 837 "stream_encoder.c"
            $525 = $17; //@line 837 "stream_encoder.c"
            $526 = (($524) + ($525<<2)|0); //@line 837 "stream_encoder.c"
            HEAP32[$526>>2] = 0; //@line 837 "stream_encoder.c"
            $527 = $17; //@line 836 "stream_encoder.c"
            $528 = (($527) + 1)|0; //@line 836 "stream_encoder.c"
            $17 = $528; //@line 836 "stream_encoder.c"
           }
           $529 = ((($517)) + 212|0); //@line 838 "stream_encoder.c"
           HEAP32[$529>>2] = 0; //@line 838 "stream_encoder.c"
           $530 = $9; //@line 838 "stream_encoder.c"
           $531 = ((($530)) + 4|0); //@line 838 "stream_encoder.c"
           $532 = HEAP32[$531>>2]|0; //@line 838 "stream_encoder.c"
           $533 = ((($532)) + 7560|0); //@line 838 "stream_encoder.c"
           HEAP32[$533>>2] = 0; //@line 838 "stream_encoder.c"
           $17 = 0; //@line 840 "stream_encoder.c"
           while(1) {
            $534 = $17; //@line 840 "stream_encoder.c"
            $535 = $9; //@line 840 "stream_encoder.c"
            $536 = HEAP32[$535>>2]|0; //@line 840 "stream_encoder.c"
            $537 = ((($536)) + 24|0); //@line 840 "stream_encoder.c"
            $538 = HEAP32[$537>>2]|0; //@line 840 "stream_encoder.c"
            $539 = ($534>>>0)<($538>>>0); //@line 840 "stream_encoder.c"
            if (!($539)) {
             break;
            }
            $540 = $9; //@line 841 "stream_encoder.c"
            $541 = ((($540)) + 4|0); //@line 841 "stream_encoder.c"
            $542 = HEAP32[$541>>2]|0; //@line 841 "stream_encoder.c"
            $543 = ((($542)) + 256|0); //@line 841 "stream_encoder.c"
            $544 = $17; //@line 841 "stream_encoder.c"
            $545 = (($543) + ($544<<3)|0); //@line 841 "stream_encoder.c"
            HEAP32[$545>>2] = 0; //@line 841 "stream_encoder.c"
            $546 = $9; //@line 841 "stream_encoder.c"
            $547 = ((($546)) + 4|0); //@line 841 "stream_encoder.c"
            $548 = HEAP32[$547>>2]|0; //@line 841 "stream_encoder.c"
            $549 = ((($548)) + 7564|0); //@line 841 "stream_encoder.c"
            $550 = $17; //@line 841 "stream_encoder.c"
            $551 = (($549) + ($550<<3)|0); //@line 841 "stream_encoder.c"
            HEAP32[$551>>2] = 0; //@line 841 "stream_encoder.c"
            $552 = $9; //@line 842 "stream_encoder.c"
            $553 = ((($552)) + 4|0); //@line 842 "stream_encoder.c"
            $554 = HEAP32[$553>>2]|0; //@line 842 "stream_encoder.c"
            $555 = ((($554)) + 256|0); //@line 842 "stream_encoder.c"
            $556 = $17; //@line 842 "stream_encoder.c"
            $557 = (($555) + ($556<<3)|0); //@line 842 "stream_encoder.c"
            $558 = ((($557)) + 4|0); //@line 842 "stream_encoder.c"
            HEAP32[$558>>2] = 0; //@line 842 "stream_encoder.c"
            $559 = $9; //@line 842 "stream_encoder.c"
            $560 = ((($559)) + 4|0); //@line 842 "stream_encoder.c"
            $561 = HEAP32[$560>>2]|0; //@line 842 "stream_encoder.c"
            $562 = ((($561)) + 7564|0); //@line 842 "stream_encoder.c"
            $563 = $17; //@line 842 "stream_encoder.c"
            $564 = (($562) + ($563<<3)|0); //@line 842 "stream_encoder.c"
            $565 = ((($564)) + 4|0); //@line 842 "stream_encoder.c"
            HEAP32[$565>>2] = 0; //@line 842 "stream_encoder.c"
            $566 = $9; //@line 843 "stream_encoder.c"
            $567 = ((($566)) + 4|0); //@line 843 "stream_encoder.c"
            $568 = HEAP32[$567>>2]|0; //@line 843 "stream_encoder.c"
            $569 = ((($568)) + 6768|0); //@line 843 "stream_encoder.c"
            $570 = $17; //@line 843 "stream_encoder.c"
            $571 = (($569) + ($570<<2)|0); //@line 843 "stream_encoder.c"
            HEAP32[$571>>2] = 0; //@line 843 "stream_encoder.c"
            $572 = $17; //@line 840 "stream_encoder.c"
            $573 = (($572) + 1)|0; //@line 840 "stream_encoder.c"
            $17 = $573; //@line 840 "stream_encoder.c"
           }
           $17 = 0; //@line 845 "stream_encoder.c"
           while(1) {
            $574 = $17; //@line 845 "stream_encoder.c"
            $575 = ($574>>>0)<(2); //@line 845 "stream_encoder.c"
            $576 = $9;
            $577 = ((($576)) + 4|0);
            $578 = HEAP32[$577>>2]|0;
            if (!($575)) {
             break;
            }
            $579 = ((($578)) + 320|0); //@line 846 "stream_encoder.c"
            $580 = $17; //@line 846 "stream_encoder.c"
            $581 = (($579) + ($580<<3)|0); //@line 846 "stream_encoder.c"
            HEAP32[$581>>2] = 0; //@line 846 "stream_encoder.c"
            $582 = $9; //@line 846 "stream_encoder.c"
            $583 = ((($582)) + 4|0); //@line 846 "stream_encoder.c"
            $584 = HEAP32[$583>>2]|0; //@line 846 "stream_encoder.c"
            $585 = ((($584)) + 7628|0); //@line 846 "stream_encoder.c"
            $586 = $17; //@line 846 "stream_encoder.c"
            $587 = (($585) + ($586<<3)|0); //@line 846 "stream_encoder.c"
            HEAP32[$587>>2] = 0; //@line 846 "stream_encoder.c"
            $588 = $9; //@line 847 "stream_encoder.c"
            $589 = ((($588)) + 4|0); //@line 847 "stream_encoder.c"
            $590 = HEAP32[$589>>2]|0; //@line 847 "stream_encoder.c"
            $591 = ((($590)) + 320|0); //@line 847 "stream_encoder.c"
            $592 = $17; //@line 847 "stream_encoder.c"
            $593 = (($591) + ($592<<3)|0); //@line 847 "stream_encoder.c"
            $594 = ((($593)) + 4|0); //@line 847 "stream_encoder.c"
            HEAP32[$594>>2] = 0; //@line 847 "stream_encoder.c"
            $595 = $9; //@line 847 "stream_encoder.c"
            $596 = ((($595)) + 4|0); //@line 847 "stream_encoder.c"
            $597 = HEAP32[$596>>2]|0; //@line 847 "stream_encoder.c"
            $598 = ((($597)) + 7628|0); //@line 847 "stream_encoder.c"
            $599 = $17; //@line 847 "stream_encoder.c"
            $600 = (($598) + ($599<<3)|0); //@line 847 "stream_encoder.c"
            $601 = ((($600)) + 4|0); //@line 847 "stream_encoder.c"
            HEAP32[$601>>2] = 0; //@line 847 "stream_encoder.c"
            $602 = $9; //@line 848 "stream_encoder.c"
            $603 = ((($602)) + 4|0); //@line 848 "stream_encoder.c"
            $604 = HEAP32[$603>>2]|0; //@line 848 "stream_encoder.c"
            $605 = ((($604)) + 6800|0); //@line 848 "stream_encoder.c"
            $606 = $17; //@line 848 "stream_encoder.c"
            $607 = (($605) + ($606<<2)|0); //@line 848 "stream_encoder.c"
            HEAP32[$607>>2] = 0; //@line 848 "stream_encoder.c"
            $608 = $17; //@line 845 "stream_encoder.c"
            $609 = (($608) + 1)|0; //@line 845 "stream_encoder.c"
            $17 = $609; //@line 845 "stream_encoder.c"
           }
           $610 = ((($578)) + 6848|0); //@line 850 "stream_encoder.c"
           HEAP32[$610>>2] = 0; //@line 850 "stream_encoder.c"
           $611 = $9; //@line 850 "stream_encoder.c"
           $612 = ((($611)) + 4|0); //@line 850 "stream_encoder.c"
           $613 = HEAP32[$612>>2]|0; //@line 850 "stream_encoder.c"
           $614 = ((($613)) + 7644|0); //@line 850 "stream_encoder.c"
           HEAP32[$614>>2] = 0; //@line 850 "stream_encoder.c"
           $615 = $9; //@line 851 "stream_encoder.c"
           $616 = ((($615)) + 4|0); //@line 851 "stream_encoder.c"
           $617 = HEAP32[$616>>2]|0; //@line 851 "stream_encoder.c"
           $618 = ((($617)) + 6852|0); //@line 851 "stream_encoder.c"
           HEAP32[$618>>2] = 0; //@line 851 "stream_encoder.c"
           $619 = $9; //@line 851 "stream_encoder.c"
           $620 = ((($619)) + 4|0); //@line 851 "stream_encoder.c"
           $621 = HEAP32[$620>>2]|0; //@line 851 "stream_encoder.c"
           $622 = ((($621)) + 7648|0); //@line 851 "stream_encoder.c"
           HEAP32[$622>>2] = 0; //@line 851 "stream_encoder.c"
           $623 = $9; //@line 853 "stream_encoder.c"
           $624 = HEAP32[$623>>2]|0; //@line 853 "stream_encoder.c"
           $625 = ((($624)) + 32|0); //@line 853 "stream_encoder.c"
           $626 = HEAP32[$625>>2]|0; //@line 853 "stream_encoder.c"
           $627 = (+($626>>>0)); //@line 853 "stream_encoder.c"
           $628 = $627 * 0.40000000000000002; //@line 853 "stream_encoder.c"
           $629 = $9; //@line 853 "stream_encoder.c"
           $630 = HEAP32[$629>>2]|0; //@line 853 "stream_encoder.c"
           $631 = ((($630)) + 36|0); //@line 853 "stream_encoder.c"
           $632 = HEAP32[$631>>2]|0; //@line 853 "stream_encoder.c"
           $633 = (+($632>>>0)); //@line 853 "stream_encoder.c"
           $634 = $628 / $633; //@line 853 "stream_encoder.c"
           $635 = $634 + 0.5; //@line 853 "stream_encoder.c"
           $636 = (~~(($635))>>>0); //@line 853 "stream_encoder.c"
           $637 = $9; //@line 853 "stream_encoder.c"
           $638 = ((($637)) + 4|0); //@line 853 "stream_encoder.c"
           $639 = HEAP32[$638>>2]|0; //@line 853 "stream_encoder.c"
           $640 = ((($639)) + 6860|0); //@line 853 "stream_encoder.c"
           HEAP32[$640>>2] = $636; //@line 853 "stream_encoder.c"
           $641 = $9; //@line 863 "stream_encoder.c"
           $642 = ((($641)) + 4|0); //@line 863 "stream_encoder.c"
           $643 = HEAP32[$642>>2]|0; //@line 863 "stream_encoder.c"
           $644 = ((($643)) + 6860|0); //@line 863 "stream_encoder.c"
           $645 = HEAP32[$644>>2]|0; //@line 863 "stream_encoder.c"
           $646 = ($645|0)==(0); //@line 863 "stream_encoder.c"
           if ($646) {
            $647 = $9; //@line 864 "stream_encoder.c"
            $648 = ((($647)) + 4|0); //@line 864 "stream_encoder.c"
            $649 = HEAP32[$648>>2]|0; //@line 864 "stream_encoder.c"
            $650 = ((($649)) + 6860|0); //@line 864 "stream_encoder.c"
            HEAP32[$650>>2] = 1; //@line 864 "stream_encoder.c"
           }
           $651 = $9; //@line 865 "stream_encoder.c"
           $652 = ((($651)) + 4|0); //@line 865 "stream_encoder.c"
           $653 = HEAP32[$652>>2]|0; //@line 865 "stream_encoder.c"
           $654 = ((($653)) + 6864|0); //@line 865 "stream_encoder.c"
           HEAP32[$654>>2] = 0; //@line 865 "stream_encoder.c"
           $655 = $9; //@line 866 "stream_encoder.c"
           $656 = ((($655)) + 4|0); //@line 866 "stream_encoder.c"
           $657 = HEAP32[$656>>2]|0; //@line 866 "stream_encoder.c"
           $658 = ((($657)) + 7052|0); //@line 866 "stream_encoder.c"
           HEAP32[$658>>2] = 0; //@line 866 "stream_encoder.c"
           $659 = $9; //@line 867 "stream_encoder.c"
           $660 = ((($659)) + 4|0); //@line 867 "stream_encoder.c"
           $661 = HEAP32[$660>>2]|0; //@line 867 "stream_encoder.c"
           $662 = ((($661)) + 7056|0); //@line 867 "stream_encoder.c"
           HEAP32[$662>>2] = 0; //@line 867 "stream_encoder.c"
           $663 = $9; //@line 872 "stream_encoder.c"
           $664 = ((($663)) + 4|0); //@line 872 "stream_encoder.c"
           $665 = HEAP32[$664>>2]|0; //@line 872 "stream_encoder.c"
           $666 = ((($665)) + 7156|0); //@line 872 "stream_encoder.c"
           _FLAC__cpu_info($666); //@line 872 "stream_encoder.c"
           $667 = $9; //@line 875 "stream_encoder.c"
           $668 = ((($667)) + 4|0); //@line 875 "stream_encoder.c"
           $669 = HEAP32[$668>>2]|0; //@line 875 "stream_encoder.c"
           $670 = ((($669)) + 7256|0); //@line 875 "stream_encoder.c"
           HEAP32[$670>>2] = 14; //@line 875 "stream_encoder.c"
           $671 = $9; //@line 877 "stream_encoder.c"
           $672 = ((($671)) + 4|0); //@line 877 "stream_encoder.c"
           $673 = HEAP32[$672>>2]|0; //@line 877 "stream_encoder.c"
           $674 = ((($673)) + 7244|0); //@line 877 "stream_encoder.c"
           HEAP32[$674>>2] = 15; //@line 877 "stream_encoder.c"
           $675 = $9; //@line 878 "stream_encoder.c"
           $676 = ((($675)) + 4|0); //@line 878 "stream_encoder.c"
           $677 = HEAP32[$676>>2]|0; //@line 878 "stream_encoder.c"
           $678 = ((($677)) + 7248|0); //@line 878 "stream_encoder.c"
           HEAP32[$678>>2] = 16; //@line 878 "stream_encoder.c"
           $679 = $9; //@line 879 "stream_encoder.c"
           $680 = ((($679)) + 4|0); //@line 879 "stream_encoder.c"
           $681 = HEAP32[$680>>2]|0; //@line 879 "stream_encoder.c"
           $682 = ((($681)) + 7252|0); //@line 879 "stream_encoder.c"
           HEAP32[$682>>2] = 17; //@line 879 "stream_encoder.c"
           $683 = $9; //@line 881 "stream_encoder.c"
           $684 = ((($683)) + 4|0); //@line 881 "stream_encoder.c"
           $685 = HEAP32[$684>>2]|0; //@line 881 "stream_encoder.c"
           $686 = ((($685)) + 7260|0); //@line 881 "stream_encoder.c"
           HEAP32[$686>>2] = 18; //@line 881 "stream_encoder.c"
           $687 = $9; //@line 882 "stream_encoder.c"
           $688 = ((($687)) + 4|0); //@line 882 "stream_encoder.c"
           $689 = HEAP32[$688>>2]|0; //@line 882 "stream_encoder.c"
           $690 = ((($689)) + 7264|0); //@line 882 "stream_encoder.c"
           HEAP32[$690>>2] = 19; //@line 882 "stream_encoder.c"
           $691 = $9; //@line 883 "stream_encoder.c"
           $692 = ((($691)) + 4|0); //@line 883 "stream_encoder.c"
           $693 = HEAP32[$692>>2]|0; //@line 883 "stream_encoder.c"
           $694 = ((($693)) + 7268|0); //@line 883 "stream_encoder.c"
           HEAP32[$694>>2] = 18; //@line 883 "stream_encoder.c"
           $695 = $9; //@line 1072 "stream_encoder.c"
           $696 = HEAP32[$695>>2]|0; //@line 1072 "stream_encoder.c"
           HEAP32[$696>>2] = 0; //@line 1072 "stream_encoder.c"
           $697 = $10; //@line 1082 "stream_encoder.c"
           $698 = $9; //@line 1082 "stream_encoder.c"
           $699 = ((($698)) + 4|0); //@line 1082 "stream_encoder.c"
           $700 = HEAP32[$699>>2]|0; //@line 1082 "stream_encoder.c"
           $701 = ((($700)) + 7288|0); //@line 1082 "stream_encoder.c"
           HEAP32[$701>>2] = $697; //@line 1082 "stream_encoder.c"
           $702 = $11; //@line 1083 "stream_encoder.c"
           $703 = $9; //@line 1083 "stream_encoder.c"
           $704 = ((($703)) + 4|0); //@line 1083 "stream_encoder.c"
           $705 = HEAP32[$704>>2]|0; //@line 1083 "stream_encoder.c"
           $706 = ((($705)) + 7300|0); //@line 1083 "stream_encoder.c"
           HEAP32[$706>>2] = $702; //@line 1083 "stream_encoder.c"
           $707 = $12; //@line 1084 "stream_encoder.c"
           $708 = $9; //@line 1084 "stream_encoder.c"
           $709 = ((($708)) + 4|0); //@line 1084 "stream_encoder.c"
           $710 = HEAP32[$709>>2]|0; //@line 1084 "stream_encoder.c"
           $711 = ((($710)) + 7292|0); //@line 1084 "stream_encoder.c"
           HEAP32[$711>>2] = $707; //@line 1084 "stream_encoder.c"
           $712 = $13; //@line 1085 "stream_encoder.c"
           $713 = $9; //@line 1085 "stream_encoder.c"
           $714 = ((($713)) + 4|0); //@line 1085 "stream_encoder.c"
           $715 = HEAP32[$714>>2]|0; //@line 1085 "stream_encoder.c"
           $716 = ((($715)) + 7296|0); //@line 1085 "stream_encoder.c"
           HEAP32[$716>>2] = $712; //@line 1085 "stream_encoder.c"
           $717 = $14; //@line 1086 "stream_encoder.c"
           $718 = $9; //@line 1086 "stream_encoder.c"
           $719 = ((($718)) + 4|0); //@line 1086 "stream_encoder.c"
           $720 = HEAP32[$719>>2]|0; //@line 1086 "stream_encoder.c"
           $721 = ((($720)) + 7304|0); //@line 1086 "stream_encoder.c"
           HEAP32[$721>>2] = $717; //@line 1086 "stream_encoder.c"
           $722 = $15; //@line 1087 "stream_encoder.c"
           $723 = $9; //@line 1087 "stream_encoder.c"
           $724 = ((($723)) + 4|0); //@line 1087 "stream_encoder.c"
           $725 = HEAP32[$724>>2]|0; //@line 1087 "stream_encoder.c"
           $726 = ((($725)) + 7312|0); //@line 1087 "stream_encoder.c"
           HEAP32[$726>>2] = $722; //@line 1087 "stream_encoder.c"
           $727 = $9; //@line 1089 "stream_encoder.c"
           $728 = $9; //@line 1089 "stream_encoder.c"
           $729 = HEAP32[$728>>2]|0; //@line 1089 "stream_encoder.c"
           $730 = ((($729)) + 36|0); //@line 1089 "stream_encoder.c"
           $731 = HEAP32[$730>>2]|0; //@line 1089 "stream_encoder.c"
           $732 = (_resize_buffers_($727,$731)|0); //@line 1089 "stream_encoder.c"
           $733 = ($732|0)!=(0); //@line 1089 "stream_encoder.c"
           if (!($733)) {
            $8 = 1; //@line 1091 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $734 = $9; //@line 1094 "stream_encoder.c"
           $735 = ((($734)) + 4|0); //@line 1094 "stream_encoder.c"
           $736 = HEAP32[$735>>2]|0; //@line 1094 "stream_encoder.c"
           $737 = ((($736)) + 6856|0); //@line 1094 "stream_encoder.c"
           $738 = HEAP32[$737>>2]|0; //@line 1094 "stream_encoder.c"
           $739 = (_FLAC__bitwriter_init($738)|0); //@line 1094 "stream_encoder.c"
           $740 = ($739|0)!=(0); //@line 1094 "stream_encoder.c"
           $741 = $9;
           $742 = HEAP32[$741>>2]|0;
           if (!($740)) {
            HEAP32[$742>>2] = 8; //@line 1095 "stream_encoder.c"
            $8 = 1; //@line 1096 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $743 = ((($742)) + 4|0); //@line 1102 "stream_encoder.c"
           $744 = HEAP32[$743>>2]|0; //@line 1102 "stream_encoder.c"
           $745 = ($744|0)!=(0); //@line 1102 "stream_encoder.c"
           do {
            if ($745) {
             $746 = $9; //@line 1107 "stream_encoder.c"
             $747 = HEAP32[$746>>2]|0; //@line 1107 "stream_encoder.c"
             $748 = ((($747)) + 36|0); //@line 1107 "stream_encoder.c"
             $749 = HEAP32[$748>>2]|0; //@line 1107 "stream_encoder.c"
             $750 = (($749) + 1)|0; //@line 1107 "stream_encoder.c"
             $751 = $9; //@line 1107 "stream_encoder.c"
             $752 = ((($751)) + 4|0); //@line 1107 "stream_encoder.c"
             $753 = HEAP32[$752>>2]|0; //@line 1107 "stream_encoder.c"
             $754 = ((($753)) + 11776|0); //@line 1107 "stream_encoder.c"
             $755 = ((($754)) + 12|0); //@line 1107 "stream_encoder.c"
             $756 = ((($755)) + 32|0); //@line 1107 "stream_encoder.c"
             HEAP32[$756>>2] = $750; //@line 1107 "stream_encoder.c"
             $17 = 0; //@line 1108 "stream_encoder.c"
             while(1) {
              $757 = $17; //@line 1108 "stream_encoder.c"
              $758 = $9; //@line 1108 "stream_encoder.c"
              $759 = HEAP32[$758>>2]|0; //@line 1108 "stream_encoder.c"
              $760 = ((($759)) + 24|0); //@line 1108 "stream_encoder.c"
              $761 = HEAP32[$760>>2]|0; //@line 1108 "stream_encoder.c"
              $762 = ($757>>>0)<($761>>>0); //@line 1108 "stream_encoder.c"
              $763 = $9;
              $764 = ((($763)) + 4|0);
              $765 = HEAP32[$764>>2]|0;
              $766 = ((($765)) + 11776|0);
              $767 = ((($766)) + 12|0);
              if (!($762)) {
               break;
              }
              $768 = ((($767)) + 32|0); //@line 1109 "stream_encoder.c"
              $769 = HEAP32[$768>>2]|0; //@line 1109 "stream_encoder.c"
              $770 = (_safe_malloc_mul_2op_p(4,$769)|0); //@line 1109 "stream_encoder.c"
              $771 = $9; //@line 1109 "stream_encoder.c"
              $772 = ((($771)) + 4|0); //@line 1109 "stream_encoder.c"
              $773 = HEAP32[$772>>2]|0; //@line 1109 "stream_encoder.c"
              $774 = ((($773)) + 11776|0); //@line 1109 "stream_encoder.c"
              $775 = ((($774)) + 12|0); //@line 1109 "stream_encoder.c"
              $776 = $17; //@line 1109 "stream_encoder.c"
              $777 = (($775) + ($776<<2)|0); //@line 1109 "stream_encoder.c"
              HEAP32[$777>>2] = $770; //@line 1109 "stream_encoder.c"
              $778 = (0|0)==($770|0); //@line 1109 "stream_encoder.c"
              if ($778) {
               label = 150;
               break;
              }
              $781 = $17; //@line 1108 "stream_encoder.c"
              $782 = (($781) + 1)|0; //@line 1108 "stream_encoder.c"
              $17 = $782; //@line 1108 "stream_encoder.c"
             }
             if ((label|0) == 150) {
              $779 = $9; //@line 1110 "stream_encoder.c"
              $780 = HEAP32[$779>>2]|0; //@line 1110 "stream_encoder.c"
              HEAP32[$780>>2] = 8; //@line 1110 "stream_encoder.c"
              $8 = 1; //@line 1111 "stream_encoder.c"
              $1165 = $8; //@line 1253 "stream_encoder.c"
              STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
             }
             $783 = ((($767)) + 36|0); //@line 1114 "stream_encoder.c"
             HEAP32[$783>>2] = 0; //@line 1114 "stream_encoder.c"
             $784 = $9; //@line 1119 "stream_encoder.c"
             $785 = ((($784)) + 4|0); //@line 1119 "stream_encoder.c"
             $786 = HEAP32[$785>>2]|0; //@line 1119 "stream_encoder.c"
             $787 = ((($786)) + 11776|0); //@line 1119 "stream_encoder.c"
             $788 = HEAP32[$787>>2]|0; //@line 1119 "stream_encoder.c"
             $789 = (0|0)==($788|0); //@line 1119 "stream_encoder.c"
             do {
              if ($789) {
               $790 = (_FLAC__stream_decoder_new()|0); //@line 1120 "stream_encoder.c"
               $791 = $9; //@line 1120 "stream_encoder.c"
               $792 = ((($791)) + 4|0); //@line 1120 "stream_encoder.c"
               $793 = HEAP32[$792>>2]|0; //@line 1120 "stream_encoder.c"
               $794 = ((($793)) + 11776|0); //@line 1120 "stream_encoder.c"
               HEAP32[$794>>2] = $790; //@line 1120 "stream_encoder.c"
               $795 = $9; //@line 1121 "stream_encoder.c"
               $796 = ((($795)) + 4|0); //@line 1121 "stream_encoder.c"
               $797 = HEAP32[$796>>2]|0; //@line 1121 "stream_encoder.c"
               $798 = ((($797)) + 11776|0); //@line 1121 "stream_encoder.c"
               $799 = HEAP32[$798>>2]|0; //@line 1121 "stream_encoder.c"
               $800 = (0|0)==($799|0); //@line 1121 "stream_encoder.c"
               if (!($800)) {
                break;
               }
               $801 = $9; //@line 1122 "stream_encoder.c"
               $802 = HEAP32[$801>>2]|0; //@line 1122 "stream_encoder.c"
               HEAP32[$802>>2] = 3; //@line 1122 "stream_encoder.c"
               $8 = 1; //@line 1123 "stream_encoder.c"
               $1165 = $8; //@line 1253 "stream_encoder.c"
               STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
              }
             } while(0);
             $803 = $9; //@line 1127 "stream_encoder.c"
             $804 = ((($803)) + 4|0); //@line 1127 "stream_encoder.c"
             $805 = HEAP32[$804>>2]|0; //@line 1127 "stream_encoder.c"
             $806 = ((($805)) + 11776|0); //@line 1127 "stream_encoder.c"
             $807 = HEAP32[$806>>2]|0; //@line 1127 "stream_encoder.c"
             $808 = $9; //@line 1127 "stream_encoder.c"
             $809 = (_FLAC__stream_decoder_init_stream($807,20,0,0,0,0,21,22,23,$808)|0); //@line 1127 "stream_encoder.c"
             $810 = ($809|0)!=(0); //@line 1127 "stream_encoder.c"
             if (!($810)) {
              break;
             }
             $811 = $9; //@line 1128 "stream_encoder.c"
             $812 = HEAP32[$811>>2]|0; //@line 1128 "stream_encoder.c"
             HEAP32[$812>>2] = 3; //@line 1128 "stream_encoder.c"
             $8 = 1; //@line 1129 "stream_encoder.c"
             $1165 = $8; //@line 1253 "stream_encoder.c"
             STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
            }
           } while(0);
           $813 = $9; //@line 1132 "stream_encoder.c"
           $814 = ((($813)) + 4|0); //@line 1132 "stream_encoder.c"
           $815 = HEAP32[$814>>2]|0; //@line 1132 "stream_encoder.c"
           $816 = ((($815)) + 11776|0); //@line 1132 "stream_encoder.c"
           $817 = ((($816)) + 64|0); //@line 1132 "stream_encoder.c"
           $818 = $817; //@line 1132 "stream_encoder.c"
           $819 = $818; //@line 1132 "stream_encoder.c"
           HEAP32[$819>>2] = 0; //@line 1132 "stream_encoder.c"
           $820 = (($818) + 4)|0; //@line 1132 "stream_encoder.c"
           $821 = $820; //@line 1132 "stream_encoder.c"
           HEAP32[$821>>2] = 0; //@line 1132 "stream_encoder.c"
           $822 = $9; //@line 1133 "stream_encoder.c"
           $823 = ((($822)) + 4|0); //@line 1133 "stream_encoder.c"
           $824 = HEAP32[$823>>2]|0; //@line 1133 "stream_encoder.c"
           $825 = ((($824)) + 11776|0); //@line 1133 "stream_encoder.c"
           $826 = ((($825)) + 64|0); //@line 1133 "stream_encoder.c"
           $827 = ((($826)) + 8|0); //@line 1133 "stream_encoder.c"
           HEAP32[$827>>2] = 0; //@line 1133 "stream_encoder.c"
           $828 = $9; //@line 1134 "stream_encoder.c"
           $829 = ((($828)) + 4|0); //@line 1134 "stream_encoder.c"
           $830 = HEAP32[$829>>2]|0; //@line 1134 "stream_encoder.c"
           $831 = ((($830)) + 11776|0); //@line 1134 "stream_encoder.c"
           $832 = ((($831)) + 64|0); //@line 1134 "stream_encoder.c"
           $833 = ((($832)) + 12|0); //@line 1134 "stream_encoder.c"
           HEAP32[$833>>2] = 0; //@line 1134 "stream_encoder.c"
           $834 = $9; //@line 1135 "stream_encoder.c"
           $835 = ((($834)) + 4|0); //@line 1135 "stream_encoder.c"
           $836 = HEAP32[$835>>2]|0; //@line 1135 "stream_encoder.c"
           $837 = ((($836)) + 11776|0); //@line 1135 "stream_encoder.c"
           $838 = ((($837)) + 64|0); //@line 1135 "stream_encoder.c"
           $839 = ((($838)) + 16|0); //@line 1135 "stream_encoder.c"
           HEAP32[$839>>2] = 0; //@line 1135 "stream_encoder.c"
           $840 = $9; //@line 1136 "stream_encoder.c"
           $841 = ((($840)) + 4|0); //@line 1136 "stream_encoder.c"
           $842 = HEAP32[$841>>2]|0; //@line 1136 "stream_encoder.c"
           $843 = ((($842)) + 11776|0); //@line 1136 "stream_encoder.c"
           $844 = ((($843)) + 64|0); //@line 1136 "stream_encoder.c"
           $845 = ((($844)) + 20|0); //@line 1136 "stream_encoder.c"
           HEAP32[$845>>2] = 0; //@line 1136 "stream_encoder.c"
           $846 = $9; //@line 1137 "stream_encoder.c"
           $847 = ((($846)) + 4|0); //@line 1137 "stream_encoder.c"
           $848 = HEAP32[$847>>2]|0; //@line 1137 "stream_encoder.c"
           $849 = ((($848)) + 11776|0); //@line 1137 "stream_encoder.c"
           $850 = ((($849)) + 64|0); //@line 1137 "stream_encoder.c"
           $851 = ((($850)) + 24|0); //@line 1137 "stream_encoder.c"
           HEAP32[$851>>2] = 0; //@line 1137 "stream_encoder.c"
           $852 = $9; //@line 1143 "stream_encoder.c"
           $853 = ((($852)) + 4|0); //@line 1143 "stream_encoder.c"
           $854 = HEAP32[$853>>2]|0; //@line 1143 "stream_encoder.c"
           $855 = ((($854)) + 7316|0); //@line 1143 "stream_encoder.c"
           HEAP32[$855>>2] = 0; //@line 1143 "stream_encoder.c"
           $856 = $9; //@line 1144 "stream_encoder.c"
           $857 = ((($856)) + 4|0); //@line 1144 "stream_encoder.c"
           $858 = HEAP32[$857>>2]|0; //@line 1144 "stream_encoder.c"
           $859 = ((($858)) + 7336|0); //@line 1144 "stream_encoder.c"
           $860 = $859; //@line 1144 "stream_encoder.c"
           $861 = $860; //@line 1144 "stream_encoder.c"
           HEAP32[$861>>2] = 0; //@line 1144 "stream_encoder.c"
           $862 = (($860) + 4)|0; //@line 1144 "stream_encoder.c"
           $863 = $862; //@line 1144 "stream_encoder.c"
           HEAP32[$863>>2] = 0; //@line 1144 "stream_encoder.c"
           $864 = $9; //@line 1145 "stream_encoder.c"
           $865 = HEAP32[$864>>2]|0; //@line 1145 "stream_encoder.c"
           $866 = ((($865)) + 608|0); //@line 1145 "stream_encoder.c"
           $867 = $866; //@line 1145 "stream_encoder.c"
           $868 = $867; //@line 1145 "stream_encoder.c"
           HEAP32[$868>>2] = 0; //@line 1145 "stream_encoder.c"
           $869 = (($867) + 4)|0; //@line 1145 "stream_encoder.c"
           $870 = $869; //@line 1145 "stream_encoder.c"
           HEAP32[$870>>2] = 0; //@line 1145 "stream_encoder.c"
           $871 = $9; //@line 1146 "stream_encoder.c"
           $872 = HEAP32[$871>>2]|0; //@line 1146 "stream_encoder.c"
           $873 = ((($872)) + 616|0); //@line 1146 "stream_encoder.c"
           $874 = $873; //@line 1146 "stream_encoder.c"
           $875 = $874; //@line 1146 "stream_encoder.c"
           HEAP32[$875>>2] = 0; //@line 1146 "stream_encoder.c"
           $876 = (($874) + 4)|0; //@line 1146 "stream_encoder.c"
           $877 = $876; //@line 1146 "stream_encoder.c"
           HEAP32[$877>>2] = 0; //@line 1146 "stream_encoder.c"
           $878 = $9; //@line 1147 "stream_encoder.c"
           $879 = HEAP32[$878>>2]|0; //@line 1147 "stream_encoder.c"
           $880 = ((($879)) + 624|0); //@line 1147 "stream_encoder.c"
           $881 = $880; //@line 1147 "stream_encoder.c"
           $882 = $881; //@line 1147 "stream_encoder.c"
           HEAP32[$882>>2] = 0; //@line 1147 "stream_encoder.c"
           $883 = (($881) + 4)|0; //@line 1147 "stream_encoder.c"
           $884 = $883; //@line 1147 "stream_encoder.c"
           HEAP32[$884>>2] = 0; //@line 1147 "stream_encoder.c"
           $885 = $9; //@line 1152 "stream_encoder.c"
           $886 = HEAP32[$885>>2]|0; //@line 1152 "stream_encoder.c"
           $887 = ((($886)) + 4|0); //@line 1152 "stream_encoder.c"
           $888 = HEAP32[$887>>2]|0; //@line 1152 "stream_encoder.c"
           $889 = ($888|0)!=(0); //@line 1152 "stream_encoder.c"
           if ($889) {
            $890 = $9; //@line 1153 "stream_encoder.c"
            $891 = ((($890)) + 4|0); //@line 1153 "stream_encoder.c"
            $892 = HEAP32[$891>>2]|0; //@line 1153 "stream_encoder.c"
            $893 = ((($892)) + 11776|0); //@line 1153 "stream_encoder.c"
            $894 = ((($893)) + 4|0); //@line 1153 "stream_encoder.c"
            HEAP32[$894>>2] = 0; //@line 1153 "stream_encoder.c"
           }
           $895 = $9; //@line 1154 "stream_encoder.c"
           $896 = ((($895)) + 4|0); //@line 1154 "stream_encoder.c"
           $897 = HEAP32[$896>>2]|0; //@line 1154 "stream_encoder.c"
           $898 = ((($897)) + 6856|0); //@line 1154 "stream_encoder.c"
           $899 = HEAP32[$898>>2]|0; //@line 1154 "stream_encoder.c"
           $900 = HEAP32[258]|0; //@line 1154 "stream_encoder.c"
           $901 = HEAP32[265]|0; //@line 1154 "stream_encoder.c"
           $902 = (_FLAC__bitwriter_write_raw_uint32($899,$900,$901)|0); //@line 1154 "stream_encoder.c"
           $903 = ($902|0)!=(0); //@line 1154 "stream_encoder.c"
           $904 = $9;
           if (!($903)) {
            $905 = HEAP32[$904>>2]|0; //@line 1155 "stream_encoder.c"
            HEAP32[$905>>2] = 7; //@line 1155 "stream_encoder.c"
            $8 = 1; //@line 1156 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $906 = (_write_bitbuffer_($904,0,0)|0); //@line 1158 "stream_encoder.c"
           $907 = ($906|0)!=(0); //@line 1158 "stream_encoder.c"
           if (!($907)) {
            $8 = 1; //@line 1160 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $908 = $9; //@line 1166 "stream_encoder.c"
           $909 = HEAP32[$908>>2]|0; //@line 1166 "stream_encoder.c"
           $910 = ((($909)) + 4|0); //@line 1166 "stream_encoder.c"
           $911 = HEAP32[$910>>2]|0; //@line 1166 "stream_encoder.c"
           $912 = ($911|0)!=(0); //@line 1166 "stream_encoder.c"
           if ($912) {
            $913 = $9; //@line 1167 "stream_encoder.c"
            $914 = ((($913)) + 4|0); //@line 1167 "stream_encoder.c"
            $915 = HEAP32[$914>>2]|0; //@line 1167 "stream_encoder.c"
            $916 = ((($915)) + 11776|0); //@line 1167 "stream_encoder.c"
            $917 = ((($916)) + 4|0); //@line 1167 "stream_encoder.c"
            HEAP32[$917>>2] = 1; //@line 1167 "stream_encoder.c"
           }
           $918 = $9; //@line 1168 "stream_encoder.c"
           $919 = ((($918)) + 4|0); //@line 1168 "stream_encoder.c"
           $920 = HEAP32[$919>>2]|0; //@line 1168 "stream_encoder.c"
           $921 = ((($920)) + 6872|0); //@line 1168 "stream_encoder.c"
           HEAP32[$921>>2] = 0; //@line 1168 "stream_encoder.c"
           $922 = $9; //@line 1169 "stream_encoder.c"
           $923 = ((($922)) + 4|0); //@line 1169 "stream_encoder.c"
           $924 = HEAP32[$923>>2]|0; //@line 1169 "stream_encoder.c"
           $925 = ((($924)) + 6872|0); //@line 1169 "stream_encoder.c"
           $926 = ((($925)) + 4|0); //@line 1169 "stream_encoder.c"
           HEAP32[$926>>2] = 0; //@line 1169 "stream_encoder.c"
           $927 = $9; //@line 1170 "stream_encoder.c"
           $928 = ((($927)) + 4|0); //@line 1170 "stream_encoder.c"
           $929 = HEAP32[$928>>2]|0; //@line 1170 "stream_encoder.c"
           $930 = ((($929)) + 6872|0); //@line 1170 "stream_encoder.c"
           $931 = ((($930)) + 8|0); //@line 1170 "stream_encoder.c"
           HEAP32[$931>>2] = 34; //@line 1170 "stream_encoder.c"
           $932 = $9; //@line 1171 "stream_encoder.c"
           $933 = HEAP32[$932>>2]|0; //@line 1171 "stream_encoder.c"
           $934 = ((($933)) + 36|0); //@line 1171 "stream_encoder.c"
           $935 = HEAP32[$934>>2]|0; //@line 1171 "stream_encoder.c"
           $936 = $9; //@line 1171 "stream_encoder.c"
           $937 = ((($936)) + 4|0); //@line 1171 "stream_encoder.c"
           $938 = HEAP32[$937>>2]|0; //@line 1171 "stream_encoder.c"
           $939 = ((($938)) + 6872|0); //@line 1171 "stream_encoder.c"
           $940 = ((($939)) + 16|0); //@line 1171 "stream_encoder.c"
           HEAP32[$940>>2] = $935; //@line 1171 "stream_encoder.c"
           $941 = $9; //@line 1172 "stream_encoder.c"
           $942 = HEAP32[$941>>2]|0; //@line 1172 "stream_encoder.c"
           $943 = ((($942)) + 36|0); //@line 1172 "stream_encoder.c"
           $944 = HEAP32[$943>>2]|0; //@line 1172 "stream_encoder.c"
           $945 = $9; //@line 1172 "stream_encoder.c"
           $946 = ((($945)) + 4|0); //@line 1172 "stream_encoder.c"
           $947 = HEAP32[$946>>2]|0; //@line 1172 "stream_encoder.c"
           $948 = ((($947)) + 6872|0); //@line 1172 "stream_encoder.c"
           $949 = ((($948)) + 16|0); //@line 1172 "stream_encoder.c"
           $950 = ((($949)) + 4|0); //@line 1172 "stream_encoder.c"
           HEAP32[$950>>2] = $944; //@line 1172 "stream_encoder.c"
           $951 = $9; //@line 1173 "stream_encoder.c"
           $952 = ((($951)) + 4|0); //@line 1173 "stream_encoder.c"
           $953 = HEAP32[$952>>2]|0; //@line 1173 "stream_encoder.c"
           $954 = ((($953)) + 6872|0); //@line 1173 "stream_encoder.c"
           $955 = ((($954)) + 16|0); //@line 1173 "stream_encoder.c"
           $956 = ((($955)) + 8|0); //@line 1173 "stream_encoder.c"
           HEAP32[$956>>2] = 0; //@line 1173 "stream_encoder.c"
           $957 = $9; //@line 1174 "stream_encoder.c"
           $958 = ((($957)) + 4|0); //@line 1174 "stream_encoder.c"
           $959 = HEAP32[$958>>2]|0; //@line 1174 "stream_encoder.c"
           $960 = ((($959)) + 6872|0); //@line 1174 "stream_encoder.c"
           $961 = ((($960)) + 16|0); //@line 1174 "stream_encoder.c"
           $962 = ((($961)) + 12|0); //@line 1174 "stream_encoder.c"
           HEAP32[$962>>2] = 0; //@line 1174 "stream_encoder.c"
           $963 = $9; //@line 1175 "stream_encoder.c"
           $964 = HEAP32[$963>>2]|0; //@line 1175 "stream_encoder.c"
           $965 = ((($964)) + 32|0); //@line 1175 "stream_encoder.c"
           $966 = HEAP32[$965>>2]|0; //@line 1175 "stream_encoder.c"
           $967 = $9; //@line 1175 "stream_encoder.c"
           $968 = ((($967)) + 4|0); //@line 1175 "stream_encoder.c"
           $969 = HEAP32[$968>>2]|0; //@line 1175 "stream_encoder.c"
           $970 = ((($969)) + 6872|0); //@line 1175 "stream_encoder.c"
           $971 = ((($970)) + 16|0); //@line 1175 "stream_encoder.c"
           $972 = ((($971)) + 16|0); //@line 1175 "stream_encoder.c"
           HEAP32[$972>>2] = $966; //@line 1175 "stream_encoder.c"
           $973 = $9; //@line 1176 "stream_encoder.c"
           $974 = HEAP32[$973>>2]|0; //@line 1176 "stream_encoder.c"
           $975 = ((($974)) + 24|0); //@line 1176 "stream_encoder.c"
           $976 = HEAP32[$975>>2]|0; //@line 1176 "stream_encoder.c"
           $977 = $9; //@line 1176 "stream_encoder.c"
           $978 = ((($977)) + 4|0); //@line 1176 "stream_encoder.c"
           $979 = HEAP32[$978>>2]|0; //@line 1176 "stream_encoder.c"
           $980 = ((($979)) + 6872|0); //@line 1176 "stream_encoder.c"
           $981 = ((($980)) + 16|0); //@line 1176 "stream_encoder.c"
           $982 = ((($981)) + 20|0); //@line 1176 "stream_encoder.c"
           HEAP32[$982>>2] = $976; //@line 1176 "stream_encoder.c"
           $983 = $9; //@line 1177 "stream_encoder.c"
           $984 = HEAP32[$983>>2]|0; //@line 1177 "stream_encoder.c"
           $985 = ((($984)) + 28|0); //@line 1177 "stream_encoder.c"
           $986 = HEAP32[$985>>2]|0; //@line 1177 "stream_encoder.c"
           $987 = $9; //@line 1177 "stream_encoder.c"
           $988 = ((($987)) + 4|0); //@line 1177 "stream_encoder.c"
           $989 = HEAP32[$988>>2]|0; //@line 1177 "stream_encoder.c"
           $990 = ((($989)) + 6872|0); //@line 1177 "stream_encoder.c"
           $991 = ((($990)) + 16|0); //@line 1177 "stream_encoder.c"
           $992 = ((($991)) + 24|0); //@line 1177 "stream_encoder.c"
           HEAP32[$992>>2] = $986; //@line 1177 "stream_encoder.c"
           $993 = $9; //@line 1178 "stream_encoder.c"
           $994 = HEAP32[$993>>2]|0; //@line 1178 "stream_encoder.c"
           $995 = ((($994)) + 592|0); //@line 1178 "stream_encoder.c"
           $996 = $995; //@line 1178 "stream_encoder.c"
           $997 = $996; //@line 1178 "stream_encoder.c"
           $998 = HEAP32[$997>>2]|0; //@line 1178 "stream_encoder.c"
           $999 = (($996) + 4)|0; //@line 1178 "stream_encoder.c"
           $1000 = $999; //@line 1178 "stream_encoder.c"
           $1001 = HEAP32[$1000>>2]|0; //@line 1178 "stream_encoder.c"
           $1002 = $9; //@line 1178 "stream_encoder.c"
           $1003 = ((($1002)) + 4|0); //@line 1178 "stream_encoder.c"
           $1004 = HEAP32[$1003>>2]|0; //@line 1178 "stream_encoder.c"
           $1005 = ((($1004)) + 6872|0); //@line 1178 "stream_encoder.c"
           $1006 = ((($1005)) + 16|0); //@line 1178 "stream_encoder.c"
           $1007 = ((($1006)) + 32|0); //@line 1178 "stream_encoder.c"
           $1008 = $1007; //@line 1178 "stream_encoder.c"
           $1009 = $1008; //@line 1178 "stream_encoder.c"
           HEAP32[$1009>>2] = $998; //@line 1178 "stream_encoder.c"
           $1010 = (($1008) + 4)|0; //@line 1178 "stream_encoder.c"
           $1011 = $1010; //@line 1178 "stream_encoder.c"
           HEAP32[$1011>>2] = $1001; //@line 1178 "stream_encoder.c"
           $1012 = $9; //@line 1179 "stream_encoder.c"
           $1013 = ((($1012)) + 4|0); //@line 1179 "stream_encoder.c"
           $1014 = HEAP32[$1013>>2]|0; //@line 1179 "stream_encoder.c"
           $1015 = ((($1014)) + 6872|0); //@line 1179 "stream_encoder.c"
           $1016 = ((($1015)) + 16|0); //@line 1179 "stream_encoder.c"
           $1017 = ((($1016)) + 40|0); //@line 1179 "stream_encoder.c"
           ;HEAP32[$1017>>2]=0|0;HEAP32[$1017+4>>2]=0|0;HEAP32[$1017+8>>2]=0|0;HEAP32[$1017+12>>2]=0|0; //@line 1179 "stream_encoder.c"
           $1018 = $9; //@line 1180 "stream_encoder.c"
           $1019 = HEAP32[$1018>>2]|0; //@line 1180 "stream_encoder.c"
           $1020 = ((($1019)) + 12|0); //@line 1180 "stream_encoder.c"
           $1021 = HEAP32[$1020>>2]|0; //@line 1180 "stream_encoder.c"
           $1022 = ($1021|0)!=(0); //@line 1180 "stream_encoder.c"
           if ($1022) {
            $1023 = $9; //@line 1181 "stream_encoder.c"
            $1024 = ((($1023)) + 4|0); //@line 1181 "stream_encoder.c"
            $1025 = HEAP32[$1024>>2]|0; //@line 1181 "stream_encoder.c"
            $1026 = ((($1025)) + 7060|0); //@line 1181 "stream_encoder.c"
            _FLAC__MD5Init($1026); //@line 1181 "stream_encoder.c"
           }
           $1027 = $9; //@line 1182 "stream_encoder.c"
           $1028 = ((($1027)) + 4|0); //@line 1182 "stream_encoder.c"
           $1029 = HEAP32[$1028>>2]|0; //@line 1182 "stream_encoder.c"
           $1030 = ((($1029)) + 6872|0); //@line 1182 "stream_encoder.c"
           $1031 = $9; //@line 1182 "stream_encoder.c"
           $1032 = ((($1031)) + 4|0); //@line 1182 "stream_encoder.c"
           $1033 = HEAP32[$1032>>2]|0; //@line 1182 "stream_encoder.c"
           $1034 = ((($1033)) + 6856|0); //@line 1182 "stream_encoder.c"
           $1035 = HEAP32[$1034>>2]|0; //@line 1182 "stream_encoder.c"
           $1036 = (_FLAC__add_metadata_block($1030,$1035)|0); //@line 1182 "stream_encoder.c"
           $1037 = ($1036|0)!=(0); //@line 1182 "stream_encoder.c"
           $1038 = $9;
           if (!($1037)) {
            $1039 = HEAP32[$1038>>2]|0; //@line 1183 "stream_encoder.c"
            HEAP32[$1039>>2] = 7; //@line 1183 "stream_encoder.c"
            $8 = 1; //@line 1184 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $1040 = (_write_bitbuffer_($1038,0,0)|0); //@line 1186 "stream_encoder.c"
           $1041 = ($1040|0)!=(0); //@line 1186 "stream_encoder.c"
           if (!($1041)) {
            $8 = 1; //@line 1188 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           $1042 = HEAP32[267]|0; //@line 1195 "stream_encoder.c"
           $1043 = 1 << $1042; //@line 1195 "stream_encoder.c"
           $1044 = (($1043) - 1)|0; //@line 1195 "stream_encoder.c"
           $1045 = $9; //@line 1195 "stream_encoder.c"
           $1046 = ((($1045)) + 4|0); //@line 1195 "stream_encoder.c"
           $1047 = HEAP32[$1046>>2]|0; //@line 1195 "stream_encoder.c"
           $1048 = ((($1047)) + 6872|0); //@line 1195 "stream_encoder.c"
           $1049 = ((($1048)) + 16|0); //@line 1195 "stream_encoder.c"
           $1050 = ((($1049)) + 8|0); //@line 1195 "stream_encoder.c"
           HEAP32[$1050>>2] = $1044; //@line 1195 "stream_encoder.c"
           $1051 = $9; //@line 1197 "stream_encoder.c"
           $1052 = ((($1051)) + 4|0); //@line 1197 "stream_encoder.c"
           $1053 = HEAP32[$1052>>2]|0; //@line 1197 "stream_encoder.c"
           $1054 = ((($1053)) + 6872|0); //@line 1197 "stream_encoder.c"
           $1055 = ((($1054)) + 16|0); //@line 1197 "stream_encoder.c"
           $1056 = ((($1055)) + 32|0); //@line 1197 "stream_encoder.c"
           $1057 = $1056; //@line 1197 "stream_encoder.c"
           $1058 = $1057; //@line 1197 "stream_encoder.c"
           HEAP32[$1058>>2] = 0; //@line 1197 "stream_encoder.c"
           $1059 = (($1057) + 4)|0; //@line 1197 "stream_encoder.c"
           $1060 = $1059; //@line 1197 "stream_encoder.c"
           HEAP32[$1060>>2] = 0; //@line 1197 "stream_encoder.c"
           $1061 = $19; //@line 1209 "stream_encoder.c"
           $1062 = ($1061|0)!=(0); //@line 1209 "stream_encoder.c"
           do {
            if (!($1062)) {
             HEAP32[$24>>2] = 4; //@line 1211 "stream_encoder.c"
             $1063 = $9; //@line 1212 "stream_encoder.c"
             $1064 = HEAP32[$1063>>2]|0; //@line 1212 "stream_encoder.c"
             $1065 = ((($1064)) + 604|0); //@line 1212 "stream_encoder.c"
             $1066 = HEAP32[$1065>>2]|0; //@line 1212 "stream_encoder.c"
             $1067 = ($1066|0)==(0); //@line 1212 "stream_encoder.c"
             $1068 = $1067&1; //@line 1212 "stream_encoder.c"
             $1069 = ((($24)) + 4|0); //@line 1212 "stream_encoder.c"
             HEAP32[$1069>>2] = $1068; //@line 1212 "stream_encoder.c"
             $1070 = ((($24)) + 8|0); //@line 1213 "stream_encoder.c"
             HEAP32[$1070>>2] = 8; //@line 1213 "stream_encoder.c"
             $1071 = ((($24)) + 16|0); //@line 1214 "stream_encoder.c"
             HEAP32[$1071>>2] = 0; //@line 1214 "stream_encoder.c"
             $1072 = ((($24)) + 16|0); //@line 1215 "stream_encoder.c"
             $1073 = ((($1072)) + 4|0); //@line 1215 "stream_encoder.c"
             HEAP32[$1073>>2] = 0; //@line 1215 "stream_encoder.c"
             $1074 = ((($24)) + 16|0); //@line 1216 "stream_encoder.c"
             $1075 = ((($1074)) + 8|0); //@line 1216 "stream_encoder.c"
             HEAP32[$1075>>2] = 0; //@line 1216 "stream_encoder.c"
             $1076 = ((($24)) + 16|0); //@line 1217 "stream_encoder.c"
             $1077 = ((($1076)) + 12|0); //@line 1217 "stream_encoder.c"
             HEAP32[$1077>>2] = 0; //@line 1217 "stream_encoder.c"
             $1078 = $9; //@line 1218 "stream_encoder.c"
             $1079 = ((($1078)) + 4|0); //@line 1218 "stream_encoder.c"
             $1080 = HEAP32[$1079>>2]|0; //@line 1218 "stream_encoder.c"
             $1081 = ((($1080)) + 6856|0); //@line 1218 "stream_encoder.c"
             $1082 = HEAP32[$1081>>2]|0; //@line 1218 "stream_encoder.c"
             $1083 = (_FLAC__add_metadata_block($24,$1082)|0); //@line 1218 "stream_encoder.c"
             $1084 = ($1083|0)!=(0); //@line 1218 "stream_encoder.c"
             $1085 = $9;
             if (!($1084)) {
              $1086 = HEAP32[$1085>>2]|0; //@line 1219 "stream_encoder.c"
              HEAP32[$1086>>2] = 7; //@line 1219 "stream_encoder.c"
              $8 = 1; //@line 1220 "stream_encoder.c"
              $1165 = $8; //@line 1253 "stream_encoder.c"
              STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
             }
             $1087 = (_write_bitbuffer_($1085,0,0)|0); //@line 1222 "stream_encoder.c"
             $1088 = ($1087|0)!=(0); //@line 1222 "stream_encoder.c"
             if ($1088) {
              break;
             }
             $8 = 1; //@line 1224 "stream_encoder.c"
             $1165 = $8; //@line 1253 "stream_encoder.c"
             STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
            }
           } while(0);
           $17 = 0; //@line 1231 "stream_encoder.c"
           while(1) {
            $1089 = $17; //@line 1231 "stream_encoder.c"
            $1090 = $9; //@line 1231 "stream_encoder.c"
            $1091 = HEAP32[$1090>>2]|0; //@line 1231 "stream_encoder.c"
            $1092 = ((($1091)) + 604|0); //@line 1231 "stream_encoder.c"
            $1093 = HEAP32[$1092>>2]|0; //@line 1231 "stream_encoder.c"
            $1094 = ($1089>>>0)<($1093>>>0); //@line 1231 "stream_encoder.c"
            if (!($1094)) {
             label = 183;
             break;
            }
            $1095 = $17; //@line 1232 "stream_encoder.c"
            $1096 = $9; //@line 1232 "stream_encoder.c"
            $1097 = HEAP32[$1096>>2]|0; //@line 1232 "stream_encoder.c"
            $1098 = ((($1097)) + 604|0); //@line 1232 "stream_encoder.c"
            $1099 = HEAP32[$1098>>2]|0; //@line 1232 "stream_encoder.c"
            $1100 = (($1099) - 1)|0; //@line 1232 "stream_encoder.c"
            $1101 = ($1095|0)==($1100|0); //@line 1232 "stream_encoder.c"
            $1102 = $1101&1; //@line 1232 "stream_encoder.c"
            $1103 = $9; //@line 1232 "stream_encoder.c"
            $1104 = HEAP32[$1103>>2]|0; //@line 1232 "stream_encoder.c"
            $1105 = ((($1104)) + 600|0); //@line 1232 "stream_encoder.c"
            $1106 = HEAP32[$1105>>2]|0; //@line 1232 "stream_encoder.c"
            $1107 = $17; //@line 1232 "stream_encoder.c"
            $1108 = (($1106) + ($1107<<2)|0); //@line 1232 "stream_encoder.c"
            $1109 = HEAP32[$1108>>2]|0; //@line 1232 "stream_encoder.c"
            $1110 = ((($1109)) + 4|0); //@line 1232 "stream_encoder.c"
            HEAP32[$1110>>2] = $1102; //@line 1232 "stream_encoder.c"
            $1111 = $9; //@line 1233 "stream_encoder.c"
            $1112 = HEAP32[$1111>>2]|0; //@line 1233 "stream_encoder.c"
            $1113 = ((($1112)) + 600|0); //@line 1233 "stream_encoder.c"
            $1114 = HEAP32[$1113>>2]|0; //@line 1233 "stream_encoder.c"
            $1115 = $17; //@line 1233 "stream_encoder.c"
            $1116 = (($1114) + ($1115<<2)|0); //@line 1233 "stream_encoder.c"
            $1117 = HEAP32[$1116>>2]|0; //@line 1233 "stream_encoder.c"
            $1118 = $9; //@line 1233 "stream_encoder.c"
            $1119 = ((($1118)) + 4|0); //@line 1233 "stream_encoder.c"
            $1120 = HEAP32[$1119>>2]|0; //@line 1233 "stream_encoder.c"
            $1121 = ((($1120)) + 6856|0); //@line 1233 "stream_encoder.c"
            $1122 = HEAP32[$1121>>2]|0; //@line 1233 "stream_encoder.c"
            $1123 = (_FLAC__add_metadata_block($1117,$1122)|0); //@line 1233 "stream_encoder.c"
            $1124 = ($1123|0)!=(0); //@line 1233 "stream_encoder.c"
            $1125 = $9;
            if (!($1124)) {
             label = 179;
             break;
            }
            $1127 = (_write_bitbuffer_($1125,0,0)|0); //@line 1237 "stream_encoder.c"
            $1128 = ($1127|0)!=(0); //@line 1237 "stream_encoder.c"
            if (!($1128)) {
             label = 181;
             break;
            }
            $1129 = $17; //@line 1231 "stream_encoder.c"
            $1130 = (($1129) + 1)|0; //@line 1231 "stream_encoder.c"
            $17 = $1130; //@line 1231 "stream_encoder.c"
           }
           if ((label|0) == 179) {
            $1126 = HEAP32[$1125>>2]|0; //@line 1234 "stream_encoder.c"
            HEAP32[$1126>>2] = 7; //@line 1234 "stream_encoder.c"
            $8 = 1; //@line 1235 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           else if ((label|0) == 181) {
            $8 = 1; //@line 1239 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           else if ((label|0) == 183) {
            $1131 = $9; //@line 1244 "stream_encoder.c"
            $1132 = ((($1131)) + 4|0); //@line 1244 "stream_encoder.c"
            $1133 = HEAP32[$1132>>2]|0; //@line 1244 "stream_encoder.c"
            $1134 = ((($1133)) + 7296|0); //@line 1244 "stream_encoder.c"
            $1135 = HEAP32[$1134>>2]|0; //@line 1244 "stream_encoder.c"
            $1136 = ($1135|0)!=(0|0); //@line 1244 "stream_encoder.c"
            do {
             if ($1136) {
              $1137 = $9; //@line 1244 "stream_encoder.c"
              $1138 = ((($1137)) + 4|0); //@line 1244 "stream_encoder.c"
              $1139 = HEAP32[$1138>>2]|0; //@line 1244 "stream_encoder.c"
              $1140 = ((($1139)) + 7296|0); //@line 1244 "stream_encoder.c"
              $1141 = HEAP32[$1140>>2]|0; //@line 1244 "stream_encoder.c"
              $1142 = $9; //@line 1244 "stream_encoder.c"
              $1143 = $9; //@line 1244 "stream_encoder.c"
              $1144 = HEAP32[$1143>>2]|0; //@line 1244 "stream_encoder.c"
              $1145 = ((($1144)) + 624|0); //@line 1244 "stream_encoder.c"
              $1146 = $9; //@line 1244 "stream_encoder.c"
              $1147 = ((($1146)) + 4|0); //@line 1244 "stream_encoder.c"
              $1148 = HEAP32[$1147>>2]|0; //@line 1244 "stream_encoder.c"
              $1149 = ((($1148)) + 7312|0); //@line 1244 "stream_encoder.c"
              $1150 = HEAP32[$1149>>2]|0; //@line 1244 "stream_encoder.c"
              $1151 = (FUNCTION_TABLE_iiii[$1141 & 31]($1142,$1145,$1150)|0); //@line 1244 "stream_encoder.c"
              $1152 = ($1151|0)==(1); //@line 1244 "stream_encoder.c"
              if (!($1152)) {
               break;
              }
              $1153 = $9; //@line 1245 "stream_encoder.c"
              $1154 = HEAP32[$1153>>2]|0; //@line 1245 "stream_encoder.c"
              HEAP32[$1154>>2] = 5; //@line 1245 "stream_encoder.c"
              $8 = 1; //@line 1246 "stream_encoder.c"
              $1165 = $8; //@line 1253 "stream_encoder.c"
              STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
             }
            } while(0);
            $1155 = $9; //@line 1249 "stream_encoder.c"
            $1156 = HEAP32[$1155>>2]|0; //@line 1249 "stream_encoder.c"
            $1157 = ((($1156)) + 4|0); //@line 1249 "stream_encoder.c"
            $1158 = HEAP32[$1157>>2]|0; //@line 1249 "stream_encoder.c"
            $1159 = ($1158|0)!=(0); //@line 1249 "stream_encoder.c"
            if ($1159) {
             $1160 = $9; //@line 1250 "stream_encoder.c"
             $1161 = ((($1160)) + 4|0); //@line 1250 "stream_encoder.c"
             $1162 = HEAP32[$1161>>2]|0; //@line 1250 "stream_encoder.c"
             $1163 = ((($1162)) + 11776|0); //@line 1250 "stream_encoder.c"
             $1164 = ((($1163)) + 4|0); //@line 1250 "stream_encoder.c"
             HEAP32[$1164>>2] = 2; //@line 1250 "stream_encoder.c"
            }
            $8 = 0; //@line 1252 "stream_encoder.c"
            $1165 = $8; //@line 1253 "stream_encoder.c"
            STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
           }
           break;
          }
         }
        }
       }
       $8 = 7; //@line 669 "stream_encoder.c"
       $1165 = $8; //@line 1253 "stream_encoder.c"
       STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
      }
     }
     $8 = 5; //@line 656 "stream_encoder.c"
     $1165 = $8; //@line 1253 "stream_encoder.c"
     STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
    }
   }
   $8 = 4; //@line 643 "stream_encoder.c"
   $1165 = $8; //@line 1253 "stream_encoder.c"
   STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
  }
 }
 $8 = 3; //@line 640 "stream_encoder.c"
 $1165 = $8; //@line 1253 "stream_encoder.c"
 STACKTOP = sp;return ($1165|0); //@line 1253 "stream_encoder.c"
}
function _precompute_partition_info_sums_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $26 = $9; //@line 3969 "stream_encoder.c"
 $27 = $10; //@line 3969 "stream_encoder.c"
 $28 = (($26) + ($27))|0; //@line 3969 "stream_encoder.c"
 $29 = $12; //@line 3969 "stream_encoder.c"
 $30 = $28 >>> $29; //@line 3969 "stream_encoder.c"
 $14 = $30; //@line 3969 "stream_encoder.c"
 $31 = $12; //@line 3970 "stream_encoder.c"
 $32 = 1 << $31; //@line 3970 "stream_encoder.c"
 $15 = $32; //@line 3970 "stream_encoder.c"
 $33 = $14; //@line 3976 "stream_encoder.c"
 $34 = (_FLAC__bitmath_ilog2_235($33)|0); //@line 3976 "stream_encoder.c"
 $35 = (32 - ($34))|0; //@line 3976 "stream_encoder.c"
 $16 = $35; //@line 3976 "stream_encoder.c"
 $36 = $10; //@line 3977 "stream_encoder.c"
 $37 = (0 - ($36))|0; //@line 3977 "stream_encoder.c"
 $19 = $37; //@line 3977 "stream_encoder.c"
 $38 = $13; //@line 3979 "stream_encoder.c"
 $39 = (($38) + 4)|0; //@line 3979 "stream_encoder.c"
 $40 = $16; //@line 3979 "stream_encoder.c"
 $41 = ($39>>>0)<($40>>>0); //@line 3979 "stream_encoder.c"
 $18 = 0;
 $17 = 0;
 L1: do {
  if ($41) {
   while(1) {
    $42 = $17; //@line 3980 "stream_encoder.c"
    $43 = $15; //@line 3980 "stream_encoder.c"
    $44 = ($42>>>0)<($43>>>0); //@line 3980 "stream_encoder.c"
    if (!($44)) {
     break L1;
    }
    $20 = 0; //@line 3981 "stream_encoder.c"
    $45 = $14; //@line 3982 "stream_encoder.c"
    $46 = $19; //@line 3982 "stream_encoder.c"
    $47 = (($46) + ($45))|0; //@line 3982 "stream_encoder.c"
    $19 = $47; //@line 3982 "stream_encoder.c"
    while(1) {
     $48 = $18; //@line 3983 "stream_encoder.c"
     $49 = $19; //@line 3983 "stream_encoder.c"
     $50 = ($48>>>0)<($49>>>0); //@line 3983 "stream_encoder.c"
     if (!($50)) {
      break;
     }
     $51 = $7; //@line 3984 "stream_encoder.c"
     $52 = $18; //@line 3984 "stream_encoder.c"
     $53 = (($51) + ($52<<2)|0); //@line 3984 "stream_encoder.c"
     $54 = HEAP32[$53>>2]|0; //@line 3984 "stream_encoder.c"
     $55 = (Math_abs(($54|0))|0); //@line 3984 "stream_encoder.c"
     $56 = $20; //@line 3984 "stream_encoder.c"
     $57 = (($56) + ($55))|0; //@line 3984 "stream_encoder.c"
     $20 = $57; //@line 3984 "stream_encoder.c"
     $58 = $18; //@line 3983 "stream_encoder.c"
     $59 = (($58) + 1)|0; //@line 3983 "stream_encoder.c"
     $18 = $59; //@line 3983 "stream_encoder.c"
    }
    $60 = $20; //@line 3985 "stream_encoder.c"
    $61 = $8; //@line 3985 "stream_encoder.c"
    $62 = $17; //@line 3985 "stream_encoder.c"
    $63 = (($61) + ($62<<3)|0); //@line 3985 "stream_encoder.c"
    $64 = $63; //@line 3985 "stream_encoder.c"
    $65 = $64; //@line 3985 "stream_encoder.c"
    HEAP32[$65>>2] = $60; //@line 3985 "stream_encoder.c"
    $66 = (($64) + 4)|0; //@line 3985 "stream_encoder.c"
    $67 = $66; //@line 3985 "stream_encoder.c"
    HEAP32[$67>>2] = 0; //@line 3985 "stream_encoder.c"
    $68 = $17; //@line 3980 "stream_encoder.c"
    $69 = (($68) + 1)|0; //@line 3980 "stream_encoder.c"
    $17 = $69; //@line 3980 "stream_encoder.c"
   }
  } else {
   while(1) {
    $70 = $17; //@line 3989 "stream_encoder.c"
    $71 = $15; //@line 3989 "stream_encoder.c"
    $72 = ($70>>>0)<($71>>>0); //@line 3989 "stream_encoder.c"
    if (!($72)) {
     break L1;
    }
    $73 = $21; //@line 3990 "stream_encoder.c"
    $74 = $73; //@line 3990 "stream_encoder.c"
    HEAP32[$74>>2] = 0; //@line 3990 "stream_encoder.c"
    $75 = (($73) + 4)|0; //@line 3990 "stream_encoder.c"
    $76 = $75; //@line 3990 "stream_encoder.c"
    HEAP32[$76>>2] = 0; //@line 3990 "stream_encoder.c"
    $77 = $14; //@line 3991 "stream_encoder.c"
    $78 = $19; //@line 3991 "stream_encoder.c"
    $79 = (($78) + ($77))|0; //@line 3991 "stream_encoder.c"
    $19 = $79; //@line 3991 "stream_encoder.c"
    while(1) {
     $80 = $18; //@line 3992 "stream_encoder.c"
     $81 = $19; //@line 3992 "stream_encoder.c"
     $82 = ($80>>>0)<($81>>>0); //@line 3992 "stream_encoder.c"
     if (!($82)) {
      break;
     }
     $83 = $7; //@line 3993 "stream_encoder.c"
     $84 = $18; //@line 3993 "stream_encoder.c"
     $85 = (($83) + ($84<<2)|0); //@line 3993 "stream_encoder.c"
     $86 = HEAP32[$85>>2]|0; //@line 3993 "stream_encoder.c"
     $87 = (Math_abs(($86|0))|0); //@line 3993 "stream_encoder.c"
     $88 = ($87|0)<(0); //@line 3993 "stream_encoder.c"
     $89 = $88 << 31 >> 31; //@line 3993 "stream_encoder.c"
     $90 = $21; //@line 3993 "stream_encoder.c"
     $91 = $90; //@line 3993 "stream_encoder.c"
     $92 = HEAP32[$91>>2]|0; //@line 3993 "stream_encoder.c"
     $93 = (($90) + 4)|0; //@line 3993 "stream_encoder.c"
     $94 = $93; //@line 3993 "stream_encoder.c"
     $95 = HEAP32[$94>>2]|0; //@line 3993 "stream_encoder.c"
     $96 = (_i64Add(($92|0),($95|0),($87|0),($89|0))|0); //@line 3993 "stream_encoder.c"
     $97 = tempRet0; //@line 3993 "stream_encoder.c"
     $98 = $21; //@line 3993 "stream_encoder.c"
     $99 = $98; //@line 3993 "stream_encoder.c"
     HEAP32[$99>>2] = $96; //@line 3993 "stream_encoder.c"
     $100 = (($98) + 4)|0; //@line 3993 "stream_encoder.c"
     $101 = $100; //@line 3993 "stream_encoder.c"
     HEAP32[$101>>2] = $97; //@line 3993 "stream_encoder.c"
     $102 = $18; //@line 3992 "stream_encoder.c"
     $103 = (($102) + 1)|0; //@line 3992 "stream_encoder.c"
     $18 = $103; //@line 3992 "stream_encoder.c"
    }
    $104 = $21; //@line 3994 "stream_encoder.c"
    $105 = $104; //@line 3994 "stream_encoder.c"
    $106 = HEAP32[$105>>2]|0; //@line 3994 "stream_encoder.c"
    $107 = (($104) + 4)|0; //@line 3994 "stream_encoder.c"
    $108 = $107; //@line 3994 "stream_encoder.c"
    $109 = HEAP32[$108>>2]|0; //@line 3994 "stream_encoder.c"
    $110 = $8; //@line 3994 "stream_encoder.c"
    $111 = $17; //@line 3994 "stream_encoder.c"
    $112 = (($110) + ($111<<3)|0); //@line 3994 "stream_encoder.c"
    $113 = $112; //@line 3994 "stream_encoder.c"
    $114 = $113; //@line 3994 "stream_encoder.c"
    HEAP32[$114>>2] = $106; //@line 3994 "stream_encoder.c"
    $115 = (($113) + 4)|0; //@line 3994 "stream_encoder.c"
    $116 = $115; //@line 3994 "stream_encoder.c"
    HEAP32[$116>>2] = $109; //@line 3994 "stream_encoder.c"
    $117 = $17; //@line 3989 "stream_encoder.c"
    $118 = (($117) + 1)|0; //@line 3989 "stream_encoder.c"
    $17 = $118; //@line 3989 "stream_encoder.c"
   }
  }
 } while(0);
 $22 = 0; //@line 4001 "stream_encoder.c"
 $119 = $15; //@line 4001 "stream_encoder.c"
 $23 = $119; //@line 4001 "stream_encoder.c"
 $120 = $12; //@line 4003 "stream_encoder.c"
 $121 = (($120) - 1)|0; //@line 4003 "stream_encoder.c"
 $24 = $121; //@line 4003 "stream_encoder.c"
 while(1) {
  $122 = $24; //@line 4003 "stream_encoder.c"
  $123 = $11; //@line 4003 "stream_encoder.c"
  $124 = ($122|0)>=($123|0); //@line 4003 "stream_encoder.c"
  if (!($124)) {
   break;
  }
  $125 = $15; //@line 4005 "stream_encoder.c"
  $126 = $125 >>> 1; //@line 4005 "stream_encoder.c"
  $15 = $126; //@line 4005 "stream_encoder.c"
  $25 = 0; //@line 4006 "stream_encoder.c"
  while(1) {
   $127 = $25; //@line 4006 "stream_encoder.c"
   $128 = $15; //@line 4006 "stream_encoder.c"
   $129 = ($127>>>0)<($128>>>0); //@line 4006 "stream_encoder.c"
   if (!($129)) {
    break;
   }
   $130 = $8; //@line 4008 "stream_encoder.c"
   $131 = $22; //@line 4008 "stream_encoder.c"
   $132 = (($130) + ($131<<3)|0); //@line 4008 "stream_encoder.c"
   $133 = $132; //@line 4008 "stream_encoder.c"
   $134 = $133; //@line 4008 "stream_encoder.c"
   $135 = HEAP32[$134>>2]|0; //@line 4008 "stream_encoder.c"
   $136 = (($133) + 4)|0; //@line 4008 "stream_encoder.c"
   $137 = $136; //@line 4008 "stream_encoder.c"
   $138 = HEAP32[$137>>2]|0; //@line 4008 "stream_encoder.c"
   $139 = $8; //@line 4009 "stream_encoder.c"
   $140 = $22; //@line 4009 "stream_encoder.c"
   $141 = (($140) + 1)|0; //@line 4009 "stream_encoder.c"
   $142 = (($139) + ($141<<3)|0); //@line 4009 "stream_encoder.c"
   $143 = $142; //@line 4009 "stream_encoder.c"
   $144 = $143; //@line 4009 "stream_encoder.c"
   $145 = HEAP32[$144>>2]|0; //@line 4009 "stream_encoder.c"
   $146 = (($143) + 4)|0; //@line 4009 "stream_encoder.c"
   $147 = $146; //@line 4009 "stream_encoder.c"
   $148 = HEAP32[$147>>2]|0; //@line 4009 "stream_encoder.c"
   $149 = (_i64Add(($135|0),($138|0),($145|0),($148|0))|0); //@line 4008 "stream_encoder.c"
   $150 = tempRet0; //@line 4008 "stream_encoder.c"
   $151 = $8; //@line 4007 "stream_encoder.c"
   $152 = $23; //@line 4007 "stream_encoder.c"
   $153 = (($152) + 1)|0; //@line 4007 "stream_encoder.c"
   $23 = $153; //@line 4007 "stream_encoder.c"
   $154 = (($151) + ($152<<3)|0); //@line 4007 "stream_encoder.c"
   $155 = $154; //@line 4007 "stream_encoder.c"
   $156 = $155; //@line 4007 "stream_encoder.c"
   HEAP32[$156>>2] = $149; //@line 4007 "stream_encoder.c"
   $157 = (($155) + 4)|0; //@line 4007 "stream_encoder.c"
   $158 = $157; //@line 4007 "stream_encoder.c"
   HEAP32[$158>>2] = $150; //@line 4007 "stream_encoder.c"
   $159 = $22; //@line 4010 "stream_encoder.c"
   $160 = (($159) + 2)|0; //@line 4010 "stream_encoder.c"
   $22 = $160; //@line 4010 "stream_encoder.c"
   $161 = $25; //@line 4006 "stream_encoder.c"
   $162 = (($161) + 1)|0; //@line 4006 "stream_encoder.c"
   $25 = $162; //@line 4006 "stream_encoder.c"
  }
  $163 = $24; //@line 4003 "stream_encoder.c"
  $164 = (($163) + -1)|0; //@line 4003 "stream_encoder.c"
  $24 = $164; //@line 4003 "stream_encoder.c"
 }
 STACKTOP = sp;return; //@line 4014 "stream_encoder.c"
}
function _resize_buffers_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4; //@line 2432 "stream_encoder.c"
 $9 = $3; //@line 2432 "stream_encoder.c"
 $10 = ((($9)) + 4|0); //@line 2432 "stream_encoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 2432 "stream_encoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 2432 "stream_encoder.c"
 $13 = ($8>>>0)<=($12>>>0); //@line 2432 "stream_encoder.c"
 if ($13) {
  $2 = 1; //@line 2433 "stream_encoder.c"
  $506 = $2; //@line 2560 "stream_encoder.c"
  STACKTOP = sp;return ($506|0); //@line 2560 "stream_encoder.c"
 }
 $5 = 1; //@line 2435 "stream_encoder.c"
 $6 = 0; //@line 2443 "stream_encoder.c"
 while(1) {
  $14 = $5; //@line 2443 "stream_encoder.c"
  $15 = ($14|0)!=(0); //@line 2443 "stream_encoder.c"
  if (!($15)) {
   break;
  }
  $16 = $6; //@line 2443 "stream_encoder.c"
  $17 = $3; //@line 2443 "stream_encoder.c"
  $18 = HEAP32[$17>>2]|0; //@line 2443 "stream_encoder.c"
  $19 = ((($18)) + 24|0); //@line 2443 "stream_encoder.c"
  $20 = HEAP32[$19>>2]|0; //@line 2443 "stream_encoder.c"
  $21 = ($16>>>0)<($20>>>0); //@line 2443 "stream_encoder.c"
  if (!($21)) {
   break;
  }
  $22 = $5; //@line 2444 "stream_encoder.c"
  $23 = ($22|0)!=(0); //@line 2444 "stream_encoder.c"
  if ($23) {
   $24 = $4; //@line 2444 "stream_encoder.c"
   $25 = (($24) + 4)|0; //@line 2444 "stream_encoder.c"
   $26 = (($25) + 1)|0; //@line 2444 "stream_encoder.c"
   $27 = $3; //@line 2444 "stream_encoder.c"
   $28 = ((($27)) + 4|0); //@line 2444 "stream_encoder.c"
   $29 = HEAP32[$28>>2]|0; //@line 2444 "stream_encoder.c"
   $30 = ((($29)) + 7352|0); //@line 2444 "stream_encoder.c"
   $31 = $6; //@line 2444 "stream_encoder.c"
   $32 = (($30) + ($31<<2)|0); //@line 2444 "stream_encoder.c"
   $33 = $3; //@line 2444 "stream_encoder.c"
   $34 = ((($33)) + 4|0); //@line 2444 "stream_encoder.c"
   $35 = HEAP32[$34>>2]|0; //@line 2444 "stream_encoder.c"
   $36 = ((($35)) + 4|0); //@line 2444 "stream_encoder.c"
   $37 = $6; //@line 2444 "stream_encoder.c"
   $38 = (($36) + ($37<<2)|0); //@line 2444 "stream_encoder.c"
   $39 = (_FLAC__memory_alloc_aligned_int32_array($26,$32,$38)|0); //@line 2444 "stream_encoder.c"
   $40 = ($39|0)!=(0); //@line 2444 "stream_encoder.c"
   $42 = $40;
  } else {
   $42 = 0;
  }
  $41 = $42&1; //@line 2444 "stream_encoder.c"
  $5 = $41; //@line 2444 "stream_encoder.c"
  $43 = $3; //@line 2445 "stream_encoder.c"
  $44 = ((($43)) + 4|0); //@line 2445 "stream_encoder.c"
  $45 = HEAP32[$44>>2]|0; //@line 2445 "stream_encoder.c"
  $46 = ((($45)) + 4|0); //@line 2445 "stream_encoder.c"
  $47 = $6; //@line 2445 "stream_encoder.c"
  $48 = (($46) + ($47<<2)|0); //@line 2445 "stream_encoder.c"
  $49 = HEAP32[$48>>2]|0; //@line 2445 "stream_encoder.c"
  ;HEAP32[$49>>2]=0|0;HEAP32[$49+4>>2]=0|0;HEAP32[$49+8>>2]=0|0;HEAP32[$49+12>>2]=0|0; //@line 2445 "stream_encoder.c"
  $50 = $3; //@line 2446 "stream_encoder.c"
  $51 = ((($50)) + 4|0); //@line 2446 "stream_encoder.c"
  $52 = HEAP32[$51>>2]|0; //@line 2446 "stream_encoder.c"
  $53 = ((($52)) + 4|0); //@line 2446 "stream_encoder.c"
  $54 = $6; //@line 2446 "stream_encoder.c"
  $55 = (($53) + ($54<<2)|0); //@line 2446 "stream_encoder.c"
  $56 = HEAP32[$55>>2]|0; //@line 2446 "stream_encoder.c"
  $57 = ((($56)) + 16|0); //@line 2446 "stream_encoder.c"
  HEAP32[$55>>2] = $57; //@line 2446 "stream_encoder.c"
  $58 = $6; //@line 2443 "stream_encoder.c"
  $59 = (($58) + 1)|0; //@line 2443 "stream_encoder.c"
  $6 = $59; //@line 2443 "stream_encoder.c"
 }
 $6 = 0; //@line 2454 "stream_encoder.c"
 while(1) {
  $60 = $5; //@line 2454 "stream_encoder.c"
  $61 = ($60|0)!=(0); //@line 2454 "stream_encoder.c"
  $62 = $6; //@line 2454 "stream_encoder.c"
  $63 = ($62>>>0)<(2); //@line 2454 "stream_encoder.c"
  $64 = $61 ? $63 : 0; //@line 2454 "stream_encoder.c"
  $65 = $5;
  $66 = ($65|0)!=(0);
  if (!($64)) {
   break;
  }
  if ($66) {
   $67 = $4; //@line 2455 "stream_encoder.c"
   $68 = (($67) + 4)|0; //@line 2455 "stream_encoder.c"
   $69 = (($68) + 1)|0; //@line 2455 "stream_encoder.c"
   $70 = $3; //@line 2455 "stream_encoder.c"
   $71 = ((($70)) + 4|0); //@line 2455 "stream_encoder.c"
   $72 = HEAP32[$71>>2]|0; //@line 2455 "stream_encoder.c"
   $73 = ((($72)) + 7384|0); //@line 2455 "stream_encoder.c"
   $74 = $6; //@line 2455 "stream_encoder.c"
   $75 = (($73) + ($74<<2)|0); //@line 2455 "stream_encoder.c"
   $76 = $3; //@line 2455 "stream_encoder.c"
   $77 = ((($76)) + 4|0); //@line 2455 "stream_encoder.c"
   $78 = HEAP32[$77>>2]|0; //@line 2455 "stream_encoder.c"
   $79 = ((($78)) + 36|0); //@line 2455 "stream_encoder.c"
   $80 = $6; //@line 2455 "stream_encoder.c"
   $81 = (($79) + ($80<<2)|0); //@line 2455 "stream_encoder.c"
   $82 = (_FLAC__memory_alloc_aligned_int32_array($69,$75,$81)|0); //@line 2455 "stream_encoder.c"
   $83 = ($82|0)!=(0); //@line 2455 "stream_encoder.c"
   $85 = $83;
  } else {
   $85 = 0;
  }
  $84 = $85&1; //@line 2455 "stream_encoder.c"
  $5 = $84; //@line 2455 "stream_encoder.c"
  $86 = $3; //@line 2456 "stream_encoder.c"
  $87 = ((($86)) + 4|0); //@line 2456 "stream_encoder.c"
  $88 = HEAP32[$87>>2]|0; //@line 2456 "stream_encoder.c"
  $89 = ((($88)) + 36|0); //@line 2456 "stream_encoder.c"
  $90 = $6; //@line 2456 "stream_encoder.c"
  $91 = (($89) + ($90<<2)|0); //@line 2456 "stream_encoder.c"
  $92 = HEAP32[$91>>2]|0; //@line 2456 "stream_encoder.c"
  ;HEAP32[$92>>2]=0|0;HEAP32[$92+4>>2]=0|0;HEAP32[$92+8>>2]=0|0;HEAP32[$92+12>>2]=0|0; //@line 2456 "stream_encoder.c"
  $93 = $3; //@line 2457 "stream_encoder.c"
  $94 = ((($93)) + 4|0); //@line 2457 "stream_encoder.c"
  $95 = HEAP32[$94>>2]|0; //@line 2457 "stream_encoder.c"
  $96 = ((($95)) + 36|0); //@line 2457 "stream_encoder.c"
  $97 = $6; //@line 2457 "stream_encoder.c"
  $98 = (($96) + ($97<<2)|0); //@line 2457 "stream_encoder.c"
  $99 = HEAP32[$98>>2]|0; //@line 2457 "stream_encoder.c"
  $100 = ((($99)) + 16|0); //@line 2457 "stream_encoder.c"
  HEAP32[$98>>2] = $100; //@line 2457 "stream_encoder.c"
  $101 = $6; //@line 2454 "stream_encoder.c"
  $102 = (($101) + 1)|0; //@line 2454 "stream_encoder.c"
  $6 = $102; //@line 2454 "stream_encoder.c"
 }
 if ($66) {
  $103 = $3; //@line 2466 "stream_encoder.c"
  $104 = HEAP32[$103>>2]|0; //@line 2466 "stream_encoder.c"
  $105 = ((($104)) + 556|0); //@line 2466 "stream_encoder.c"
  $106 = HEAP32[$105>>2]|0; //@line 2466 "stream_encoder.c"
  $107 = ($106>>>0)>(0); //@line 2466 "stream_encoder.c"
  if ($107) {
   $6 = 0; //@line 2467 "stream_encoder.c"
   while(1) {
    $108 = $5; //@line 2467 "stream_encoder.c"
    $109 = ($108|0)!=(0); //@line 2467 "stream_encoder.c"
    if ($109) {
     $110 = $6; //@line 2467 "stream_encoder.c"
     $111 = $3; //@line 2467 "stream_encoder.c"
     $112 = HEAP32[$111>>2]|0; //@line 2467 "stream_encoder.c"
     $113 = ((($112)) + 40|0); //@line 2467 "stream_encoder.c"
     $114 = HEAP32[$113>>2]|0; //@line 2467 "stream_encoder.c"
     $115 = ($110>>>0)<($114>>>0); //@line 2467 "stream_encoder.c"
     $507 = $115;
    } else {
     $507 = 0;
    }
    $116 = $5;
    $117 = ($116|0)!=(0);
    if (!($507)) {
     break;
    }
    if ($117) {
     $118 = $4; //@line 2468 "stream_encoder.c"
     $119 = $3; //@line 2468 "stream_encoder.c"
     $120 = ((($119)) + 4|0); //@line 2468 "stream_encoder.c"
     $121 = HEAP32[$120>>2]|0; //@line 2468 "stream_encoder.c"
     $122 = ((($121)) + 7432|0); //@line 2468 "stream_encoder.c"
     $123 = $6; //@line 2468 "stream_encoder.c"
     $124 = (($122) + ($123<<2)|0); //@line 2468 "stream_encoder.c"
     $125 = $3; //@line 2468 "stream_encoder.c"
     $126 = ((($125)) + 4|0); //@line 2468 "stream_encoder.c"
     $127 = HEAP32[$126>>2]|0; //@line 2468 "stream_encoder.c"
     $128 = ((($127)) + 84|0); //@line 2468 "stream_encoder.c"
     $129 = $6; //@line 2468 "stream_encoder.c"
     $130 = (($128) + ($129<<2)|0); //@line 2468 "stream_encoder.c"
     $131 = (_FLAC__memory_alloc_aligned_real_array($118,$124,$130)|0); //@line 2468 "stream_encoder.c"
     $132 = ($131|0)!=(0); //@line 2468 "stream_encoder.c"
     $134 = $132;
    } else {
     $134 = 0;
    }
    $133 = $134&1; //@line 2468 "stream_encoder.c"
    $5 = $133; //@line 2468 "stream_encoder.c"
    $135 = $6; //@line 2467 "stream_encoder.c"
    $136 = (($135) + 1)|0; //@line 2467 "stream_encoder.c"
    $6 = $136; //@line 2467 "stream_encoder.c"
   }
   if ($117) {
    $137 = $4; //@line 2469 "stream_encoder.c"
    $138 = $3; //@line 2469 "stream_encoder.c"
    $139 = ((($138)) + 4|0); //@line 2469 "stream_encoder.c"
    $140 = HEAP32[$139>>2]|0; //@line 2469 "stream_encoder.c"
    $141 = ((($140)) + 7560|0); //@line 2469 "stream_encoder.c"
    $142 = $3; //@line 2469 "stream_encoder.c"
    $143 = ((($142)) + 4|0); //@line 2469 "stream_encoder.c"
    $144 = HEAP32[$143>>2]|0; //@line 2469 "stream_encoder.c"
    $145 = ((($144)) + 212|0); //@line 2469 "stream_encoder.c"
    $146 = (_FLAC__memory_alloc_aligned_real_array($137,$141,$145)|0); //@line 2469 "stream_encoder.c"
    $147 = ($146|0)!=(0); //@line 2469 "stream_encoder.c"
    $149 = $147;
   } else {
    $149 = 0;
   }
   $148 = $149&1; //@line 2469 "stream_encoder.c"
   $5 = $148; //@line 2469 "stream_encoder.c"
  }
 }
 $7 = 0; //@line 2472 "stream_encoder.c"
 while(1) {
  $150 = $5; //@line 2472 "stream_encoder.c"
  $151 = ($150|0)!=(0); //@line 2472 "stream_encoder.c"
  if (!($151)) {
   break;
  }
  $152 = $7; //@line 2472 "stream_encoder.c"
  $153 = $3; //@line 2472 "stream_encoder.c"
  $154 = HEAP32[$153>>2]|0; //@line 2472 "stream_encoder.c"
  $155 = ((($154)) + 24|0); //@line 2472 "stream_encoder.c"
  $156 = HEAP32[$155>>2]|0; //@line 2472 "stream_encoder.c"
  $157 = ($152>>>0)<($156>>>0); //@line 2472 "stream_encoder.c"
  if (!($157)) {
   break;
  }
  $6 = 0; //@line 2473 "stream_encoder.c"
  while(1) {
   $158 = $5; //@line 2473 "stream_encoder.c"
   $159 = ($158|0)!=(0); //@line 2473 "stream_encoder.c"
   $160 = $6; //@line 2473 "stream_encoder.c"
   $161 = ($160>>>0)<(2); //@line 2473 "stream_encoder.c"
   $162 = $159 ? $161 : 0; //@line 2473 "stream_encoder.c"
   if (!($162)) {
    break;
   }
   $163 = $5; //@line 2474 "stream_encoder.c"
   $164 = ($163|0)!=(0); //@line 2474 "stream_encoder.c"
   if ($164) {
    $165 = $4; //@line 2474 "stream_encoder.c"
    $166 = $3; //@line 2474 "stream_encoder.c"
    $167 = ((($166)) + 4|0); //@line 2474 "stream_encoder.c"
    $168 = HEAP32[$167>>2]|0; //@line 2474 "stream_encoder.c"
    $169 = ((($168)) + 7564|0); //@line 2474 "stream_encoder.c"
    $170 = $7; //@line 2474 "stream_encoder.c"
    $171 = (($169) + ($170<<3)|0); //@line 2474 "stream_encoder.c"
    $172 = $6; //@line 2474 "stream_encoder.c"
    $173 = (($171) + ($172<<2)|0); //@line 2474 "stream_encoder.c"
    $174 = $3; //@line 2474 "stream_encoder.c"
    $175 = ((($174)) + 4|0); //@line 2474 "stream_encoder.c"
    $176 = HEAP32[$175>>2]|0; //@line 2474 "stream_encoder.c"
    $177 = ((($176)) + 256|0); //@line 2474 "stream_encoder.c"
    $178 = $7; //@line 2474 "stream_encoder.c"
    $179 = (($177) + ($178<<3)|0); //@line 2474 "stream_encoder.c"
    $180 = $6; //@line 2474 "stream_encoder.c"
    $181 = (($179) + ($180<<2)|0); //@line 2474 "stream_encoder.c"
    $182 = (_FLAC__memory_alloc_aligned_int32_array($165,$173,$181)|0); //@line 2474 "stream_encoder.c"
    $183 = ($182|0)!=(0); //@line 2474 "stream_encoder.c"
    $185 = $183;
   } else {
    $185 = 0;
   }
   $184 = $185&1; //@line 2474 "stream_encoder.c"
   $5 = $184; //@line 2474 "stream_encoder.c"
   $186 = $6; //@line 2473 "stream_encoder.c"
   $187 = (($186) + 1)|0; //@line 2473 "stream_encoder.c"
   $6 = $187; //@line 2473 "stream_encoder.c"
  }
  $188 = $7; //@line 2472 "stream_encoder.c"
  $189 = (($188) + 1)|0; //@line 2472 "stream_encoder.c"
  $7 = $189; //@line 2472 "stream_encoder.c"
 }
 $7 = 0; //@line 2477 "stream_encoder.c"
 while(1) {
  $190 = $5; //@line 2477 "stream_encoder.c"
  $191 = ($190|0)!=(0); //@line 2477 "stream_encoder.c"
  $192 = $7; //@line 2477 "stream_encoder.c"
  $193 = ($192>>>0)<(2); //@line 2477 "stream_encoder.c"
  $194 = $191 ? $193 : 0; //@line 2477 "stream_encoder.c"
  if (!($194)) {
   break;
  }
  $6 = 0; //@line 2478 "stream_encoder.c"
  while(1) {
   $195 = $5; //@line 2478 "stream_encoder.c"
   $196 = ($195|0)!=(0); //@line 2478 "stream_encoder.c"
   $197 = $6; //@line 2478 "stream_encoder.c"
   $198 = ($197>>>0)<(2); //@line 2478 "stream_encoder.c"
   $199 = $196 ? $198 : 0; //@line 2478 "stream_encoder.c"
   if (!($199)) {
    break;
   }
   $200 = $5; //@line 2479 "stream_encoder.c"
   $201 = ($200|0)!=(0); //@line 2479 "stream_encoder.c"
   if ($201) {
    $202 = $4; //@line 2479 "stream_encoder.c"
    $203 = $3; //@line 2479 "stream_encoder.c"
    $204 = ((($203)) + 4|0); //@line 2479 "stream_encoder.c"
    $205 = HEAP32[$204>>2]|0; //@line 2479 "stream_encoder.c"
    $206 = ((($205)) + 7628|0); //@line 2479 "stream_encoder.c"
    $207 = $7; //@line 2479 "stream_encoder.c"
    $208 = (($206) + ($207<<3)|0); //@line 2479 "stream_encoder.c"
    $209 = $6; //@line 2479 "stream_encoder.c"
    $210 = (($208) + ($209<<2)|0); //@line 2479 "stream_encoder.c"
    $211 = $3; //@line 2479 "stream_encoder.c"
    $212 = ((($211)) + 4|0); //@line 2479 "stream_encoder.c"
    $213 = HEAP32[$212>>2]|0; //@line 2479 "stream_encoder.c"
    $214 = ((($213)) + 320|0); //@line 2479 "stream_encoder.c"
    $215 = $7; //@line 2479 "stream_encoder.c"
    $216 = (($214) + ($215<<3)|0); //@line 2479 "stream_encoder.c"
    $217 = $6; //@line 2479 "stream_encoder.c"
    $218 = (($216) + ($217<<2)|0); //@line 2479 "stream_encoder.c"
    $219 = (_FLAC__memory_alloc_aligned_int32_array($202,$210,$218)|0); //@line 2479 "stream_encoder.c"
    $220 = ($219|0)!=(0); //@line 2479 "stream_encoder.c"
    $222 = $220;
   } else {
    $222 = 0;
   }
   $221 = $222&1; //@line 2479 "stream_encoder.c"
   $5 = $221; //@line 2479 "stream_encoder.c"
   $223 = $6; //@line 2478 "stream_encoder.c"
   $224 = (($223) + 1)|0; //@line 2478 "stream_encoder.c"
   $6 = $224; //@line 2478 "stream_encoder.c"
  }
  $225 = $7; //@line 2477 "stream_encoder.c"
  $226 = (($225) + 1)|0; //@line 2477 "stream_encoder.c"
  $7 = $226; //@line 2477 "stream_encoder.c"
 }
 $227 = $5; //@line 2484 "stream_encoder.c"
 $228 = ($227|0)!=(0); //@line 2484 "stream_encoder.c"
 if ($228) {
  $229 = $4; //@line 2484 "stream_encoder.c"
  $230 = $229<<1; //@line 2484 "stream_encoder.c"
  $231 = $3; //@line 2484 "stream_encoder.c"
  $232 = ((($231)) + 4|0); //@line 2484 "stream_encoder.c"
  $233 = HEAP32[$232>>2]|0; //@line 2484 "stream_encoder.c"
  $234 = ((($233)) + 7644|0); //@line 2484 "stream_encoder.c"
  $235 = $3; //@line 2484 "stream_encoder.c"
  $236 = ((($235)) + 4|0); //@line 2484 "stream_encoder.c"
  $237 = HEAP32[$236>>2]|0; //@line 2484 "stream_encoder.c"
  $238 = ((($237)) + 6848|0); //@line 2484 "stream_encoder.c"
  $239 = (_FLAC__memory_alloc_aligned_uint64_array($230,$234,$238)|0); //@line 2484 "stream_encoder.c"
  $240 = ($239|0)!=(0); //@line 2484 "stream_encoder.c"
  $242 = $240;
 } else {
  $242 = 0;
 }
 $241 = $242&1; //@line 2484 "stream_encoder.c"
 $5 = $241; //@line 2484 "stream_encoder.c"
 $243 = $3; //@line 2485 "stream_encoder.c"
 $244 = HEAP32[$243>>2]|0; //@line 2485 "stream_encoder.c"
 $245 = ((($244)) + 572|0); //@line 2485 "stream_encoder.c"
 $246 = HEAP32[$245>>2]|0; //@line 2485 "stream_encoder.c"
 $247 = ($246|0)!=(0); //@line 2485 "stream_encoder.c"
 if ($247) {
  $248 = $5; //@line 2486 "stream_encoder.c"
  $249 = ($248|0)!=(0); //@line 2486 "stream_encoder.c"
  if ($249) {
   $250 = $4; //@line 2486 "stream_encoder.c"
   $251 = $250<<1; //@line 2486 "stream_encoder.c"
   $252 = $3; //@line 2486 "stream_encoder.c"
   $253 = ((($252)) + 4|0); //@line 2486 "stream_encoder.c"
   $254 = HEAP32[$253>>2]|0; //@line 2486 "stream_encoder.c"
   $255 = ((($254)) + 7648|0); //@line 2486 "stream_encoder.c"
   $256 = $3; //@line 2486 "stream_encoder.c"
   $257 = ((($256)) + 4|0); //@line 2486 "stream_encoder.c"
   $258 = HEAP32[$257>>2]|0; //@line 2486 "stream_encoder.c"
   $259 = ((($258)) + 6852|0); //@line 2486 "stream_encoder.c"
   $260 = (_FLAC__memory_alloc_aligned_unsigned_array($251,$255,$259)|0); //@line 2486 "stream_encoder.c"
   $261 = ($260|0)!=(0); //@line 2486 "stream_encoder.c"
   $263 = $261;
  } else {
   $263 = 0;
  }
  $262 = $263&1; //@line 2486 "stream_encoder.c"
  $5 = $262; //@line 2486 "stream_encoder.c"
 }
 $264 = $5; //@line 2490 "stream_encoder.c"
 $265 = ($264|0)!=(0); //@line 2490 "stream_encoder.c"
 L69: do {
  if ($265) {
   $266 = $4; //@line 2490 "stream_encoder.c"
   $267 = $3; //@line 2490 "stream_encoder.c"
   $268 = ((($267)) + 4|0); //@line 2490 "stream_encoder.c"
   $269 = HEAP32[$268>>2]|0; //@line 2490 "stream_encoder.c"
   $270 = HEAP32[$269>>2]|0; //@line 2490 "stream_encoder.c"
   $271 = ($266|0)!=($270|0); //@line 2490 "stream_encoder.c"
   if ($271) {
    $272 = $3; //@line 2490 "stream_encoder.c"
    $273 = HEAP32[$272>>2]|0; //@line 2490 "stream_encoder.c"
    $274 = ((($273)) + 556|0); //@line 2490 "stream_encoder.c"
    $275 = HEAP32[$274>>2]|0; //@line 2490 "stream_encoder.c"
    $276 = ($275>>>0)>(0); //@line 2490 "stream_encoder.c"
    if ($276) {
     $6 = 0; //@line 2491 "stream_encoder.c"
     while(1) {
      $277 = $5; //@line 2491 "stream_encoder.c"
      $278 = ($277|0)!=(0); //@line 2491 "stream_encoder.c"
      if (!($278)) {
       break L69;
      }
      $279 = $6; //@line 2491 "stream_encoder.c"
      $280 = $3; //@line 2491 "stream_encoder.c"
      $281 = HEAP32[$280>>2]|0; //@line 2491 "stream_encoder.c"
      $282 = ((($281)) + 40|0); //@line 2491 "stream_encoder.c"
      $283 = HEAP32[$282>>2]|0; //@line 2491 "stream_encoder.c"
      $284 = ($279>>>0)<($283>>>0); //@line 2491 "stream_encoder.c"
      if (!($284)) {
       break L69;
      }
      $285 = $3; //@line 2492 "stream_encoder.c"
      $286 = HEAP32[$285>>2]|0; //@line 2492 "stream_encoder.c"
      $287 = ((($286)) + 44|0); //@line 2492 "stream_encoder.c"
      $288 = $6; //@line 2492 "stream_encoder.c"
      $289 = (($287) + ($288<<4)|0); //@line 2492 "stream_encoder.c"
      $290 = HEAP32[$289>>2]|0; //@line 2492 "stream_encoder.c"
      do {
       switch ($290|0) {
       case 0:  {
        $291 = $3; //@line 2494 "stream_encoder.c"
        $292 = ((($291)) + 4|0); //@line 2494 "stream_encoder.c"
        $293 = HEAP32[$292>>2]|0; //@line 2494 "stream_encoder.c"
        $294 = ((($293)) + 84|0); //@line 2494 "stream_encoder.c"
        $295 = $6; //@line 2494 "stream_encoder.c"
        $296 = (($294) + ($295<<2)|0); //@line 2494 "stream_encoder.c"
        $297 = HEAP32[$296>>2]|0; //@line 2494 "stream_encoder.c"
        $298 = $4; //@line 2494 "stream_encoder.c"
        _FLAC__window_bartlett($297,$298); //@line 2494 "stream_encoder.c"
        break;
       }
       case 1:  {
        $299 = $3; //@line 2497 "stream_encoder.c"
        $300 = ((($299)) + 4|0); //@line 2497 "stream_encoder.c"
        $301 = HEAP32[$300>>2]|0; //@line 2497 "stream_encoder.c"
        $302 = ((($301)) + 84|0); //@line 2497 "stream_encoder.c"
        $303 = $6; //@line 2497 "stream_encoder.c"
        $304 = (($302) + ($303<<2)|0); //@line 2497 "stream_encoder.c"
        $305 = HEAP32[$304>>2]|0; //@line 2497 "stream_encoder.c"
        $306 = $4; //@line 2497 "stream_encoder.c"
        _FLAC__window_bartlett_hann($305,$306); //@line 2497 "stream_encoder.c"
        break;
       }
       case 2:  {
        $307 = $3; //@line 2500 "stream_encoder.c"
        $308 = ((($307)) + 4|0); //@line 2500 "stream_encoder.c"
        $309 = HEAP32[$308>>2]|0; //@line 2500 "stream_encoder.c"
        $310 = ((($309)) + 84|0); //@line 2500 "stream_encoder.c"
        $311 = $6; //@line 2500 "stream_encoder.c"
        $312 = (($310) + ($311<<2)|0); //@line 2500 "stream_encoder.c"
        $313 = HEAP32[$312>>2]|0; //@line 2500 "stream_encoder.c"
        $314 = $4; //@line 2500 "stream_encoder.c"
        _FLAC__window_blackman($313,$314); //@line 2500 "stream_encoder.c"
        break;
       }
       case 3:  {
        $315 = $3; //@line 2503 "stream_encoder.c"
        $316 = ((($315)) + 4|0); //@line 2503 "stream_encoder.c"
        $317 = HEAP32[$316>>2]|0; //@line 2503 "stream_encoder.c"
        $318 = ((($317)) + 84|0); //@line 2503 "stream_encoder.c"
        $319 = $6; //@line 2503 "stream_encoder.c"
        $320 = (($318) + ($319<<2)|0); //@line 2503 "stream_encoder.c"
        $321 = HEAP32[$320>>2]|0; //@line 2503 "stream_encoder.c"
        $322 = $4; //@line 2503 "stream_encoder.c"
        _FLAC__window_blackman_harris_4term_92db_sidelobe($321,$322); //@line 2503 "stream_encoder.c"
        break;
       }
       case 4:  {
        $323 = $3; //@line 2506 "stream_encoder.c"
        $324 = ((($323)) + 4|0); //@line 2506 "stream_encoder.c"
        $325 = HEAP32[$324>>2]|0; //@line 2506 "stream_encoder.c"
        $326 = ((($325)) + 84|0); //@line 2506 "stream_encoder.c"
        $327 = $6; //@line 2506 "stream_encoder.c"
        $328 = (($326) + ($327<<2)|0); //@line 2506 "stream_encoder.c"
        $329 = HEAP32[$328>>2]|0; //@line 2506 "stream_encoder.c"
        $330 = $4; //@line 2506 "stream_encoder.c"
        _FLAC__window_connes($329,$330); //@line 2506 "stream_encoder.c"
        break;
       }
       case 5:  {
        $331 = $3; //@line 2509 "stream_encoder.c"
        $332 = ((($331)) + 4|0); //@line 2509 "stream_encoder.c"
        $333 = HEAP32[$332>>2]|0; //@line 2509 "stream_encoder.c"
        $334 = ((($333)) + 84|0); //@line 2509 "stream_encoder.c"
        $335 = $6; //@line 2509 "stream_encoder.c"
        $336 = (($334) + ($335<<2)|0); //@line 2509 "stream_encoder.c"
        $337 = HEAP32[$336>>2]|0; //@line 2509 "stream_encoder.c"
        $338 = $4; //@line 2509 "stream_encoder.c"
        _FLAC__window_flattop($337,$338); //@line 2509 "stream_encoder.c"
        break;
       }
       case 6:  {
        $339 = $3; //@line 2512 "stream_encoder.c"
        $340 = ((($339)) + 4|0); //@line 2512 "stream_encoder.c"
        $341 = HEAP32[$340>>2]|0; //@line 2512 "stream_encoder.c"
        $342 = ((($341)) + 84|0); //@line 2512 "stream_encoder.c"
        $343 = $6; //@line 2512 "stream_encoder.c"
        $344 = (($342) + ($343<<2)|0); //@line 2512 "stream_encoder.c"
        $345 = HEAP32[$344>>2]|0; //@line 2512 "stream_encoder.c"
        $346 = $4; //@line 2512 "stream_encoder.c"
        $347 = $3; //@line 2512 "stream_encoder.c"
        $348 = HEAP32[$347>>2]|0; //@line 2512 "stream_encoder.c"
        $349 = ((($348)) + 44|0); //@line 2512 "stream_encoder.c"
        $350 = $6; //@line 2512 "stream_encoder.c"
        $351 = (($349) + ($350<<4)|0); //@line 2512 "stream_encoder.c"
        $352 = ((($351)) + 4|0); //@line 2512 "stream_encoder.c"
        $353 = +HEAPF32[$352>>2]; //@line 2512 "stream_encoder.c"
        _FLAC__window_gauss($345,$346,$353); //@line 2512 "stream_encoder.c"
        break;
       }
       case 7:  {
        $354 = $3; //@line 2515 "stream_encoder.c"
        $355 = ((($354)) + 4|0); //@line 2515 "stream_encoder.c"
        $356 = HEAP32[$355>>2]|0; //@line 2515 "stream_encoder.c"
        $357 = ((($356)) + 84|0); //@line 2515 "stream_encoder.c"
        $358 = $6; //@line 2515 "stream_encoder.c"
        $359 = (($357) + ($358<<2)|0); //@line 2515 "stream_encoder.c"
        $360 = HEAP32[$359>>2]|0; //@line 2515 "stream_encoder.c"
        $361 = $4; //@line 2515 "stream_encoder.c"
        _FLAC__window_hamming($360,$361); //@line 2515 "stream_encoder.c"
        break;
       }
       case 8:  {
        $362 = $3; //@line 2518 "stream_encoder.c"
        $363 = ((($362)) + 4|0); //@line 2518 "stream_encoder.c"
        $364 = HEAP32[$363>>2]|0; //@line 2518 "stream_encoder.c"
        $365 = ((($364)) + 84|0); //@line 2518 "stream_encoder.c"
        $366 = $6; //@line 2518 "stream_encoder.c"
        $367 = (($365) + ($366<<2)|0); //@line 2518 "stream_encoder.c"
        $368 = HEAP32[$367>>2]|0; //@line 2518 "stream_encoder.c"
        $369 = $4; //@line 2518 "stream_encoder.c"
        _FLAC__window_hann($368,$369); //@line 2518 "stream_encoder.c"
        break;
       }
       case 9:  {
        $370 = $3; //@line 2521 "stream_encoder.c"
        $371 = ((($370)) + 4|0); //@line 2521 "stream_encoder.c"
        $372 = HEAP32[$371>>2]|0; //@line 2521 "stream_encoder.c"
        $373 = ((($372)) + 84|0); //@line 2521 "stream_encoder.c"
        $374 = $6; //@line 2521 "stream_encoder.c"
        $375 = (($373) + ($374<<2)|0); //@line 2521 "stream_encoder.c"
        $376 = HEAP32[$375>>2]|0; //@line 2521 "stream_encoder.c"
        $377 = $4; //@line 2521 "stream_encoder.c"
        _FLAC__window_kaiser_bessel($376,$377); //@line 2521 "stream_encoder.c"
        break;
       }
       case 10:  {
        $378 = $3; //@line 2524 "stream_encoder.c"
        $379 = ((($378)) + 4|0); //@line 2524 "stream_encoder.c"
        $380 = HEAP32[$379>>2]|0; //@line 2524 "stream_encoder.c"
        $381 = ((($380)) + 84|0); //@line 2524 "stream_encoder.c"
        $382 = $6; //@line 2524 "stream_encoder.c"
        $383 = (($381) + ($382<<2)|0); //@line 2524 "stream_encoder.c"
        $384 = HEAP32[$383>>2]|0; //@line 2524 "stream_encoder.c"
        $385 = $4; //@line 2524 "stream_encoder.c"
        _FLAC__window_nuttall($384,$385); //@line 2524 "stream_encoder.c"
        break;
       }
       case 11:  {
        $386 = $3; //@line 2527 "stream_encoder.c"
        $387 = ((($386)) + 4|0); //@line 2527 "stream_encoder.c"
        $388 = HEAP32[$387>>2]|0; //@line 2527 "stream_encoder.c"
        $389 = ((($388)) + 84|0); //@line 2527 "stream_encoder.c"
        $390 = $6; //@line 2527 "stream_encoder.c"
        $391 = (($389) + ($390<<2)|0); //@line 2527 "stream_encoder.c"
        $392 = HEAP32[$391>>2]|0; //@line 2527 "stream_encoder.c"
        $393 = $4; //@line 2527 "stream_encoder.c"
        _FLAC__window_rectangle($392,$393); //@line 2527 "stream_encoder.c"
        break;
       }
       case 12:  {
        $394 = $3; //@line 2530 "stream_encoder.c"
        $395 = ((($394)) + 4|0); //@line 2530 "stream_encoder.c"
        $396 = HEAP32[$395>>2]|0; //@line 2530 "stream_encoder.c"
        $397 = ((($396)) + 84|0); //@line 2530 "stream_encoder.c"
        $398 = $6; //@line 2530 "stream_encoder.c"
        $399 = (($397) + ($398<<2)|0); //@line 2530 "stream_encoder.c"
        $400 = HEAP32[$399>>2]|0; //@line 2530 "stream_encoder.c"
        $401 = $4; //@line 2530 "stream_encoder.c"
        _FLAC__window_triangle($400,$401); //@line 2530 "stream_encoder.c"
        break;
       }
       case 13:  {
        $402 = $3; //@line 2533 "stream_encoder.c"
        $403 = ((($402)) + 4|0); //@line 2533 "stream_encoder.c"
        $404 = HEAP32[$403>>2]|0; //@line 2533 "stream_encoder.c"
        $405 = ((($404)) + 84|0); //@line 2533 "stream_encoder.c"
        $406 = $6; //@line 2533 "stream_encoder.c"
        $407 = (($405) + ($406<<2)|0); //@line 2533 "stream_encoder.c"
        $408 = HEAP32[$407>>2]|0; //@line 2533 "stream_encoder.c"
        $409 = $4; //@line 2533 "stream_encoder.c"
        $410 = $3; //@line 2533 "stream_encoder.c"
        $411 = HEAP32[$410>>2]|0; //@line 2533 "stream_encoder.c"
        $412 = ((($411)) + 44|0); //@line 2533 "stream_encoder.c"
        $413 = $6; //@line 2533 "stream_encoder.c"
        $414 = (($412) + ($413<<4)|0); //@line 2533 "stream_encoder.c"
        $415 = ((($414)) + 4|0); //@line 2533 "stream_encoder.c"
        $416 = +HEAPF32[$415>>2]; //@line 2533 "stream_encoder.c"
        _FLAC__window_tukey($408,$409,$416); //@line 2533 "stream_encoder.c"
        break;
       }
       case 14:  {
        $417 = $3; //@line 2536 "stream_encoder.c"
        $418 = ((($417)) + 4|0); //@line 2536 "stream_encoder.c"
        $419 = HEAP32[$418>>2]|0; //@line 2536 "stream_encoder.c"
        $420 = ((($419)) + 84|0); //@line 2536 "stream_encoder.c"
        $421 = $6; //@line 2536 "stream_encoder.c"
        $422 = (($420) + ($421<<2)|0); //@line 2536 "stream_encoder.c"
        $423 = HEAP32[$422>>2]|0; //@line 2536 "stream_encoder.c"
        $424 = $4; //@line 2536 "stream_encoder.c"
        $425 = $3; //@line 2536 "stream_encoder.c"
        $426 = HEAP32[$425>>2]|0; //@line 2536 "stream_encoder.c"
        $427 = ((($426)) + 44|0); //@line 2536 "stream_encoder.c"
        $428 = $6; //@line 2536 "stream_encoder.c"
        $429 = (($427) + ($428<<4)|0); //@line 2536 "stream_encoder.c"
        $430 = ((($429)) + 4|0); //@line 2536 "stream_encoder.c"
        $431 = +HEAPF32[$430>>2]; //@line 2536 "stream_encoder.c"
        $432 = $3; //@line 2536 "stream_encoder.c"
        $433 = HEAP32[$432>>2]|0; //@line 2536 "stream_encoder.c"
        $434 = ((($433)) + 44|0); //@line 2536 "stream_encoder.c"
        $435 = $6; //@line 2536 "stream_encoder.c"
        $436 = (($434) + ($435<<4)|0); //@line 2536 "stream_encoder.c"
        $437 = ((($436)) + 4|0); //@line 2536 "stream_encoder.c"
        $438 = ((($437)) + 4|0); //@line 2536 "stream_encoder.c"
        $439 = +HEAPF32[$438>>2]; //@line 2536 "stream_encoder.c"
        $440 = $3; //@line 2536 "stream_encoder.c"
        $441 = HEAP32[$440>>2]|0; //@line 2536 "stream_encoder.c"
        $442 = ((($441)) + 44|0); //@line 2536 "stream_encoder.c"
        $443 = $6; //@line 2536 "stream_encoder.c"
        $444 = (($442) + ($443<<4)|0); //@line 2536 "stream_encoder.c"
        $445 = ((($444)) + 4|0); //@line 2536 "stream_encoder.c"
        $446 = ((($445)) + 8|0); //@line 2536 "stream_encoder.c"
        $447 = +HEAPF32[$446>>2]; //@line 2536 "stream_encoder.c"
        _FLAC__window_partial_tukey($423,$424,$431,$439,$447); //@line 2536 "stream_encoder.c"
        break;
       }
       case 15:  {
        $448 = $3; //@line 2539 "stream_encoder.c"
        $449 = ((($448)) + 4|0); //@line 2539 "stream_encoder.c"
        $450 = HEAP32[$449>>2]|0; //@line 2539 "stream_encoder.c"
        $451 = ((($450)) + 84|0); //@line 2539 "stream_encoder.c"
        $452 = $6; //@line 2539 "stream_encoder.c"
        $453 = (($451) + ($452<<2)|0); //@line 2539 "stream_encoder.c"
        $454 = HEAP32[$453>>2]|0; //@line 2539 "stream_encoder.c"
        $455 = $4; //@line 2539 "stream_encoder.c"
        $456 = $3; //@line 2539 "stream_encoder.c"
        $457 = HEAP32[$456>>2]|0; //@line 2539 "stream_encoder.c"
        $458 = ((($457)) + 44|0); //@line 2539 "stream_encoder.c"
        $459 = $6; //@line 2539 "stream_encoder.c"
        $460 = (($458) + ($459<<4)|0); //@line 2539 "stream_encoder.c"
        $461 = ((($460)) + 4|0); //@line 2539 "stream_encoder.c"
        $462 = +HEAPF32[$461>>2]; //@line 2539 "stream_encoder.c"
        $463 = $3; //@line 2539 "stream_encoder.c"
        $464 = HEAP32[$463>>2]|0; //@line 2539 "stream_encoder.c"
        $465 = ((($464)) + 44|0); //@line 2539 "stream_encoder.c"
        $466 = $6; //@line 2539 "stream_encoder.c"
        $467 = (($465) + ($466<<4)|0); //@line 2539 "stream_encoder.c"
        $468 = ((($467)) + 4|0); //@line 2539 "stream_encoder.c"
        $469 = ((($468)) + 4|0); //@line 2539 "stream_encoder.c"
        $470 = +HEAPF32[$469>>2]; //@line 2539 "stream_encoder.c"
        $471 = $3; //@line 2539 "stream_encoder.c"
        $472 = HEAP32[$471>>2]|0; //@line 2539 "stream_encoder.c"
        $473 = ((($472)) + 44|0); //@line 2539 "stream_encoder.c"
        $474 = $6; //@line 2539 "stream_encoder.c"
        $475 = (($473) + ($474<<4)|0); //@line 2539 "stream_encoder.c"
        $476 = ((($475)) + 4|0); //@line 2539 "stream_encoder.c"
        $477 = ((($476)) + 8|0); //@line 2539 "stream_encoder.c"
        $478 = +HEAPF32[$477>>2]; //@line 2539 "stream_encoder.c"
        _FLAC__window_punchout_tukey($454,$455,$462,$470,$478); //@line 2539 "stream_encoder.c"
        break;
       }
       case 16:  {
        $479 = $3; //@line 2542 "stream_encoder.c"
        $480 = ((($479)) + 4|0); //@line 2542 "stream_encoder.c"
        $481 = HEAP32[$480>>2]|0; //@line 2542 "stream_encoder.c"
        $482 = ((($481)) + 84|0); //@line 2542 "stream_encoder.c"
        $483 = $6; //@line 2542 "stream_encoder.c"
        $484 = (($482) + ($483<<2)|0); //@line 2542 "stream_encoder.c"
        $485 = HEAP32[$484>>2]|0; //@line 2542 "stream_encoder.c"
        $486 = $4; //@line 2542 "stream_encoder.c"
        _FLAC__window_welch($485,$486); //@line 2542 "stream_encoder.c"
        break;
       }
       default: {
        $487 = $3; //@line 2547 "stream_encoder.c"
        $488 = ((($487)) + 4|0); //@line 2547 "stream_encoder.c"
        $489 = HEAP32[$488>>2]|0; //@line 2547 "stream_encoder.c"
        $490 = ((($489)) + 84|0); //@line 2547 "stream_encoder.c"
        $491 = $6; //@line 2547 "stream_encoder.c"
        $492 = (($490) + ($491<<2)|0); //@line 2547 "stream_encoder.c"
        $493 = HEAP32[$492>>2]|0; //@line 2547 "stream_encoder.c"
        $494 = $4; //@line 2547 "stream_encoder.c"
        _FLAC__window_hann($493,$494); //@line 2547 "stream_encoder.c"
       }
       }
      } while(0);
      $495 = $6; //@line 2491 "stream_encoder.c"
      $496 = (($495) + 1)|0; //@line 2491 "stream_encoder.c"
      $6 = $496; //@line 2491 "stream_encoder.c"
     }
    }
   }
  }
 } while(0);
 $497 = $5; //@line 2554 "stream_encoder.c"
 $498 = ($497|0)!=(0); //@line 2554 "stream_encoder.c"
 if ($498) {
  $499 = $4; //@line 2555 "stream_encoder.c"
  $500 = $3; //@line 2555 "stream_encoder.c"
  $501 = ((($500)) + 4|0); //@line 2555 "stream_encoder.c"
  $502 = HEAP32[$501>>2]|0; //@line 2555 "stream_encoder.c"
  HEAP32[$502>>2] = $499; //@line 2555 "stream_encoder.c"
 } else {
  $503 = $3; //@line 2557 "stream_encoder.c"
  $504 = HEAP32[$503>>2]|0; //@line 2557 "stream_encoder.c"
  HEAP32[$504>>2] = 8; //@line 2557 "stream_encoder.c"
 }
 $505 = $5; //@line 2559 "stream_encoder.c"
 $2 = $505; //@line 2559 "stream_encoder.c"
 $506 = $2; //@line 2560 "stream_encoder.c"
 STACKTOP = sp;return ($506|0); //@line 2560 "stream_encoder.c"
}
function _verify_read_callback_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $8; //@line 4362 "stream_encoder.c"
 $9 = $11; //@line 4362 "stream_encoder.c"
 $12 = $9; //@line 4363 "stream_encoder.c"
 $13 = ((($12)) + 4|0); //@line 4363 "stream_encoder.c"
 $14 = HEAP32[$13>>2]|0; //@line 4363 "stream_encoder.c"
 $15 = ((($14)) + 11776|0); //@line 4363 "stream_encoder.c"
 $16 = ((($15)) + 52|0); //@line 4363 "stream_encoder.c"
 $17 = ((($16)) + 8|0); //@line 4363 "stream_encoder.c"
 $18 = HEAP32[$17>>2]|0; //@line 4363 "stream_encoder.c"
 $10 = $18; //@line 4363 "stream_encoder.c"
 $19 = $9; //@line 4366 "stream_encoder.c"
 $20 = ((($19)) + 4|0); //@line 4366 "stream_encoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 4366 "stream_encoder.c"
 $22 = ((($21)) + 11776|0); //@line 4366 "stream_encoder.c"
 $23 = ((($22)) + 8|0); //@line 4366 "stream_encoder.c"
 $24 = HEAP32[$23>>2]|0; //@line 4366 "stream_encoder.c"
 $25 = ($24|0)!=(0); //@line 4366 "stream_encoder.c"
 if ($25) {
  $26 = $7; //@line 4368 "stream_encoder.c"
  HEAP32[$26>>2] = 4; //@line 4368 "stream_encoder.c"
  $27 = $6; //@line 4369 "stream_encoder.c"
  $28 = $7; //@line 4369 "stream_encoder.c"
  $29 = HEAP32[$28>>2]|0; //@line 4369 "stream_encoder.c"
  _memcpy(($27|0),(2353|0),($29|0))|0; //@line 4369 "stream_encoder.c"
  $30 = $9; //@line 4370 "stream_encoder.c"
  $31 = ((($30)) + 4|0); //@line 4370 "stream_encoder.c"
  $32 = HEAP32[$31>>2]|0; //@line 4370 "stream_encoder.c"
  $33 = ((($32)) + 11776|0); //@line 4370 "stream_encoder.c"
  $34 = ((($33)) + 8|0); //@line 4370 "stream_encoder.c"
  HEAP32[$34>>2] = 0; //@line 4370 "stream_encoder.c"
 } else {
  $35 = $10; //@line 4373 "stream_encoder.c"
  $36 = ($35|0)==(0); //@line 4373 "stream_encoder.c"
  if ($36) {
   $4 = 2; //@line 4379 "stream_encoder.c"
   $71 = $4; //@line 4389 "stream_encoder.c"
   STACKTOP = sp;return ($71|0); //@line 4389 "stream_encoder.c"
  }
  $37 = $10; //@line 4381 "stream_encoder.c"
  $38 = $7; //@line 4381 "stream_encoder.c"
  $39 = HEAP32[$38>>2]|0; //@line 4381 "stream_encoder.c"
  $40 = ($37>>>0)<($39>>>0); //@line 4381 "stream_encoder.c"
  if ($40) {
   $41 = $10; //@line 4382 "stream_encoder.c"
   $42 = $7; //@line 4382 "stream_encoder.c"
   HEAP32[$42>>2] = $41; //@line 4382 "stream_encoder.c"
  }
  $43 = $6; //@line 4383 "stream_encoder.c"
  $44 = $9; //@line 4383 "stream_encoder.c"
  $45 = ((($44)) + 4|0); //@line 4383 "stream_encoder.c"
  $46 = HEAP32[$45>>2]|0; //@line 4383 "stream_encoder.c"
  $47 = ((($46)) + 11776|0); //@line 4383 "stream_encoder.c"
  $48 = ((($47)) + 52|0); //@line 4383 "stream_encoder.c"
  $49 = HEAP32[$48>>2]|0; //@line 4383 "stream_encoder.c"
  $50 = $7; //@line 4383 "stream_encoder.c"
  $51 = HEAP32[$50>>2]|0; //@line 4383 "stream_encoder.c"
  _memcpy(($43|0),($49|0),($51|0))|0; //@line 4383 "stream_encoder.c"
  $52 = $7; //@line 4384 "stream_encoder.c"
  $53 = HEAP32[$52>>2]|0; //@line 4384 "stream_encoder.c"
  $54 = $9; //@line 4384 "stream_encoder.c"
  $55 = ((($54)) + 4|0); //@line 4384 "stream_encoder.c"
  $56 = HEAP32[$55>>2]|0; //@line 4384 "stream_encoder.c"
  $57 = ((($56)) + 11776|0); //@line 4384 "stream_encoder.c"
  $58 = ((($57)) + 52|0); //@line 4384 "stream_encoder.c"
  $59 = HEAP32[$58>>2]|0; //@line 4384 "stream_encoder.c"
  $60 = (($59) + ($53)|0); //@line 4384 "stream_encoder.c"
  HEAP32[$58>>2] = $60; //@line 4384 "stream_encoder.c"
  $61 = $7; //@line 4385 "stream_encoder.c"
  $62 = HEAP32[$61>>2]|0; //@line 4385 "stream_encoder.c"
  $63 = $9; //@line 4385 "stream_encoder.c"
  $64 = ((($63)) + 4|0); //@line 4385 "stream_encoder.c"
  $65 = HEAP32[$64>>2]|0; //@line 4385 "stream_encoder.c"
  $66 = ((($65)) + 11776|0); //@line 4385 "stream_encoder.c"
  $67 = ((($66)) + 52|0); //@line 4385 "stream_encoder.c"
  $68 = ((($67)) + 8|0); //@line 4385 "stream_encoder.c"
  $69 = HEAP32[$68>>2]|0; //@line 4385 "stream_encoder.c"
  $70 = (($69) - ($62))|0; //@line 4385 "stream_encoder.c"
  HEAP32[$68>>2] = $70; //@line 4385 "stream_encoder.c"
 }
 $4 = 0; //@line 4388 "stream_encoder.c"
 $71 = $4; //@line 4389 "stream_encoder.c"
 STACKTOP = sp;return ($71|0); //@line 4389 "stream_encoder.c"
}
function _verify_write_callback_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $8; //@line 4393 "stream_encoder.c"
 $9 = $18; //@line 4393 "stream_encoder.c"
 $19 = $6; //@line 4395 "stream_encoder.c"
 $20 = ((($19)) + 8|0); //@line 4395 "stream_encoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 4395 "stream_encoder.c"
 $11 = $21; //@line 4395 "stream_encoder.c"
 $22 = $6; //@line 4396 "stream_encoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 4396 "stream_encoder.c"
 $12 = $23; //@line 4396 "stream_encoder.c"
 $24 = $12; //@line 4397 "stream_encoder.c"
 $25 = $24<<2; //@line 4397 "stream_encoder.c"
 $13 = $25; //@line 4397 "stream_encoder.c"
 $10 = 0; //@line 4401 "stream_encoder.c"
 while(1) {
  $26 = $10; //@line 4401 "stream_encoder.c"
  $27 = $11; //@line 4401 "stream_encoder.c"
  $28 = ($26>>>0)<($27>>>0); //@line 4401 "stream_encoder.c"
  if (!($28)) {
   label = 11;
   break;
  }
  $29 = $7; //@line 4402 "stream_encoder.c"
  $30 = $10; //@line 4402 "stream_encoder.c"
  $31 = (($29) + ($30<<2)|0); //@line 4402 "stream_encoder.c"
  $32 = HEAP32[$31>>2]|0; //@line 4402 "stream_encoder.c"
  $33 = $9; //@line 4402 "stream_encoder.c"
  $34 = ((($33)) + 4|0); //@line 4402 "stream_encoder.c"
  $35 = HEAP32[$34>>2]|0; //@line 4402 "stream_encoder.c"
  $36 = ((($35)) + 11776|0); //@line 4402 "stream_encoder.c"
  $37 = ((($36)) + 12|0); //@line 4402 "stream_encoder.c"
  $38 = $10; //@line 4402 "stream_encoder.c"
  $39 = (($37) + ($38<<2)|0); //@line 4402 "stream_encoder.c"
  $40 = HEAP32[$39>>2]|0; //@line 4402 "stream_encoder.c"
  $41 = $13; //@line 4402 "stream_encoder.c"
  $42 = (_memcmp($32,$40,$41)|0); //@line 4402 "stream_encoder.c"
  $43 = (0)!=($42|0); //@line 4402 "stream_encoder.c"
  if ($43) {
   break;
  }
  $153 = $10; //@line 4401 "stream_encoder.c"
  $154 = (($153) + 1)|0; //@line 4401 "stream_encoder.c"
  $10 = $154; //@line 4401 "stream_encoder.c"
 }
 if ((label|0) == 11) {
  $155 = $12; //@line 4427 "stream_encoder.c"
  $156 = $9; //@line 4427 "stream_encoder.c"
  $157 = ((($156)) + 4|0); //@line 4427 "stream_encoder.c"
  $158 = HEAP32[$157>>2]|0; //@line 4427 "stream_encoder.c"
  $159 = ((($158)) + 11776|0); //@line 4427 "stream_encoder.c"
  $160 = ((($159)) + 12|0); //@line 4427 "stream_encoder.c"
  $161 = ((($160)) + 36|0); //@line 4427 "stream_encoder.c"
  $162 = HEAP32[$161>>2]|0; //@line 4427 "stream_encoder.c"
  $163 = (($162) - ($155))|0; //@line 4427 "stream_encoder.c"
  HEAP32[$161>>2] = $163; //@line 4427 "stream_encoder.c"
  $10 = 0; //@line 4429 "stream_encoder.c"
  while(1) {
   $164 = $10; //@line 4429 "stream_encoder.c"
   $165 = $11; //@line 4429 "stream_encoder.c"
   $166 = ($164>>>0)<($165>>>0); //@line 4429 "stream_encoder.c"
   if (!($166)) {
    break;
   }
   $167 = $9; //@line 4430 "stream_encoder.c"
   $168 = ((($167)) + 4|0); //@line 4430 "stream_encoder.c"
   $169 = HEAP32[$168>>2]|0; //@line 4430 "stream_encoder.c"
   $170 = ((($169)) + 11776|0); //@line 4430 "stream_encoder.c"
   $171 = ((($170)) + 12|0); //@line 4430 "stream_encoder.c"
   $172 = $10; //@line 4430 "stream_encoder.c"
   $173 = (($171) + ($172<<2)|0); //@line 4430 "stream_encoder.c"
   $174 = HEAP32[$173>>2]|0; //@line 4430 "stream_encoder.c"
   $175 = $9; //@line 4430 "stream_encoder.c"
   $176 = ((($175)) + 4|0); //@line 4430 "stream_encoder.c"
   $177 = HEAP32[$176>>2]|0; //@line 4430 "stream_encoder.c"
   $178 = ((($177)) + 11776|0); //@line 4430 "stream_encoder.c"
   $179 = ((($178)) + 12|0); //@line 4430 "stream_encoder.c"
   $180 = $10; //@line 4430 "stream_encoder.c"
   $181 = (($179) + ($180<<2)|0); //@line 4430 "stream_encoder.c"
   $182 = HEAP32[$181>>2]|0; //@line 4430 "stream_encoder.c"
   $183 = $12; //@line 4430 "stream_encoder.c"
   $184 = (($182) + ($183<<2)|0); //@line 4430 "stream_encoder.c"
   $185 = $9; //@line 4430 "stream_encoder.c"
   $186 = ((($185)) + 4|0); //@line 4430 "stream_encoder.c"
   $187 = HEAP32[$186>>2]|0; //@line 4430 "stream_encoder.c"
   $188 = ((($187)) + 11776|0); //@line 4430 "stream_encoder.c"
   $189 = ((($188)) + 12|0); //@line 4430 "stream_encoder.c"
   $190 = ((($189)) + 36|0); //@line 4430 "stream_encoder.c"
   $191 = HEAP32[$190>>2]|0; //@line 4430 "stream_encoder.c"
   $192 = $191<<2; //@line 4430 "stream_encoder.c"
   _memmove(($174|0),($184|0),($192|0))|0; //@line 4430 "stream_encoder.c"
   $193 = $10; //@line 4429 "stream_encoder.c"
   $194 = (($193) + 1)|0; //@line 4429 "stream_encoder.c"
   $10 = $194; //@line 4429 "stream_encoder.c"
  }
  $4 = 0; //@line 4431 "stream_encoder.c"
  $195 = $4; //@line 4432 "stream_encoder.c"
  STACKTOP = sp;return ($195|0); //@line 4432 "stream_encoder.c"
 }
 $15 = 0; //@line 4403 "stream_encoder.c"
 $16 = 0; //@line 4404 "stream_encoder.c"
 $17 = 0; //@line 4404 "stream_encoder.c"
 $14 = 0; //@line 4406 "stream_encoder.c"
 while(1) {
  $44 = $14; //@line 4406 "stream_encoder.c"
  $45 = $12; //@line 4406 "stream_encoder.c"
  $46 = ($44>>>0)<($45>>>0); //@line 4406 "stream_encoder.c"
  if (!($46)) {
   break;
  }
  $47 = $7; //@line 4407 "stream_encoder.c"
  $48 = $10; //@line 4407 "stream_encoder.c"
  $49 = (($47) + ($48<<2)|0); //@line 4407 "stream_encoder.c"
  $50 = HEAP32[$49>>2]|0; //@line 4407 "stream_encoder.c"
  $51 = $14; //@line 4407 "stream_encoder.c"
  $52 = (($50) + ($51<<2)|0); //@line 4407 "stream_encoder.c"
  $53 = HEAP32[$52>>2]|0; //@line 4407 "stream_encoder.c"
  $54 = $9; //@line 4407 "stream_encoder.c"
  $55 = ((($54)) + 4|0); //@line 4407 "stream_encoder.c"
  $56 = HEAP32[$55>>2]|0; //@line 4407 "stream_encoder.c"
  $57 = ((($56)) + 11776|0); //@line 4407 "stream_encoder.c"
  $58 = ((($57)) + 12|0); //@line 4407 "stream_encoder.c"
  $59 = $10; //@line 4407 "stream_encoder.c"
  $60 = (($58) + ($59<<2)|0); //@line 4407 "stream_encoder.c"
  $61 = HEAP32[$60>>2]|0; //@line 4407 "stream_encoder.c"
  $62 = $14; //@line 4407 "stream_encoder.c"
  $63 = (($61) + ($62<<2)|0); //@line 4407 "stream_encoder.c"
  $64 = HEAP32[$63>>2]|0; //@line 4407 "stream_encoder.c"
  $65 = ($53|0)!=($64|0); //@line 4407 "stream_encoder.c"
  $66 = $14;
  if ($65) {
   label = 7;
   break;
  }
  $85 = (($66) + 1)|0; //@line 4406 "stream_encoder.c"
  $14 = $85; //@line 4406 "stream_encoder.c"
 }
 if ((label|0) == 7) {
  $15 = $66; //@line 4408 "stream_encoder.c"
  $67 = $9; //@line 4409 "stream_encoder.c"
  $68 = ((($67)) + 4|0); //@line 4409 "stream_encoder.c"
  $69 = HEAP32[$68>>2]|0; //@line 4409 "stream_encoder.c"
  $70 = ((($69)) + 11776|0); //@line 4409 "stream_encoder.c"
  $71 = ((($70)) + 12|0); //@line 4409 "stream_encoder.c"
  $72 = $10; //@line 4409 "stream_encoder.c"
  $73 = (($71) + ($72<<2)|0); //@line 4409 "stream_encoder.c"
  $74 = HEAP32[$73>>2]|0; //@line 4409 "stream_encoder.c"
  $75 = $14; //@line 4409 "stream_encoder.c"
  $76 = (($74) + ($75<<2)|0); //@line 4409 "stream_encoder.c"
  $77 = HEAP32[$76>>2]|0; //@line 4409 "stream_encoder.c"
  $16 = $77; //@line 4409 "stream_encoder.c"
  $78 = $7; //@line 4410 "stream_encoder.c"
  $79 = $10; //@line 4410 "stream_encoder.c"
  $80 = (($78) + ($79<<2)|0); //@line 4410 "stream_encoder.c"
  $81 = HEAP32[$80>>2]|0; //@line 4410 "stream_encoder.c"
  $82 = $14; //@line 4410 "stream_encoder.c"
  $83 = (($81) + ($82<<2)|0); //@line 4410 "stream_encoder.c"
  $84 = HEAP32[$83>>2]|0; //@line 4410 "stream_encoder.c"
  $17 = $84; //@line 4410 "stream_encoder.c"
 }
 $86 = $6; //@line 4416 "stream_encoder.c"
 $87 = ((($86)) + 24|0); //@line 4416 "stream_encoder.c"
 $88 = $87; //@line 4416 "stream_encoder.c"
 $89 = $88; //@line 4416 "stream_encoder.c"
 $90 = HEAP32[$89>>2]|0; //@line 4416 "stream_encoder.c"
 $91 = (($88) + 4)|0; //@line 4416 "stream_encoder.c"
 $92 = $91; //@line 4416 "stream_encoder.c"
 $93 = HEAP32[$92>>2]|0; //@line 4416 "stream_encoder.c"
 $94 = $15; //@line 4416 "stream_encoder.c"
 $95 = (_i64Add(($90|0),($93|0),($94|0),0)|0); //@line 4416 "stream_encoder.c"
 $96 = tempRet0; //@line 4416 "stream_encoder.c"
 $97 = $9; //@line 4416 "stream_encoder.c"
 $98 = ((($97)) + 4|0); //@line 4416 "stream_encoder.c"
 $99 = HEAP32[$98>>2]|0; //@line 4416 "stream_encoder.c"
 $100 = ((($99)) + 11776|0); //@line 4416 "stream_encoder.c"
 $101 = ((($100)) + 64|0); //@line 4416 "stream_encoder.c"
 $102 = $101; //@line 4416 "stream_encoder.c"
 $103 = $102; //@line 4416 "stream_encoder.c"
 HEAP32[$103>>2] = $95; //@line 4416 "stream_encoder.c"
 $104 = (($102) + 4)|0; //@line 4416 "stream_encoder.c"
 $105 = $104; //@line 4416 "stream_encoder.c"
 HEAP32[$105>>2] = $96; //@line 4416 "stream_encoder.c"
 $106 = $6; //@line 4417 "stream_encoder.c"
 $107 = ((($106)) + 24|0); //@line 4417 "stream_encoder.c"
 $108 = $107; //@line 4417 "stream_encoder.c"
 $109 = $108; //@line 4417 "stream_encoder.c"
 $110 = HEAP32[$109>>2]|0; //@line 4417 "stream_encoder.c"
 $111 = (($108) + 4)|0; //@line 4417 "stream_encoder.c"
 $112 = $111; //@line 4417 "stream_encoder.c"
 $113 = HEAP32[$112>>2]|0; //@line 4417 "stream_encoder.c"
 $114 = $12; //@line 4417 "stream_encoder.c"
 $115 = (___udivdi3(($110|0),($113|0),($114|0),0)|0); //@line 4417 "stream_encoder.c"
 $116 = tempRet0; //@line 4417 "stream_encoder.c"
 $117 = $9; //@line 4417 "stream_encoder.c"
 $118 = ((($117)) + 4|0); //@line 4417 "stream_encoder.c"
 $119 = HEAP32[$118>>2]|0; //@line 4417 "stream_encoder.c"
 $120 = ((($119)) + 11776|0); //@line 4417 "stream_encoder.c"
 $121 = ((($120)) + 64|0); //@line 4417 "stream_encoder.c"
 $122 = ((($121)) + 8|0); //@line 4417 "stream_encoder.c"
 HEAP32[$122>>2] = $115; //@line 4417 "stream_encoder.c"
 $123 = $10; //@line 4418 "stream_encoder.c"
 $124 = $9; //@line 4418 "stream_encoder.c"
 $125 = ((($124)) + 4|0); //@line 4418 "stream_encoder.c"
 $126 = HEAP32[$125>>2]|0; //@line 4418 "stream_encoder.c"
 $127 = ((($126)) + 11776|0); //@line 4418 "stream_encoder.c"
 $128 = ((($127)) + 64|0); //@line 4418 "stream_encoder.c"
 $129 = ((($128)) + 12|0); //@line 4418 "stream_encoder.c"
 HEAP32[$129>>2] = $123; //@line 4418 "stream_encoder.c"
 $130 = $15; //@line 4419 "stream_encoder.c"
 $131 = $9; //@line 4419 "stream_encoder.c"
 $132 = ((($131)) + 4|0); //@line 4419 "stream_encoder.c"
 $133 = HEAP32[$132>>2]|0; //@line 4419 "stream_encoder.c"
 $134 = ((($133)) + 11776|0); //@line 4419 "stream_encoder.c"
 $135 = ((($134)) + 64|0); //@line 4419 "stream_encoder.c"
 $136 = ((($135)) + 16|0); //@line 4419 "stream_encoder.c"
 HEAP32[$136>>2] = $130; //@line 4419 "stream_encoder.c"
 $137 = $16; //@line 4420 "stream_encoder.c"
 $138 = $9; //@line 4420 "stream_encoder.c"
 $139 = ((($138)) + 4|0); //@line 4420 "stream_encoder.c"
 $140 = HEAP32[$139>>2]|0; //@line 4420 "stream_encoder.c"
 $141 = ((($140)) + 11776|0); //@line 4420 "stream_encoder.c"
 $142 = ((($141)) + 64|0); //@line 4420 "stream_encoder.c"
 $143 = ((($142)) + 20|0); //@line 4420 "stream_encoder.c"
 HEAP32[$143>>2] = $137; //@line 4420 "stream_encoder.c"
 $144 = $17; //@line 4421 "stream_encoder.c"
 $145 = $9; //@line 4421 "stream_encoder.c"
 $146 = ((($145)) + 4|0); //@line 4421 "stream_encoder.c"
 $147 = HEAP32[$146>>2]|0; //@line 4421 "stream_encoder.c"
 $148 = ((($147)) + 11776|0); //@line 4421 "stream_encoder.c"
 $149 = ((($148)) + 64|0); //@line 4421 "stream_encoder.c"
 $150 = ((($149)) + 24|0); //@line 4421 "stream_encoder.c"
 HEAP32[$150>>2] = $144; //@line 4421 "stream_encoder.c"
 $151 = $9; //@line 4422 "stream_encoder.c"
 $152 = HEAP32[$151>>2]|0; //@line 4422 "stream_encoder.c"
 HEAP32[$152>>2] = 4; //@line 4422 "stream_encoder.c"
 $4 = 1; //@line 4423 "stream_encoder.c"
 $195 = $4; //@line 4432 "stream_encoder.c"
 STACKTOP = sp;return ($195|0); //@line 4432 "stream_encoder.c"
}
function _verify_metadata_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return; //@line 4437 "stream_encoder.c"
}
function _verify_error_callback_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5; //@line 4441 "stream_encoder.c"
 $6 = $7; //@line 4441 "stream_encoder.c"
 $8 = $6; //@line 4443 "stream_encoder.c"
 $9 = HEAP32[$8>>2]|0; //@line 4443 "stream_encoder.c"
 HEAP32[$9>>2] = 3; //@line 4443 "stream_encoder.c"
 STACKTOP = sp;return; //@line 4444 "stream_encoder.c"
}
function _FLAC__stream_encoder_set_verify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1528 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1528 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1528 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1528 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1529 "stream_encoder.c"
  $13 = $2; //@line 1534 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1534 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1531 "stream_encoder.c"
  $10 = $3; //@line 1531 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1531 "stream_encoder.c"
  $12 = ((($11)) + 4|0); //@line 1531 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1531 "stream_encoder.c"
  $2 = 1; //@line 1533 "stream_encoder.c"
  $13 = $2; //@line 1534 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1534 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_channels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1563 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1563 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1563 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1563 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1564 "stream_encoder.c"
  $13 = $2; //@line 1567 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1567 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1565 "stream_encoder.c"
  $10 = $3; //@line 1565 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1565 "stream_encoder.c"
  $12 = ((($11)) + 24|0); //@line 1565 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1565 "stream_encoder.c"
  $2 = 1; //@line 1566 "stream_encoder.c"
  $13 = $2; //@line 1567 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1567 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_bits_per_sample($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1574 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1574 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1574 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1574 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1575 "stream_encoder.c"
  $13 = $2; //@line 1578 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1578 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1576 "stream_encoder.c"
  $10 = $3; //@line 1576 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1576 "stream_encoder.c"
  $12 = ((($11)) + 28|0); //@line 1576 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1576 "stream_encoder.c"
  $2 = 1; //@line 1577 "stream_encoder.c"
  $13 = $2; //@line 1578 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1578 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_sample_rate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1585 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1585 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1585 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1585 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1586 "stream_encoder.c"
  $13 = $2; //@line 1589 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1589 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1587 "stream_encoder.c"
  $10 = $3; //@line 1587 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1587 "stream_encoder.c"
  $12 = ((($11)) + 32|0); //@line 1587 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1587 "stream_encoder.c"
  $2 = 1; //@line 1588 "stream_encoder.c"
  $13 = $2; //@line 1589 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1589 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_blocksize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 1629 "stream_encoder.c"
 $6 = HEAP32[$5>>2]|0; //@line 1629 "stream_encoder.c"
 $7 = HEAP32[$6>>2]|0; //@line 1629 "stream_encoder.c"
 $8 = ($7|0)!=(1); //@line 1629 "stream_encoder.c"
 if ($8) {
  $2 = 0; //@line 1630 "stream_encoder.c"
  $13 = $2; //@line 1633 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1633 "stream_encoder.c"
 } else {
  $9 = $4; //@line 1631 "stream_encoder.c"
  $10 = $3; //@line 1631 "stream_encoder.c"
  $11 = HEAP32[$10>>2]|0; //@line 1631 "stream_encoder.c"
  $12 = ((($11)) + 36|0); //@line 1631 "stream_encoder.c"
  HEAP32[$12>>2] = $9; //@line 1631 "stream_encoder.c"
  $2 = 1; //@line 1632 "stream_encoder.c"
  $13 = $2; //@line 1633 "stream_encoder.c"
  STACKTOP = sp;return ($13|0); //@line 1633 "stream_encoder.c"
 }
 return (0)|0;
}
function _FLAC__stream_encoder_set_total_samples_estimate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $4 = $0;
 $6 = $5;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = $4; //@line 1874 "stream_encoder.c"
 $11 = HEAP32[$10>>2]|0; //@line 1874 "stream_encoder.c"
 $12 = HEAP32[$11>>2]|0; //@line 1874 "stream_encoder.c"
 $13 = ($12|0)!=(1); //@line 1874 "stream_encoder.c"
 if ($13) {
  $3 = 0; //@line 1875 "stream_encoder.c"
  $60 = $3; //@line 1879 "stream_encoder.c"
  STACKTOP = sp;return ($60|0); //@line 1879 "stream_encoder.c"
 }
 $14 = $5; //@line 1876 "stream_encoder.c"
 $15 = $14; //@line 1876 "stream_encoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 1876 "stream_encoder.c"
 $17 = (($14) + 4)|0; //@line 1876 "stream_encoder.c"
 $18 = $17; //@line 1876 "stream_encoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 1876 "stream_encoder.c"
 $20 = HEAP32[260]|0; //@line 1876 "stream_encoder.c"
 $21 = (_bitshift64Shl(1,0,($20|0))|0); //@line 1876 "stream_encoder.c"
 $22 = tempRet0; //@line 1876 "stream_encoder.c"
 $23 = (_i64Subtract(($21|0),($22|0),1,0)|0); //@line 1876 "stream_encoder.c"
 $24 = tempRet0; //@line 1876 "stream_encoder.c"
 $25 = ($19>>>0)<($24>>>0); //@line 1876 "stream_encoder.c"
 $26 = ($16>>>0)<($23>>>0); //@line 1876 "stream_encoder.c"
 $27 = ($19|0)==($24|0); //@line 1876 "stream_encoder.c"
 $28 = $27 & $26; //@line 1876 "stream_encoder.c"
 $29 = $25 | $28; //@line 1876 "stream_encoder.c"
 if ($29) {
  $30 = $5; //@line 1876 "stream_encoder.c"
  $31 = $30; //@line 1876 "stream_encoder.c"
  $32 = HEAP32[$31>>2]|0; //@line 1876 "stream_encoder.c"
  $33 = (($30) + 4)|0; //@line 1876 "stream_encoder.c"
  $34 = $33; //@line 1876 "stream_encoder.c"
  $35 = HEAP32[$34>>2]|0; //@line 1876 "stream_encoder.c"
  $43 = $32;$46 = $35;
 } else {
  $36 = HEAP32[260]|0; //@line 1876 "stream_encoder.c"
  $37 = (_bitshift64Shl(1,0,($36|0))|0); //@line 1876 "stream_encoder.c"
  $38 = tempRet0; //@line 1876 "stream_encoder.c"
  $39 = (_i64Subtract(($37|0),($38|0),1,0)|0); //@line 1876 "stream_encoder.c"
  $40 = tempRet0; //@line 1876 "stream_encoder.c"
  $43 = $39;$46 = $40;
 }
 $41 = $5; //@line 1876 "stream_encoder.c"
 $42 = $41; //@line 1876 "stream_encoder.c"
 HEAP32[$42>>2] = $43; //@line 1876 "stream_encoder.c"
 $44 = (($41) + 4)|0; //@line 1876 "stream_encoder.c"
 $45 = $44; //@line 1876 "stream_encoder.c"
 HEAP32[$45>>2] = $46; //@line 1876 "stream_encoder.c"
 $47 = $5; //@line 1877 "stream_encoder.c"
 $48 = $47; //@line 1877 "stream_encoder.c"
 $49 = HEAP32[$48>>2]|0; //@line 1877 "stream_encoder.c"
 $50 = (($47) + 4)|0; //@line 1877 "stream_encoder.c"
 $51 = $50; //@line 1877 "stream_encoder.c"
 $52 = HEAP32[$51>>2]|0; //@line 1877 "stream_encoder.c"
 $53 = $4; //@line 1877 "stream_encoder.c"
 $54 = HEAP32[$53>>2]|0; //@line 1877 "stream_encoder.c"
 $55 = ((($54)) + 592|0); //@line 1877 "stream_encoder.c"
 $56 = $55; //@line 1877 "stream_encoder.c"
 $57 = $56; //@line 1877 "stream_encoder.c"
 HEAP32[$57>>2] = $49; //@line 1877 "stream_encoder.c"
 $58 = (($56) + 4)|0; //@line 1877 "stream_encoder.c"
 $59 = $58; //@line 1877 "stream_encoder.c"
 HEAP32[$59>>2] = $52; //@line 1877 "stream_encoder.c"
 $3 = 1; //@line 1878 "stream_encoder.c"
 $60 = $3; //@line 1879 "stream_encoder.c"
 STACKTOP = sp;return ($60|0); //@line 1879 "stream_encoder.c"
}
function _FLAC__stream_encoder_get_state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1; //@line 1955 "stream_encoder.c"
 $3 = HEAP32[$2>>2]|0; //@line 1955 "stream_encoder.c"
 $4 = HEAP32[$3>>2]|0; //@line 1955 "stream_encoder.c"
 STACKTOP = sp;return ($4|0); //@line 1955 "stream_encoder.c"
}
function _FLAC__stream_encoder_process_interleaved($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $16 = $4; //@line 2203 "stream_encoder.c"
 $17 = HEAP32[$16>>2]|0; //@line 2203 "stream_encoder.c"
 $18 = ((($17)) + 24|0); //@line 2203 "stream_encoder.c"
 $19 = HEAP32[$18>>2]|0; //@line 2203 "stream_encoder.c"
 $14 = $19; //@line 2203 "stream_encoder.c"
 $20 = $4; //@line 2203 "stream_encoder.c"
 $21 = HEAP32[$20>>2]|0; //@line 2203 "stream_encoder.c"
 $22 = ((($21)) + 36|0); //@line 2203 "stream_encoder.c"
 $23 = HEAP32[$22>>2]|0; //@line 2203 "stream_encoder.c"
 $15 = $23; //@line 2203 "stream_encoder.c"
 $9 = 0; //@line 2210 "stream_encoder.c"
 $8 = 0; //@line 2210 "stream_encoder.c"
 $24 = $4; //@line 2215 "stream_encoder.c"
 $25 = HEAP32[$24>>2]|0; //@line 2215 "stream_encoder.c"
 $26 = ((($25)) + 16|0); //@line 2215 "stream_encoder.c"
 $27 = HEAP32[$26>>2]|0; //@line 2215 "stream_encoder.c"
 $28 = ($27|0)!=(0); //@line 2215 "stream_encoder.c"
 $29 = $14; //@line 2215 "stream_encoder.c"
 $30 = ($29|0)==(2); //@line 2215 "stream_encoder.c"
 $or$cond = $28 & $30; //@line 2215 "stream_encoder.c"
 L1: do {
  if ($or$cond) {
   while(1) {
    $31 = $4; //@line 2220 "stream_encoder.c"
    $32 = HEAP32[$31>>2]|0; //@line 2220 "stream_encoder.c"
    $33 = ((($32)) + 4|0); //@line 2220 "stream_encoder.c"
    $34 = HEAP32[$33>>2]|0; //@line 2220 "stream_encoder.c"
    $35 = ($34|0)!=(0); //@line 2220 "stream_encoder.c"
    if ($35) {
     $36 = $4; //@line 2221 "stream_encoder.c"
     $37 = ((($36)) + 4|0); //@line 2221 "stream_encoder.c"
     $38 = HEAP32[$37>>2]|0; //@line 2221 "stream_encoder.c"
     $39 = ((($38)) + 11776|0); //@line 2221 "stream_encoder.c"
     $40 = ((($39)) + 12|0); //@line 2221 "stream_encoder.c"
     $41 = $5; //@line 2221 "stream_encoder.c"
     $42 = $8; //@line 2221 "stream_encoder.c"
     $43 = $14; //@line 2221 "stream_encoder.c"
     $44 = $15; //@line 2221 "stream_encoder.c"
     $45 = (($44) + 1)|0; //@line 2221 "stream_encoder.c"
     $46 = $4; //@line 2221 "stream_encoder.c"
     $47 = ((($46)) + 4|0); //@line 2221 "stream_encoder.c"
     $48 = HEAP32[$47>>2]|0; //@line 2221 "stream_encoder.c"
     $49 = ((($48)) + 7052|0); //@line 2221 "stream_encoder.c"
     $50 = HEAP32[$49>>2]|0; //@line 2221 "stream_encoder.c"
     $51 = (($45) - ($50))|0; //@line 2221 "stream_encoder.c"
     $52 = $6; //@line 2221 "stream_encoder.c"
     $53 = $8; //@line 2221 "stream_encoder.c"
     $54 = (($52) - ($53))|0; //@line 2221 "stream_encoder.c"
     $55 = ($51>>>0)<($54>>>0); //@line 2221 "stream_encoder.c"
     if ($55) {
      $56 = $15; //@line 2221 "stream_encoder.c"
      $57 = (($56) + 1)|0; //@line 2221 "stream_encoder.c"
      $58 = $4; //@line 2221 "stream_encoder.c"
      $59 = ((($58)) + 4|0); //@line 2221 "stream_encoder.c"
      $60 = HEAP32[$59>>2]|0; //@line 2221 "stream_encoder.c"
      $61 = ((($60)) + 7052|0); //@line 2221 "stream_encoder.c"
      $62 = HEAP32[$61>>2]|0; //@line 2221 "stream_encoder.c"
      $63 = (($57) - ($62))|0; //@line 2221 "stream_encoder.c"
      $67 = $63;
     } else {
      $64 = $6; //@line 2221 "stream_encoder.c"
      $65 = $8; //@line 2221 "stream_encoder.c"
      $66 = (($64) - ($65))|0; //@line 2221 "stream_encoder.c"
      $67 = $66;
     }
     _append_to_verify_fifo_interleaved_($40,$41,$42,$43,$67); //@line 2221 "stream_encoder.c"
    }
    $68 = $4; //@line 2224 "stream_encoder.c"
    $69 = ((($68)) + 4|0); //@line 2224 "stream_encoder.c"
    $70 = HEAP32[$69>>2]|0; //@line 2224 "stream_encoder.c"
    $71 = ((($70)) + 7052|0); //@line 2224 "stream_encoder.c"
    $72 = HEAP32[$71>>2]|0; //@line 2224 "stream_encoder.c"
    $7 = $72; //@line 2224 "stream_encoder.c"
    while(1) {
     $73 = $7; //@line 2224 "stream_encoder.c"
     $74 = $15; //@line 2224 "stream_encoder.c"
     $75 = ($73>>>0)<=($74>>>0); //@line 2224 "stream_encoder.c"
     if (!($75)) {
      break;
     }
     $76 = $8; //@line 2224 "stream_encoder.c"
     $77 = $6; //@line 2224 "stream_encoder.c"
     $78 = ($76>>>0)<($77>>>0); //@line 2224 "stream_encoder.c"
     if (!($78)) {
      break;
     }
     $79 = $5; //@line 2225 "stream_encoder.c"
     $80 = $9; //@line 2225 "stream_encoder.c"
     $81 = (($80) + 1)|0; //@line 2225 "stream_encoder.c"
     $9 = $81; //@line 2225 "stream_encoder.c"
     $82 = (($79) + ($80<<2)|0); //@line 2225 "stream_encoder.c"
     $83 = HEAP32[$82>>2]|0; //@line 2225 "stream_encoder.c"
     $13 = $83; //@line 2225 "stream_encoder.c"
     $12 = $83; //@line 2225 "stream_encoder.c"
     $84 = $4; //@line 2225 "stream_encoder.c"
     $85 = ((($84)) + 4|0); //@line 2225 "stream_encoder.c"
     $86 = HEAP32[$85>>2]|0; //@line 2225 "stream_encoder.c"
     $87 = ((($86)) + 4|0); //@line 2225 "stream_encoder.c"
     $88 = HEAP32[$87>>2]|0; //@line 2225 "stream_encoder.c"
     $89 = $7; //@line 2225 "stream_encoder.c"
     $90 = (($88) + ($89<<2)|0); //@line 2225 "stream_encoder.c"
     HEAP32[$90>>2] = $83; //@line 2225 "stream_encoder.c"
     $91 = $5; //@line 2226 "stream_encoder.c"
     $92 = $9; //@line 2226 "stream_encoder.c"
     $93 = (($92) + 1)|0; //@line 2226 "stream_encoder.c"
     $9 = $93; //@line 2226 "stream_encoder.c"
     $94 = (($91) + ($92<<2)|0); //@line 2226 "stream_encoder.c"
     $95 = HEAP32[$94>>2]|0; //@line 2226 "stream_encoder.c"
     $11 = $95; //@line 2226 "stream_encoder.c"
     $96 = $11; //@line 2227 "stream_encoder.c"
     $97 = $4; //@line 2227 "stream_encoder.c"
     $98 = ((($97)) + 4|0); //@line 2227 "stream_encoder.c"
     $99 = HEAP32[$98>>2]|0; //@line 2227 "stream_encoder.c"
     $100 = ((($99)) + 4|0); //@line 2227 "stream_encoder.c"
     $101 = ((($100)) + 4|0); //@line 2227 "stream_encoder.c"
     $102 = HEAP32[$101>>2]|0; //@line 2227 "stream_encoder.c"
     $103 = $7; //@line 2227 "stream_encoder.c"
     $104 = (($102) + ($103<<2)|0); //@line 2227 "stream_encoder.c"
     HEAP32[$104>>2] = $96; //@line 2227 "stream_encoder.c"
     $105 = $11; //@line 2228 "stream_encoder.c"
     $106 = $12; //@line 2228 "stream_encoder.c"
     $107 = (($106) + ($105))|0; //@line 2228 "stream_encoder.c"
     $12 = $107; //@line 2228 "stream_encoder.c"
     $108 = $11; //@line 2229 "stream_encoder.c"
     $109 = $13; //@line 2229 "stream_encoder.c"
     $110 = (($109) - ($108))|0; //@line 2229 "stream_encoder.c"
     $13 = $110; //@line 2229 "stream_encoder.c"
     $111 = $12; //@line 2230 "stream_encoder.c"
     $112 = $111 >> 1; //@line 2230 "stream_encoder.c"
     $12 = $112; //@line 2230 "stream_encoder.c"
     $113 = $13; //@line 2231 "stream_encoder.c"
     $114 = $4; //@line 2231 "stream_encoder.c"
     $115 = ((($114)) + 4|0); //@line 2231 "stream_encoder.c"
     $116 = HEAP32[$115>>2]|0; //@line 2231 "stream_encoder.c"
     $117 = ((($116)) + 36|0); //@line 2231 "stream_encoder.c"
     $118 = ((($117)) + 4|0); //@line 2231 "stream_encoder.c"
     $119 = HEAP32[$118>>2]|0; //@line 2231 "stream_encoder.c"
     $120 = $7; //@line 2231 "stream_encoder.c"
     $121 = (($119) + ($120<<2)|0); //@line 2231 "stream_encoder.c"
     HEAP32[$121>>2] = $113; //@line 2231 "stream_encoder.c"
     $122 = $12; //@line 2232 "stream_encoder.c"
     $123 = $4; //@line 2232 "stream_encoder.c"
     $124 = ((($123)) + 4|0); //@line 2232 "stream_encoder.c"
     $125 = HEAP32[$124>>2]|0; //@line 2232 "stream_encoder.c"
     $126 = ((($125)) + 36|0); //@line 2232 "stream_encoder.c"
     $127 = HEAP32[$126>>2]|0; //@line 2232 "stream_encoder.c"
     $128 = $7; //@line 2232 "stream_encoder.c"
     $129 = (($127) + ($128<<2)|0); //@line 2232 "stream_encoder.c"
     HEAP32[$129>>2] = $122; //@line 2232 "stream_encoder.c"
     $130 = $7; //@line 2224 "stream_encoder.c"
     $131 = (($130) + 1)|0; //@line 2224 "stream_encoder.c"
     $7 = $131; //@line 2224 "stream_encoder.c"
     $132 = $8; //@line 2224 "stream_encoder.c"
     $133 = (($132) + 1)|0; //@line 2224 "stream_encoder.c"
     $8 = $133; //@line 2224 "stream_encoder.c"
    }
    $134 = $7; //@line 2234 "stream_encoder.c"
    $135 = $4; //@line 2234 "stream_encoder.c"
    $136 = ((($135)) + 4|0); //@line 2234 "stream_encoder.c"
    $137 = HEAP32[$136>>2]|0; //@line 2234 "stream_encoder.c"
    $138 = ((($137)) + 7052|0); //@line 2234 "stream_encoder.c"
    HEAP32[$138>>2] = $134; //@line 2234 "stream_encoder.c"
    $139 = $7; //@line 2236 "stream_encoder.c"
    $140 = $15; //@line 2236 "stream_encoder.c"
    $141 = ($139>>>0)>($140>>>0); //@line 2236 "stream_encoder.c"
    if ($141) {
     $142 = $4; //@line 2237 "stream_encoder.c"
     $143 = (_process_frame_($142,0,0)|0); //@line 2237 "stream_encoder.c"
     $144 = ($143|0)!=(0); //@line 2237 "stream_encoder.c"
     if (!($144)) {
      break;
     }
     $145 = $4; //@line 2242 "stream_encoder.c"
     $146 = ((($145)) + 4|0); //@line 2242 "stream_encoder.c"
     $147 = HEAP32[$146>>2]|0; //@line 2242 "stream_encoder.c"
     $148 = ((($147)) + 4|0); //@line 2242 "stream_encoder.c"
     $149 = HEAP32[$148>>2]|0; //@line 2242 "stream_encoder.c"
     $150 = $15; //@line 2242 "stream_encoder.c"
     $151 = (($149) + ($150<<2)|0); //@line 2242 "stream_encoder.c"
     $152 = HEAP32[$151>>2]|0; //@line 2242 "stream_encoder.c"
     $153 = $4; //@line 2242 "stream_encoder.c"
     $154 = ((($153)) + 4|0); //@line 2242 "stream_encoder.c"
     $155 = HEAP32[$154>>2]|0; //@line 2242 "stream_encoder.c"
     $156 = ((($155)) + 4|0); //@line 2242 "stream_encoder.c"
     $157 = HEAP32[$156>>2]|0; //@line 2242 "stream_encoder.c"
     HEAP32[$157>>2] = $152; //@line 2242 "stream_encoder.c"
     $158 = $4; //@line 2243 "stream_encoder.c"
     $159 = ((($158)) + 4|0); //@line 2243 "stream_encoder.c"
     $160 = HEAP32[$159>>2]|0; //@line 2243 "stream_encoder.c"
     $161 = ((($160)) + 4|0); //@line 2243 "stream_encoder.c"
     $162 = ((($161)) + 4|0); //@line 2243 "stream_encoder.c"
     $163 = HEAP32[$162>>2]|0; //@line 2243 "stream_encoder.c"
     $164 = $15; //@line 2243 "stream_encoder.c"
     $165 = (($163) + ($164<<2)|0); //@line 2243 "stream_encoder.c"
     $166 = HEAP32[$165>>2]|0; //@line 2243 "stream_encoder.c"
     $167 = $4; //@line 2243 "stream_encoder.c"
     $168 = ((($167)) + 4|0); //@line 2243 "stream_encoder.c"
     $169 = HEAP32[$168>>2]|0; //@line 2243 "stream_encoder.c"
     $170 = ((($169)) + 4|0); //@line 2243 "stream_encoder.c"
     $171 = ((($170)) + 4|0); //@line 2243 "stream_encoder.c"
     $172 = HEAP32[$171>>2]|0; //@line 2243 "stream_encoder.c"
     HEAP32[$172>>2] = $166; //@line 2243 "stream_encoder.c"
     $173 = $4; //@line 2244 "stream_encoder.c"
     $174 = ((($173)) + 4|0); //@line 2244 "stream_encoder.c"
     $175 = HEAP32[$174>>2]|0; //@line 2244 "stream_encoder.c"
     $176 = ((($175)) + 36|0); //@line 2244 "stream_encoder.c"
     $177 = HEAP32[$176>>2]|0; //@line 2244 "stream_encoder.c"
     $178 = $15; //@line 2244 "stream_encoder.c"
     $179 = (($177) + ($178<<2)|0); //@line 2244 "stream_encoder.c"
     $180 = HEAP32[$179>>2]|0; //@line 2244 "stream_encoder.c"
     $181 = $4; //@line 2244 "stream_encoder.c"
     $182 = ((($181)) + 4|0); //@line 2244 "stream_encoder.c"
     $183 = HEAP32[$182>>2]|0; //@line 2244 "stream_encoder.c"
     $184 = ((($183)) + 36|0); //@line 2244 "stream_encoder.c"
     $185 = HEAP32[$184>>2]|0; //@line 2244 "stream_encoder.c"
     HEAP32[$185>>2] = $180; //@line 2244 "stream_encoder.c"
     $186 = $4; //@line 2245 "stream_encoder.c"
     $187 = ((($186)) + 4|0); //@line 2245 "stream_encoder.c"
     $188 = HEAP32[$187>>2]|0; //@line 2245 "stream_encoder.c"
     $189 = ((($188)) + 36|0); //@line 2245 "stream_encoder.c"
     $190 = ((($189)) + 4|0); //@line 2245 "stream_encoder.c"
     $191 = HEAP32[$190>>2]|0; //@line 2245 "stream_encoder.c"
     $192 = $15; //@line 2245 "stream_encoder.c"
     $193 = (($191) + ($192<<2)|0); //@line 2245 "stream_encoder.c"
     $194 = HEAP32[$193>>2]|0; //@line 2245 "stream_encoder.c"
     $195 = $4; //@line 2245 "stream_encoder.c"
     $196 = ((($195)) + 4|0); //@line 2245 "stream_encoder.c"
     $197 = HEAP32[$196>>2]|0; //@line 2245 "stream_encoder.c"
     $198 = ((($197)) + 36|0); //@line 2245 "stream_encoder.c"
     $199 = ((($198)) + 4|0); //@line 2245 "stream_encoder.c"
     $200 = HEAP32[$199>>2]|0; //@line 2245 "stream_encoder.c"
     HEAP32[$200>>2] = $194; //@line 2245 "stream_encoder.c"
     $201 = $4; //@line 2246 "stream_encoder.c"
     $202 = ((($201)) + 4|0); //@line 2246 "stream_encoder.c"
     $203 = HEAP32[$202>>2]|0; //@line 2246 "stream_encoder.c"
     $204 = ((($203)) + 7052|0); //@line 2246 "stream_encoder.c"
     HEAP32[$204>>2] = 1; //@line 2246 "stream_encoder.c"
    }
    $205 = $8; //@line 2248 "stream_encoder.c"
    $206 = $6; //@line 2248 "stream_encoder.c"
    $207 = ($205>>>0)<($206>>>0); //@line 2248 "stream_encoder.c"
    if (!($207)) {
     break L1;
    }
   }
   $3 = 0; //@line 2238 "stream_encoder.c"
   $316 = $3; //@line 2279 "stream_encoder.c"
   STACKTOP = sp;return ($316|0); //@line 2279 "stream_encoder.c"
  } else {
   while(1) {
    $208 = $4; //@line 2255 "stream_encoder.c"
    $209 = HEAP32[$208>>2]|0; //@line 2255 "stream_encoder.c"
    $210 = ((($209)) + 4|0); //@line 2255 "stream_encoder.c"
    $211 = HEAP32[$210>>2]|0; //@line 2255 "stream_encoder.c"
    $212 = ($211|0)!=(0); //@line 2255 "stream_encoder.c"
    if ($212) {
     $213 = $4; //@line 2256 "stream_encoder.c"
     $214 = ((($213)) + 4|0); //@line 2256 "stream_encoder.c"
     $215 = HEAP32[$214>>2]|0; //@line 2256 "stream_encoder.c"
     $216 = ((($215)) + 11776|0); //@line 2256 "stream_encoder.c"
     $217 = ((($216)) + 12|0); //@line 2256 "stream_encoder.c"
     $218 = $5; //@line 2256 "stream_encoder.c"
     $219 = $8; //@line 2256 "stream_encoder.c"
     $220 = $14; //@line 2256 "stream_encoder.c"
     $221 = $15; //@line 2256 "stream_encoder.c"
     $222 = (($221) + 1)|0; //@line 2256 "stream_encoder.c"
     $223 = $4; //@line 2256 "stream_encoder.c"
     $224 = ((($223)) + 4|0); //@line 2256 "stream_encoder.c"
     $225 = HEAP32[$224>>2]|0; //@line 2256 "stream_encoder.c"
     $226 = ((($225)) + 7052|0); //@line 2256 "stream_encoder.c"
     $227 = HEAP32[$226>>2]|0; //@line 2256 "stream_encoder.c"
     $228 = (($222) - ($227))|0; //@line 2256 "stream_encoder.c"
     $229 = $6; //@line 2256 "stream_encoder.c"
     $230 = $8; //@line 2256 "stream_encoder.c"
     $231 = (($229) - ($230))|0; //@line 2256 "stream_encoder.c"
     $232 = ($228>>>0)<($231>>>0); //@line 2256 "stream_encoder.c"
     if ($232) {
      $233 = $15; //@line 2256 "stream_encoder.c"
      $234 = (($233) + 1)|0; //@line 2256 "stream_encoder.c"
      $235 = $4; //@line 2256 "stream_encoder.c"
      $236 = ((($235)) + 4|0); //@line 2256 "stream_encoder.c"
      $237 = HEAP32[$236>>2]|0; //@line 2256 "stream_encoder.c"
      $238 = ((($237)) + 7052|0); //@line 2256 "stream_encoder.c"
      $239 = HEAP32[$238>>2]|0; //@line 2256 "stream_encoder.c"
      $240 = (($234) - ($239))|0; //@line 2256 "stream_encoder.c"
      $244 = $240;
     } else {
      $241 = $6; //@line 2256 "stream_encoder.c"
      $242 = $8; //@line 2256 "stream_encoder.c"
      $243 = (($241) - ($242))|0; //@line 2256 "stream_encoder.c"
      $244 = $243;
     }
     _append_to_verify_fifo_interleaved_($217,$218,$219,$220,$244); //@line 2256 "stream_encoder.c"
    }
    $245 = $4; //@line 2259 "stream_encoder.c"
    $246 = ((($245)) + 4|0); //@line 2259 "stream_encoder.c"
    $247 = HEAP32[$246>>2]|0; //@line 2259 "stream_encoder.c"
    $248 = ((($247)) + 7052|0); //@line 2259 "stream_encoder.c"
    $249 = HEAP32[$248>>2]|0; //@line 2259 "stream_encoder.c"
    $7 = $249; //@line 2259 "stream_encoder.c"
    while(1) {
     $250 = $7; //@line 2259 "stream_encoder.c"
     $251 = $15; //@line 2259 "stream_encoder.c"
     $252 = ($250>>>0)<=($251>>>0); //@line 2259 "stream_encoder.c"
     if (!($252)) {
      break;
     }
     $253 = $8; //@line 2259 "stream_encoder.c"
     $254 = $6; //@line 2259 "stream_encoder.c"
     $255 = ($253>>>0)<($254>>>0); //@line 2259 "stream_encoder.c"
     if (!($255)) {
      break;
     }
     $10 = 0; //@line 2260 "stream_encoder.c"
     while(1) {
      $256 = $10; //@line 2260 "stream_encoder.c"
      $257 = $14; //@line 2260 "stream_encoder.c"
      $258 = ($256>>>0)<($257>>>0); //@line 2260 "stream_encoder.c"
      if (!($258)) {
       break;
      }
      $259 = $5; //@line 2261 "stream_encoder.c"
      $260 = $9; //@line 2261 "stream_encoder.c"
      $261 = (($260) + 1)|0; //@line 2261 "stream_encoder.c"
      $9 = $261; //@line 2261 "stream_encoder.c"
      $262 = (($259) + ($260<<2)|0); //@line 2261 "stream_encoder.c"
      $263 = HEAP32[$262>>2]|0; //@line 2261 "stream_encoder.c"
      $264 = $4; //@line 2261 "stream_encoder.c"
      $265 = ((($264)) + 4|0); //@line 2261 "stream_encoder.c"
      $266 = HEAP32[$265>>2]|0; //@line 2261 "stream_encoder.c"
      $267 = ((($266)) + 4|0); //@line 2261 "stream_encoder.c"
      $268 = $10; //@line 2261 "stream_encoder.c"
      $269 = (($267) + ($268<<2)|0); //@line 2261 "stream_encoder.c"
      $270 = HEAP32[$269>>2]|0; //@line 2261 "stream_encoder.c"
      $271 = $7; //@line 2261 "stream_encoder.c"
      $272 = (($270) + ($271<<2)|0); //@line 2261 "stream_encoder.c"
      HEAP32[$272>>2] = $263; //@line 2261 "stream_encoder.c"
      $273 = $10; //@line 2260 "stream_encoder.c"
      $274 = (($273) + 1)|0; //@line 2260 "stream_encoder.c"
      $10 = $274; //@line 2260 "stream_encoder.c"
     }
     $275 = $7; //@line 2259 "stream_encoder.c"
     $276 = (($275) + 1)|0; //@line 2259 "stream_encoder.c"
     $7 = $276; //@line 2259 "stream_encoder.c"
     $277 = $8; //@line 2259 "stream_encoder.c"
     $278 = (($277) + 1)|0; //@line 2259 "stream_encoder.c"
     $8 = $278; //@line 2259 "stream_encoder.c"
    }
    $279 = $7; //@line 2263 "stream_encoder.c"
    $280 = $4; //@line 2263 "stream_encoder.c"
    $281 = ((($280)) + 4|0); //@line 2263 "stream_encoder.c"
    $282 = HEAP32[$281>>2]|0; //@line 2263 "stream_encoder.c"
    $283 = ((($282)) + 7052|0); //@line 2263 "stream_encoder.c"
    HEAP32[$283>>2] = $279; //@line 2263 "stream_encoder.c"
    $284 = $7; //@line 2265 "stream_encoder.c"
    $285 = $15; //@line 2265 "stream_encoder.c"
    $286 = ($284>>>0)>($285>>>0); //@line 2265 "stream_encoder.c"
    if ($286) {
     $287 = $4; //@line 2266 "stream_encoder.c"
     $288 = (_process_frame_($287,0,0)|0); //@line 2266 "stream_encoder.c"
     $289 = ($288|0)!=(0); //@line 2266 "stream_encoder.c"
     if (!($289)) {
      break;
     }
     $10 = 0; //@line 2271 "stream_encoder.c"
     while(1) {
      $290 = $10; //@line 2271 "stream_encoder.c"
      $291 = $14; //@line 2271 "stream_encoder.c"
      $292 = ($290>>>0)<($291>>>0); //@line 2271 "stream_encoder.c"
      $293 = $4;
      $294 = ((($293)) + 4|0);
      $295 = HEAP32[$294>>2]|0;
      if (!($292)) {
       break;
      }
      $296 = ((($295)) + 4|0); //@line 2272 "stream_encoder.c"
      $297 = $10; //@line 2272 "stream_encoder.c"
      $298 = (($296) + ($297<<2)|0); //@line 2272 "stream_encoder.c"
      $299 = HEAP32[$298>>2]|0; //@line 2272 "stream_encoder.c"
      $300 = $15; //@line 2272 "stream_encoder.c"
      $301 = (($299) + ($300<<2)|0); //@line 2272 "stream_encoder.c"
      $302 = HEAP32[$301>>2]|0; //@line 2272 "stream_encoder.c"
      $303 = $4; //@line 2272 "stream_encoder.c"
      $304 = ((($303)) + 4|0); //@line 2272 "stream_encoder.c"
      $305 = HEAP32[$304>>2]|0; //@line 2272 "stream_encoder.c"
      $306 = ((($305)) + 4|0); //@line 2272 "stream_encoder.c"
      $307 = $10; //@line 2272 "stream_encoder.c"
      $308 = (($306) + ($307<<2)|0); //@line 2272 "stream_encoder.c"
      $309 = HEAP32[$308>>2]|0; //@line 2272 "stream_encoder.c"
      HEAP32[$309>>2] = $302; //@line 2272 "stream_encoder.c"
      $310 = $10; //@line 2271 "stream_encoder.c"
      $311 = (($310) + 1)|0; //@line 2271 "stream_encoder.c"
      $10 = $311; //@line 2271 "stream_encoder.c"
     }
     $312 = ((($295)) + 7052|0); //@line 2273 "stream_encoder.c"
     HEAP32[$312>>2] = 1; //@line 2273 "stream_encoder.c"
    }
    $313 = $8; //@line 2275 "stream_encoder.c"
    $314 = $6; //@line 2275 "stream_encoder.c"
    $315 = ($313>>>0)<($314>>>0); //@line 2275 "stream_encoder.c"
    if (!($315)) {
     break L1;
    }
   }
   $3 = 0; //@line 2267 "stream_encoder.c"
   $316 = $3; //@line 2279 "stream_encoder.c"
   STACKTOP = sp;return ($316|0); //@line 2279 "stream_encoder.c"
  }
 } while(0);
 $3 = 1; //@line 2278 "stream_encoder.c"
 $316 = $3; //@line 2279 "stream_encoder.c"
 STACKTOP = sp;return ($316|0); //@line 2279 "stream_encoder.c"
}
function _append_to_verify_fifo_interleaved_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $5; //@line 4347 "stream_encoder.c"
 $15 = ((($14)) + 36|0); //@line 4347 "stream_encoder.c"
 $16 = HEAP32[$15>>2]|0; //@line 4347 "stream_encoder.c"
 $13 = $16; //@line 4347 "stream_encoder.c"
 $17 = $7; //@line 4349 "stream_encoder.c"
 $18 = $8; //@line 4349 "stream_encoder.c"
 $19 = Math_imul($17, $18)|0; //@line 4349 "stream_encoder.c"
 $11 = $19; //@line 4349 "stream_encoder.c"
 $12 = 0; //@line 4350 "stream_encoder.c"
 while(1) {
  $20 = $12; //@line 4350 "stream_encoder.c"
  $21 = $9; //@line 4350 "stream_encoder.c"
  $22 = ($20>>>0)<($21>>>0); //@line 4350 "stream_encoder.c"
  if (!($22)) {
   break;
  }
  $10 = 0; //@line 4351 "stream_encoder.c"
  while(1) {
   $23 = $10; //@line 4351 "stream_encoder.c"
   $24 = $8; //@line 4351 "stream_encoder.c"
   $25 = ($23>>>0)<($24>>>0); //@line 4351 "stream_encoder.c"
   if (!($25)) {
    break;
   }
   $26 = $6; //@line 4352 "stream_encoder.c"
   $27 = $11; //@line 4352 "stream_encoder.c"
   $28 = (($27) + 1)|0; //@line 4352 "stream_encoder.c"
   $11 = $28; //@line 4352 "stream_encoder.c"
   $29 = (($26) + ($27<<2)|0); //@line 4352 "stream_encoder.c"
   $30 = HEAP32[$29>>2]|0; //@line 4352 "stream_encoder.c"
   $31 = $5; //@line 4352 "stream_encoder.c"
   $32 = $10; //@line 4352 "stream_encoder.c"
   $33 = (($31) + ($32<<2)|0); //@line 4352 "stream_encoder.c"
   $34 = HEAP32[$33>>2]|0; //@line 4352 "stream_encoder.c"
   $35 = $13; //@line 4352 "stream_encoder.c"
   $36 = (($34) + ($35<<2)|0); //@line 4352 "stream_encoder.c"
   HEAP32[$36>>2] = $30; //@line 4352 "stream_encoder.c"
   $37 = $10; //@line 4351 "stream_encoder.c"
   $38 = (($37) + 1)|0; //@line 4351 "stream_encoder.c"
   $10 = $38; //@line 4351 "stream_encoder.c"
  }
  $39 = $13; //@line 4353 "stream_encoder.c"
  $40 = (($39) + 1)|0; //@line 4353 "stream_encoder.c"
  $13 = $40; //@line 4353 "stream_encoder.c"
  $41 = $12; //@line 4350 "stream_encoder.c"
  $42 = (($41) + 1)|0; //@line 4350 "stream_encoder.c"
  $12 = $42; //@line 4350 "stream_encoder.c"
 }
 $43 = $13; //@line 4355 "stream_encoder.c"
 $44 = $5; //@line 4355 "stream_encoder.c"
 $45 = ((($44)) + 36|0); //@line 4355 "stream_encoder.c"
 HEAP32[$45>>2] = $43; //@line 4355 "stream_encoder.c"
 STACKTOP = sp;return; //@line 4358 "stream_encoder.c"
}
function _FLAC__add_metadata_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = (_strlen(2320)|0); //@line 50 "stream_encoder_framing.c"
 $7 = $11; //@line 50 "stream_encoder_framing.c"
 $12 = $4; //@line 52 "stream_encoder_framing.c"
 $13 = $3; //@line 52 "stream_encoder_framing.c"
 $14 = ((($13)) + 4|0); //@line 52 "stream_encoder_framing.c"
 $15 = HEAP32[$14>>2]|0; //@line 52 "stream_encoder_framing.c"
 $16 = HEAP32[277]|0; //@line 52 "stream_encoder_framing.c"
 $17 = (_FLAC__bitwriter_write_raw_uint32($12,$15,$16)|0); //@line 52 "stream_encoder_framing.c"
 $18 = ($17|0)!=(0); //@line 52 "stream_encoder_framing.c"
 if (!($18)) {
  $2 = 0; //@line 53 "stream_encoder_framing.c"
  $508 = $2; //@line 218 "stream_encoder_framing.c"
  STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
 }
 $19 = $4; //@line 55 "stream_encoder_framing.c"
 $20 = $3; //@line 55 "stream_encoder_framing.c"
 $21 = HEAP32[$20>>2]|0; //@line 55 "stream_encoder_framing.c"
 $22 = HEAP32[266]|0; //@line 55 "stream_encoder_framing.c"
 $23 = (_FLAC__bitwriter_write_raw_uint32($19,$21,$22)|0); //@line 55 "stream_encoder_framing.c"
 $24 = ($23|0)!=(0); //@line 55 "stream_encoder_framing.c"
 if (!($24)) {
  $2 = 0; //@line 56 "stream_encoder_framing.c"
  $508 = $2; //@line 218 "stream_encoder_framing.c"
  STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
 }
 $25 = $3; //@line 61 "stream_encoder_framing.c"
 $26 = ((($25)) + 8|0); //@line 61 "stream_encoder_framing.c"
 $27 = HEAP32[$26>>2]|0; //@line 61 "stream_encoder_framing.c"
 $5 = $27; //@line 61 "stream_encoder_framing.c"
 $28 = $3; //@line 62 "stream_encoder_framing.c"
 $29 = HEAP32[$28>>2]|0; //@line 62 "stream_encoder_framing.c"
 $30 = ($29|0)==(4); //@line 62 "stream_encoder_framing.c"
 if ($30) {
  $31 = $3; //@line 64 "stream_encoder_framing.c"
  $32 = ((($31)) + 16|0); //@line 64 "stream_encoder_framing.c"
  $33 = HEAP32[$32>>2]|0; //@line 64 "stream_encoder_framing.c"
  $34 = $5; //@line 64 "stream_encoder_framing.c"
  $35 = (($34) - ($33))|0; //@line 64 "stream_encoder_framing.c"
  $5 = $35; //@line 64 "stream_encoder_framing.c"
  $36 = $7; //@line 65 "stream_encoder_framing.c"
  $37 = $5; //@line 65 "stream_encoder_framing.c"
  $38 = (($37) + ($36))|0; //@line 65 "stream_encoder_framing.c"
  $5 = $38; //@line 65 "stream_encoder_framing.c"
 }
 $39 = $5; //@line 69 "stream_encoder_framing.c"
 $40 = HEAP32[267]|0; //@line 69 "stream_encoder_framing.c"
 $41 = 1 << $40; //@line 69 "stream_encoder_framing.c"
 $42 = ($39>>>0)>=($41>>>0); //@line 69 "stream_encoder_framing.c"
 if ($42) {
  $2 = 0; //@line 70 "stream_encoder_framing.c"
  $508 = $2; //@line 218 "stream_encoder_framing.c"
  STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
 }
 $43 = $4; //@line 71 "stream_encoder_framing.c"
 $44 = $5; //@line 71 "stream_encoder_framing.c"
 $45 = HEAP32[267]|0; //@line 71 "stream_encoder_framing.c"
 $46 = (_FLAC__bitwriter_write_raw_uint32($43,$44,$45)|0); //@line 71 "stream_encoder_framing.c"
 $47 = ($46|0)!=(0); //@line 71 "stream_encoder_framing.c"
 if (!($47)) {
  $2 = 0; //@line 72 "stream_encoder_framing.c"
  $508 = $2; //@line 218 "stream_encoder_framing.c"
  STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
 }
 $48 = $3; //@line 74 "stream_encoder_framing.c"
 $49 = HEAP32[$48>>2]|0; //@line 74 "stream_encoder_framing.c"
 L20: do {
  switch ($49|0) {
  case 0:  {
   $50 = $4; //@line 77 "stream_encoder_framing.c"
   $51 = $3; //@line 77 "stream_encoder_framing.c"
   $52 = ((($51)) + 16|0); //@line 77 "stream_encoder_framing.c"
   $53 = HEAP32[$52>>2]|0; //@line 77 "stream_encoder_framing.c"
   $54 = HEAP32[279]|0; //@line 77 "stream_encoder_framing.c"
   $55 = (_FLAC__bitwriter_write_raw_uint32($50,$53,$54)|0); //@line 77 "stream_encoder_framing.c"
   $56 = ($55|0)!=(0); //@line 77 "stream_encoder_framing.c"
   if (!($56)) {
    $2 = 0; //@line 78 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $57 = $4; //@line 80 "stream_encoder_framing.c"
   $58 = $3; //@line 80 "stream_encoder_framing.c"
   $59 = ((($58)) + 16|0); //@line 80 "stream_encoder_framing.c"
   $60 = ((($59)) + 4|0); //@line 80 "stream_encoder_framing.c"
   $61 = HEAP32[$60>>2]|0; //@line 80 "stream_encoder_framing.c"
   $62 = HEAP32[279]|0; //@line 80 "stream_encoder_framing.c"
   $63 = (_FLAC__bitwriter_write_raw_uint32($57,$61,$62)|0); //@line 80 "stream_encoder_framing.c"
   $64 = ($63|0)!=(0); //@line 80 "stream_encoder_framing.c"
   if (!($64)) {
    $2 = 0; //@line 81 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $65 = $4; //@line 83 "stream_encoder_framing.c"
   $66 = $3; //@line 83 "stream_encoder_framing.c"
   $67 = ((($66)) + 16|0); //@line 83 "stream_encoder_framing.c"
   $68 = ((($67)) + 8|0); //@line 83 "stream_encoder_framing.c"
   $69 = HEAP32[$68>>2]|0; //@line 83 "stream_encoder_framing.c"
   $70 = HEAP32[267]|0; //@line 83 "stream_encoder_framing.c"
   $71 = (_FLAC__bitwriter_write_raw_uint32($65,$69,$70)|0); //@line 83 "stream_encoder_framing.c"
   $72 = ($71|0)!=(0); //@line 83 "stream_encoder_framing.c"
   if (!($72)) {
    $2 = 0; //@line 84 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $73 = $4; //@line 86 "stream_encoder_framing.c"
   $74 = $3; //@line 86 "stream_encoder_framing.c"
   $75 = ((($74)) + 16|0); //@line 86 "stream_encoder_framing.c"
   $76 = ((($75)) + 12|0); //@line 86 "stream_encoder_framing.c"
   $77 = HEAP32[$76>>2]|0; //@line 86 "stream_encoder_framing.c"
   $78 = HEAP32[267]|0; //@line 86 "stream_encoder_framing.c"
   $79 = (_FLAC__bitwriter_write_raw_uint32($73,$77,$78)|0); //@line 86 "stream_encoder_framing.c"
   $80 = ($79|0)!=(0); //@line 86 "stream_encoder_framing.c"
   if (!($80)) {
    $2 = 0; //@line 87 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $81 = $4; //@line 89 "stream_encoder_framing.c"
   $82 = $3; //@line 89 "stream_encoder_framing.c"
   $83 = ((($82)) + 16|0); //@line 89 "stream_encoder_framing.c"
   $84 = ((($83)) + 16|0); //@line 89 "stream_encoder_framing.c"
   $85 = HEAP32[$84>>2]|0; //@line 89 "stream_encoder_framing.c"
   $86 = HEAP32[259]|0; //@line 89 "stream_encoder_framing.c"
   $87 = (_FLAC__bitwriter_write_raw_uint32($81,$85,$86)|0); //@line 89 "stream_encoder_framing.c"
   $88 = ($87|0)!=(0); //@line 89 "stream_encoder_framing.c"
   if (!($88)) {
    $2 = 0; //@line 90 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $89 = $4; //@line 93 "stream_encoder_framing.c"
   $90 = $3; //@line 93 "stream_encoder_framing.c"
   $91 = ((($90)) + 16|0); //@line 93 "stream_encoder_framing.c"
   $92 = ((($91)) + 20|0); //@line 93 "stream_encoder_framing.c"
   $93 = HEAP32[$92>>2]|0; //@line 93 "stream_encoder_framing.c"
   $94 = (($93) - 1)|0; //@line 93 "stream_encoder_framing.c"
   $95 = HEAP32[270]|0; //@line 93 "stream_encoder_framing.c"
   $96 = (_FLAC__bitwriter_write_raw_uint32($89,$94,$95)|0); //@line 93 "stream_encoder_framing.c"
   $97 = ($96|0)!=(0); //@line 93 "stream_encoder_framing.c"
   if (!($97)) {
    $2 = 0; //@line 94 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $98 = $4; //@line 97 "stream_encoder_framing.c"
   $99 = $3; //@line 97 "stream_encoder_framing.c"
   $100 = ((($99)) + 16|0); //@line 97 "stream_encoder_framing.c"
   $101 = ((($100)) + 24|0); //@line 97 "stream_encoder_framing.c"
   $102 = HEAP32[$101>>2]|0; //@line 97 "stream_encoder_framing.c"
   $103 = (($102) - 1)|0; //@line 97 "stream_encoder_framing.c"
   $104 = HEAP32[275]|0; //@line 97 "stream_encoder_framing.c"
   $105 = (_FLAC__bitwriter_write_raw_uint32($98,$103,$104)|0); //@line 97 "stream_encoder_framing.c"
   $106 = ($105|0)!=(0); //@line 97 "stream_encoder_framing.c"
   if (!($106)) {
    $2 = 0; //@line 98 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $107 = $4; //@line 100 "stream_encoder_framing.c"
   $108 = $3; //@line 100 "stream_encoder_framing.c"
   $109 = ((($108)) + 16|0); //@line 100 "stream_encoder_framing.c"
   $110 = ((($109)) + 32|0); //@line 100 "stream_encoder_framing.c"
   $111 = $110; //@line 100 "stream_encoder_framing.c"
   $112 = $111; //@line 100 "stream_encoder_framing.c"
   $113 = HEAP32[$112>>2]|0; //@line 100 "stream_encoder_framing.c"
   $114 = (($111) + 4)|0; //@line 100 "stream_encoder_framing.c"
   $115 = $114; //@line 100 "stream_encoder_framing.c"
   $116 = HEAP32[$115>>2]|0; //@line 100 "stream_encoder_framing.c"
   $117 = HEAP32[260]|0; //@line 100 "stream_encoder_framing.c"
   $118 = (_FLAC__bitwriter_write_raw_uint64($107,$113,$116,$117)|0); //@line 100 "stream_encoder_framing.c"
   $119 = ($118|0)!=(0); //@line 100 "stream_encoder_framing.c"
   if (!($119)) {
    $2 = 0; //@line 101 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $120 = $4; //@line 102 "stream_encoder_framing.c"
   $121 = $3; //@line 102 "stream_encoder_framing.c"
   $122 = ((($121)) + 16|0); //@line 102 "stream_encoder_framing.c"
   $123 = ((($122)) + 40|0); //@line 102 "stream_encoder_framing.c"
   $124 = (_FLAC__bitwriter_write_byte_block($120,$123,16)|0); //@line 102 "stream_encoder_framing.c"
   $125 = ($124|0)!=(0); //@line 102 "stream_encoder_framing.c"
   if (!($125)) {
    $2 = 0; //@line 103 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  case 1:  {
   $126 = $4; //@line 106 "stream_encoder_framing.c"
   $127 = $3; //@line 106 "stream_encoder_framing.c"
   $128 = ((($127)) + 8|0); //@line 106 "stream_encoder_framing.c"
   $129 = HEAP32[$128>>2]|0; //@line 106 "stream_encoder_framing.c"
   $130 = $129<<3; //@line 106 "stream_encoder_framing.c"
   $131 = (_FLAC__bitwriter_write_zeroes($126,$130)|0); //@line 106 "stream_encoder_framing.c"
   $132 = ($131|0)!=(0); //@line 106 "stream_encoder_framing.c"
   if (!($132)) {
    $2 = 0; //@line 107 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  case 2:  {
   $133 = $4; //@line 110 "stream_encoder_framing.c"
   $134 = $3; //@line 110 "stream_encoder_framing.c"
   $135 = ((($134)) + 16|0); //@line 110 "stream_encoder_framing.c"
   $136 = HEAP32[265]|0; //@line 110 "stream_encoder_framing.c"
   $137 = (($136>>>0) / 8)&-1; //@line 110 "stream_encoder_framing.c"
   $138 = (_FLAC__bitwriter_write_byte_block($133,$135,$137)|0); //@line 110 "stream_encoder_framing.c"
   $139 = ($138|0)!=(0); //@line 110 "stream_encoder_framing.c"
   if (!($139)) {
    $2 = 0; //@line 111 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $140 = $4; //@line 112 "stream_encoder_framing.c"
   $141 = $3; //@line 112 "stream_encoder_framing.c"
   $142 = ((($141)) + 16|0); //@line 112 "stream_encoder_framing.c"
   $143 = ((($142)) + 4|0); //@line 112 "stream_encoder_framing.c"
   $144 = HEAP32[$143>>2]|0; //@line 112 "stream_encoder_framing.c"
   $145 = $3; //@line 112 "stream_encoder_framing.c"
   $146 = ((($145)) + 8|0); //@line 112 "stream_encoder_framing.c"
   $147 = HEAP32[$146>>2]|0; //@line 112 "stream_encoder_framing.c"
   $148 = HEAP32[265]|0; //@line 112 "stream_encoder_framing.c"
   $149 = (($148>>>0) / 8)&-1; //@line 112 "stream_encoder_framing.c"
   $150 = (($147) - ($149))|0; //@line 112 "stream_encoder_framing.c"
   $151 = (_FLAC__bitwriter_write_byte_block($140,$144,$150)|0); //@line 112 "stream_encoder_framing.c"
   $152 = ($151|0)!=(0); //@line 112 "stream_encoder_framing.c"
   if (!($152)) {
    $2 = 0; //@line 113 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  case 3:  {
   $5 = 0; //@line 116 "stream_encoder_framing.c"
   while(1) {
    $153 = $5; //@line 116 "stream_encoder_framing.c"
    $154 = $3; //@line 116 "stream_encoder_framing.c"
    $155 = ((($154)) + 16|0); //@line 116 "stream_encoder_framing.c"
    $156 = HEAP32[$155>>2]|0; //@line 116 "stream_encoder_framing.c"
    $157 = ($153>>>0)<($156>>>0); //@line 116 "stream_encoder_framing.c"
    if (!($157)) {
     break L20;
    }
    $158 = $4; //@line 117 "stream_encoder_framing.c"
    $159 = $3; //@line 117 "stream_encoder_framing.c"
    $160 = ((($159)) + 16|0); //@line 117 "stream_encoder_framing.c"
    $161 = ((($160)) + 4|0); //@line 117 "stream_encoder_framing.c"
    $162 = HEAP32[$161>>2]|0; //@line 117 "stream_encoder_framing.c"
    $163 = $5; //@line 117 "stream_encoder_framing.c"
    $164 = (($162) + (($163*24)|0)|0); //@line 117 "stream_encoder_framing.c"
    $165 = $164; //@line 117 "stream_encoder_framing.c"
    $166 = $165; //@line 117 "stream_encoder_framing.c"
    $167 = HEAP32[$166>>2]|0; //@line 117 "stream_encoder_framing.c"
    $168 = (($165) + 4)|0; //@line 117 "stream_encoder_framing.c"
    $169 = $168; //@line 117 "stream_encoder_framing.c"
    $170 = HEAP32[$169>>2]|0; //@line 117 "stream_encoder_framing.c"
    $171 = HEAP32[280]|0; //@line 117 "stream_encoder_framing.c"
    $172 = (_FLAC__bitwriter_write_raw_uint64($158,$167,$170,$171)|0); //@line 117 "stream_encoder_framing.c"
    $173 = ($172|0)!=(0); //@line 117 "stream_encoder_framing.c"
    if (!($173)) {
     label = 39;
     break;
    }
    $174 = $4; //@line 119 "stream_encoder_framing.c"
    $175 = $3; //@line 119 "stream_encoder_framing.c"
    $176 = ((($175)) + 16|0); //@line 119 "stream_encoder_framing.c"
    $177 = ((($176)) + 4|0); //@line 119 "stream_encoder_framing.c"
    $178 = HEAP32[$177>>2]|0; //@line 119 "stream_encoder_framing.c"
    $179 = $5; //@line 119 "stream_encoder_framing.c"
    $180 = (($178) + (($179*24)|0)|0); //@line 119 "stream_encoder_framing.c"
    $181 = ((($180)) + 8|0); //@line 119 "stream_encoder_framing.c"
    $182 = $181; //@line 119 "stream_encoder_framing.c"
    $183 = $182; //@line 119 "stream_encoder_framing.c"
    $184 = HEAP32[$183>>2]|0; //@line 119 "stream_encoder_framing.c"
    $185 = (($182) + 4)|0; //@line 119 "stream_encoder_framing.c"
    $186 = $185; //@line 119 "stream_encoder_framing.c"
    $187 = HEAP32[$186>>2]|0; //@line 119 "stream_encoder_framing.c"
    $188 = HEAP32[280]|0; //@line 119 "stream_encoder_framing.c"
    $189 = (_FLAC__bitwriter_write_raw_uint64($174,$184,$187,$188)|0); //@line 119 "stream_encoder_framing.c"
    $190 = ($189|0)!=(0); //@line 119 "stream_encoder_framing.c"
    if (!($190)) {
     label = 41;
     break;
    }
    $191 = $4; //@line 121 "stream_encoder_framing.c"
    $192 = $3; //@line 121 "stream_encoder_framing.c"
    $193 = ((($192)) + 16|0); //@line 121 "stream_encoder_framing.c"
    $194 = ((($193)) + 4|0); //@line 121 "stream_encoder_framing.c"
    $195 = HEAP32[$194>>2]|0; //@line 121 "stream_encoder_framing.c"
    $196 = $5; //@line 121 "stream_encoder_framing.c"
    $197 = (($195) + (($196*24)|0)|0); //@line 121 "stream_encoder_framing.c"
    $198 = ((($197)) + 16|0); //@line 121 "stream_encoder_framing.c"
    $199 = HEAP32[$198>>2]|0; //@line 121 "stream_encoder_framing.c"
    $200 = HEAP32[279]|0; //@line 121 "stream_encoder_framing.c"
    $201 = (_FLAC__bitwriter_write_raw_uint32($191,$199,$200)|0); //@line 121 "stream_encoder_framing.c"
    $202 = ($201|0)!=(0); //@line 121 "stream_encoder_framing.c"
    if (!($202)) {
     label = 43;
     break;
    }
    $203 = $5; //@line 116 "stream_encoder_framing.c"
    $204 = (($203) + 1)|0; //@line 116 "stream_encoder_framing.c"
    $5 = $204; //@line 116 "stream_encoder_framing.c"
   }
   if ((label|0) == 39) {
    $2 = 0; //@line 118 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   else if ((label|0) == 41) {
    $2 = 0; //@line 120 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   else if ((label|0) == 43) {
    $2 = 0; //@line 122 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  case 4:  {
   $205 = $4; //@line 126 "stream_encoder_framing.c"
   $206 = $7; //@line 126 "stream_encoder_framing.c"
   $207 = (_FLAC__bitwriter_write_raw_uint32_little_endian($205,$206)|0); //@line 126 "stream_encoder_framing.c"
   $208 = ($207|0)!=(0); //@line 126 "stream_encoder_framing.c"
   if (!($208)) {
    $2 = 0; //@line 127 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $209 = $4; //@line 128 "stream_encoder_framing.c"
   $210 = $7; //@line 128 "stream_encoder_framing.c"
   $211 = (_FLAC__bitwriter_write_byte_block($209,2320,$210)|0); //@line 128 "stream_encoder_framing.c"
   $212 = ($211|0)!=(0); //@line 128 "stream_encoder_framing.c"
   if (!($212)) {
    $2 = 0; //@line 129 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $213 = $4; //@line 130 "stream_encoder_framing.c"
   $214 = $3; //@line 130 "stream_encoder_framing.c"
   $215 = ((($214)) + 16|0); //@line 130 "stream_encoder_framing.c"
   $216 = ((($215)) + 8|0); //@line 130 "stream_encoder_framing.c"
   $217 = HEAP32[$216>>2]|0; //@line 130 "stream_encoder_framing.c"
   $218 = (_FLAC__bitwriter_write_raw_uint32_little_endian($213,$217)|0); //@line 130 "stream_encoder_framing.c"
   $219 = ($218|0)!=(0); //@line 130 "stream_encoder_framing.c"
   if (!($219)) {
    $2 = 0; //@line 131 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $5 = 0; //@line 132 "stream_encoder_framing.c"
   while(1) {
    $220 = $5; //@line 132 "stream_encoder_framing.c"
    $221 = $3; //@line 132 "stream_encoder_framing.c"
    $222 = ((($221)) + 16|0); //@line 132 "stream_encoder_framing.c"
    $223 = ((($222)) + 8|0); //@line 132 "stream_encoder_framing.c"
    $224 = HEAP32[$223>>2]|0; //@line 132 "stream_encoder_framing.c"
    $225 = ($220>>>0)<($224>>>0); //@line 132 "stream_encoder_framing.c"
    if (!($225)) {
     break L20;
    }
    $226 = $4; //@line 133 "stream_encoder_framing.c"
    $227 = $3; //@line 133 "stream_encoder_framing.c"
    $228 = ((($227)) + 16|0); //@line 133 "stream_encoder_framing.c"
    $229 = ((($228)) + 12|0); //@line 133 "stream_encoder_framing.c"
    $230 = HEAP32[$229>>2]|0; //@line 133 "stream_encoder_framing.c"
    $231 = $5; //@line 133 "stream_encoder_framing.c"
    $232 = (($230) + ($231<<3)|0); //@line 133 "stream_encoder_framing.c"
    $233 = HEAP32[$232>>2]|0; //@line 133 "stream_encoder_framing.c"
    $234 = (_FLAC__bitwriter_write_raw_uint32_little_endian($226,$233)|0); //@line 133 "stream_encoder_framing.c"
    $235 = ($234|0)!=(0); //@line 133 "stream_encoder_framing.c"
    if (!($235)) {
     label = 54;
     break;
    }
    $236 = $4; //@line 135 "stream_encoder_framing.c"
    $237 = $3; //@line 135 "stream_encoder_framing.c"
    $238 = ((($237)) + 16|0); //@line 135 "stream_encoder_framing.c"
    $239 = ((($238)) + 12|0); //@line 135 "stream_encoder_framing.c"
    $240 = HEAP32[$239>>2]|0; //@line 135 "stream_encoder_framing.c"
    $241 = $5; //@line 135 "stream_encoder_framing.c"
    $242 = (($240) + ($241<<3)|0); //@line 135 "stream_encoder_framing.c"
    $243 = ((($242)) + 4|0); //@line 135 "stream_encoder_framing.c"
    $244 = HEAP32[$243>>2]|0; //@line 135 "stream_encoder_framing.c"
    $245 = $3; //@line 135 "stream_encoder_framing.c"
    $246 = ((($245)) + 16|0); //@line 135 "stream_encoder_framing.c"
    $247 = ((($246)) + 12|0); //@line 135 "stream_encoder_framing.c"
    $248 = HEAP32[$247>>2]|0; //@line 135 "stream_encoder_framing.c"
    $249 = $5; //@line 135 "stream_encoder_framing.c"
    $250 = (($248) + ($249<<3)|0); //@line 135 "stream_encoder_framing.c"
    $251 = HEAP32[$250>>2]|0; //@line 135 "stream_encoder_framing.c"
    $252 = (_FLAC__bitwriter_write_byte_block($236,$244,$251)|0); //@line 135 "stream_encoder_framing.c"
    $253 = ($252|0)!=(0); //@line 135 "stream_encoder_framing.c"
    if (!($253)) {
     label = 56;
     break;
    }
    $254 = $5; //@line 132 "stream_encoder_framing.c"
    $255 = (($254) + 1)|0; //@line 132 "stream_encoder_framing.c"
    $5 = $255; //@line 132 "stream_encoder_framing.c"
   }
   if ((label|0) == 54) {
    $2 = 0; //@line 134 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   else if ((label|0) == 56) {
    $2 = 0; //@line 136 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  case 5:  {
   $256 = $4; //@line 141 "stream_encoder_framing.c"
   $257 = $3; //@line 141 "stream_encoder_framing.c"
   $258 = ((($257)) + 16|0); //@line 141 "stream_encoder_framing.c"
   $259 = HEAP32[263]|0; //@line 141 "stream_encoder_framing.c"
   $260 = (($259>>>0) / 8)&-1; //@line 141 "stream_encoder_framing.c"
   $261 = (_FLAC__bitwriter_write_byte_block($256,$258,$260)|0); //@line 141 "stream_encoder_framing.c"
   $262 = ($261|0)!=(0); //@line 141 "stream_encoder_framing.c"
   if (!($262)) {
    $2 = 0; //@line 142 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $263 = $4; //@line 143 "stream_encoder_framing.c"
   $264 = $3; //@line 143 "stream_encoder_framing.c"
   $265 = ((($264)) + 16|0); //@line 143 "stream_encoder_framing.c"
   $266 = ((($265)) + 136|0); //@line 143 "stream_encoder_framing.c"
   $267 = $266; //@line 143 "stream_encoder_framing.c"
   $268 = $267; //@line 143 "stream_encoder_framing.c"
   $269 = HEAP32[$268>>2]|0; //@line 143 "stream_encoder_framing.c"
   $270 = (($267) + 4)|0; //@line 143 "stream_encoder_framing.c"
   $271 = $270; //@line 143 "stream_encoder_framing.c"
   $272 = HEAP32[$271>>2]|0; //@line 143 "stream_encoder_framing.c"
   $273 = HEAP32[280]|0; //@line 143 "stream_encoder_framing.c"
   $274 = (_FLAC__bitwriter_write_raw_uint64($263,$269,$272,$273)|0); //@line 143 "stream_encoder_framing.c"
   $275 = ($274|0)!=(0); //@line 143 "stream_encoder_framing.c"
   if (!($275)) {
    $2 = 0; //@line 144 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $276 = $4; //@line 145 "stream_encoder_framing.c"
   $277 = $3; //@line 145 "stream_encoder_framing.c"
   $278 = ((($277)) + 16|0); //@line 145 "stream_encoder_framing.c"
   $279 = ((($278)) + 144|0); //@line 145 "stream_encoder_framing.c"
   $280 = HEAP32[$279>>2]|0; //@line 145 "stream_encoder_framing.c"
   $281 = ($280|0)!=(0); //@line 145 "stream_encoder_framing.c"
   $282 = $281 ? 1 : 0; //@line 145 "stream_encoder_framing.c"
   $283 = HEAP32[277]|0; //@line 145 "stream_encoder_framing.c"
   $284 = (_FLAC__bitwriter_write_raw_uint32($276,$282,$283)|0); //@line 145 "stream_encoder_framing.c"
   $285 = ($284|0)!=(0); //@line 145 "stream_encoder_framing.c"
   if (!($285)) {
    $2 = 0; //@line 146 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $286 = $4; //@line 147 "stream_encoder_framing.c"
   $287 = HEAP32[264]|0; //@line 147 "stream_encoder_framing.c"
   $288 = (_FLAC__bitwriter_write_zeroes($286,$287)|0); //@line 147 "stream_encoder_framing.c"
   $289 = ($288|0)!=(0); //@line 147 "stream_encoder_framing.c"
   if (!($289)) {
    $2 = 0; //@line 148 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $290 = $4; //@line 149 "stream_encoder_framing.c"
   $291 = $3; //@line 149 "stream_encoder_framing.c"
   $292 = ((($291)) + 16|0); //@line 149 "stream_encoder_framing.c"
   $293 = ((($292)) + 148|0); //@line 149 "stream_encoder_framing.c"
   $294 = HEAP32[$293>>2]|0; //@line 149 "stream_encoder_framing.c"
   $295 = HEAP32[271]|0; //@line 149 "stream_encoder_framing.c"
   $296 = (_FLAC__bitwriter_write_raw_uint32($290,$294,$295)|0); //@line 149 "stream_encoder_framing.c"
   $297 = ($296|0)!=(0); //@line 149 "stream_encoder_framing.c"
   if (!($297)) {
    $2 = 0; //@line 150 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $5 = 0; //@line 151 "stream_encoder_framing.c"
   L127: while(1) {
    $298 = $5; //@line 151 "stream_encoder_framing.c"
    $299 = $3; //@line 151 "stream_encoder_framing.c"
    $300 = ((($299)) + 16|0); //@line 151 "stream_encoder_framing.c"
    $301 = ((($300)) + 148|0); //@line 151 "stream_encoder_framing.c"
    $302 = HEAP32[$301>>2]|0; //@line 151 "stream_encoder_framing.c"
    $303 = ($298>>>0)<($302>>>0); //@line 151 "stream_encoder_framing.c"
    if (!($303)) {
     break L20;
    }
    $304 = $3; //@line 152 "stream_encoder_framing.c"
    $305 = ((($304)) + 16|0); //@line 152 "stream_encoder_framing.c"
    $306 = ((($305)) + 152|0); //@line 152 "stream_encoder_framing.c"
    $307 = HEAP32[$306>>2]|0; //@line 152 "stream_encoder_framing.c"
    $308 = $5; //@line 152 "stream_encoder_framing.c"
    $309 = (($307) + ($308<<5)|0); //@line 152 "stream_encoder_framing.c"
    $8 = $309; //@line 152 "stream_encoder_framing.c"
    $310 = $4; //@line 154 "stream_encoder_framing.c"
    $311 = $8; //@line 154 "stream_encoder_framing.c"
    $312 = $311; //@line 154 "stream_encoder_framing.c"
    $313 = $312; //@line 154 "stream_encoder_framing.c"
    $314 = HEAP32[$313>>2]|0; //@line 154 "stream_encoder_framing.c"
    $315 = (($312) + 4)|0; //@line 154 "stream_encoder_framing.c"
    $316 = $315; //@line 154 "stream_encoder_framing.c"
    $317 = HEAP32[$316>>2]|0; //@line 154 "stream_encoder_framing.c"
    $318 = HEAP32[280]|0; //@line 154 "stream_encoder_framing.c"
    $319 = (_FLAC__bitwriter_write_raw_uint64($310,$314,$317,$318)|0); //@line 154 "stream_encoder_framing.c"
    $320 = ($319|0)!=(0); //@line 154 "stream_encoder_framing.c"
    if (!($320)) {
     label = 71;
     break;
    }
    $321 = $4; //@line 156 "stream_encoder_framing.c"
    $322 = $8; //@line 156 "stream_encoder_framing.c"
    $323 = ((($322)) + 8|0); //@line 156 "stream_encoder_framing.c"
    $324 = HEAP8[$323>>0]|0; //@line 156 "stream_encoder_framing.c"
    $325 = $324&255; //@line 156 "stream_encoder_framing.c"
    $326 = HEAP32[271]|0; //@line 156 "stream_encoder_framing.c"
    $327 = (_FLAC__bitwriter_write_raw_uint32($321,$325,$326)|0); //@line 156 "stream_encoder_framing.c"
    $328 = ($327|0)!=(0); //@line 156 "stream_encoder_framing.c"
    if (!($328)) {
     label = 73;
     break;
    }
    $329 = $4; //@line 159 "stream_encoder_framing.c"
    $330 = $8; //@line 159 "stream_encoder_framing.c"
    $331 = ((($330)) + 9|0); //@line 159 "stream_encoder_framing.c"
    $332 = HEAP32[261]|0; //@line 159 "stream_encoder_framing.c"
    $333 = (($332>>>0) / 8)&-1; //@line 159 "stream_encoder_framing.c"
    $334 = (_FLAC__bitwriter_write_byte_block($329,$331,$333)|0); //@line 159 "stream_encoder_framing.c"
    $335 = ($334|0)!=(0); //@line 159 "stream_encoder_framing.c"
    if (!($335)) {
     label = 75;
     break;
    }
    $336 = $4; //@line 161 "stream_encoder_framing.c"
    $337 = $8; //@line 161 "stream_encoder_framing.c"
    $338 = ((($337)) + 22|0); //@line 161 "stream_encoder_framing.c"
    $339 = HEAP8[$338>>0]|0; //@line 161 "stream_encoder_framing.c"
    $340 = $339 & 1; //@line 161 "stream_encoder_framing.c"
    $341 = $340&255; //@line 161 "stream_encoder_framing.c"
    $342 = HEAP32[277]|0; //@line 161 "stream_encoder_framing.c"
    $343 = (_FLAC__bitwriter_write_raw_uint32($336,$341,$342)|0); //@line 161 "stream_encoder_framing.c"
    $344 = ($343|0)!=(0); //@line 161 "stream_encoder_framing.c"
    if (!($344)) {
     label = 77;
     break;
    }
    $345 = $4; //@line 163 "stream_encoder_framing.c"
    $346 = $8; //@line 163 "stream_encoder_framing.c"
    $347 = ((($346)) + 22|0); //@line 163 "stream_encoder_framing.c"
    $348 = HEAP8[$347>>0]|0; //@line 163 "stream_encoder_framing.c"
    $349 = ($348&255) >>> 1; //@line 163 "stream_encoder_framing.c"
    $350 = $349 & 1; //@line 163 "stream_encoder_framing.c"
    $351 = $350&255; //@line 163 "stream_encoder_framing.c"
    $352 = HEAP32[277]|0; //@line 163 "stream_encoder_framing.c"
    $353 = (_FLAC__bitwriter_write_raw_uint32($345,$351,$352)|0); //@line 163 "stream_encoder_framing.c"
    $354 = ($353|0)!=(0); //@line 163 "stream_encoder_framing.c"
    if (!($354)) {
     label = 79;
     break;
    }
    $355 = $4; //@line 165 "stream_encoder_framing.c"
    $356 = HEAP32[262]|0; //@line 165 "stream_encoder_framing.c"
    $357 = (_FLAC__bitwriter_write_zeroes($355,$356)|0); //@line 165 "stream_encoder_framing.c"
    $358 = ($357|0)!=(0); //@line 165 "stream_encoder_framing.c"
    if (!($358)) {
     label = 81;
     break;
    }
    $359 = $4; //@line 167 "stream_encoder_framing.c"
    $360 = $8; //@line 167 "stream_encoder_framing.c"
    $361 = ((($360)) + 23|0); //@line 167 "stream_encoder_framing.c"
    $362 = HEAP8[$361>>0]|0; //@line 167 "stream_encoder_framing.c"
    $363 = $362&255; //@line 167 "stream_encoder_framing.c"
    $364 = HEAP32[271]|0; //@line 167 "stream_encoder_framing.c"
    $365 = (_FLAC__bitwriter_write_raw_uint32($359,$363,$364)|0); //@line 167 "stream_encoder_framing.c"
    $366 = ($365|0)!=(0); //@line 167 "stream_encoder_framing.c"
    if (!($366)) {
     label = 83;
     break;
    }
    $6 = 0; //@line 169 "stream_encoder_framing.c"
    while(1) {
     $367 = $6; //@line 169 "stream_encoder_framing.c"
     $368 = $8; //@line 169 "stream_encoder_framing.c"
     $369 = ((($368)) + 23|0); //@line 169 "stream_encoder_framing.c"
     $370 = HEAP8[$369>>0]|0; //@line 169 "stream_encoder_framing.c"
     $371 = $370&255; //@line 169 "stream_encoder_framing.c"
     $372 = ($367>>>0)<($371>>>0); //@line 169 "stream_encoder_framing.c"
     if (!($372)) {
      break;
     }
     $373 = $8; //@line 170 "stream_encoder_framing.c"
     $374 = ((($373)) + 24|0); //@line 170 "stream_encoder_framing.c"
     $375 = HEAP32[$374>>2]|0; //@line 170 "stream_encoder_framing.c"
     $376 = $6; //@line 170 "stream_encoder_framing.c"
     $377 = (($375) + ($376<<4)|0); //@line 170 "stream_encoder_framing.c"
     $9 = $377; //@line 170 "stream_encoder_framing.c"
     $378 = $4; //@line 172 "stream_encoder_framing.c"
     $379 = $9; //@line 172 "stream_encoder_framing.c"
     $380 = $379; //@line 172 "stream_encoder_framing.c"
     $381 = $380; //@line 172 "stream_encoder_framing.c"
     $382 = HEAP32[$381>>2]|0; //@line 172 "stream_encoder_framing.c"
     $383 = (($380) + 4)|0; //@line 172 "stream_encoder_framing.c"
     $384 = $383; //@line 172 "stream_encoder_framing.c"
     $385 = HEAP32[$384>>2]|0; //@line 172 "stream_encoder_framing.c"
     $386 = HEAP32[280]|0; //@line 172 "stream_encoder_framing.c"
     $387 = (_FLAC__bitwriter_write_raw_uint64($378,$382,$385,$386)|0); //@line 172 "stream_encoder_framing.c"
     $388 = ($387|0)!=(0); //@line 172 "stream_encoder_framing.c"
     if (!($388)) {
      label = 87;
      break L127;
     }
     $389 = $4; //@line 174 "stream_encoder_framing.c"
     $390 = $9; //@line 174 "stream_encoder_framing.c"
     $391 = ((($390)) + 8|0); //@line 174 "stream_encoder_framing.c"
     $392 = HEAP8[$391>>0]|0; //@line 174 "stream_encoder_framing.c"
     $393 = $392&255; //@line 174 "stream_encoder_framing.c"
     $394 = HEAP32[271]|0; //@line 174 "stream_encoder_framing.c"
     $395 = (_FLAC__bitwriter_write_raw_uint32($389,$393,$394)|0); //@line 174 "stream_encoder_framing.c"
     $396 = ($395|0)!=(0); //@line 174 "stream_encoder_framing.c"
     if (!($396)) {
      label = 89;
      break L127;
     }
     $397 = $4; //@line 176 "stream_encoder_framing.c"
     $398 = HEAP32[267]|0; //@line 176 "stream_encoder_framing.c"
     $399 = (_FLAC__bitwriter_write_zeroes($397,$398)|0); //@line 176 "stream_encoder_framing.c"
     $400 = ($399|0)!=(0); //@line 176 "stream_encoder_framing.c"
     if (!($400)) {
      label = 91;
      break L127;
     }
     $401 = $6; //@line 169 "stream_encoder_framing.c"
     $402 = (($401) + 1)|0; //@line 169 "stream_encoder_framing.c"
     $6 = $402; //@line 169 "stream_encoder_framing.c"
    }
    $403 = $5; //@line 151 "stream_encoder_framing.c"
    $404 = (($403) + 1)|0; //@line 151 "stream_encoder_framing.c"
    $5 = $404; //@line 151 "stream_encoder_framing.c"
   }
   switch (label|0) {
    case 71: {
     $2 = 0; //@line 155 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 73: {
     $2 = 0; //@line 157 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 75: {
     $2 = 0; //@line 160 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 77: {
     $2 = 0; //@line 162 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 79: {
     $2 = 0; //@line 164 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 81: {
     $2 = 0; //@line 166 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 83: {
     $2 = 0; //@line 168 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 87: {
     $2 = 0; //@line 173 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 89: {
     $2 = 0; //@line 175 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
    case 91: {
     $2 = 0; //@line 177 "stream_encoder_framing.c"
     $508 = $2; //@line 218 "stream_encoder_framing.c"
     STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
     break;
    }
   }
   break;
  }
  case 6:  {
   $405 = $4; //@line 184 "stream_encoder_framing.c"
   $406 = $3; //@line 184 "stream_encoder_framing.c"
   $407 = ((($406)) + 16|0); //@line 184 "stream_encoder_framing.c"
   $408 = HEAP32[$407>>2]|0; //@line 184 "stream_encoder_framing.c"
   $409 = HEAP32[265]|0; //@line 184 "stream_encoder_framing.c"
   $410 = (_FLAC__bitwriter_write_raw_uint32($405,$408,$409)|0); //@line 184 "stream_encoder_framing.c"
   $411 = ($410|0)!=(0); //@line 184 "stream_encoder_framing.c"
   if (!($411)) {
    $2 = 0; //@line 185 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $412 = $3; //@line 186 "stream_encoder_framing.c"
   $413 = ((($412)) + 16|0); //@line 186 "stream_encoder_framing.c"
   $414 = ((($413)) + 4|0); //@line 186 "stream_encoder_framing.c"
   $415 = HEAP32[$414>>2]|0; //@line 186 "stream_encoder_framing.c"
   $416 = (_strlen($415)|0); //@line 186 "stream_encoder_framing.c"
   $10 = $416; //@line 186 "stream_encoder_framing.c"
   $417 = $4; //@line 187 "stream_encoder_framing.c"
   $418 = $10; //@line 187 "stream_encoder_framing.c"
   $419 = HEAP32[265]|0; //@line 187 "stream_encoder_framing.c"
   $420 = (_FLAC__bitwriter_write_raw_uint32($417,$418,$419)|0); //@line 187 "stream_encoder_framing.c"
   $421 = ($420|0)!=(0); //@line 187 "stream_encoder_framing.c"
   if (!($421)) {
    $2 = 0; //@line 188 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $422 = $4; //@line 189 "stream_encoder_framing.c"
   $423 = $3; //@line 189 "stream_encoder_framing.c"
   $424 = ((($423)) + 16|0); //@line 189 "stream_encoder_framing.c"
   $425 = ((($424)) + 4|0); //@line 189 "stream_encoder_framing.c"
   $426 = HEAP32[$425>>2]|0; //@line 189 "stream_encoder_framing.c"
   $427 = $10; //@line 189 "stream_encoder_framing.c"
   $428 = (_FLAC__bitwriter_write_byte_block($422,$426,$427)|0); //@line 189 "stream_encoder_framing.c"
   $429 = ($428|0)!=(0); //@line 189 "stream_encoder_framing.c"
   if (!($429)) {
    $2 = 0; //@line 190 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $430 = $3; //@line 191 "stream_encoder_framing.c"
   $431 = ((($430)) + 16|0); //@line 191 "stream_encoder_framing.c"
   $432 = ((($431)) + 8|0); //@line 191 "stream_encoder_framing.c"
   $433 = HEAP32[$432>>2]|0; //@line 191 "stream_encoder_framing.c"
   $434 = (_strlen($433)|0); //@line 191 "stream_encoder_framing.c"
   $10 = $434; //@line 191 "stream_encoder_framing.c"
   $435 = $4; //@line 192 "stream_encoder_framing.c"
   $436 = $10; //@line 192 "stream_encoder_framing.c"
   $437 = HEAP32[265]|0; //@line 192 "stream_encoder_framing.c"
   $438 = (_FLAC__bitwriter_write_raw_uint32($435,$436,$437)|0); //@line 192 "stream_encoder_framing.c"
   $439 = ($438|0)!=(0); //@line 192 "stream_encoder_framing.c"
   if (!($439)) {
    $2 = 0; //@line 193 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $440 = $4; //@line 194 "stream_encoder_framing.c"
   $441 = $3; //@line 194 "stream_encoder_framing.c"
   $442 = ((($441)) + 16|0); //@line 194 "stream_encoder_framing.c"
   $443 = ((($442)) + 8|0); //@line 194 "stream_encoder_framing.c"
   $444 = HEAP32[$443>>2]|0; //@line 194 "stream_encoder_framing.c"
   $445 = $10; //@line 194 "stream_encoder_framing.c"
   $446 = (_FLAC__bitwriter_write_byte_block($440,$444,$445)|0); //@line 194 "stream_encoder_framing.c"
   $447 = ($446|0)!=(0); //@line 194 "stream_encoder_framing.c"
   if (!($447)) {
    $2 = 0; //@line 195 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $448 = $4; //@line 196 "stream_encoder_framing.c"
   $449 = $3; //@line 196 "stream_encoder_framing.c"
   $450 = ((($449)) + 16|0); //@line 196 "stream_encoder_framing.c"
   $451 = ((($450)) + 12|0); //@line 196 "stream_encoder_framing.c"
   $452 = HEAP32[$451>>2]|0; //@line 196 "stream_encoder_framing.c"
   $453 = HEAP32[265]|0; //@line 196 "stream_encoder_framing.c"
   $454 = (_FLAC__bitwriter_write_raw_uint32($448,$452,$453)|0); //@line 196 "stream_encoder_framing.c"
   $455 = ($454|0)!=(0); //@line 196 "stream_encoder_framing.c"
   if (!($455)) {
    $2 = 0; //@line 197 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $456 = $4; //@line 198 "stream_encoder_framing.c"
   $457 = $3; //@line 198 "stream_encoder_framing.c"
   $458 = ((($457)) + 16|0); //@line 198 "stream_encoder_framing.c"
   $459 = ((($458)) + 16|0); //@line 198 "stream_encoder_framing.c"
   $460 = HEAP32[$459>>2]|0; //@line 198 "stream_encoder_framing.c"
   $461 = HEAP32[265]|0; //@line 198 "stream_encoder_framing.c"
   $462 = (_FLAC__bitwriter_write_raw_uint32($456,$460,$461)|0); //@line 198 "stream_encoder_framing.c"
   $463 = ($462|0)!=(0); //@line 198 "stream_encoder_framing.c"
   if (!($463)) {
    $2 = 0; //@line 199 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $464 = $4; //@line 200 "stream_encoder_framing.c"
   $465 = $3; //@line 200 "stream_encoder_framing.c"
   $466 = ((($465)) + 16|0); //@line 200 "stream_encoder_framing.c"
   $467 = ((($466)) + 20|0); //@line 200 "stream_encoder_framing.c"
   $468 = HEAP32[$467>>2]|0; //@line 200 "stream_encoder_framing.c"
   $469 = HEAP32[265]|0; //@line 200 "stream_encoder_framing.c"
   $470 = (_FLAC__bitwriter_write_raw_uint32($464,$468,$469)|0); //@line 200 "stream_encoder_framing.c"
   $471 = ($470|0)!=(0); //@line 200 "stream_encoder_framing.c"
   if (!($471)) {
    $2 = 0; //@line 201 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $472 = $4; //@line 202 "stream_encoder_framing.c"
   $473 = $3; //@line 202 "stream_encoder_framing.c"
   $474 = ((($473)) + 16|0); //@line 202 "stream_encoder_framing.c"
   $475 = ((($474)) + 24|0); //@line 202 "stream_encoder_framing.c"
   $476 = HEAP32[$475>>2]|0; //@line 202 "stream_encoder_framing.c"
   $477 = HEAP32[265]|0; //@line 202 "stream_encoder_framing.c"
   $478 = (_FLAC__bitwriter_write_raw_uint32($472,$476,$477)|0); //@line 202 "stream_encoder_framing.c"
   $479 = ($478|0)!=(0); //@line 202 "stream_encoder_framing.c"
   if (!($479)) {
    $2 = 0; //@line 203 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $480 = $4; //@line 204 "stream_encoder_framing.c"
   $481 = $3; //@line 204 "stream_encoder_framing.c"
   $482 = ((($481)) + 16|0); //@line 204 "stream_encoder_framing.c"
   $483 = ((($482)) + 28|0); //@line 204 "stream_encoder_framing.c"
   $484 = HEAP32[$483>>2]|0; //@line 204 "stream_encoder_framing.c"
   $485 = HEAP32[265]|0; //@line 204 "stream_encoder_framing.c"
   $486 = (_FLAC__bitwriter_write_raw_uint32($480,$484,$485)|0); //@line 204 "stream_encoder_framing.c"
   $487 = ($486|0)!=(0); //@line 204 "stream_encoder_framing.c"
   if (!($487)) {
    $2 = 0; //@line 205 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   $488 = $4; //@line 206 "stream_encoder_framing.c"
   $489 = $3; //@line 206 "stream_encoder_framing.c"
   $490 = ((($489)) + 16|0); //@line 206 "stream_encoder_framing.c"
   $491 = ((($490)) + 32|0); //@line 206 "stream_encoder_framing.c"
   $492 = HEAP32[$491>>2]|0; //@line 206 "stream_encoder_framing.c"
   $493 = $3; //@line 206 "stream_encoder_framing.c"
   $494 = ((($493)) + 16|0); //@line 206 "stream_encoder_framing.c"
   $495 = ((($494)) + 28|0); //@line 206 "stream_encoder_framing.c"
   $496 = HEAP32[$495>>2]|0; //@line 206 "stream_encoder_framing.c"
   $497 = (_FLAC__bitwriter_write_byte_block($488,$492,$496)|0); //@line 206 "stream_encoder_framing.c"
   $498 = ($497|0)!=(0); //@line 206 "stream_encoder_framing.c"
   if (!($498)) {
    $2 = 0; //@line 207 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
   break;
  }
  default: {
   $499 = $4; //@line 211 "stream_encoder_framing.c"
   $500 = $3; //@line 211 "stream_encoder_framing.c"
   $501 = ((($500)) + 16|0); //@line 211 "stream_encoder_framing.c"
   $502 = HEAP32[$501>>2]|0; //@line 211 "stream_encoder_framing.c"
   $503 = $3; //@line 211 "stream_encoder_framing.c"
   $504 = ((($503)) + 8|0); //@line 211 "stream_encoder_framing.c"
   $505 = HEAP32[$504>>2]|0; //@line 211 "stream_encoder_framing.c"
   $506 = (_FLAC__bitwriter_write_byte_block($499,$502,$505)|0); //@line 211 "stream_encoder_framing.c"
   $507 = ($506|0)!=(0); //@line 211 "stream_encoder_framing.c"
   if (!($507)) {
    $2 = 0; //@line 212 "stream_encoder_framing.c"
    $508 = $2; //@line 218 "stream_encoder_framing.c"
    STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
   }
  }
  }
 } while(0);
 $2 = 1; //@line 217 "stream_encoder_framing.c"
 $508 = $2; //@line 218 "stream_encoder_framing.c"
 STACKTOP = sp;return ($508|0); //@line 218 "stream_encoder_framing.c"
}
function _FLAC__frame_add_header($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split102D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0;
 var $switch$split402D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $4; //@line 227 "stream_encoder_framing.c"
 $10 = HEAP32[268]|0; //@line 227 "stream_encoder_framing.c"
 $11 = HEAP32[269]|0; //@line 227 "stream_encoder_framing.c"
 $12 = (_FLAC__bitwriter_write_raw_uint32($9,$10,$11)|0); //@line 227 "stream_encoder_framing.c"
 $13 = ($12|0)!=(0); //@line 227 "stream_encoder_framing.c"
 if (!($13)) {
  $2 = 0; //@line 228 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $14 = $4; //@line 230 "stream_encoder_framing.c"
 $15 = HEAP32[277]|0; //@line 230 "stream_encoder_framing.c"
 $16 = (_FLAC__bitwriter_write_raw_uint32($14,0,$15)|0); //@line 230 "stream_encoder_framing.c"
 $17 = ($16|0)!=(0); //@line 230 "stream_encoder_framing.c"
 if (!($17)) {
  $2 = 0; //@line 231 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $18 = $4; //@line 233 "stream_encoder_framing.c"
 $19 = $3; //@line 233 "stream_encoder_framing.c"
 $20 = ((($19)) + 20|0); //@line 233 "stream_encoder_framing.c"
 $21 = HEAP32[$20>>2]|0; //@line 233 "stream_encoder_framing.c"
 $22 = ($21|0)==(0); //@line 233 "stream_encoder_framing.c"
 $23 = $22 ? 0 : 1; //@line 233 "stream_encoder_framing.c"
 $24 = HEAP32[277]|0; //@line 233 "stream_encoder_framing.c"
 $25 = (_FLAC__bitwriter_write_raw_uint32($18,$23,$24)|0); //@line 233 "stream_encoder_framing.c"
 $26 = ($25|0)!=(0); //@line 233 "stream_encoder_framing.c"
 if (!($26)) {
  $2 = 0; //@line 234 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $6 = 0; //@line 239 "stream_encoder_framing.c"
 $27 = $3; //@line 240 "stream_encoder_framing.c"
 $28 = HEAP32[$27>>2]|0; //@line 240 "stream_encoder_framing.c"
 $switch$split2D = ($28|0)<(2048);
 L13: do {
  if ($switch$split2D) {
   switch ($28|0) {
   case 192:  {
    $5 = 1; //@line 241 "stream_encoder_framing.c"
    break L13;
    break;
   }
   case 576:  {
    $5 = 2; //@line 242 "stream_encoder_framing.c"
    break L13;
    break;
   }
   case 1152:  {
    $5 = 3; //@line 243 "stream_encoder_framing.c"
    break L13;
    break;
   }
   case 256:  {
    $5 = 8; //@line 246 "stream_encoder_framing.c"
    break L13;
    break;
   }
   case 512:  {
    $5 = 9; //@line 247 "stream_encoder_framing.c"
    break L13;
    break;
   }
   case 1024:  {
    $5 = 10; //@line 248 "stream_encoder_framing.c"
    break L13;
    break;
   }
   default: {
    label = 21;
    break L13;
   }
   }
  } else {
   $switch$split102D = ($28|0)<(4608);
   if ($switch$split102D) {
    switch ($28|0) {
    case 2304:  {
     $5 = 4; //@line 244 "stream_encoder_framing.c"
     break L13;
     break;
    }
    case 2048:  {
     $5 = 11; //@line 249 "stream_encoder_framing.c"
     break L13;
     break;
    }
    case 4096:  {
     $5 = 12; //@line 250 "stream_encoder_framing.c"
     break L13;
     break;
    }
    default: {
     label = 21;
     break L13;
    }
    }
   }
   $switch$split192D = ($28|0)<(16384);
   if ($switch$split192D) {
    $switch$split342D = ($28|0)<(8192);
    if ($switch$split342D) {
     switch ($28|0) {
     case 4608:  {
      break;
     }
     default: {
      label = 21;
      break L13;
     }
     }
     $5 = 5; //@line 245 "stream_encoder_framing.c"
     break;
    } else {
     switch ($28|0) {
     case 8192:  {
      break;
     }
     default: {
      label = 21;
      break L13;
     }
     }
     $5 = 13; //@line 251 "stream_encoder_framing.c"
     break;
    }
   } else {
    $switch$split372D = ($28|0)<(32768);
    if ($switch$split372D) {
     switch ($28|0) {
     case 16384:  {
      break;
     }
     default: {
      label = 21;
      break L13;
     }
     }
     $5 = 14; //@line 252 "stream_encoder_framing.c"
     break;
    } else {
     switch ($28|0) {
     case 32768:  {
      break;
     }
     default: {
      label = 21;
      break L13;
     }
     }
     $5 = 15; //@line 253 "stream_encoder_framing.c"
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 21) {
   $29 = $3; //@line 255 "stream_encoder_framing.c"
   $30 = HEAP32[$29>>2]|0; //@line 255 "stream_encoder_framing.c"
   $31 = ($30>>>0)<=(256); //@line 255 "stream_encoder_framing.c"
   if ($31) {
    $5 = 6; //@line 256 "stream_encoder_framing.c"
    $6 = 6; //@line 256 "stream_encoder_framing.c"
    break;
   } else {
    $5 = 7; //@line 258 "stream_encoder_framing.c"
    $6 = 7; //@line 258 "stream_encoder_framing.c"
    break;
   }
  }
 } while(0);
 $32 = $4; //@line 261 "stream_encoder_framing.c"
 $33 = $5; //@line 261 "stream_encoder_framing.c"
 $34 = HEAP32[274]|0; //@line 261 "stream_encoder_framing.c"
 $35 = (_FLAC__bitwriter_write_raw_uint32($32,$33,$34)|0); //@line 261 "stream_encoder_framing.c"
 $36 = ($35|0)!=(0); //@line 261 "stream_encoder_framing.c"
 if (!($36)) {
  $2 = 0; //@line 262 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $7 = 0; //@line 265 "stream_encoder_framing.c"
 $37 = $3; //@line 266 "stream_encoder_framing.c"
 $38 = ((($37)) + 4|0); //@line 266 "stream_encoder_framing.c"
 $39 = HEAP32[$38>>2]|0; //@line 266 "stream_encoder_framing.c"
 $switch$split72D = ($39|0)<(44100);
 L53: do {
  if ($switch$split72D) {
   $switch$split132D = ($39|0)<(22050);
   if ($switch$split132D) {
    $switch$split222D = ($39|0)<(16000);
    if ($switch$split222D) {
     switch ($39|0) {
     case 8000:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 4; //@line 270 "stream_encoder_framing.c"
     break;
    } else {
     switch ($39|0) {
     case 16000:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 5; //@line 271 "stream_encoder_framing.c"
     break;
    }
   }
   $switch$split252D = ($39|0)<(24000);
   if ($switch$split252D) {
    switch ($39|0) {
    case 22050:  {
     break;
    }
    default: {
     label = 38;
     break L53;
    }
    }
    $5 = 6; //@line 272 "stream_encoder_framing.c"
    break;
   }
   $switch$split402D = ($39|0)<(32000);
   if ($switch$split402D) {
    switch ($39|0) {
    case 24000:  {
     break;
    }
    default: {
     label = 38;
     break L53;
    }
    }
    $5 = 7; //@line 273 "stream_encoder_framing.c"
    break;
   } else {
    switch ($39|0) {
    case 32000:  {
     break;
    }
    default: {
     label = 38;
     break L53;
    }
    }
    $5 = 8; //@line 274 "stream_encoder_framing.c"
    break;
   }
  } else {
   $switch$split162D = ($39|0)<(96000);
   if ($switch$split162D) {
    $switch$split282D = ($39|0)<(48000);
    if ($switch$split282D) {
     switch ($39|0) {
     case 44100:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 9; //@line 275 "stream_encoder_framing.c"
     break;
    }
    $switch$split432D = ($39|0)<(88200);
    if ($switch$split432D) {
     switch ($39|0) {
     case 48000:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 10; //@line 276 "stream_encoder_framing.c"
     break;
    } else {
     switch ($39|0) {
     case 88200:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 1; //@line 267 "stream_encoder_framing.c"
     break;
    }
   } else {
    $switch$split312D = ($39|0)<(176400);
    if ($switch$split312D) {
     switch ($39|0) {
     case 96000:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 11; //@line 277 "stream_encoder_framing.c"
     break;
    }
    $switch$split462D = ($39|0)<(192000);
    if ($switch$split462D) {
     switch ($39|0) {
     case 176400:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 2; //@line 268 "stream_encoder_framing.c"
     break;
    } else {
     switch ($39|0) {
     case 192000:  {
      break;
     }
     default: {
      label = 38;
      break L53;
     }
     }
     $5 = 3; //@line 269 "stream_encoder_framing.c"
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 38) {
   $40 = $3; //@line 279 "stream_encoder_framing.c"
   $41 = ((($40)) + 4|0); //@line 279 "stream_encoder_framing.c"
   $42 = HEAP32[$41>>2]|0; //@line 279 "stream_encoder_framing.c"
   $43 = ($42>>>0)<=(255000); //@line 279 "stream_encoder_framing.c"
   if ($43) {
    $44 = $3; //@line 279 "stream_encoder_framing.c"
    $45 = ((($44)) + 4|0); //@line 279 "stream_encoder_framing.c"
    $46 = HEAP32[$45>>2]|0; //@line 279 "stream_encoder_framing.c"
    $47 = (($46>>>0) % 1000)&-1; //@line 279 "stream_encoder_framing.c"
    $48 = ($47|0)==(0); //@line 279 "stream_encoder_framing.c"
    if ($48) {
     $5 = 12; //@line 280 "stream_encoder_framing.c"
     $7 = 12; //@line 280 "stream_encoder_framing.c"
     break;
    }
   }
   $49 = $3; //@line 281 "stream_encoder_framing.c"
   $50 = ((($49)) + 4|0); //@line 281 "stream_encoder_framing.c"
   $51 = HEAP32[$50>>2]|0; //@line 281 "stream_encoder_framing.c"
   $52 = (($51>>>0) % 10)&-1; //@line 281 "stream_encoder_framing.c"
   $53 = ($52|0)==(0); //@line 281 "stream_encoder_framing.c"
   if ($53) {
    $5 = 14; //@line 282 "stream_encoder_framing.c"
    $7 = 14; //@line 282 "stream_encoder_framing.c"
    break;
   }
   $54 = $3; //@line 283 "stream_encoder_framing.c"
   $55 = ((($54)) + 4|0); //@line 283 "stream_encoder_framing.c"
   $56 = HEAP32[$55>>2]|0; //@line 283 "stream_encoder_framing.c"
   $57 = ($56>>>0)<=(65535); //@line 283 "stream_encoder_framing.c"
   if ($57) {
    $5 = 13; //@line 284 "stream_encoder_framing.c"
    $7 = 13; //@line 284 "stream_encoder_framing.c"
    break;
   } else {
    $5 = 0; //@line 286 "stream_encoder_framing.c"
    break;
   }
  }
 } while(0);
 $58 = $4; //@line 289 "stream_encoder_framing.c"
 $59 = $5; //@line 289 "stream_encoder_framing.c"
 $60 = HEAP32[274]|0; //@line 289 "stream_encoder_framing.c"
 $61 = (_FLAC__bitwriter_write_raw_uint32($58,$59,$60)|0); //@line 289 "stream_encoder_framing.c"
 $62 = ($61|0)!=(0); //@line 289 "stream_encoder_framing.c"
 if (!($62)) {
  $2 = 0; //@line 290 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $63 = $3; //@line 293 "stream_encoder_framing.c"
 $64 = ((($63)) + 12|0); //@line 293 "stream_encoder_framing.c"
 $65 = HEAP32[$64>>2]|0; //@line 293 "stream_encoder_framing.c"
 switch ($65|0) {
 case 0:  {
  $66 = $3; //@line 295 "stream_encoder_framing.c"
  $67 = ((($66)) + 8|0); //@line 295 "stream_encoder_framing.c"
  $68 = HEAP32[$67>>2]|0; //@line 295 "stream_encoder_framing.c"
  $69 = (($68) - 1)|0; //@line 295 "stream_encoder_framing.c"
  $5 = $69; //@line 295 "stream_encoder_framing.c"
  break;
 }
 case 1:  {
  $5 = 8; //@line 299 "stream_encoder_framing.c"
  break;
 }
 case 2:  {
  $5 = 9; //@line 303 "stream_encoder_framing.c"
  break;
 }
 case 3:  {
  $5 = 10; //@line 307 "stream_encoder_framing.c"
  break;
 }
 default: {
 }
 }
 $70 = $4; //@line 312 "stream_encoder_framing.c"
 $71 = $5; //@line 312 "stream_encoder_framing.c"
 $72 = HEAP32[274]|0; //@line 312 "stream_encoder_framing.c"
 $73 = (_FLAC__bitwriter_write_raw_uint32($70,$71,$72)|0); //@line 312 "stream_encoder_framing.c"
 $74 = ($73|0)!=(0); //@line 312 "stream_encoder_framing.c"
 if (!($74)) {
  $2 = 0; //@line 313 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $75 = $3; //@line 316 "stream_encoder_framing.c"
 $76 = ((($75)) + 16|0); //@line 316 "stream_encoder_framing.c"
 $77 = HEAP32[$76>>2]|0; //@line 316 "stream_encoder_framing.c"
 $78 = (($77) - 8)|0; //@line 316 "stream_encoder_framing.c"
 $79 = $78 >>> 2; //@line 316 "stream_encoder_framing.c"
 $80 = $78 << 30; //@line 316 "stream_encoder_framing.c"
 $81 = $79 | $80; //@line 316 "stream_encoder_framing.c"
 switch ($81|0) {
 case 0:  {
  $5 = 1; //@line 317 "stream_encoder_framing.c"
  break;
 }
 case 1:  {
  $5 = 2; //@line 318 "stream_encoder_framing.c"
  break;
 }
 case 2:  {
  $5 = 4; //@line 319 "stream_encoder_framing.c"
  break;
 }
 case 3:  {
  $5 = 5; //@line 320 "stream_encoder_framing.c"
  break;
 }
 case 4:  {
  $5 = 6; //@line 321 "stream_encoder_framing.c"
  break;
 }
 default: {
  $5 = 0; //@line 322 "stream_encoder_framing.c"
 }
 }
 $82 = $4; //@line 324 "stream_encoder_framing.c"
 $83 = $5; //@line 324 "stream_encoder_framing.c"
 $84 = HEAP32[270]|0; //@line 324 "stream_encoder_framing.c"
 $85 = (_FLAC__bitwriter_write_raw_uint32($82,$83,$84)|0); //@line 324 "stream_encoder_framing.c"
 $86 = ($85|0)!=(0); //@line 324 "stream_encoder_framing.c"
 if (!($86)) {
  $2 = 0; //@line 325 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $87 = $4; //@line 327 "stream_encoder_framing.c"
 $88 = HEAP32[277]|0; //@line 327 "stream_encoder_framing.c"
 $89 = (_FLAC__bitwriter_write_raw_uint32($87,0,$88)|0); //@line 327 "stream_encoder_framing.c"
 $90 = ($89|0)!=(0); //@line 327 "stream_encoder_framing.c"
 if (!($90)) {
  $2 = 0; //@line 328 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $91 = $3; //@line 330 "stream_encoder_framing.c"
 $92 = ((($91)) + 20|0); //@line 330 "stream_encoder_framing.c"
 $93 = HEAP32[$92>>2]|0; //@line 330 "stream_encoder_framing.c"
 $94 = ($93|0)==(0); //@line 330 "stream_encoder_framing.c"
 $95 = $4;
 $96 = $3;
 $97 = ((($96)) + 24|0);
 if ($94) {
  $98 = HEAP32[$97>>2]|0; //@line 331 "stream_encoder_framing.c"
  $99 = (_FLAC__bitwriter_write_utf8_uint32($95,$98)|0); //@line 331 "stream_encoder_framing.c"
  $100 = ($99|0)!=(0); //@line 331 "stream_encoder_framing.c"
  if (!($100)) {
   $2 = 0; //@line 332 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
 } else {
  $101 = $97; //@line 335 "stream_encoder_framing.c"
  $102 = $101; //@line 335 "stream_encoder_framing.c"
  $103 = HEAP32[$102>>2]|0; //@line 335 "stream_encoder_framing.c"
  $104 = (($101) + 4)|0; //@line 335 "stream_encoder_framing.c"
  $105 = $104; //@line 335 "stream_encoder_framing.c"
  $106 = HEAP32[$105>>2]|0; //@line 335 "stream_encoder_framing.c"
  $107 = (_FLAC__bitwriter_write_utf8_uint64($95,$103,$106)|0); //@line 335 "stream_encoder_framing.c"
  $108 = ($107|0)!=(0); //@line 335 "stream_encoder_framing.c"
  if (!($108)) {
   $2 = 0; //@line 336 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
 }
 $109 = $6; //@line 339 "stream_encoder_framing.c"
 $110 = ($109|0)!=(0); //@line 339 "stream_encoder_framing.c"
 if ($110) {
  $111 = $4; //@line 340 "stream_encoder_framing.c"
  $112 = $3; //@line 340 "stream_encoder_framing.c"
  $113 = HEAP32[$112>>2]|0; //@line 340 "stream_encoder_framing.c"
  $114 = (($113) - 1)|0; //@line 340 "stream_encoder_framing.c"
  $115 = $6; //@line 340 "stream_encoder_framing.c"
  $116 = ($115|0)==(6); //@line 340 "stream_encoder_framing.c"
  $117 = $116 ? 8 : 16; //@line 340 "stream_encoder_framing.c"
  $118 = (_FLAC__bitwriter_write_raw_uint32($111,$114,$117)|0); //@line 340 "stream_encoder_framing.c"
  $119 = ($118|0)!=(0); //@line 340 "stream_encoder_framing.c"
  if (!($119)) {
   $2 = 0; //@line 341 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
 }
 $120 = $7; //@line 343 "stream_encoder_framing.c"
 switch ($120|0) {
 case 12:  {
  $121 = $4; //@line 345 "stream_encoder_framing.c"
  $122 = $3; //@line 345 "stream_encoder_framing.c"
  $123 = ((($122)) + 4|0); //@line 345 "stream_encoder_framing.c"
  $124 = HEAP32[$123>>2]|0; //@line 345 "stream_encoder_framing.c"
  $125 = (($124>>>0) / 1000)&-1; //@line 345 "stream_encoder_framing.c"
  $126 = (_FLAC__bitwriter_write_raw_uint32($121,$125,8)|0); //@line 345 "stream_encoder_framing.c"
  $127 = ($126|0)!=(0); //@line 345 "stream_encoder_framing.c"
  if (!($127)) {
   $2 = 0; //@line 346 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
  break;
 }
 case 13:  {
  $128 = $4; //@line 349 "stream_encoder_framing.c"
  $129 = $3; //@line 349 "stream_encoder_framing.c"
  $130 = ((($129)) + 4|0); //@line 349 "stream_encoder_framing.c"
  $131 = HEAP32[$130>>2]|0; //@line 349 "stream_encoder_framing.c"
  $132 = (_FLAC__bitwriter_write_raw_uint32($128,$131,16)|0); //@line 349 "stream_encoder_framing.c"
  $133 = ($132|0)!=(0); //@line 349 "stream_encoder_framing.c"
  if (!($133)) {
   $2 = 0; //@line 350 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
  break;
 }
 case 14:  {
  $134 = $4; //@line 353 "stream_encoder_framing.c"
  $135 = $3; //@line 353 "stream_encoder_framing.c"
  $136 = ((($135)) + 4|0); //@line 353 "stream_encoder_framing.c"
  $137 = HEAP32[$136>>2]|0; //@line 353 "stream_encoder_framing.c"
  $138 = (($137>>>0) / 10)&-1; //@line 353 "stream_encoder_framing.c"
  $139 = (_FLAC__bitwriter_write_raw_uint32($134,$138,16)|0); //@line 353 "stream_encoder_framing.c"
  $140 = ($139|0)!=(0); //@line 353 "stream_encoder_framing.c"
  if (!($140)) {
   $2 = 0; //@line 354 "stream_encoder_framing.c"
   $150 = $2; //@line 365 "stream_encoder_framing.c"
   STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
  }
  break;
 }
 default: {
 }
 }
 $141 = $4; //@line 359 "stream_encoder_framing.c"
 $142 = (_FLAC__bitwriter_get_write_crc8($141,$8)|0); //@line 359 "stream_encoder_framing.c"
 $143 = ($142|0)!=(0); //@line 359 "stream_encoder_framing.c"
 if (!($143)) {
  $2 = 0; //@line 360 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 $144 = $4; //@line 361 "stream_encoder_framing.c"
 $145 = HEAP8[$8>>0]|0; //@line 361 "stream_encoder_framing.c"
 $146 = $145&255; //@line 361 "stream_encoder_framing.c"
 $147 = HEAP32[271]|0; //@line 361 "stream_encoder_framing.c"
 $148 = (_FLAC__bitwriter_write_raw_uint32($144,$146,$147)|0); //@line 361 "stream_encoder_framing.c"
 $149 = ($148|0)!=(0); //@line 361 "stream_encoder_framing.c"
 if ($149) {
  $2 = 1; //@line 364 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 } else {
  $2 = 0; //@line 362 "stream_encoder_framing.c"
  $150 = $2; //@line 365 "stream_encoder_framing.c"
  STACKTOP = sp;return ($150|0); //@line 365 "stream_encoder_framing.c"
 }
 return (0)|0;
}
function _FLAC__subframe_add_constant($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $7; //@line 372 "stream_encoder_framing.c"
 $10 = HEAP32[869]|0; //@line 372 "stream_encoder_framing.c"
 $11 = $6; //@line 372 "stream_encoder_framing.c"
 $12 = ($11|0)!=(0); //@line 372 "stream_encoder_framing.c"
 $13 = $12 ? 1 : 0; //@line 372 "stream_encoder_framing.c"
 $14 = $10 | $13; //@line 372 "stream_encoder_framing.c"
 $15 = HEAP32[277]|0; //@line 372 "stream_encoder_framing.c"
 $16 = HEAP32[276]|0; //@line 372 "stream_encoder_framing.c"
 $17 = (($15) + ($16))|0; //@line 372 "stream_encoder_framing.c"
 $18 = HEAP32[277]|0; //@line 372 "stream_encoder_framing.c"
 $19 = (($17) + ($18))|0; //@line 372 "stream_encoder_framing.c"
 $20 = (_FLAC__bitwriter_write_raw_uint32($9,$14,$19)|0); //@line 372 "stream_encoder_framing.c"
 $21 = ($20|0)!=(0); //@line 372 "stream_encoder_framing.c"
 do {
  if ($21) {
   $22 = $6; //@line 373 "stream_encoder_framing.c"
   $23 = ($22|0)!=(0); //@line 373 "stream_encoder_framing.c"
   if ($23) {
    $24 = $7; //@line 373 "stream_encoder_framing.c"
    $25 = $6; //@line 373 "stream_encoder_framing.c"
    $26 = (($25) - 1)|0; //@line 373 "stream_encoder_framing.c"
    $27 = (_FLAC__bitwriter_write_unary_unsigned($24,$26)|0); //@line 373 "stream_encoder_framing.c"
    $28 = ($27|0)!=(0); //@line 373 "stream_encoder_framing.c"
    if (!($28)) {
     $36 = 0;
     break;
    }
   }
   $29 = $7; //@line 374 "stream_encoder_framing.c"
   $30 = $4; //@line 374 "stream_encoder_framing.c"
   $31 = HEAP32[$30>>2]|0; //@line 374 "stream_encoder_framing.c"
   $32 = $5; //@line 374 "stream_encoder_framing.c"
   $33 = (_FLAC__bitwriter_write_raw_int32($29,$31,$32)|0); //@line 374 "stream_encoder_framing.c"
   $34 = ($33|0)!=(0); //@line 373 "stream_encoder_framing.c"
   $36 = $34;
  } else {
   $36 = 0;
  }
 } while(0);
 $35 = $36&1; //@line 373 "stream_encoder_framing.c"
 $8 = $35; //@line 371 "stream_encoder_framing.c"
 $37 = $8; //@line 377 "stream_encoder_framing.c"
 STACKTOP = sp;return ($37|0); //@line 377 "stream_encoder_framing.c"
}
function _FLAC__subframe_add_fixed($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $10; //@line 384 "stream_encoder_framing.c"
 $13 = HEAP32[279]|0; //@line 384 "stream_encoder_framing.c"
 $14 = $6; //@line 384 "stream_encoder_framing.c"
 $15 = ((($14)) + 12|0); //@line 384 "stream_encoder_framing.c"
 $16 = HEAP32[$15>>2]|0; //@line 384 "stream_encoder_framing.c"
 $17 = $16 << 1; //@line 384 "stream_encoder_framing.c"
 $18 = $13 | $17; //@line 384 "stream_encoder_framing.c"
 $19 = $9; //@line 384 "stream_encoder_framing.c"
 $20 = ($19|0)!=(0); //@line 384 "stream_encoder_framing.c"
 $21 = $20 ? 1 : 0; //@line 384 "stream_encoder_framing.c"
 $22 = $18 | $21; //@line 384 "stream_encoder_framing.c"
 $23 = HEAP32[277]|0; //@line 384 "stream_encoder_framing.c"
 $24 = HEAP32[276]|0; //@line 384 "stream_encoder_framing.c"
 $25 = (($23) + ($24))|0; //@line 384 "stream_encoder_framing.c"
 $26 = HEAP32[277]|0; //@line 384 "stream_encoder_framing.c"
 $27 = (($25) + ($26))|0; //@line 384 "stream_encoder_framing.c"
 $28 = (_FLAC__bitwriter_write_raw_uint32($12,$22,$27)|0); //@line 384 "stream_encoder_framing.c"
 $29 = ($28|0)!=(0); //@line 384 "stream_encoder_framing.c"
 if (!($29)) {
  $5 = 0; //@line 385 "stream_encoder_framing.c"
  $85 = $5; //@line 416 "stream_encoder_framing.c"
  STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
 }
 $30 = $9; //@line 386 "stream_encoder_framing.c"
 $31 = ($30|0)!=(0); //@line 386 "stream_encoder_framing.c"
 if ($31) {
  $32 = $10; //@line 387 "stream_encoder_framing.c"
  $33 = $9; //@line 387 "stream_encoder_framing.c"
  $34 = (($33) - 1)|0; //@line 387 "stream_encoder_framing.c"
  $35 = (_FLAC__bitwriter_write_unary_unsigned($32,$34)|0); //@line 387 "stream_encoder_framing.c"
  $36 = ($35|0)!=(0); //@line 387 "stream_encoder_framing.c"
  if (!($36)) {
   $5 = 0; //@line 388 "stream_encoder_framing.c"
   $85 = $5; //@line 416 "stream_encoder_framing.c"
   STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
  }
 }
 $11 = 0; //@line 390 "stream_encoder_framing.c"
 while(1) {
  $37 = $11; //@line 390 "stream_encoder_framing.c"
  $38 = $6; //@line 390 "stream_encoder_framing.c"
  $39 = ((($38)) + 12|0); //@line 390 "stream_encoder_framing.c"
  $40 = HEAP32[$39>>2]|0; //@line 390 "stream_encoder_framing.c"
  $41 = ($37>>>0)<($40>>>0); //@line 390 "stream_encoder_framing.c"
  $42 = $10;
  $43 = $6;
  if (!($41)) {
   break;
  }
  $44 = ((($43)) + 16|0); //@line 391 "stream_encoder_framing.c"
  $45 = $11; //@line 391 "stream_encoder_framing.c"
  $46 = (($44) + ($45<<2)|0); //@line 391 "stream_encoder_framing.c"
  $47 = HEAP32[$46>>2]|0; //@line 391 "stream_encoder_framing.c"
  $48 = $8; //@line 391 "stream_encoder_framing.c"
  $49 = (_FLAC__bitwriter_write_raw_int32($42,$47,$48)|0); //@line 391 "stream_encoder_framing.c"
  $50 = ($49|0)!=(0); //@line 391 "stream_encoder_framing.c"
  if (!($50)) {
   label = 9;
   break;
  }
  $51 = $11; //@line 390 "stream_encoder_framing.c"
  $52 = (($51) + 1)|0; //@line 390 "stream_encoder_framing.c"
  $11 = $52; //@line 390 "stream_encoder_framing.c"
 }
 if ((label|0) == 9) {
  $5 = 0; //@line 392 "stream_encoder_framing.c"
  $85 = $5; //@line 416 "stream_encoder_framing.c"
  STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
 }
 $53 = (_add_entropy_coding_method_($42,$43)|0); //@line 394 "stream_encoder_framing.c"
 $54 = ($53|0)!=(0); //@line 394 "stream_encoder_framing.c"
 if (!($54)) {
  $5 = 0; //@line 395 "stream_encoder_framing.c"
  $85 = $5; //@line 416 "stream_encoder_framing.c"
  STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
 }
 $55 = $6; //@line 396 "stream_encoder_framing.c"
 $56 = HEAP32[$55>>2]|0; //@line 396 "stream_encoder_framing.c"
 $switch = ($56>>>0)<(2); //@line 396 "stream_encoder_framing.c"
 if ($switch) {
  $57 = $10; //@line 400 "stream_encoder_framing.c"
  $58 = $6; //@line 401 "stream_encoder_framing.c"
  $59 = ((($58)) + 32|0); //@line 401 "stream_encoder_framing.c"
  $60 = HEAP32[$59>>2]|0; //@line 401 "stream_encoder_framing.c"
  $61 = $7; //@line 402 "stream_encoder_framing.c"
  $62 = $6; //@line 403 "stream_encoder_framing.c"
  $63 = ((($62)) + 12|0); //@line 403 "stream_encoder_framing.c"
  $64 = HEAP32[$63>>2]|0; //@line 403 "stream_encoder_framing.c"
  $65 = $6; //@line 404 "stream_encoder_framing.c"
  $66 = ((($65)) + 4|0); //@line 404 "stream_encoder_framing.c"
  $67 = ((($66)) + 4|0); //@line 404 "stream_encoder_framing.c"
  $68 = HEAP32[$67>>2]|0; //@line 404 "stream_encoder_framing.c"
  $69 = HEAP32[$68>>2]|0; //@line 404 "stream_encoder_framing.c"
  $70 = $6; //@line 405 "stream_encoder_framing.c"
  $71 = ((($70)) + 4|0); //@line 405 "stream_encoder_framing.c"
  $72 = ((($71)) + 4|0); //@line 405 "stream_encoder_framing.c"
  $73 = HEAP32[$72>>2]|0; //@line 405 "stream_encoder_framing.c"
  $74 = ((($73)) + 4|0); //@line 405 "stream_encoder_framing.c"
  $75 = HEAP32[$74>>2]|0; //@line 405 "stream_encoder_framing.c"
  $76 = $6; //@line 406 "stream_encoder_framing.c"
  $77 = ((($76)) + 4|0); //@line 406 "stream_encoder_framing.c"
  $78 = HEAP32[$77>>2]|0; //@line 406 "stream_encoder_framing.c"
  $79 = $6; //@line 407 "stream_encoder_framing.c"
  $80 = HEAP32[$79>>2]|0; //@line 407 "stream_encoder_framing.c"
  $81 = ($80|0)==(1); //@line 407 "stream_encoder_framing.c"
  $82 = $81&1; //@line 407 "stream_encoder_framing.c"
  $83 = (_add_residual_partitioned_rice_($57,$60,$61,$64,$69,$75,$78,$82)|0); //@line 399 "stream_encoder_framing.c"
  $84 = ($83|0)!=(0); //@line 399 "stream_encoder_framing.c"
  if (!($84)) {
   $5 = 0; //@line 409 "stream_encoder_framing.c"
   $85 = $5; //@line 416 "stream_encoder_framing.c"
   STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
  }
 }
 $5 = 1; //@line 415 "stream_encoder_framing.c"
 $85 = $5; //@line 416 "stream_encoder_framing.c"
 STACKTOP = sp;return ($85|0); //@line 416 "stream_encoder_framing.c"
}
function _add_entropy_coding_method_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3; //@line 484 "stream_encoder_framing.c"
 $6 = $4; //@line 484 "stream_encoder_framing.c"
 $7 = HEAP32[$6>>2]|0; //@line 484 "stream_encoder_framing.c"
 $8 = HEAP32[278]|0; //@line 484 "stream_encoder_framing.c"
 $9 = (_FLAC__bitwriter_write_raw_uint32($5,$7,$8)|0); //@line 484 "stream_encoder_framing.c"
 $10 = ($9|0)!=(0); //@line 484 "stream_encoder_framing.c"
 if (!($10)) {
  $2 = 0; //@line 485 "stream_encoder_framing.c"
  $20 = $2; //@line 496 "stream_encoder_framing.c"
  STACKTOP = sp;return ($20|0); //@line 496 "stream_encoder_framing.c"
 }
 $11 = $4; //@line 486 "stream_encoder_framing.c"
 $12 = HEAP32[$11>>2]|0; //@line 486 "stream_encoder_framing.c"
 $switch = ($12>>>0)<(2); //@line 486 "stream_encoder_framing.c"
 if ($switch) {
  $13 = $3; //@line 489 "stream_encoder_framing.c"
  $14 = $4; //@line 489 "stream_encoder_framing.c"
  $15 = ((($14)) + 4|0); //@line 489 "stream_encoder_framing.c"
  $16 = HEAP32[$15>>2]|0; //@line 489 "stream_encoder_framing.c"
  $17 = HEAP32[274]|0; //@line 489 "stream_encoder_framing.c"
  $18 = (_FLAC__bitwriter_write_raw_uint32($13,$16,$17)|0); //@line 489 "stream_encoder_framing.c"
  $19 = ($18|0)!=(0); //@line 489 "stream_encoder_framing.c"
  if (!($19)) {
   $2 = 0; //@line 490 "stream_encoder_framing.c"
   $20 = $2; //@line 496 "stream_encoder_framing.c"
   STACKTOP = sp;return ($20|0); //@line 496 "stream_encoder_framing.c"
  }
 }
 $2 = 1; //@line 495 "stream_encoder_framing.c"
 $20 = $2; //@line 496 "stream_encoder_framing.c"
 STACKTOP = sp;return ($20|0); //@line 496 "stream_encoder_framing.c"
}
function _add_residual_partitioned_rice_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $26 = $16; //@line 500 "stream_encoder_framing.c"
 $27 = ($26|0)!=(0); //@line 500 "stream_encoder_framing.c"
 $28 = HEAP32[275]|0; //@line 500 "stream_encoder_framing.c"
 $29 = HEAP32[274]|0; //@line 500 "stream_encoder_framing.c"
 $30 = $27 ? $28 : $29; //@line 500 "stream_encoder_framing.c"
 $17 = $30; //@line 500 "stream_encoder_framing.c"
 $31 = $16; //@line 501 "stream_encoder_framing.c"
 $32 = ($31|0)!=(0); //@line 501 "stream_encoder_framing.c"
 $33 = HEAP32[273]|0; //@line 501 "stream_encoder_framing.c"
 $34 = HEAP32[272]|0; //@line 501 "stream_encoder_framing.c"
 $35 = $32 ? $33 : $34; //@line 501 "stream_encoder_framing.c"
 $18 = $35; //@line 501 "stream_encoder_framing.c"
 $36 = $15; //@line 503 "stream_encoder_framing.c"
 $37 = ($36|0)==(0); //@line 503 "stream_encoder_framing.c"
 if ($37) {
  $38 = $14; //@line 506 "stream_encoder_framing.c"
  $39 = HEAP32[$38>>2]|0; //@line 506 "stream_encoder_framing.c"
  $40 = ($39|0)==(0); //@line 506 "stream_encoder_framing.c"
  $41 = $9;
  L3: do {
   if ($40) {
    $42 = $13; //@line 507 "stream_encoder_framing.c"
    $43 = HEAP32[$42>>2]|0; //@line 507 "stream_encoder_framing.c"
    $44 = $17; //@line 507 "stream_encoder_framing.c"
    $45 = (_FLAC__bitwriter_write_raw_uint32($41,$43,$44)|0); //@line 507 "stream_encoder_framing.c"
    $46 = ($45|0)!=(0); //@line 507 "stream_encoder_framing.c"
    if (!($46)) {
     $8 = 0; //@line 508 "stream_encoder_framing.c"
     $154 = $8; //@line 554 "stream_encoder_framing.c"
     STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
    }
    $47 = $9; //@line 509 "stream_encoder_framing.c"
    $48 = $10; //@line 509 "stream_encoder_framing.c"
    $49 = $11; //@line 509 "stream_encoder_framing.c"
    $50 = $13; //@line 509 "stream_encoder_framing.c"
    $51 = HEAP32[$50>>2]|0; //@line 509 "stream_encoder_framing.c"
    $52 = (_FLAC__bitwriter_write_rice_signed_block($47,$48,$49,$51)|0); //@line 509 "stream_encoder_framing.c"
    $53 = ($52|0)!=(0); //@line 509 "stream_encoder_framing.c"
    if (!($53)) {
     $8 = 0; //@line 510 "stream_encoder_framing.c"
     $154 = $8; //@line 554 "stream_encoder_framing.c"
     STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
    }
   } else {
    $54 = $18; //@line 514 "stream_encoder_framing.c"
    $55 = $17; //@line 514 "stream_encoder_framing.c"
    $56 = (_FLAC__bitwriter_write_raw_uint32($41,$54,$55)|0); //@line 514 "stream_encoder_framing.c"
    $57 = ($56|0)!=(0); //@line 514 "stream_encoder_framing.c"
    if (!($57)) {
     $8 = 0; //@line 515 "stream_encoder_framing.c"
     $154 = $8; //@line 554 "stream_encoder_framing.c"
     STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
    }
    $58 = $9; //@line 516 "stream_encoder_framing.c"
    $59 = $14; //@line 516 "stream_encoder_framing.c"
    $60 = HEAP32[$59>>2]|0; //@line 516 "stream_encoder_framing.c"
    $61 = HEAP32[275]|0; //@line 516 "stream_encoder_framing.c"
    $62 = (_FLAC__bitwriter_write_raw_uint32($58,$60,$61)|0); //@line 516 "stream_encoder_framing.c"
    $63 = ($62|0)!=(0); //@line 516 "stream_encoder_framing.c"
    if (!($63)) {
     $8 = 0; //@line 517 "stream_encoder_framing.c"
     $154 = $8; //@line 554 "stream_encoder_framing.c"
     STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
    }
    $19 = 0; //@line 518 "stream_encoder_framing.c"
    while(1) {
     $64 = $19; //@line 518 "stream_encoder_framing.c"
     $65 = $11; //@line 518 "stream_encoder_framing.c"
     $66 = ($64>>>0)<($65>>>0); //@line 518 "stream_encoder_framing.c"
     if (!($66)) {
      break L3;
     }
     $67 = $9; //@line 519 "stream_encoder_framing.c"
     $68 = $10; //@line 519 "stream_encoder_framing.c"
     $69 = $19; //@line 519 "stream_encoder_framing.c"
     $70 = (($68) + ($69<<2)|0); //@line 519 "stream_encoder_framing.c"
     $71 = HEAP32[$70>>2]|0; //@line 519 "stream_encoder_framing.c"
     $72 = $14; //@line 519 "stream_encoder_framing.c"
     $73 = HEAP32[$72>>2]|0; //@line 519 "stream_encoder_framing.c"
     $74 = (_FLAC__bitwriter_write_raw_int32($67,$71,$73)|0); //@line 519 "stream_encoder_framing.c"
     $75 = ($74|0)!=(0); //@line 519 "stream_encoder_framing.c"
     if (!($75)) {
      break;
     }
     $76 = $19; //@line 518 "stream_encoder_framing.c"
     $77 = (($76) + 1)|0; //@line 518 "stream_encoder_framing.c"
     $19 = $77; //@line 518 "stream_encoder_framing.c"
    }
    $8 = 0; //@line 520 "stream_encoder_framing.c"
    $154 = $8; //@line 554 "stream_encoder_framing.c"
    STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
   }
  } while(0);
  $8 = 1; //@line 523 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 $22 = 0; //@line 526 "stream_encoder_framing.c"
 $23 = 0; //@line 526 "stream_encoder_framing.c"
 $78 = $11; //@line 528 "stream_encoder_framing.c"
 $79 = $12; //@line 528 "stream_encoder_framing.c"
 $80 = (($78) + ($79))|0; //@line 528 "stream_encoder_framing.c"
 $81 = $15; //@line 528 "stream_encoder_framing.c"
 $82 = $80 >>> $81; //@line 528 "stream_encoder_framing.c"
 $25 = $82; //@line 528 "stream_encoder_framing.c"
 $20 = 0; //@line 529 "stream_encoder_framing.c"
 L29: while(1) {
  $83 = $20; //@line 529 "stream_encoder_framing.c"
  $84 = $15; //@line 529 "stream_encoder_framing.c"
  $85 = 1 << $84; //@line 529 "stream_encoder_framing.c"
  $86 = ($83>>>0)<($85>>>0); //@line 529 "stream_encoder_framing.c"
  if (!($86)) {
   label = 36;
   break;
  }
  $87 = $25; //@line 530 "stream_encoder_framing.c"
  $24 = $87; //@line 530 "stream_encoder_framing.c"
  $88 = $20; //@line 531 "stream_encoder_framing.c"
  $89 = ($88|0)==(0); //@line 531 "stream_encoder_framing.c"
  if ($89) {
   $90 = $12; //@line 532 "stream_encoder_framing.c"
   $91 = $24; //@line 532 "stream_encoder_framing.c"
   $92 = (($91) - ($90))|0; //@line 532 "stream_encoder_framing.c"
   $24 = $92; //@line 532 "stream_encoder_framing.c"
  }
  $93 = $24; //@line 533 "stream_encoder_framing.c"
  $94 = $22; //@line 533 "stream_encoder_framing.c"
  $95 = (($94) + ($93))|0; //@line 533 "stream_encoder_framing.c"
  $22 = $95; //@line 533 "stream_encoder_framing.c"
  $96 = $14; //@line 534 "stream_encoder_framing.c"
  $97 = $20; //@line 534 "stream_encoder_framing.c"
  $98 = (($96) + ($97<<2)|0); //@line 534 "stream_encoder_framing.c"
  $99 = HEAP32[$98>>2]|0; //@line 534 "stream_encoder_framing.c"
  $100 = ($99|0)==(0); //@line 534 "stream_encoder_framing.c"
  $101 = $9;
  L35: do {
   if ($100) {
    $102 = $13; //@line 535 "stream_encoder_framing.c"
    $103 = $20; //@line 535 "stream_encoder_framing.c"
    $104 = (($102) + ($103<<2)|0); //@line 535 "stream_encoder_framing.c"
    $105 = HEAP32[$104>>2]|0; //@line 535 "stream_encoder_framing.c"
    $106 = $17; //@line 535 "stream_encoder_framing.c"
    $107 = (_FLAC__bitwriter_write_raw_uint32($101,$105,$106)|0); //@line 535 "stream_encoder_framing.c"
    $108 = ($107|0)!=(0); //@line 535 "stream_encoder_framing.c"
    if (!($108)) {
     label = 23;
     break L29;
    }
    $109 = $9; //@line 537 "stream_encoder_framing.c"
    $110 = $10; //@line 537 "stream_encoder_framing.c"
    $111 = $23; //@line 537 "stream_encoder_framing.c"
    $112 = (($110) + ($111<<2)|0); //@line 537 "stream_encoder_framing.c"
    $113 = $22; //@line 537 "stream_encoder_framing.c"
    $114 = $23; //@line 537 "stream_encoder_framing.c"
    $115 = (($113) - ($114))|0; //@line 537 "stream_encoder_framing.c"
    $116 = $13; //@line 537 "stream_encoder_framing.c"
    $117 = $20; //@line 537 "stream_encoder_framing.c"
    $118 = (($116) + ($117<<2)|0); //@line 537 "stream_encoder_framing.c"
    $119 = HEAP32[$118>>2]|0; //@line 537 "stream_encoder_framing.c"
    $120 = (_FLAC__bitwriter_write_rice_signed_block($109,$112,$115,$119)|0); //@line 537 "stream_encoder_framing.c"
    $121 = ($120|0)!=(0); //@line 537 "stream_encoder_framing.c"
    if (!($121)) {
     label = 25;
     break L29;
    }
   } else {
    $122 = $18; //@line 541 "stream_encoder_framing.c"
    $123 = $17; //@line 541 "stream_encoder_framing.c"
    $124 = (_FLAC__bitwriter_write_raw_uint32($101,$122,$123)|0); //@line 541 "stream_encoder_framing.c"
    $125 = ($124|0)!=(0); //@line 541 "stream_encoder_framing.c"
    if (!($125)) {
     label = 27;
     break L29;
    }
    $126 = $9; //@line 543 "stream_encoder_framing.c"
    $127 = $14; //@line 543 "stream_encoder_framing.c"
    $128 = $20; //@line 543 "stream_encoder_framing.c"
    $129 = (($127) + ($128<<2)|0); //@line 543 "stream_encoder_framing.c"
    $130 = HEAP32[$129>>2]|0; //@line 543 "stream_encoder_framing.c"
    $131 = HEAP32[275]|0; //@line 543 "stream_encoder_framing.c"
    $132 = (_FLAC__bitwriter_write_raw_uint32($126,$130,$131)|0); //@line 543 "stream_encoder_framing.c"
    $133 = ($132|0)!=(0); //@line 543 "stream_encoder_framing.c"
    if (!($133)) {
     label = 29;
     break L29;
    }
    $134 = $23; //@line 545 "stream_encoder_framing.c"
    $21 = $134; //@line 545 "stream_encoder_framing.c"
    while(1) {
     $135 = $21; //@line 545 "stream_encoder_framing.c"
     $136 = $22; //@line 545 "stream_encoder_framing.c"
     $137 = ($135>>>0)<($136>>>0); //@line 545 "stream_encoder_framing.c"
     if (!($137)) {
      break L35;
     }
     $138 = $9; //@line 546 "stream_encoder_framing.c"
     $139 = $10; //@line 546 "stream_encoder_framing.c"
     $140 = $21; //@line 546 "stream_encoder_framing.c"
     $141 = (($139) + ($140<<2)|0); //@line 546 "stream_encoder_framing.c"
     $142 = HEAP32[$141>>2]|0; //@line 546 "stream_encoder_framing.c"
     $143 = $14; //@line 546 "stream_encoder_framing.c"
     $144 = $20; //@line 546 "stream_encoder_framing.c"
     $145 = (($143) + ($144<<2)|0); //@line 546 "stream_encoder_framing.c"
     $146 = HEAP32[$145>>2]|0; //@line 546 "stream_encoder_framing.c"
     $147 = (_FLAC__bitwriter_write_raw_int32($138,$142,$146)|0); //@line 546 "stream_encoder_framing.c"
     $148 = ($147|0)!=(0); //@line 546 "stream_encoder_framing.c"
     if (!($148)) {
      label = 33;
      break L29;
     }
     $149 = $21; //@line 545 "stream_encoder_framing.c"
     $150 = (($149) + 1)|0; //@line 545 "stream_encoder_framing.c"
     $21 = $150; //@line 545 "stream_encoder_framing.c"
    }
   }
  } while(0);
  $151 = $22; //@line 550 "stream_encoder_framing.c"
  $23 = $151; //@line 550 "stream_encoder_framing.c"
  $152 = $20; //@line 529 "stream_encoder_framing.c"
  $153 = (($152) + 1)|0; //@line 529 "stream_encoder_framing.c"
  $20 = $153; //@line 529 "stream_encoder_framing.c"
 }
 if ((label|0) == 23) {
  $8 = 0; //@line 536 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 else if ((label|0) == 25) {
  $8 = 0; //@line 538 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 else if ((label|0) == 27) {
  $8 = 0; //@line 542 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 else if ((label|0) == 29) {
  $8 = 0; //@line 544 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 else if ((label|0) == 33) {
  $8 = 0; //@line 547 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 else if ((label|0) == 36) {
  $8 = 1; //@line 552 "stream_encoder_framing.c"
  $154 = $8; //@line 554 "stream_encoder_framing.c"
  STACKTOP = sp;return ($154|0); //@line 554 "stream_encoder_framing.c"
 }
 return (0)|0;
}
function _FLAC__subframe_add_lpc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $10; //@line 422 "stream_encoder_framing.c"
 $13 = HEAP32[280]|0; //@line 422 "stream_encoder_framing.c"
 $14 = $6; //@line 422 "stream_encoder_framing.c"
 $15 = ((($14)) + 12|0); //@line 422 "stream_encoder_framing.c"
 $16 = HEAP32[$15>>2]|0; //@line 422 "stream_encoder_framing.c"
 $17 = (($16) - 1)|0; //@line 422 "stream_encoder_framing.c"
 $18 = $17 << 1; //@line 422 "stream_encoder_framing.c"
 $19 = $13 | $18; //@line 422 "stream_encoder_framing.c"
 $20 = $9; //@line 422 "stream_encoder_framing.c"
 $21 = ($20|0)!=(0); //@line 422 "stream_encoder_framing.c"
 $22 = $21 ? 1 : 0; //@line 422 "stream_encoder_framing.c"
 $23 = $19 | $22; //@line 422 "stream_encoder_framing.c"
 $24 = HEAP32[277]|0; //@line 422 "stream_encoder_framing.c"
 $25 = HEAP32[276]|0; //@line 422 "stream_encoder_framing.c"
 $26 = (($24) + ($25))|0; //@line 422 "stream_encoder_framing.c"
 $27 = HEAP32[277]|0; //@line 422 "stream_encoder_framing.c"
 $28 = (($26) + ($27))|0; //@line 422 "stream_encoder_framing.c"
 $29 = (_FLAC__bitwriter_write_raw_uint32($12,$23,$28)|0); //@line 422 "stream_encoder_framing.c"
 $30 = ($29|0)!=(0); //@line 422 "stream_encoder_framing.c"
 if (!($30)) {
  $5 = 0; //@line 423 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $31 = $9; //@line 424 "stream_encoder_framing.c"
 $32 = ($31|0)!=(0); //@line 424 "stream_encoder_framing.c"
 if ($32) {
  $33 = $10; //@line 425 "stream_encoder_framing.c"
  $34 = $9; //@line 425 "stream_encoder_framing.c"
  $35 = (($34) - 1)|0; //@line 425 "stream_encoder_framing.c"
  $36 = (_FLAC__bitwriter_write_unary_unsigned($33,$35)|0); //@line 425 "stream_encoder_framing.c"
  $37 = ($36|0)!=(0); //@line 425 "stream_encoder_framing.c"
  if (!($37)) {
   $5 = 0; //@line 426 "stream_encoder_framing.c"
   $117 = $5; //@line 462 "stream_encoder_framing.c"
   STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
  }
 }
 $11 = 0; //@line 428 "stream_encoder_framing.c"
 while(1) {
  $38 = $11; //@line 428 "stream_encoder_framing.c"
  $39 = $6; //@line 428 "stream_encoder_framing.c"
  $40 = ((($39)) + 12|0); //@line 428 "stream_encoder_framing.c"
  $41 = HEAP32[$40>>2]|0; //@line 428 "stream_encoder_framing.c"
  $42 = ($38>>>0)<($41>>>0); //@line 428 "stream_encoder_framing.c"
  $43 = $10;
  $44 = $6;
  if (!($42)) {
   break;
  }
  $45 = ((($44)) + 152|0); //@line 429 "stream_encoder_framing.c"
  $46 = $11; //@line 429 "stream_encoder_framing.c"
  $47 = (($45) + ($46<<2)|0); //@line 429 "stream_encoder_framing.c"
  $48 = HEAP32[$47>>2]|0; //@line 429 "stream_encoder_framing.c"
  $49 = $8; //@line 429 "stream_encoder_framing.c"
  $50 = (_FLAC__bitwriter_write_raw_int32($43,$48,$49)|0); //@line 429 "stream_encoder_framing.c"
  $51 = ($50|0)!=(0); //@line 429 "stream_encoder_framing.c"
  if (!($51)) {
   label = 9;
   break;
  }
  $52 = $11; //@line 428 "stream_encoder_framing.c"
  $53 = (($52) + 1)|0; //@line 428 "stream_encoder_framing.c"
  $11 = $53; //@line 428 "stream_encoder_framing.c"
 }
 if ((label|0) == 9) {
  $5 = 0; //@line 430 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $54 = ((($44)) + 16|0); //@line 432 "stream_encoder_framing.c"
 $55 = HEAP32[$54>>2]|0; //@line 432 "stream_encoder_framing.c"
 $56 = (($55) - 1)|0; //@line 432 "stream_encoder_framing.c"
 $57 = HEAP32[274]|0; //@line 432 "stream_encoder_framing.c"
 $58 = (_FLAC__bitwriter_write_raw_uint32($43,$56,$57)|0); //@line 432 "stream_encoder_framing.c"
 $59 = ($58|0)!=(0); //@line 432 "stream_encoder_framing.c"
 if (!($59)) {
  $5 = 0; //@line 433 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $60 = $10; //@line 434 "stream_encoder_framing.c"
 $61 = $6; //@line 434 "stream_encoder_framing.c"
 $62 = ((($61)) + 20|0); //@line 434 "stream_encoder_framing.c"
 $63 = HEAP32[$62>>2]|0; //@line 434 "stream_encoder_framing.c"
 $64 = HEAP32[275]|0; //@line 434 "stream_encoder_framing.c"
 $65 = (_FLAC__bitwriter_write_raw_int32($60,$63,$64)|0); //@line 434 "stream_encoder_framing.c"
 $66 = ($65|0)!=(0); //@line 434 "stream_encoder_framing.c"
 if (!($66)) {
  $5 = 0; //@line 435 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $11 = 0; //@line 436 "stream_encoder_framing.c"
 while(1) {
  $67 = $11; //@line 436 "stream_encoder_framing.c"
  $68 = $6; //@line 436 "stream_encoder_framing.c"
  $69 = ((($68)) + 12|0); //@line 436 "stream_encoder_framing.c"
  $70 = HEAP32[$69>>2]|0; //@line 436 "stream_encoder_framing.c"
  $71 = ($67>>>0)<($70>>>0); //@line 436 "stream_encoder_framing.c"
  $72 = $10;
  $73 = $6;
  if (!($71)) {
   break;
  }
  $74 = ((($73)) + 24|0); //@line 437 "stream_encoder_framing.c"
  $75 = $11; //@line 437 "stream_encoder_framing.c"
  $76 = (($74) + ($75<<2)|0); //@line 437 "stream_encoder_framing.c"
  $77 = HEAP32[$76>>2]|0; //@line 437 "stream_encoder_framing.c"
  $78 = $6; //@line 437 "stream_encoder_framing.c"
  $79 = ((($78)) + 16|0); //@line 437 "stream_encoder_framing.c"
  $80 = HEAP32[$79>>2]|0; //@line 437 "stream_encoder_framing.c"
  $81 = (_FLAC__bitwriter_write_raw_int32($72,$77,$80)|0); //@line 437 "stream_encoder_framing.c"
  $82 = ($81|0)!=(0); //@line 437 "stream_encoder_framing.c"
  if (!($82)) {
   label = 18;
   break;
  }
  $83 = $11; //@line 436 "stream_encoder_framing.c"
  $84 = (($83) + 1)|0; //@line 436 "stream_encoder_framing.c"
  $11 = $84; //@line 436 "stream_encoder_framing.c"
 }
 if ((label|0) == 18) {
  $5 = 0; //@line 438 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $85 = (_add_entropy_coding_method_($72,$73)|0); //@line 440 "stream_encoder_framing.c"
 $86 = ($85|0)!=(0); //@line 440 "stream_encoder_framing.c"
 if (!($86)) {
  $5 = 0; //@line 441 "stream_encoder_framing.c"
  $117 = $5; //@line 462 "stream_encoder_framing.c"
  STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
 }
 $87 = $6; //@line 442 "stream_encoder_framing.c"
 $88 = HEAP32[$87>>2]|0; //@line 442 "stream_encoder_framing.c"
 $switch = ($88>>>0)<(2); //@line 442 "stream_encoder_framing.c"
 if ($switch) {
  $89 = $10; //@line 446 "stream_encoder_framing.c"
  $90 = $6; //@line 447 "stream_encoder_framing.c"
  $91 = ((($90)) + 280|0); //@line 447 "stream_encoder_framing.c"
  $92 = HEAP32[$91>>2]|0; //@line 447 "stream_encoder_framing.c"
  $93 = $7; //@line 448 "stream_encoder_framing.c"
  $94 = $6; //@line 449 "stream_encoder_framing.c"
  $95 = ((($94)) + 12|0); //@line 449 "stream_encoder_framing.c"
  $96 = HEAP32[$95>>2]|0; //@line 449 "stream_encoder_framing.c"
  $97 = $6; //@line 450 "stream_encoder_framing.c"
  $98 = ((($97)) + 4|0); //@line 450 "stream_encoder_framing.c"
  $99 = ((($98)) + 4|0); //@line 450 "stream_encoder_framing.c"
  $100 = HEAP32[$99>>2]|0; //@line 450 "stream_encoder_framing.c"
  $101 = HEAP32[$100>>2]|0; //@line 450 "stream_encoder_framing.c"
  $102 = $6; //@line 451 "stream_encoder_framing.c"
  $103 = ((($102)) + 4|0); //@line 451 "stream_encoder_framing.c"
  $104 = ((($103)) + 4|0); //@line 451 "stream_encoder_framing.c"
  $105 = HEAP32[$104>>2]|0; //@line 451 "stream_encoder_framing.c"
  $106 = ((($105)) + 4|0); //@line 451 "stream_encoder_framing.c"
  $107 = HEAP32[$106>>2]|0; //@line 451 "stream_encoder_framing.c"
  $108 = $6; //@line 452 "stream_encoder_framing.c"
  $109 = ((($108)) + 4|0); //@line 452 "stream_encoder_framing.c"
  $110 = HEAP32[$109>>2]|0; //@line 452 "stream_encoder_framing.c"
  $111 = $6; //@line 453 "stream_encoder_framing.c"
  $112 = HEAP32[$111>>2]|0; //@line 453 "stream_encoder_framing.c"
  $113 = ($112|0)==(1); //@line 453 "stream_encoder_framing.c"
  $114 = $113&1; //@line 453 "stream_encoder_framing.c"
  $115 = (_add_residual_partitioned_rice_($89,$92,$93,$96,$101,$107,$110,$114)|0); //@line 445 "stream_encoder_framing.c"
  $116 = ($115|0)!=(0); //@line 445 "stream_encoder_framing.c"
  if (!($116)) {
   $5 = 0; //@line 455 "stream_encoder_framing.c"
   $117 = $5; //@line 462 "stream_encoder_framing.c"
   STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
  }
 }
 $5 = 1; //@line 461 "stream_encoder_framing.c"
 $117 = $5; //@line 462 "stream_encoder_framing.c"
 STACKTOP = sp;return ($117|0); //@line 462 "stream_encoder_framing.c"
}
function _FLAC__subframe_add_verbatim($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6; //@line 467 "stream_encoder_framing.c"
 $14 = HEAP32[$13>>2]|0; //@line 467 "stream_encoder_framing.c"
 $12 = $14; //@line 467 "stream_encoder_framing.c"
 $15 = $10; //@line 469 "stream_encoder_framing.c"
 $16 = HEAP32[278]|0; //@line 469 "stream_encoder_framing.c"
 $17 = $9; //@line 469 "stream_encoder_framing.c"
 $18 = ($17|0)!=(0); //@line 469 "stream_encoder_framing.c"
 $19 = $18 ? 1 : 0; //@line 469 "stream_encoder_framing.c"
 $20 = $16 | $19; //@line 469 "stream_encoder_framing.c"
 $21 = HEAP32[277]|0; //@line 469 "stream_encoder_framing.c"
 $22 = HEAP32[276]|0; //@line 469 "stream_encoder_framing.c"
 $23 = (($21) + ($22))|0; //@line 469 "stream_encoder_framing.c"
 $24 = HEAP32[277]|0; //@line 469 "stream_encoder_framing.c"
 $25 = (($23) + ($24))|0; //@line 469 "stream_encoder_framing.c"
 $26 = (_FLAC__bitwriter_write_raw_uint32($15,$20,$25)|0); //@line 469 "stream_encoder_framing.c"
 $27 = ($26|0)!=(0); //@line 469 "stream_encoder_framing.c"
 if (!($27)) {
  $5 = 0; //@line 470 "stream_encoder_framing.c"
  $48 = $5; //@line 480 "stream_encoder_framing.c"
  STACKTOP = sp;return ($48|0); //@line 480 "stream_encoder_framing.c"
 }
 $28 = $9; //@line 471 "stream_encoder_framing.c"
 $29 = ($28|0)!=(0); //@line 471 "stream_encoder_framing.c"
 if ($29) {
  $30 = $10; //@line 472 "stream_encoder_framing.c"
  $31 = $9; //@line 472 "stream_encoder_framing.c"
  $32 = (($31) - 1)|0; //@line 472 "stream_encoder_framing.c"
  $33 = (_FLAC__bitwriter_write_unary_unsigned($30,$32)|0); //@line 472 "stream_encoder_framing.c"
  $34 = ($33|0)!=(0); //@line 472 "stream_encoder_framing.c"
  if (!($34)) {
   $5 = 0; //@line 473 "stream_encoder_framing.c"
   $48 = $5; //@line 480 "stream_encoder_framing.c"
   STACKTOP = sp;return ($48|0); //@line 480 "stream_encoder_framing.c"
  }
 }
 $11 = 0; //@line 475 "stream_encoder_framing.c"
 while(1) {
  $35 = $11; //@line 475 "stream_encoder_framing.c"
  $36 = $7; //@line 475 "stream_encoder_framing.c"
  $37 = ($35>>>0)<($36>>>0); //@line 475 "stream_encoder_framing.c"
  if (!($37)) {
   label = 11;
   break;
  }
  $38 = $10; //@line 476 "stream_encoder_framing.c"
  $39 = $12; //@line 476 "stream_encoder_framing.c"
  $40 = $11; //@line 476 "stream_encoder_framing.c"
  $41 = (($39) + ($40<<2)|0); //@line 476 "stream_encoder_framing.c"
  $42 = HEAP32[$41>>2]|0; //@line 476 "stream_encoder_framing.c"
  $43 = $8; //@line 476 "stream_encoder_framing.c"
  $44 = (_FLAC__bitwriter_write_raw_int32($38,$42,$43)|0); //@line 476 "stream_encoder_framing.c"
  $45 = ($44|0)!=(0); //@line 476 "stream_encoder_framing.c"
  if (!($45)) {
   label = 9;
   break;
  }
  $46 = $11; //@line 475 "stream_encoder_framing.c"
  $47 = (($46) + 1)|0; //@line 475 "stream_encoder_framing.c"
  $11 = $47; //@line 475 "stream_encoder_framing.c"
 }
 if ((label|0) == 9) {
  $5 = 0; //@line 477 "stream_encoder_framing.c"
  $48 = $5; //@line 480 "stream_encoder_framing.c"
  STACKTOP = sp;return ($48|0); //@line 480 "stream_encoder_framing.c"
 }
 else if ((label|0) == 11) {
  $5 = 1; //@line 479 "stream_encoder_framing.c"
  $48 = $5; //@line 480 "stream_encoder_framing.c"
  STACKTOP = sp;return ($48|0); //@line 480 "stream_encoder_framing.c"
 }
 return (0)|0;
}
function _FLAC__window_bartlett($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 48 "window.c"
 $7 = (($6) - 1)|0; //@line 48 "window.c"
 $4 = $7; //@line 48 "window.c"
 $8 = $3; //@line 51 "window.c"
 $9 = $8 & 1; //@line 51 "window.c"
 $10 = ($9|0)!=(0); //@line 51 "window.c"
 $5 = 0;
 if ($10) {
  while(1) {
   $11 = $5; //@line 52 "window.c"
   $12 = $4; //@line 52 "window.c"
   $13 = (($12|0) / 2)&-1; //@line 52 "window.c"
   $14 = ($11|0)<=($13|0); //@line 52 "window.c"
   if (!($14)) {
    break;
   }
   $15 = $5; //@line 53 "window.c"
   $16 = (+($15|0)); //@line 53 "window.c"
   $17 = 2.0 * $16; //@line 53 "window.c"
   $18 = $4; //@line 53 "window.c"
   $19 = (+($18|0)); //@line 53 "window.c"
   $20 = $17 / $19; //@line 53 "window.c"
   $21 = $2; //@line 53 "window.c"
   $22 = $5; //@line 53 "window.c"
   $23 = (($21) + ($22<<2)|0); //@line 53 "window.c"
   HEAPF32[$23>>2] = $20; //@line 53 "window.c"
   $24 = $5; //@line 52 "window.c"
   $25 = (($24) + 1)|0; //@line 52 "window.c"
   $5 = $25; //@line 52 "window.c"
  }
  while(1) {
   $26 = $5; //@line 54 "window.c"
   $27 = $4; //@line 54 "window.c"
   $28 = ($26|0)<=($27|0); //@line 54 "window.c"
   if (!($28)) {
    break;
   }
   $29 = $5; //@line 55 "window.c"
   $30 = (+($29|0)); //@line 55 "window.c"
   $31 = 2.0 * $30; //@line 55 "window.c"
   $32 = $4; //@line 55 "window.c"
   $33 = (+($32|0)); //@line 55 "window.c"
   $34 = $31 / $33; //@line 55 "window.c"
   $35 = 2.0 - $34; //@line 55 "window.c"
   $36 = $2; //@line 55 "window.c"
   $37 = $5; //@line 55 "window.c"
   $38 = (($36) + ($37<<2)|0); //@line 55 "window.c"
   HEAPF32[$38>>2] = $35; //@line 55 "window.c"
   $39 = $5; //@line 54 "window.c"
   $40 = (($39) + 1)|0; //@line 54 "window.c"
   $5 = $40; //@line 54 "window.c"
  }
  STACKTOP = sp;return; //@line 63 "window.c"
 } else {
  while(1) {
   $41 = $5; //@line 58 "window.c"
   $42 = $3; //@line 58 "window.c"
   $43 = (($42|0) / 2)&-1; //@line 58 "window.c"
   $44 = (($43) - 1)|0; //@line 58 "window.c"
   $45 = ($41|0)<=($44|0); //@line 58 "window.c"
   if (!($45)) {
    break;
   }
   $46 = $5; //@line 59 "window.c"
   $47 = (+($46|0)); //@line 59 "window.c"
   $48 = 2.0 * $47; //@line 59 "window.c"
   $49 = $4; //@line 59 "window.c"
   $50 = (+($49|0)); //@line 59 "window.c"
   $51 = $48 / $50; //@line 59 "window.c"
   $52 = $2; //@line 59 "window.c"
   $53 = $5; //@line 59 "window.c"
   $54 = (($52) + ($53<<2)|0); //@line 59 "window.c"
   HEAPF32[$54>>2] = $51; //@line 59 "window.c"
   $55 = $5; //@line 58 "window.c"
   $56 = (($55) + 1)|0; //@line 58 "window.c"
   $5 = $56; //@line 58 "window.c"
  }
  while(1) {
   $57 = $5; //@line 60 "window.c"
   $58 = $4; //@line 60 "window.c"
   $59 = ($57|0)<=($58|0); //@line 60 "window.c"
   if (!($59)) {
    break;
   }
   $60 = $5; //@line 61 "window.c"
   $61 = (+($60|0)); //@line 61 "window.c"
   $62 = 2.0 * $61; //@line 61 "window.c"
   $63 = $4; //@line 61 "window.c"
   $64 = (+($63|0)); //@line 61 "window.c"
   $65 = $62 / $64; //@line 61 "window.c"
   $66 = 2.0 - $65; //@line 61 "window.c"
   $67 = $2; //@line 61 "window.c"
   $68 = $5; //@line 61 "window.c"
   $69 = (($67) + ($68<<2)|0); //@line 61 "window.c"
   HEAPF32[$69>>2] = $66; //@line 61 "window.c"
   $70 = $5; //@line 60 "window.c"
   $71 = (($70) + 1)|0; //@line 60 "window.c"
   $5 = $71; //@line 60 "window.c"
  }
  STACKTOP = sp;return; //@line 63 "window.c"
 }
}
function _FLAC__window_bartlett_hann($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 67 "window.c"
 $7 = (($6) - 1)|0; //@line 67 "window.c"
 $4 = $7; //@line 67 "window.c"
 $5 = 0; //@line 70 "window.c"
 while(1) {
  $8 = $5; //@line 70 "window.c"
  $9 = $3; //@line 70 "window.c"
  $10 = ($8|0)<($9|0); //@line 70 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 71 "window.c"
  $12 = (+($11|0)); //@line 71 "window.c"
  $13 = $4; //@line 71 "window.c"
  $14 = (+($13|0)); //@line 71 "window.c"
  $15 = $12 / $14; //@line 71 "window.c"
  $16 = $15 - 0.5; //@line 71 "window.c"
  $17 = $16; //@line 71 "window.c"
  $18 = (+Math_abs((+$17))); //@line 71 "window.c"
  $19 = 0.47999998927116394 * $18; //@line 71 "window.c"
  $20 = 0.62000000476837158 - $19; //@line 71 "window.c"
  $21 = $5; //@line 71 "window.c"
  $22 = (+($21|0)); //@line 71 "window.c"
  $23 = $4; //@line 71 "window.c"
  $24 = (+($23|0)); //@line 71 "window.c"
  $25 = $22 / $24; //@line 71 "window.c"
  $26 = $25; //@line 71 "window.c"
  $27 = 6.2831853071795862 * $26; //@line 71 "window.c"
  $28 = (+Math_cos((+$27))); //@line 71 "window.c"
  $29 = 0.37999999523162842 * $28; //@line 71 "window.c"
  $30 = $20 - $29; //@line 71 "window.c"
  $31 = $30; //@line 71 "window.c"
  $32 = $2; //@line 71 "window.c"
  $33 = $5; //@line 71 "window.c"
  $34 = (($32) + ($33<<2)|0); //@line 71 "window.c"
  HEAPF32[$34>>2] = $31; //@line 71 "window.c"
  $35 = $5; //@line 70 "window.c"
  $36 = (($35) + 1)|0; //@line 70 "window.c"
  $5 = $36; //@line 70 "window.c"
 }
 STACKTOP = sp;return; //@line 72 "window.c"
}
function _FLAC__window_blackman($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 76 "window.c"
 $7 = (($6) - 1)|0; //@line 76 "window.c"
 $4 = $7; //@line 76 "window.c"
 $5 = 0; //@line 79 "window.c"
 while(1) {
  $8 = $5; //@line 79 "window.c"
  $9 = $3; //@line 79 "window.c"
  $10 = ($8|0)<($9|0); //@line 79 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 80 "window.c"
  $12 = (+($11|0)); //@line 80 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 80 "window.c"
  $14 = $4; //@line 80 "window.c"
  $15 = (+($14|0)); //@line 80 "window.c"
  $16 = $13 / $15; //@line 80 "window.c"
  $17 = (+Math_cos((+$16))); //@line 80 "window.c"
  $18 = 0.5 * $17; //@line 80 "window.c"
  $19 = 0.41999998688697815 - $18; //@line 80 "window.c"
  $20 = $5; //@line 80 "window.c"
  $21 = (+($20|0)); //@line 80 "window.c"
  $22 = 12.566370614359172 * $21; //@line 80 "window.c"
  $23 = $4; //@line 80 "window.c"
  $24 = (+($23|0)); //@line 80 "window.c"
  $25 = $22 / $24; //@line 80 "window.c"
  $26 = (+Math_cos((+$25))); //@line 80 "window.c"
  $27 = 0.079999998211860657 * $26; //@line 80 "window.c"
  $28 = $19 + $27; //@line 80 "window.c"
  $29 = $28; //@line 80 "window.c"
  $30 = $2; //@line 80 "window.c"
  $31 = $5; //@line 80 "window.c"
  $32 = (($30) + ($31<<2)|0); //@line 80 "window.c"
  HEAPF32[$32>>2] = $29; //@line 80 "window.c"
  $33 = $5; //@line 79 "window.c"
  $34 = (($33) + 1)|0; //@line 79 "window.c"
  $5 = $34; //@line 79 "window.c"
 }
 STACKTOP = sp;return; //@line 81 "window.c"
}
function _FLAC__window_blackman_harris_4term_92db_sidelobe($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 86 "window.c"
 $7 = (($6) - 1)|0; //@line 86 "window.c"
 $4 = $7; //@line 86 "window.c"
 $5 = 0; //@line 89 "window.c"
 while(1) {
  $8 = $5; //@line 89 "window.c"
  $9 = $4; //@line 89 "window.c"
  $10 = ($8|0)<=($9|0); //@line 89 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 90 "window.c"
  $12 = (+($11|0)); //@line 90 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 90 "window.c"
  $14 = $4; //@line 90 "window.c"
  $15 = (+($14|0)); //@line 90 "window.c"
  $16 = $13 / $15; //@line 90 "window.c"
  $17 = (+Math_cos((+$16))); //@line 90 "window.c"
  $18 = 0.48829001188278198 * $17; //@line 90 "window.c"
  $19 = 0.35874998569488525 - $18; //@line 90 "window.c"
  $20 = $5; //@line 90 "window.c"
  $21 = (+($20|0)); //@line 90 "window.c"
  $22 = 12.566370614359172 * $21; //@line 90 "window.c"
  $23 = $4; //@line 90 "window.c"
  $24 = (+($23|0)); //@line 90 "window.c"
  $25 = $22 / $24; //@line 90 "window.c"
  $26 = (+Math_cos((+$25))); //@line 90 "window.c"
  $27 = 0.14127999544143677 * $26; //@line 90 "window.c"
  $28 = $19 + $27; //@line 90 "window.c"
  $29 = $5; //@line 90 "window.c"
  $30 = (+($29|0)); //@line 90 "window.c"
  $31 = 18.849555921538759 * $30; //@line 90 "window.c"
  $32 = $4; //@line 90 "window.c"
  $33 = (+($32|0)); //@line 90 "window.c"
  $34 = $31 / $33; //@line 90 "window.c"
  $35 = (+Math_cos((+$34))); //@line 90 "window.c"
  $36 = 0.011680000461637974 * $35; //@line 90 "window.c"
  $37 = $28 - $36; //@line 90 "window.c"
  $38 = $37; //@line 90 "window.c"
  $39 = $2; //@line 90 "window.c"
  $40 = $5; //@line 90 "window.c"
  $41 = (($39) + ($40<<2)|0); //@line 90 "window.c"
  HEAPF32[$41>>2] = $38; //@line 90 "window.c"
  $42 = $5; //@line 89 "window.c"
  $43 = (($42) + 1)|0; //@line 89 "window.c"
  $5 = $43; //@line 89 "window.c"
 }
 STACKTOP = sp;return; //@line 91 "window.c"
}
function _FLAC__window_connes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3; //@line 95 "window.c"
 $9 = (($8) - 1)|0; //@line 95 "window.c"
 $4 = $9; //@line 95 "window.c"
 $10 = $4; //@line 96 "window.c"
 $11 = (+($10|0)); //@line 96 "window.c"
 $12 = $11 / 2.0; //@line 96 "window.c"
 $5 = $12; //@line 96 "window.c"
 $6 = 0; //@line 99 "window.c"
 while(1) {
  $13 = $6; //@line 99 "window.c"
  $14 = $4; //@line 99 "window.c"
  $15 = ($13|0)<=($14|0); //@line 99 "window.c"
  if (!($15)) {
   break;
  }
  $16 = $6; //@line 100 "window.c"
  $17 = (+($16|0)); //@line 100 "window.c"
  $18 = $5; //@line 100 "window.c"
  $19 = $17 - $18; //@line 100 "window.c"
  $20 = $5; //@line 100 "window.c"
  $21 = $19 / $20; //@line 100 "window.c"
  $7 = $21; //@line 100 "window.c"
  $22 = $7; //@line 101 "window.c"
  $23 = $7; //@line 101 "window.c"
  $24 = $22 * $23; //@line 101 "window.c"
  $25 = 1.0 - $24; //@line 101 "window.c"
  $7 = $25; //@line 101 "window.c"
  $26 = $7; //@line 102 "window.c"
  $27 = $7; //@line 102 "window.c"
  $28 = $26 * $27; //@line 102 "window.c"
  $29 = $28; //@line 102 "window.c"
  $30 = $2; //@line 102 "window.c"
  $31 = $6; //@line 102 "window.c"
  $32 = (($30) + ($31<<2)|0); //@line 102 "window.c"
  HEAPF32[$32>>2] = $29; //@line 102 "window.c"
  $33 = $6; //@line 99 "window.c"
  $34 = (($33) + 1)|0; //@line 99 "window.c"
  $6 = $34; //@line 99 "window.c"
 }
 STACKTOP = sp;return; //@line 104 "window.c"
}
function _FLAC__window_flattop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 108 "window.c"
 $7 = (($6) - 1)|0; //@line 108 "window.c"
 $4 = $7; //@line 108 "window.c"
 $5 = 0; //@line 111 "window.c"
 while(1) {
  $8 = $5; //@line 111 "window.c"
  $9 = $3; //@line 111 "window.c"
  $10 = ($8|0)<($9|0); //@line 111 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 112 "window.c"
  $12 = (+($11|0)); //@line 112 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 112 "window.c"
  $14 = $4; //@line 112 "window.c"
  $15 = (+($14|0)); //@line 112 "window.c"
  $16 = $13 / $15; //@line 112 "window.c"
  $17 = (+Math_cos((+$16))); //@line 112 "window.c"
  $18 = 1.9299999475479126 * $17; //@line 112 "window.c"
  $19 = 1.0 - $18; //@line 112 "window.c"
  $20 = $5; //@line 112 "window.c"
  $21 = (+($20|0)); //@line 112 "window.c"
  $22 = 12.566370614359172 * $21; //@line 112 "window.c"
  $23 = $4; //@line 112 "window.c"
  $24 = (+($23|0)); //@line 112 "window.c"
  $25 = $22 / $24; //@line 112 "window.c"
  $26 = (+Math_cos((+$25))); //@line 112 "window.c"
  $27 = 1.2899999618530273 * $26; //@line 112 "window.c"
  $28 = $19 + $27; //@line 112 "window.c"
  $29 = $5; //@line 112 "window.c"
  $30 = (+($29|0)); //@line 112 "window.c"
  $31 = 18.849555921538759 * $30; //@line 112 "window.c"
  $32 = $4; //@line 112 "window.c"
  $33 = (+($32|0)); //@line 112 "window.c"
  $34 = $31 / $33; //@line 112 "window.c"
  $35 = (+Math_cos((+$34))); //@line 112 "window.c"
  $36 = 0.3880000114440918 * $35; //@line 112 "window.c"
  $37 = $28 - $36; //@line 112 "window.c"
  $38 = $5; //@line 112 "window.c"
  $39 = (+($38|0)); //@line 112 "window.c"
  $40 = 25.132741228718345 * $39; //@line 112 "window.c"
  $41 = $4; //@line 112 "window.c"
  $42 = (+($41|0)); //@line 112 "window.c"
  $43 = $40 / $42; //@line 112 "window.c"
  $44 = (+Math_cos((+$43))); //@line 112 "window.c"
  $45 = 0.032200001180171967 * $44; //@line 112 "window.c"
  $46 = $37 + $45; //@line 112 "window.c"
  $47 = $46; //@line 112 "window.c"
  $48 = $2; //@line 112 "window.c"
  $49 = $5; //@line 112 "window.c"
  $50 = (($48) + ($49<<2)|0); //@line 112 "window.c"
  HEAPF32[$50>>2] = $47; //@line 112 "window.c"
  $51 = $5; //@line 111 "window.c"
  $52 = (($51) + 1)|0; //@line 111 "window.c"
  $5 = $52; //@line 111 "window.c"
 }
 STACKTOP = sp;return; //@line 113 "window.c"
}
function _FLAC__window_gauss($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $4; //@line 117 "window.c"
 $11 = (($10) - 1)|0; //@line 117 "window.c"
 $6 = $11; //@line 117 "window.c"
 $12 = $6; //@line 118 "window.c"
 $13 = (+($12|0)); //@line 118 "window.c"
 $14 = $13 / 2.0; //@line 118 "window.c"
 $7 = $14; //@line 118 "window.c"
 $8 = 0; //@line 121 "window.c"
 while(1) {
  $15 = $8; //@line 121 "window.c"
  $16 = $6; //@line 121 "window.c"
  $17 = ($15|0)<=($16|0); //@line 121 "window.c"
  if (!($17)) {
   break;
  }
  $18 = $8; //@line 122 "window.c"
  $19 = (+($18|0)); //@line 122 "window.c"
  $20 = $7; //@line 122 "window.c"
  $21 = $19 - $20; //@line 122 "window.c"
  $22 = $5; //@line 122 "window.c"
  $23 = $22; //@line 122 "window.c"
  $24 = $7; //@line 122 "window.c"
  $25 = $23 * $24; //@line 122 "window.c"
  $26 = $21 / $25; //@line 122 "window.c"
  $9 = $26; //@line 122 "window.c"
  $27 = $9; //@line 123 "window.c"
  $28 = -0.5 * $27; //@line 123 "window.c"
  $29 = $9; //@line 123 "window.c"
  $30 = $28 * $29; //@line 123 "window.c"
  $31 = (+Math_exp((+$30))); //@line 123 "window.c"
  $32 = $31; //@line 123 "window.c"
  $33 = $3; //@line 123 "window.c"
  $34 = $8; //@line 123 "window.c"
  $35 = (($33) + ($34<<2)|0); //@line 123 "window.c"
  HEAPF32[$35>>2] = $32; //@line 123 "window.c"
  $36 = $8; //@line 121 "window.c"
  $37 = (($36) + 1)|0; //@line 121 "window.c"
  $8 = $37; //@line 121 "window.c"
 }
 STACKTOP = sp;return; //@line 125 "window.c"
}
function _FLAC__window_hamming($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 129 "window.c"
 $7 = (($6) - 1)|0; //@line 129 "window.c"
 $4 = $7; //@line 129 "window.c"
 $5 = 0; //@line 132 "window.c"
 while(1) {
  $8 = $5; //@line 132 "window.c"
  $9 = $3; //@line 132 "window.c"
  $10 = ($8|0)<($9|0); //@line 132 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 133 "window.c"
  $12 = (+($11|0)); //@line 133 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 133 "window.c"
  $14 = $4; //@line 133 "window.c"
  $15 = (+($14|0)); //@line 133 "window.c"
  $16 = $13 / $15; //@line 133 "window.c"
  $17 = (+Math_cos((+$16))); //@line 133 "window.c"
  $18 = 0.46000000834465027 * $17; //@line 133 "window.c"
  $19 = 0.54000002145767212 - $18; //@line 133 "window.c"
  $20 = $19; //@line 133 "window.c"
  $21 = $2; //@line 133 "window.c"
  $22 = $5; //@line 133 "window.c"
  $23 = (($21) + ($22<<2)|0); //@line 133 "window.c"
  HEAPF32[$23>>2] = $20; //@line 133 "window.c"
  $24 = $5; //@line 132 "window.c"
  $25 = (($24) + 1)|0; //@line 132 "window.c"
  $5 = $25; //@line 132 "window.c"
 }
 STACKTOP = sp;return; //@line 134 "window.c"
}
function _FLAC__window_hann($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 138 "window.c"
 $7 = (($6) - 1)|0; //@line 138 "window.c"
 $4 = $7; //@line 138 "window.c"
 $5 = 0; //@line 141 "window.c"
 while(1) {
  $8 = $5; //@line 141 "window.c"
  $9 = $3; //@line 141 "window.c"
  $10 = ($8|0)<($9|0); //@line 141 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 142 "window.c"
  $12 = (+($11|0)); //@line 142 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 142 "window.c"
  $14 = $4; //@line 142 "window.c"
  $15 = (+($14|0)); //@line 142 "window.c"
  $16 = $13 / $15; //@line 142 "window.c"
  $17 = (+Math_cos((+$16))); //@line 142 "window.c"
  $18 = 0.5 * $17; //@line 142 "window.c"
  $19 = 0.5 - $18; //@line 142 "window.c"
  $20 = $19; //@line 142 "window.c"
  $21 = $2; //@line 142 "window.c"
  $22 = $5; //@line 142 "window.c"
  $23 = (($21) + ($22<<2)|0); //@line 142 "window.c"
  HEAPF32[$23>>2] = $20; //@line 142 "window.c"
  $24 = $5; //@line 141 "window.c"
  $25 = (($24) + 1)|0; //@line 141 "window.c"
  $5 = $25; //@line 141 "window.c"
 }
 STACKTOP = sp;return; //@line 143 "window.c"
}
function _FLAC__window_kaiser_bessel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 147 "window.c"
 $7 = (($6) - 1)|0; //@line 147 "window.c"
 $4 = $7; //@line 147 "window.c"
 $5 = 0; //@line 150 "window.c"
 while(1) {
  $8 = $5; //@line 150 "window.c"
  $9 = $3; //@line 150 "window.c"
  $10 = ($8|0)<($9|0); //@line 150 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 151 "window.c"
  $12 = (+($11|0)); //@line 151 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 151 "window.c"
  $14 = $4; //@line 151 "window.c"
  $15 = (+($14|0)); //@line 151 "window.c"
  $16 = $13 / $15; //@line 151 "window.c"
  $17 = (+Math_cos((+$16))); //@line 151 "window.c"
  $18 = 0.49799999594688416 * $17; //@line 151 "window.c"
  $19 = 0.40200001001358032 - $18; //@line 151 "window.c"
  $20 = $5; //@line 151 "window.c"
  $21 = (+($20|0)); //@line 151 "window.c"
  $22 = 12.566370614359172 * $21; //@line 151 "window.c"
  $23 = $4; //@line 151 "window.c"
  $24 = (+($23|0)); //@line 151 "window.c"
  $25 = $22 / $24; //@line 151 "window.c"
  $26 = (+Math_cos((+$25))); //@line 151 "window.c"
  $27 = 0.097999997437000274 * $26; //@line 151 "window.c"
  $28 = $19 + $27; //@line 151 "window.c"
  $29 = $5; //@line 151 "window.c"
  $30 = (+($29|0)); //@line 151 "window.c"
  $31 = 18.849555921538759 * $30; //@line 151 "window.c"
  $32 = $4; //@line 151 "window.c"
  $33 = (+($32|0)); //@line 151 "window.c"
  $34 = $31 / $33; //@line 151 "window.c"
  $35 = (+Math_cos((+$34))); //@line 151 "window.c"
  $36 = 0.0010000000474974513 * $35; //@line 151 "window.c"
  $37 = $28 - $36; //@line 151 "window.c"
  $38 = $37; //@line 151 "window.c"
  $39 = $2; //@line 151 "window.c"
  $40 = $5; //@line 151 "window.c"
  $41 = (($39) + ($40<<2)|0); //@line 151 "window.c"
  HEAPF32[$41>>2] = $38; //@line 151 "window.c"
  $42 = $5; //@line 150 "window.c"
  $43 = (($42) + 1)|0; //@line 150 "window.c"
  $5 = $43; //@line 150 "window.c"
 }
 STACKTOP = sp;return; //@line 152 "window.c"
}
function _FLAC__window_nuttall($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3; //@line 156 "window.c"
 $7 = (($6) - 1)|0; //@line 156 "window.c"
 $4 = $7; //@line 156 "window.c"
 $5 = 0; //@line 159 "window.c"
 while(1) {
  $8 = $5; //@line 159 "window.c"
  $9 = $3; //@line 159 "window.c"
  $10 = ($8|0)<($9|0); //@line 159 "window.c"
  if (!($10)) {
   break;
  }
  $11 = $5; //@line 160 "window.c"
  $12 = (+($11|0)); //@line 160 "window.c"
  $13 = 6.2831853071795862 * $12; //@line 160 "window.c"
  $14 = $4; //@line 160 "window.c"
  $15 = (+($14|0)); //@line 160 "window.c"
  $16 = $13 / $15; //@line 160 "window.c"
  $17 = (+Math_cos((+$16))); //@line 160 "window.c"
  $18 = 0.48917749524116516 * $17; //@line 160 "window.c"
  $19 = 0.36358189582824707 - $18; //@line 160 "window.c"
  $20 = $5; //@line 160 "window.c"
  $21 = (+($20|0)); //@line 160 "window.c"
  $22 = 12.566370614359172 * $21; //@line 160 "window.c"
  $23 = $4; //@line 160 "window.c"
  $24 = (+($23|0)); //@line 160 "window.c"
  $25 = $22 / $24; //@line 160 "window.c"
  $26 = (+Math_cos((+$25))); //@line 160 "window.c"
  $27 = 0.13659949600696564 * $26; //@line 160 "window.c"
  $28 = $19 + $27; //@line 160 "window.c"
  $29 = $5; //@line 160 "window.c"
  $30 = (+($29|0)); //@line 160 "window.c"
  $31 = 18.849555921538759 * $30; //@line 160 "window.c"
  $32 = $4; //@line 160 "window.c"
  $33 = (+($32|0)); //@line 160 "window.c"
  $34 = $31 / $33; //@line 160 "window.c"
  $35 = (+Math_cos((+$34))); //@line 160 "window.c"
  $36 = 0.010641099885106087 * $35; //@line 160 "window.c"
  $37 = $28 - $36; //@line 160 "window.c"
  $38 = $37; //@line 160 "window.c"
  $39 = $2; //@line 160 "window.c"
  $40 = $5; //@line 160 "window.c"
  $41 = (($39) + ($40<<2)|0); //@line 160 "window.c"
  HEAPF32[$41>>2] = $38; //@line 160 "window.c"
  $42 = $5; //@line 159 "window.c"
  $43 = (($42) + 1)|0; //@line 159 "window.c"
  $5 = $43; //@line 159 "window.c"
 }
 STACKTOP = sp;return; //@line 161 "window.c"
}
function _FLAC__window_rectangle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0; //@line 167 "window.c"
 while(1) {
  $5 = $4; //@line 167 "window.c"
  $6 = $3; //@line 167 "window.c"
  $7 = ($5|0)<($6|0); //@line 167 "window.c"
  if (!($7)) {
   break;
  }
  $8 = $2; //@line 168 "window.c"
  $9 = $4; //@line 168 "window.c"
  $10 = (($8) + ($9<<2)|0); //@line 168 "window.c"
  HEAPF32[$10>>2] = 1.0; //@line 168 "window.c"
  $11 = $4; //@line 167 "window.c"
  $12 = (($11) + 1)|0; //@line 167 "window.c"
  $4 = $12; //@line 167 "window.c"
 }
 STACKTOP = sp;return; //@line 169 "window.c"
}
function _FLAC__window_triangle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3; //@line 175 "window.c"
 $6 = $5 & 1; //@line 175 "window.c"
 $7 = ($6|0)!=(0); //@line 175 "window.c"
 $4 = 1;
 if ($7) {
  while(1) {
   $8 = $4; //@line 176 "window.c"
   $9 = $3; //@line 176 "window.c"
   $10 = (($9) + 1)|0; //@line 176 "window.c"
   $11 = (($10|0) / 2)&-1; //@line 176 "window.c"
   $12 = ($8|0)<=($11|0); //@line 176 "window.c"
   if (!($12)) {
    break;
   }
   $13 = $4; //@line 177 "window.c"
   $14 = (+($13|0)); //@line 177 "window.c"
   $15 = 2.0 * $14; //@line 177 "window.c"
   $16 = $3; //@line 177 "window.c"
   $17 = (+($16|0)); //@line 177 "window.c"
   $18 = $17 + 1.0; //@line 177 "window.c"
   $19 = $15 / $18; //@line 177 "window.c"
   $20 = $2; //@line 177 "window.c"
   $21 = $4; //@line 177 "window.c"
   $22 = (($21) - 1)|0; //@line 177 "window.c"
   $23 = (($20) + ($22<<2)|0); //@line 177 "window.c"
   HEAPF32[$23>>2] = $19; //@line 177 "window.c"
   $24 = $4; //@line 176 "window.c"
   $25 = (($24) + 1)|0; //@line 176 "window.c"
   $4 = $25; //@line 176 "window.c"
  }
  while(1) {
   $26 = $4; //@line 178 "window.c"
   $27 = $3; //@line 178 "window.c"
   $28 = ($26|0)<=($27|0); //@line 178 "window.c"
   if (!($28)) {
    break;
   }
   $29 = $3; //@line 179 "window.c"
   $30 = $4; //@line 179 "window.c"
   $31 = (($29) - ($30))|0; //@line 179 "window.c"
   $32 = (($31) + 1)|0; //@line 179 "window.c"
   $33 = $32<<1; //@line 179 "window.c"
   $34 = (+($33|0)); //@line 179 "window.c"
   $35 = $3; //@line 179 "window.c"
   $36 = (+($35|0)); //@line 179 "window.c"
   $37 = $36 + 1.0; //@line 179 "window.c"
   $38 = $34 / $37; //@line 179 "window.c"
   $39 = $2; //@line 179 "window.c"
   $40 = $4; //@line 179 "window.c"
   $41 = (($40) - 1)|0; //@line 179 "window.c"
   $42 = (($39) + ($41<<2)|0); //@line 179 "window.c"
   HEAPF32[$42>>2] = $38; //@line 179 "window.c"
   $43 = $4; //@line 178 "window.c"
   $44 = (($43) + 1)|0; //@line 178 "window.c"
   $4 = $44; //@line 178 "window.c"
  }
  STACKTOP = sp;return; //@line 187 "window.c"
 } else {
  while(1) {
   $45 = $4; //@line 182 "window.c"
   $46 = $3; //@line 182 "window.c"
   $47 = (($46|0) / 2)&-1; //@line 182 "window.c"
   $48 = ($45|0)<=($47|0); //@line 182 "window.c"
   if (!($48)) {
    break;
   }
   $49 = $4; //@line 183 "window.c"
   $50 = (+($49|0)); //@line 183 "window.c"
   $51 = 2.0 * $50; //@line 183 "window.c"
   $52 = $3; //@line 183 "window.c"
   $53 = (+($52|0)); //@line 183 "window.c"
   $54 = $53 + 1.0; //@line 183 "window.c"
   $55 = $51 / $54; //@line 183 "window.c"
   $56 = $2; //@line 183 "window.c"
   $57 = $4; //@line 183 "window.c"
   $58 = (($57) - 1)|0; //@line 183 "window.c"
   $59 = (($56) + ($58<<2)|0); //@line 183 "window.c"
   HEAPF32[$59>>2] = $55; //@line 183 "window.c"
   $60 = $4; //@line 182 "window.c"
   $61 = (($60) + 1)|0; //@line 182 "window.c"
   $4 = $61; //@line 182 "window.c"
  }
  while(1) {
   $62 = $4; //@line 184 "window.c"
   $63 = $3; //@line 184 "window.c"
   $64 = ($62|0)<=($63|0); //@line 184 "window.c"
   if (!($64)) {
    break;
   }
   $65 = $3; //@line 185 "window.c"
   $66 = $4; //@line 185 "window.c"
   $67 = (($65) - ($66))|0; //@line 185 "window.c"
   $68 = (($67) + 1)|0; //@line 185 "window.c"
   $69 = $68<<1; //@line 185 "window.c"
   $70 = (+($69|0)); //@line 185 "window.c"
   $71 = $3; //@line 185 "window.c"
   $72 = (+($71|0)); //@line 185 "window.c"
   $73 = $72 + 1.0; //@line 185 "window.c"
   $74 = $70 / $73; //@line 185 "window.c"
   $75 = $2; //@line 185 "window.c"
   $76 = $4; //@line 185 "window.c"
   $77 = (($76) - 1)|0; //@line 185 "window.c"
   $78 = (($75) + ($77<<2)|0); //@line 185 "window.c"
   HEAPF32[$78>>2] = $74; //@line 185 "window.c"
   $79 = $4; //@line 184 "window.c"
   $80 = (($79) + 1)|0; //@line 184 "window.c"
   $4 = $80; //@line 184 "window.c"
  }
  STACKTOP = sp;return; //@line 187 "window.c"
 }
}
function _FLAC__window_tukey($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5; //@line 191 "window.c"
 $9 = $8; //@line 191 "window.c"
 $10 = $9 <= 0.0; //@line 191 "window.c"
 if ($10) {
  $11 = $3; //@line 192 "window.c"
  $12 = $4; //@line 192 "window.c"
  _FLAC__window_rectangle($11,$12); //@line 192 "window.c"
  STACKTOP = sp;return; //@line 208 "window.c"
 }
 $13 = $5; //@line 193 "window.c"
 $14 = $13; //@line 193 "window.c"
 $15 = $14 >= 1.0; //@line 193 "window.c"
 if ($15) {
  $16 = $3; //@line 194 "window.c"
  $17 = $4; //@line 194 "window.c"
  _FLAC__window_hann($16,$17); //@line 194 "window.c"
  STACKTOP = sp;return; //@line 208 "window.c"
 }
 $18 = $5; //@line 196 "window.c"
 $19 = $18 / 2.0; //@line 196 "window.c"
 $20 = $4; //@line 196 "window.c"
 $21 = (+($20|0)); //@line 196 "window.c"
 $22 = $19 * $21; //@line 196 "window.c"
 $23 = (~~(($22))); //@line 196 "window.c"
 $24 = (($23) - 1)|0; //@line 196 "window.c"
 $6 = $24; //@line 196 "window.c"
 $25 = $3; //@line 199 "window.c"
 $26 = $4; //@line 199 "window.c"
 _FLAC__window_rectangle($25,$26); //@line 199 "window.c"
 $27 = $6; //@line 201 "window.c"
 $28 = ($27|0)>(0); //@line 201 "window.c"
 if (!($28)) {
  STACKTOP = sp;return; //@line 208 "window.c"
 }
 $7 = 0; //@line 202 "window.c"
 while(1) {
  $29 = $7; //@line 202 "window.c"
  $30 = $6; //@line 202 "window.c"
  $31 = ($29|0)<=($30|0); //@line 202 "window.c"
  if (!($31)) {
   break;
  }
  $32 = $7; //@line 203 "window.c"
  $33 = (+($32|0)); //@line 203 "window.c"
  $34 = 3.1415926535897931 * $33; //@line 203 "window.c"
  $35 = $6; //@line 203 "window.c"
  $36 = (+($35|0)); //@line 203 "window.c"
  $37 = $34 / $36; //@line 203 "window.c"
  $38 = (+Math_cos((+$37))); //@line 203 "window.c"
  $39 = 0.5 * $38; //@line 203 "window.c"
  $40 = 0.5 - $39; //@line 203 "window.c"
  $41 = $40; //@line 203 "window.c"
  $42 = $3; //@line 203 "window.c"
  $43 = $7; //@line 203 "window.c"
  $44 = (($42) + ($43<<2)|0); //@line 203 "window.c"
  HEAPF32[$44>>2] = $41; //@line 203 "window.c"
  $45 = $7; //@line 204 "window.c"
  $46 = $6; //@line 204 "window.c"
  $47 = (($45) + ($46))|0; //@line 204 "window.c"
  $48 = (+($47|0)); //@line 204 "window.c"
  $49 = 3.1415926535897931 * $48; //@line 204 "window.c"
  $50 = $6; //@line 204 "window.c"
  $51 = (+($50|0)); //@line 204 "window.c"
  $52 = $49 / $51; //@line 204 "window.c"
  $53 = (+Math_cos((+$52))); //@line 204 "window.c"
  $54 = 0.5 * $53; //@line 204 "window.c"
  $55 = 0.5 - $54; //@line 204 "window.c"
  $56 = $55; //@line 204 "window.c"
  $57 = $3; //@line 204 "window.c"
  $58 = $4; //@line 204 "window.c"
  $59 = $6; //@line 204 "window.c"
  $60 = (($58) - ($59))|0; //@line 204 "window.c"
  $61 = (($60) - 1)|0; //@line 204 "window.c"
  $62 = $7; //@line 204 "window.c"
  $63 = (($61) + ($62))|0; //@line 204 "window.c"
  $64 = (($57) + ($63<<2)|0); //@line 204 "window.c"
  HEAPF32[$64>>2] = $56; //@line 204 "window.c"
  $65 = $7; //@line 202 "window.c"
  $66 = (($65) + 1)|0; //@line 202 "window.c"
  $7 = $66; //@line 202 "window.c"
 }
 STACKTOP = sp;return; //@line 208 "window.c"
}
function _FLAC__window_partial_tukey($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $8; //@line 212 "window.c"
 $17 = $6; //@line 212 "window.c"
 $18 = (+($17|0)); //@line 212 "window.c"
 $19 = $16 * $18; //@line 212 "window.c"
 $20 = (~~(($19))); //@line 212 "window.c"
 $10 = $20; //@line 212 "window.c"
 $21 = $9; //@line 213 "window.c"
 $22 = $6; //@line 213 "window.c"
 $23 = (+($22|0)); //@line 213 "window.c"
 $24 = $21 * $23; //@line 213 "window.c"
 $25 = (~~(($24))); //@line 213 "window.c"
 $11 = $25; //@line 213 "window.c"
 $26 = $11; //@line 214 "window.c"
 $27 = $10; //@line 214 "window.c"
 $28 = (($26) - ($27))|0; //@line 214 "window.c"
 $12 = $28; //@line 214 "window.c"
 $29 = $7; //@line 217 "window.c"
 $30 = $29 <= 0.0; //@line 217 "window.c"
 if ($30) {
  $31 = $5; //@line 218 "window.c"
  $32 = $6; //@line 218 "window.c"
  $33 = $8; //@line 218 "window.c"
  $34 = $9; //@line 218 "window.c"
  _FLAC__window_partial_tukey($31,$32,0.05000000074505806,$33,$34); //@line 218 "window.c"
  STACKTOP = sp;return; //@line 236 "window.c"
 }
 $35 = $7; //@line 219 "window.c"
 $36 = $35 >= 1.0; //@line 219 "window.c"
 if ($36) {
  $37 = $5; //@line 220 "window.c"
  $38 = $6; //@line 220 "window.c"
  $39 = $8; //@line 220 "window.c"
  $40 = $9; //@line 220 "window.c"
  _FLAC__window_partial_tukey($37,$38,0.94999998807907104,$39,$40); //@line 220 "window.c"
  STACKTOP = sp;return; //@line 236 "window.c"
 }
 $41 = $7; //@line 223 "window.c"
 $42 = $41 / 2.0; //@line 223 "window.c"
 $43 = $12; //@line 223 "window.c"
 $44 = (+($43|0)); //@line 223 "window.c"
 $45 = $42 * $44; //@line 223 "window.c"
 $46 = (~~(($45))); //@line 223 "window.c"
 $13 = $46; //@line 223 "window.c"
 $14 = 0; //@line 225 "window.c"
 while(1) {
  $47 = $14; //@line 225 "window.c"
  $48 = $10; //@line 225 "window.c"
  $49 = ($47|0)<($48|0); //@line 225 "window.c"
  if (!($49)) {
   break;
  }
  $50 = $14; //@line 225 "window.c"
  $51 = $6; //@line 225 "window.c"
  $52 = ($50|0)<($51|0); //@line 225 "window.c"
  if (!($52)) {
   break;
  }
  $53 = $5; //@line 226 "window.c"
  $54 = $14; //@line 226 "window.c"
  $55 = (($53) + ($54<<2)|0); //@line 226 "window.c"
  HEAPF32[$55>>2] = 0.0; //@line 226 "window.c"
  $56 = $14; //@line 225 "window.c"
  $57 = (($56) + 1)|0; //@line 225 "window.c"
  $14 = $57; //@line 225 "window.c"
 }
 $15 = 1; //@line 227 "window.c"
 while(1) {
  $58 = $14; //@line 227 "window.c"
  $59 = $10; //@line 227 "window.c"
  $60 = $13; //@line 227 "window.c"
  $61 = (($59) + ($60))|0; //@line 227 "window.c"
  $62 = ($58|0)<($61|0); //@line 227 "window.c"
  if (!($62)) {
   break;
  }
  $63 = $14; //@line 227 "window.c"
  $64 = $6; //@line 227 "window.c"
  $65 = ($63|0)<($64|0); //@line 227 "window.c"
  if (!($65)) {
   break;
  }
  $66 = $15; //@line 228 "window.c"
  $67 = (+($66|0)); //@line 228 "window.c"
  $68 = 3.1415926535897931 * $67; //@line 228 "window.c"
  $69 = $13; //@line 228 "window.c"
  $70 = (+($69|0)); //@line 228 "window.c"
  $71 = $68 / $70; //@line 228 "window.c"
  $72 = (+Math_cos((+$71))); //@line 228 "window.c"
  $73 = 0.5 * $72; //@line 228 "window.c"
  $74 = 0.5 - $73; //@line 228 "window.c"
  $75 = $74; //@line 228 "window.c"
  $76 = $5; //@line 228 "window.c"
  $77 = $14; //@line 228 "window.c"
  $78 = (($76) + ($77<<2)|0); //@line 228 "window.c"
  HEAPF32[$78>>2] = $75; //@line 228 "window.c"
  $79 = $14; //@line 227 "window.c"
  $80 = (($79) + 1)|0; //@line 227 "window.c"
  $14 = $80; //@line 227 "window.c"
  $81 = $15; //@line 227 "window.c"
  $82 = (($81) + 1)|0; //@line 227 "window.c"
  $15 = $82; //@line 227 "window.c"
 }
 while(1) {
  $83 = $14; //@line 229 "window.c"
  $84 = $11; //@line 229 "window.c"
  $85 = $13; //@line 229 "window.c"
  $86 = (($84) - ($85))|0; //@line 229 "window.c"
  $87 = ($83|0)<($86|0); //@line 229 "window.c"
  if (!($87)) {
   break;
  }
  $88 = $14; //@line 229 "window.c"
  $89 = $6; //@line 229 "window.c"
  $90 = ($88|0)<($89|0); //@line 229 "window.c"
  if (!($90)) {
   break;
  }
  $91 = $5; //@line 230 "window.c"
  $92 = $14; //@line 230 "window.c"
  $93 = (($91) + ($92<<2)|0); //@line 230 "window.c"
  HEAPF32[$93>>2] = 1.0; //@line 230 "window.c"
  $94 = $14; //@line 229 "window.c"
  $95 = (($94) + 1)|0; //@line 229 "window.c"
  $14 = $95; //@line 229 "window.c"
 }
 $96 = $13; //@line 231 "window.c"
 $15 = $96; //@line 231 "window.c"
 while(1) {
  $97 = $14; //@line 231 "window.c"
  $98 = $11; //@line 231 "window.c"
  $99 = ($97|0)<($98|0); //@line 231 "window.c"
  if (!($99)) {
   break;
  }
  $100 = $14; //@line 231 "window.c"
  $101 = $6; //@line 231 "window.c"
  $102 = ($100|0)<($101|0); //@line 231 "window.c"
  if (!($102)) {
   break;
  }
  $103 = $15; //@line 232 "window.c"
  $104 = (+($103|0)); //@line 232 "window.c"
  $105 = 3.1415926535897931 * $104; //@line 232 "window.c"
  $106 = $13; //@line 232 "window.c"
  $107 = (+($106|0)); //@line 232 "window.c"
  $108 = $105 / $107; //@line 232 "window.c"
  $109 = (+Math_cos((+$108))); //@line 232 "window.c"
  $110 = 0.5 * $109; //@line 232 "window.c"
  $111 = 0.5 - $110; //@line 232 "window.c"
  $112 = $111; //@line 232 "window.c"
  $113 = $5; //@line 232 "window.c"
  $114 = $14; //@line 232 "window.c"
  $115 = (($113) + ($114<<2)|0); //@line 232 "window.c"
  HEAPF32[$115>>2] = $112; //@line 232 "window.c"
  $116 = $14; //@line 231 "window.c"
  $117 = (($116) + 1)|0; //@line 231 "window.c"
  $14 = $117; //@line 231 "window.c"
  $118 = $15; //@line 231 "window.c"
  $119 = (($118) + -1)|0; //@line 231 "window.c"
  $15 = $119; //@line 231 "window.c"
 }
 while(1) {
  $120 = $14; //@line 233 "window.c"
  $121 = $6; //@line 233 "window.c"
  $122 = ($120|0)<($121|0); //@line 233 "window.c"
  if (!($122)) {
   break;
  }
  $123 = $5; //@line 234 "window.c"
  $124 = $14; //@line 234 "window.c"
  $125 = (($123) + ($124<<2)|0); //@line 234 "window.c"
  HEAPF32[$125>>2] = 0.0; //@line 234 "window.c"
  $126 = $14; //@line 233 "window.c"
  $127 = (($126) + 1)|0; //@line 233 "window.c"
  $14 = $127; //@line 233 "window.c"
 }
 STACKTOP = sp;return; //@line 236 "window.c"
}
function _FLAC__window_punchout_tukey($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $8; //@line 240 "window.c"
 $17 = $6; //@line 240 "window.c"
 $18 = (+($17|0)); //@line 240 "window.c"
 $19 = $16 * $18; //@line 240 "window.c"
 $20 = (~~(($19))); //@line 240 "window.c"
 $10 = $20; //@line 240 "window.c"
 $21 = $9; //@line 241 "window.c"
 $22 = $6; //@line 241 "window.c"
 $23 = (+($22|0)); //@line 241 "window.c"
 $24 = $21 * $23; //@line 241 "window.c"
 $25 = (~~(($24))); //@line 241 "window.c"
 $11 = $25; //@line 241 "window.c"
 $26 = $7; //@line 244 "window.c"
 $27 = $26 <= 0.0; //@line 244 "window.c"
 if ($27) {
  $28 = $5; //@line 245 "window.c"
  $29 = $6; //@line 245 "window.c"
  $30 = $8; //@line 245 "window.c"
  $31 = $9; //@line 245 "window.c"
  _FLAC__window_punchout_tukey($28,$29,0.05000000074505806,$30,$31); //@line 245 "window.c"
  STACKTOP = sp;return; //@line 268 "window.c"
 }
 $32 = $7; //@line 246 "window.c"
 $33 = $32 >= 1.0; //@line 246 "window.c"
 if ($33) {
  $34 = $5; //@line 247 "window.c"
  $35 = $6; //@line 247 "window.c"
  $36 = $8; //@line 247 "window.c"
  $37 = $9; //@line 247 "window.c"
  _FLAC__window_punchout_tukey($34,$35,0.94999998807907104,$36,$37); //@line 247 "window.c"
  STACKTOP = sp;return; //@line 268 "window.c"
 }
 $38 = $7; //@line 250 "window.c"
 $39 = $38 / 2.0; //@line 250 "window.c"
 $40 = $10; //@line 250 "window.c"
 $41 = (+($40|0)); //@line 250 "window.c"
 $42 = $39 * $41; //@line 250 "window.c"
 $43 = (~~(($42))); //@line 250 "window.c"
 $12 = $43; //@line 250 "window.c"
 $44 = $7; //@line 251 "window.c"
 $45 = $44 / 2.0; //@line 251 "window.c"
 $46 = $6; //@line 251 "window.c"
 $47 = $11; //@line 251 "window.c"
 $48 = (($46) - ($47))|0; //@line 251 "window.c"
 $49 = (+($48|0)); //@line 251 "window.c"
 $50 = $45 * $49; //@line 251 "window.c"
 $51 = (~~(($50))); //@line 251 "window.c"
 $13 = $51; //@line 251 "window.c"
 $14 = 0; //@line 253 "window.c"
 $15 = 1; //@line 253 "window.c"
 while(1) {
  $52 = $14; //@line 253 "window.c"
  $53 = $12; //@line 253 "window.c"
  $54 = ($52|0)<($53|0); //@line 253 "window.c"
  if (!($54)) {
   break;
  }
  $55 = $14; //@line 253 "window.c"
  $56 = $6; //@line 253 "window.c"
  $57 = ($55|0)<($56|0); //@line 253 "window.c"
  if (!($57)) {
   break;
  }
  $58 = $15; //@line 254 "window.c"
  $59 = (+($58|0)); //@line 254 "window.c"
  $60 = 3.1415926535897931 * $59; //@line 254 "window.c"
  $61 = $12; //@line 254 "window.c"
  $62 = (+($61|0)); //@line 254 "window.c"
  $63 = $60 / $62; //@line 254 "window.c"
  $64 = (+Math_cos((+$63))); //@line 254 "window.c"
  $65 = 0.5 * $64; //@line 254 "window.c"
  $66 = 0.5 - $65; //@line 254 "window.c"
  $67 = $66; //@line 254 "window.c"
  $68 = $5; //@line 254 "window.c"
  $69 = $14; //@line 254 "window.c"
  $70 = (($68) + ($69<<2)|0); //@line 254 "window.c"
  HEAPF32[$70>>2] = $67; //@line 254 "window.c"
  $71 = $14; //@line 253 "window.c"
  $72 = (($71) + 1)|0; //@line 253 "window.c"
  $14 = $72; //@line 253 "window.c"
  $73 = $15; //@line 253 "window.c"
  $74 = (($73) + 1)|0; //@line 253 "window.c"
  $15 = $74; //@line 253 "window.c"
 }
 while(1) {
  $75 = $14; //@line 255 "window.c"
  $76 = $10; //@line 255 "window.c"
  $77 = $12; //@line 255 "window.c"
  $78 = (($76) - ($77))|0; //@line 255 "window.c"
  $79 = ($75|0)<($78|0); //@line 255 "window.c"
  if (!($79)) {
   break;
  }
  $80 = $14; //@line 255 "window.c"
  $81 = $6; //@line 255 "window.c"
  $82 = ($80|0)<($81|0); //@line 255 "window.c"
  if (!($82)) {
   break;
  }
  $83 = $5; //@line 256 "window.c"
  $84 = $14; //@line 256 "window.c"
  $85 = (($83) + ($84<<2)|0); //@line 256 "window.c"
  HEAPF32[$85>>2] = 1.0; //@line 256 "window.c"
  $86 = $14; //@line 255 "window.c"
  $87 = (($86) + 1)|0; //@line 255 "window.c"
  $14 = $87; //@line 255 "window.c"
 }
 $88 = $12; //@line 257 "window.c"
 $15 = $88; //@line 257 "window.c"
 while(1) {
  $89 = $14; //@line 257 "window.c"
  $90 = $10; //@line 257 "window.c"
  $91 = ($89|0)<($90|0); //@line 257 "window.c"
  if (!($91)) {
   break;
  }
  $92 = $14; //@line 257 "window.c"
  $93 = $6; //@line 257 "window.c"
  $94 = ($92|0)<($93|0); //@line 257 "window.c"
  if (!($94)) {
   break;
  }
  $95 = $15; //@line 258 "window.c"
  $96 = (+($95|0)); //@line 258 "window.c"
  $97 = 3.1415926535897931 * $96; //@line 258 "window.c"
  $98 = $12; //@line 258 "window.c"
  $99 = (+($98|0)); //@line 258 "window.c"
  $100 = $97 / $99; //@line 258 "window.c"
  $101 = (+Math_cos((+$100))); //@line 258 "window.c"
  $102 = 0.5 * $101; //@line 258 "window.c"
  $103 = 0.5 - $102; //@line 258 "window.c"
  $104 = $103; //@line 258 "window.c"
  $105 = $5; //@line 258 "window.c"
  $106 = $14; //@line 258 "window.c"
  $107 = (($105) + ($106<<2)|0); //@line 258 "window.c"
  HEAPF32[$107>>2] = $104; //@line 258 "window.c"
  $108 = $14; //@line 257 "window.c"
  $109 = (($108) + 1)|0; //@line 257 "window.c"
  $14 = $109; //@line 257 "window.c"
  $110 = $15; //@line 257 "window.c"
  $111 = (($110) + -1)|0; //@line 257 "window.c"
  $15 = $111; //@line 257 "window.c"
 }
 while(1) {
  $112 = $14; //@line 259 "window.c"
  $113 = $11; //@line 259 "window.c"
  $114 = ($112|0)<($113|0); //@line 259 "window.c"
  if (!($114)) {
   break;
  }
  $115 = $14; //@line 259 "window.c"
  $116 = $6; //@line 259 "window.c"
  $117 = ($115|0)<($116|0); //@line 259 "window.c"
  if (!($117)) {
   break;
  }
  $118 = $5; //@line 260 "window.c"
  $119 = $14; //@line 260 "window.c"
  $120 = (($118) + ($119<<2)|0); //@line 260 "window.c"
  HEAPF32[$120>>2] = 0.0; //@line 260 "window.c"
  $121 = $14; //@line 259 "window.c"
  $122 = (($121) + 1)|0; //@line 259 "window.c"
  $14 = $122; //@line 259 "window.c"
 }
 $15 = 1; //@line 261 "window.c"
 while(1) {
  $123 = $14; //@line 261 "window.c"
  $124 = $11; //@line 261 "window.c"
  $125 = $13; //@line 261 "window.c"
  $126 = (($124) + ($125))|0; //@line 261 "window.c"
  $127 = ($123|0)<($126|0); //@line 261 "window.c"
  if (!($127)) {
   break;
  }
  $128 = $14; //@line 261 "window.c"
  $129 = $6; //@line 261 "window.c"
  $130 = ($128|0)<($129|0); //@line 261 "window.c"
  if (!($130)) {
   break;
  }
  $131 = $15; //@line 262 "window.c"
  $132 = (+($131|0)); //@line 262 "window.c"
  $133 = 3.1415926535897931 * $132; //@line 262 "window.c"
  $134 = $13; //@line 262 "window.c"
  $135 = (+($134|0)); //@line 262 "window.c"
  $136 = $133 / $135; //@line 262 "window.c"
  $137 = (+Math_cos((+$136))); //@line 262 "window.c"
  $138 = 0.5 * $137; //@line 262 "window.c"
  $139 = 0.5 - $138; //@line 262 "window.c"
  $140 = $139; //@line 262 "window.c"
  $141 = $5; //@line 262 "window.c"
  $142 = $14; //@line 262 "window.c"
  $143 = (($141) + ($142<<2)|0); //@line 262 "window.c"
  HEAPF32[$143>>2] = $140; //@line 262 "window.c"
  $144 = $14; //@line 261 "window.c"
  $145 = (($144) + 1)|0; //@line 261 "window.c"
  $14 = $145; //@line 261 "window.c"
  $146 = $15; //@line 261 "window.c"
  $147 = (($146) + 1)|0; //@line 261 "window.c"
  $15 = $147; //@line 261 "window.c"
 }
 while(1) {
  $148 = $14; //@line 263 "window.c"
  $149 = $6; //@line 263 "window.c"
  $150 = $13; //@line 263 "window.c"
  $151 = (($149) - ($150))|0; //@line 263 "window.c"
  $152 = ($148|0)<($151|0); //@line 263 "window.c"
  if (!($152)) {
   break;
  }
  $153 = $14; //@line 263 "window.c"
  $154 = $6; //@line 263 "window.c"
  $155 = ($153|0)<($154|0); //@line 263 "window.c"
  if (!($155)) {
   break;
  }
  $156 = $5; //@line 264 "window.c"
  $157 = $14; //@line 264 "window.c"
  $158 = (($156) + ($157<<2)|0); //@line 264 "window.c"
  HEAPF32[$158>>2] = 1.0; //@line 264 "window.c"
  $159 = $14; //@line 263 "window.c"
  $160 = (($159) + 1)|0; //@line 263 "window.c"
  $14 = $160; //@line 263 "window.c"
 }
 $161 = $13; //@line 265 "window.c"
 $15 = $161; //@line 265 "window.c"
 while(1) {
  $162 = $14; //@line 265 "window.c"
  $163 = $6; //@line 265 "window.c"
  $164 = ($162|0)<($163|0); //@line 265 "window.c"
  if (!($164)) {
   break;
  }
  $165 = $15; //@line 266 "window.c"
  $166 = (+($165|0)); //@line 266 "window.c"
  $167 = 3.1415926535897931 * $166; //@line 266 "window.c"
  $168 = $13; //@line 266 "window.c"
  $169 = (+($168|0)); //@line 266 "window.c"
  $170 = $167 / $169; //@line 266 "window.c"
  $171 = (+Math_cos((+$170))); //@line 266 "window.c"
  $172 = 0.5 * $171; //@line 266 "window.c"
  $173 = 0.5 - $172; //@line 266 "window.c"
  $174 = $173; //@line 266 "window.c"
  $175 = $5; //@line 266 "window.c"
  $176 = $14; //@line 266 "window.c"
  $177 = (($175) + ($176<<2)|0); //@line 266 "window.c"
  HEAPF32[$177>>2] = $174; //@line 266 "window.c"
  $178 = $14; //@line 265 "window.c"
  $179 = (($178) + 1)|0; //@line 265 "window.c"
  $14 = $179; //@line 265 "window.c"
  $180 = $15; //@line 265 "window.c"
  $181 = (($180) + -1)|0; //@line 265 "window.c"
  $15 = $181; //@line 265 "window.c"
 }
 STACKTOP = sp;return; //@line 268 "window.c"
}
function _FLAC__window_welch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3; //@line 272 "window.c"
 $9 = (($8) - 1)|0; //@line 272 "window.c"
 $4 = $9; //@line 272 "window.c"
 $10 = $4; //@line 273 "window.c"
 $11 = (+($10|0)); //@line 273 "window.c"
 $12 = $11 / 2.0; //@line 273 "window.c"
 $5 = $12; //@line 273 "window.c"
 $6 = 0; //@line 276 "window.c"
 while(1) {
  $13 = $6; //@line 276 "window.c"
  $14 = $4; //@line 276 "window.c"
  $15 = ($13|0)<=($14|0); //@line 276 "window.c"
  if (!($15)) {
   break;
  }
  $16 = $6; //@line 277 "window.c"
  $17 = (+($16|0)); //@line 277 "window.c"
  $18 = $5; //@line 277 "window.c"
  $19 = $17 - $18; //@line 277 "window.c"
  $20 = $5; //@line 277 "window.c"
  $21 = $19 / $20; //@line 277 "window.c"
  $7 = $21; //@line 277 "window.c"
  $22 = $7; //@line 278 "window.c"
  $23 = $7; //@line 278 "window.c"
  $24 = $22 * $23; //@line 278 "window.c"
  $25 = 1.0 - $24; //@line 278 "window.c"
  $26 = $25; //@line 278 "window.c"
  $27 = $2; //@line 278 "window.c"
  $28 = $6; //@line 278 "window.c"
  $29 = (($27) + ($28<<2)|0); //@line 278 "window.c"
  HEAPF32[$29>>2] = $26; //@line 278 "window.c"
  $30 = $6; //@line 276 "window.c"
  $31 = (($30) + 1)|0; //@line 276 "window.c"
  $6 = $31; //@line 276 "window.c"
 }
 STACKTOP = sp;return; //@line 280 "window.c"
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0;
 var $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i17$i = 0, $$pre$i208 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink325 = 0, $$sink326 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i207 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i213 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i214 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0;
 var $spec$select$i = 0, $spec$select$i205 = 0, $spec$select1$i = 0, $spec$select3$i = 0, $spec$select49$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[870]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (3520 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[870] = $24;
     } else {
      $25 = HEAP32[(3496)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(3488)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (3520 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[870] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(3496)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(3500)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (3520 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[870] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(3496)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(3488)>>2] = $84;
     HEAP32[(3500)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(3484)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (3784 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $spec$select$i = $150 ? $149 : $$0191$i;
      $spec$select1$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $151 = HEAP32[(3496)>>2]|0;
     $152 = ($151>>>0)>($$0190$i>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($153>>>0)>($$0190$i>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $173;$$1196$i$ph = $172;
        }
       } else {
        $$1194$i$ph = $170;$$1196$i$ph = $169;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$1194$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          break;
         } else {
          $$1194$i$be = $179;$$1196$i$be = $178;
         }
        } else {
         $$1194$i$be = $176;$$1196$i$be = $175;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $181 = ($151>>>0)>($$1196$i>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($151>>>0)>($161>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     L78: do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (3784 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       do {
        if ($187) {
         HEAP32[$185>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $188 = 1 << $184;
          $189 = $188 ^ -1;
          $190 = $108 & $189;
          HEAP32[(3484)>>2] = $190;
          break L78;
         }
        } else {
         $191 = HEAP32[(3496)>>2]|0;
         $192 = ($191>>>0)>($156>>>0);
         if ($192) {
          _abort();
          // unreachable;
         } else {
          $193 = ((($156)) + 16|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==($$0190$i|0);
          $196 = ((($156)) + 20|0);
          $$sink = $195 ? $193 : $196;
          HEAP32[$$sink>>2] = $$3$i;
          $197 = ($$3$i|0)==(0|0);
          if ($197) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[(3496)>>2]|0;
       $199 = ($198>>>0)>($$3$i>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($198>>>0)>($202>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(3496)>>2]|0;
        $211 = ($210>>>0)>($208>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(3500)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (3520 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $232 & $8;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $232 | $8;
        HEAP32[870] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(3496)>>2]|0;
        $239 = ($238>>>0)>($237>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(3488)>>2] = $$0191$i;
      HEAP32[(3500)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(3484)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0357$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0357$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0357$i = $274;
      }
     }
     $275 = (3784 + ($$0357$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L122: do {
      if ($277) {
       $$2353$i = 0;$$3$i203 = 0;$$3348$i = $249;
       label = 85;
      } else {
       $278 = ($$0357$i|0)==(31);
       $279 = $$0357$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0358$i = $282;$$0361$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 89;
          break L122;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0358$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond2$i = $294 | $295;
        $$1362$i = $or$cond2$i ? $$0361$i : $290;
        $296 = ($293|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($296) {
         $$2353$i = $$1362$i;$$3$i203 = $$1341$i;$$3348$i = $$1346$i;
         label = 85;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $297 = ($$2353$i|0)==(0|0);
      $298 = ($$3$i203|0)==(0|0);
      $or$cond$i = $297 & $298;
      if ($or$cond$i) {
       $299 = 2 << $$0357$i;
       $300 = (0 - ($299))|0;
       $301 = $299 | $300;
       $302 = $301 & $247;
       $303 = ($302|0)==(0);
       if ($303) {
        $$0197 = $246;
        break;
       }
       $304 = (0 - ($302))|0;
       $305 = $302 & $304;
       $306 = (($305) + -1)|0;
       $307 = $306 >>> 12;
       $308 = $307 & 16;
       $309 = $306 >>> $308;
       $310 = $309 >>> 5;
       $311 = $310 & 8;
       $312 = $311 | $308;
       $313 = $309 >>> $311;
       $314 = $313 >>> 2;
       $315 = $314 & 4;
       $316 = $312 | $315;
       $317 = $313 >>> $315;
       $318 = $317 >>> 1;
       $319 = $318 & 2;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 1;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = (($324) + ($325))|0;
       $327 = (3784 + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $$3$i203218 = 0;$$4355$i = $328;
      } else {
       $$3$i203218 = $$3$i203;$$4355$i = $$2353$i;
      }
      $329 = ($$4355$i|0)==(0|0);
      if ($329) {
       $$4$lcssa$i = $$3$i203218;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i203218;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $330 = ((($$535618$i)) + 4|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & -8;
       $333 = (($332) - ($246))|0;
       $334 = ($333>>>0)<($$434919$i>>>0);
       $spec$select$i205 = $334 ? $333 : $$434919$i;
       $spec$select3$i = $334 ? $$535618$i : $$420$i;
       $335 = ((($$535618$i)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0|0);
       if ($337) {
        $338 = ((($$535618$i)) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $341 = $339;
       } else {
        $341 = $336;
       }
       $340 = ($341|0)==(0|0);
       if ($340) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i205;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i205;$$535618$i = $341;
       }
      }
     }
     $342 = ($$4$lcssa$i|0)==(0|0);
     if ($342) {
      $$0197 = $246;
     } else {
      $343 = HEAP32[(3488)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($$4349$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(3496)>>2]|0;
       $347 = ($346>>>0)>($$4$lcssa$i>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($$4$lcssa$i) + ($246)|0);
       $349 = ($348>>>0)>($$4$lcssa$i>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($$4$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($$4$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($$4$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($$4$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($$4$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $368;$$1373$i$ph = $367;
          }
         } else {
          $$1369$i$ph = $365;$$1373$i$ph = $364;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $370 = ((($$1369$i)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = ((($$1369$i)) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            break;
           } else {
            $$1369$i$be = $374;$$1373$i$be = $373;
           }
          } else {
           $$1369$i$be = $371;$$1373$i$be = $370;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $376 = ($346>>>0)>($$1373$i>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1373$i>>2] = 0;
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $355 = ((($$4$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($346>>>0)>($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($$4$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($$4$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $$3371$i = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       L176: do {
        if ($377) {
         $469 = $247;
        } else {
         $378 = ((($$4$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (3784 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($$4$lcssa$i|0)==($381|0);
         do {
          if ($382) {
           HEAP32[$380>>2] = $$3371$i;
           $cond$i207 = ($$3371$i|0)==(0|0);
           if ($cond$i207) {
            $383 = 1 << $379;
            $384 = $383 ^ -1;
            $385 = $247 & $384;
            HEAP32[(3484)>>2] = $385;
            $469 = $385;
            break L176;
           }
          } else {
           $386 = HEAP32[(3496)>>2]|0;
           $387 = ($386>>>0)>($351>>>0);
           if ($387) {
            _abort();
            // unreachable;
           } else {
            $388 = ((($351)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ($389|0)==($$4$lcssa$i|0);
            $391 = ((($351)) + 20|0);
            $$sink325 = $390 ? $388 : $391;
            HEAP32[$$sink325>>2] = $$3371$i;
            $392 = ($$3371$i|0)==(0|0);
            if ($392) {
             $469 = $247;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $393 = HEAP32[(3496)>>2]|0;
         $394 = ($393>>>0)>($$3371$i>>>0);
         if ($394) {
          _abort();
          // unreachable;
         }
         $395 = ((($$3371$i)) + 24|0);
         HEAP32[$395>>2] = $351;
         $396 = ((($$4$lcssa$i)) + 16|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = ($397|0)==(0|0);
         do {
          if (!($398)) {
           $399 = ($393>>>0)>($397>>>0);
           if ($399) {
            _abort();
            // unreachable;
           } else {
            $400 = ((($$3371$i)) + 16|0);
            HEAP32[$400>>2] = $397;
            $401 = ((($397)) + 24|0);
            HEAP32[$401>>2] = $$3371$i;
            break;
           }
          }
         } while(0);
         $402 = ((($$4$lcssa$i)) + 20|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         if ($404) {
          $469 = $247;
         } else {
          $405 = HEAP32[(3496)>>2]|0;
          $406 = ($405>>>0)>($403>>>0);
          if ($406) {
           _abort();
           // unreachable;
          } else {
           $407 = ((($$3371$i)) + 20|0);
           HEAP32[$407>>2] = $403;
           $408 = ((($403)) + 24|0);
           HEAP32[$408>>2] = $$3371$i;
           $469 = $247;
           break;
          }
         }
        }
       } while(0);
       $409 = ($$4349$lcssa$i>>>0)<(16);
       L200: do {
        if ($409) {
         $410 = (($$4349$lcssa$i) + ($246))|0;
         $411 = $410 | 3;
         $412 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$412>>2] = $411;
         $413 = (($$4$lcssa$i) + ($410)|0);
         $414 = ((($413)) + 4|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $$4349$lcssa$i | 1;
         $420 = ((($348)) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = (($348) + ($$4349$lcssa$i)|0);
         HEAP32[$421>>2] = $$4349$lcssa$i;
         $422 = $$4349$lcssa$i >>> 3;
         $423 = ($$4349$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (3520 + ($424<<2)|0);
          $426 = HEAP32[870]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[870] = $430;
           $$pre$i208 = ((($425)) + 8|0);
           $$0367$i = $425;$$pre$phi$i209Z2D = $$pre$i208;
          } else {
           $431 = ((($425)) + 8|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(3496)>>2]|0;
           $434 = ($433>>>0)>($432>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$0367$i = $432;$$pre$phi$i209Z2D = $431;
           }
          }
          HEAP32[$$pre$phi$i209Z2D>>2] = $348;
          $435 = ((($$0367$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $436 = ((($348)) + 8|0);
          HEAP32[$436>>2] = $$0367$i;
          $437 = ((($348)) + 12|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $$4349$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $$0360$i = 0;
         } else {
          $440 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($440) {
           $$0360$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $$4349$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $$0360$i = $462;
          }
         }
         $463 = (3784 + ($$0360$i<<2)|0);
         $464 = ((($348)) + 28|0);
         HEAP32[$464>>2] = $$0360$i;
         $465 = ((($348)) + 16|0);
         $466 = ((($465)) + 4|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = 1 << $$0360$i;
         $468 = $469 & $467;
         $470 = ($468|0)==(0);
         if ($470) {
          $471 = $469 | $467;
          HEAP32[(3484)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $472 = ((($348)) + 24|0);
          HEAP32[$472>>2] = $463;
          $473 = ((($348)) + 12|0);
          HEAP32[$473>>2] = $348;
          $474 = ((($348)) + 8|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($$4349$lcssa$i|0);
         L218: do {
          if ($479) {
           $$0343$lcssa$i = $475;
          } else {
           $480 = ($$0360$i|0)==(31);
           $481 = $$0360$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $$4349$lcssa$i << $483;
           $$034217$i = $484;$$034316$i = $475;
           while(1) {
            $491 = $$034217$i >>> 31;
            $492 = (((($$034316$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $$034217$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($$4349$lcssa$i|0);
            if ($490) {
             $$0343$lcssa$i = $487;
             break L218;
            } else {
             $$034217$i = $485;$$034316$i = $487;
            }
           }
           $494 = HEAP32[(3496)>>2]|0;
           $495 = ($494>>>0)>($492>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $496 = ((($348)) + 24|0);
            HEAP32[$496>>2] = $$034316$i;
            $497 = ((($348)) + 12|0);
            HEAP32[$497>>2] = $348;
            $498 = ((($348)) + 8|0);
            HEAP32[$498>>2] = $348;
            break L200;
           }
          }
         } while(0);
         $499 = ((($$0343$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(3496)>>2]|0;
         $502 = ($501>>>0)<=($$0343$lcssa$i>>>0);
         $503 = ($501>>>0)<=($500>>>0);
         $504 = $503 & $502;
         if ($504) {
          $505 = ((($500)) + 12|0);
          HEAP32[$505>>2] = $348;
          HEAP32[$499>>2] = $348;
          $506 = ((($348)) + 8|0);
          HEAP32[$506>>2] = $500;
          $507 = ((($348)) + 12|0);
          HEAP32[$507>>2] = $$0343$lcssa$i;
          $508 = ((($348)) + 24|0);
          HEAP32[$508>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $509 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $509;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $510 = HEAP32[(3488)>>2]|0;
 $511 = ($510>>>0)<($$0197>>>0);
 if (!($511)) {
  $512 = (($510) - ($$0197))|0;
  $513 = HEAP32[(3500)>>2]|0;
  $514 = ($512>>>0)>(15);
  if ($514) {
   $515 = (($513) + ($$0197)|0);
   HEAP32[(3500)>>2] = $515;
   HEAP32[(3488)>>2] = $512;
   $516 = $512 | 1;
   $517 = ((($515)) + 4|0);
   HEAP32[$517>>2] = $516;
   $518 = (($513) + ($510)|0);
   HEAP32[$518>>2] = $512;
   $519 = $$0197 | 3;
   $520 = ((($513)) + 4|0);
   HEAP32[$520>>2] = $519;
  } else {
   HEAP32[(3488)>>2] = 0;
   HEAP32[(3500)>>2] = 0;
   $521 = $510 | 3;
   $522 = ((($513)) + 4|0);
   HEAP32[$522>>2] = $521;
   $523 = (($513) + ($510)|0);
   $524 = ((($523)) + 4|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = ((($513)) + 8|0);
  $$0 = $527;
  STACKTOP = sp;return ($$0|0);
 }
 $528 = HEAP32[(3492)>>2]|0;
 $529 = ($528>>>0)>($$0197>>>0);
 if ($529) {
  $530 = (($528) - ($$0197))|0;
  HEAP32[(3492)>>2] = $530;
  $531 = HEAP32[(3504)>>2]|0;
  $532 = (($531) + ($$0197)|0);
  HEAP32[(3504)>>2] = $532;
  $533 = $530 | 1;
  $534 = ((($532)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = $$0197 | 3;
  $536 = ((($531)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = ((($531)) + 8|0);
  $$0 = $537;
  STACKTOP = sp;return ($$0|0);
 }
 $538 = HEAP32[988]|0;
 $539 = ($538|0)==(0);
 if ($539) {
  HEAP32[(3960)>>2] = 4096;
  HEAP32[(3956)>>2] = 4096;
  HEAP32[(3964)>>2] = -1;
  HEAP32[(3968)>>2] = -1;
  HEAP32[(3972)>>2] = 0;
  HEAP32[(3924)>>2] = 0;
  $540 = $1;
  $541 = $540 & -16;
  $542 = $541 ^ 1431655768;
  HEAP32[988] = $542;
  $546 = 4096;
 } else {
  $$pre$i210 = HEAP32[(3960)>>2]|0;
  $546 = $$pre$i210;
 }
 $543 = (($$0197) + 48)|0;
 $544 = (($$0197) + 47)|0;
 $545 = (($546) + ($544))|0;
 $547 = (0 - ($546))|0;
 $548 = $545 & $547;
 $549 = ($548>>>0)>($$0197>>>0);
 if (!($549)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $550 = HEAP32[(3920)>>2]|0;
 $551 = ($550|0)==(0);
 if (!($551)) {
  $552 = HEAP32[(3912)>>2]|0;
  $553 = (($552) + ($548))|0;
  $554 = ($553>>>0)<=($552>>>0);
  $555 = ($553>>>0)>($550>>>0);
  $or$cond1$i = $554 | $555;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $556 = HEAP32[(3924)>>2]|0;
 $557 = $556 & 4;
 $558 = ($557|0)==(0);
 L257: do {
  if ($558) {
   $559 = HEAP32[(3504)>>2]|0;
   $560 = ($559|0)==(0|0);
   L259: do {
    if ($560) {
     label = 173;
    } else {
     $$0$i$i = (3928);
     while(1) {
      $561 = HEAP32[$$0$i$i>>2]|0;
      $562 = ($561>>>0)>($559>>>0);
      if (!($562)) {
       $563 = ((($$0$i$i)) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($561) + ($564)|0);
       $566 = ($565>>>0)>($559>>>0);
       if ($566) {
        break;
       }
      }
      $567 = ((($$0$i$i)) + 8|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 173;
       break L259;
      } else {
       $$0$i$i = $568;
      }
     }
     $592 = (($545) - ($528))|0;
     $593 = $592 & $547;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = ((($$0$i$i)) + 4|0);
      $596 = (_sbrk(($593|0))|0);
      $597 = HEAP32[$$0$i$i>>2]|0;
      $598 = HEAP32[$595>>2]|0;
      $599 = (($597) + ($598)|0);
      $600 = ($596|0)==($599|0);
      if ($600) {
       $601 = ($596|0)==((-1)|0);
       if ($601) {
        $$2234243136$i = $593;
       } else {
        $$723947$i = $593;$$748$i = $596;
        label = 190;
        break L257;
       }
      } else {
       $$2247$ph$i = $596;$$2253$ph$i = $593;
       label = 181;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $570 = (_sbrk(0)|0);
     $571 = ($570|0)==((-1)|0);
     if ($571) {
      $$2234243136$i = 0;
     } else {
      $572 = $570;
      $573 = HEAP32[(3956)>>2]|0;
      $574 = (($573) + -1)|0;
      $575 = $574 & $572;
      $576 = ($575|0)==(0);
      $577 = (($574) + ($572))|0;
      $578 = (0 - ($573))|0;
      $579 = $577 & $578;
      $580 = (($579) - ($572))|0;
      $581 = $576 ? 0 : $580;
      $spec$select49$i = (($581) + ($548))|0;
      $582 = HEAP32[(3912)>>2]|0;
      $583 = (($spec$select49$i) + ($582))|0;
      $584 = ($spec$select49$i>>>0)>($$0197>>>0);
      $585 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i213 = $584 & $585;
      if ($or$cond$i213) {
       $586 = HEAP32[(3920)>>2]|0;
       $587 = ($586|0)==(0);
       if (!($587)) {
        $588 = ($583>>>0)<=($582>>>0);
        $589 = ($583>>>0)>($586>>>0);
        $or$cond2$i214 = $588 | $589;
        if ($or$cond2$i214) {
         $$2234243136$i = 0;
         break;
        }
       }
       $590 = (_sbrk(($spec$select49$i|0))|0);
       $591 = ($590|0)==($570|0);
       if ($591) {
        $$723947$i = $spec$select49$i;$$748$i = $570;
        label = 190;
        break L257;
       } else {
        $$2247$ph$i = $590;$$2253$ph$i = $spec$select49$i;
        label = 181;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $602 = (0 - ($$2253$ph$i))|0;
     $603 = ($$2247$ph$i|0)!=((-1)|0);
     $604 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $604 & $603;
     $605 = ($543>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $605 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $615 = ($$2247$ph$i|0)==((-1)|0);
      if ($615) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 190;
       break L257;
      }
     }
     $606 = HEAP32[(3960)>>2]|0;
     $607 = (($544) - ($$2253$ph$i))|0;
     $608 = (($607) + ($606))|0;
     $609 = (0 - ($606))|0;
     $610 = $608 & $609;
     $611 = ($610>>>0)<(2147483647);
     if (!($611)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
     $612 = (_sbrk(($610|0))|0);
     $613 = ($612|0)==((-1)|0);
     if ($613) {
      (_sbrk(($602|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $614 = (($610) + ($$2253$ph$i))|0;
      $$723947$i = $614;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $616 = HEAP32[(3924)>>2]|0;
   $617 = $616 | 4;
   HEAP32[(3924)>>2] = $617;
   $$4236$i = $$2234243136$i;
   label = 188;
  } else {
   $$4236$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $618 = ($548>>>0)<(2147483647);
  if ($618) {
   $619 = (_sbrk(($548|0))|0);
   $620 = (_sbrk(0)|0);
   $621 = ($619|0)!=((-1)|0);
   $622 = ($620|0)!=((-1)|0);
   $or$cond5$i = $621 & $622;
   $623 = ($619>>>0)<($620>>>0);
   $or$cond8$i = $623 & $or$cond5$i;
   $624 = $620;
   $625 = $619;
   $626 = (($624) - ($625))|0;
   $627 = (($$0197) + 40)|0;
   $628 = ($626>>>0)>($627>>>0);
   $spec$select9$i = $628 ? $626 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $629 = ($619|0)==((-1)|0);
   $not$$i = $628 ^ 1;
   $630 = $629 | $not$$i;
   $or$cond50$i = $630 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $619;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $631 = HEAP32[(3912)>>2]|0;
  $632 = (($631) + ($$723947$i))|0;
  HEAP32[(3912)>>2] = $632;
  $633 = HEAP32[(3916)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(3916)>>2] = $632;
  }
  $635 = HEAP32[(3504)>>2]|0;
  $636 = ($635|0)==(0|0);
  L294: do {
   if ($636) {
    $637 = HEAP32[(3496)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($$748$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(3496)>>2] = $$748$i;
    }
    HEAP32[(3928)>>2] = $$748$i;
    HEAP32[(3932)>>2] = $$723947$i;
    HEAP32[(3940)>>2] = 0;
    $640 = HEAP32[988]|0;
    HEAP32[(3516)>>2] = $640;
    HEAP32[(3512)>>2] = -1;
    HEAP32[(3532)>>2] = (3520);
    HEAP32[(3528)>>2] = (3520);
    HEAP32[(3540)>>2] = (3528);
    HEAP32[(3536)>>2] = (3528);
    HEAP32[(3548)>>2] = (3536);
    HEAP32[(3544)>>2] = (3536);
    HEAP32[(3556)>>2] = (3544);
    HEAP32[(3552)>>2] = (3544);
    HEAP32[(3564)>>2] = (3552);
    HEAP32[(3560)>>2] = (3552);
    HEAP32[(3572)>>2] = (3560);
    HEAP32[(3568)>>2] = (3560);
    HEAP32[(3580)>>2] = (3568);
    HEAP32[(3576)>>2] = (3568);
    HEAP32[(3588)>>2] = (3576);
    HEAP32[(3584)>>2] = (3576);
    HEAP32[(3596)>>2] = (3584);
    HEAP32[(3592)>>2] = (3584);
    HEAP32[(3604)>>2] = (3592);
    HEAP32[(3600)>>2] = (3592);
    HEAP32[(3612)>>2] = (3600);
    HEAP32[(3608)>>2] = (3600);
    HEAP32[(3620)>>2] = (3608);
    HEAP32[(3616)>>2] = (3608);
    HEAP32[(3628)>>2] = (3616);
    HEAP32[(3624)>>2] = (3616);
    HEAP32[(3636)>>2] = (3624);
    HEAP32[(3632)>>2] = (3624);
    HEAP32[(3644)>>2] = (3632);
    HEAP32[(3640)>>2] = (3632);
    HEAP32[(3652)>>2] = (3640);
    HEAP32[(3648)>>2] = (3640);
    HEAP32[(3660)>>2] = (3648);
    HEAP32[(3656)>>2] = (3648);
    HEAP32[(3668)>>2] = (3656);
    HEAP32[(3664)>>2] = (3656);
    HEAP32[(3676)>>2] = (3664);
    HEAP32[(3672)>>2] = (3664);
    HEAP32[(3684)>>2] = (3672);
    HEAP32[(3680)>>2] = (3672);
    HEAP32[(3692)>>2] = (3680);
    HEAP32[(3688)>>2] = (3680);
    HEAP32[(3700)>>2] = (3688);
    HEAP32[(3696)>>2] = (3688);
    HEAP32[(3708)>>2] = (3696);
    HEAP32[(3704)>>2] = (3696);
    HEAP32[(3716)>>2] = (3704);
    HEAP32[(3712)>>2] = (3704);
    HEAP32[(3724)>>2] = (3712);
    HEAP32[(3720)>>2] = (3712);
    HEAP32[(3732)>>2] = (3720);
    HEAP32[(3728)>>2] = (3720);
    HEAP32[(3740)>>2] = (3728);
    HEAP32[(3736)>>2] = (3728);
    HEAP32[(3748)>>2] = (3736);
    HEAP32[(3744)>>2] = (3736);
    HEAP32[(3756)>>2] = (3744);
    HEAP32[(3752)>>2] = (3744);
    HEAP32[(3764)>>2] = (3752);
    HEAP32[(3760)>>2] = (3752);
    HEAP32[(3772)>>2] = (3760);
    HEAP32[(3768)>>2] = (3760);
    HEAP32[(3780)>>2] = (3768);
    HEAP32[(3776)>>2] = (3768);
    $641 = (($$723947$i) + -40)|0;
    $642 = ((($$748$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$748$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(3504)>>2] = $649;
    HEAP32[(3492)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($$748$i) + ($641)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(3968)>>2]|0;
    HEAP32[(3508)>>2] = $655;
   } else {
    $$024372$i = (3928);
    while(1) {
     $656 = HEAP32[$$024372$i>>2]|0;
     $657 = ((($$024372$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$748$i|0)==($659|0);
     if ($660) {
      label = 199;
      break;
     }
     $661 = ((($$024372$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024372$i = $662;
     }
    }
    if ((label|0) == 199) {
     $664 = ((($$024372$i)) + 4|0);
     $665 = ((($$024372$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($656>>>0)<=($635>>>0);
      $670 = ($$748$i>>>0)>($635>>>0);
      $or$cond51$i = $670 & $669;
      if ($or$cond51$i) {
       $671 = (($658) + ($$723947$i))|0;
       HEAP32[$664>>2] = $671;
       $672 = HEAP32[(3492)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($635)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($635) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(3504)>>2] = $681;
       HEAP32[(3492)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($635) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(3968)>>2]|0;
       HEAP32[(3508)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(3496)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(3496)>>2] = $$748$i;
     $753 = $$748$i;
    } else {
     $753 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (3928);
    while(1) {
     $691 = HEAP32[$$124471$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 207;
      break;
     }
     $693 = ((($$124471$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      break;
     } else {
      $$124471$i = $694;
     }
    }
    if ((label|0) == 207) {
     $696 = ((($$124471$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $700 = ((($$124471$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($635|0)==($718|0);
      L317: do {
       if ($726) {
        $727 = HEAP32[(3492)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(3492)>>2] = $728;
        HEAP32[(3504)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(3500)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(3488)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(3488)>>2] = $734;
         HEAP32[(3500)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L325: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (3520 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $752 = ($753>>>0)>($746>>>0);
             if ($752) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[870]|0;
            $761 = $760 & $759;
            HEAP32[870] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre16$i$i = ((($748)) + 8|0);
             $$pre$phi17$i$iZ2D = $$pre16$i$i;
            } else {
             $763 = ($753>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi17$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi17$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i$ph = $786;$$1292$i$i$ph = $782;
              }
             } else {
              $$1290$i$i$ph = $784;$$1292$i$i$ph = $783;
             }
             $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
             while(1) {
              $788 = ((($$1290$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $791 = ((($$1290$i$i)) + 16|0);
               $792 = HEAP32[$791>>2]|0;
               $793 = ($792|0)==(0|0);
               if ($793) {
                break;
               } else {
                $$1290$i$i$be = $792;$$1292$i$i$be = $791;
               }
              } else {
               $$1290$i$i$be = $789;$$1292$i$i$be = $788;
              }
              $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
             }
             $794 = ($753>>>0)>($$1292$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($753>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (3784 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(3484)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(3484)>>2] = $804;
             break L325;
            } else {
             $805 = HEAP32[(3496)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)==($718|0);
              $810 = ((($769)) + 20|0);
              $$sink326 = $809 ? $807 : $810;
              HEAP32[$$sink326>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(3496)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(3496)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i16$i = $828;$$0286$i$i = $829;
        } else {
         $$0$i16$i = $718;$$0286$i$i = $723;
        }
        $830 = ((($$0$i16$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0286$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0286$i$i)|0);
        HEAP32[$835>>2] = $$0286$i$i;
        $836 = $$0286$i$i >>> 3;
        $837 = ($$0286$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (3520 + ($838<<2)|0);
         $840 = HEAP32[870]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[870] = $844;
           $$pre$i17$i = ((($839)) + 8|0);
           $$0294$i$i = $839;$$pre$phi$i18$iZ2D = $$pre$i17$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(3496)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0294$i$i = $846;$$pre$phi$i18$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $722;
         $849 = ((($$0294$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0294$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $$0286$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0295$i$i = 0;
         } else {
          $854 = ($$0286$i$i>>>0)>(16777215);
          if ($854) {
           $$0295$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $$0286$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0295$i$i = $876;
         }
        } while(0);
        $877 = (3784 + ($$0295$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0295$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(3484)>>2]|0;
        $882 = 1 << $$0295$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(3484)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ((($889)) + 4|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = $891 & -8;
        $893 = ($892|0)==($$0286$i$i|0);
        L410: do {
         if ($893) {
          $$0288$lcssa$i$i = $889;
         } else {
          $894 = ($$0295$i$i|0)==(31);
          $895 = $$0295$i$i >>> 1;
          $896 = (25 - ($895))|0;
          $897 = $894 ? 0 : $896;
          $898 = $$0286$i$i << $897;
          $$028711$i$i = $898;$$028810$i$i = $889;
          while(1) {
           $905 = $$028711$i$i >>> 31;
           $906 = (((($$028810$i$i)) + 16|0) + ($905<<2)|0);
           $901 = HEAP32[$906>>2]|0;
           $907 = ($901|0)==(0|0);
           if ($907) {
            break;
           }
           $899 = $$028711$i$i << 1;
           $900 = ((($901)) + 4|0);
           $902 = HEAP32[$900>>2]|0;
           $903 = $902 & -8;
           $904 = ($903|0)==($$0286$i$i|0);
           if ($904) {
            $$0288$lcssa$i$i = $901;
            break L410;
           } else {
            $$028711$i$i = $899;$$028810$i$i = $901;
           }
          }
          $908 = HEAP32[(3496)>>2]|0;
          $909 = ($908>>>0)>($906>>>0);
          if ($909) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$906>>2] = $722;
           $910 = ((($722)) + 24|0);
           HEAP32[$910>>2] = $$028810$i$i;
           $911 = ((($722)) + 12|0);
           HEAP32[$911>>2] = $722;
           $912 = ((($722)) + 8|0);
           HEAP32[$912>>2] = $722;
           break L317;
          }
         }
        } while(0);
        $913 = ((($$0288$lcssa$i$i)) + 8|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = HEAP32[(3496)>>2]|0;
        $916 = ($915>>>0)<=($$0288$lcssa$i$i>>>0);
        $917 = ($915>>>0)<=($914>>>0);
        $918 = $917 & $916;
        if ($918) {
         $919 = ((($914)) + 12|0);
         HEAP32[$919>>2] = $722;
         HEAP32[$913>>2] = $722;
         $920 = ((($722)) + 8|0);
         HEAP32[$920>>2] = $914;
         $921 = ((($722)) + 12|0);
         HEAP32[$921>>2] = $$0288$lcssa$i$i;
         $922 = ((($722)) + 24|0);
         HEAP32[$922>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $1059 = ((($710)) + 8|0);
      $$0 = $1059;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (3928);
    while(1) {
     $923 = HEAP32[$$0$i$i$i>>2]|0;
     $924 = ($923>>>0)>($635>>>0);
     if (!($924)) {
      $925 = ((($$0$i$i$i)) + 4|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = (($923) + ($926)|0);
      $928 = ($927>>>0)>($635>>>0);
      if ($928) {
       break;
      }
     }
     $929 = ((($$0$i$i$i)) + 8|0);
     $930 = HEAP32[$929>>2]|0;
     $$0$i$i$i = $930;
    }
    $931 = ((($927)) + -47|0);
    $932 = ((($931)) + 8|0);
    $933 = $932;
    $934 = $933 & 7;
    $935 = ($934|0)==(0);
    $936 = (0 - ($933))|0;
    $937 = $936 & 7;
    $938 = $935 ? 0 : $937;
    $939 = (($931) + ($938)|0);
    $940 = ((($635)) + 16|0);
    $941 = ($939>>>0)<($940>>>0);
    $942 = $941 ? $635 : $939;
    $943 = ((($942)) + 8|0);
    $944 = ((($942)) + 24|0);
    $945 = (($$723947$i) + -40)|0;
    $946 = ((($$748$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($$748$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(3504)>>2] = $953;
    HEAP32[(3492)>>2] = $954;
    $955 = $954 | 1;
    $956 = ((($953)) + 4|0);
    HEAP32[$956>>2] = $955;
    $957 = (($$748$i) + ($945)|0);
    $958 = ((($957)) + 4|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[(3968)>>2]|0;
    HEAP32[(3508)>>2] = $959;
    $960 = ((($942)) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$943>>2]=HEAP32[(3928)>>2]|0;HEAP32[$943+4>>2]=HEAP32[(3928)+4>>2]|0;HEAP32[$943+8>>2]=HEAP32[(3928)+8>>2]|0;HEAP32[$943+12>>2]=HEAP32[(3928)+12>>2]|0;
    HEAP32[(3928)>>2] = $$748$i;
    HEAP32[(3932)>>2] = $$723947$i;
    HEAP32[(3940)>>2] = 0;
    HEAP32[(3936)>>2] = $943;
    $962 = $944;
    while(1) {
     $961 = ((($962)) + 4|0);
     HEAP32[$961>>2] = 7;
     $963 = ((($962)) + 8|0);
     $964 = ($963>>>0)<($927>>>0);
     if ($964) {
      $962 = $961;
     } else {
      break;
     }
    }
    $965 = ($942|0)==($635|0);
    if (!($965)) {
     $966 = $942;
     $967 = $635;
     $968 = (($966) - ($967))|0;
     $969 = HEAP32[$960>>2]|0;
     $970 = $969 & -2;
     HEAP32[$960>>2] = $970;
     $971 = $968 | 1;
     $972 = ((($635)) + 4|0);
     HEAP32[$972>>2] = $971;
     HEAP32[$942>>2] = $968;
     $973 = $968 >>> 3;
     $974 = ($968>>>0)<(256);
     if ($974) {
      $975 = $973 << 1;
      $976 = (3520 + ($975<<2)|0);
      $977 = HEAP32[870]|0;
      $978 = 1 << $973;
      $979 = $977 & $978;
      $980 = ($979|0)==(0);
      if ($980) {
       $981 = $977 | $978;
       HEAP32[870] = $981;
       $$pre$i$i = ((($976)) + 8|0);
       $$0211$i$i = $976;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $982 = ((($976)) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = HEAP32[(3496)>>2]|0;
       $985 = ($984>>>0)>($983>>>0);
       if ($985) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $983;$$pre$phi$i$iZ2D = $982;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $986 = ((($$0211$i$i)) + 12|0);
      HEAP32[$986>>2] = $635;
      $987 = ((($635)) + 8|0);
      HEAP32[$987>>2] = $$0211$i$i;
      $988 = ((($635)) + 12|0);
      HEAP32[$988>>2] = $976;
      break;
     }
     $989 = $968 >>> 8;
     $990 = ($989|0)==(0);
     if ($990) {
      $$0212$i$i = 0;
     } else {
      $991 = ($968>>>0)>(16777215);
      if ($991) {
       $$0212$i$i = 31;
      } else {
       $992 = (($989) + 1048320)|0;
       $993 = $992 >>> 16;
       $994 = $993 & 8;
       $995 = $989 << $994;
       $996 = (($995) + 520192)|0;
       $997 = $996 >>> 16;
       $998 = $997 & 4;
       $999 = $998 | $994;
       $1000 = $995 << $998;
       $1001 = (($1000) + 245760)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 2;
       $1004 = $999 | $1003;
       $1005 = (14 - ($1004))|0;
       $1006 = $1000 << $1003;
       $1007 = $1006 >>> 15;
       $1008 = (($1005) + ($1007))|0;
       $1009 = $1008 << 1;
       $1010 = (($1008) + 7)|0;
       $1011 = $968 >>> $1010;
       $1012 = $1011 & 1;
       $1013 = $1012 | $1009;
       $$0212$i$i = $1013;
      }
     }
     $1014 = (3784 + ($$0212$i$i<<2)|0);
     $1015 = ((($635)) + 28|0);
     HEAP32[$1015>>2] = $$0212$i$i;
     $1016 = ((($635)) + 20|0);
     HEAP32[$1016>>2] = 0;
     HEAP32[$940>>2] = 0;
     $1017 = HEAP32[(3484)>>2]|0;
     $1018 = 1 << $$0212$i$i;
     $1019 = $1017 & $1018;
     $1020 = ($1019|0)==(0);
     if ($1020) {
      $1021 = $1017 | $1018;
      HEAP32[(3484)>>2] = $1021;
      HEAP32[$1014>>2] = $635;
      $1022 = ((($635)) + 24|0);
      HEAP32[$1022>>2] = $1014;
      $1023 = ((($635)) + 12|0);
      HEAP32[$1023>>2] = $635;
      $1024 = ((($635)) + 8|0);
      HEAP32[$1024>>2] = $635;
      break;
     }
     $1025 = HEAP32[$1014>>2]|0;
     $1026 = ((($1025)) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 & -8;
     $1029 = ($1028|0)==($968|0);
     L451: do {
      if ($1029) {
       $$0207$lcssa$i$i = $1025;
      } else {
       $1030 = ($$0212$i$i|0)==(31);
       $1031 = $$0212$i$i >>> 1;
       $1032 = (25 - ($1031))|0;
       $1033 = $1030 ? 0 : $1032;
       $1034 = $968 << $1033;
       $$02065$i$i = $1034;$$02074$i$i = $1025;
       while(1) {
        $1041 = $$02065$i$i >>> 31;
        $1042 = (((($$02074$i$i)) + 16|0) + ($1041<<2)|0);
        $1037 = HEAP32[$1042>>2]|0;
        $1043 = ($1037|0)==(0|0);
        if ($1043) {
         break;
        }
        $1035 = $$02065$i$i << 1;
        $1036 = ((($1037)) + 4|0);
        $1038 = HEAP32[$1036>>2]|0;
        $1039 = $1038 & -8;
        $1040 = ($1039|0)==($968|0);
        if ($1040) {
         $$0207$lcssa$i$i = $1037;
         break L451;
        } else {
         $$02065$i$i = $1035;$$02074$i$i = $1037;
        }
       }
       $1044 = HEAP32[(3496)>>2]|0;
       $1045 = ($1044>>>0)>($1042>>>0);
       if ($1045) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1042>>2] = $635;
        $1046 = ((($635)) + 24|0);
        HEAP32[$1046>>2] = $$02074$i$i;
        $1047 = ((($635)) + 12|0);
        HEAP32[$1047>>2] = $635;
        $1048 = ((($635)) + 8|0);
        HEAP32[$1048>>2] = $635;
        break L294;
       }
      }
     } while(0);
     $1049 = ((($$0207$lcssa$i$i)) + 8|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = HEAP32[(3496)>>2]|0;
     $1052 = ($1051>>>0)<=($$0207$lcssa$i$i>>>0);
     $1053 = ($1051>>>0)<=($1050>>>0);
     $1054 = $1053 & $1052;
     if ($1054) {
      $1055 = ((($1050)) + 12|0);
      HEAP32[$1055>>2] = $635;
      HEAP32[$1049>>2] = $635;
      $1056 = ((($635)) + 8|0);
      HEAP32[$1056>>2] = $1050;
      $1057 = ((($635)) + 12|0);
      HEAP32[$1057>>2] = $$0207$lcssa$i$i;
      $1058 = ((($635)) + 24|0);
      HEAP32[$1058>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(3492)>>2]|0;
  $1061 = ($1060>>>0)>($$0197>>>0);
  if ($1061) {
   $1062 = (($1060) - ($$0197))|0;
   HEAP32[(3492)>>2] = $1062;
   $1063 = HEAP32[(3504)>>2]|0;
   $1064 = (($1063) + ($$0197)|0);
   HEAP32[(3504)>>2] = $1064;
   $1065 = $1062 | 1;
   $1066 = ((($1064)) + 4|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $$0197 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $$0 = $1069;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(3496)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(3500)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;$114 = $16;
     break;
    }
    $109 = (($16) + ($17)|0);
    $110 = ((($16)) + 4|0);
    $111 = $17 | 1;
    $112 = $106 & -2;
    HEAP32[(3488)>>2] = $17;
    HEAP32[$105>>2] = $112;
    HEAP32[$110>>2] = $111;
    HEAP32[$109>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (3520 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[870]|0;
     $38 = $37 & $36;
     HEAP32[870] = $38;
     $$1 = $16;$$1380 = $17;$114 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre445 = ((($26)) + 8|0);
     $$pre$phi446Z2D = $$pre445;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi446Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi446Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;$114 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385$ph = $63;$$1388$ph = $59;
      }
     } else {
      $$1385$ph = $61;$$1388$ph = $60;
     }
     $$1385 = $$1385$ph;$$1388 = $$1388$ph;
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = ((($$1385)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        break;
       } else {
        $$1385$be = $69;$$1388$be = $68;
       }
      } else {
       $$1385$be = $66;$$1388$be = $65;
      }
      $$1385 = $$1385$be;$$1388 = $$1388$be;
     }
     $71 = ($3>>>0)>($$1388>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;$114 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (3784 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond419 = ($$3|0)==(0|0);
      if ($cond419) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(3484)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(3484)>>2] = $81;
       $$1 = $16;$$1380 = $17;$114 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(3496)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==($16|0);
       $87 = ((($46)) + 20|0);
       $$sink = $86 ? $84 : $87;
       HEAP32[$$sink>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1380 = $17;$114 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(3496)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;$114 = $16;
    } else {
     $101 = HEAP32[(3496)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;$114 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;$114 = $2;
  }
 } while(0);
 $113 = ($114>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(3504)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(3492)>>2]|0;
   $124 = (($123) + ($$1380))|0;
   HEAP32[(3492)>>2] = $124;
   HEAP32[(3504)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(3500)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(3500)>>2] = 0;
   HEAP32[(3488)>>2] = 0;
   return;
  }
  $129 = HEAP32[(3500)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(3488)>>2]|0;
   $132 = (($131) + ($$1380))|0;
   HEAP32[(3488)>>2] = $132;
   HEAP32[(3500)>>2] = $114;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($114) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1380))|0;
  $138 = $116 >>> 3;
  $139 = ($116>>>0)<(256);
  L111: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (3520 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(3496)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[870]|0;
     $156 = $155 & $154;
     HEAP32[870] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre443 = ((($143)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $158 = HEAP32[(3496)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi444Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi444Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3398 = 0;
        break;
       } else {
        $$1396$ph = $183;$$1400$ph = $179;
       }
      } else {
       $$1396$ph = $181;$$1400$ph = $180;
      }
      $$1396 = $$1396$ph;$$1400 = $$1400$ph;
      while(1) {
       $185 = ((($$1396)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if ($187) {
        $188 = ((($$1396)) + 16|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ($189|0)==(0|0);
        if ($190) {
         break;
        } else {
         $$1396$be = $189;$$1400$be = $188;
        }
       } else {
        $$1396$be = $186;$$1400$be = $185;
       }
       $$1396 = $$1396$be;$$1400 = $$1400$be;
      }
      $191 = HEAP32[(3496)>>2]|0;
      $192 = ($191>>>0)>($$1400>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(3496)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3398 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (3784 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3398;
       $cond420 = ($$3398|0)==(0|0);
       if ($cond420) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(3484)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(3484)>>2] = $202;
        break L111;
       }
      } else {
       $203 = HEAP32[(3496)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)==($10|0);
        $208 = ((($165)) + 20|0);
        $$sink456 = $207 ? $205 : $208;
        HEAP32[$$sink456>>2] = $$3398;
        $209 = ($$3398|0)==(0|0);
        if ($209) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(3496)>>2]|0;
     $211 = ($210>>>0)>($$3398>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3398)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3398)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(3496)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3398)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($114) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(3500)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(3488)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1380 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($114) + ($$1380)|0);
  HEAP32[$234>>2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (3520 + ($237<<2)|0);
  $239 = HEAP32[870]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[870] = $243;
   $$pre = ((($238)) + 8|0);
   $$0401 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(3496)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0401)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0401;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 $252 = ($251|0)==(0);
 if ($252) {
  $$0394 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0394 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = $258 >>> 16;
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = $263 >>> 16;
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = $268 >>> 15;
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = $$2 >>> $272;
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0394 = $275;
  }
 }
 $276 = (3784 + ($$0394<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0394;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(3484)>>2]|0;
 $281 = 1 << $$0394;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 L197: do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(3484)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 & -8;
   $292 = ($291|0)==($$2|0);
   L200: do {
    if ($292) {
     $$0382$lcssa = $288;
    } else {
     $293 = ($$0394|0)==(31);
     $294 = $$0394 >>> 1;
     $295 = (25 - ($294))|0;
     $296 = $293 ? 0 : $295;
     $297 = $$2 << $296;
     $$0381438 = $297;$$0382437 = $288;
     while(1) {
      $304 = $$0381438 >>> 31;
      $305 = (((($$0382437)) + 16|0) + ($304<<2)|0);
      $300 = HEAP32[$305>>2]|0;
      $306 = ($300|0)==(0|0);
      if ($306) {
       break;
      }
      $298 = $$0381438 << 1;
      $299 = ((($300)) + 4|0);
      $301 = HEAP32[$299>>2]|0;
      $302 = $301 & -8;
      $303 = ($302|0)==($$2|0);
      if ($303) {
       $$0382$lcssa = $300;
       break L200;
      } else {
       $$0381438 = $298;$$0382437 = $300;
      }
     }
     $307 = HEAP32[(3496)>>2]|0;
     $308 = ($307>>>0)>($305>>>0);
     if ($308) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$305>>2] = $$1;
      $309 = ((($$1)) + 24|0);
      HEAP32[$309>>2] = $$0382437;
      $310 = ((($$1)) + 12|0);
      HEAP32[$310>>2] = $$1;
      $311 = ((($$1)) + 8|0);
      HEAP32[$311>>2] = $$1;
      break L197;
     }
    }
   } while(0);
   $312 = ((($$0382$lcssa)) + 8|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = HEAP32[(3496)>>2]|0;
   $315 = ($314>>>0)<=($$0382$lcssa>>>0);
   $316 = ($314>>>0)<=($313>>>0);
   $317 = $316 & $315;
   if ($317) {
    $318 = ((($313)) + 12|0);
    HEAP32[$318>>2] = $$1;
    HEAP32[$312>>2] = $$1;
    $319 = ((($$1)) + 8|0);
    HEAP32[$319>>2] = $313;
    $320 = ((($$1)) + 12|0);
    HEAP32[$320>>2] = $$0382$lcssa;
    $321 = ((($$1)) + 24|0);
    HEAP32[$321>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $322 = HEAP32[(3512)>>2]|0;
 $323 = (($322) + -1)|0;
 HEAP32[(3512)>>2] = $323;
 $324 = ($323|0)==(0);
 if (!($324)) {
  return;
 }
 $$0211$in$i = (3936);
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $325 = ($$0211$i|0)==(0|0);
  $326 = ((($$0211$i)) + 8|0);
  if ($325) {
   break;
  } else {
   $$0211$in$i = $326;
  }
 }
 HEAP32[(3512)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond$not = 0, $or$cond5 = 0, $storemerge = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(3496)>>2]|0;
 $7 = ($6>>>0)<=($0>>>0);
 $8 = $3 & 3;
 $9 = ($8|0)!=(1);
 $or$cond$not = $9 & $7;
 $10 = ($5>>>0)>($0>>>0);
 $or$cond5 = $or$cond$not & $10;
 if (!($or$cond5)) {
  _abort();
  // unreachable;
 }
 $11 = ((($5)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  _abort();
  // unreachable;
 }
 $15 = ($8|0)==(0);
 if ($15) {
  $16 = ($1>>>0)<(256);
  if ($16) {
   $$2 = 0;
   return ($$2|0);
  }
  $17 = (($1) + 4)|0;
  $18 = ($4>>>0)<($17>>>0);
  if (!($18)) {
   $19 = (($4) - ($1))|0;
   $20 = HEAP32[(3960)>>2]|0;
   $21 = $20 << 1;
   $22 = ($19>>>0)>($21>>>0);
   if (!($22)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $23 = ($4>>>0)<($1>>>0);
 if (!($23)) {
  $24 = (($4) - ($1))|0;
  $25 = ($24>>>0)>(15);
  if (!($25)) {
   $$2 = $0;
   return ($$2|0);
  }
  $26 = (($0) + ($1)|0);
  $27 = $3 & 1;
  $28 = $27 | $1;
  $29 = $28 | 2;
  HEAP32[$2>>2] = $29;
  $30 = ((($26)) + 4|0);
  $31 = $24 | 3;
  HEAP32[$30>>2] = $31;
  $32 = HEAP32[$11>>2]|0;
  $33 = $32 | 1;
  HEAP32[$11>>2] = $33;
  _dispose_chunk($26,$24);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(3504)>>2]|0;
 $35 = ($34|0)==($5|0);
 if ($35) {
  $36 = HEAP32[(3492)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(3504)>>2] = $40;
  HEAP32[(3492)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(3500)>>2]|0;
 $47 = ($46|0)==($5|0);
 if ($47) {
  $48 = HEAP32[(3488)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($0) + ($49)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge3 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(3488)>>2] = $storemerge3;
  HEAP32[(3500)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $12 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $12 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $12 >>> 3;
 $77 = ($12>>>0)<(256);
 L49: do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (3520 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($6>>>0)>($79>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[870]|0;
    $93 = $92 & $91;
    HEAP32[870] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($6>>>0)>($81>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271$ph = $118;$$1274$ph = $114;
      }
     } else {
      $$1271$ph = $116;$$1274$ph = $115;
     }
     $$1271 = $$1271$ph;$$1274 = $$1274$ph;
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $123 = ((($$1271)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        break;
       } else {
        $$1271$be = $124;$$1274$be = $123;
       }
      } else {
       $$1271$be = $121;$$1274$be = $120;
      }
      $$1271 = $$1271$be;$$1274 = $$1274$be;
     }
     $126 = ($6>>>0)>($$1274>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($6>>>0)>($106>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (3784 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==($5|0);
    do {
     if ($132) {
      HEAP32[$130>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $133 = 1 << $129;
       $134 = $133 ^ -1;
       $135 = HEAP32[(3484)>>2]|0;
       $136 = $135 & $134;
       HEAP32[(3484)>>2] = $136;
       break L49;
      }
     } else {
      $137 = HEAP32[(3496)>>2]|0;
      $138 = ($137>>>0)>($101>>>0);
      if ($138) {
       _abort();
       // unreachable;
      } else {
       $139 = ((($101)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==($5|0);
       $142 = ((($101)) + 20|0);
       $$sink = $141 ? $139 : $142;
       HEAP32[$$sink>>2] = $$3;
       $143 = ($$3|0)==(0|0);
       if ($143) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $144 = HEAP32[(3496)>>2]|0;
    $145 = ($144>>>0)>($$3>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($144>>>0)>($148>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(3496)>>2]|0;
     $157 = ($156>>>0)>($154>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $161 | $73;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($0) + ($73)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0;
 var $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $$pre29 = 0, $$sink = 0, $$sink41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0;
 var $cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(3496)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(3500)>>2]|0;
   $16 = ($15|0)==($11|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $102 & -2;
    HEAP32[(3488)>>2] = $12;
    HEAP32[$101>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$2>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (3520 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($13>>>0)>($20>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[870]|0;
     $34 = $33 & $32;
     HEAP32[870] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre29 = ((($22)) + 8|0);
     $$pre$phi30Z2D = $$pre29;
    } else {
     $36 = ($13>>>0)>($22>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi30Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi30Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424$ph = $59;$$1427$ph = $55;
      }
     } else {
      $$1424$ph = $57;$$1427$ph = $56;
     }
     $$1424 = $$1424$ph;$$1427 = $$1427$ph;
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = ((($$1424)) + 16|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if ($66) {
        break;
       } else {
        $$1424$be = $65;$$1427$be = $64;
       }
      } else {
       $$1424$be = $62;$$1427$be = $61;
      }
      $$1424 = $$1424$be;$$1427 = $$1427$be;
     }
     $67 = ($13>>>0)>($$1427>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($13>>>0)>($47>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (3784 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($11|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(3484)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(3484)>>2] = $77;
       $$1 = $11;$$1416 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(3496)>>2]|0;
      $79 = ($78>>>0)>($42>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($11|0);
       $83 = ((($42)) + 20|0);
       $$sink = $82 ? $80 : $83;
       HEAP32[$$sink>>2] = $$3;
       $84 = ($$3|0)==(0|0);
       if ($84) {
        $$1 = $11;$$1416 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $85 = HEAP32[(3496)>>2]|0;
    $86 = ($85>>>0)>($$3>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($85>>>0)>($89>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(3496)>>2]|0;
     $98 = ($97>>>0)>($95>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $108 = HEAP32[(3496)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(3504)>>2]|0;
  $115 = ($114|0)==($2|0);
  if ($115) {
   $116 = HEAP32[(3492)>>2]|0;
   $117 = (($116) + ($$1416))|0;
   HEAP32[(3492)>>2] = $117;
   HEAP32[(3504)>>2] = $$1;
   $118 = $117 | 1;
   $119 = ((($$1)) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[(3500)>>2]|0;
   $121 = ($$1|0)==($120|0);
   if (!($121)) {
    return;
   }
   HEAP32[(3500)>>2] = 0;
   HEAP32[(3488)>>2] = 0;
   return;
  }
  $122 = HEAP32[(3500)>>2]|0;
  $123 = ($122|0)==($2|0);
  if ($123) {
   $124 = HEAP32[(3488)>>2]|0;
   $125 = (($124) + ($$1416))|0;
   HEAP32[(3488)>>2] = $125;
   HEAP32[(3500)>>2] = $$1;
   $126 = $125 | 1;
   $127 = ((($$1)) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$1) + ($125)|0);
   HEAP32[$128>>2] = $125;
   return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$1416))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  L99: do {
   if ($132) {
    $133 = ((($2)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($2)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = (3520 + ($137<<2)|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($108>>>0)>($134>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = ((($134)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($2|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[870]|0;
     $148 = $147 & $146;
     HEAP32[870] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre27 = ((($136)) + 8|0);
     $$pre$phi28Z2D = $$pre27;
    } else {
     $150 = ($108>>>0)>($136>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = ((($136)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($2|0);
     if ($153) {
      $$pre$phi28Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = ((($134)) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi28Z2D>>2] = $134;
   } else {
    $155 = ((($2)) + 24|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($2|0);
    do {
     if ($159) {
      $169 = ((($2)) + 16|0);
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $173 = HEAP32[$169>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $$3433 = 0;
        break;
       } else {
        $$1431$ph = $173;$$1435$ph = $169;
       }
      } else {
       $$1431$ph = $171;$$1435$ph = $170;
      }
      $$1431 = $$1431$ph;$$1435 = $$1435$ph;
      while(1) {
       $175 = ((($$1431)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$1431)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1431$be = $179;$$1435$be = $178;
        }
       } else {
        $$1431$be = $176;$$1435$be = $175;
       }
       $$1431 = $$1431$be;$$1435 = $$1435$be;
      }
      $181 = ($108>>>0)>($$1435>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $160 = ((($2)) + 8|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($108>>>0)>($161>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = ((($161)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($2|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = ((($158)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($2|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $$3433 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $183 = ((($2)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (3784 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($2|0);
     do {
      if ($187) {
       HEAP32[$185>>2] = $$3433;
       $cond17 = ($$3433|0)==(0|0);
       if ($cond17) {
        $188 = 1 << $184;
        $189 = $188 ^ -1;
        $190 = HEAP32[(3484)>>2]|0;
        $191 = $190 & $189;
        HEAP32[(3484)>>2] = $191;
        break L99;
       }
      } else {
       $192 = HEAP32[(3496)>>2]|0;
       $193 = ($192>>>0)>($156>>>0);
       if ($193) {
        _abort();
        // unreachable;
       } else {
        $194 = ((($156)) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==($2|0);
        $197 = ((($156)) + 20|0);
        $$sink41 = $196 ? $194 : $197;
        HEAP32[$$sink41>>2] = $$3433;
        $198 = ($$3433|0)==(0|0);
        if ($198) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $199 = HEAP32[(3496)>>2]|0;
     $200 = ($199>>>0)>($$3433>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = ((($$3433)) + 24|0);
     HEAP32[$201>>2] = $156;
     $202 = ((($2)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = ($199>>>0)>($203>>>0);
       if ($205) {
        _abort();
        // unreachable;
       } else {
        $206 = ((($$3433)) + 16|0);
        HEAP32[$206>>2] = $203;
        $207 = ((($203)) + 24|0);
        HEAP32[$207>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $208 = ((($202)) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(0|0);
     if (!($210)) {
      $211 = HEAP32[(3496)>>2]|0;
      $212 = ($211>>>0)>($209>>>0);
      if ($212) {
       _abort();
       // unreachable;
      } else {
       $213 = ((($$3433)) + 20|0);
       HEAP32[$213>>2] = $209;
       $214 = ((($209)) + 24|0);
       HEAP32[$214>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $215 = $130 | 1;
  $216 = ((($$1)) + 4|0);
  HEAP32[$216>>2] = $215;
  $217 = (($$1) + ($130)|0);
  HEAP32[$217>>2] = $130;
  $218 = HEAP32[(3500)>>2]|0;
  $219 = ($$1|0)==($218|0);
  if ($219) {
   HEAP32[(3488)>>2] = $130;
   return;
  } else {
   $$2 = $130;
  }
 } else {
  $220 = $111 & -2;
  HEAP32[$110>>2] = $220;
  $221 = $$1416 | 1;
  $222 = ((($$1)) + 4|0);
  HEAP32[$222>>2] = $221;
  $223 = (($$1) + ($$1416)|0);
  HEAP32[$223>>2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 $225 = ($$2>>>0)<(256);
 if ($225) {
  $226 = $224 << 1;
  $227 = (3520 + ($226<<2)|0);
  $228 = HEAP32[870]|0;
  $229 = 1 << $224;
  $230 = $228 & $229;
  $231 = ($230|0)==(0);
  if ($231) {
   $232 = $228 | $229;
   HEAP32[870] = $232;
   $$pre = ((($227)) + 8|0);
   $$0436 = $227;$$pre$phiZ2D = $$pre;
  } else {
   $233 = ((($227)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[(3496)>>2]|0;
   $236 = ($235>>>0)>($234>>>0);
   if ($236) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $234;$$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $237 = ((($$0436)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$0436;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 $241 = ($240|0)==(0);
 if ($241) {
  $$0429 = 0;
 } else {
  $242 = ($$2>>>0)>(16777215);
  if ($242) {
   $$0429 = 31;
  } else {
   $243 = (($240) + 1048320)|0;
   $244 = $243 >>> 16;
   $245 = $244 & 8;
   $246 = $240 << $245;
   $247 = (($246) + 520192)|0;
   $248 = $247 >>> 16;
   $249 = $248 & 4;
   $250 = $249 | $245;
   $251 = $246 << $249;
   $252 = (($251) + 245760)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 2;
   $255 = $250 | $254;
   $256 = (14 - ($255))|0;
   $257 = $251 << $254;
   $258 = $257 >>> 15;
   $259 = (($256) + ($258))|0;
   $260 = $259 << 1;
   $261 = (($259) + 7)|0;
   $262 = $$2 >>> $261;
   $263 = $262 & 1;
   $264 = $263 | $260;
   $$0429 = $264;
  }
 }
 $265 = (3784 + ($$0429<<2)|0);
 $266 = ((($$1)) + 28|0);
 HEAP32[$266>>2] = $$0429;
 $267 = ((($$1)) + 16|0);
 $268 = ((($$1)) + 20|0);
 HEAP32[$268>>2] = 0;
 HEAP32[$267>>2] = 0;
 $269 = HEAP32[(3484)>>2]|0;
 $270 = 1 << $$0429;
 $271 = $269 & $270;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $269 | $270;
  HEAP32[(3484)>>2] = $273;
  HEAP32[$265>>2] = $$1;
  $274 = ((($$1)) + 24|0);
  HEAP32[$274>>2] = $265;
  $275 = ((($$1)) + 12|0);
  HEAP32[$275>>2] = $$1;
  $276 = ((($$1)) + 8|0);
  HEAP32[$276>>2] = $$1;
  return;
 }
 $277 = HEAP32[$265>>2]|0;
 $278 = ((($277)) + 4|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $279 & -8;
 $281 = ($280|0)==($$2|0);
 L189: do {
  if ($281) {
   $$0418$lcssa = $277;
  } else {
   $282 = ($$0429|0)==(31);
   $283 = $$0429 >>> 1;
   $284 = (25 - ($283))|0;
   $285 = $282 ? 0 : $284;
   $286 = $$2 << $285;
   $$041722 = $286;$$041821 = $277;
   while(1) {
    $293 = $$041722 >>> 31;
    $294 = (((($$041821)) + 16|0) + ($293<<2)|0);
    $289 = HEAP32[$294>>2]|0;
    $295 = ($289|0)==(0|0);
    if ($295) {
     break;
    }
    $287 = $$041722 << 1;
    $288 = ((($289)) + 4|0);
    $290 = HEAP32[$288>>2]|0;
    $291 = $290 & -8;
    $292 = ($291|0)==($$2|0);
    if ($292) {
     $$0418$lcssa = $289;
     break L189;
    } else {
     $$041722 = $287;$$041821 = $289;
    }
   }
   $296 = HEAP32[(3496)>>2]|0;
   $297 = ($296>>>0)>($294>>>0);
   if ($297) {
    _abort();
    // unreachable;
   }
   HEAP32[$294>>2] = $$1;
   $298 = ((($$1)) + 24|0);
   HEAP32[$298>>2] = $$041821;
   $299 = ((($$1)) + 12|0);
   HEAP32[$299>>2] = $$1;
   $300 = ((($$1)) + 8|0);
   HEAP32[$300>>2] = $$1;
   return;
  }
 } while(0);
 $301 = ((($$0418$lcssa)) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = HEAP32[(3496)>>2]|0;
 $304 = ($303>>>0)<=($$0418$lcssa>>>0);
 $305 = ($303>>>0)<=($302>>>0);
 $306 = $305 & $304;
 if (!($306)) {
  _abort();
  // unreachable;
 }
 $307 = ((($302)) + 12|0);
 HEAP32[$307>>2] = $$1;
 HEAP32[$301>>2] = $$1;
 $308 = ((($$1)) + 8|0);
 HEAP32[$308>>2] = $302;
 $309 = ((($$1)) + 12|0);
 HEAP32[$309>>2] = $$0418$lcssa;
 $310 = ((($$1)) + 24|0);
 HEAP32[$310>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_734($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4040|0);
}
function _dummy_734($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 24;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $27 = $42;
   }
   $26 = ($27|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($26) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $27;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 31]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 31]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$10 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $9 = ($10<<24>>24)==($6<<24>>24);
     $or$cond21 = $9 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $10;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$10 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1780|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$43 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 15]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 15]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 15]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 15]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 15]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 15]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 15]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_759($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_759($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_759($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (3462 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (3471 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if (!($80)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $29 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $29 = $27;
  }
  $28 = ($29|0)==(48);
  if ($28) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $42 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $42 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = tempRet0;
    $41 = ($42|0)==(48);
    if ($41) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $42;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $29;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$52 = 0;$54 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $51 = ($52|0)<(0);
   $53 = ($54>>>0)<(8);
   $55 = ($52|0)==(0);
   $56 = $55 & $53;
   $57 = $51 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($52|0)<(0);
     $61 = ($54>>>0)<(14);
     $62 = ($52|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($54|0),($52|0),1,0)|0);
   $74 = tempRet0;
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$52 = $217;$54 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $54 : $96;
   $99 = $95 ? $52 : $98;
   $100 = ($52|0)<(0);
   $101 = ($54>>>0)<(8);
   $102 = ($52|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $54;$107 = $52;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = tempRet0;
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = tempRet0;
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = tempRet0;
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = tempRet0;
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = tempRet0;
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = tempRet0;
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = tempRet0;
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = tempRet0;
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = tempRet0;
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $39 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $39 = $37;
    }
    $38 = ($39|0)==(48);
    if ($38) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $39;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $26;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = tempRet0;
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = tempRet0;
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = tempRet0;
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$110 = $97;$111 = $77;$113 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$110 = $387;$111 = $385;$113 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$110 = $393;$111 = $390;$113 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $109 = ($110|0)==($111|0);
   $112 = ($113|0)==($114|0);
   $115 = $109 & $112;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($113|0)>($129|0);
   $131 = ($110>>>0)>($127>>>0);
   $132 = ($113|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($113|0)<($141|0);
   $143 = ($110>>>0)<($139>>>0);
   $144 = ($113|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($110|0);
    $161 = ($110|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($110|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($110|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($110))|0;
      $173 = (2024 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($110, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($110) + -10)|0;
      $185 = (2024 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($110|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $110;
   } else {
    $191 = ($110|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (2024 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $110;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $110;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = tempRet0;
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = tempRet0;
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = tempRet0;
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = tempRet0;
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = tempRet0;
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $297 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (2056 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $296 = ($297|0)==($spec$select443|0);
      if (!($296)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $297;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = tempRet0;
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = tempRet0;
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = tempRet0;
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = tempRet0;
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 tempRet0 = ($99);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _lround($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_round((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_606()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_606() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((4044|0));
 return (4052|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((4044|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 7]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[444]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[444]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 31]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function jsCall_ii_1(a1) {
  a1=a1|0;
  return jsCall_ii(1,a1|0)|0;
}



function jsCall_ii_2(a1) {
  a1=a1|0;
  return jsCall_ii(2,a1|0)|0;
}



function jsCall_ii_3(a1) {
  a1=a1|0;
  return jsCall_ii(3,a1|0)|0;
}



function jsCall_ii_4(a1) {
  a1=a1|0;
  return jsCall_ii(4,a1|0)|0;
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}



function jsCall_iii_1(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(1,a1|0,a2|0)|0;
}



function jsCall_iii_2(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(2,a1|0,a2|0)|0;
}



function jsCall_iii_3(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(3,a1|0,a2|0)|0;
}



function jsCall_iii_4(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(4,a1|0,a2|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(1,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(2,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(3,a1|0,a2|0,a3|0)|0;
}



function jsCall_iiii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(4,a1|0,a2|0,a3|0)|0;
}



function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function jsCall_iiiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(0,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(1,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(2,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(3,a1|0,a2|0,a3|0,a4|0)|0;
}



function jsCall_iiiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return jsCall_iiiii(4,a1|0,a2|0,a3|0,a4|0)|0;
}



function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function jsCall_iiiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function jsCall_iiiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return jsCall_iiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}



function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function jsCall_viii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(0,a1|0,a2|0,a3|0);
}



function jsCall_viii_1(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(1,a1|0,a2|0,a3|0);
}



function jsCall_viii_2(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(2,a1|0,a2|0,a3|0);
}



function jsCall_viii_3(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(3,a1|0,a2|0,a3|0);
}



function jsCall_viii_4(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  jsCall_viii(4,a1|0,a2|0,a3|0);
}



function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}


function jsCall_viiii_0(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(0,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_1(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(1,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_2(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(2,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_3(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(3,a1|0,a2|0,a3|0,a4|0);
}



function jsCall_viiii_4(a1,a2,a3,a4) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  jsCall_viiii(4,a1|0,a2|0,a3|0,a4|0);
}



function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function jsCall_viiiiii_0(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_1(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_2(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_3(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function jsCall_viiiiii_4(a1,a2,a3,a4,a5,a6) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  jsCall_viiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}



function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function jsCall_viiiiiii_0(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(0,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_1(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(1,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_2(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(2,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_3(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(3,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}



function jsCall_viiiiiii_4(a1,a2,a3,a4,a5,a6,a7) {
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  jsCall_viiiiiii(4,a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b8(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,jsCall_ii_0,jsCall_ii_1,jsCall_ii_2,jsCall_ii_3,jsCall_ii_4,___stdio_close,b0];
var FUNCTION_TABLE_iii = [b1,jsCall_iii_0,jsCall_iii_1,jsCall_iii_2,jsCall_iii_3,jsCall_iii_4,b1,b1,b1,b1,_seekpoint_compare_,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iiii = [b2,jsCall_iiii_0,jsCall_iiii_1,jsCall_iiii_2,jsCall_iiii_3,jsCall_iiii_4,b2,___stdio_read,___stdio_seek,___stdout_write,b2,b2,b2,_read_callback_,b2,b2,_FLAC__fixed_compute_best_predictor,_FLAC__fixed_compute_best_predictor_wide,b2,b2,b2,b2,b2,b2,___stdio_write,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,jsCall_iiiii_0,jsCall_iiiii_1,jsCall_iiiii_2,jsCall_iiiii_3,jsCall_iiiii_4,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_verify_read_callback_,_verify_write_callback_,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiiiiii = [b4,jsCall_iiiiiii_0,jsCall_iiiiiii_1,jsCall_iiiiiii_2,jsCall_iiiiiii_3,jsCall_iiiiiii_4,b4,b4];
var FUNCTION_TABLE_viii = [b5,jsCall_viii_0,jsCall_viii_1,jsCall_viii_2,jsCall_viii_3,jsCall_viii_4,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_verify_metadata_callback_,_verify_error_callback_,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viiii = [b6,jsCall_viiii_0,jsCall_viiii_1,jsCall_viiii_2,jsCall_viiii_3,jsCall_viiii_4,b6,b6,b6,b6,b6,b6,b6,b6,_FLAC__lpc_compute_autocorrelation,b6];
var FUNCTION_TABLE_viiiiii = [b7,jsCall_viiiiii_0,jsCall_viiiiii_1,jsCall_viiiiii_2,jsCall_viiiiii_3,jsCall_viiiiii_4,b7,b7,b7,b7,b7,_FLAC__lpc_restore_signal,_FLAC__lpc_restore_signal_wide,b7,b7,b7,b7,b7,_FLAC__lpc_compute_residual_from_qlp_coefficients,_FLAC__lpc_compute_residual_from_qlp_coefficients_wide,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viiiiiii = [b8,jsCall_viiiiiii_0,jsCall_viiiiiii_1,jsCall_viiiiiii_2,jsCall_viiiiiii_3,jsCall_viiiiiii_4,b8,b8,b8,b8,b8,b8,b8,b8,b8,_precompute_partition_info_sums_];

  return { _FLAC__stream_decoder_delete: _FLAC__stream_decoder_delete, _FLAC__stream_decoder_finish: _FLAC__stream_decoder_finish, _FLAC__stream_decoder_get_md5_checking: _FLAC__stream_decoder_get_md5_checking, _FLAC__stream_decoder_get_state: _FLAC__stream_decoder_get_state, _FLAC__stream_decoder_init_stream: _FLAC__stream_decoder_init_stream, _FLAC__stream_decoder_new: _FLAC__stream_decoder_new, _FLAC__stream_decoder_process_single: _FLAC__stream_decoder_process_single, _FLAC__stream_decoder_process_until_end_of_metadata: _FLAC__stream_decoder_process_until_end_of_metadata, _FLAC__stream_decoder_process_until_end_of_stream: _FLAC__stream_decoder_process_until_end_of_stream, _FLAC__stream_decoder_reset: _FLAC__stream_decoder_reset, _FLAC__stream_decoder_set_md5_checking: _FLAC__stream_decoder_set_md5_checking, _FLAC__stream_encoder_delete: _FLAC__stream_encoder_delete, _FLAC__stream_encoder_finish: _FLAC__stream_encoder_finish, _FLAC__stream_encoder_get_state: _FLAC__stream_encoder_get_state, _FLAC__stream_encoder_init_stream: _FLAC__stream_encoder_init_stream, _FLAC__stream_encoder_new: _FLAC__stream_encoder_new, _FLAC__stream_encoder_process_interleaved: _FLAC__stream_encoder_process_interleaved, _FLAC__stream_encoder_set_bits_per_sample: _FLAC__stream_encoder_set_bits_per_sample, _FLAC__stream_encoder_set_blocksize: _FLAC__stream_encoder_set_blocksize, _FLAC__stream_encoder_set_channels: _FLAC__stream_encoder_set_channels, _FLAC__stream_encoder_set_compression_level: _FLAC__stream_encoder_set_compression_level, _FLAC__stream_encoder_set_sample_rate: _FLAC__stream_encoder_set_sample_rate, _FLAC__stream_encoder_set_total_samples_estimate: _FLAC__stream_encoder_set_total_samples_estimate, _FLAC__stream_encoder_set_verify: _FLAC__stream_encoder_set_verify, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _round: _round, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__FLAC__stream_decoder_delete = asm["_FLAC__stream_decoder_delete"]; asm["_FLAC__stream_decoder_delete"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_delete.apply(null, arguments);
};

var real__FLAC__stream_decoder_finish = asm["_FLAC__stream_decoder_finish"]; asm["_FLAC__stream_decoder_finish"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_finish.apply(null, arguments);
};

var real__FLAC__stream_decoder_get_md5_checking = asm["_FLAC__stream_decoder_get_md5_checking"]; asm["_FLAC__stream_decoder_get_md5_checking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_get_md5_checking.apply(null, arguments);
};

var real__FLAC__stream_decoder_get_state = asm["_FLAC__stream_decoder_get_state"]; asm["_FLAC__stream_decoder_get_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_get_state.apply(null, arguments);
};

var real__FLAC__stream_decoder_init_stream = asm["_FLAC__stream_decoder_init_stream"]; asm["_FLAC__stream_decoder_init_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_init_stream.apply(null, arguments);
};

var real__FLAC__stream_decoder_new = asm["_FLAC__stream_decoder_new"]; asm["_FLAC__stream_decoder_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_new.apply(null, arguments);
};

var real__FLAC__stream_decoder_process_single = asm["_FLAC__stream_decoder_process_single"]; asm["_FLAC__stream_decoder_process_single"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_process_single.apply(null, arguments);
};

var real__FLAC__stream_decoder_process_until_end_of_metadata = asm["_FLAC__stream_decoder_process_until_end_of_metadata"]; asm["_FLAC__stream_decoder_process_until_end_of_metadata"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_process_until_end_of_metadata.apply(null, arguments);
};

var real__FLAC__stream_decoder_process_until_end_of_stream = asm["_FLAC__stream_decoder_process_until_end_of_stream"]; asm["_FLAC__stream_decoder_process_until_end_of_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_process_until_end_of_stream.apply(null, arguments);
};

var real__FLAC__stream_decoder_reset = asm["_FLAC__stream_decoder_reset"]; asm["_FLAC__stream_decoder_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_reset.apply(null, arguments);
};

var real__FLAC__stream_decoder_set_md5_checking = asm["_FLAC__stream_decoder_set_md5_checking"]; asm["_FLAC__stream_decoder_set_md5_checking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_decoder_set_md5_checking.apply(null, arguments);
};

var real__FLAC__stream_encoder_delete = asm["_FLAC__stream_encoder_delete"]; asm["_FLAC__stream_encoder_delete"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_delete.apply(null, arguments);
};

var real__FLAC__stream_encoder_finish = asm["_FLAC__stream_encoder_finish"]; asm["_FLAC__stream_encoder_finish"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_finish.apply(null, arguments);
};

var real__FLAC__stream_encoder_get_state = asm["_FLAC__stream_encoder_get_state"]; asm["_FLAC__stream_encoder_get_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_get_state.apply(null, arguments);
};

var real__FLAC__stream_encoder_init_stream = asm["_FLAC__stream_encoder_init_stream"]; asm["_FLAC__stream_encoder_init_stream"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_init_stream.apply(null, arguments);
};

var real__FLAC__stream_encoder_new = asm["_FLAC__stream_encoder_new"]; asm["_FLAC__stream_encoder_new"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_new.apply(null, arguments);
};

var real__FLAC__stream_encoder_process_interleaved = asm["_FLAC__stream_encoder_process_interleaved"]; asm["_FLAC__stream_encoder_process_interleaved"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_process_interleaved.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_bits_per_sample = asm["_FLAC__stream_encoder_set_bits_per_sample"]; asm["_FLAC__stream_encoder_set_bits_per_sample"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_bits_per_sample.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_blocksize = asm["_FLAC__stream_encoder_set_blocksize"]; asm["_FLAC__stream_encoder_set_blocksize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_blocksize.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_channels = asm["_FLAC__stream_encoder_set_channels"]; asm["_FLAC__stream_encoder_set_channels"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_channels.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_compression_level = asm["_FLAC__stream_encoder_set_compression_level"]; asm["_FLAC__stream_encoder_set_compression_level"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_compression_level.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_sample_rate = asm["_FLAC__stream_encoder_set_sample_rate"]; asm["_FLAC__stream_encoder_set_sample_rate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_sample_rate.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_total_samples_estimate = asm["_FLAC__stream_encoder_set_total_samples_estimate"]; asm["_FLAC__stream_encoder_set_total_samples_estimate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_total_samples_estimate.apply(null, arguments);
};

var real__FLAC__stream_encoder_set_verify = asm["_FLAC__stream_encoder_set_verify"]; asm["_FLAC__stream_encoder_set_verify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__FLAC__stream_encoder_set_verify.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__round = asm["_round"]; asm["_round"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__round.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _FLAC__stream_decoder_delete = Module["_FLAC__stream_decoder_delete"] = asm["_FLAC__stream_decoder_delete"];
var _FLAC__stream_decoder_finish = Module["_FLAC__stream_decoder_finish"] = asm["_FLAC__stream_decoder_finish"];
var _FLAC__stream_decoder_get_md5_checking = Module["_FLAC__stream_decoder_get_md5_checking"] = asm["_FLAC__stream_decoder_get_md5_checking"];
var _FLAC__stream_decoder_get_state = Module["_FLAC__stream_decoder_get_state"] = asm["_FLAC__stream_decoder_get_state"];
var _FLAC__stream_decoder_init_stream = Module["_FLAC__stream_decoder_init_stream"] = asm["_FLAC__stream_decoder_init_stream"];
var _FLAC__stream_decoder_new = Module["_FLAC__stream_decoder_new"] = asm["_FLAC__stream_decoder_new"];
var _FLAC__stream_decoder_process_single = Module["_FLAC__stream_decoder_process_single"] = asm["_FLAC__stream_decoder_process_single"];
var _FLAC__stream_decoder_process_until_end_of_metadata = Module["_FLAC__stream_decoder_process_until_end_of_metadata"] = asm["_FLAC__stream_decoder_process_until_end_of_metadata"];
var _FLAC__stream_decoder_process_until_end_of_stream = Module["_FLAC__stream_decoder_process_until_end_of_stream"] = asm["_FLAC__stream_decoder_process_until_end_of_stream"];
var _FLAC__stream_decoder_reset = Module["_FLAC__stream_decoder_reset"] = asm["_FLAC__stream_decoder_reset"];
var _FLAC__stream_decoder_set_md5_checking = Module["_FLAC__stream_decoder_set_md5_checking"] = asm["_FLAC__stream_decoder_set_md5_checking"];
var _FLAC__stream_encoder_delete = Module["_FLAC__stream_encoder_delete"] = asm["_FLAC__stream_encoder_delete"];
var _FLAC__stream_encoder_finish = Module["_FLAC__stream_encoder_finish"] = asm["_FLAC__stream_encoder_finish"];
var _FLAC__stream_encoder_get_state = Module["_FLAC__stream_encoder_get_state"] = asm["_FLAC__stream_encoder_get_state"];
var _FLAC__stream_encoder_init_stream = Module["_FLAC__stream_encoder_init_stream"] = asm["_FLAC__stream_encoder_init_stream"];
var _FLAC__stream_encoder_new = Module["_FLAC__stream_encoder_new"] = asm["_FLAC__stream_encoder_new"];
var _FLAC__stream_encoder_process_interleaved = Module["_FLAC__stream_encoder_process_interleaved"] = asm["_FLAC__stream_encoder_process_interleaved"];
var _FLAC__stream_encoder_set_bits_per_sample = Module["_FLAC__stream_encoder_set_bits_per_sample"] = asm["_FLAC__stream_encoder_set_bits_per_sample"];
var _FLAC__stream_encoder_set_blocksize = Module["_FLAC__stream_encoder_set_blocksize"] = asm["_FLAC__stream_encoder_set_blocksize"];
var _FLAC__stream_encoder_set_channels = Module["_FLAC__stream_encoder_set_channels"] = asm["_FLAC__stream_encoder_set_channels"];
var _FLAC__stream_encoder_set_compression_level = Module["_FLAC__stream_encoder_set_compression_level"] = asm["_FLAC__stream_encoder_set_compression_level"];
var _FLAC__stream_encoder_set_sample_rate = Module["_FLAC__stream_encoder_set_sample_rate"] = asm["_FLAC__stream_encoder_set_sample_rate"];
var _FLAC__stream_encoder_set_total_samples_estimate = Module["_FLAC__stream_encoder_set_total_samples_estimate"] = asm["_FLAC__stream_encoder_set_total_samples_estimate"];
var _FLAC__stream_encoder_set_verify = Module["_FLAC__stream_encoder_set_verify"] = asm["_FLAC__stream_encoder_set_verify"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _round = Module["_round"] = asm["_round"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



//libflac function wrappers

/**
 * HELPER read/extract stream info meta-data from frame header / meta-data
 * @param {POINTER} p_streaminfo
 * @returns StreamInfo
 */
function _readStreamInfo(p_streaminfo){//-> FLAC__StreamMetadata.type (FLAC__MetadataType) === FLAC__METADATA_TYPE_STREAMINFO (0)

	/*
	typedef struct {
		unsigned min_blocksize, max_blocksize;
		unsigned min_framesize, max_framesize;
		unsigned sample_rate;
		unsigned channels;
		unsigned bits_per_sample;
		FLAC__uint64 total_samples;
		FLAC__byte md5sum[16];
	} FLAC__StreamMetadata_StreamInfo;
	 */

	var min_blocksize = Module.getValue(p_streaminfo,'i32');//4 bytes
	var max_blocksize = Module.getValue(p_streaminfo+4,'i32');//4 bytes

	var min_framesize = Module.getValue(p_streaminfo+8,'i32');//4 bytes
	var max_framesize = Module.getValue(p_streaminfo+12,'i32');//4 bytes

	var sample_rate = Module.getValue(p_streaminfo+16,'i32');//4 bytes
	var channels = Module.getValue(p_streaminfo+20,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_streaminfo+24,'i32');//4 bytes

	//FIXME should be at p_streaminfo+28, but seems to be at p_streaminfo+32
	var total_samples = Module.getValue(p_streaminfo+32,'i64');//8 bytes

	var md5sum = _readMd5(p_streaminfo+40);//16 bytes

	return {
		min_blocksize: min_blocksize,
		max_blocksize: max_blocksize,
		min_framesize: min_framesize,
		max_framesize: max_framesize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		total_samples: total_samples,
		md5sum: md5sum
	};
}

/**
 * read MD5 checksum
 * @param {POINTER} p_md5
 * @returns {String} as HEX string representation
 */
function _readMd5(p_md5){

	var sb = [], v, str;
	for(var i=0, len = 16; i < len; ++i){
		v = Module.getValue(p_md5+i,'i8');//1 byte
		if(v < 0) v = 256 + v;//<- "convert" to uint8, if necessary
		str = v.toString(16);
		if(str.length < 2) str = '0' + str;//<- add padding, if necessary
		sb.push(str);
	}
	return sb.join('');
}

/**
 * HELPER: read frame data
 *
 * @param {POINTER} p_frame
 * @returns FrameHeader
 */
function _readFrameHdr(p_frame){

	/*
	typedef struct {
		unsigned blocksize;
		unsigned sample_rate;
		unsigned channels;
		FLAC__ChannelAssignment channel_assignment;
		unsigned bits_per_sample;
		FLAC__FrameNumberType number_type;
		union {
			FLAC__uint32 frame_number;
			FLAC__uint64 sample_number;
		} number;
		FLAC__uint8 crc;
	} FLAC__FrameHeader;
	 */

	var blocksize = Module.getValue(p_frame,'i32');//4 bytes
	var sample_rate = Module.getValue(p_frame+4,'i32');//4 bytes
	var channels = Module.getValue(p_frame+8,'i32');//4 bytes

	// 0: FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	independent channels
	// 1: FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE 	left+side stereo
	// 2: FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE 	right+side stereo
	// 3: FLAC__CHANNEL_ASSIGNMENT_MID_SIDE 	mid+side stereo
	var channel_assignment = Module.getValue(p_frame+12,'i32');//4 bytes

	var bits_per_sample = Module.getValue(p_frame+16,'i32');

	// 0: FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER 	number contains the frame number
	// 1: FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	number contains the sample number of first sample in frame
	var number_type = Module.getValue(p_frame+20,'i32');

	// union {} number: The frame number or sample number of first sample in frame; use the number_type value to determine which to use.
	var frame_number = Module.getValue(p_frame+24,'i32');
	var sample_number = Module.getValue(p_frame+24,'i64');

	var number = number_type === 0? frame_number : sample_number;

	var crc = Module.getValue(p_frame+36,'i8');

	//TODO read subframe
	//TODO read footer

	return {
		blocksize: blocksize,
		sampleRate: sample_rate,
		channels: channels,
		bitsPerSample: bits_per_sample,
		number: number,
		crc: crc
	};
}


/**
 * HELPER workaround / fix for returned write-buffer when decoding FLAC
 *
 * @param {number} heapOffset
 * 				the offset for the data on HEAPU8
 * @param {Uint8Array} newBuffer
 * 				the target buffer into which the data should be written -- with the correct (block) size
 */
function __fix_write_buffer(heapOffset, newBuffer){

	var dv = new DataView(newBuffer.buffer);
	var targetSize = newBuffer.length;

	var increase = 2;//<- for FIX/workaround
	var buffer = HEAPU8.subarray(heapOffset, heapOffset + targetSize * increase);

	//FIXME for some reason, the bytes values 0 (min) and 255 (max) get "triplicated"
	//		HACK for now: remove/"over-read" 2 of the values, for each of these triplets
	var jump, isPrint;
	for(var i=0, j=0, size = buffer.length; i < size && j < targetSize; ++i, ++j){

		if(i === size-1 && j < targetSize - 1){
			//increase heap-view, in order to read more (valid) data into the target buffer
			buffer = HEAPU8.subarray(heapOffset, size + targetSize);
			size = buffer.length;
		}

		if(buffer[i] === 0 || buffer[i] === 255){

			jump = 0;
			isPrint = true;

			if(i + 1 < size && buffer[i] === buffer[i+1]){

				++jump;

				if(i + 2 < size){
					if(buffer[i] === buffer[i+2]){
						++jump;
					} else {
						//if only 2 occurrences: ignore value
						isPrint = false;
					}
				}
			}//else: if single value: do print (an do not jump)


			if(isPrint){
				dv.setUint8(j, buffer[i]);
				if(jump === 2 && i + 3 < size && buffer[i] === buffer[i+3]){
					//special case for reducing triples in case the following value is also the same
					// (ie. something like: x x x |+ x)
					// -> then: do write the value one more time, and jump one further ahead
					// i.e. if value occurs 4 times in a row, write 2 values
					++jump;
					dv.setUint8(++j, buffer[i]);
				}
			} else {
				--j;
			}

			i += jump;//<- apply jump, if there were value duplications

		} else {
			dv.setUint8(j, buffer[i]);
		}

	}
}


// FLAC__STREAM_DECODER_READ_STATUS_CONTINUE     	The read was OK and decoding can continue.
// FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM   The read was attempted while at the end of the stream. Note that the client must only return this value when the read callback was called when already at the end of the stream. Otherwise, if the read itself moves to the end of the stream, the client should still return the data and FLAC__STREAM_DECODER_READ_STATUS_CONTINUE, and then on the next read callback it should return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM with a byte count of 0.
// FLAC__STREAM_DECODER_READ_STATUS_ABORT       	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_READ_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM = 1;
var FLAC__STREAM_DECODER_READ_STATUS_ABORT = 2;

// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE   The write was OK and decoding can continue.
// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.
var FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE = 0;
var FLAC__STREAM_DECODER_WRITE_STATUS_ABORT = 1;

//FLAC__STREAM_DECODER_INIT_STATUS_OK						Initialization was successful.
//FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER 	The library was not compiled with support for the given container format.
//FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS 			A required callback was not supplied.
//FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR 	An error occurred allocating memory.
//FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE 		fopen() failed in FLAC__stream_decoder_init_file() or FLAC__stream_decoder_init_ogg_file().
//FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED 		FLAC__stream_decoder_init_*() was called when the decoder was already initialized, usually because FLAC__stream_decoder_finish() was not called.
var FLAC__STREAM_DECODER_INIT_STATUS_OK	= 0;
var FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	= 1;
var FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	= 2;
var FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR = 3;
var FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE = 4;
var FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED = 5;

//FLAC__STREAM_ENCODER_INIT_STATUS_OK									Initialization was successful.
//FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR						General failure to set up encoder; call FLAC__stream_encoder_get_state() for cause.
//FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER				The library was not compiled with support for the given container format.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS					A required callback was not supplied.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS			The encoder has an invalid setting for number of channels.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE				The encoder has an invalid setting for bits-per-sample. FLAC supports 4-32 bps but the reference encoder currently supports only up to 24 bps.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE					The encoder has an invalid setting for the input sample rate.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE					The encoder has an invalid setting for the block size.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER				The encoder has an invalid setting for the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION			The encoder has an invalid setting for the precision of the quantized linear predictor coefficients.
//FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER	The specified block size is less than the maximum LPC order.
//FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE						The encoder is bound to the Subset but other settings violate it.
//FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA						The metadata input to the encoder is invalid, in one of the following ways:
//																	      FLAC__stream_encoder_set_metadata() was called with a null pointer but a block count > 0
//																	      One of the metadata blocks contains an undefined type
//																	      It contains an illegal CUESHEET as checked by FLAC__format_cuesheet_is_legal()
//																	      It contains an illegal SEEKTABLE as checked by FLAC__format_seektable_is_legal()
//																	      It contains more than one SEEKTABLE block or more than one VORBIS_COMMENT block
//FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED					FLAC__stream_encoder_init_*() was called when the encoder was already initialized, usually because FLAC__stream_encoder_finish() was not called.
var FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR = 1;
var FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER = 2;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS = 3;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS = 4;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE = 5;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE = 6;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE = 7;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER = 8;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION = 9;
var FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER = 10;
var FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE = 11;
var FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA = 12;
var FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED = 13;

//FLAC__STREAM_ENCODER_WRITE_STATUS_OK 				The write was OK and encoding can continue.
//FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR		An unrecoverable error occurred. The encoder will return from the process call
var FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0;
var FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR = 1;


/**
 * Map for encoder/decoder callback functions
 *
 * <pre>[ID] -> {function_type: FUNCTION}</pre>
 *
 * type: {[id: number]: {[callback_type: string]: function}}
 * @private
 */
var coders = {};

/**
 * Get a registered callback for the encoder / decoder instance
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @returns {Function} the callback (or VOID if there is no callback registered)
 * @private
 */
function getCallback(p_coder, func_type){
	if(coders[p_coder]){
		return coders[p_coder][func_type];
	}
}

/**
 * Register a callback for an encoder / decoder instance (will / should be deleted, when finish()/delete())
 *
 * @param {Number} p_coder
 * 			the encoder/decoder pointer (ID)
 * @param {String} func_type
 * 			the callback type, one of
 * 				"write" | "read" | "error" | "metadata"
 * @param {Function} callback
 * 			the callback function
 * @private
 */
function setCallback(p_coder, func_type, callback){
	if(!coders[p_coder]){
		coders[p_coder] = {};
	}
	coders[p_coder][func_type] = callback;
}

//(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data)
// -> FLAC__StreamEncoderWriteStatus
var enc_write_fn_ptr = addFunction(function(p_encoder, buffer, bytes, samples, current_frame, p_client_data){
	var arraybuf = new ArrayBuffer(buffer);
	var retdata = new Uint8Array(bytes);
	retdata.set(HEAPU8.subarray(buffer, buffer + bytes));
	var write_callback_fn = getCallback(p_encoder, 'write');
	try{
		write_callback_fn(retdata, bytes, samples, current_frame, p_client_data);
	} catch(err) {
		console.error(err);
		return FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR;
	}
	return FLAC__STREAM_ENCODER_WRITE_STATUS_OK
}, 'iiiiiii');

//(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
// -> FLAC__StreamDecoderReadStatus
var dec_read_fn_ptr = addFunction(function(p_decoder, buffer, bytes, p_client_data){
	//FLAC__StreamDecoderReadCallback, see https://xiph.org/flac/api/group__flac__stream__decoder.html#ga7a5f593b9bc2d163884348b48c4285fd

	var len = Module.getValue(bytes, 'i32');

	if(len === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	var read_callback_fn = getCallback(p_decoder, 'read');

	//callback must return object with: {buffer: ArrayBuffer, readDataLength: number, error: boolean}
	var readResult = read_callback_fn(len, p_client_data);
	//in case of END_OF_STREAM or an error, readResult.readDataLength must be returned with 0

	var readLen = readResult.readDataLength;
	Module.setValue(bytes, readLen, 'i32');

	if(readResult.error){
		return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
	}

	if(readLen === 0){
		return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
	}

	var readBuf = readResult.buffer;

	var dataHeap = new Uint8Array(Module.HEAPU8.buffer, buffer, readLen);
	dataHeap.set(new Uint8Array(readBuf));

	return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
}, 'iiiii');

//(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 *const buffer[], void *client_data)
// -> FLAC__StreamDecoderWriteStatus
var dec_write_fn_ptr = addFunction(function(p_decoder, p_frame, p_buffer, p_client_data){

	// var dec = Module.getValue(p_decoder,'i32');
	// var clientData = Module.getValue(p_client_data,'i32');

	var frameInfo = _readFrameHdr(p_frame);

//	console.log(frameInfo);//DEBUG

	var channels = frameInfo.channels;
	var block_size = frameInfo.blocksize * (frameInfo.bitsPerSample / 8);

	var data = [];//<- array for the data of each channel
	var bufferOffset, heapView, _buffer;

	for(var i=0; i < channels; ++i){

		bufferOffset = Module.getValue(p_buffer + (i*4),'i32');

		_buffer = new Uint8Array(block_size);
		//FIXME HACK for "strange" data (see helper function __fix_write_buffer)
		__fix_write_buffer(bufferOffset, _buffer);

		data.push(_buffer.subarray(0, block_size));
	}

	var write_callback_fn = getCallback(p_decoder, 'write');
	write_callback_fn(data, frameInfo);//, clientData);

	// FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	The write was OK and decoding can continue.
	// FLAC__STREAM_DECODER_WRITE_STATUS_ABORT     	An unrecoverable error occurred. The decoder will return from the process call.

	return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
}, 'iiiii');



//(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)
// -> void
var dec_error_fn_ptr = addFunction(function(p_decoder, err, p_client_data){

	//err:
	// FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC         An error in the stream caused the decoder to lose synchronization.
	// FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       The decoder encountered a corrupted frame header.
	// FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   The frame's data did not match the CRC in the footer.
	// FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   The decoder encountered reserved fields in use in the stream.
	var msg;
	switch(err){
	case 0:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC';
		break;
	case 1:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER';
		break;
	case 2:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH';
		break;
	case 3:
		msg = 'FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM';
		break;
	default:
		msg = 'FLAC__STREAM_DECODER_ERROR__UNKNOWN__';//<- this should never happen
	}

	var error_callback_fn = getCallback(p_decoder, 'error');
	error_callback_fn(err, msg, p_client_data);
}, 'viii');

//(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
//(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data) -> void
var metadata_fn_ptr = addFunction(function(p_coder, p_metadata, p_client_data){
	/*
	 typedef struct {
		FLAC__MetadataType type;
		FLAC__bool is_last;
		unsigned length;
		union {
			FLAC__StreamMetadata_StreamInfo stream_info;
			FLAC__StreamMetadata_Padding padding;
			FLAC__StreamMetadata_Application application;
			FLAC__StreamMetadata_SeekTable seek_table;
			FLAC__StreamMetadata_VorbisComment vorbis_comment;
			FLAC__StreamMetadata_CueSheet cue_sheet;
			FLAC__StreamMetadata_Picture picture;
			FLAC__StreamMetadata_Unknown unknown;
		} data;
	} FLAC__StreamMetadata;
	 */

	/*
	FLAC__METADATA_TYPE_STREAMINFO 		STREAMINFO block
	FLAC__METADATA_TYPE_PADDING 		PADDING block
	FLAC__METADATA_TYPE_APPLICATION 	APPLICATION block
	FLAC__METADATA_TYPE_SEEKTABLE 		SEEKTABLE block
	FLAC__METADATA_TYPE_VORBIS_COMMENT 	VORBISCOMMENT block (a.k.a. FLAC tags)
	FLAC__METADATA_TYPE_CUESHEET 		CUESHEET block
	FLAC__METADATA_TYPE_PICTURE 		PICTURE block
	FLAC__METADATA_TYPE_UNDEFINED 		marker to denote beginning of undefined type range; this number will increase as new metadata types are added
	FLAC__MAX_METADATA_TYPE 			No type will ever be greater than this. There is not enough room in the protocol block.
	 */

	var type = Module.getValue(p_metadata,'i32');//4 bytes
	var is_last = Module.getValue(p_metadata+4,'i32');//4 bytes
	var length = Module.getValue(p_metadata+8,'i64');//8 bytes

	var metadata_callback_fn = getCallback(p_coder, 'metadata');
	var meta_data;
	if(type === 0){// === FLAC__METADATA_TYPE_STREAMINFO
		meta_data = _readStreamInfo(p_metadata+16);

		metadata_callback_fn(meta_data);
	}
	//TODO handle other meta data too

}, 'viii');

/////////////////////////////////////    export / public: /////////////////////////////////////////////
/**
 * The <code>Flac</code> module that provides functionality
 * for encoding WAV/PCM audio to Flac and decoding Flac to PCM.
 *
 * @see https://xiph.org/flac/api/group__flac__stream__encoder.html
 * @see https://xiph.org/flac/api/group__flac__stream__decoder.html
 *
 * @class Flac
 * @namespace Flac
 */
var _exported = {
	_module: Module,//internal: reference to Flac module
	_clear_enc_cb: function(enc_ptr){//internal function: remove reference to encoder instance and its callbacks
		delete coders[enc_ptr];
	},
	_clear_dec_cb: function(dec_ptr){//internal function: remove reference to decoder instance and its callbacks
		delete coders[dec_ptr];
	},
	/**
	 * Returns if Flac has been initialized / is ready to be used.
	 *
	 * @returns {boolean} true, if Flac is ready to be used
	 *
	 * @memberOf Flac#
	 */
	isReady: function() { return _flac_ready; },
	/**
	 * Callback that gets called, when asynchronous initialization has finished.
	 *
	 * Note that this function is not called again, after #isReady() is TRUE
	 *
	 * @memberOf Flac#
	 * @function
	 * @example
	 *  if(!Flac.isReady()){
	 *    Flac.onready = function(){
	 *       //gets executed when library becomes ready...
	 *    };
	 *  }
	 */
	onready: void(0),

	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_verify: Module.cwrap('FLAC__stream_encoder_set_verify', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_compression_level: Module.cwrap('FLAC__stream_encoder_set_compression_level', 'number', [ 'number', 'number' ]),
	/**@memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_set_blocksize: Module.cwrap('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number']),
/*

TODO export other encoder API functions?:

FLAC__StreamEncoder * 	FLAC__stream_encoder_new (void)

FLAC__bool 	FLAC__stream_encoder_set_channels (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_bits_per_sample (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_sample_rate (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_loose_mid_side_stereo (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_apodization (FLAC__StreamEncoder *encoder, const char *specification)

FLAC__bool 	FLAC__stream_encoder_set_max_lpc_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_qlp_coeff_precision (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_do_qlp_coeff_prec_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_escape_coding (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_do_exhaustive_model_search (FLAC__StreamEncoder *encoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_encoder_set_min_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_max_residual_partition_order (FLAC__StreamEncoder *encoder, unsigned value)

FLAC__bool 	FLAC__stream_encoder_set_rice_parameter_search_dist (FLAC__StreamEncoder *encoder, unsigned value)


FLAC__StreamDecoderState 	FLAC__stream_encoder_get_verify_decoder_state (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_verify (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_streamable_subset (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_channels (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_bits_per_sample (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_sample_rate (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_blocksize (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_mid_side_stereo (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_loose_mid_side_stereo (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_lpc_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_qlp_coeff_precision (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_qlp_coeff_prec_search (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_escape_coding (const FLAC__StreamEncoder *encoder)

FLAC__bool 	FLAC__stream_encoder_get_do_exhaustive_model_search (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_min_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_max_residual_partition_order (const FLAC__StreamEncoder *encoder)

unsigned 	FLAC__stream_encoder_get_rice_parameter_search_dist (const FLAC__StreamEncoder *encoder)

FLAC__uint64 	FLAC__stream_encoder_get_total_samples_estimate (const FLAC__StreamEncoder *encoder)



TODO export other decoder API functions?:

FLAC__StreamDecoder * 	FLAC__stream_decoder_new (void)

FLAC__bool 	FLAC__stream_decoder_set_md5_checking (FLAC__StreamDecoder *decoder, FLAC__bool value)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_respond_all (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore (FLAC__StreamDecoder *decoder, FLAC__MetadataType type)

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_application (FLAC__StreamDecoder *decoder, const FLAC__byte id[4])

FLAC__bool 	FLAC__stream_decoder_set_metadata_ignore_all (FLAC__StreamDecoder *decoder)


const char * 	FLAC__stream_decoder_get_resolved_state_string (const FLAC__StreamDecoder *decoder)

FLAC__uint64 	FLAC__stream_decoder_get_total_samples (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_channels (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_bits_per_sample (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_sample_rate (const FLAC__StreamDecoder *decoder)

unsigned 	FLAC__stream_decoder_get_blocksize (const FLAC__StreamDecoder *decoder)


FLAC__bool 	FLAC__stream_decoder_flush (FLAC__StreamDecoder *decoder)

FLAC__bool 	FLAC__stream_decoder_skip_single_frame (FLAC__StreamDecoder *decoder)

 */

	/**
	 * Create an encoder.
	 *
	 * @param {number} sample_rate
	 * 					the sample rate of the input PCM data
	 * @param {number} channels
	 * 					the number of channels of the input PCM data
	 * @param {number} bps
	 * 					bits per sample of the input PCM data
	 * @param {number} compression_level
	 * 					the desired Flac compression level: [0, 8]
	 * @param {number} [total_samples] OPTIONAL
	 * 					the number of total samples of the input PCM data:<br>
	 * 					 Sets an estimate of the total samples that will be encoded.
	 * 					 This is merely an estimate and may be set to 0 if unknown.
	 * 					 This value will be written to the STREAMINFO block before encoding,
	 * 					 and can remove the need for the caller to rewrite the value later if
	 * 					 the value is known before encoding.<br>
	 * 					If specified, the it will be written into metadata of the FLAC header.<br>
	 * 					DEFAULT: 0 (i.e. unknown number of samples)
	 * @param {boolean} [is_verify] OPTIONAL
	 * 					enable/disable checksum verification during encoding<br>
	 * 					DEFAULT: true<br>
	 * 					NOTE: this argument is positional (i.e. total_samples must also be given)
	 * @param {number} [block_size] OPTIONAL
	 * 					the number of samples to use per frame.<br>
	 * 					DEFAULT: 0 (i.e. encoder sets block size automatically)
	 * 					NOTE: this argument is positional (i.e. total_samples and is_verify must also be given)
	 *
	 *
	 * @returns {number} the ID of the created encoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_encoder: function(sample_rate, channels, bps, compression_level, total_samples, is_verify, block_size){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		total_samples = typeof total_samples === 'number'? total_samples : 0;
		block_size = typeof block_size === 'number'? block_size : 0;
		var ok = true;
		var encoder = Module.ccall('FLAC__stream_encoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_verify', 'number', ['number', 'number'], [ encoder, is_verify ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_compression_level', 'number', ['number', 'number'], [ encoder, compression_level ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_channels', 'number', ['number', 'number'], [ encoder, channels ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_bits_per_sample', 'number', ['number', 'number'], [ encoder, bps ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_sample_rate', 'number', ['number', 'number'], [ encoder, sample_rate ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_blocksize', 'number', [ 'number', 'number'], [ encoder, block_size ]);
		ok &= Module.ccall('FLAC__stream_encoder_set_total_samples_estimate', 'number', ['number', 'number'], [ encoder, total_samples ]);
		if (ok){
			return encoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_encoder} instead */
	init_libflac_encoder: function(){ return this.create_libflac_encoder.apply(this, arguments); },

	/**
	 * Create a decoder.
	 *
	 * @param {boolean} [is_verify]
	 * 				enable/disable checksum verification during decoding<br>
	 * 				DEFAULT: true
	 *
	 * @returns {number} the ID of the created decoder instance (or 0, if there was an error)
	 *
	 * @memberOf Flac#
	 * @function
	 */
	create_libflac_decoder: function(is_verify){
		is_verify = typeof is_verify === 'undefined'? 1 : is_verify + 0;
		var ok = true;
		var decoder = Module.ccall('FLAC__stream_decoder_new', 'number', [ ], [ ]);
		ok &= Module.ccall('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number'], [ decoder, is_verify ]);
		if (ok){
			return decoder;
		}
		return 0;
	},
	/** @deprecated use {@link #create_libflac_decoder} instead */
	init_libflac_decoder: function(){ return this.create_libflac_decoder.apply(this, arguments); },

	/**
	 * Initialize the decoder.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the encoded Flac data:
	 * 				<pre>
	 * 				write_callback_fn(data: Uint8Array, numberOfBytes: Number, samples: Number, currentFrame: Number)
	 *
	 * 				data: the encoded Flac data
	 * 				numberOfBytes: the number of bytes in data
	 * 				samples: the number of samples encoded in data
	 * 				currentFrame: the number of the (current) encoded frame in data
	 * 				</pre>
	 *
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				the callback for the metadata of the encoded Flac data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 *
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes)
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_encoder_stream: function(encoder, write_callback_fn, metadata_callback_fn, client_data){

		client_data = client_data|0;

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(encoder, 'write', write_callback_fn);

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(encoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var init_status = Module.ccall(
				'FLAC__stream_encoder_init_stream', 'number',
				['number', 'number', 'number', 'number', 'number', 'number'],
				[
				 	encoder,
				 	enc_write_fn_ptr,
				 	0,//	FLAC__StreamEncoderSeekCallback
				 	0,//	FLAC__StreamEncoderTellCallback
				 	__metadata_callback_fn_ptr,
				 	client_data
				]
		);

		return init_status;
	},

	/**
	 * Initialize the decoder.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @param {Function} read_callback_fn
	 * 				the callback for reading the Flac data that should get decoded:
	 * 				<pre>
	 * 				read_callback_fn(numberOfBytes: Number) : {buffer: ArrayBuffer, readDataLength: number, error: boolean}
	 *
	 * 				numberOfBytes: the maximal number of bytes that the read callback can return
	 *
	 * 				RETURN.buffer: a TypedArray (e.g. Uint8Array) with the read data
	 * 				RETURN.readDataLength: the number of read data bytes. A number of 0 (zero) indicates that the end-of-stream is reached.
	 * 				RETURN.error: TRUE indicates that an error occurs (decoding will be aborted)
	 * 				</pre>
	 *
	 * @param {Function} write_callback_fn
	 * 				the callback for writing the decoded data:
	 * 				<pre>
	 * 				write_callback_fn(data: TypedArray, frameInfo: Metadata)
	 *
	 * 				data: the decoded PCM data as Uint8Array
	 * 				frameInfo: the metadata information for the decoded data with
	 * 				frameInfo.blocksize (Number): the block size (bytes)
	 * 				frameInfo.sampleRate (Number): the sample rate (Hz)
	 * 				frameInfo.channels (Number): number of channels
	 * 				frameInfo.bitsPerSample (Number): bits per sample
	 * 				frameInfo.number (Number):  the number of the decoded sample
	 * 				frameInfo.crc (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @param {Function} [error_callback_fn] OPTIONAL
	 * 				the error callback:
	 * 				<pre>
	 * 				error_callback_fn(errorCode: Number, errorMessage: String)
	 *
	 * 				where
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC        		An error in the stream caused the decoder to lose synchronization.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER       		The decoder encountered a corrupted frame header.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH   	The frame's data did not match the CRC in the footer.
	 * 					FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM   	The decoder encountered reserved fields in use in the stream.
	 * 				</pre>
	 *
	 * @param {Function} [metadata_callback_fn] OPTIONAL
	 * 				callback for receiving the metadata of the decoded PCM data:
	 * 				<pre>
	 * 				metadata_callback_fn(metadata: StreamMetadata)
	 *
	 * 				metadata.min_blocksize (Number): the minimal block size (bytes)
	 * 				metadata.max_blocksize (Number): the maximal block size (bytes)
	 * 				metadata.min_framesize (Number): the minimal frame size (bytes)
	 * 				metadata.max_framesize (Number): the maximal frame size (bytes)
	 * 				metadata.sampleRate (Number): the sample rate (Hz)
	 * 				metadata.channels (Number): the number of channels
	 * 				metadata.bitsPerSample (Number): bits per sample
	 * 				metadata.total_samples (Number): the total number of (decoded) samples
	 * 				metadata.md5sum (String): the MD5 checksum for the decoded data (if validation is active)
	 * 				</pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	init_decoder_stream: function(decoder, read_callback_fn, write_callback_fn, error_callback_fn, metadata_callback_fn, client_data){

		client_data = client_data|0;

		if(typeof read_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'read', read_callback_fn);

		if(typeof write_callback_fn !== 'function'){
			return FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS;
		}
		setCallback(decoder, 'write', write_callback_fn);

		var __error_callback_fn_ptr = 0;
		if(typeof error_callback_fn === 'function'){
			setCallback(decoder, 'error', error_callback_fn);
			__error_callback_fn_ptr = dec_error_fn_ptr;
		}

		var __metadata_callback_fn_ptr = 0;
		if(typeof metadata_callback_fn === 'function'){
			setCallback(decoder, 'metadata', metadata_callback_fn);
			__metadata_callback_fn_ptr = metadata_fn_ptr;
		}

		var init_status = Module.ccall(
				'FLAC__stream_decoder_init_stream', 'number',
				[ 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],
				[
                   decoder,
                   dec_read_fn_ptr,
                   0,// FLAC__StreamDecoderSeekCallback
                   0,// FLAC__StreamDecoderTellCallback
                   0,//	FLAC__StreamDecoderLengthCallback
                   0,//	FLAC__StreamDecoderEofCallback
                   dec_write_fn_ptr,
                   __metadata_callback_fn_ptr,
                   __error_callback_fn_ptr,
                   client_data
                ]
		);

		return init_status;
	},

	/**
	 * Encode / submit data for encoding.
	 *
	 * This version allows you to supply the input data where the channels are interleaved into a
	 * single array (i.e. channel0_sample0, channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).
	 *
	 * The samples need not be block-aligned but they must be sample-aligned, i.e. the first value should be
	 * channel0_sample0 and the last value channelN_sampleM.
	 *
	 * Each sample should be a signed integer, right-justified to the resolution set by bits-per-sample.
	 *
	 * For example, if the resolution is 16 bits per sample, the samples should all be in the range [-32768,32767].
	 *
	 *
	 * For applications where channel order is important, channels must follow the order as described in the frame header.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @param {TypedArray} buffer
	 * 				the audio data in a typed array with signed integers (and size according to the set bits-per-sample setting)
	 *
	 * @param {number} num_of_samples
	 * 				the number of samples in buffer
	 *
	 * @returns {boolean} true if successful, else false; in this case, check the encoder state with FLAC__stream_encoder_get_state() to see what went wrong.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_process_interleaved: function(encoder, buffer, num_of_samples){
		// get the length of the data in bytes
		var numBytes = buffer.length * buffer.BYTES_PER_ELEMENT;
		// console.log("DEBUG numBytes: " + numBytes);
		// malloc enough space for the data
		var ptr = Module._malloc(numBytes);
		// get a bytes-wise view on the newly allocated buffer
		var heapBytes= new Uint8Array(Module.HEAPU8.buffer, ptr, numBytes);
		// console.log("DEBUG heapBytes: " + heapBytes);
		// copy data into heapBytes
		heapBytes.set(new Uint8Array(buffer.buffer));
		var status = Module.ccall('FLAC__stream_encoder_process_interleaved', 'number',
				['number', 'number', 'number'],
				[encoder, heapBytes.byteOffset, num_of_samples]
		);
		Module._free(ptr);
		return status;
	},

	/**
	 * Decodes a single frame.
	 *
	 * To check decoding progress, use #FLAC__stream_decoder_get_state().
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_single: Module.cwrap('FLAC__stream_decoder_process_single', 'number', ['number']),

	/**
	 * Decodes data until end of stream.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} FALSE if an error occurred
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_stream: Module.cwrap('FLAC__stream_decoder_process_until_end_of_stream', 'number', ['number']),

	/**
	 * Decodes data until end of metadata.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if any fatal read, write, or memory allocation error occurred (meaning decoding must stop), else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_process_until_end_of_metadata: Module.cwrap('FLAC__stream_decoder_process_until_end_of_metadata', 'number', ['number']),

	/**
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {number} the decoder state:
	 * <pre>
	 * 0	FLAC__STREAM_DECODER_SEARCH_FOR_METADATA:		The decoder is ready to search for metadata
	 * 1	FLAC__STREAM_DECODER_READ_METADATA:				The decoder is ready to or is in the process of reading metadata
	 * 2	FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC:		The decoder is ready to or is in the process of searching for the frame sync code
	 * 3	FLAC__STREAM_DECODER_READ_FRAME:				The decoder is ready to or is in the process of reading a frame
	 * 4	FLAC__STREAM_DECODER_END_OF_STREAM:				The decoder has reached the end of the stream
	 * 5	FLAC__STREAM_DECODER_OGG_ERROR:					An error occurred in the underlying Ogg layer
	 * 6	FLAC__STREAM_DECODER_SEEK_ERROR:				An error occurred while seeking. The decoder must be flushed with FLAC__stream_decoder_flush() or reset with FLAC__stream_decoder_reset() before decoding can continue
	 * 7	FLAC__STREAM_DECODER_ABORTED:					The decoder was aborted by the read callback
	 * 8	FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR:	An error occurred allocating memory. The decoder is in an invalid state and can no longer be used
	 * 9	FLAC__STREAM_DECODER_UNINITIALIZED:				The decoder is in the uninitialized state; one of the FLAC__stream_decoder_init_*() functions must be called before samples can be processed.
	 * </pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_state: Module.cwrap('FLAC__stream_decoder_get_state', 'number', ['number']),

	/**
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {number} the encoder state:
	 * <pre>
	 * 0	FLAC__STREAM_ENCODER_OK								The encoder is in the normal OK state and samples can be processed.
	 * 1	FLAC__STREAM_ENCODER_UNINITIALIZED					The encoder is in the uninitialized state; one of the FLAC__stream_encoder_init_*() functions must be called before samples can be processed.
	 * 2	FLAC__STREAM_ENCODER_OGG_ERROR						An error occurred in the underlying Ogg layer.
	 * 3	FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR			An error occurred in the underlying verify stream decoder; check FLAC__stream_encoder_get_verify_decoder_state().
	 * 4	FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA	The verify decoder detected a mismatch between the original audio signal and the decoded audio signal.
	 * 5	FLAC__STREAM_ENCODER_CLIENT_ERROR					One of the callbacks returned a fatal error.
	 * 6	FLAC__STREAM_ENCODER_IO_ERROR						An I/O error occurred while opening/reading/writing a file. Check errno.
	 * 7	FLAC__STREAM_ENCODER_FRAMING_ERROR					An error occurred while writing the stream; usually, the write_callback returned an error.
	 * 8	FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR		Memory allocation failed.
	 * </pre>
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_get_state:  Module.cwrap('FLAC__stream_encoder_get_state', 'number', ['number']),

	/**
	 * Get if MD5 verification is enabled for decoder
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} TRUE if MD5 verification is enabled
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_get_md5_checking: Module.cwrap('FLAC__stream_decoder_get_md5_checking', 'number', ['number']),

//	/** @returns {boolean} FALSE if the decoder is already initialized, else TRUE. */
//	FLAC__stream_decoder_set_md5_checking: Module.cwrap('FLAC__stream_decoder_set_md5_checking', 'number', ['number', 'number']),

	/**
	 * Finish the encoding process.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @returns {boolean} false if an error occurred processing the last frame;
	 * 					 or if verify mode is set, there was a verify mismatch; else true.
	 * 					 If false, caller should check the state with FLAC__stream_encoder_get_state()
	 * 					 for more information about the error.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_finish: Module.cwrap('FLAC__stream_encoder_finish', 'number', [ 'number' ]),
	/**
	 * Finish the decoding process.
	 *
	 * The decoder can be reused, after initializing it again.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} false if MD5 checking is on AND a STREAMINFO block was available AND the MD5 signature in
	 * 						 the STREAMINFO block was non-zero AND the signature does not match the one computed by the decoder;
	 * 						 else true.
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_finish: Module.cwrap('FLAC__stream_decoder_finish', 'number', [ 'number' ]),
	/**
	 * Reset the decoder for reuse.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @returns {boolean} true if successful
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_reset: Module.cwrap('FLAC__stream_decoder_reset', 'number', [ 'number' ]),
	/**
	 * Delete the encoder instance, and free up its resources.
	 *
	 * @param {number} encoder
	 * 				the ID of the encoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_encoder_delete: function(encoder){
		this._clear_enc_cb(encoder);//<- remove callback references
		return Module.ccall('FLAC__stream_encoder_delete', 'number', [ 'number' ], [encoder]);
	},
	/**
	 * Delete the decoder instance, and free up its resources.
	 *
	 * @param {number} decoder
	 * 				the ID of the decoder instance
	 *
	 * @memberOf Flac#
	 * @function
	 */
	FLAC__stream_decoder_delete: function(decoder){
		this._clear_dec_cb(decoder);//<- remove callback references
		return Module.ccall('FLAC__stream_decoder_delete', 'number', [ 'number' ], [decoder]);
	}

};//END: var _exported = {
return _exported;

}));//END: UMD wrapper

//# sourceMappingURL=libflac4-1.3.2.dev.js.map