// @flow
export type Subscription = { [string]: boolean }
export type Subscriber<V> = (value: V) => void
export type IsEqual = (a: any, b: any) => boolean

export type FormSubscription = {
  active?: boolean,
  dirty?: boolean,
  dirtyFields?: boolean,
  dirtySinceLastSubmit?: boolean,
  error?: boolean,
  errors?: boolean,
  hasSubmitErrors?: boolean,
  hasValidationErrors?: boolean,
  initialValues?: boolean,
  invalid?: boolean,
  modified?: boolean,
  pristine?: boolean,
  submitError?: boolean,
  submitErrors?: boolean,
  submitFailed?: boolean,
  submitSucceeded?: boolean,
  submitting?: boolean,
  touched?: boolean,
  valid?: boolean,
  validating?: boolean,
  values?: boolean,
  visited?: boolean
}

export type FormState = {
  // all values are optional because they must be subscribed to
  active?: string,
  dirty?: boolean,
  dirtyFields?: { [string]: boolean },
  dirtySinceLastSubmit?: boolean,
  error?: any,
  errors?: Object,
  hasSubmitErrors?: boolean,
  hasValidationErrors?: boolean,
  initialValues?: Object,
  invalid?: boolean,
  modified?: { [string]: boolean },
  pristine?: boolean,
  submitError?: any,
  submitErrors?: Object,
  submitFailed?: boolean,
  submitSucceeded?: boolean,
  submitting?: boolean,
  touched?: { [string]: boolean },
  valid?: boolean,
  validating?: boolean,
  values?: Object,
  visited?: { [string]: boolean }
}

export type FormSubscriber = Subscriber<FormState>

export type FieldState = {
  active?: boolean,
  blur: () => void,
  change: (value: any) => void,
  data?: Object,
  dirty?: boolean,
  dirtySinceLastSubmit?: boolean,
  error?: any,
  focus: () => void,
  initial?: any,
  invalid?: boolean,
  length?: number,
  modified?: boolean,
  name: string,
  pristine?: boolean,
  submitError?: any,
  submitFailed?: boolean,
  submitSucceeded?: boolean,
  submitting?: boolean,
  touched?: boolean,
  valid?: boolean,
  value?: any,
  visited?: boolean
}

export type FieldSubscription = {
  active?: boolean,
  data?: boolean,
  dirty?: boolean,
  dirtySinceLastSubmit?: boolean,
  error?: boolean,
  initial?: boolean,
  invalid?: boolean,
  length?: boolean,
  modified?: boolean,
  pristine?: boolean,
  submitError?: boolean,
  submitFailed?: boolean,
  submitSucceeded?: boolean,
  submitting?: boolean,
  touched?: boolean,
  valid?: boolean,
  value?: boolean,
  visited?: boolean
}

export type FieldSubscriber = Subscriber<FieldState>
export type Subscribers<T: Object> = {
  index: number,
  entries: {
    [number]: { subscriber: Subscriber<T>, subscription: Subscription }
  }
}

export type Unsubscribe = () => void

export type FieldValidator = (
  value: ?any,
  allValues: Object,
  meta: ?FieldState
) => ?any | Promise<?any>
export type GetFieldValidator = () => ?FieldValidator

export type FieldConfig = {
  defaultValue?: any,
  getValidator?: GetFieldValidator,
  initialValue?: any,
  isEqual?: IsEqual,
  validateFields?: string[]
}

export type RegisterField = (
  name: string,
  subscriber: FieldSubscriber,
  subscription: FieldSubscription,
  config?: FieldConfig
) => Unsubscribe

export type InternalFieldState = {
  active: boolean,
  blur: () => void,
  change: (value: any) => void,
  data: Object,
  focus: () => void,
  isEqual: IsEqual,
  lastFieldState: ?FieldState,
  length?: any,
  modified: boolean,
  name: string,
  touched: boolean,
  validateFields: ?(string[]),
  validators: {
    [number]: GetFieldValidator
  },
  valid: boolean,
  visited: boolean
}

export type InternalFormState = {
  active?: string,
  dirtySinceLastSubmit: boolean,
  error?: any,
  errors: Object,
  initialValues?: Object,
  lastSubmittedValues?: Object,
  pristine: boolean,
  submitError?: any,
  submitErrors?: Object,
  submitFailed: boolean,
  submitSucceeded: boolean,
  submitting: boolean,
  valid: boolean,
  validating: number,
  values: Object
}

export type ConfigKey =
  | 'debug'
  | 'destroyOnUnregister'
  | 'initialValues'
  | 'keepDirtyOnReinitialize'
  | 'mutators'
  | 'onSubmit'
  | 'validate'
  | 'validateOnBlur'

export type FormApi = {
  batch: (fn: () => void) => void,
  blur: (name: string) => void,
  change: (name: string, value: ?any) => void,
  focus: (name: string) => void,
  initialize: (data: Object | ((values: Object) => Object)) => void,
  isValidationPaused: () => boolean,
  getFieldState: (field: string) => ?FieldState,
  getRegisteredFields: () => string[],
  getState: () => FormState,
  mutators: { [string]: (...args: any[]) => any },
  pauseValidation: () => void,
  registerField: RegisterField,
  reset: (initialValues?: Object) => void,
  resumeValidation: () => void,
  setConfig: (name: ConfigKey, value: any) => void,
  submit: () => ?Promise<?Object>,
  subscribe: (
    subscriber: FormSubscriber,
    subscription: FormSubscription
  ) => Unsubscribe
}

export type DebugFunction = (
  state: FormState,
  fieldStates: { [string]: FieldState }
) => void

export type MutableState = {
  fieldSubscribers: { [string]: Subscribers<FieldState> },
  fields: {
    [string]: InternalFieldState
  },
  formState: InternalFormState,
  lastFormState?: FormState
}

export type GetIn = (state: Object, complexKey: string) => any
export type SetIn = (
  state: Object,
  key: string,
  value: any,
  destroyArrays?: boolean
) => Object
export type ChangeValue = (
  state: MutableState,
  name: string,
  mutate: (value: any) => any
) => void
export type RenameField = (
  state: MutableState,
  from: string,
  to: string
) => void
export type Tools = {
  changeValue: ChangeValue,
  getIn: GetIn,
  renameField: RenameField,
  setIn: SetIn,
  shallowEqual: IsEqual
}

export type Mutator = (args: any[], state: MutableState, tools: Tools) => any

export type Config = {
  debug?: DebugFunction,
  destroyOnUnregister?: boolean,
  initialValues?: Object,
  keepDirtyOnReinitialize?: boolean,
  mutators?: { [string]: Mutator },
  onSubmit: (
    values: Object,
    form: FormApi,
    callback: ?(errors: ?Object) => ?Object
  ) => ?Object | Promise<?Object> | void,
  validate?: (values: Object) => Object | Promise<Object>,
  validateOnBlur?: boolean
}

export type Decorator = (form: FormApi) => Unsubscribe
