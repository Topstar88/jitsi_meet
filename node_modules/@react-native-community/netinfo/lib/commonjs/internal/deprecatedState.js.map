{"version":3,"sources":["deprecatedState.ts"],"names":["_isSetup","_subscriptions","Set","_latestState","_handler","state","convertedState","DeprecatedUtils","convertState","forEach","handler","setup","State","add","tearDown","remove","clear","latest","Promise","resolve","then","delete"],"mappings":"6QASA,sDAGA,0EAEA,GAAIA,CAAAA,QAAQ,CAAG,KAAf,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAIC,CAAAA,YAAgD,CAAG,IAAvD,CAEA,QAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAmD,CACjD,GAAMC,CAAAA,cAAc,CAAGC,yBAAgBC,YAAhB,CAA6BH,KAA7B,CAAvB,CACAF,YAAY,CAAGG,cAAf,CACAL,cAAc,CAACQ,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACJ,cAAD,CAA1B,EAAvB,EACD,CAEM,QAASK,CAAAA,KAAT,EAAuB,CAE5B,GAAIX,QAAJ,CAAc,CACZ,OACD,CAEDY,eAAMC,GAAN,CAAUT,QAAV,EACD,CAEM,QAASU,CAAAA,QAAT,EAA0B,CAE/B,GAAI,CAACd,QAAL,CAAe,CACb,OACD,CAEDY,eAAMG,MAAN,CAAaX,QAAb,EACAD,YAAY,CAAG,IAAf,CACAF,cAAc,CAACe,KAAf,GACD,CAEM,QAASC,CAAAA,MAAT,EAAwD,CAC7D,GAAId,YAAJ,CAAkB,CAChB,MAAOe,CAAAA,OAAO,CAACC,OAAR,CAAgBhB,YAAhB,CAAP,CACD,CAFD,IAEO,CACL,MAAOS,gBAAMK,MAAN,GAAeG,IAAf,CACL,SAACf,KAAD,CAAwC,CACtCF,YAAY,CAAGI,yBAAgBC,YAAhB,CAA6BH,KAA7B,CAAf,CACA,MAAOF,CAAAA,YAAP,CACD,CAJI,CAAP,CAMD,CACF,CAEM,QAASU,CAAAA,GAAT,CAAaH,OAAb,CAA2D,CAEhET,cAAc,CAACY,GAAf,CAAmBH,OAAnB,EAGA,GAAIP,YAAJ,CAAkB,CAChBO,OAAO,CAACP,YAAD,CAAP,CACD,CAFD,IAEO,CACLc,MAAM,GAAGG,IAAT,CAAcV,OAAd,EACD,CACF,CAEM,QAASK,CAAAA,MAAT,CAAgBL,OAAhB,CAA8D,CACnET,cAAc,CAACoB,MAAf,CAAsBX,OAAtB,EACD,C,aAEc,CACbC,KAAK,CAALA,KADa,CAEbG,QAAQ,CAARA,QAFa,CAGbG,MAAM,CAANA,MAHa,CAIbJ,GAAG,CAAHA,GAJa,CAKbE,MAAM,CAANA,MALa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport State from './state';\nimport * as DeprecatedTypes from './deprecatedTypes';\nimport * as Types from './types';\nimport DeprecatedUtils from './deprecatedUtils';\n\nlet _isSetup = false;\nconst _subscriptions = new Set<DeprecatedTypes.ChangeHandler>();\nlet _latestState: DeprecatedTypes.NetInfoData | null = null;\n\nfunction _handler(state: Types.NetInfoState): void {\n  const convertedState = DeprecatedUtils.convertState(state);\n  _latestState = convertedState;\n  _subscriptions.forEach((handler): void => handler(convertedState));\n}\n\nexport function setup(): void {\n  // Skip if we are already setup\n  if (_isSetup) {\n    return;\n  }\n\n  State.add(_handler);\n}\n\nexport function tearDown(): void {\n  // Skip if we are not setup\n  if (!_isSetup) {\n    return;\n  }\n\n  State.remove(_handler);\n  _latestState = null;\n  _subscriptions.clear();\n}\n\nexport function latest(): Promise<DeprecatedTypes.NetInfoData> {\n  if (_latestState) {\n    return Promise.resolve(_latestState);\n  } else {\n    return State.latest().then(\n      (state): DeprecatedTypes.NetInfoData => {\n        _latestState = DeprecatedUtils.convertState(state);\n        return _latestState;\n      },\n    );\n  }\n}\n\nexport function add(handler: DeprecatedTypes.ChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send the latest state we have on listen\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    latest().then(handler);\n  }\n}\n\nexport function remove(handler: DeprecatedTypes.ChangeHandler): void {\n  _subscriptions.delete(handler);\n}\n\nexport default {\n  setup,\n  tearDown,\n  latest,\n  add,\n  remove,\n};\n"]}