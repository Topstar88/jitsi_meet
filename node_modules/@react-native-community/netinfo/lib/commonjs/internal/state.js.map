{"version":3,"sources":["state.ts"],"names":["DEVICE_CONNECTIVITY_EVENT","_isSetup","_nativeEventSubscription","_internetReachabilitySubscription","_subscriptions","Set","_latestState","fetchCurrentState","Utils","currentState","then","state","InternetReachability","update","convertedState","convertState","setup","NativeInterface","eventEmitter","addListener","forEach","handler","addSubscription","isInternetReachable","nextState","tearDown","remove","clear","latest","Promise","resolve","add","delete"],"mappings":"uWAUA,0EACA,oFAEA,sDAEA,GAAMA,CAAAA,yBAAyB,CAAG,gCAAlC,CAEA,GAAIC,CAAAA,QAAQ,CAAG,KAAf,CACA,GAAIC,CAAAA,wBAAwD,CAAG,IAA/D,CACA,GAAIC,CAAAA,iCAAsD,CAAG,IAA7D,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAIC,CAAAA,YAAuC,CAAG,IAA9C,CAEA,QAASC,CAAAA,iBAAT,EAA0D,CACxD,MAAOC,gBAAMC,YAAN,GAAqBC,IAArB,CACL,SAACC,KAAD,CAA+B,CAE7BC,8BAAqBC,MAArB,CAA4BF,KAA5B,EAGA,GAAMG,CAAAA,cAAc,CAAGN,eAAMO,YAAN,CAAmBJ,KAAnB,CAAvB,CACAL,YAAY,CAAGQ,cAAf,CACA,MAAOA,CAAAA,cAAP,CACD,CATI,CAAP,CAWD,CAEM,QAASE,CAAAA,KAAT,EAAuB,CAE5B,GAAIf,QAAJ,CAAc,CACZ,OACD,CAGDC,wBAAwB,CAAGe,yBAAgBC,YAAhB,CAA6BC,WAA7B,CACzBnB,yBADyB,CAEzB,SAACW,KAAD,CAAiB,CAEfC,8BAAqBC,MAArB,CAA4BF,KAA5B,EAGA,GAAMG,CAAAA,cAAc,CAAGN,eAAMO,YAAN,CAAmBJ,KAAnB,CAAvB,CAGAL,YAAY,CAAGQ,cAAf,CACAV,cAAc,CAACgB,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACP,cAAD,CAA1B,EAAvB,EACD,CAZwB,CAA3B,CAgBAP,iBAAiB,GAGjBJ,iCAAiC,CAAGS,8BAAqBU,eAArB,CAClC,SAACC,mBAAD,CAA+B,CAC7B,GAAI,CAACjB,YAAL,CAAmB,CACjB,OACD,CAED,GAAMkB,CAAAA,SAAS,+BACVlB,YADU,EAEbiB,mBAAmB,CAAnBA,mBAFa,EAAf,CAIAjB,YAAY,CAAGkB,SAAf,CACApB,cAAc,CAACgB,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACG,SAAD,CAA1B,EAAvB,EACD,CAZiC,CAApC,CAgBAvB,QAAQ,CAAG,IAAX,CACD,CAEM,QAASwB,CAAAA,QAAT,EAA0B,CAE/B,GAAI,CAACxB,QAAL,CAAe,CACb,OACD,CAED,GAAIC,wBAAJ,CAA8B,CAC5BA,wBAAwB,CAACwB,MAAzB,GACD,CACDtB,cAAc,CAACuB,KAAf,GACAf,8BAAqBe,KAArB,GACA,GAAIxB,iCAAJ,CAAuC,CACrCA,iCAAiC,GAClC,CAGDF,QAAQ,CAAG,KAAX,CACD,CAEM,QAAS2B,CAAAA,MAAT,EAA+C,CACpD,GAAItB,YAAJ,CAAkB,CAChB,MAAOuB,CAAAA,OAAO,CAACC,OAAR,CAAgBxB,YAAhB,CAAP,CACD,CAFD,IAEO,CACL,MAAOC,CAAAA,iBAAiB,EAAxB,CACD,CACF,CAEM,QAASwB,CAAAA,GAAT,CAAaV,OAAb,CAAwD,CAE7DjB,cAAc,CAAC2B,GAAf,CAAmBV,OAAnB,EAGA,GAAIf,YAAJ,CAAkB,CAChBe,OAAO,CAACf,YAAD,CAAP,CACD,CAFD,IAEO,CACLsB,MAAM,GAAGlB,IAAT,CAAcW,OAAd,EACD,CACF,CAEM,QAASK,CAAAA,MAAT,CAAgBL,OAAhB,CAA2D,CAChEjB,cAAc,CAAC4B,MAAf,CAAsBX,OAAtB,EACD,C,aAEc,CACbL,KAAK,CAALA,KADa,CAEbS,QAAQ,CAARA,QAFa,CAGbG,MAAM,CAANA,MAHa,CAIbG,GAAG,CAAHA,GAJa,CAKbL,MAAM,CAANA,MALa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport Utils from './utils';\n\nconst DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\nlet _isSetup = false;\nlet _nativeEventSubscription: NativeEventSubscription | null = null;\nlet _internetReachabilitySubscription: (() => void) | null = null;\nconst _subscriptions = new Set<Types.NetInfoChangeHandler>();\nlet _latestState: Types.NetInfoState | null = null;\n\nfunction fetchCurrentState(): Promise<Types.NetInfoState> {\n  return Utils.currentState().then(\n    (state): Types.NetInfoState => {\n      // Update the internet reachability module\n      InternetReachability.update(state);\n\n      // Convert and store the new state\n      const convertedState = Utils.convertState(state);\n      _latestState = convertedState;\n      return convertedState;\n    },\n  );\n}\n\nexport function setup(): void {\n  // Skip if we are already setup\n  if (_isSetup) {\n    return;\n  }\n\n  // Add the subscription to the natvie events\n  _nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n    DEVICE_CONNECTIVITY_EVENT,\n    (state): void => {\n      // Update the internet reachability module\n      InternetReachability.update(state);\n\n      // Convert the state from native to JS shape\n      const convertedState = Utils.convertState(state);\n\n      // Update the listeners\n      _latestState = convertedState;\n      _subscriptions.forEach((handler): void => handler(convertedState));\n    },\n  );\n\n  // Fetch the current state from the native module\n  fetchCurrentState();\n\n  // Add the listener to the internet connectivity events\n  _internetReachabilitySubscription = InternetReachability.addSubscription(\n    (isInternetReachable): void => {\n      if (!_latestState) {\n        return;\n      }\n\n      const nextState = {\n        ..._latestState,\n        isInternetReachable,\n      } as Types.NetInfoState;\n      _latestState = nextState;\n      _subscriptions.forEach((handler): void => handler(nextState));\n    },\n  );\n\n  // We are are now setup\n  _isSetup = true;\n}\n\nexport function tearDown(): void {\n  // Skip if we are not setup\n  if (!_isSetup) {\n    return;\n  }\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n  }\n  _subscriptions.clear();\n  InternetReachability.clear();\n  if (_internetReachabilitySubscription) {\n    _internetReachabilitySubscription();\n  }\n\n  // We are are no longer setup\n  _isSetup = false;\n}\n\nexport function latest(): Promise<Types.NetInfoState> {\n  if (_latestState) {\n    return Promise.resolve(_latestState);\n  } else {\n    return fetchCurrentState();\n  }\n}\n\nexport function add(handler: Types.NetInfoChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    latest().then(handler);\n  }\n}\n\nexport function remove(handler: Types.NetInfoChangeHandler): void {\n  _subscriptions.delete(handler);\n}\n\nexport default {\n  setup,\n  tearDown,\n  latest,\n  add,\n  remove,\n};\n"]}