{"version":3,"sources":["internetReachability.ts"],"names":["REACHABILITY_URL","LONG_TIMEOUT","SHORT_TIMEOUT","_subscriptions","Set","_isInternetReachable","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","setIsInternetReachable","isInternetReachable","forEach","listener","checkInternetReachability","hasCanceled","promise","fetch","then","response","status","nextTimeoutInterval","setTimeout","catch","cancel","setExpectsConnection","expectsConnection","clearTimeout","clear","update","state","isConnected","currentState","addSubscription","add","delete"],"mappings":"oMAWA,GAAMA,CAAAA,gBAAgB,CAAG,0CAAzB,CACA,GAAMC,CAAAA,YAAY,CAAG,GAAK,IAA1B,CACA,GAAMC,CAAAA,aAAa,CAAG,EAAI,IAA1B,CAEA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CAGA,GAAIC,CAAAA,oBAAoC,CAAG,IAA3C,CACA,GAAIC,CAAAA,wCAAiF,CAAG,IAAxF,CACA,GAAIC,CAAAA,qBAAoC,CAAG,IAA3C,CAEA,QAASC,CAAAA,sBAAT,CAAgCC,mBAAhC,CAA2E,CACzE,GAAIJ,oBAAoB,GAAKI,mBAA7B,CAAkD,CAChD,OACD,CAEDJ,oBAAoB,CAAGI,mBAAvB,CACAN,cAAc,CAACO,OAAf,CACE,SAACC,QAAD,CAAoB,CAClBA,QAAQ,CAACN,oBAAD,CAAR,CACD,CAHH,EAKD,CAMD,QAASO,CAAAA,yBAAT,EAAuE,CAErE,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CAEA,GAAMC,CAAAA,OAAO,CAAGC,KAAK,CAACf,gBAAD,CAAL,CACbgB,IADa,CAEZ,SAACC,QAAD,CAAoB,CAClB,GAAI,CAACJ,WAAL,CAAkB,CAChBL,sBAAsB,CAACS,QAAQ,CAACC,MAAT,GAAoB,GAArB,CAAtB,CACA,GAAMC,CAAAA,mBAAmB,CAAGd,oBAAoB,CAC5CJ,YAD4C,CAE5CC,aAFJ,CAGAK,qBAAqB,CAAGa,UAAU,CAChCR,yBADgC,CAEhCO,mBAFgC,CAAlC,CAID,CACF,CAbW,EAebE,KAfa,CAgBZ,UAAY,CACVb,sBAAsB,CAAC,KAAD,CAAtB,CACAD,qBAAqB,CAAGa,UAAU,CAChCR,yBADgC,CAEhCV,aAFgC,CAAlC,CAID,CAtBW,CAAhB,CAyBA,MAAO,CACLY,OAAO,CAAPA,OADK,CAELQ,MAAM,CAAE,iBAAY,CAClBT,WAAW,CAAG,IAAd,CACD,CAJI,CAAP,CAMD,CAED,QAASU,CAAAA,oBAAT,CAA8BC,iBAA9B,CAAgE,CAE9D,GAAIlB,wCAAwC,GAAK,IAAjD,CAAuD,CACrDA,wCAAwC,CAACgB,MAAzC,GACAhB,wCAAwC,CAAG,IAA3C,CACD,CAED,GAAIC,qBAAqB,GAAK,IAA9B,CAAoC,CAClCkB,YAAY,CAAClB,qBAAD,CAAZ,CACAA,qBAAqB,CAAG,IAAxB,CACD,CAED,GAAIiB,iBAAJ,CAAuB,CAGrB,GAAI,CAACnB,oBAAL,CAA2B,CACzBG,sBAAsB,CAAC,IAAD,CAAtB,CACD,CAEDF,wCAAwC,CAAGM,yBAAyB,EAApE,CACD,CARD,IAQO,CAELJ,sBAAsB,CAAC,KAAD,CAAtB,CACD,CACF,CAEM,QAASkB,CAAAA,KAAT,EAAuB,CAE5B,GAAIpB,wCAAwC,GAAK,IAAjD,CAAuD,CACrDA,wCAAwC,CAACgB,MAAzC,GACAhB,wCAAwC,CAAG,IAA3C,CACD,CAGD,GAAIC,qBAAqB,GAAK,IAA9B,CAAoC,CAClCkB,YAAY,CAAClB,qBAAD,CAAZ,CACAA,qBAAqB,CAAG,IAAxB,CACD,CAGDJ,cAAc,CAACuB,KAAf,GACD,CAEM,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAoE,CACzE,GAAI,MAAOA,CAAAA,KAAK,CAACnB,mBAAb,GAAqC,SAAzC,CAAoD,CAClDD,sBAAsB,CAACoB,KAAK,CAACnB,mBAAP,CAAtB,CACD,CAFD,IAEO,CACLc,oBAAoB,CAACK,KAAK,CAACC,WAAP,CAApB,CACD,CACF,CAEM,QAASC,CAAAA,YAAT,EAAwC,CAC7C,MAAOzB,CAAAA,oBAAP,CACD,CAEM,QAAS0B,CAAAA,eAAT,CACLpB,QADK,CAEO,CACZR,cAAc,CAAC6B,GAAf,CAAmBrB,QAAnB,EAEA,MAAO,WAAY,CACjBR,cAAc,CAAC8B,MAAf,CAAsBtB,QAAtB,EACD,CAFD,CAGD,C,aAEc,CACbgB,MAAM,CAANA,MADa,CAEbG,YAAY,CAAZA,YAFa,CAGbJ,KAAK,CAALA,KAHa,CAIbK,eAAe,CAAfA,eAJa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\n\nconst REACHABILITY_URL = 'https://clients3.google.com/generate_204';\nconst LONG_TIMEOUT = 60 * 1000; // 60s\nconst SHORT_TIMEOUT = 5 * 1000; // 5s\n\nconst _subscriptions = new Set<\n  PrivateTypes.NetInfoInternetReachabilityChangeListener\n>();\nlet _isInternetReachable: boolean | null = null;\nlet _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\nlet _currentTimeoutHandle: number | null = null;\n\nfunction setIsInternetReachable(isInternetReachable: boolean | null): void {\n  if (_isInternetReachable === isInternetReachable) {\n    return;\n  }\n\n  _isInternetReachable = isInternetReachable;\n  _subscriptions.forEach(\n    (listener): void => {\n      listener(_isInternetReachable);\n    },\n  );\n}\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\nfunction checkInternetReachability(): InternetReachabilityCheckHandler {\n  // We wraop the promise to allow us to cancel the pending request, if needed\n  let hasCanceled = false;\n\n  const promise = fetch(REACHABILITY_URL)\n    .then(\n      (response): void => {\n        if (!hasCanceled) {\n          setIsInternetReachable(response.status === 204);\n          const nextTimeoutInterval = _isInternetReachable\n            ? LONG_TIMEOUT\n            : SHORT_TIMEOUT;\n          _currentTimeoutHandle = setTimeout(\n            checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        }\n      },\n    )\n    .catch(\n      (): void => {\n        setIsInternetReachable(false);\n        _currentTimeoutHandle = setTimeout(\n          checkInternetReachability,\n          SHORT_TIMEOUT,\n        );\n      },\n    );\n\n  return {\n    promise,\n    cancel: (): void => {\n      hasCanceled = true;\n    },\n  };\n}\n\nfunction setExpectsConnection(expectsConnection: boolean): void {\n  // Cancel any pending check\n  if (_currentInternetReachabilityCheckHandler !== null) {\n    _currentInternetReachabilityCheckHandler.cancel();\n    _currentInternetReachabilityCheckHandler = null;\n  }\n  // Cancel any pending timeout\n  if (_currentTimeoutHandle !== null) {\n    clearTimeout(_currentTimeoutHandle);\n    _currentTimeoutHandle = null;\n  }\n\n  if (expectsConnection) {\n    // If we expect a connection, start the process for finding if we have one\n    // Set the state to \"null\" if it was previously false\n    if (!_isInternetReachable) {\n      setIsInternetReachable(null);\n    }\n    // Start a network request to check for internet\n    _currentInternetReachabilityCheckHandler = checkInternetReachability();\n  } else {\n    // If we don't expect a connection, just change the state to \"false\"\n    setIsInternetReachable(false);\n  }\n}\n\nexport function clear(): void {\n  // Cancel any pending check\n  if (_currentInternetReachabilityCheckHandler !== null) {\n    _currentInternetReachabilityCheckHandler.cancel();\n    _currentInternetReachabilityCheckHandler = null;\n  }\n\n  // Cancel any pending timeout\n  if (_currentTimeoutHandle !== null) {\n    clearTimeout(_currentTimeoutHandle);\n    _currentTimeoutHandle = null;\n  }\n\n  // Clear the subscriptions\n  _subscriptions.clear();\n}\n\nexport function update(state: PrivateTypes.NetInfoNativeModuleState): void {\n  if (typeof state.isInternetReachable === 'boolean') {\n    setIsInternetReachable(state.isInternetReachable);\n  } else {\n    setExpectsConnection(state.isConnected);\n  }\n}\n\nexport function currentState(): boolean | null {\n  return _isInternetReachable;\n}\n\nexport function addSubscription(\n  listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n): () => void {\n  _subscriptions.add(listener);\n\n  return (): void => {\n    _subscriptions.delete(listener);\n  };\n}\n\nexport default {\n  update,\n  currentState,\n  clear,\n  addSubscription,\n};\n"]}