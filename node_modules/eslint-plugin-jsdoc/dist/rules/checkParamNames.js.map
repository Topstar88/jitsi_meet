{"version":3,"sources":["../../src/rules/checkParamNames.js"],"names":["validateParameterNames","targetTagName","functionParameterNames","jsdocParameterNames","report","_","some","jsdocParameterName","index","functionParameterName","join","validateParameterNamesDeep","lastRealParameter","isPropertyPath","includes","pathRootNodeName","slice","indexOf","utils","getFunctionParameterNames","getJsdocParameterNames","jsdocParameterNamesDeep","getJsdocParameterNamesDeep","getPreferredTagName","isError"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,aAAD,EAAyBC,sBAAzB,EAAiEC,mBAAjE,EAAsGC,MAAtG,EAA4H;AACzJ,SAAOC,iBAAEC,IAAF,CAAOH,mBAAP,EAA4B,UAACI,kBAAD,EAAqBC,KAArB,EAA+B;AAChE,QAAMC,wBAAwBP,uBAAuBM,KAAvB,CAA9B;;AAEA,QAAI,CAACC,qBAAL,EAA4B;AAC1BL,aAAO,MAAMH,aAAN,GAAsB,IAAtB,GAA6BM,kBAA7B,GAAkD,kDAAzD;;AAEA,aAAO,IAAP;AACD;;AAED,QAAIE,0BAA0B,iBAA9B,EAAiD;AAC/C,aAAO,KAAP;AACD;;AAED,QAAIA,0BAA0BF,kBAA9B,EAAkD;AAChDH,aAAO,eAAeH,aAAf,GAA+B,gBAA/B,GAAkDC,uBAAuBQ,IAAvB,CAA4B,IAA5B,CAAlD,GAAsF,UAAtF,GAAmGP,oBAAoBO,IAApB,CAAyB,IAAzB,CAAnG,GAAoI,IAA3I;;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GApBM,CAAP;AAqBD,CAtBD;;AAwBA,IAAMC,6BAA6B,SAA7BA,0BAA6B,CAACV,aAAD,EAAyBE,mBAAzB,EAA8DC,MAA9D,EAAoF;AACrH,MAAIQ,0BAAJ;;AAEA,SAAOP,iBAAEC,IAAF,CAAOH,mBAAP,EAA4B,UAACI,kBAAD,EAAwB;AACzD,QAAMM,iBAAiBR,iBAAES,QAAF,CAAWP,kBAAX,EAA+B,GAA/B,CAAvB;;AAEA,QAAIM,cAAJ,EAAoB;AAClB,UAAI,CAACD,iBAAL,EAAwB;AACtBR,eAAO,MAAMH,aAAN,GAAsB,sBAAtB,GAA+CM,kBAA/C,GAAoE,uCAA3E;;AAEA,eAAO,IAAP;AACD;;AAED,UAAMQ,mBAAmBR,mBAAmBS,KAAnB,CAAyB,CAAzB,EAA4BT,mBAAmBU,OAAnB,CAA2B,GAA3B,CAA5B,CAAzB;;AAEA,UAAIF,qBAAqBH,iBAAzB,EAA4C;AAC1CR,eAAO,MAAMH,aAAN,GAAsB,sBAAtB,GAA+CM,kBAA/C,GAAoE,sBAApE,GAA6FQ,gBAA7F,GAAgH,mDAAhH,GAAsKH,iBAAtK,GAA0L,KAAjM;;AAEA,eAAO,IAAP;AACD;AACF,KAdD,MAcO;AACLA,0BAAoBL,kBAApB;AACD;;AAED,WAAO,KAAP;AACD,GAtBM,CAAP;AAuBD,CA1BD;;kBA4Be,4BAAa,gBAGtB;AAAA,MAFJH,MAEI,QAFJA,MAEI;AAAA,MADJc,KACI,QADJA,KACI;;AACJ,MAAMhB,yBAAyBgB,MAAMC,yBAAN,EAA/B;AACA,MAAMhB,sBAAsBe,MAAME,sBAAN,EAA5B;AACA,MAAMC,0BAA0BH,MAAMI,0BAAN,EAAhC;AACA,MAAMrB,gBAAgBiB,MAAMK,mBAAN,CAA0B,OAA1B,CAAtB;AACA,MAAMC,UAAUxB,uBAAuBC,aAAvB,EAAsCC,sBAAtC,EAA8DC,mBAA9D,EAAmFC,MAAnF,CAAhB;;AAEA,MAAIoB,OAAJ,EAAa;AACX;AACD;;AAEDb,6BAA2BV,aAA3B,EAA0CoB,uBAA1C,EAAmEjB,MAAnE;AACD,CAfc,C","file":"checkParamNames.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdocParameterNames : Array<string>, report : Function) => {\n  return _.some(jsdocParameterNames, (jsdocParameterName, index) => {\n    const functionParameterName = functionParameterNames[index];\n\n    if (!functionParameterName) {\n      report('@' + targetTagName + ' \"' + jsdocParameterName + '\" does not match an existing function parameter.');\n\n      return true;\n    }\n\n    if (functionParameterName === '<ObjectPattern>') {\n      return false;\n    }\n\n    if (functionParameterName !== jsdocParameterName) {\n      report('Expected @' + targetTagName + ' names to be \"' + functionParameterNames.join(', ') + '\". Got \"' + jsdocParameterNames.join(', ') + '\".');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, report : Function) => {\n  let lastRealParameter;\n\n  return _.some(jsdocParameterNames, (jsdocParameterName) => {\n    const isPropertyPath = _.includes(jsdocParameterName, '.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n        return true;\n      }\n\n      const pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' + pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils\n}) => {\n  const functionParameterNames = utils.getFunctionParameterNames();\n  const jsdocParameterNames = utils.getJsdocParameterNames();\n  const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n  const targetTagName = utils.getPreferredTagName('param');\n  const isError = validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report);\n\n  if (isError) {\n    return;\n  }\n\n  validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n});\n"]}