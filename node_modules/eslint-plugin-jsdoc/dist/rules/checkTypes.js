'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _jsdoctypeparser = require('jsdoctypeparser');

var _iterateJsdoc = require('./../iterateJsdoc');

var _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var targetTags = ['class', 'constant', 'enum', 'member', 'module', 'namespace', 'param', 'property', 'returns', 'throws', 'type', 'typedef'];

var targetTagAliases = ['constructor', 'const', 'var', 'arg', 'argument', 'prop', 'return', 'exception'];

targetTags = targetTags.concat(targetTagAliases);

var strictNativeTypes = ['boolean', 'number', 'string', 'Array', 'Object', 'RegExp', 'Date', 'Function'];

exports.default = (0, _iterateJsdoc2.default)(function (_ref) {
  var jsdoc = _ref.jsdoc,
      jsdocNode = _ref.jsdocNode,
      sourceCode = _ref.sourceCode,
      report = _ref.report;

  var jsdocTags = _lodash2.default.filter(jsdoc.tags, function (tag) {
    return _lodash2.default.includes(targetTags, tag.tag);
  });

  _lodash2.default.forEach(jsdocTags, function (jsdocTag) {
    var invalidTypes = [];
    var typeAst = void 0;

    try {
      typeAst = (0, _jsdoctypeparser.parse)(jsdocTag.type);
    } catch (error) {
      return;
    }

    (0, _jsdoctypeparser.traverse)(typeAst, function (node) {
      if (node.type === 'NAME') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = strictNativeTypes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var strictNativeType = _step.value;

            if (strictNativeType.toLowerCase() === node.name.toLowerCase() && strictNativeType !== node.name) {
              invalidTypes.push(node.name);
              node.name = strictNativeType;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    });

    if (invalidTypes) {
      var fixedType = (0, _jsdoctypeparser.publish)(typeAst);

      _lodash2.default.forEach(invalidTypes, function (invalidType) {
        var fix = function fix(fixer) {
          return fixer.replaceText(jsdocNode, sourceCode.getText(jsdocNode).replace('{' + jsdocTag.type + '}', '{' + fixedType + '}'));
        };

        report('Invalid JSDoc @' + jsdocTag.tag + ' "' + jsdocTag.name + '" type "' + invalidType + '".', fix);
      });
    }
  });
});
module.exports = exports['default'];
//# sourceMappingURL=checkTypes.js.map