'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _jsdoctypeparser = require('jsdoctypeparser');

var _iterateJsdoc = require('../iterateJsdoc');

var _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extraTypes = ['string', 'number', 'boolean', 'any', '*'];

exports.default = (0, _iterateJsdoc2.default)(function (_ref) {
  var context = _ref.context,
      jsdoc = _ref.jsdoc,
      report = _ref.report,
      sourceCode = _ref.sourceCode;

  var scopeManager = sourceCode.scopeManager;
  var globalScope = scopeManager.globalScope;

  var typedefDeclarations = (0, _lodash2.default)(context.getAllComments()).filter(function (comment) {
    return _lodash2.default.startsWith(comment.value, '*');
  }).map(_iterateJsdoc.parseComment).flatMap(function (doc) {
    return (doc.tags || []).filter(function (tag) {
      return tag.tag === 'typedef';
    });
  }).map(function (tag) {
    return tag.name;
  }).value();

  var definedTypes = globalScope.variables.map(function (variable) {
    return variable.name;
  })

  // If the file is a module, concat the variables from the module scope.
  .concat(scopeManager.isModule() ? globalScope.childScopes[0].variables.map(function (variable) {
    return variable.name;
  }) : []).concat(extraTypes).concat(typedefDeclarations);

  _lodash2.default.forEach(jsdoc.tags, function (tag) {
    var parsedType = void 0;

    try {
      parsedType = (0, _jsdoctypeparser.parse)(tag.type);
    } catch (error) {
      // On syntax error, will be handled by valid-types.
      return;
    }

    (0, _jsdoctypeparser.traverse)(parsedType, function (node) {
      if (node.type === 'NAME') {
        if (!_lodash2.default.includes(definedTypes, node.name)) {
          report('The type \'' + node.name + '\' is undefined.');
        } else if (!_lodash2.default.includes(extraTypes, node.name)) {
          context.markVariableAsUsed(node.name);
        }
      }
    });
  });
});
module.exports = exports['default'];
//# sourceMappingURL=noUndefinedTypes.js.map