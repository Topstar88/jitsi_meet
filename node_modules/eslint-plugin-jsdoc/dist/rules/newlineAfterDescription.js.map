{"version":3,"sources":["../../src/rules/newlineAfterDescription.js"],"names":["jsdoc","report","context","jsdocNode","sourceCode","indent","always","description","tags","length","_","has","options","descriptionEndsWithANewline","startsWith","source","slice","fixer","sourceLines","getText","split","lastDescriptionLine","findLastIndex","line","includes","last","splice","replaceText","join"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe,4BAAa,gBAOtB;AAAA,MANJA,KAMI,QANJA,KAMI;AAAA,MALJC,MAKI,QALJA,MAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,MACI,QADJA,MACI;;AACJ,MAAIC,eAAJ;;AAEA,MAAI,CAACN,MAAMO,WAAP,IAAsB,CAACP,MAAMQ,IAAN,CAAWC,MAAtC,EAA8C;AAC5C;AACD;;AAED,MAAIC,iBAAEC,GAAF,CAAMT,QAAQU,OAAd,EAAuB,CAAvB,CAAJ,EAA+B;AAC7BN,aAASJ,QAAQU,OAAR,CAAgB,CAAhB,MAAuB,QAAhC;AACD,GAFD,MAEO;AACLN,aAAS,IAAT;AACD;;AAED;AACA;AACA;AACA,MAAMO,8BAA8BH,iBAAEI,UAAF,CAAad,MAAMe,MAAN,CAAaC,KAAb,CAAmBhB,MAAMO,WAAN,CAAkBE,MAArC,CAAb,EAA2D,MAA3D,CAApC;;AAEA,MAAIH,MAAJ,EAAY;AACV,QAAI,CAACO,2BAAL,EAAkC;AAChCZ,aAAO,mEAAP,EAA4E,UAACgB,KAAD,EAAW;AACrF,YAAMC,cAAcd,WAAWe,OAAX,CAAmBhB,SAAnB,EAA8BiB,KAA9B,CAAoC,IAApC,CAApB;AACA,YAAMC,sBAAsBX,iBAAEY,aAAF,CAAgBJ,WAAhB,EAA6B,UAACK,IAAD,EAAU;AACjE,iBAAOb,iBAAEc,QAAF,CAAWD,IAAX,EAAiBb,iBAAEe,IAAF,CAAOzB,MAAMO,WAAN,CAAkBa,KAAlB,CAAwB,IAAxB,CAAP,CAAjB,CAAP;AACD,SAF2B,CAA5B;;AAIA;AACAF,oBAAYQ,MAAZ,CAAmBL,sBAAsB,CAAzC,EAA4C,CAA5C,EAA+ChB,SAAS,KAAxD;;AAEA,eAAOY,MAAMU,WAAN,CAAkBxB,SAAlB,EAA6Be,YAAYU,IAAZ,CAAiB,IAAjB,CAA7B,CAAP;AACD,OAVD;AAWD;AACF,GAdD,MAcO,IAAIf,2BAAJ,EAAiC;AACtCZ,WAAO,oEAAP,EAA6E,UAACgB,KAAD,EAAW;AACtF,UAAMC,cAAcd,WAAWe,OAAX,CAAmBhB,SAAnB,EAA8BiB,KAA9B,CAAoC,IAApC,CAApB;AACA,UAAMC,sBAAsBX,iBAAEY,aAAF,CAAgBJ,WAAhB,EAA6B,UAACK,IAAD,EAAU;AACjE,eAAOb,iBAAEc,QAAF,CAAWD,IAAX,EAAiBb,iBAAEe,IAAF,CAAOzB,MAAMO,WAAN,CAAkBa,KAAlB,CAAwB,IAAxB,CAAP,CAAjB,CAAP;AACD,OAF2B,CAA5B;;AAIA;AACAF,kBAAYQ,MAAZ,CAAmBL,sBAAsB,CAAzC,EAA4C,CAA5C;;AAEA,aAAOJ,MAAMU,WAAN,CAAkBxB,SAAlB,EAA6Be,YAAYU,IAAZ,CAAiB,IAAjB,CAA7B,CAAP;AACD,KAVD;AAWD;AACF,CApDc,C","file":"newlineAfterDescription.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  context,\n  jsdocNode,\n  sourceCode,\n  indent\n}) => {\n  let always;\n\n  if (!jsdoc.description || !jsdoc.tags.length) {\n    return;\n  }\n\n  if (_.has(context.options, 0)) {\n    always = context.options[0] === 'always';\n  } else {\n    always = true;\n  }\n\n  // The contents of the jsdoc.source and of jsdoc.description is left trimmed.\n  // The contents of the jsdoc.description is right trimmed.\n  // This gets the text following the description.\n  const descriptionEndsWithANewline = _.startsWith(jsdoc.source.slice(jsdoc.description.length), '\\n\\n');\n\n  if (always) {\n    if (!descriptionEndsWithANewline) {\n      report('There must be a newline after the description of the JSDoc block.', (fixer) => {\n        const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n        const lastDescriptionLine = _.findLastIndex(sourceLines, (line) => {\n          return _.includes(line, _.last(jsdoc.description.split('\\n')));\n        });\n\n        // Add the new line\n        sourceLines.splice(lastDescriptionLine + 1, 0, indent + ' * ');\n\n        return fixer.replaceText(jsdocNode, sourceLines.join('\\n'));\n      });\n    }\n  } else if (descriptionEndsWithANewline) {\n    report('There must be no newline after the description of the JSDoc block.', (fixer) => {\n      const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n      const lastDescriptionLine = _.findLastIndex(sourceLines, (line) => {\n        return _.includes(line, _.last(jsdoc.description.split('\\n')));\n      });\n\n      // Remove the extra line\n      sourceLines.splice(lastDescriptionLine + 1, 1);\n\n      return fixer.replaceText(jsdocNode, sourceLines.join('\\n'));\n    });\n  }\n});\n"]}