{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["targetTags","targetTagAliases","concat","strictNativeTypes","jsdoc","jsdocNode","sourceCode","report","jsdocTags","_","filter","tags","tag","includes","forEach","jsdocTag","invalidTypes","typeAst","type","error","node","strictNativeType","toLowerCase","name","push","fixedType","invalidType","fix","fixer","replaceText","getText","replace"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,aAAa,CACf,OADe,EAEf,UAFe,EAGf,MAHe,EAIf,QAJe,EAKf,QALe,EAMf,WANe,EAOf,OAPe,EAQf,UARe,EASf,SATe,EAUf,QAVe,EAWf,MAXe,EAYf,SAZe,CAAjB;;AAeA,IAAMC,mBAAmB,CACvB,aADuB,EAEvB,OAFuB,EAGvB,KAHuB,EAIvB,KAJuB,EAKvB,UALuB,EAMvB,MANuB,EAOvB,QAPuB,EAQvB,WARuB,CAAzB;;AAWAD,aAAaA,WAAWE,MAAX,CAAkBD,gBAAlB,CAAb;;AAEA,IAAME,oBAAoB,CACxB,SADwB,EAExB,QAFwB,EAGxB,QAHwB,EAIxB,OAJwB,EAKxB,QALwB,EAMxB,QANwB,EAOxB,MAPwB,EAQxB,UARwB,CAA1B;;kBAWe,4BAAa,gBAKtB;AAAA,MAJJC,KAII,QAJJA,KAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,UAEI,QAFJA,UAEI;AAAA,MADJC,MACI,QADJA,MACI;;AACJ,MAAMC,YAAYC,iBAAEC,MAAF,CAASN,MAAMO,IAAf,EAAqB,UAACC,GAAD,EAAS;AAC9C,WAAOH,iBAAEI,QAAF,CAAWb,UAAX,EAAuBY,IAAIA,GAA3B,CAAP;AACD,GAFiB,CAAlB;;AAIAH,mBAAEK,OAAF,CAAUN,SAAV,EAAqB,UAACO,QAAD,EAAc;AACjC,QAAMC,eAAe,EAArB;AACA,QAAIC,gBAAJ;;AAEA,QAAI;AACFA,gBAAU,4BAAMF,SAASG,IAAf,CAAV;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACD;;AAED,mCAASF,OAAT,EAAkB,UAACG,IAAD,EAAU;AAC1B,UAAIA,KAAKF,IAAL,KAAc,MAAlB,EAA0B;AAAA;AAAA;AAAA;;AAAA;AACxB,+BAA+Bf,iBAA/B,8HAAkD;AAAA,gBAAvCkB,gBAAuC;;AAChD,gBAAIA,iBAAiBC,WAAjB,OAAmCF,KAAKG,IAAL,CAAUD,WAAV,EAAnC,IAA8DD,qBAAqBD,KAAKG,IAA5F,EAAkG;AAChGP,2BAAaQ,IAAb,CAAkBJ,KAAKG,IAAvB;AACAH,mBAAKG,IAAL,GAAYF,gBAAZ;AACD;AACF;AANuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOzB;AACF,KATD;;AAWA,QAAIL,YAAJ,EAAkB;AAChB,UAAMS,YAAY,8BAAQR,OAAR,CAAlB;;AAEAR,uBAAEK,OAAF,CAAUE,YAAV,EAAwB,UAACU,WAAD,EAAiB;AACvC,YAAMC,MAAM,SAANA,GAAM,CAACC,KAAD,EAAW;AACrB,iBAAOA,MAAMC,WAAN,CAAkBxB,SAAlB,EAA6BC,WAAWwB,OAAX,CAAmBzB,SAAnB,EAA8B0B,OAA9B,CAAsC,MAAMhB,SAASG,IAAf,GAAsB,GAA5D,EAAiE,MAAMO,SAAN,GAAkB,GAAnF,CAA7B,CAAP;AACD,SAFD;;AAIAlB,eAAO,oBAAoBQ,SAASH,GAA7B,GAAmC,IAAnC,GAA0CG,SAASQ,IAAnD,GAA0D,UAA1D,GAAuEG,WAAvE,GAAqF,IAA5F,EAAkGC,GAAlG;AACD,OAND;AAOD;AACF,GAhCD;AAiCD,CA3Cc,C","file":"checkTypes.js","sourcesContent":["import _ from 'lodash';\nimport {parse, traverse, publish} from 'jsdoctypeparser';\nimport iterateJsdoc from './../iterateJsdoc';\n\nlet targetTags = [\n  'class',\n  'constant',\n  'enum',\n  'member',\n  'module',\n  'namespace',\n  'param',\n  'property',\n  'returns',\n  'throws',\n  'type',\n  'typedef'\n];\n\nconst targetTagAliases = [\n  'constructor',\n  'const',\n  'var',\n  'arg',\n  'argument',\n  'prop',\n  'return',\n  'exception'\n];\n\ntargetTags = targetTags.concat(targetTagAliases);\n\nconst strictNativeTypes = [\n  'boolean',\n  'number',\n  'string',\n  'Array',\n  'Object',\n  'RegExp',\n  'Date',\n  'Function'\n];\n\nexport default iterateJsdoc(({\n  jsdoc,\n  jsdocNode,\n  sourceCode,\n  report\n}) => {\n  const jsdocTags = _.filter(jsdoc.tags, (tag) => {\n    return _.includes(targetTags, tag.tag);\n  });\n\n  _.forEach(jsdocTags, (jsdocTag) => {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = parse(jsdocTag.type);\n    } catch (error) {\n      return;\n    }\n\n    traverse(typeAst, (node) => {\n      if (node.type === 'NAME') {\n        for (const strictNativeType of strictNativeTypes) {\n          if (strictNativeType.toLowerCase() === node.name.toLowerCase() && strictNativeType !== node.name) {\n            invalidTypes.push(node.name);\n            node.name = strictNativeType;\n          }\n        }\n      }\n    });\n\n    if (invalidTypes) {\n      const fixedType = publish(typeAst);\n\n      _.forEach(invalidTypes, (invalidType) => {\n        const fix = (fixer) => {\n          return fixer.replaceText(jsdocNode, sourceCode.getText(jsdocNode).replace('{' + jsdocTag.type + '}', '{' + fixedType + '}'));\n        };\n\n        report('Invalid JSDoc @' + jsdocTag.tag + ' \"' + jsdocTag.name + '\" type \"' + invalidType + '\".', fix);\n      });\n    }\n  });\n});\n"]}