'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseComment = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _commentParser = require('comment-parser');

var _commentParser2 = _interopRequireDefault(_commentParser);

var _jsdocUtils = require('./jsdocUtils');

var _jsdocUtils2 = _interopRequireDefault(_jsdocUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curryUtils = function curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam) {
  var utils = {};

  utils.getFunctionParameterNames = function () {
    return _jsdocUtils2.default.getFunctionParameterNames(functionNode);
  };

  utils.getJsdocParameterNamesDeep = function () {
    return _jsdocUtils2.default.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));
  };

  utils.getJsdocParameterNames = function () {
    return _jsdocUtils2.default.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));
  };

  utils.getPreferredTagName = function (name) {
    return _jsdocUtils2.default.getPreferredTagName(name, tagNamePreference);
  };

  utils.isValidTag = function (name) {
    return _jsdocUtils2.default.isValidTag(name, additionalTagNames);
  };

  utils.hasTag = function (name) {
    return _jsdocUtils2.default.hasTag(jsdoc, name);
  };

  utils.isOverrideAllowedWithoutParam = function () {
    return allowOverrideWithoutParam;
  };

  return utils;
};

var parseComment = exports.parseComment = function parseComment(commentNode, indent) {
  // Preserve JSDoc block start/end indentation.
  return (0, _commentParser2.default)(indent + '/*' + commentNode.value + indent + '*/', {
    // @see https://github.com/yavorskiy/comment-parser/issues/21
    parsers: [_commentParser2.default.PARSERS.parse_tag, _commentParser2.default.PARSERS.parse_type, function (str, data) {
      if (_lodash2.default.includes(['return', 'returns'], data.tag)) {
        return null;
      }

      return _commentParser2.default.PARSERS.parse_name(str, data);
    }, _commentParser2.default.PARSERS.parse_description]
  })[0] || {};
};

exports.default = function (iterator) {
  return function (context) {
    var sourceCode = context.getSourceCode();
    var tagNamePreference = _lodash2.default.get(context, 'settings.jsdoc.tagNamePreference') || {};
    var additionalTagNames = _lodash2.default.get(context, 'settings.jsdoc.additionalTagNames') || {};
    var allowOverrideWithoutParam = Boolean(_lodash2.default.get(context, 'settings.jsdoc.allowOverrideWithoutParam'));

    var checkJsdoc = function checkJsdoc(functionNode) {
      var jsdocNode = sourceCode.getJSDocComment(functionNode);

      if (!jsdocNode) {
        return;
      }

      var indent = _lodash2.default.repeat(' ', jsdocNode.loc.start.column);

      var jsdoc = parseComment(jsdocNode, indent);

      var report = function report(message) {
        var fixer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var jsdocLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        var loc = void 0;

        if (jsdocLine) {
          var lineNumber = jsdocNode.loc.start.line + jsdocLine.line;

          loc = {
            end: { line: lineNumber },
            start: { line: lineNumber }
          };
        }
        if (fixer === null) {
          context.report({
            loc,
            message,
            node: jsdocNode
          });
        } else {
          context.report({
            fix: fixer,
            loc,
            message,
            node: jsdocNode
          });
        }
      };

      var utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam);

      iterator({
        context,
        functionNode,
        indent,
        jsdoc,
        jsdocNode,
        report,
        sourceCode,
        utils
      });
    };

    return {
      ArrowFunctionExpression: checkJsdoc,
      FunctionDeclaration: checkJsdoc,
      FunctionExpression: checkJsdoc
    };
  };
};
//# sourceMappingURL=iterateJsdoc.js.map