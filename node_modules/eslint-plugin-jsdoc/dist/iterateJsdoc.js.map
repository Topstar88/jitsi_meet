{"version":3,"sources":["../src/iterateJsdoc.js"],"names":["curryUtils","functionNode","jsdoc","tagNamePreference","additionalTagNames","allowOverrideWithoutParam","utils","getFunctionParameterNames","jsdocUtils","getJsdocParameterNamesDeep","getPreferredTagName","getJsdocParameterNames","name","isValidTag","hasTag","isOverrideAllowedWithoutParam","parseComment","commentNode","indent","value","parsers","commentParser","PARSERS","parse_tag","parse_type","str","data","_","includes","tag","parse_name","parse_description","iterator","context","sourceCode","getSourceCode","get","Boolean","checkJsdoc","jsdocNode","getJSDocComment","repeat","loc","start","column","report","message","fixer","jsdocLine","lineNumber","line","end","node","fix","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":"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","file":"iterateJsdoc.js","sourcesContent":["import _ from 'lodash';\nimport commentParser from 'comment-parser';\nimport jsdocUtils from './jsdocUtils';\n\nconst curryUtils = (functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam) => {\n  const utils = {};\n\n  utils.getFunctionParameterNames = () => {\n    return jsdocUtils.getFunctionParameterNames(functionNode);\n  };\n\n  utils.getJsdocParameterNamesDeep = () => {\n    return jsdocUtils.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getJsdocParameterNames = () => {\n    return jsdocUtils.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getPreferredTagName = (name) => {\n    return jsdocUtils.getPreferredTagName(name, tagNamePreference);\n  };\n\n  utils.isValidTag = (name) => {\n    return jsdocUtils.isValidTag(name, additionalTagNames);\n  };\n\n  utils.hasTag = (name) => {\n    return jsdocUtils.hasTag(jsdoc, name);\n  };\n\n  utils.isOverrideAllowedWithoutParam = () => {\n    return allowOverrideWithoutParam;\n  };\n\n  return utils;\n};\n\nexport const parseComment = (commentNode, indent) => {\n  // Preserve JSDoc block start/end indentation.\n  return commentParser(indent + '/*' + commentNode.value + indent + '*/', {\n    // @see https://github.com/yavorskiy/comment-parser/issues/21\n    parsers: [\n      commentParser.PARSERS.parse_tag,\n      commentParser.PARSERS.parse_type,\n      (str, data) => {\n        if (_.includes(['return', 'returns'], data.tag)) {\n          return null;\n        }\n\n        return commentParser.PARSERS.parse_name(str, data);\n      },\n      commentParser.PARSERS.parse_description\n    ]\n  })[0] || {};\n};\n\nexport default (iterator) => {\n  return (context) => {\n    const sourceCode = context.getSourceCode();\n    const tagNamePreference = _.get(context, 'settings.jsdoc.tagNamePreference') || {};\n    const additionalTagNames = _.get(context, 'settings.jsdoc.additionalTagNames') || {};\n    const allowOverrideWithoutParam = Boolean(_.get(context, 'settings.jsdoc.allowOverrideWithoutParam'));\n\n    const checkJsdoc = (functionNode) => {\n      const jsdocNode = sourceCode.getJSDocComment(functionNode);\n\n      if (!jsdocNode) {\n        return;\n      }\n\n      const indent = _.repeat(' ', jsdocNode.loc.start.column);\n\n      const jsdoc = parseComment(jsdocNode, indent);\n\n      const report = (message, fixer = null, jsdocLine = null) => {\n        let loc;\n\n        if (jsdocLine) {\n          const lineNumber = jsdocNode.loc.start.line + jsdocLine.line;\n\n          loc = {\n            end: {line: lineNumber},\n            start: {line: lineNumber}\n          };\n        }\n        if (fixer === null) {\n          context.report({\n            loc,\n            message,\n            node: jsdocNode\n          });\n        } else {\n          context.report({\n            fix: fixer,\n            loc,\n            message,\n            node: jsdocNode\n          });\n        }\n      };\n\n      const utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames, allowOverrideWithoutParam);\n\n      iterator({\n        context,\n        functionNode,\n        indent,\n        jsdoc,\n        jsdocNode,\n        report,\n        sourceCode,\n        utils\n      });\n    };\n\n    return {\n      ArrowFunctionExpression: checkJsdoc,\n      FunctionDeclaration: checkJsdoc,\n      FunctionExpression: checkJsdoc\n    };\n  };\n};\n"]}