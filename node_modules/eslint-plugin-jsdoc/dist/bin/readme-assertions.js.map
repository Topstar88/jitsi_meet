{"version":3,"sources":["../../src/bin/readme-assertions.js"],"names":["trimCode","code","lines","_","trim","split","indendation","length","match","indentSize","map","line","i","slice","join","formatCodeSnippet","setup","paragraphs","push","settings","JSON","stringify","options","errors","message","getAssertions","assertionFiles","glob","sync","path","resolve","__dirname","assertionNames","filePath","basename","assertionCodes","codes","require","default","invalid","valid","zipObject","updateDocuments","assertions","readmeDocumentPath","documentBody","fs","readFileSync","replace","assertionsBlock","ruleName","ruleAssertions","Error","writeFileSync"],"mappings":"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","file":"readme-assertions.js","sourcesContent":["/**\n * This script is used to inline assertions into the README.md documents.\n */\nimport path from 'path';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport glob from 'glob';\n\nconst trimCode = (code) => {\n  let lines = _.trim(code).split('\\n');\n\n  const indendation = lines[lines.length - 1].match(/^\\s+/);\n\n  const indentSize = indendation ? indendation[0].length : 0;\n\n  lines = _.map(lines, (line, i) => {\n    if (i === 0) {\n      return line;\n    }\n\n    return line.slice(indentSize);\n  });\n\n  return lines.join('\\n');\n};\n\nconst formatCodeSnippet = (setup) => {\n  const paragraphs = [];\n\n  paragraphs.push(trimCode(setup.code));\n\n  if (setup.settings) {\n    paragraphs.push('// Settings: ' + JSON.stringify(setup.settings));\n  }\n\n  if (setup.options) {\n    paragraphs.push('// Options: ' + JSON.stringify(setup.options));\n  }\n\n  if (setup.errors) {\n    paragraphs.push('// Message: ' + setup.errors[0].message);\n  }\n\n  return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n  const assertionFiles = glob.sync(path.resolve(__dirname, '../test/rules/assertions/*.js'));\n\n  const assertionNames = _.map(assertionFiles, (filePath) => {\n    return path.basename(filePath, '.js');\n  });\n\n  const assertionCodes = _.map(assertionFiles, (filePath) => {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const codes = require(filePath).default;\n\n    return {\n      invalid: _.map(codes.invalid, formatCodeSnippet),\n      valid: _.map(codes.valid, formatCodeSnippet)\n    };\n  });\n\n  return _.zipObject(assertionNames, assertionCodes);\n};\n\nconst updateDocuments = (assertions) => {\n  const readmeDocumentPath = path.join(__dirname, '../README.md');\n\n  let documentBody = fs.readFileSync(readmeDocumentPath, 'utf8');\n\n  documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ig, (assertionsBlock) => {\n    const ruleName = assertionsBlock.match(/assertions ([a-z]+)/i)[1];\n    const ruleAssertions = assertions[ruleName];\n\n    if (!ruleAssertions) {\n      throw new Error('No assertions available for rule \"' + ruleName + '\".');\n\n      return assertionsBlock;\n    }\n\n    return 'The following patterns are considered problems:\\n\\n```js\\n' + ruleAssertions.invalid.join('\\n\\n') + '\\n```\\n\\nThe following patterns are not considered problems:\\n\\n```js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n```\\n';\n  });\n\n  fs.writeFileSync(readmeDocumentPath, documentBody);\n};\n\nupdateDocuments(getAssertions());\n"]}