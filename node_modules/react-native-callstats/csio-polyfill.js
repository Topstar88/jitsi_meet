
import {RTCPeerConnection} from 'react-native-webrtc';
import {Platform} from 'react-native';

window.csioReactNative = true;

if (!window.RTCPeerConnection) {
    window.RTCPeerConnection = RTCPeerConnection;
}

if (!window.webkitRTCPeerConnection) {
    window.webkitRTCPeerConnection = RTCPeerConnection;
}

if (!window.performance) {
    window.performance = {};
}

if (!window.performance.timing) {
  window.performance.timing = {};
  window.performance.timing.navigationStart = 0;
}

Date.now = (Date.now || function() {
  return new Date().getTime();
});

if (!window.performance.now) {
  window.performance.now = function now() {
    return Date.now();
  };
}

if (!window.location) {
  window.location = {};
  window.location.href = 'react-native';
}

if (!window.atob) {
  window.atob = require('base-64').decode;
}
if (!window.btoa) {
  window.btoa = require('base-64').encode;
}
var urlbase64encode = function(str) {
  // Change standard base64 encoding (RFC 3548) to URL safe variant (RFC 4648)
  return window.btoa(str).replace(/\+/g, '-').replace(/\//g, '_').replace(/\=+$/, '');
};

window.csiosign = function(token, key, callback) {
  var jsSHA = require('jssha');
  var shaObj = new jsSHA('SHA-256', 'TEXT');
  shaObj.setHMACKey(key, 'TEXT');
  shaObj.update(token);
  var hmacSignature = shaObj.getHMAC('BYTES');
  token += '.'+urlbase64encode(hmacSignature);
  return callback(null, token);
};

window.csioGetOsName = function() {
  return Platform.OS;
};

// For android it gives API Level
window.csioGetOsVer = function() {
  return Platform.Version + '';
};
