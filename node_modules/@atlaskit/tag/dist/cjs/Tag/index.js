"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TagWithoutAnalytics = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _package = require("../../package.json");

var _Chrome = _interopRequireDefault(require("../Chrome"));

var _Content = _interopRequireDefault(require("../Content"));

var _RemoveButton = _interopRequireDefault(require("../RemoveButton"));

var _styledBefore = _interopRequireDefault(require("./styledBefore"));

var _styledContainer = _interopRequireDefault(require("./styledContainer"));

var colorList = ['standard', 'green', 'blue', 'red', 'purple', 'grey', 'teal', 'yellow', 'greenLight', 'blueLight', 'redLight', 'purpleLight', 'greyLight', 'tealLight', 'yellowLight'];

var Tag =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Tag, _Component);

  function Tag() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tag);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tag)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      isRemoving: false,
      isRemoved: false,
      markedForRemoval: false,
      isFocused: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRemoveRequest", function () {
      if (_this.props.onBeforeRemoveAction && _this.props.onBeforeRemoveAction()) {
        _this.setState({
          isRemoving: true,
          isRemoved: false
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRemoveComplete", function () {
      if (_this.props.onAfterRemoveAction) {
        _this.props.onAfterRemoveAction(_this.props.text);
      }

      _this.setState({
        isRemoving: false,
        isRemoved: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleHoverChange", function (hoverState) {
      _this.setState({
        markedForRemoval: hoverState
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleFocusChange", function (focusState) {
      _this.setState({
        isFocused: focusState
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Tag, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          isFocused = _this$state.isFocused,
          isRemoved = _this$state.isRemoved,
          isRemoving = _this$state.isRemoving,
          markedForRemoval = _this$state.markedForRemoval;
      var _this$props = this.props,
          appearance = _this$props.appearance,
          elemBefore = _this$props.elemBefore,
          href = _this$props.href,
          removeButtonText = _this$props.removeButtonText,
          text = _this$props.text,
          color = _this$props.color,
          linkComponent = _this$props.linkComponent;
      var safeColor = colorList.includes(color) ? color : 'standard';
      var isRemovable = Boolean(removeButtonText);
      var isRounded = appearance === 'rounded';
      var styled = {
        isFocused: isFocused,
        isRemovable: isRemovable,
        isRemoved: isRemoved,
        isRemoving: isRemoving,
        isRounded: isRounded,
        markedForRemoval: markedForRemoval,
        color: safeColor
      };

      var onAnimationEnd = function onAnimationEnd() {
        return isRemoving && _this2.handleRemoveComplete();
      };

      return _react.default.createElement(_styledContainer.default, (0, _extends2.default)({}, styled, {
        onAnimationEnd: onAnimationEnd
      }), _react.default.createElement(_Chrome.default, (0, _extends2.default)({}, styled, {
        isLink: !!href,
        onFocusChange: this.handleFocusChange
      }), elemBefore ? _react.default.createElement(_styledBefore.default, null, elemBefore) : null, _react.default.createElement(_Content.default, (0, _extends2.default)({
        linkComponent: linkComponent
      }, styled, {
        href: href
      }), text), isRemovable ? _react.default.createElement(_RemoveButton.default, (0, _extends2.default)({}, styled, {
        onHoverChange: this.handleHoverChange,
        onRemoveAction: this.handleRemoveRequest,
        removeText: removeButtonText
      })) : null));
    }
  }]);
  return Tag;
}(_react.Component);

exports.TagWithoutAnalytics = Tag;
(0, _defineProperty2.default)(Tag, "defaultProps", {
  color: 'standard',
  appearance: 'default',
  elemBefore: null,
  onAfterRemoveAction: function onAfterRemoveAction() {},
  onBeforeRemoveAction: function onBeforeRemoveAction() {
    return true;
  }
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'tag',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onAfterRemoveAction: createAndFireEventOnAtlaskit({
    action: 'removed',
    actionSubject: 'tag',
    attributes: {
      componentName: 'tag',
      packageName: _package.name,
      packageVersion: _package.version
    }
  })
})(Tag));

exports.default = _default;