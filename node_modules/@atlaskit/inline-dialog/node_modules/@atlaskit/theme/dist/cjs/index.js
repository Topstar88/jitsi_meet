'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layers = exports.codeFontFamily = exports.fontFamily = exports.fontSize = exports.gridSize = exports.borderRadius = exports.AtlasKitThemeProvider = exports.AtlaskitThemeProvider = exports.themed = exports.getTheme = exports.math = exports.colors = undefined;

var _colors = require('./colors');

var colors = _interopRequireWildcard(_colors);

var _math = require('./utils/math');

var math = _interopRequireWildcard(_math);

var _getTheme = require('./utils/getTheme');

var _getTheme2 = _interopRequireDefault(_getTheme);

var _themed = require('./utils/themed');

var _themed2 = _interopRequireDefault(_themed);

var _AtlaskitThemeProvider = require('./components/AtlaskitThemeProvider');

var _AtlaskitThemeProvider2 = _interopRequireDefault(_AtlaskitThemeProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.colors = colors;
exports.math = math;
exports.getTheme = _getTheme2.default;
exports.themed = _themed2.default;
exports.AtlaskitThemeProvider = _AtlaskitThemeProvider2.default;

// backwards-compatible export with old AtlasKit case

var AtlasKitThemeProvider = exports.AtlasKitThemeProvider = _AtlaskitThemeProvider2.default;

/*
  These theme values are expressed as functions so that if we decide to make
  them dependent on props in the future, it wouldn't require a significant
  refactor everywhere they are being used.
*/
var borderRadius = exports.borderRadius = function borderRadius() {
  return 3;
};
var gridSize = exports.gridSize = function gridSize() {
  return 8;
};
var fontSize = exports.fontSize = function fontSize() {
  return 14;
};
var fontFamily = exports.fontFamily = function fontFamily() {
  return '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif';
};
var codeFontFamily = exports.codeFontFamily = function codeFontFamily() {
  return '"SFMono-Medium", "SF Mono", "Segoe UI Mono", "Roboto Mono", "Ubuntu Mono", Menlo, Courier, monospace';
};

var layers = exports.layers = {
  card: function card() {
    return 100;
  },
  dialog: function dialog() {
    return 200;
  },
  navigation: function navigation() {
    return 300;
  },
  layer: function layer() {
    return 400;
  },
  blanket: function blanket() {
    return 500;
  },
  modal: function modal() {
    return 510;
  },
  flag: function flag() {
    return 600;
  },
  spotlight: function spotlight() {
    return 700;
  },
  tooltip: function tooltip() {
    return 800;
  }
};