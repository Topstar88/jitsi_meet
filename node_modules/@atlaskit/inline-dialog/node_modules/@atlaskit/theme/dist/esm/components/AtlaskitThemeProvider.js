import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ThemeProvider } from 'styled-components';

import { background } from '../colors';
import ThemeReset from './ThemeReset';

import { CHANNEL, DEFAULT_THEME_MODE } from '../constants';

function getStylesheetResetCSS(state) {
  var backgroundColor = background(state);
  return '\n    body { background: ' + backgroundColor + '; }\n  ';
}

function buildThemeState(mode) {
  return { theme: _defineProperty({}, CHANNEL, { mode: mode }) };
}

var AtlaskitThemeProvider = function (_Component) {
  _inherits(AtlaskitThemeProvider, _Component);

  function AtlaskitThemeProvider(props) {
    _classCallCheck(this, AtlaskitThemeProvider);

    var _this = _possibleConstructorReturn(this, (AtlaskitThemeProvider.__proto__ || _Object$getPrototypeOf(AtlaskitThemeProvider)).call(this, props));

    _this.state = buildThemeState(props.mode);
    return _this;
  }

  _createClass(AtlaskitThemeProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { hasAtlaskitThemeProvider: true };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (!this.context.hasAtlaskitThemeProvider) {
        var css = getStylesheetResetCSS(this.state);
        this.stylesheet = document.createElement('style');
        this.stylesheet.type = 'text/css';
        this.stylesheet.innerHTML = css;
        if (document && document.head) {
          document.head.appendChild(this.stylesheet);
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.mode !== this.props.mode) {
        var newThemeState = buildThemeState(newProps.mode);
        if (this.stylesheet) {
          var css = getStylesheetResetCSS(newThemeState);
          this.stylesheet.innerHTML = css;
        }
        this.setState(newThemeState);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.stylesheet && document && document.head) {
        document.head.removeChild(this.stylesheet);
        delete this.stylesheet;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var theme = this.state.theme;
      return React.createElement(
        ThemeProvider,
        { theme: theme },
        React.createElement(
          ThemeReset,
          null,
          children
        )
      );
    }
  }]);

  return AtlaskitThemeProvider;
}(Component);

AtlaskitThemeProvider.defaultProps = {
  mode: DEFAULT_THEME_MODE
};
AtlaskitThemeProvider.childContextTypes = {
  hasAtlaskitThemeProvider: PropTypes.bool
};
AtlaskitThemeProvider.contextTypes = {
  hasAtlaskitThemeProvider: PropTypes.bool
};
export default AtlaskitThemeProvider;