import _extends from 'babel-runtime/helpers/extends';
import _typeof from 'babel-runtime/helpers/typeof';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';

import Popper from '../../popper/index-min';
import { getFlipBehavior, positionPropToPopperPosition } from './internal/helpers';
import ContentContainer from '../styledContentContainer';

/* eslint-disable react/no-unused-prop-types */

var Layer = function (_Component) {
  _inherits(Layer, _Component);

  function Layer(props) {
    _classCallCheck(this, Layer);

    var _this = _possibleConstructorReturn(this, (Layer.__proto__ || _Object$getPrototypeOf(Layer)).call(this, props));

    _this.extractStyles = function (state) {
      if (state) {
        var popperHeight = state.offsets.popper.height;
        var left = Math.round(state.offsets.popper.left);
        // The offset position is sometimes an object and sometimes just a string...
        var _cssPosition = _typeof(state.offsets.popper.position) === 'object' ? state.offsets.popper.position.position : state.offsets.popper.position;
        var top = _this.fixPositionTopUnderflow(state.offsets.popper.top, _cssPosition);

        var _originalHeight = _this.state.originalHeight || popperHeight;
        var _maxHeight = _this.calculateMaxHeight(_originalHeight, popperHeight, top, _cssPosition);
        _this.setState({
          // position: fixed or absolute
          cssPosition: _cssPosition,
          hasExtractedStyles: true,
          transform: 'translate3d(' + left + 'px, ' + top + 'px, 0px)',
          // state.flipped is either true or undefined
          flipped: !!state.flipped,
          actualPosition: state.position,
          originalPosition: state.originalPosition,
          originalHeight: _originalHeight,
          maxHeight: _maxHeight
        });
      }
    };

    _this.state = {
      hasExtractedStyles: false,
      position: null,
      transform: null,
      flipped: false,
      actualPosition: null,
      // We set these default offsets to prevent a flash of popper content in the wrong position
      // which can cause incorrect height calculations. Popper will calculate these values
      offsets: {
        popper: {
          left: -9999,
          top: -9999
        }
      },
      originalPosition: null,
      // fix Safari parent width: https://product-fabric.atlassian.net/browse/ED-1784
      cssPosition: 'absolute',
      originalHeight: null,
      maxHeight: null
    };
    _this.extractStyles = _this.extractStyles.bind(_this);
    return _this;
  }

  // TODO: get the value of zIndex from theme, not using it now as it is not
  // working with extract-react-types


  _createClass(Layer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.applyPopper(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.applyPopper(nextProps);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (prevState.flipped !== this.state.flipped && this.props.onFlippedChange) {
        this.props.onFlippedChange({
          flipped: this.state.flipped,
          actualPosition: this.state.actualPosition,
          originalPosition: this.state.originalPosition
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.popper) {
        this.popper.destroy();
      }
    }

    /* Calculate the max height of the popper if it's height is greater than the viewport to prevent
     * the bottom of the popper not being viewable.
     * Only works if the popper uses viewport as the boundary and has a fixed position ancestor.
     */

  }, {
    key: 'calculateMaxHeight',
    value: function calculateMaxHeight(originalHeight, currentHeight, positionTop, cssPosition) {
      var DocumentElementClientHeight = 0;

      if (document.documentElement) {
        DocumentElementClientHeight = document.documentElement.clientHeight;
      }
      if (cssPosition !== 'fixed' || this.props.boundariesElement !== 'viewport') {
        return null;
      }
      var viewportHeight = Math.max(DocumentElementClientHeight, window.innerHeight || 0);
      return viewportHeight < originalHeight && currentHeight + positionTop >= viewportHeight - 50 ? // allow some spacing either side of viewport height
      viewportHeight - 12 : null;
    }

    /* Clamp fixed position to the window for fixed position poppers that flow off the top of the
     * window.
     * A fixed position popper is a popper who has an ancestor with position: fixed.
     *
     * It is too difficult to fix this for non-fixed position poppers without re-implementing popper's
     * offset functionality or fixing the issue upstream.
     */
    // eslint-disable-next-line class-methods-use-this

  }, {
    key: 'fixPositionTopUnderflow',
    value: function fixPositionTopUnderflow(popperTop, cssPosition) {
      return popperTop >= 0 || cssPosition !== 'fixed' ? Math.round(popperTop) : 0;
    }
  }, {
    key: 'applyPopper',
    value: function applyPopper(props) {
      if (!this.targetRef || !this.contentRef) {
        return;
      }

      if (this.popper) {
        this.popper.destroy();
      }

      // "new Popper(...)" operation is very expensive when called on virtual DOM.
      // This condition reduces the number of calls so we can run our tests faster
      // (time was reduced from 100s to 13s).
      if (!props.content) {
        return;
      }

      // we wrap our target in a div so that we can safely get a reference to it, but we pass the
      // actual target to popper
      var actualTarget = this.targetRef.firstChild;
      var popperOpts = {
        placement: positionPropToPopperPosition(props.position),
        onCreate: this.extractStyles,
        onUpdate: this.extractStyles,
        modifiers: {
          applyStyle: {
            enabled: false
          },
          hide: {
            enabled: false
          },
          offset: {
            enabled: true,
            offset: this.props.offset
          },
          flip: {
            enabled: !!this.props.autoFlip,
            flipVariations: true,
            boundariesElement: this.props.boundariesElement,
            padding: 0 // leave 0 pixels between popper and the boundariesElement
          },
          preventOverflow: {
            enabled: !!this.props.autoFlip,
            escapeWithReference: !(this.props.boundariesElement === 'scrollParent')
          }
        }
      };

      var flipBehavior = getFlipBehavior(props);
      if (flipBehavior) {
        popperOpts.modifiers.flip.behavior = flipBehavior;
      }

      this.popper = new Popper(actualTarget, this.contentRef, popperOpts);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var zIndex = this.props.zIndex;
      var _state = this.state,
          cssPosition = _state.cssPosition,
          transform = _state.transform,
          hasExtractedStyles = _state.hasExtractedStyles,
          maxHeight = _state.maxHeight;

      var opacity = hasExtractedStyles ? {} : { opacity: 0 };

      return React.createElement(
        'div',
        null,
        React.createElement(
          'div',
          {
            ref: function ref(_ref) {
              _this2.targetRef = _ref;
            }
          },
          this.props.children
        ),
        React.createElement(
          ContentContainer,
          { maxHeight: maxHeight },
          React.createElement(
            'div',
            {
              ref: function ref(_ref2) {
                _this2.contentRef = _ref2;
              },
              style: _extends({
                top: 0,
                left: 0,
                position: cssPosition,
                transform: transform,
                zIndex: zIndex
              }, opacity)
            },
            this.props.content
          )
        )
      );
    }
  }]);

  return Layer;
}(Component);

/* eslint-enable react/no-unused-prop-types */


Layer.defaultProps = {
  autoFlip: true,
  boundariesElement: 'viewport',
  children: null,
  content: null,
  offset: '0 0',
  onFlippedChange: function onFlippedChange() {},
  position: 'right middle',
  zIndex: 400
};
export default Layer;