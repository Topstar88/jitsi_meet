import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import Layer from '@atlaskit/layer';
import { gridSize } from '@atlaskit/theme';
import { Container } from './styled';

// TODO: expose positions and flipPositions from Layer and pull in here

// TODO: expose applicable props from Layer and pull in here
var InlineDialog = function (_Component) {
  _inherits(InlineDialog, _Component);

  function InlineDialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InlineDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InlineDialog.__proto__ || _Object$getPrototypeOf(InlineDialog)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
      document.addEventListener('click', _this.handleClickOutside);
    }, _this.componentWillUnmount = function () {
      document.removeEventListener('click', _this.handleClickOutside);
    }, _this.handleClickOutside = function (event) {
      if (event.defaultPrevented) return;

      if (_this.props.isOpen) {
        var domNode = ReactDOM.findDOMNode(_this); // eslint-disable-line react/no-find-dom-node
        if (!domNode || event.target instanceof Node && !domNode.contains(event.target)) {
          if (_this.props.onClose) _this.props.onClose({ isOpen: false, event: event });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InlineDialog, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          boundariesElement = _props.boundariesElement,
          children = _props.children,
          content = _props.content,
          isOpen = _props.isOpen,
          onContentBlur = _props.onContentBlur,
          onContentClick = _props.onContentClick,
          onContentFocus = _props.onContentFocus,
          position = _props.position,
          shouldFlip = _props.shouldFlip;

      // this offset is passed to popper as two space separated numbers representing
      // the offset from the target the first is distance along the same axis you are
      // on (top or bottom aligned would move left/right) and the second is on the
      // perpendicular axis (how far 'away' you are from the target) both are measured
      // in pixels
      // $FlowFixMe TEMPORARY

      var dialogOffset = '0 ' + gridSize(this.props);

      var layerContent = isOpen ? React.createElement(
        Container,
        {
          onBlurCapture: onContentBlur,
          onClick: onContentClick,
          onFocusCapture: onContentFocus,
          tabIndex: '-1'
        },
        content
      ) : null;

      return React.createElement(
        Layer,
        {
          boundariesElement: boundariesElement,
          autoFlip: shouldFlip,
          content: layerContent,
          offset: dialogOffset,
          position: position
        },
        React.createElement(
          'div',
          null,
          children
        )
      );
    }
  }]);

  return InlineDialog;
}(Component);

InlineDialog.defaultProps = {
  isOpen: false,
  onContentBlur: function onContentBlur() {},
  onContentClick: function onContentClick() {},
  onContentFocus: function onContentFocus() {},
  onClose: function onClose() {},
  position: 'bottom center',
  shouldFlip: false
};
export default InlineDialog;