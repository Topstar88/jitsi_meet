'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _layer = require('@atlaskit/layer');

var _layer2 = _interopRequireDefault(_layer);

var _theme = require('@atlaskit/theme');

var _styled = require('./styled');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: expose applicable props from Layer and pull in here


// TODO: expose positions and flipPositions from Layer and pull in here

var InlineDialog = function (_Component) {
  (0, _inherits3.default)(InlineDialog, _Component);

  function InlineDialog() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InlineDialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InlineDialog.__proto__ || (0, _getPrototypeOf2.default)(InlineDialog)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
      document.addEventListener('click', _this.handleClickOutside);
    }, _this.componentWillUnmount = function () {
      document.removeEventListener('click', _this.handleClickOutside);
    }, _this.handleClickOutside = function (event) {
      if (event.defaultPrevented) return;

      if (_this.props.isOpen) {
        var domNode = _reactDom2.default.findDOMNode(_this); // eslint-disable-line react/no-find-dom-node
        if (!domNode || event.target instanceof Node && !domNode.contains(event.target)) {
          if (_this.props.onClose) _this.props.onClose({ isOpen: false, event: event });
        }
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InlineDialog, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          boundariesElement = _props.boundariesElement,
          children = _props.children,
          content = _props.content,
          isOpen = _props.isOpen,
          onContentBlur = _props.onContentBlur,
          onContentClick = _props.onContentClick,
          onContentFocus = _props.onContentFocus,
          position = _props.position,
          shouldFlip = _props.shouldFlip;

      // this offset is passed to popper as two space separated numbers representing
      // the offset from the target the first is distance along the same axis you are
      // on (top or bottom aligned would move left/right) and the second is on the
      // perpendicular axis (how far 'away' you are from the target) both are measured
      // in pixels
      // $FlowFixMe TEMPORARY

      var dialogOffset = '0 ' + (0, _theme.gridSize)(this.props);

      var layerContent = isOpen ? _react2.default.createElement(
        _styled.Container,
        {
          onBlurCapture: onContentBlur,
          onClick: onContentClick,
          onFocusCapture: onContentFocus,
          tabIndex: '-1'
        },
        content
      ) : null;

      return _react2.default.createElement(
        _layer2.default,
        {
          boundariesElement: boundariesElement,
          autoFlip: shouldFlip,
          content: layerContent,
          offset: dialogOffset,
          position: position
        },
        _react2.default.createElement(
          'div',
          null,
          children
        )
      );
    }
  }]);
  return InlineDialog;
}(_react.Component);

InlineDialog.defaultProps = {
  isOpen: false,
  onContentBlur: function onContentBlur() {},
  onContentClick: function onContentClick() {},
  onContentFocus: function onContentFocus() {},
  onClose: function onClose() {},
  position: 'bottom center',
  shouldFlip: false
};
exports.default = InlineDialog;