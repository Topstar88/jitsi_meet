"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var styled_components_1 = require("styled-components");
var analytics_next_1 = require("@atlaskit/analytics-next");
var withDeprecationWarnings_1 = require("./withDeprecationWarnings");
var getButtonProps_1 = require("./getButtonProps");
var CustomComponentProxy_1 = require("./CustomComponentProxy");
var getButtonStyles_1 = require("../styled/getButtonStyles");
var ButtonContent_1 = require("../styled/ButtonContent");
var ButtonWrapper_1 = require("../styled/ButtonWrapper");
var IconWrapper_1 = require("../styled/IconWrapper");
var LoadingSpinner_1 = require("../styled/LoadingSpinner");
var package_json_1 = require("../../package.json");
var type_helpers_1 = require("@atlaskit/type-helpers");
var StyledButton = styled_components_1.default.button(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), getButtonStyles_1.default);
StyledButton.displayName = 'StyledButton';
// Target the <a> here to override a:hover specificity.
var StyledLink = styled_components_1.default.a(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n  a& {\n    ", ";\n  }\n"], ["\n  a& {\n    ", ";\n  }\n"])), getButtonStyles_1.default);
StyledLink.displayName = 'StyledLink';
var StyledSpan = styled_components_1.default.span(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n  ", ";\n"], ["\n  ", ";\n"])), getButtonStyles_1.default);
StyledSpan.displayName = 'StyledSpan';
var createStyledComponent = function () {
    // Override pseudo-state specificity.
    // This is necessary because we don't know what DOM element the custom component will render.
    var component = styled_components_1.default(CustomComponentProxy_1.default)(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n    &,\n    a&,\n    &:hover,\n    &:active,\n    &:focus {\n      ", "\n    }\n  "], ["\n    &,\n    a&,\n    &:hover,\n    &:active,\n    &:focus {\n      ", "\n    }\n  "])), getButtonStyles_1.default);
    component.displayName = 'StyledCustomComponent';
    return component;
};
exports.defaultProps = {
    appearance: 'default',
    isDisabled: false,
    isSelected: false,
    isLoading: false,
    spacing: 'default',
    type: 'button',
    shouldFitContainer: false,
    autoFocus: false,
};
var Button = /** @class */ (function (_super) {
    tslib_1.__extends(Button, _super);
    function Button() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isActive: false,
            isFocus: false,
            isHover: false,
        };
        _this.customComponent = null;
        _this.isInteractive = function () { return !_this.props.isDisabled && !_this.props.isLoading; };
        _this.onMouseEnter = function () {
            _this.setState({ isHover: true });
        };
        _this.onMouseLeave = function () { return _this.setState({ isHover: false, isActive: false }); };
        _this.onMouseDown = function (e) {
            e.preventDefault();
            _this.setState({ isActive: true });
        };
        _this.onMouseUp = function () { return _this.setState({ isActive: false }); };
        _this.onFocus = function (event) {
            _this.setState({ isFocus: true });
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
        };
        _this.onBlur = function (event) {
            _this.setState({ isFocus: false });
            if (_this.props.onBlur) {
                _this.props.onBlur(event);
            }
        };
        /* Swallow click events when the button is disabled to prevent inner child clicks bubbling up */
        _this.onInnerClick = function (e) {
            if (!_this.isInteractive()) {
                e.stopPropagation();
            }
            return true;
        };
        _this.getInnerRef = function (ref) {
            _this.button = ref;
            if (_this.props.innerRef) {
                _this.props.innerRef(ref);
            }
        };
        return _this;
    }
    Button.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.component !== nextProps.component) {
            delete this.customComponent;
        }
    };
    Button.prototype.componentDidMount = function () {
        if (this.props.autoFocus && this.button) {
            this.button.focus();
        }
    };
    Button.prototype.getStyledComponent = function () {
        if (this.props.component) {
            if (!this.customComponent) {
                this.customComponent = createStyledComponent();
            }
            return this.customComponent;
        }
        if (this.props.href) {
            return this.props.isDisabled ? StyledSpan : StyledLink;
        }
        return StyledButton;
    };
    Button.prototype.render = function () {
        var _a = this.props, children = _a.children, iconBefore = _a.iconBefore, iconAfter = _a.iconAfter, isLoading = _a.isLoading, shouldFitContainer = _a.shouldFitContainer, spacing = _a.spacing, appearance = _a.appearance, isSelected = _a.isSelected, isDisabled = _a.isDisabled;
        var buttonProps = getButtonProps_1.default(this);
        var StyledComponent = this.getStyledComponent();
        var iconIsOnlyChild = !!((iconBefore && !iconAfter && !children) ||
            (iconAfter && !iconBefore && !children));
        return (React.createElement(StyledComponent, tslib_1.__assign({ innerRef: this.getInnerRef }, buttonProps),
            React.createElement(ButtonWrapper_1.default, { onClick: this.onInnerClick, fit: !!shouldFitContainer },
                isLoading ? (React.createElement(LoadingSpinner_1.default, { spacing: spacing, appearance: appearance, isSelected: isSelected, isDisabled: isDisabled })) : null,
                iconBefore ? (React.createElement(IconWrapper_1.default, { isLoading: isLoading, spacing: buttonProps.spacing, isOnlyChild: iconIsOnlyChild }, iconBefore)) : null,
                children ? (React.createElement(ButtonContent_1.default, { isLoading: isLoading, followsIcon: !!iconBefore, spacing: buttonProps.spacing }, children)) : null,
                iconAfter ? (React.createElement(IconWrapper_1.default, { isLoading: isLoading, spacing: buttonProps.spacing, isOnlyChild: iconIsOnlyChild }, iconAfter)) : null)));
    };
    return Button;
}(React.Component));
exports.Button = Button;
exports.DefaultedButton = type_helpers_1.withDefaultProps(exports.defaultProps, Button);
exports.ButtonBase = Button;
exports.ButtonWithoutAnalytics = withDeprecationWarnings_1.default(exports.DefaultedButton);
var createAndFireEventOnAtlaskit = analytics_next_1.createAndFireEvent('atlaskit');
exports.default = analytics_next_1.withAnalyticsContext({
    componentName: 'button',
    packageName: package_json_1.name,
    packageVersion: package_json_1.version,
})(analytics_next_1.withAnalyticsEvents({
    onClick: createAndFireEventOnAtlaskit({
        action: 'clicked',
        actionSubject: 'button',
        attributes: {
            componentName: 'button',
            packageName: package_json_1.name,
            packageVersion: package_json_1.version,
        },
    }),
})(exports.ButtonWithoutAnalytics));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=Button.js.map