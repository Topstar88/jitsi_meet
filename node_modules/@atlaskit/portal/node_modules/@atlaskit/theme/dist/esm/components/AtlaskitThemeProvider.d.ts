import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ThemeModes, AtlaskitThemeProps, ThemedValue } from '../types';
interface Props {
    children: React.ReactNode;
    mode: ThemeModes;
    background: ThemedValue<string>;
}
declare type GetMode = () => {
    mode: ThemeModes;
};
export default class AtlaskitThemeProvider extends Component<Props, AtlaskitThemeProps> {
    stylesheet: any;
    /**
     * This function never changes its reference because it accesses
     * `this` in the function call - thereby sidestepping the need for
     * creating a new reference everytime theme state changes.
     * NOTE: When moving to hooks watch out for this regressing.
     */
    getThemeMode: GetMode;
    static defaultProps: {
        mode: string;
        background: ThemedValue<string>;
    };
    static childContextTypes: {
        hasAtlaskitThemeProvider: PropTypes.Requireable<any>;
    };
    static contextTypes: {
        hasAtlaskitThemeProvider: PropTypes.Requireable<any>;
    };
    constructor(props: Props);
    getChildContext(): {
        hasAtlaskitThemeProvider: boolean;
    };
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(newProps: Props): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export {};
