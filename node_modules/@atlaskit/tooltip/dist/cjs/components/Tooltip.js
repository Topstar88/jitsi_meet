"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TooltipWithoutAnalytics = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));

var _flushable = _interopRequireDefault(require("flushable"));

var _popper = require("@atlaskit/popper");

var _portal = _interopRequireDefault(require("@atlaskit/portal"));

var _theme = require("@atlaskit/theme");

var _analyticsNext = require("@atlaskit/analytics-next");

var _package = require("../../package.json");

var _styled = require("../styled");

var _Animation = _interopRequireDefault(require("./Animation"));

var _analyticsPayloads = require("./utils/analytics-payloads");

/* eslint-disable react/require-default-props */
function getMousePosition(mouseCoordinates) {
  var safeMouse = mouseCoordinates || {
    top: 0,
    left: 0
  };

  var getBoundingClientRect = function getBoundingClientRect() {
    return {
      top: safeMouse.top,
      left: safeMouse.left,
      bottom: safeMouse.top,
      right: safeMouse.left,
      width: 0,
      height: 0
    };
  };

  return {
    getBoundingClientRect: getBoundingClientRect,
    clientWidth: 0,
    clientHeight: 0
  };
}

var pendingHide;

var showTooltip = function showTooltip(fn, defaultDelay) {
  var isHidePending = pendingHide && pendingHide.pending();

  if (isHidePending) {
    pendingHide.flush();
  }

  var pendingShow = (0, _flushable.default)(function () {
    return fn(isHidePending);
  }, isHidePending ? 0 : defaultDelay);
  return pendingShow.cancel;
};

var hideTooltip = function hideTooltip(fn, defaultDelay) {
  pendingHide = (0, _flushable.default)(function (flushed) {
    return fn(flushed);
  }, defaultDelay);
  return pendingHide.cancel;
};

var Tooltip =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Tooltip, _Component);

  function Tooltip() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tooltip)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "wrapperRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "targetRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "fakeMouseElement", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "cancelPendingSetState", function () {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      immediatelyHide: false,
      immediatelyShow: false,
      isVisible: false,
      renderTooltip: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleWindowScroll", function () {
      if (_this.state.isVisible) {
        _this.cancelPendingSetState();

        _this.setState({
          isVisible: false,
          immediatelyHide: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseClick", function () {
      if (_this.props.hideTooltipOnClick) {
        _this.cancelPendingSetState();

        _this.setState({
          isVisible: false,
          immediatelyHide: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseDown", function () {
      if (_this.props.hideTooltipOnMouseDown) {
        _this.cancelPendingSetState();

        _this.setState({
          isVisible: false,
          immediatelyHide: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseOver", function (e) {
      if (e.target === _this.wrapperRef) return; // In the case where a tooltip is newly rendered but immediately becomes hovered,
      // we need to set the coordinates in the mouseOver event.

      if (!_this.fakeMouseElement) _this.fakeMouseElement = getMousePosition({
        left: e.clientX,
        top: e.clientY
      });

      _this.cancelPendingSetState();

      if (Boolean(_this.props.content) && !_this.state.isVisible) {
        _this.cancelPendingSetState = showTooltip(function (immediatelyShow) {
          _this.setState({
            isVisible: true,
            renderTooltip: true,
            immediatelyShow: immediatelyShow
          });
        }, _this.props.delay);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseLeave", function (e) {
      if (e.target === _this.wrapperRef) return;

      _this.cancelPendingSetState();

      if (_this.state.isVisible) {
        _this.cancelPendingSetState = hideTooltip(function (immediatelyHide) {
          _this.setState({
            isVisible: false,
            immediatelyHide: immediatelyHide
          });
        }, _this.props.delay);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseMove", function (event) {
      if (!_this.state.renderTooltip) {
        _this.fakeMouseElement = getMousePosition({
          left: event.clientX,
          top: event.clientY
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Tooltip, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelPendingSetState();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var scrollOptions = {
        capture: true,
        passive: true
      };

      if (!prevState.isVisible && this.state.isVisible) {
        if (this.props.onShow) this.props.onShow();
        window.addEventListener('scroll', this.handleWindowScroll, scrollOptions);
      } else if (prevState.isVisible && !this.state.isVisible) {
        if (this.props.onHide) this.props.onHide();
        window.removeEventListener('scroll', this.handleWindowScroll, scrollOptions);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          position = _this$props.position,
          mousePosition = _this$props.mousePosition,
          truncate = _this$props.truncate,
          TooltipContainer = _this$props.component,
          TargetContainer = _this$props.tag;
      var _this$state = this.state,
          isVisible = _this$state.isVisible,
          renderTooltip = _this$state.renderTooltip,
          immediatelyShow = _this$state.immediatelyShow,
          immediatelyHide = _this$state.immediatelyHide;
      return _react.default.createElement(_react.Fragment, null, _react.default.createElement(TargetContainer, {
        onClick: this.handleMouseClick,
        onMouseOver: this.handleMouseOver,
        onMouseOut: this.handleMouseLeave,
        onMouseMove: this.handleMouseMove,
        onMouseDown: this.handleMouseDown,
        ref: function ref(wrapperRef) {
          _this2.wrapperRef = wrapperRef;
        }
      }, _react.default.createElement(_reactNodeResolver.default, {
        innerRef: function innerRef(targetRef) {
          _this2.targetRef = targetRef;
        }
      }, _react.Children.only(children))), renderTooltip && this.targetRef && this.fakeMouseElement ? _react.default.createElement(_popper.Popper, {
        referenceElement: // https://github.com/FezVrasta/react-popper#usage-without-a-reference-htmlelement
        // We are using a popper technique to pass in a faked element when we use mouse.
        // This is fine.
        // $FlowFixMe
        position === 'mouse' ? this.fakeMouseElement : this.targetRef,
        placement: position === 'mouse' ? mousePosition : position
      }, function (_ref) {
        var ref = _ref.ref,
            style = _ref.style,
            placement = _ref.placement;
        return _react.default.createElement(_Animation.default, {
          immediatelyShow: immediatelyShow,
          immediatelyHide: immediatelyHide,
          onExited: function onExited() {
            return _this2.setState({
              renderTooltip: false
            });
          },
          in: isVisible
        }, function (getAnimationStyles) {
          return _react.default.createElement(_portal.default, {
            zIndex: _theme.layers.tooltip()
          }, _react.default.createElement(TooltipContainer, {
            innerRef: ref,
            style: (0, _objectSpread2.default)({}, getAnimationStyles(placement), style),
            truncate: truncate
          }, content));
        });
      }) : null);
    }
  }]);
  return Tooltip;
}(_react.Component);

exports.TooltipWithoutAnalytics = Tooltip;
(0, _defineProperty2.default)(Tooltip, "defaultProps", {
  component: _styled.Tooltip,
  delay: 300,
  mousePosition: 'bottom',
  position: 'bottom',
  tag: 'div'
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'tooltip',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onHide: _analyticsPayloads.unhoveredPayload,
  onShow: createAndFireEventOnAtlaskit((0, _objectSpread2.default)({}, _analyticsPayloads.hoveredPayload))
})(Tooltip));

exports.default = _default;