"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Theme = exports.boldTextColor = exports.boldBackgroundColor = exports.textColor = exports.backgroundColor = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _theme = require("@atlaskit/theme");

/* Note:
 Lozenge does not support dark mode at the moment,
 it will be implemented later.
 Hence, color values are the same.
 */
var backgroundColor = {
  default: {
    light: _theme.colors.N40,
    dark: _theme.colors.N40
  },
  inprogress: {
    light: _theme.colors.B50,
    dark: _theme.colors.B50
  },
  moved: {
    light: _theme.colors.Y75,
    dark: _theme.colors.Y75
  },
  new: {
    light: _theme.colors.P50,
    dark: _theme.colors.P50
  },
  removed: {
    light: _theme.colors.R50,
    dark: _theme.colors.R50
  },
  success: {
    light: _theme.colors.G50,
    dark: _theme.colors.G50
  }
};
exports.backgroundColor = backgroundColor;
var textColor = {
  default: {
    light: _theme.colors.N500,
    dark: _theme.colors.N500
  },
  inprogress: {
    light: _theme.colors.B500,
    dark: _theme.colors.B500
  },
  moved: {
    light: _theme.colors.N800,
    dark: _theme.colors.N800
  },
  new: {
    light: _theme.colors.P500,
    dark: _theme.colors.P500
  },
  removed: {
    light: _theme.colors.R500,
    dark: _theme.colors.R500
  },
  success: {
    light: _theme.colors.G500,
    dark: _theme.colors.G500
  }
};
exports.textColor = textColor;
var boldBackgroundColor = {
  default: {
    light: _theme.colors.N500,
    dark: _theme.colors.N500
  },
  inprogress: {
    light: _theme.colors.B400,
    dark: _theme.colors.B400
  },
  moved: {
    light: _theme.colors.Y500,
    dark: _theme.colors.Y500
  },
  new: {
    light: _theme.colors.P400,
    dark: _theme.colors.P400
  },
  removed: {
    light: _theme.colors.R400,
    dark: _theme.colors.R400
  },
  success: {
    light: _theme.colors.G400,
    dark: _theme.colors.G400
  }
};
exports.boldBackgroundColor = boldBackgroundColor;
var boldTextColor = {
  default: {
    light: _theme.colors.N0,
    dark: _theme.colors.N0
  },
  inprogress: {
    light: _theme.colors.N0,
    dark: _theme.colors.N0
  },
  moved: {
    light: _theme.colors.N800,
    dark: _theme.colors.N800
  },
  new: {
    light: _theme.colors.N0,
    dark: _theme.colors.N0
  },
  removed: {
    light: _theme.colors.N0,
    dark: _theme.colors.N0
  },
  success: {
    light: _theme.colors.N0,
    dark: _theme.colors.N0
  }
};
exports.boldTextColor = boldTextColor;
var Theme = (0, _theme.createTheme)(function (_ref) {
  var appearance = _ref.appearance,
      isBold = _ref.isBold,
      maxWidth = _ref.maxWidth;
  return (0, _objectSpread2.default)({}, (0, _typeof2.default)(appearance) === 'object' ? (0, _objectSpread2.default)({
    backgroundColor: (isBold ? boldBackgroundColor : backgroundColor).default.light,
    textColor: (isBold ? boldTextColor : textColor).default.light
  }, appearance) : {
    backgroundColor: (isBold ? boldBackgroundColor[appearance] : backgroundColor[appearance]).light,
    textColor: (isBold ? boldTextColor[appearance] : textColor[appearance]).light
  }, {
    maxWidth: maxWidth
  });
});
exports.Theme = Theme;