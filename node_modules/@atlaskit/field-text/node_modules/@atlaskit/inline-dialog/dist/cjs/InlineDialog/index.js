"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InlineDialogWithoutAnalytics = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _reactNodeResolver = _interopRequireDefault(require("react-node-resolver"));

var _popper = require("@atlaskit/popper");

var _package = require("../../package.json");

var _styled = require("./styled");

var InlineDialog =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(InlineDialog, _Component);

  function InlineDialog() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, InlineDialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(InlineDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "containerRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "triggerRef", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClickOutside", function (event) {
      var _this$props = _this.props,
          isOpen = _this$props.isOpen,
          onClose = _this$props.onClose;
      if (event.defaultPrevented) return;
      var container = _this.containerRef;
      var trigger = _this.triggerRef;
      var target = event.target; // exit if we click outside but on the trigger â€” it can handle the clicks itself

      if (trigger && trigger.contains(target)) return; // call onClose if the click originated from outside the dialog

      if (isOpen && container && !container.contains(target)) {
        onClose({
          isOpen: false,
          event: event
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(InlineDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (typeof window === 'undefined') return;

      if (!prevProps.isOpen && this.props.isOpen) {
        window.addEventListener('click', this.handleClickOutside, true);
      } else if (prevProps.isOpen && !this.props.isOpen) {
        window.removeEventListener('click', this.handleClickOutside);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window === 'undefined') return;

      if (this.props.isOpen) {
        window.addEventListener('click', this.handleClickOutside, true);
      }
    }
  }, {
    key: "componentWillUnMount",
    value: function componentWillUnMount() {
      if (typeof window === 'undefined') return;
      window.removeEventListener('click', this.handleClickOutside);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          placement = _this$props2.placement,
          isOpen = _this$props2.isOpen,
          content = _this$props2.content,
          onContentBlur = _this$props2.onContentBlur,
          onContentFocus = _this$props2.onContentFocus,
          onContentClick = _this$props2.onContentClick;
      var popper = isOpen ? _react.default.createElement(_popper.Popper, {
        placement: placement
      }, function (_ref) {
        var ref = _ref.ref,
            style = _ref.style,
            outOfBoundaries = _ref.outOfBoundaries;
        return _react.default.createElement(_styled.Container, {
          onBlur: onContentBlur,
          onFocus: onContentFocus,
          onClick: onContentClick,
          outOfBoundaries: outOfBoundaries,
          innerRef: function innerRef(node) {
            _this2.containerRef = node;
            ref(node);
          },
          style: style
        }, content);
      }) : null;
      return _react.default.createElement(_popper.Manager, null, _react.default.createElement(_popper.Reference, null, function (_ref2) {
        var ref = _ref2.ref;
        return _react.default.createElement(_reactNodeResolver.default, {
          innerRef: function innerRef(node) {
            _this2.triggerRef = node;
            ref(node);
          }
        }, children);
      }), popper);
    }
  }]);
  return InlineDialog;
}(_react.Component);

exports.InlineDialogWithoutAnalytics = InlineDialog;
(0, _defineProperty2.default)(InlineDialog, "defaultProps", {
  children: null,
  content: null,
  isOpen: false,
  onContentBlur: function onContentBlur() {},
  onContentClick: function onContentClick() {},
  onContentFocus: function onContentFocus() {},
  onClose: function onClose() {},
  placement: 'bottom-start'
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'inlineDialog',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onClose: createAndFireEventOnAtlaskit({
    action: 'closed',
    actionSubject: 'inlineDialog',
    attributes: {
      componentName: 'inlineDialog',
      packageName: _package.name,
      packageVersion: _package.version
    }
  })
})(InlineDialog));

exports.default = _default;