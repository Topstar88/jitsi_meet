"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));

var _exenv = require("exenv");

var createContainer = function createContainer(zIndex) {
  var container = document.createElement('div');
  container.setAttribute('class', 'atlaskit-portal');
  container.setAttribute('style', "z-index: ".concat(zIndex, ";"));
  return container;
};

var body = function body() {
  (0, _tinyInvariant.default)(document && document.body, 'cannot find document.body');
  return document.body;
};

var portalParent = function portalParent() {
  var parentElement = document.querySelector('body > .atlaskit-portal-container');

  if (!parentElement) {
    var parent = document.createElement('div');
    parent.setAttribute('class', 'atlaskit-portal-container');
    parent.setAttribute('style', "display: flex;");
    body().appendChild(parent);
    return parent;
  }

  return parentElement;
}; // This is a generic component does two things:
// 1. Portals it's children using React.createPortal
// 2. Creates the DOM node container for the portal based on props
// 3. Ensures DOM the container creates it's own stacking context


var Portal =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Portal, _React$Component);

  function Portal() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Portal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      container: _exenv.canUseDOM ? createContainer(_this.props.zIndex) : undefined,
      portalIsMounted: false
    });
    return _this;
  }

  (0, _createClass2.default)(Portal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var container = this.state.container;
      var zIndex = this.props.zIndex;

      if (container && prevProps.zIndex !== zIndex) {
        var newContainer = createContainer(zIndex);
        portalParent().replaceChild(container, newContainer); // eslint-disable-next-line react/no-did-update-set-state

        this.setState({
          container: newContainer
        });
      } else if (!prevState.container && container) {
        // SSR path
        portalParent().appendChild(container);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var container = this.state.container;
      var zIndex = this.props.zIndex;

      if (container) {
        portalParent().appendChild(container);
      } else {
        // SSR path
        var newContainer = createContainer(zIndex); // eslint-disable-next-line react/no-did-mount-set-state

        this.setState({
          container: newContainer
        });
      } // eslint-disable-next-line react/no-did-mount-set-state


      this.setState({
        portalIsMounted: true
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var container = this.state.container;

      if (container) {
        portalParent().removeChild(container); // clean up parent element if there are no more portals

        var portals = !!document.querySelector('body > .atlaskit-portal-container > .atlaskit-portal');

        if (!portals) {
          body().removeChild(portalParent());
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          container = _this$state.container,
          portalIsMounted = _this$state.portalIsMounted;
      return container && portalIsMounted ? _reactDom.default.createPortal(this.props.children, container) : null;
    }
  }]);
  return Portal;
}(_react.default.Component);

(0, _defineProperty2.default)(Portal, "defaultProps", {
  zIndex: 0
});
var _default = Portal;
exports.default = _default;