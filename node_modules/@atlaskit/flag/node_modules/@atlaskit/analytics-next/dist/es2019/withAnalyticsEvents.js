import React, { forwardRef } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
import { usePatchedProps } from './usePatchedProps';
const withAnalyticsEvents = (createEventMap = {}) => (WrappedComponent) => {
    const WithAnalyticsEvents = forwardRef((props, ref) => {
        const { patchedEventProps } = usePatchedProps(createEventMap, props);
        const { createAnalyticsEvent } = useAnalyticsEvents();
        return (React.createElement(WrappedComponent, Object.assign({}, props, patchedEventProps, { createAnalyticsEvent: createAnalyticsEvent, ref: ref })));
    });
    // @ts-ignore
    WithAnalyticsEvents.displayName = `WithAnalyticsEvents(${
    // @ts-ignore disneyName doesn't exist on type
    WrappedComponent.displayName || WrappedComponent.name})`;
    return WithAnalyticsEvents;
};
export default withAnalyticsEvents;
//# sourceMappingURL=withAnalyticsEvents.js.map