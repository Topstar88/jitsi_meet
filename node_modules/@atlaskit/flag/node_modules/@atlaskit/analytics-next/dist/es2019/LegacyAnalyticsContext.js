import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { default as AnalyticsReactContext, } from '@atlaskit/analytics-next-stable-react-context';
const ContextTypes = {
    getAtlaskitAnalyticsContext: PropTypes.func,
    getAtlaskitAnalyticsEventHandlers: PropTypes.func,
};
const noop = () => [];
// eslint-disable-next-line @repo/internal/react/no-class-components
class AnalyticsContext extends Component {
    constructor(props) {
        super(props);
        this.getChildContext = () => ({
            getAtlaskitAnalyticsContext: this.getAnalyticsContext,
        });
        this.getAnalyticsContext = () => {
            const { data } = this.props;
            const { getAtlaskitAnalyticsContext = noop } = this.context;
            return [...getAtlaskitAnalyticsContext(), data];
        };
        this.getAnalyticsEventHandlers = () => {
            const { getAtlaskitAnalyticsEventHandlers = noop } = this.context;
            return getAtlaskitAnalyticsEventHandlers();
        };
        this.contextValue = {
            getAtlaskitAnalyticsContext: this.getAnalyticsContext,
            getAtlaskitAnalyticsEventHandlers: this.getAnalyticsEventHandlers,
        };
    }
    render() {
        const { children } = this.props;
        return (React.createElement(AnalyticsReactContext.Provider, { value: this.contextValue }, children));
    }
}
AnalyticsContext.contextTypes = ContextTypes;
AnalyticsContext.childContextTypes = ContextTypes;
export default AnalyticsContext;
//# sourceMappingURL=LegacyAnalyticsContext.js.map