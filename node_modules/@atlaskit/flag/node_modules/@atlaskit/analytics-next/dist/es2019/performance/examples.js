import React, { useCallback } from 'react';
import { fireEvent } from '@testing-library/react';
import AnalyticsListener from '../AnalyticsListener';
import createAndFireEvent from '../createAndFireEvent';
import { useAnalyticsEvents } from '../useAnalyticsEvents';
import { useCallbackWithAnalytics } from '../useCallbackWithAnalytics';
import { usePlatformLeafEventHandler } from '../usePlatformLeafEventHandler';
import withAnalyticsContext from '../withAnalyticsContext';
import withAnalyticsEvents from '../withAnalyticsEvents';
const ButtonWithUsePlatformLeafEventHandlerHook = ({ onClick: providedOnClick, }) => {
    const onClick = usePlatformLeafEventHandler({
        fn: providedOnClick,
        componentName: 'perf-test-button',
        packageName: '@atlaskit/perf-test-button',
        packageVersion: '0.1.0',
        action: 'clicked',
        analyticsData: {
            additionalData: true,
        },
    });
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
};
const ButtonWithUseAnalyticsEventHook = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(({ onClick: providedOnClick }) => {
    const { createAnalyticsEvent } = useAnalyticsEvents();
    const onClick = useCallback((mouseEvt) => {
        const analyticsEvent = createAnalyticsEvent({
            action: 'clicked',
            actionSubject: 'perf-test-button',
            attributes: {
                componentName: 'perf-test-button',
                packageName: '@atlaskit/perf-test-button',
                packageVersion: '0.1.0',
            },
        });
        analyticsEvent.fire('atlaskit');
        providedOnClick(mouseEvt);
    }, [providedOnClick, createAnalyticsEvent]);
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
const ButtonWithUseCallbackWithAnalyticsHook = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(({ onClick: providedOnClick }) => {
    const onClick = useCallbackWithAnalytics(providedOnClick, {
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }, 'atlaskit');
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
const ButtonWithHOCs = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(withAnalyticsEvents({
    onClick: createAndFireEvent('atlaskit')({
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }),
})(({ onClick }) => {
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
}));
const createEventHandler = () => {
    let done = (...args) => { };
    let promise;
    const onEvent = (...args) => {
        done(args);
    };
    const create = () => {
        promise = new Promise(resolve => {
            done = resolve;
        });
    };
    const getPromise = () => promise;
    return { onEvent, create, getPromise };
};
const eventHandler = createEventHandler();
const WithListener = (Component) => () => {
    eventHandler.create();
    const onEvent = eventHandler.onEvent;
    const onClick = () => { };
    return (React.createElement(AnalyticsListener, { channel: "atlaskit", onEvent: onEvent },
        React.createElement(Component, { onClick: onClick })));
};
const interactionTasks = [
    {
        name: 'Dispatch event',
        description: 'Recording how long it takes to fire and receive an event on the listener',
        run: async ({ container }) => {
            const button = container.querySelector('button');
            if (button == null) {
                throw new Error('Could not find button element');
            }
            fireEvent.click(button);
            await eventHandler.getPromise();
        },
    },
];
export const UsePlatformLeafEventHandlerHookTest = WithListener(ButtonWithUsePlatformLeafEventHandlerHook);
export const UseAnalyticsEventHookTest = WithListener(ButtonWithUseAnalyticsEventHook);
export const UseCallbackWithAnalyticsHookTest = WithListener(ButtonWithUseCallbackWithAnalyticsHook);
export const HOCSTest = WithListener(ButtonWithHOCs);
UsePlatformLeafEventHandlerHookTest.story = {
    name: 'usePlatformLeafEventHandler based component',
    component: UsePlatformLeafEventHandlerHookTest,
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
UseAnalyticsEventHookTest.story = {
    name: 'useAnalyticsEvent based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
UseCallbackWithAnalyticsHookTest.story = {
    name: 'useCallbackWithAnalytics based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
HOCSTest.story = {
    name: 'HOC based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
//# sourceMappingURL=examples.js.map