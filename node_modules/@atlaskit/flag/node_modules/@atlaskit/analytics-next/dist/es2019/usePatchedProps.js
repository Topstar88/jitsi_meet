import { useMemo } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
export function usePatchedProps(createEventMap = {}, wrappedComponentProps) {
    const { createAnalyticsEvent } = useAnalyticsEvents();
    const patchedProps = useMemo(() => {
        return Object.keys(createEventMap).reduce((p, k) => {
            const eventCreator = createEventMap[k];
            if (!['object', 'function'].includes(typeof eventCreator)) {
                return p;
            }
            const propValue = wrappedComponentProps[k];
            const wrappedCallback = (...args) => {
                const analyticsEvent = typeof eventCreator === 'function'
                    ? eventCreator(createAnalyticsEvent, wrappedComponentProps)
                    : createAnalyticsEvent(eventCreator);
                if (propValue && typeof propValue === 'function') {
                    propValue(...args, analyticsEvent);
                }
            };
            return wrappedCallback ? { ...p, [k]: wrappedCallback } : p;
        }, {});
    }, [createEventMap, wrappedComponentProps, createAnalyticsEvent]);
    return {
        patchedEventProps: patchedProps,
    };
}
//# sourceMappingURL=usePatchedProps.js.map