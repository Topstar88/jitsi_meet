import { __extends, __read, __spread } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { default as AnalyticsReactContext, } from '@atlaskit/analytics-next-stable-react-context';
var ContextTypes = {
    getAtlaskitAnalyticsContext: PropTypes.func,
    getAtlaskitAnalyticsEventHandlers: PropTypes.func,
};
var noop = function () { return []; };
// eslint-disable-next-line @repo/internal/react/no-class-components
var AnalyticsContext = /** @class */ (function (_super) {
    __extends(AnalyticsContext, _super);
    function AnalyticsContext(props) {
        var _this = _super.call(this, props) || this;
        _this.getChildContext = function () { return ({
            getAtlaskitAnalyticsContext: _this.getAnalyticsContext,
        }); };
        _this.getAnalyticsContext = function () {
            var data = _this.props.data;
            var _a = _this.context.getAtlaskitAnalyticsContext, getAtlaskitAnalyticsContext = _a === void 0 ? noop : _a;
            return __spread(getAtlaskitAnalyticsContext(), [data]);
        };
        _this.getAnalyticsEventHandlers = function () {
            var _a = _this.context.getAtlaskitAnalyticsEventHandlers, getAtlaskitAnalyticsEventHandlers = _a === void 0 ? noop : _a;
            return getAtlaskitAnalyticsEventHandlers();
        };
        _this.contextValue = {
            getAtlaskitAnalyticsContext: _this.getAnalyticsContext,
            getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers,
        };
        return _this;
    }
    AnalyticsContext.prototype.render = function () {
        var children = this.props.children;
        return (React.createElement(AnalyticsReactContext.Provider, { value: this.contextValue }, children));
    };
    AnalyticsContext.contextTypes = ContextTypes;
    AnalyticsContext.childContextTypes = ContextTypes;
    return AnalyticsContext;
}(Component));
export default AnalyticsContext;
//# sourceMappingURL=LegacyAnalyticsContext.js.map