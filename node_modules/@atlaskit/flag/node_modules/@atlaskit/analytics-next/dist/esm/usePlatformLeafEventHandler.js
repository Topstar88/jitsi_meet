import { __assign } from "tslib";
import { useCallback } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
import { useTrackedRef } from './useTrackedRef';
// WARNING: This hook will only function correctly for leaf node components - as in
// no children inside the component will require analytics themselves.
// Ignoring this warning will mean the analytics context of child components will not
// include the context of this component, .e.g, lost data.
// If you are going to have child components that require analytics use withAnalytics
// or AnalyticsContext component instead.
export function usePlatformLeafEventHandler(_a) {
    var fn = _a.fn, action = _a.action, componentName = _a.componentName, packageName = _a.packageName, packageVersion = _a.packageVersion, analyticsData = _a.analyticsData;
    var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;
    // We put analyticsData and fn in a ref so that we don't need to break
    // memoization.
    // Generally these could be defined by consumers inline
    // and so we do this to avoid breaking memoization of useCallback
    var dataRef = useTrackedRef(analyticsData);
    var fnRef = useTrackedRef(fn);
    var handler = useCallback(function (value) {
        var analyticsEvent = createAnalyticsEvent({
            action: action,
            actionSubject: componentName,
            attributes: {
                componentName: componentName,
                packageName: packageName,
                packageVersion: packageVersion,
            },
        });
        // To avoid wrapping this component in AnalyticsContext we manually
        // push the parent context's meta data into the context.
        // Note: this new 'context'
        var context = __assign({ componentName: componentName,
            packageName: packageName,
            packageVersion: packageVersion }, dataRef.current);
        analyticsEvent.context.push(context);
        // fire an event on the atlaskit channel
        var clone = analyticsEvent.clone();
        if (clone) {
            clone.fire('atlaskit');
        }
        fnRef.current(value, analyticsEvent);
    }, [
        // These are strings and won't change
        action,
        componentName,
        packageName,
        packageVersion,
        // This function is memoized in the context
        createAnalyticsEvent,
        // these are a stable ref because of the useTrackedRef hook
        dataRef,
        fnRef,
    ]);
    return handler;
}
//# sourceMappingURL=usePlatformLeafEventHandler.js.map