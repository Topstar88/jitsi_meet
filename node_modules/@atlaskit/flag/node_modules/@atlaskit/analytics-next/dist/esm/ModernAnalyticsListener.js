import { __read, __spread } from "tslib";
import React, { useCallback, useMemo } from 'react';
import { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';
import { useAnalyticsContext } from './useAnalyticsContext';
import { useTrackedRef } from './useTrackedRef';
var AnalyticsListener = function (_a) {
    var children = _a.children, channel = _a.channel, onEvent = _a.onEvent;
    var analyticsContext = useAnalyticsContext();
    var onEventRef = useTrackedRef(onEvent);
    var channelRef = useTrackedRef(channel);
    var getAtlaskitAnalyticsEventHandlers = useCallback(function () {
        var thisHandler = function (event, eventChannel) {
            if (channelRef.current === '*' || channelRef.current === eventChannel) {
                onEventRef.current(event, eventChannel);
            }
        };
        return __spread(analyticsContext.getAtlaskitAnalyticsEventHandlers(), [
            thisHandler,
        ]);
    }, [analyticsContext, channelRef, onEventRef]);
    var value = useMemo(function () {
        return {
            getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,
            getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext,
        };
    }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);
    return (React.createElement(AnalyticsReactContext.Provider, { value: value }, children));
};
export default AnalyticsListener;
//# sourceMappingURL=ModernAnalyticsListener.js.map