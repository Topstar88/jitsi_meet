import { __read, __spread } from "tslib";
import { useCallback } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
import { useTrackedRef } from './useTrackedRef';
export var useCallbackWithAnalytics = function (method, payload, channel) {
    var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;
    var methodRef = useTrackedRef(method);
    var payloadRef = useTrackedRef(payload);
    return useCallback(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var pload = typeof payloadRef.current === 'function'
            ? payloadRef.current.apply(payloadRef, __spread(args)) : payloadRef.current;
        createAnalyticsEvent(pload).fire(channel);
        methodRef.current.apply(methodRef, __spread(args));
    }, [createAnalyticsEvent, methodRef, payloadRef, channel]);
};
//# sourceMappingURL=useCallbackWithAnalytics.js.map