import { __assign } from "tslib";
import React, { forwardRef } from 'react';
import { useAnalyticsEvents } from './useAnalyticsEvents';
import { usePatchedProps } from './usePatchedProps';
var withAnalyticsEvents = function (createEventMap) {
    if (createEventMap === void 0) { createEventMap = {}; }
    return function (WrappedComponent) {
        var WithAnalyticsEvents = forwardRef(function (props, ref) {
            var patchedEventProps = usePatchedProps(createEventMap, props).patchedEventProps;
            var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;
            return (React.createElement(WrappedComponent, __assign({}, props, patchedEventProps, { createAnalyticsEvent: createAnalyticsEvent, ref: ref })));
        });
        // @ts-ignore
        WithAnalyticsEvents.displayName = "WithAnalyticsEvents(" + (
        // @ts-ignore disneyName doesn't exist on type
        WrappedComponent.displayName || WrappedComponent.name) + ")";
        return WithAnalyticsEvents;
    };
};
export default withAnalyticsEvents;
//# sourceMappingURL=withAnalyticsEvents.js.map