import { __awaiter, __generator } from "tslib";
import React, { useCallback } from 'react';
import { fireEvent } from '@testing-library/react';
import AnalyticsListener from '../AnalyticsListener';
import createAndFireEvent from '../createAndFireEvent';
import { useAnalyticsEvents } from '../useAnalyticsEvents';
import { useCallbackWithAnalytics } from '../useCallbackWithAnalytics';
import { usePlatformLeafEventHandler } from '../usePlatformLeafEventHandler';
import withAnalyticsContext from '../withAnalyticsContext';
import withAnalyticsEvents from '../withAnalyticsEvents';
var ButtonWithUsePlatformLeafEventHandlerHook = function (_a) {
    var providedOnClick = _a.onClick;
    var onClick = usePlatformLeafEventHandler({
        fn: providedOnClick,
        componentName: 'perf-test-button',
        packageName: '@atlaskit/perf-test-button',
        packageVersion: '0.1.0',
        action: 'clicked',
        analyticsData: {
            additionalData: true,
        },
    });
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
};
var ButtonWithUseAnalyticsEventHook = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(function (_a) {
    var providedOnClick = _a.onClick;
    var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;
    var onClick = useCallback(function (mouseEvt) {
        var analyticsEvent = createAnalyticsEvent({
            action: 'clicked',
            actionSubject: 'perf-test-button',
            attributes: {
                componentName: 'perf-test-button',
                packageName: '@atlaskit/perf-test-button',
                packageVersion: '0.1.0',
            },
        });
        analyticsEvent.fire('atlaskit');
        providedOnClick(mouseEvt);
    }, [providedOnClick, createAnalyticsEvent]);
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
var ButtonWithUseCallbackWithAnalyticsHook = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(function (_a) {
    var providedOnClick = _a.onClick;
    var onClick = useCallbackWithAnalytics(providedOnClick, {
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }, 'atlaskit');
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
var ButtonWithHOCs = withAnalyticsContext({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(withAnalyticsEvents({
    onClick: createAndFireEvent('atlaskit')({
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }),
})(function (_a) {
    var onClick = _a.onClick;
    return (React.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
}));
var createEventHandler = function () {
    var done = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    };
    var promise;
    var onEvent = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        done(args);
    };
    var create = function () {
        promise = new Promise(function (resolve) {
            done = resolve;
        });
    };
    var getPromise = function () { return promise; };
    return { onEvent: onEvent, create: create, getPromise: getPromise };
};
var eventHandler = createEventHandler();
var WithListener = function (Component) { return function () {
    eventHandler.create();
    var onEvent = eventHandler.onEvent;
    var onClick = function () { };
    return (React.createElement(AnalyticsListener, { channel: "atlaskit", onEvent: onEvent },
        React.createElement(Component, { onClick: onClick })));
}; };
var interactionTasks = [
    {
        name: 'Dispatch event',
        description: 'Recording how long it takes to fire and receive an event on the listener',
        run: function (_a) {
            var container = _a.container;
            return __awaiter(void 0, void 0, void 0, function () {
                var button;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            button = container.querySelector('button');
                            if (button == null) {
                                throw new Error('Could not find button element');
                            }
                            fireEvent.click(button);
                            return [4 /*yield*/, eventHandler.getPromise()];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
];
export var UsePlatformLeafEventHandlerHookTest = WithListener(ButtonWithUsePlatformLeafEventHandlerHook);
export var UseAnalyticsEventHookTest = WithListener(ButtonWithUseAnalyticsEventHook);
export var UseCallbackWithAnalyticsHookTest = WithListener(ButtonWithUseCallbackWithAnalyticsHook);
export var HOCSTest = WithListener(ButtonWithHOCs);
UsePlatformLeafEventHandlerHookTest.story = {
    name: 'usePlatformLeafEventHandler based component',
    component: UsePlatformLeafEventHandlerHookTest,
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
UseAnalyticsEventHookTest.story = {
    name: 'useAnalyticsEvent based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
UseCallbackWithAnalyticsHookTest.story = {
    name: 'useCallbackWithAnalytics based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
HOCSTest.story = {
    name: 'HOC based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
//# sourceMappingURL=examples.js.map