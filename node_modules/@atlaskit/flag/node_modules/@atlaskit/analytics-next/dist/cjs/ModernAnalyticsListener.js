"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var analytics_next_stable_react_context_1 = tslib_1.__importDefault(require("@atlaskit/analytics-next-stable-react-context"));
var useAnalyticsContext_1 = require("./useAnalyticsContext");
var useTrackedRef_1 = require("./useTrackedRef");
var AnalyticsListener = function (_a) {
    var children = _a.children, channel = _a.channel, onEvent = _a.onEvent;
    var analyticsContext = useAnalyticsContext_1.useAnalyticsContext();
    var onEventRef = useTrackedRef_1.useTrackedRef(onEvent);
    var channelRef = useTrackedRef_1.useTrackedRef(channel);
    var getAtlaskitAnalyticsEventHandlers = react_1.useCallback(function () {
        var thisHandler = function (event, eventChannel) {
            if (channelRef.current === '*' || channelRef.current === eventChannel) {
                onEventRef.current(event, eventChannel);
            }
        };
        return tslib_1.__spread(analyticsContext.getAtlaskitAnalyticsEventHandlers(), [
            thisHandler,
        ]);
    }, [analyticsContext, channelRef, onEventRef]);
    var value = react_1.useMemo(function () {
        return {
            getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,
            getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext,
        };
    }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);
    return (react_1.default.createElement(analytics_next_stable_react_context_1.default.Provider, { value: value }, children));
};
exports.default = AnalyticsListener;
//# sourceMappingURL=ModernAnalyticsListener.js.map