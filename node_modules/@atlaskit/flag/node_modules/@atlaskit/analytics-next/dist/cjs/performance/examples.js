"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HOCSTest = exports.UseCallbackWithAnalyticsHookTest = exports.UseAnalyticsEventHookTest = exports.UsePlatformLeafEventHandlerHookTest = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_2 = require("@testing-library/react");
var AnalyticsListener_1 = tslib_1.__importDefault(require("../AnalyticsListener"));
var createAndFireEvent_1 = tslib_1.__importDefault(require("../createAndFireEvent"));
var useAnalyticsEvents_1 = require("../useAnalyticsEvents");
var useCallbackWithAnalytics_1 = require("../useCallbackWithAnalytics");
var usePlatformLeafEventHandler_1 = require("../usePlatformLeafEventHandler");
var withAnalyticsContext_1 = tslib_1.__importDefault(require("../withAnalyticsContext"));
var withAnalyticsEvents_1 = tslib_1.__importDefault(require("../withAnalyticsEvents"));
var ButtonWithUsePlatformLeafEventHandlerHook = function (_a) {
    var providedOnClick = _a.onClick;
    var onClick = usePlatformLeafEventHandler_1.usePlatformLeafEventHandler({
        fn: providedOnClick,
        componentName: 'perf-test-button',
        packageName: '@atlaskit/perf-test-button',
        packageVersion: '0.1.0',
        action: 'clicked',
        analyticsData: {
            additionalData: true,
        },
    });
    return (react_1.default.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
};
var ButtonWithUseAnalyticsEventHook = withAnalyticsContext_1.default({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(function (_a) {
    var providedOnClick = _a.onClick;
    var createAnalyticsEvent = useAnalyticsEvents_1.useAnalyticsEvents().createAnalyticsEvent;
    var onClick = react_1.useCallback(function (mouseEvt) {
        var analyticsEvent = createAnalyticsEvent({
            action: 'clicked',
            actionSubject: 'perf-test-button',
            attributes: {
                componentName: 'perf-test-button',
                packageName: '@atlaskit/perf-test-button',
                packageVersion: '0.1.0',
            },
        });
        analyticsEvent.fire('atlaskit');
        providedOnClick(mouseEvt);
    }, [providedOnClick, createAnalyticsEvent]);
    return (react_1.default.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
var ButtonWithUseCallbackWithAnalyticsHook = withAnalyticsContext_1.default({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(function (_a) {
    var providedOnClick = _a.onClick;
    var onClick = useCallbackWithAnalytics_1.useCallbackWithAnalytics(providedOnClick, {
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }, 'atlaskit');
    return (react_1.default.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
});
var ButtonWithHOCs = withAnalyticsContext_1.default({
    componentName: 'perf-test-button',
    packageName: '@atlaskit/perf-test-button',
    packageVersion: '0.1.0',
    additionalData: true,
})(withAnalyticsEvents_1.default({
    onClick: createAndFireEvent_1.default('atlaskit')({
        action: 'clicked',
        actionSubject: 'perf-test-button',
        attributes: {
            componentName: 'perf-test-button',
            packageName: '@atlaskit/perf-test-button',
            packageVersion: '0.1.0',
        },
    }),
})(function (_a) {
    var onClick = _a.onClick;
    return (react_1.default.createElement("button", { onClick: onClick, "data-testid": "button" }, "Click me"));
}));
var createEventHandler = function () {
    var done = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    };
    var promise;
    var onEvent = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        done(args);
    };
    var create = function () {
        promise = new Promise(function (resolve) {
            done = resolve;
        });
    };
    var getPromise = function () { return promise; };
    return { onEvent: onEvent, create: create, getPromise: getPromise };
};
var eventHandler = createEventHandler();
var WithListener = function (Component) { return function () {
    eventHandler.create();
    var onEvent = eventHandler.onEvent;
    var onClick = function () { };
    return (react_1.default.createElement(AnalyticsListener_1.default, { channel: "atlaskit", onEvent: onEvent },
        react_1.default.createElement(Component, { onClick: onClick })));
}; };
var interactionTasks = [
    {
        name: 'Dispatch event',
        description: 'Recording how long it takes to fire and receive an event on the listener',
        run: function (_a) {
            var container = _a.container;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var button;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            button = container.querySelector('button');
                            if (button == null) {
                                throw new Error('Could not find button element');
                            }
                            react_2.fireEvent.click(button);
                            return [4 /*yield*/, eventHandler.getPromise()];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
];
exports.UsePlatformLeafEventHandlerHookTest = WithListener(ButtonWithUsePlatformLeafEventHandlerHook);
exports.UseAnalyticsEventHookTest = WithListener(ButtonWithUseAnalyticsEventHook);
exports.UseCallbackWithAnalyticsHookTest = WithListener(ButtonWithUseCallbackWithAnalyticsHook);
exports.HOCSTest = WithListener(ButtonWithHOCs);
exports.UsePlatformLeafEventHandlerHookTest.story = {
    name: 'usePlatformLeafEventHandler based component',
    component: exports.UsePlatformLeafEventHandlerHookTest,
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
exports.UseAnalyticsEventHookTest.story = {
    name: 'useAnalyticsEvent based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
exports.UseCallbackWithAnalyticsHookTest.story = {
    name: 'useCallbackWithAnalytics based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
exports.HOCSTest.story = {
    name: 'HOC based component',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
//# sourceMappingURL=examples.js.map