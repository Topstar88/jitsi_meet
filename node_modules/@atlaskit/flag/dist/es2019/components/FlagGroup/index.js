import React, { Children, cloneElement, Component } from 'react';
import { Transition } from 'react-transition-group';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import Wrapper, { flagAnimationTime } from '../../styled/Wrapper';
import Group, { Inner, SROnly } from './styledFlagGroup';
export default class FlagGroup extends Component {
    constructor() {
        super(...arguments);
        this.renderChildren = () => {
            const { children, onDismissed } = this.props;
            return Children.map(children, (flag, index) => {
                const isDismissAllowed = index === 0;
                const { id } = flag.props;
                return (
                // @ts-ignore: Bug in types - 'timeout' prop should not be required when addEndListener is provided
                React.createElement(Transition, { key: id, addEndListener: (node, done) => {
                        if (index > 0) {
                            done();
                            return;
                        }
                        node.addEventListener('animationstart', (...args) => {
                            this.animationTimeoutId = window.setTimeout(() => done(...args), flagAnimationTime);
                        });
                        node.addEventListener('animationend', done);
                    } }, (transitionState) => (React.createElement(Wrapper, { transitionState: transitionState }, cloneElement(flag, { onDismissed, isDismissAllowed })))));
            });
        };
    }
    componentWillUnmount() {
        window.clearTimeout(this.animationTimeoutId);
    }
    render() {
        const { children, label, labelTag } = this.props;
        const shouldRenderScreenReaderText = !(!children ||
            (children && children.length === 0));
        return (React.createElement(Portal, { zIndex: layers.flag() },
            React.createElement(Group, null,
                shouldRenderScreenReaderText ? (React.createElement(SROnly, { tag: labelTag }, label)) : null,
                React.createElement(Inner, { component: "div" }, this.renderChildren()))));
    }
}
FlagGroup.defaultProps = {
    label: 'Flag notifications',
    labelTag: 'h2',
};
//# sourceMappingURL=index.js.map