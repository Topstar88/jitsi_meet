import React, { Component } from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import ChevronDownIcon from '@atlaskit/icon/glyph/chevron-down';
import ChevronUpIcon from '@atlaskit/icon/glyph/chevron-up';
import CrossIcon from '@atlaskit/icon/glyph/cross';
import { DEFAULT_APPEARANCE } from '../../constants';
import { flagFocusRingColor } from '../../theme';
import { name as packageName, version as packageVersion, } from '../../version.json';
import Expander from '../Expander';
import Actions from '../FlagActions';
import Container, { Content, Description, DismissButton, Header, Icon, Title, } from './styledFlag';
class Flag extends Component {
    constructor() {
        super(...arguments);
        this.state = { isExpanded: false };
        this.dismissFlag = () => {
            if (this.props.isDismissAllowed && this.props.onDismissed) {
                this.props.onDismissed(this.props.id);
            }
        };
        this.isBold = () => this.props.appearance !== DEFAULT_APPEARANCE;
        this.toggleExpand = () => {
            this.setState({ isExpanded: !this.state.isExpanded });
        };
        this.renderToggleOrDismissButton = () => {
            const { appearance, description, actions, isDismissAllowed, onDismissed, } = this.props;
            const isBold = this.isBold();
            if (!isDismissAllowed ||
                (!isBold && !onDismissed) ||
                (isBold && !description && (!actions || !actions.length))) {
                return null;
            }
            const ChevronIcon = this.state.isExpanded ? ChevronUpIcon : ChevronDownIcon;
            const ButtonIcon = isBold ? ChevronIcon : CrossIcon;
            const buttonLabel = isBold ? 'Toggle flag body' : 'Dismiss flag';
            const buttonAction = isBold ? this.toggleExpand : this.dismissFlag;
            const size = ButtonIcon === ChevronIcon ? 'large' : 'small';
            return (React.createElement(DismissButton, { appearance: appearance, "aria-expanded": this.state.isExpanded, focusRingColor: flagFocusRingColor(this.props), onClick: buttonAction, type: "button" },
                React.createElement(ButtonIcon, { label: buttonLabel, size: size })));
        };
        this.renderBody = () => {
            const { actions, appearance, description, linkComponent, testId, } = this.props;
            const isExpanded = !this.isBold() || this.state.isExpanded;
            return (React.createElement(Expander, { isExpanded: isExpanded },
                description && (React.createElement(Description, { appearance: appearance }, description)),
                React.createElement(Actions, { actions: actions, appearance: appearance, linkComponent: linkComponent, "data-testid": testId })));
        };
        // We prevent default on mouse down to avoid focus ring when the flag is clicked,
        // while still allowing it to be focused with the keyboard.
        this.handleMouseDown = e => {
            e.preventDefault();
        };
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        const { actions, description } = nextProps;
        if (this.isBold() &&
            this.state.isExpanded &&
            !description &&
            (!actions || !actions.length)) {
            this.toggleExpand();
        }
    }
    render() {
        const { appearance, icon, title, onMouseOver, onFocus, onMouseOut, onBlur, testId, } = this.props;
        const autoDismissProps = { onMouseOver, onFocus, onMouseOut, onBlur };
        const OptionalDismissButton = this.renderToggleOrDismissButton;
        const Body = this.renderBody;
        return (React.createElement(Container, Object.assign({ appearance: appearance, role: "alert", tabIndex: 0, onMouseDown: this.handleMouseDown, "data-testid": testId }, autoDismissProps),
            React.createElement(Header, null,
                React.createElement(Icon, null, icon),
                React.createElement(Title, { appearance: appearance }, title),
                React.createElement(OptionalDismissButton, null)),
            React.createElement(Content, null,
                React.createElement(Body, null))));
    }
}
Flag.defaultProps = {
    actions: [],
    appearance: DEFAULT_APPEARANCE,
    isDismissAllowed: false,
};
export { Flag as FlagWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'flag',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    onBlur: createAndFireEventOnAtlaskit({
        action: 'blurred',
        actionSubject: 'flag',
        attributes: {
            componentName: 'flag',
            packageName,
            packageVersion,
        },
    }),
    onDismissed: createAndFireEventOnAtlaskit({
        action: 'dismissed',
        actionSubject: 'flag',
        attributes: {
            componentName: 'flag',
            packageName,
            packageVersion,
        },
    }),
    onFocus: createAndFireEventOnAtlaskit({
        action: 'focused',
        actionSubject: 'flag',
        attributes: {
            componentName: 'flag',
            packageName,
            packageVersion,
        },
    }),
})(Flag));
//# sourceMappingURL=index.js.map