"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconWrapper = exports.CheckboxWrapper = exports.LabelText = exports.Label = exports.HiddenCheckbox = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _theme = require("@atlaskit/theme");

var HiddenCheckbox = _styledComponents.default.input.withConfig({
  displayName: "Checkbox__HiddenCheckbox",
  componentId: "sc-1asqokg-0"
})(["\n  left: 50%;\n  margin: 0;\n  opacity: 0;\n  padding: 0;\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 50%;\n"]);

exports.HiddenCheckbox = HiddenCheckbox;
var disabledColor = (0, _theme.themed)({
  light: _theme.colors.N80,
  dark: _theme.colors.N80
});

var Label = _styledComponents.default.label.withConfig({
  displayName: "Checkbox__Label",
  componentId: "sc-1asqokg-1"
})(["\n  align-items: flex-start;\n  display: flex;\n  color: ", ";\n  ", ";\n"], function (props // $FlowFixMe - theme is not found in props
) {
  return props.isDisabled ? disabledColor(props) : _theme.colors.text(props);
}, function (_ref) {
  var isDisabled = _ref.isDisabled;
  return isDisabled ? (0, _styledComponents.css)(["\n          cursor: not-allowed;\n        "]) : '';
});

exports.Label = Label;
var borderColor = (0, _theme.themed)({
  light: _theme.colors.N40,
  dark: _theme.colors.DN80
});
var focusBorder = (0, _styledComponents.css)(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], (0, _theme.themed)({
  light: _theme.colors.B100,
  dark: _theme.colors.B75
}));
var invalidBorder = (0, _styledComponents.css)(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], (0, _theme.themed)({
  light: _theme.colors.R300,
  dark: _theme.colors.R300
}));
var activeBorder = (0, _styledComponents.css)(["\n  stroke: currentColor;\n  stroke-width: 2px;\n"]);
var checkedBorder = (0, _styledComponents.css)(["\n  stroke: currentColor;\n  stroke-width: 2px;\n"]);
var border = (0, _styledComponents.css)(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], function (_ref2) {
  var isHovered = _ref2.isHovered,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["isHovered"]);
  return isHovered ? (0, _theme.themed)({
    light: _theme.colors.N40,
    dark: _theme.colors.DN200
  })(rest) : borderColor(rest);
});

var getBorderColor = function getBorderColor(props) {
  if (props.isDisabled) return '';
  if (props.isFocused) return focusBorder;
  if (props.isActive) return activeBorder;
  if (props.isInvalid) return invalidBorder;
  if (props.isChecked) return checkedBorder;
  return border;
};

var getTickColor = function getTickColor(props) {
  var isChecked = props.isChecked,
      isDisabled = props.isDisabled,
      isActive = props.isActive,
      rest = (0, _objectWithoutProperties2.default)(props, ["isChecked", "isDisabled", "isActive"]);
  var color = (0, _theme.themed)({
    light: _theme.colors.N10,
    dark: _theme.colors.DN10
  });

  if (isDisabled && isChecked) {
    color = (0, _theme.themed)({
      light: _theme.colors.N70,
      dark: _theme.colors.DN90
    });
  } else if (isActive && isChecked && !isDisabled) {
    color = (0, _theme.themed)({
      light: _theme.colors.B400,
      dark: _theme.colors.DN10
    });
  } else if (!isChecked) {
    color = (0, _theme.themed)({
      light: 'transparent',
      dark: 'transparent'
    });
  }

  return color(rest);
};

var getBoxColor = function getBoxColor(props) {
  var isChecked = props.isChecked,
      isDisabled = props.isDisabled,
      isActive = props.isActive,
      isHovered = props.isHovered,
      rest = (0, _objectWithoutProperties2.default)(props, ["isChecked", "isDisabled", "isActive", "isHovered"]); // set the default

  var color = (0, _theme.themed)({
    light: _theme.colors.N10,
    dark: _theme.colors.DN10
  });

  if (isDisabled) {
    color = (0, _theme.themed)({
      light: _theme.colors.N20,
      dark: _theme.colors.DN10
    });
  } else if (isActive) {
    color = (0, _theme.themed)({
      light: _theme.colors.B50,
      dark: _theme.colors.B200
    });
  } else if (isHovered && isChecked) {
    color = (0, _theme.themed)({
      light: _theme.colors.B300,
      dark: _theme.colors.B75
    });
  } else if (isHovered) {
    color = (0, _theme.themed)({
      light: _theme.colors.N30,
      dark: _theme.colors.DN30
    });
  } else if (isChecked) {
    color = (0, _theme.themed)({
      light: _theme.colors.B400,
      dark: _theme.colors.B400
    });
  }

  return color(rest);
};

var LabelText = _styledComponents.default.span.withConfig({
  displayName: "Checkbox__LabelText",
  componentId: "sc-1asqokg-2"
})(["\n  padding: 2px 4px;\n"]);

exports.LabelText = LabelText;

var CheckboxWrapper = _styledComponents.default.span.withConfig({
  displayName: "Checkbox__CheckboxWrapper",
  componentId: "sc-1asqokg-3"
})(["\n  display: flex;\n  flex-shrink: 0;\n  position: relative;\n"]);

exports.CheckboxWrapper = CheckboxWrapper;

var IconWrapper = _styledComponents.default.span.withConfig({
  displayName: "Checkbox__IconWrapper",
  componentId: "sc-1asqokg-4"
})(["\n  line-height: 0;\n  flex-shrink: 0;\n  color: ", ";\n  fill: ", ";\n  transition: all 0.2s ease-in-out;\n\n  /* This is adding a property to the inner svg, to add a border to the checkbox */\n  & rect:first-child {\n    transition: stroke 0.2s ease-in-out;\n    ", ";\n  }\n"], getBoxColor, getTickColor, getBorderColor);

exports.IconWrapper = IconWrapper;