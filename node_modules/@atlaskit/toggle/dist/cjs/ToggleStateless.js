"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleStatelessWithoutAnalytics = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _uuid = _interopRequireDefault(require("uuid"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _cross = _interopRequireDefault(require("@atlaskit/icon/glyph/cross"));

var _check = _interopRequireDefault(require("@atlaskit/icon/glyph/check"));

var _package = require("../package.json");

var _styled = require("./styled");

var _defaultBaseProps = _interopRequireDefault(require("./defaultBaseProps"));

var ToggleStateless =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ToggleStateless, _Component);

  function ToggleStateless() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ToggleStateless);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToggleStateless)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      isFocused: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleBlur", function (event) {
      _this.setState({
        isFocused: false
      });

      _this.props.onBlur(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleFocus", function (event) {
      _this.setState({
        isFocused: true
      });

      _this.props.onFocus(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (event) {
      if (_this.props.isDisabled) {
        return;
      }

      _this.props.onChange(event);
    });
    return _this;
  }

  (0, _createClass2.default)(ToggleStateless, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          isChecked = _this$props.isChecked,
          isDisabled = _this$props.isDisabled,
          label = _this$props.label,
          name = _this$props.name,
          size = _this$props.size,
          value = _this$props.value;
      var isFocused = this.state.isFocused;
      var styledProps = {
        isChecked: isChecked,
        isDisabled: isDisabled,
        isFocused: isFocused,
        size: size
      };
      var Icon = isChecked ? _check.default : _cross.default;
      var id = (0, _uuid.default)();
      return _react.default.createElement(_styled.Label, {
        size: size,
        isDisabled: isDisabled,
        htmlFor: id
      }, _react.default.createElement(_styled.Input, {
        checked: isChecked,
        disabled: isDisabled,
        id: id,
        name: name,
        onBlur: this.handleBlur,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        type: "checkbox",
        value: value
      }), _react.default.createElement(_styled.Slide, styledProps, _react.default.createElement(_styled.Inner, styledProps, _react.default.createElement(_styled.Handle, {
        isChecked: isChecked,
        isDisabled: isDisabled,
        size: size
      }), _react.default.createElement(_styled.IconWrapper, {
        isChecked: isChecked,
        size: size
      }, _react.default.createElement(Icon, {
        label: label || (isChecked ? 'Uncheck' : 'Check'),
        size: size === 'large' ? null : 'small',
        primaryColor: "inherit"
      })))));
    }
  }]);
  return ToggleStateless;
}(_react.Component);

exports.ToggleStatelessWithoutAnalytics = ToggleStateless;
(0, _defineProperty2.default)(ToggleStateless, "defaultProps", (0, _objectSpread2.default)({}, _defaultBaseProps.default, {
  isChecked: false
}));
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'toggle',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onBlur: createAndFireEventOnAtlaskit({
    action: 'blurred',
    actionSubject: 'toggle',
    attributes: {
      componentName: 'toggle',
      packageName: _package.name,
      packageVersion: _package.version
    }
  }),
  onChange: createAndFireEventOnAtlaskit({
    action: 'changed',
    actionSubject: 'toggle',
    attributes: {
      componentName: 'toggle',
      packageName: _package.name,
      packageVersion: _package.version
    }
  }),
  onFocus: createAndFireEventOnAtlaskit({
    action: 'focused',
    actionSubject: 'toggle',
    attributes: {
      componentName: 'toggle',
      packageName: _package.name,
      packageVersion: _package.version
    }
  })
})(ToggleStateless));

exports.default = _default;