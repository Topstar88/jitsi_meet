"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _theme = require("@atlaskit/theme");

var _constants = require("./constants");

var backgroundColor = (0, _theme.themed)({
  light: _theme.colors.N0,
  dark: _theme.colors.DN600
});
var backgroundColorChecked = (0, _theme.themed)({
  light: _theme.colors.N0,
  dark: _theme.colors.DN0
});
var backgroundColorDisabled = (0, _theme.themed)({
  light: _theme.colors.N0,
  dark: _theme.colors.DN0
});

var getTransform = function getTransform(_ref) {
  var isChecked = _ref.isChecked,
      size = _ref.size;
  return isChecked ? "translateX(".concat((0, _constants.getHeight)({
    size: size
  }), "px)") : 'initial';
};

var getBackgroundColor = function getBackgroundColor(_ref2) {
  var isChecked = _ref2.isChecked,
      isDisabled = _ref2.isDisabled,
      rest = (0, _objectWithoutProperties2.default)(_ref2, ["isChecked", "isDisabled"]);
  if (isDisabled) return backgroundColorDisabled(rest);
  if (isChecked) return backgroundColorChecked(rest);
  return backgroundColor(rest);
};

var _default = _styledComponents.default.span.withConfig({
  displayName: "Handle",
  componentId: "n2edb7-0"
})(["\n  background-color: ", ";\n  border-radius: 50%;\n  bottom: ", "px;\n  content: '';\n  height: ", "px;\n  left: ", "px;\n  position: absolute;\n  transform: ", ";\n  transition: ", ";\n  width: ", "px;\n"], getBackgroundColor, 2 * _constants.paddingUnitless, function (props) {
  return (0, _constants.getHeight)(props) - _constants.paddingUnitless * 2;
}, 2 * _constants.paddingUnitless, getTransform, _constants.transition, function (props) {
  return (0, _constants.getHeight)(props) - _constants.paddingUnitless * 2;
});

exports.default = _default;